ports seeking.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileStream.CanWrite">
            <summary>
            Overridden. Gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileStream.Handle">
            <summary>
            Gets the operating system file handle for the file that the current WstFileStream object encapsulates.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileStream.IsAsync">
            <summary>
            Gets a value indicating whether the FileStream was opened asynchronously or synchronously.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileStream.Length">
            <summary>
            Overridden. Gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileStream.Name">
            <summary>
            Gets the name of the FileStream that was passed to the constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileStream.Position">
            <summary>
            Overridden. Gets or sets the current position of this stream.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileStream.WstFileshare">
            <summary>
            The WstFileShare used to open this stream.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstPath">
            <summary>
            Summary description for WstPath.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstPath.#cctor">
            <summary>
            Preprare static members
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstPath.ValidatePath(System.String,System.String)">
            <summary>
            Validates that the relative path is well formed.
            </summary>
            <param name="path"></param>
            <param name="argument">argument name of the path</param>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.BlacklistManager.unblacklistThreadSleepTime">
            <summary>
            Time interval between each attempt to unblacklist servers.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.BlacklistManager.blacklistTableCodeLock">
            <summary>
            Critical section lock that controls to the blacklist table access. Always acquire this lock before blacklistQueueCodeLock.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.BlacklistManager.blacklistQueueCodeLock">
            <summary>
            Critical section lock that controls to the blacklist queue access. Always acquire this lock after blacklistTableCodeLock.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.BlacklistManager.Blacklist(System.String,Microsoft.Webstore.MetaData.WebstoreResource)">
            <summary>
            Add the input resource to the list of blacklisted resources. 
            </summary>
            <param name="ipAddress">The IP on the resource to blacklist. IP could be the actual servername.</param>
            <param name="resource">The resource to blacklist.</param>
            <Exceptions>ApplicationException if timeout expires before the lock request is granted.</Exceptions>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.BlacklistManager.IsBlacklisted(System.String,Microsoft.Webstore.MetaData.WebstoreResource)">
            <summary>
            Returns whether the input resource is in the list of blacklisted resources.
            </summary>
            <param name="ipAddress">The IP address of the input resource to test whether it is in the list of the blacklisted resources.</param>
            <param name="resource">The input resource to test whether it is in the list of the blacklisted resources.</param>
            <returns>True if the given ip address of the given resource is in the list of the blacklisted resources; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.BlacklistManager.IsBlacklisted(Microsoft.Webstore.MetaData.WebstoreResource)">
            <summary>
            Returns whether the input resource is in the list of blacklisted resources.
            </summary>
            <param name="resource">The input resource to test whether it is in the list of the blacklisted resources.</param>
            <returns>True if the resource is in the list of the blacklisted resources and all its ip addresses are in the blacklist; false otherwise.</returns>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.Blacklisting.BlacklistedResource.lastQueryTime">
            <summary>
            The time of the last query on this resource.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.Blacklisting.BlacklistedResource.enlistedTime">
            <summary>
            The time when this resource is enlisted.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.Blacklisting.BlacklistedResource.lastPersistentFailureLogTime">
            <summary>
            The time of the last time persistent failure event is logged.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.Blacklisting.BlacklistedResource.lastUnblacklistTryTime">
            <summary>
            The time when the resource was last tried to be un-blacklisted.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.Blacklisting.BlacklistedResource.blacklistedIps">
            <summary>
            List of all the blacklisted ip's belong to this resource. If blacklistedIps is null, it means that the resource has no ips but just a server name.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.Blacklisting.BlacklistedResource.blacklistedIpCodeBlock">
            <summary>
            The lock that controls the access to the critical section codes related to the blacklisted ips.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.Blacklisting.BlacklistedResource.DurationSinceLastQuery">
            <summary>
            Duration in seconds since the last time this resource has been queried if it is online.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.Blacklisting.BlacklistedResource.BlacklistStaleDuration">
            <summary>
            Duration in seconds to mark a given resource as blacklisted.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.Blacklisting.BlacklistedResource.DurationSinceEnlisted">
            <summary>
            Duration since this resource was blacklisted.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.Blacklisting.BlacklistedResource.DurationSinceLastUnBlacklistAttempt">
            <summary>
            Duration since this resource was last attempted to be un-blacklisted.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.Blacklisting.BlacklistedResource.DurationForPersistentFailureLog">
            <summary>
            Duration since the last time when this resource was blacklisted or logged as persistent failure.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.Blacklisting.BlacklistedResource.IsPersistentFailure">
            <summary>
            Indicates whether the resource has been long enough to be reported as persistent failure.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.Blacklisting.BlacklistedResource.IsFullyBlacklisted">
            <summary>
            Indicates whether all the ip's for this resource is blacklisted.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.Blacklisting.BlacklistedResource.IsDroppedFromConfig">
            <summary>
            Indicates whether this resource has been taken out from Metadata cache due to a change in the config database.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.Blacklisting.BlacklistedResource.IsFullyReachable">
            <summary>
            Indicates whether all the ip's for this resource is reachable.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ApplicationInterfaceCounters.CategoryHelp">
            <summary>
            Gets the current display help for the category.
            </summary>
            <value>The display help for the category.</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ApplicationInterfaceCounters.PrimaryDatabaseBlacklisted">
            <summary>
            Number of primary databases that are blacklisted.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ApplicationInterfaceCounters.SecondaryDatabaseBlacklisted">
            <summary>
            Number of secondary databases that are blacklisted.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ApplicationInterfaceCounters.PrimaryFileshareBlacklisted">
            <summary>
            Number of primary file shares that are blacklisted.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ApplicationInterfaceCounters.SecondaryFileshareBlacklisted">
            <summary>
            Number of secondary file shares that are blacklisted.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ServerInterfaceCounters.CategoryHelp">
            <summary>
            Gets the current display help for the category.
            </summary>
            <value>The display help for the category.</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ServerInterfaceCounters.ConvergedThrottlingQueuedRequests">
            <summary>
            Gets the number of requests that queue for all the databases of the server.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ServerInterfaceCounters.QueuedRequestsPerSec">
            <summary>
            Gets the number of requests that gets queued per second for all the databases of the server.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ServerInterfaceCounters.QueuedRequestsTotal">
            <summary>
            Gets the number of requests that have been queued for all the databases of the server.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ServerInterfaceCounters.PercentSqlIpBlacklisted">
            <summary>
            Gets the percent of the NIC's that are blacklisted as a part of Sql resources.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ServerInterfaceCounters.PercentFileIpBlacklisted">
            <summary>
            Gets the percent of the NIC's that are blacklisted as a part of fileshare resources.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstClientPerformanceCounterInstaller">
            <summary>
             An installer for Webstore Client Library Performance Counters.
             </summary>
             <remarks>This class can only be invoked by a caller with unrestricted
             RegistryPermission.
             </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstClientPerformanceCounterInstaller.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.PerformanceCountersManager.processName">
            <summary>
            The name of the process that is host the wstclient.dll.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.PerformanceCountersManager.application">
            <summary>
            The owner ApplicationContext of this PerformanceCountersManager.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.PerformanceCountersManager.applicationCounter">
            <summary>
            The ApplicationInterfaceCounters for the ApplicationContext of this PerformanceCountersManager.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.PerformanceCountersManager.totalApplicationCounters">
            <summary>
            The ApplicationInterfaceCounters that stands for the "_Total" instance.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.PerformanceCountersManager.totalServerCounters">
            <summary>
            The ServerInterfaceCounters that stands for the "_Total" instance.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.PerformanceCountersManager.serverCounters">
            <summary>
            Global dictionary for all the server counters. This dictionary will not be updated if a new server gets added or removed. We will basically add a new server counter to the dictionary, if we encounter a new server. We will not remove the old ones. This is an optimization
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.PerformanceCountersManager.throttleCounters">
            <summary>
            Similar to server counter dictionary, database throttling counter dictionary is not going to be updated if a new database is added or removed. This dictionary is created per application context because a database can belong to only one WebstoreDeployment.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.PerformanceCountersManager.#ctor(Microsoft.Webstore.WstClient.ApplicationContext)">
            <summary>
            Constructs an instance of PerformanceCountersManager.
            </summary>
            <param name="application">The owner ApplicationContext of the  PerformanceCountersManager to construct.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.PerformanceCountersManager.RequestResourcesReleased(Microsoft.Webstore.MetaData.WebstoreDatabase)">
            <summary>
            Reduces the concurrent request count for the WebstoreDatabase since all the resources used are released.
            </summary>
            <param name="database"></param>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.PerformanceCountersManager.Application">
            <summary>
            The owner ApplicationContext of this PerformanceCountersManager.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.PerformanceCountersManager.ApplicationCounter">
            <summary>
            The ApplicationInterfaceCounters for the ApplicationContext of this PerformanceCountersManager.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.PerformanceCountersManager.DatabaseThrottlingCounters">
            <summary>
            The dictionary for the DatabaseThrottleCounters of this ApplicationContext. 
            Similar to server counter dictionary, database throttling counter dictionary is not going to be updated if a new database is added or removed. This dictionary is created per application context.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.PerformanceCountersManager.ServerCounters">
            <summary>
            Global dictionary for all the ServerInterfaceCounters.
            This dictionary will not be updated if a new server gets added or removed. We will basically add a new server counter to the dictionary, if we encounter a new server. We will not remove the old ones. This is an optimization
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.PerformanceCountersManager.TotalServerCounters">
            <summary>
            The ServerInterfaceCounters that stands for the "_Total" instance.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.PerformanceCountersManager.DatabaseThrottleCountersFactory">
            <summary>
            A factory class to instantiate DatabaseThrottleCounters.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.PerformanceCountersManager.ServerInterfaceCountersFactory">
            <summary>
            A factory class to instantiate ServerInterfaceCounters.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.ScaleBackThreadSleepTime">
            <summary>
            Time for the scaleback bacground to sleep. Don't make this time to small because this is also the minumum time to collect throttle counter metrics: maxConcurrentRequestSeen, acceptableRequests, totalRequests
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.CounterResetTimeMultiplier">
            <summary>
            Time period multiplier for the counter reset. This will be a multiplier for the scaleBackThreadSleepTime.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.database">
            <summary>
            The database which this DatabaseThrottleCounters belongs to.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.serverCounters">
            <summary>
            This is a reference to the ServerInterfaceCounters related to the WebstoreDatabase.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.maxConcurrentRequestsLimit">
            <summary>
            Maximimum number of concurrent connections are allowed for this server.
            Initally the value is 1 which means no request can pass. This value cannot be 0.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.concurrentRequests">
            <summary>
            Current number of active (StartRequest called but not RequestResourceReleased) concurrent connections. Should be always less than maxConcurrentConnections.
            A request will be only complete when the resources (sql connections) are released
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.totalRequests">
            <summary>
            Total number of execution requests indicated by the start request during the last interval (1*scaleBackThreadSleepTime to 5*scaleBackThreadSleepTime).
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.acceptableRequests">
            <summary>
            Total number of requests whose latencies are below the acceptable range during the last interval (1*scaleBackThreadSleepTime to 5*scaleBackThreadSleepTime).
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.maxConcurrentRequestSeen">
            <summary>
            Maximum concurrent request was seen during the last interval (1*scaleBackThreadSleepTime to 5*scaleBackThreadSleepTime).
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.nextGrowth">
            <summary>
            The earliest time for the next growth attempt.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.growthLock">
            <summary>
            The lock for synchronizing the section attempting to increase the max concurrent request limit.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.nextCounterReset">
            <summary>
            The time for resetting counters. Background scaleback thread will clear it.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.FinishRequest(System.Int32)">
            <summary>
            Updates internal structures given that a request is finished.
            FinishRequest does not indicate that resources (sql connections) are released hence concurrent request seen will not be decreased.
            </summary>
            <param name="duration">The duration to complete the request.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.FinishRequestWithError(System.Int32)">
            <summary>
            Updates internal structures given that a request is finished with an error. 
            FinishRequestWithError does not indicate that resources (sql connections) are released hence concurrent request seen will not be decreased.
            </summary>
            <param name="duration">The duration to complete the request.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.FinishRequestThrottled">
            <summary>
            Updates internal structures given that a request is finished abruptly because it is throttled.
            FinishRequestThrottled will not change concurrent request seen because a throttled request means.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.RequestResourcesReleased">
            <summary>
            Updates internal structures given that resources (sql connection) for the request are released and available for other threads.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.ConcurrencyLimitStart">
            <summary>
            The inital value for the max concurrent request limit. It is also the minimal value while max concurrent request limit is scaling back.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.ConcurrencyLimitDelta">
            <summary>
            The delta that needs to be preserved while max concurrent request limit is scaling back.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.ConcurrencyLimitMinumum">
            <summary>
            The minumum value for the max concurrent request limit under all circumstances.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.MaxConcurrentRequestsLimit">
            <summary>
            Maximimum number of concurrent connections are allowed for this server.
            Initally the value is 1 which means no request can pass. This value cannot be 0.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.MaxGrowthPeriodOffset">
            <summary>
            The maximum value for the offset of the duration when the next increase of max concurrent request limit is possible. The offset will be a random number between 0 and MaxGrowthPeriodOffset.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.MaxPoolSize">
            <summary>
            The highest number that max concurrent request limit is reached which implies that highest possible number of concurrent requests.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.MinumumGrowthPeriod">
            <summary>
            The minumum value for the duration when the next increase of max concurrent request limit is possible. A random offset will be added to MinumumGrowthPeriod to determine the exact duration of the next increase of max concurrent request limit is possible. 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.PercentBadRequestsThreshold">
            <summary>
            The threshold of the bad requests percentage to indicate if the server status is healthy. If the server status is not healthy, increase of max concurrent request limit will not be allowed and scale back will happen.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.RampedGrowthEnabled">
            <summary>
            Indicates whether the time delayed increase of max concurrent request limit is enabled. If not, max concurrent request limit will be set to max pool size automatically without any condition.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.QueueCapacity">
            <summary>
            The maximum number of requests that can be queued before executing or throttling them.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.QueueSize">
            <summary>
            The number of requests that are queued for execution.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.QueuingEnabled">
            <summary>
            Indicates whether the queueing requests that would have been throttled.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.QueueStaleDuration">
            <summary>
            The duration before a request in the queue gets stale and throttled.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.QueueWarningPercentage">
            <summary>
            The threshold for the fullness percentage of the queue to log a warning in they system event log.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.ThrottlingEnabled">
            <summary>
            Indicates whether the control for maximum number of concurrent requests is enabled.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseSelector.GetDatabaseConnections(Microsoft.Webstore.WstClient.WstConnection,Microsoft.Webstore.WstClient.WstCommand)">
            <summary>
            Internal helper version of GetDBConnections
            </summary>
            <param name="connection">WstConnection</param>
            <param name="command">WstCommand object</param>
            <returns>WstDBConnections</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseSelector.ValidateSecondaryType">
            <summary>
            Validates that if given failover mode is available for the deployment type.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseSelector.CreateDatabaseConnection(Microsoft.Webstore.WstClient.WstConnection,Microsoft.Webstore.WstClient.WstCommand)">
            <summary>
            Creates a new WstDBConnection matching the partition/cmdtype/security/connectiontimeout.
            </summary>
            <remarks>
            Creates a WstDBConnection with SqlConnection that has its 
            ConnectionString initialized to match partition cmd type, 
            security, and timeout, but is NOT opened yet.
            </remarks>
            <param name="connection">SqlConnection</param>
            <param name="command">Physical Partition Number.</param>
            <returns>WstDBConnection</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseSelector.GetDatabase(System.Int32,System.Collections.Generic.List{Microsoft.Webstore.MetaData.WebstoreDatabase},System.Collections.Generic.List{Microsoft.Webstore.MetaData.WebstoreDatabase})">
            <summary>
            Internal/private helper to get a WstDatabase from the partition that would satisfy
            the specified WstCommandType.  Checks to make sure server is not blacklisted, and
            DB is online.
            </summary>
            <param name="sqlFssNumber">Physical Partition Number</param>
            
            <param name="timeOutDatabases">WstDatabases that have had CommandTimeout errors</param>
            <param name="throttledDatabases">List of dbs to skip from selection</param>
            <returns>WstDatabase</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseSelector.DeterminePartitionBoundaries(System.Int32@,System.Int32@)">
            <summary>
            Determines the starting sqlFss number and how many of the sqlFss should be iterated.
            </summary>
            <param name="initialSqlFssNumber">The initialSqlFssNumber</param>
            <param name="maxSqlFssIteration"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseSelector.GetPrimaryDatabase(System.Int32,System.Collections.Generic.List{Microsoft.Webstore.MetaData.WebstoreDatabase},System.Collections.Generic.List{Microsoft.Webstore.MetaData.WebstoreDatabase},Microsoft.Webstore.WstClient.PrimaryDatabaseStatus@)">
            <summary>
            Helper to find best primary DB match available
            </summary>
            <param name="sqlFssNumber">Physical partition</param>
            <param name="timeOutDatabases">WstDatabase array that have already had cmd timeout errors</param>
            <param name="throttledDatabases">WstDatabase array to skip from this selection</param>
            <param name="status"></param>
            <returns>WstDatabase matching the criteria</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseSelector.GetSecondaryDatabase(System.Int32,System.Collections.Generic.List{Microsoft.Webstore.MetaData.WebstoreDatabase},System.Collections.Generic.List{Microsoft.Webstore.MetaData.WebstoreDatabase},Microsoft.Webstore.WstClient.SecondaryDatabaseStatus@)">
            <summary>
            Helper to find best read DB match available
            </summary>
            <param name="sqlFssNumber">Physical partition</param>
            <param name="timeOutDatabases">WstDatabase array that have already had cmd timeout errors</param>
            <param name="throttledDatabases">WstDatabase array to skip from this selection</param>
            <param name="status"></param>
            <returns>WstDatabase that best matches criteria (least stale, write vs read, etc.)</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseSelector.FinalDatabaseValidate(Microsoft.Webstore.WstClient.WstCommand,Microsoft.Webstore.MetaData.WebstoreDatabase@)">
            <summary>
            Validates that the WstDatabase selected for this WstCommand is still valid after the connection has been opened (state may have changed).
            </summary>
            <param name="command">The command for validating the database. The value could be null.</param>
            <param name="database">The database to validate.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.CommandTypeSupport.PrimaryOnlyDatabaseSelector.FinalDatabaseValidate(Microsoft.Webstore.WstClient.WstCommand,Microsoft.Webstore.MetaData.WebstoreDatabase@)">
            <summary>
            Validates that the WstDatabase selected for this WstCommand is still valid after the connection has been opened (state may have changed).
            </summary>
            <param name="command">The command for validating the database. The value could be null.</param>
            <param name="database">The database to validate.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.CommandTypeSupport.PrimaryThenSecondaryDatabaseSelector.FinalDatabaseValidate(Microsoft.Webstore.WstClient.WstCommand,Microsoft.Webstore.MetaData.WebstoreDatabase@)">
            <summary>
            Validates that the WstDatabase selected for this WstCommand is still valid after the connection has been opened (state may have changed).
            </summary>
            <param name="command">The command for validating the database. The value could be null.</param>
            <param name="database">The database to validate.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.CommandTypeSupport.SpecificDatabaseDatabaseSelector.FinalDatabaseValidate(Microsoft.Webstore.WstClient.WstCommand,Microsoft.Webstore.MetaData.WebstoreDatabase@)">
            <summary>
            Validates that the WstDatabase selected for this WstCommand is still valid after the connection has been opened (state may have changed).
            </summary>
            <param name="command">The command for validating the database. The value could be null.</param>
            <param name="database">The database to validate.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.CommandTypeSupport.WriteAllCopiesDatabaseSelector.FinalDatabaseValidate(Microsoft.Webstore.WstClient.WstCommand,Microsoft.Webstore.MetaData.WebstoreDatabase@)">
            <summary>
            Validates that the WstDatabase selected for this WstCommand is still valid after the connection has been opened (state may have changed).
            </summary>
            <param name="command">The command for validating the database. The value could be null.</param>
            <param name="database">The database to validate.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.PrimaryDatabaseStatus.isMarkedOffline">
            <summary>
            true if a candidate found is offline
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.PrimaryDatabaseStatus.isTimeOut">
            <summary>
            true if candidate found in timeout array
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.PrimaryDatabaseStatus.isSkippedDueToThrottling">
            <summary>
            true if candidate found in skip array
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.PrimaryDatabaseStatus.isReadOnly">
            <summary>
            true if no write db available for the partition
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.SecondaryDatabaseStatus.isMarkedOffline">
            <summary>
            true if a candidate found is offline
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.SecondaryDatabaseStatus.isTimeOut">
            <summary>
            true if candidate found in timeout array
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.SecondaryDatabaseStatus.isSkippedDueToThrottling">
            <summary>
            true if candidate found in skip array
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.SecondaryDatabaseStatus.availableSecondaries">
            <summary>
            number of available secondary database
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\webstore\5.5.2421.0000\WstClientLib\chk\DISK1\Readme.txt ===
Silent WstClientLib MSI Install / Uninstall

All parameter names must be capitalized. Parameter values are case sensitive, and must match the examples below.

Optional Webstore parameters:
    CONFIGSERVERS       List of semi-colon seperated Config Servers. See below for the new multi-site feature. Default: Current server name. See below for when it is required.
    DATACENTER          Data Center of the server where the client is installed. The default is "DefaultDataCenter"
    CLIENTTYPE          Specify this value as "Native", "Managed" or "NativeAndManaged" installation. The default is Managed. This is case sensitive. NOTE: "ManagedAndNative" is NOT a valid option.

If you have set CLIENTTYPE to Native or NativeAndManaged, the following parameters are needed. These parameters are ignored for a Managed client install.
    WSTSERVICEACCT     NT Account to run WstService service
    WSTSERVICEPWD      (Optional) Password for WSTSERVICEACCT account. Default: "" (Empty string)

Various format examples for the CONFIGSERVERS variable:
    MyServer            Only one config server with the name MyServer.
    ServerA;ServerB     Two configs. The seperator is a semicolon.
For multi-site support use the following in the CONFIGSERVERS parameter:
    ServerA;ServerB;SiteTwo/Server1;SiteTwo/Server2

Multi-site allows a single client to communicate to completely seperate Webstore configuration systems. In other words the WstConfig databases of the seperate sites do not know about either other. The only point of contact for the two sites is VIA this client.

As an example, you could have as your site name Redmond and PHX. Then create a client that can communicate with both domains.

Servers on sites other then the default site include the site name:  SiteName/ServerName

REM Simple example - Installs Managed code client. Uses the current server as the Config Server.
msiexec.exe /qn /i "WstClientLib.msi"

REM Installs Native client components
msiexec.exe /qn /i "WstClientLib.msi" CLIENTTYPE="Native" WSTSERVICEACCT="redmond\username" WSTSERVICEPWD="password" CONFIGSERVERS="ADifferentServer;AnotherServer"

REM Installs Native and managed client components
msiexec.exe /qn /i "WstClientLib.msi" CLIENTTYPE="NativeAndManaged" WSTSERVICEACCT="redmond\username" WSTSERVICEPWD="password" CONFIGSERVERS="ADifferentServer;AnotherServer"

REM Multi site example with error logging.
msiexec.exe /qn /i "WstClientLib.msi" /Le "c:\webstore.log" CONFIGSERVERS="Server1;Server2;Tukwila/ServerA;Tukwila/ServerB"

REM Verbose logging, all parameters specified for managed install.
msiexec.exe /qn /i "WstClientLib.msi" /L*vx "c:\webstore.log" DATACENTER="MyDataCenter" CONFIGSERVERS="MyConfigServer;MySecondConfigServer" CLIENTTYPE="Managed"

REM Silent MSI Uninstall. No logging.
msiexec.exe /qn /x {E4028626-5939-4FA8-9E0F-E3186295AE77}

REM Gui install with logging. This is a good way to debug issues.
msiexec.exe /i "WstClientLib.msi" /L*vx "c:\webstore.log"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\webstore\5.5.2421.0000\WstSetup\chk\DISK1\Readme.txt ===
Silent MSI Install / Uninstall for WstSetup.msi

Required Webstore parameters:
    WSTSERVICEACCT  NT Account to run WstAgent service.

Optional Webstore parameters:
    WSTSERVICEPWD   Password for WSTSERVICEACCT account. Default: "" (Empty string)
    CONFIGSERVERS   List of Config Servers. Default: Current server name. See below for when it is required.
    DATADIR         Directory for WstConfig database data file. 
    LOGDIR          Directory for WstConfig database log file. 
    DATACENTER      DataCenter that WstConfig is under. Default: "DefaultDataCenter"
    ERRLOG          Error Log for Config Setup. Default: %ALLUSERSPROFILE%\Documents\Microsoft\Webstore\WstSetup.log
    LOCALPATH       Local Directory to store backup files. Default: "C:\"
    SHAREPATH       Share path to copy backup files from. Default: "C$"


Notes:
o) All variable names (e.g. WSTSERVICEPWD) must be UPPERCASE. Using lower case for the variable names may lead to unpredictable results. 
o) DATADIR, LOGDIR, LOCALPATH and SHAREPATH are only used for the first installation. For Second and later installations, these values will be ignored, and values that were specified for the first installation will be used. This requirement is needed because a WstConfig deployment is like any other deployment, and must use the same values per fail safe set.
o) If an admin share is used for SHAREPATH (C$, D$, etc), the WSTSERVICEACCT account will require NT admin access to all servers where a WstConfig database is installed.

This package uses the CONFIGSERVERS variable to setup differently depending on the entries used and your current configuration. In all cases below. If the WstConfig database exists on the local server, it will not be touched.  If you are upgrading to a newer release of Webstore, see Upgrading Webstore point below.

o  If you do not specify a CONFIGSERVERS parameter, or leave it blank "", then the local server name is assumed. If a WstConfig database is not on this server already, it will be created.
o  If the local server name is the only server specified in the CONFIGSERVERS parameter, then install the WstConfig components and the WstConfig database.
o  If you specify a ConfigServer(s) that does not include the local server, then only the administration components are installed. The WstConfig database is not installed.
o  If you specify a list of ConfigServers that includes the local server, and the local server does not have a WstConfig database, then this server will be added to the Config server farm, and a WstConfig database will be created on this server.

Installing Webstore - Examples
------------------------------
Example 1) Install with only the required parameters. See notes above on CONFIGERVERS parameter.

msiexec.exe /qn /i "WstSetup.msi" WSTSERVICEACCT="redmond\username" WSTSERVICEPWD="password"

Example 2) Tell Windows Installer to create a verbose installation log in c:\webstore.log
           Given that ThisServer is the current server, and a WstConfig database does not exist on this server, a call will be made to add a secondary database to the WstConfig deployment.

msiexec.exe /qn /i "WstSetup.msi" /L*v "c:\webstore.log" DATADIR="C:\SqlDevices\Data" LOGDIR="C:\SqlDevices\Log" WSTSERVICEACCT="redmond\username" WSTSERVICEPWD="password" DATACENTER="My DataCenter" ERRLOG="c:\WstConfig.err" LOCALPATH="C:\" CONFIGSERVERS="ThisServer;ADifferentServer;AnotherServer" SHAREPATH="C$"

Example 3) Install only the administraion files, but not the WstConfig database. This assumes "ThisServer" is the local server name.

msiexec.exe /qn /i "WstSetup.msi" WSTSERVICEACCT="redmond\username" WSTSERVICEPWD="password" CONFIGSERVERS="ADifferentServer;AnotherServer"

Example 4) Uninstall, no logging.

msiexec.exe /qn /x {59348799-579D-4D38-8F7E-16C4A784B2BD}

-----------------------------------------------------------------------------

Upgrading Webstore:
-------------------
After installing the latest Webstore binary components, administration tasks will not be available until you upgrade your WstConfig databases.
Run the utility WstConfigUpgrade to upgrade the WstConfig database. It uses the following parameters:

    WstConfigUpgrade [-downgrade] -logfile C:\LogFile.txt] [-wstconfigbakfile C:\MyFile.bak]

Run WstConfigUpgrade /? for a description of all parameters.

Once run, the upgrade is performed on ALL online WstConfig servers.

If you wish to add the local server to an existing set of configuration servers, upgrade the other server(s) first before installing.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\webstore\5.5.2421.0000\WstSetup\DISK1\Readme.txt ===
Silent MSI Install / Uninstall for WstSetup.msi

Required Webstore parameters:
    WSTSERVICEACCT  NT Account to run WstAgent service.

Optional Webstore parameters:
    WSTSERVICEPWD   Password for WSTSERVICEACCT account. Default: "" (Empty string)
    CONFIGSERVERS   List of Config Servers. Default: Current server name. See below for when it is required.
    DATADIR         Directory for WstConfig database data file. 
    LOGDIR          Directory for WstConfig database log file. 
    DATACENTER      DataCenter that WstConfig is under. Default: "DefaultDataCenter"
    ERRLOG          Error Log for Config Setup. Default: %ALLUSERSPROFILE%\Documents\Microsoft\Webstore\WstSetup.log
    LOCALPATH       Local Directory to store backup files. Default: "C:\"
    SHAREPATH       Share path to copy backup files from. Default: "C$"


Notes:
o) All variable names (e.g. WSTSERVICEPWD) must be UPPERCASE. Using lower case for the variable names may lead to unpredictable results. 
o) DATADIR, LOGDIR, LOCALPATH and SHAREPATH are only used for the first installation. For Second and later installations, these values will be ignored, and values that were specified for the first installation will be used. This requirement is needed because a WstConfig deployment is like any other deployment, and must use the same values per fail safe set.
o) If an admin share is used for SHAREPATH (C$, D$, etc), the WSTSERVICEACCT account will require NT admin access to all servers where a WstConfig database is installed.

This package uses the CONFIGSERVERS variable to setup differently depending on the entries used and your current configuration. In all cases below. If the WstConfig database exists on the local server, it will not be touched.  If you are upgrading to a newer release of Webstore, see Upgrading Webstore point below.

o  If you do not specify a CONFIGSERVERS parameter, or leave it blank "", then the local server name is assumed. If a WstConfig database is not on this server already, it will be created.
o  If the local server name is the only server specified in the CONFIGSERVERS parameter, then install the WstConfig components and the WstConfig database.
o  If you specify a ConfigServer(s) that does not include the local server, then only the administration components are installed. The WstConfig database is not installed.
o  If you specify a list of ConfigServers that includes the local server, and the local server does not have a WstConfig database, then this server will be added to the Config server farm, and a WstConfig database will be created on this server.

Installing Webstore - Examples
------------------------------
Example 1) Install with only the required parameters. See notes above on CONFIGERVERS parameter.

msiexec.exe /qn /i "WstSetup.msi" WSTSERVICEACCT="redmond\username" WSTSERVICEPWD="password"

Example 2) Tell Windows Installer to create a verbose installation log in c:\webstore.log
           Given that ThisServer is the current server, and a WstConfig database does not exist on this server, a call will be made to add a secondary database to the WstConfig deployment.

msiexec.exe /qn /i "WstSetup.msi" /L*v "c:\webstore.log" DATADIR="C:\SqlDevices\Data" LOGDIR="C:\SqlDevices\Log" WSTSERVICEACCT="redmond\username" WSTSERVICEPWD="password" DATACENTER="My DataCenter" ERRLOG="c:\WstConfig.err" LOCALPATH="C:\" CONFIGSERVERS="ThisServer;ADifferentServer;AnotherServer" SHAREPATH="C$"

Example 3) Install only the administraion files, but not the WstConfig database. This assumes "ThisServer" is the local server name.

msiexec.exe /qn /i "WstSetup.msi" WSTSERVICEACCT="redmond\username" WSTSERVICEPWD="password" CONFIGSERVERS="ADifferentServer;AnotherServer"

Example 4) Uninstall, no logging.

msiexec.exe /qn /x {59348799-579D-4D38-8F7E-16C4A784B2BD}

-----------------------------------------------------------------------------

Upgrading Webstore:
-------------------
After installing the latest Webstore binary components, administration tasks will not be available until you upgrade your WstConfig databases.
Run the utility WstConfigUpgrade to upgrade the WstConfig database. It uses the following parameters:

    WstConfigUpgrade [-downgrade] -logfile C:\LogFile.txt] [-wstconfigbakfile C:\MyFile.bak]

Run WstConfigUpgrade /? for a description of all parameters.

Once run, the upgrade is performed on ALL online WstConfig servers.

If you wish to add the local server to an existing set of configuration servers, upgrade the other server(s) first before installing.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\webstore\5.5.2421.0000\WstSetup\fre\DISK1\Readme.txt ===
Silent MSI Install / Uninstall for WstSetup.msi

Required Webstore parameters:
    WSTSERVICEACCT  NT Account to run WstAgent service.

Optional Webstore parameters:
    WSTSERVICEPWD   Password for WSTSERVICEACCT account. Default: "" (Empty string)
    CONFIGSERVERS   List of Config Servers. Default: Current server name. See below for when it is required.
    DATADIR         Directory for WstConfig database data file. 
    LOGDIR          Directory for WstConfig database log file. 
    DATACENTER      DataCenter that WstConfig is under. Default: "DefaultDataCenter"
    ERRLOG          Error Log for Config Setup. Default: %ALLUSERSPROFILE%\Documents\Microsoft\Webstore\WstSetup.log
    LOCALPATH       Local Directory to store backup files. Default: "C:\"
    SHAREPATH       Share path to copy backup files from. Default: "C$"


Notes:
o) All variable names (e.g. WSTSERVICEPWD) must be UPPERCASE. Using lower case for the variable names may lead to unpredictable results. 
o) DATADIR, LOGDIR, LOCALPATH and SHAREPATH are only used for the first installation. For Second and later installations, these values will be ignored, and values that were specified for the first installation will be used. This requirement is needed because a WstConfig deployment is like any other deployment, and must use the same values per fail safe set.
o) If an admin share is used for SHAREPATH (C$, D$, etc), the WSTSERVICEACCT account will require NT admin access to all servers where a WstConfig database is installed.

This package uses the CONFIGSERVERS variable to setup differently depending on the entries used and your current configuration. In all cases below. If the WstConfig database exists on the local server, it will not be touched.  If you are upgrading to a newer release of Webstore, see Upgrading Webstore point below.

o  If you do not specify a CONFIGSERVERS parameter, or leave it blank "", then the local server name is assumed. If a WstConfig database is not on this server already, it will be created.
o  If the local server name is the only server specified in the CONFIGSERVERS parameter, then install the WstConfig components and the WstConfig database.
o  If you specify a ConfigServer(s) that does not include the local server, then only the administration components are installed. The WstConfig database is not installed.
o  If you specify a list of ConfigServers that includes the local server, and the local server does not have a WstConfig database, then this server will be added to the Config server farm, and a WstConfig database will be created on this server.

Installing Webstore - Examples
------------------------------
Example 1) Install with only the required parameters. See notes above on CONFIGERVERS parameter.

msiexec.exe /qn /i "WstSetup.msi" WSTSERVICEACCT="redmond\username" WSTSERVICEPWD="password"

Example 2) Tell Windows Installer to create a verbose installation log in c:\webstore.log
           Given that ThisServer is the current server, and a WstConfig database does not exist on this server, a call will be made to add a secondary database to the WstConfig deployment.

msiexec.exe /qn /i "WstSetup.msi" /L*v "c:\webstore.log" DATADIR="C:\SqlDevices\Data" LOGDIR="C:\SqlDevices\Log" WSTSERVICEACCT="redmond\username" WSTSERVICEPWD="password" DATACENTER="My DataCenter" ERRLOG="c:\WstConfig.err" LOCALPATH="C:\" CONFIGSERVERS="ThisServer;ADifferentServer;AnotherServer" SHAREPATH="C$"

Example 3) Install only the administraion files, but not the WstConfig database. This assumes "ThisServer" is the local server name.

msiexec.exe /qn /i "WstSetup.msi" WSTSERVICEACCT="redmond\username" WSTSERVICEPWD="password" CONFIGSERVERS="ADifferentServer;AnotherServer"

Example 4) Uninstall, no logging.

msiexec.exe /qn /x {59348799-579D-4D38-8F7E-16C4A784B2BD}

-----------------------------------------------------------------------------

Upgrading Webstore:
-------------------
After installing the latest Webstore binary components, administration tasks will not be available until you upgrade your WstConfig databases.
Run the utility WstConfigUpgrade to upgrade the WstConfig database. It uses the following parameters:

    WstConfigUpgrade [-downgrade] -logfile C:\LogFile.txt] [-wstconfigbakfile C:\MyFile.bak]

Run WstConfigUpgrade /? for a description of all parameters.

Once run, the upgrade is performed on ALL online WstConfig servers.

If you wish to add the local server to an existing set of configuration servers, upgrade the other server(s) first before installing.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK\debug\doc\WebstoreWrapper.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WebstoreWrapper</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Webstore.Wrapper.WrapperWstConnection">
            <summary>
            Class that effective wraps the WstConnection for the express purpose of callings its 
            properties that return generic collections
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Wrapper.WrapperWstConnection.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Wrapper.WrapperWstConnection.Open">
            <summary>
            Open a connection to the Webstore resource)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Wrapper.WrapperWstConnection.ConnectionString">
            <summary>
            Connection String (deployment name)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Wrapper.WrapperWstConnection.SqlPartitions">
            <summary>
            Returns a collection WrapperWebstoreSQLFss objects (which wrap the generic WebstoreSQLFss object) 
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Wrapper.WrapperWebstoreSQLFss">
            <summary>
            Class that effective wraps the WebstoreSQLFss object for the express purpose of callings its 
            properties that return generic collections
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Wrapper.WrapperWebstoreSQLFss.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Wrapper.WrapperWebstoreSQLFss.FssId">
            <summary>
            Fail Safe Set ID
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Wrapper.WrapperWebstoreSQLFss.Databases">
            <summary>
            Returns a collection WrapperWebstoreDatabase objects (which wrap the generic WebstoreDatabase object) 
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Wrapper.WrapperWebstoreDatabase">
            <summary>
            Class that effective wraps the WebstoreDatabase object for the express purpose of callings its 
            properties that return generic collections
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Wrapper.WrapperWebstoreDatabase.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Wrapper.WrapperWebstoreDatabase.Server">
            <summary>
            Name of the server 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Wrapper.WrapperWebstoreDatabase.Name">
            <summary>
            Name of the database 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Wrapper.WrapperWebstoreDatabase.IsPrimary">
            <summary>
            boolean value indicating if the database is primary or not 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Wrapper.WrapperWebstoreDatabase.Status">
            <summary>
            Status of the database
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\webstore\5.5.2421.0000\WstClientLib\DISK1\Readme.txt ===
Silent WstClientLib MSI Install / Uninstall

All parameter names must be capitalized. Parameter values are case sensitive, and must match the examples below.

Optional Webstore parameters:
    CONFIGSERVERS       List of semi-colon seperated Config Servers. See below for the new multi-site feature. Default: Current server name. See below for when it is required.
    DATACENTER          Data Center of the server where the client is installed. The default is "DefaultDataCenter"
    CLIENTTYPE          Specify this value as "Native", "Managed" or "NativeAndManaged" installation. The default is Managed. This is case sensitive. NOTE: "ManagedAndNative" is NOT a valid option.

If you have set CLIENTTYPE to Native or NativeAndManaged, the following parameters are needed. These parameters are ignored for a Managed client install.
    WSTSERVICEACCT     NT Account to run WstService service
    WSTSERVICEPWD      (Optional) Password for WSTSERVICEACCT account. Default: "" (Empty string)

Various format examples for the CONFIGSERVERS variable:
    MyServer            Only one config server with the name MyServer.
    ServerA;ServerB     Two configs. The seperator is a semicolon.
For multi-site support use the following in the CONFIGSERVERS parameter:
    ServerA;ServerB;SiteTwo/Server1;SiteTwo/Server2

Multi-site allows a single client to communicate to completely seperate Webstore configuration systems. In other words the WstConfig databases of the seperate sites do not know about either other. The only point of contact for the two sites is VIA this client.

As an example, you could have as your site name Redmond and PHX. Then create a client that can communicate with both domains.

Servers on sites other then the default site include the site name:  SiteName/ServerName

REM Simple example - Installs Managed code client. Uses the current server as the Config Server.
msiexec.exe /qn /i "WstClientLib.msi"

REM Installs Native client components
msiexec.exe /qn /i "WstClientLib.msi" CLIENTTYPE="Native" WSTSERVICEACCT="redmond\username" WSTSERVICEPWD="password" CONFIGSERVERS="ADifferentServer;AnotherServer"

REM Installs Native and managed client components
msiexec.exe /qn /i "WstClientLib.msi" CLIENTTYPE="NativeAndManaged" WSTSERVICEACCT="redmond\username" WSTSERVICEPWD="password" CONFIGSERVERS="ADifferentServer;AnotherServer"

REM Multi site example with error logging.
msiexec.exe /qn /i "WstClientLib.msi" /Le "c:\webstore.log" CONFIGSERVERS="Server1;Server2;Tukwila/ServerA;Tukwila/ServerB"

REM Verbose logging, all parameters specified for managed install.
msiexec.exe /qn /i "WstClientLib.msi" /L*vx "c:\webstore.log" DATACENTER="MyDataCenter" CONFIGSERVERS="MyConfigServer;MySecondConfigServer" CLIENTTYPE="Managed"

REM Silent MSI Uninstall. No logging.
msiexec.exe /qn /x {E4028626-5939-4FA8-9E0F-E3186295AE77}

REM Gui install with logging. This is a good way to debug issues.
msiexec.exe /i "WstClientLib.msi" /L*vx "c:\webstore.log"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\webstore\5.5.2421.0000\WstClientLib\fre\DISK1\Readme.txt ===
Silent WstClientLib MSI Install / Uninstall

All parameter names must be capitalized. Parameter values are case sensitive, and must match the examples below.

Optional Webstore parameters:
    CONFIGSERVERS       List of semi-colon seperated Config Servers. See below for the new multi-site feature. Default: Current server name. See below for when it is required.
    DATACENTER          Data Center of the server where the client is installed. The default is "DefaultDataCenter"
    CLIENTTYPE          Specify this value as "Native", "Managed" or "NativeAndManaged" installation. The default is Managed. This is case sensitive. NOTE: "ManagedAndNative" is NOT a valid option.

If you have set CLIENTTYPE to Native or NativeAndManaged, the following parameters are needed. These parameters are ignored for a Managed client install.
    WSTSERVICEACCT     NT Account to run WstService service
    WSTSERVICEPWD      (Optional) Password for WSTSERVICEACCT account. Default: "" (Empty string)

Various format examples for the CONFIGSERVERS variable:
    MyServer            Only one config server with the name MyServer.
    ServerA;ServerB     Two configs. The seperator is a semicolon.
For multi-site support use the following in the CONFIGSERVERS parameter:
    ServerA;ServerB;SiteTwo/Server1;SiteTwo/Server2

Multi-site allows a single client to communicate to completely seperate Webstore configuration systems. In other words the WstConfig databases of the seperate sites do not know about either other. The only point of contact for the two sites is VIA this client.

As an example, you could have as your site name Redmond and PHX. Then create a client that can communicate with both domains.

Servers on sites other then the default site include the site name:  SiteName/ServerName

REM Simple example - Installs Managed code client. Uses the current server as the Config Server.
msiexec.exe /qn /i "WstClientLib.msi"

REM Installs Native client components
msiexec.exe /qn /i "WstClientLib.msi" CLIENTTYPE="Native" WSTSERVICEACCT="redmond\username" WSTSERVICEPWD="password" CONFIGSERVERS="ADifferentServer;AnotherServer"

REM Installs Native and managed client components
msiexec.exe /qn /i "WstClientLib.msi" CLIENTTYPE="NativeAndManaged" WSTSERVICEACCT="redmond\username" WSTSERVICEPWD="password" CONFIGSERVERS="ADifferentServer;AnotherServer"

REM Multi site example with error logging.
msiexec.exe /qn /i "WstClientLib.msi" /Le "c:\webstore.log" CONFIGSERVERS="Server1;Server2;Tukwila/ServerA;Tukwila/ServerB"

REM Verbose logging, all parameters specified for managed install.
msiexec.exe /qn /i "WstClientLib.msi" /L*vx "c:\webstore.log" DATACENTER="MyDataCenter" CONFIGSERVERS="MyConfigServer;MySecondConfigServer" CLIENTTYPE="Managed"

REM Silent MSI Uninstall. No logging.
msiexec.exe /qn /x {E4028626-5939-4FA8-9E0F-E3186295AE77}

REM Gui install with logging. This is a good way to debug issues.
msiexec.exe /i "WstClientLib.msi" /L*vx "c:\webstore.log"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\webstore\5.5.2421.0000\SDK\fre\doc\Wmo.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Wmo</name>
    </assembly>
    <members>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoUpgradeResource.GetObject(System.String)">
            <summary>
            GetObject
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoResource.GetObject(System.String)">
            <summary>
            GetObject
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoErrorHelper">
            <summary>
            Error Helper for getting string resources, IDs and names.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoErrorHelper.Number">
            <summary>
            The ID Number associated with this error resource.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoErrorHelper.Format">
            <summary>
            The Format string before the parameters are inserted.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoErrorHelper.#ctor(System.String)">
            <summary>
            The constructor for the class requires the Short name.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.XMLValidationFailure">
            <summary>
            XML Validation was not successful. The XmlFileName is not loaded.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.XMLValidationError(System.String)">
            <summary>
            XML Validation Error: {0}
            </summary>
            <param name="ValidationError"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.XMLMissingElement(System.String)">
            <summary>
            The required XML element "{0}" was not found.
            </summary>
            <param name="MissingElement"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.XMLMissingAttribute(System.String,System.String)">
            <summary>
            The required XML attribute "{0}" in the element "{1}" was not found.
            </summary>
            <param name="MissingAttribute"></param>
            <param name="Element"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.XMLMissingNode(System.String)">
            <summary>
            The required XML node "{0}" was not found.
            </summary>
            <param name="MissingNode"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InvalidMinSqlVersion(System.String)">
            <summary>
            Invalid minimum SQL Server version ({0}). It must be in the form M.mm.BBB or MM.mm.BBBB. For example 8.00.760.
            </summary>
            <param name="BadVersion"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotObtainDTCWithWstConfig(System.String,System.Data.SqlClient.SqlException)">
            <summary>
            The WstConfig database on the server {0} could not be accessed. Check net connectivty and MSSqlServer service status. If connectivity cannot be re-established, mark the database offline. The SQL error was \"{1}\".
            </summary>
            <param name="ServerName"></param>
            <param name="se"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.DuplicateName(System.String,System.String)">
            <summary>
            {0} "{1}" already exists.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.TooOldWstConfig(System.String,System.String)">
            <summary>
            WstConfig version "{0}" is less than minimum WstConfig version "{1}" supported by Wmo.dll.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MultipleDatabasesWithNoSecondaries(System.String,System.String)">
            <summary>
            Deployment "{0}" has SqlSecondaryType of NoSecondaries but has multiple databases in SqlFailSafeSet "{1}".
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MismatchPartitionCount(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Manifest "{0}" has LogicalPartitionCount = {1} but Deployment "{2}" lists {3} Data Partitions.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.UnexpectedDataPartition(System.String,System.Int16)">
            <summary>
            Expected Data Partition with Number = {0}, found Data Partition with Number = {1}.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDropWstConfigDeployment">
            <summary>
            Cannot drop deployment "WstConfig".
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.PartitionMappedToInvalidFss(System.Int16,System.String,System.Int16)">
            <summary>
            Data Partition {0} is mapped to invalid {1} FailSafe Set {2}.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NoPartitionsSpecified">
            <summary>
            34;No data partitions specified.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NoPublication(System.String,System.String)">
            <summary>
            Publication "{0}" not found for manifest "{1}".
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NoDistribInfo">
            <summary>
            XML tag "DistributionDirectories" required for replication.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MultipleManifestVersions(System.Int32)">
            <summary>
            There are {0} versions of that manifest stored in the config.  Please specify a specific version to export.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.UnknownDistribServerSetup(System.String,System.String)">
            <summary>
            Server "{0}" is set up as the distribution server for server "{1}" but is not registered as a data server.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.DistribDBRegisteredInFss(System.String,System.String)">
            <summary>
            Distribution database "{0}:{1}" is registered in a SQL FailSafe Set.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NoDistribDB(System.String)">
            <summary>
            Server "{0}" does not have a distribution database registered.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InvalidPublicationType(System.String)">
            <summary>
            49;Invalid PublicationType: "{0}"
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.AgentException(Microsoft.Webstore.WstChannels.Pipe.PipeIOException)">
            <summary>
            Unexpected Pipe error {0}
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.AgentNotRunning(System.Exception)">
            <summary>
            AgentNotRunning = 19;Webstore agent is not running!
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.AgentAccessDenied(System.Exception)">
            <summary>
            AgentAccessDenied = 20;Webstore agent access is denied!
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.DTCException(System.Exception,System.Reflection.MethodBase)">
            <summary>
            Unexpected DTC error {0}
            </summary>
            <param name="e"></param>
            <param name="mb"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.DTCException2(System.String,System.Guid,System.EnterpriseServices.TransactionStatus)">
            <summary>
            220;{0} with transaction ID {1} returned {2}.
            </summary>
            <param name="methodName"></param>
            <param name="ts"></param>
            <param name="tranID"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.PrimaryExistsCannotPromote(System.String,System.String,System.String,System.String)">
            <summary>
            Cannot Promote {0}:{1} until {2}:{3} has been demoted.
            </summary>
            <param name="desiredPrimaryServer"></param>
            <param name="desiredPrimaryName"></param>
            <param name="currentPrimaryServer"></param>
            <param name="currentPrimaryName"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ErrorWeAreInDTC">
            <summary>
             The Wait For Polling Interval must not be called while we are in a DTC.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.DefaultPrimaryNotExist(System.String,System.String)">
            <summary>
             You must have a DefaultPrimary database listed for each partition.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NoPrimaryInPartition(System.String)">
            <summary>
             Sql Failsafe Set {0} does not have a Primary database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InappropriateStatus(System.String,Microsoft.Webstore.Management.Wmo.WmoDatabase,System.String)">
            <summary>
            52;The {0} operation is inappropriate for the database "{1}:{2}" with {3} status.  The database must be in the following state(s) for this operation to complete:  ({4}).
            </summary>
            <param name="op"></param>
            <param name="db"></param>
            <param name="validStates"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InappropriateFileStatus(System.String,Microsoft.Webstore.Management.Wmo.WmoFileShare,System.String)">
            <summary>
            53;The {0} operation is inappropriate for the fileshare "\\\\{1}\\{2}" with {3} status.  The fileshare must be in the following state(s) for this operation to complete:  ({4}).
            </summary>
            <param name="op"></param>
            <param name="fs"></param>
            <param name="validStates"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ReplDrainFailed(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Replication from {0}:{1} cannot be drained.
            </summary>
            <param name="PubSvrName"></param>
            <param name="PubDBName"></param>
            <param name="SubSvrName"></param>
            <param name="SubDBName"></param>
            <param name="Reason"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ReplDrainFailed(System.String,System.String,System.String)">
            <summary>
            Your SqlSecondaryType in your Manifest must be set to LogShipping in order to run this command.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ErrorInApplicationSQL(System.String,System.Data.SqlClient.SqlException)">
            <summary>
            A SQL error was found in the file "{0}". The error was: {1}.
            </summary>
            <param name="Filename"></param>
            <param name="se"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NoPermission(System.Data.SqlClient.SqlException)">
            <summary>
            No permission to perform the operation.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InvalidFileShare(System.String,System.String,System.Exception)">
            <summary>
            Invalid FileShare: "\\\\{0}\\{1}".
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotStartJob(System.String,System.String)">
            <summary>
            Job {0}:{1} cannot be started.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotStopJob(System.String,System.String)">
            <summary>
            Job {0}:{1} cannot be stopped.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ChangeNotAllowedInUpdateVersion(System.String)">
            <summary>
            {0} isn't allowed to be changed in Upgrade version.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CouldNotCreateSourceFile(System.String,System.Exception)">
            <summary>
            Could not write to the source file {0}. The error was {1}.
            </summary>
            <param name="FileName"></param>
            <param name="e"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.FileGroupMissing(System.String,System.String,System.String)">
            <summary>
            65;You have specified the FileGroup "{0}" in your {1}, however, this FileGroup is missing from your {2}. By default, the standard FileGroups "Primary" and "LogFileGroup" are available in your Manifest, but custom FileGroups must be specified.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MustDeclareSqlOrFileFailSafeSetNodes">
            <summary>
            You must declare either SqlFailSafeSet or FileFailSafeSet nodes for adding a partition.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InvalidFailSafeSetNumber">
            <summary>
            All Fail Safe Set numbers must be unique, sequential and start from 0. With add partition, new FSS numbers must resume from the last available FSS Number.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.RequiredParameterMissing(System.String)">
            <summary>
            The required parameter {0} is missing from the command line.
            </summary>
            <param name="Parameter"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NoDatabase(System.String,System.String)">
            <summary>
            Database "{0}:{1}" is not registered.
            </summary>
            <param name="ServerName"></param>
            <param name="DatabaseName"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NoFileShare(System.String,System.String)">
            <summary>
            FileShare "{0}:{1}" is not registered.
            </summary>
            <param name="ServerName"></param>
            <param name="FileSharePath"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDropPrimary(System.String,System.String,System.String)">
            <summary>
            CannotDropPrimary = "{0}:{1}" is a primary {2}. Please demote before dropping.
            </summary>
            <param name="ServerName"></param>
            <param name="ObjName"></param>
            <param name="ObjType"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDropDefaultPrimary(System.String,System.String)">
            <summary>
            Database "{0}:{1}" is a default primary database. Cannot drop the default primary.
            </summary>
            <param name="ServerName"></param>
            <param name="DatabaseName"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MustHaveAnOnlineConfig(System.String)">
            <summary>
            Cannot change the status of "{0}:WstConfig" to "{1}" because it is the last online WstConfig database.
            </summary>
            <param name="ServerName"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NoOnlineDatabaseInFss(System.String,System.String)">
            <summary>
            No databases in the same failsafe set as "{0}:{1}" are online.
            </summary>
            <param name="ServerName"></param>
            <param name="DBName"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.SqlException(System.Data.SqlClient.SqlException)">
            <summary>
            SqlException Wrapper
            </summary>
            <param name="se"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.WstConfigAlreadyExists(System.String)">
            <summary>
            The WstConfig database already exists on the server {0}
            </summary>
            <param name="ServerName"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NotYetImplemented_NYI(System.String)">
            <summary>
            The function {0} is Not Yet Implemented (NYI)
            </summary>
            <param name="UnimplementedMethod"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NoReplSecondary(System.String)">
            <summary>
            NoReplSecondary = Type of Secondary {0} doesn't support replication.
            </summary>
            <param name="TypeOfSqlSecondary"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.PubSubNotInSameFSS">
            <summary>
            Publishing database and subscribing database are not in the same fail safe set.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ConfigChangedForAdminLock">
            <summary>
            Config Databases have changed. Please rerun command.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InvalidValue(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            89;The value {0} for {1} is invalid. Valid values are {2} to {3}.
            </summary>
            <param name="Value"></param>
            <param name="Description"></param>
            <param name="minVal"></param>
            <param name="maxVal"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InvalidValue(System.String,System.String,System.Int32,System.Int32,System.Exception)">
            <summary>
            The value {0} for {1} is invalid. Valid values are {2} to {3}.
            </summary>
            <param name="Value"></param>
            <param name="Description"></param>
            <param name="minVal"></param>
            <param name="maxVal"></param>
            <param name="e"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ReplicasCannotBeOnSameServer(System.String,System.String,System.String)">
            <summary>
            There are 2 or more {0} in Fail Safe Set {1} on the same server "{2}".
            </summary>
            <param name="fssType"></param>
            <param name="partitionNum"></param>
            <param name="serverName"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ErrorGeneratingReplicationStoredProcedures(System.String,System.Exception)">
            <summary>
            Could not create temporary database for generating replication stored procedures. The error occured on server {0}. The error message was {1}
            </summary>
            <param name="Server"></param>
            <param name="e"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.FixedParCannotHaveFileShare">
            <summary>
            Only non-partitioned or variable partitioning applications are allowed to have file shares.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ErrorReservedWord(System.String)">
            <summary>
            You cannot use the term {0} for the requested action. This is a Webstore reserved word.
            </summary>
            <param name="ReservedWord"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDropNonEmptyDep(System.String)">
            <summary>
            Deployment {0} is already deployed and can only be dropped with -force option.
            </summary>
            <param name="DeploymentName"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotForceRepairWithPrimaryExist">
            <summary>
            Cannot force repair database because there is still primary in the fail safe set. Please demote primary before force repair.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotAddPartition">
            <summary>
            Cannot add partition to fixed or non partitioned application.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.LogReaderJobMissing(System.String,System.String)">
            <summary>
            LogReader Job does not exist for database {1}:{2}.
            </summary>
            <param name="pubSvrName"></param>
            <param name="pubDBName"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.DistribJobMissing(System.String,System.String,System.String,System.String)">
            <summary>
            98;Distribution Job does not exist for replication from {0}:{1} to {2}:{3}.
            </summary>
            <param name="pubSvrName"></param>
            <param name="pubDBName"></param>
            <param name="subSvrName"></param>
            <param name="subDBName"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.DistribJobMissing2(System.String,System.String,System.String)">
            <summary>
            215;Distribution Job {0} does not exist for replication on server {1} for database {2}.
            </summary>
            <param name="JobName"></param>
            <param name="ServerName"></param>
            <param name="DatabaseName"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.SqlServerAgentNotRunning(System.String)">
            <summary>
            Sql Server Agent on Server {0} is not running.
            </summary>
            <param name="serverName"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ConfigVersionDifferent">
            <summary>
            WstConfig databases have different versions. Please finish upgrading before running any operation.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.LogError(System.Exception,System.String)">
            <summary>
            {0}\r\n\r\nFor more info see "{1}"
            </summary>
            <param name="e"></param>
            <param name="LogFile"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NoFailSafeSetsToSetup">
            <summary>
            There are no Fail Safe Sets to Setup. Run Import first.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CantSetBoth">
            <summary>
            Can't set default primary for SQLFailSafeSet and FileFailSafeSet at the same time.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CantViewBoth">
            <summary>
            Can't view history for SQLFailSafeSet and FileFailSafeSet at the same time.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InvalidFormat(System.String)">
            <summary>
            Invalid format {0}. The -newprimary parameter needs to be of the format Server\\Databasename for database or Server\\Filesharepath for fileshares.
            </summary>
            <param name="BadParm"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.LockException(System.Exception)">
            <summary>
            108;Unexpected SQL error creating Administration Lock {0}
            </summary>
            <param name="e"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InvalidEnum(System.String,System.String)">
            <summary>
            109;Invalid {0}: "{1}"
            </summary>
            <returns>WmoException</returns>
            <param name="strType"></param>
            <param name="str"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InvalidFailSafeSetCount(System.Int32)">
            <summary>
            119;Invalid Fail Safe Set Count: {0}
            </summary>
            <param name="i"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.UnexpectedFailure(System.Exception)">
            <summary>
            121;Unexpected failure: {0}
            </summary>
            <param name="e"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.UnexpectedFailure(System.String)">
            <summary>
            121;Unexpected failure: {0}
            </summary>
            <param name="Problem"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.UnexpectedFailure">
            <summary>
            127;Unexpected failure
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InvalidFileShareState">
            <summary>
            122;If you specify a Primary node, the FileShare and DataServer must be in the list of FileShares on this partition.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotSpecifySource">
            <summary>
            124;Validation failure: Cannot specify source for a publication used for Secondaries.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ColumnNamesMissing">
            <summary>
            125;Validation failure: Must specify names for the ChangeDateTime and NeedsReplication columns for MultiMaster publications.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.FileIOError(System.String,System.Exception)">
            <summary>
            126;Failed to read file {0}
            </summary>
            <param name="Filename"></param>
            <param name="e"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ReThrow(System.Exception)">
            <summary>
            ReThrow WmoExecption
            </summary>
            <param name="e"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ProxyCallException(System.String,System.String,System.Exception)">
            <summary>
            128;{0}+{1}: Unexpected proxy call error.
            </summary>
            <param name="objectName"></param>
            <param name="methodName"></param>
            <param name="e"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CommandAbortException(System.Exception)">
            <summary>
            129;Command aborted
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NoPartitionMoveMap(System.String)">
            <summary>
            130;No movedata specified for "{0}" deployment!
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MoreThanTwoNICsNotAllowed(System.String)">
            <summary>
            More than 2 NICs for server {0} is not allowed.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.OnlyOnePreferredNICAllowed(System.String)">
            <summary>
            Only one preferred NIC is allowed for server {0}.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InvalidArgument(System.String,System.String,System.String)">
            <summary>
            133;Invalid argument "{0} {1}": {2}
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ColumnNotExist(System.String,System.String)">
            <summary>
            ColumnNotExist = 134;After Manifest import, the required column [{0}] on Table [{1}] does not exist!
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MismatchServerAndIP(System.String,System.String)">
            <summary>
            137;IP "{0}" does not belong to Server "{1}".
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MoveDataNotFinish">
            <summary>
            138;MoveData process is not yet finished!
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InvalidJobName(System.String,System.String)">
            <summary>
            201;The job name {0}, when combined with the database {1} exceeds 128 characters.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotUpdateDeployedDatabase(System.String,System.String)">
            <summary>
            202;Cannot update info of database {0}:{1}. Only databases in the state of NotDeployed or NeedsRepair can be updated.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MissingReplicationStoredProcedure(System.String)">
            <summary>
            203;The replication stored procedure {0} was not found in the list of registered stored procedures. This is required for replication.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.TooManySecondaries">
            <summary>
            205;Number of replicas per fail safe set has to be less than number of servers per cluster for the deployment.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NumSqlFssNumFileFssNotDivisible">
            <summary>
            206;Number of SqlFailSafeSet and NumberFileFailSafeSet are not divisible by each other.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.JobWouldNotStop(System.String)">
            <summary>
            207;The job "{0}" was disabled, but would not stop. Investigate the process to see if it is hung.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InvalidCharacters(System.String,System.String,System.String)">
            <summary>
            208;The {2} with the identifier "{0}" contains an invalid character. The characters {1} are not allowed in identifiers.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.OneParameterOrTheOther(System.String,System.String)">
            <summary>
            210;This command requires either the {0} parameter or the {1} parameter. Specify one or the other, and not both.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.SqlServerNotRunning(System.String)">
            <summary>
            214;Sql Server on {0} is not running!
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.AllNeedsRepair(System.Int32)">
            <summary>
            216;The Sql Fail Safe Set {0} has all databases marked needs repair. At least one database must be online or offline.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.PrimaryCannotBeNeedsRepair(System.Int32,System.String,System.String)">
            <summary>
            217;The Sql Fail Safe Set {0} has the primary database {1}:{2} marked needs repair.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.PrimaryOfflineNotAllowed(Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            221;"{0}:{1}" is a Primary database. Cannot mark primary Offline. Demote first and then mark Offline.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.UpdateVersionNotCalled">
            <summary>
            222:In order to call UpgradeStatus or UpgradeSetup, you must import a new Manifest and call UpdateVersion first.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MustFinishUpgrade">
            <summary>
            224:The previous call to UpdateVersion was not completed by a call to UpgradeSetup or UpgradeRollback.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.XMLInvalidValue(System.String,System.String)">
            <summary>
            225:The {0} element "{1}" is invalid.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.WitnessServerMissing(System.String)">
            <summary>
            226;Witness server (per SQL FailsafeSet) missing for (Mirroring) deployment {0}.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.OnlyTwoMirroringDbsPerFSSAllowed">
            <summary>
            227;Number of databases per SQL FailsafeSet cannot exceed 2 for Mirroring Topology.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MirroringDbsRequireSameName(System.String)">
            <summary>
            228;The database names in a Mirroring Failsafeset are required to be the same. Failsafeset Number={0}
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NoMirroringInfo">
            <summary>
            229;XML tag "Mirroring" required for Mirroring.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.WitnessServerCannotShareServer">
            <summary>
            230;Witness Server cannot be on the same server as that of Principal or Mirror database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ServerHasNoMirroringEndPoint(System.String)">
            <summary>
            231;Server {0} does not have a registered end-point. Please re-register the server with end point information.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MirroringStateChangedDuringOperation(System.String,System.String,System.String,System.Exception)">
            <summary>
            232;{0}:{1} is no more a {2}. Please rerun the command.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.TooFewDataPartitions(System.String,System.String)">
            <summary>
            233;There are too few data partitions specified.  Presently there are {0} specified in the Manifest, but due to the Deployment XML at least {1} are required.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MissingDataServerInfo">
            <summary>
            234;The &lt;DataServers&gt; and &lt;DataServer&gt; elements must be defined in the Deployment XML.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotForceRepair">
            <summary>
            500;Cannot force repair with MultiMaster/WriteAllCopies/Mirroring unless all databases in the Fail Safe Set are marked NeedsRepair.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDropSecurityRole(System.String,System.String)">
            <summary>
            501;Cannot drop security role {1}, it still has a member security account {0}.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotAddLogicalFileNameIfNotExistInSqlFileLogical">
            <summary>
            502;The list of Logical Files from the FileGroup section of your Manifest must match the DeploymentLogicalFiles section of your Deployment.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.DeployedDatabaseDoesNotMatchDatabaseTemplate(System.String,System.String,System.String,System.String)">
            <summary>
            503;During validation of the database {0}:{1}, Webstore found that the list of File groups and Logical Files for this database: {2} does not match Webstore's configuration for this database {3}.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MustSetDefaultPhysicalLocation(System.String,System.String)">
            <summary>
            504;The {0} value must be set for the Deployment Logical File {1}. Use wst dep sqlfiledefault.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ErrorInGrantPermission(System.String,System.String,System.String,System.String)">
            <summary>
            1000;The object {0} could not have the permission {1} granted to {2}. The error was {3}.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MissingElementInAddCluster">
            <summary>
            With Add Clusters, the Clusters and Cluster elements must be defined in the XML.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.FssCrossCluster(System.Int32,System.String)">
            <summary>
            Fail Safe Set {0} of Deployment {1} doesnt have all members accessed by the same affinity cluster.
            </summary>
            <param name="sqlFssId"></param>
            <param name="depName"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NoReplStream(System.String,System.String)">
            <summary>
            509;No replication stream setup for "{0}:{1}".
            </summary>
            <param name="ServerName"></param>
            <param name="DBName"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ProvPrefOutOfRange(System.Int32)">
            <summary>
            ProvPref ({0}) must be [0,100].
            </summary>
            <param name="provPref"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ForceMarkOfflineNotAllowedWithWriteAllCopies">
            <summary>
            511;Force mark offline is not allowed for WriteAllCopies topology.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CantSetBothParameter(System.String,System.String)">
            <summary>
            512;Can't set [{0}] and [{1}] at the same time.
            </summary>
            <param name="Param1"></param>
            <param name="Param2"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.LogicalPartitionCountMustBeDividableByClusterCount">
            <summary>
            513;Logical Partition Count Must be Dividable By Cluster Count
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NoObjectInConfig(System.String,System.String,System.Exception)">
            <summary>
            519;The {0} "{1}" is not registered.
            </summary>
            <param name="objectType"></param>
            <param name="name"></param>
            <param name="innerException"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ObjectAlreadyExistsOverwrite(System.String,System.String)">
            <summary>
            The {0} "{1}" already exists in the Config Database. Use -overwrite to update.
            </summary>
            <param name="objectType"></param>
            <param name="name"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InvalidParameter(System.String,System.String)">
            <summary>
            Parameter "{0} {1}" is invalid.
            </summary>
            <param name="Switch"></param>
            <param name="Value"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ConnectionFailureToWstConfig">
            <summary>
            ConnectionFailureToWstConfig = 529;Connection failure to WstConfig database.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CantPromoteDemoteBoth(System.String)">
            <summary>
            CantPromoteDemoteBoth = 530;Can't {0} both the SQLFailSafeSet and FileFailSafeSet at the same time.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CantUpgradeWithOfflineDatabases">
            <summary>
            CantUpgradeWithOfflineDatabases = 531;Under Write All Read Any topology, databases cannot be offline during upgrade.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InappropriateOperation(System.String,System.String,System.String)">
            <summary>
            532;The {0} operation is inappropriate for topology {1}.  The toplogy can only accept the following operation(s) to complete:  ({2}).
            </summary>
            <param name="topology"></param>
            <param name="op"></param>
            <param name="validOperations"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.LogreaderDrainFailed(System.String,System.String)">
            <summary>
            553; Logreader for {0}:{1} cannot be drained.
            </summary>
            <param name="PubSvrName"></param>
            <param name="PubDBName"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDropReplFromPrimary(System.String,System.String)">
            <summary>
            534; Can not drop replication from primary database {0}:{1}. See also the -force option.
            </summary>
            <param name="serverName"></param>
            <param name="dbName"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDoReplAction(System.String,System.String,System.String,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus)">
            <summary>
            535; Cannot {0} replication with database {1}:{2} in this state: {3}
            </summary>
            <param name="action"></param>
            <param name="serverName"></param>
            <param name="dbName"></param>
            <param name="dbState"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.PrimaryDefaultStatusNotOnline(System.String,System.String,System.String)">
            <summary>
            536; Can not set primary database {0}:{1} with default status {2}. Primary database default status must be online.
            </summary>
            <param name="serverName"></param>
            <param name="dbName"></param>
            <param name="strDefaultStatus"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.PrimaryStandbyNotAllowed(System.String,System.String)">
            <summary>
            537; Can not set primary database {0}:{1} standby.
            </summary>
            <param name="serverName"></param>
            <param name="dbName"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CanNotStandbyConfig(System.String,System.String)">
            <summary>
            538; Can not set config database {0}:{1} standby.
            </summary>
            <param name="serverName"></param>
            <param name="dbName"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.WriteAllCopiesNotSupportStandby(System.String,System.String)">
            <summary>
            539; WriteAllCopies topology does not support database {0}:{1} standby status
            </summary>
            <param name="serverName"></param>
            <param name="dbName"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotUpgradeWstConfig">
            <summary>
            1001;Use the WstConfigUpgrade.exe tool to upgrade the WstConfig database.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InvalidCommandLineParameter(System.String)">
            <summary>
            1002;Invalid parameter: {0}
            </summary>
            <param name="msg"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NoLongerSupported(System.String)">
            <summary>
            1003;{0} is no longer supported.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.AlreadyUpgradingToThisManifest">
            <summary>
            1004;Upgrade is already upgrading to this Manifest.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.UpgradeInProgress">
            <summary>
            1005;Upgrade is in progress. Cannot specify a different Manifest.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.DuringRollingUpgradeCannotUpgradeWithFSSInBadState(System.Int32)">
            <summary>
            1006;During call to upgrade with -RollingUpgrade set, the Fail
            Safe Set {0} has databases in NeedsRepair or NotDeployed state.
            This would cause 100% R/W outage. Upgrade was not performed on
            this FSS.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.DataServerCountMustBeAnEvenNumber(System.Int32)">
            <summary>
            1007;Data server count specified ({0}) must be an even number.
            </summary>
            <param name="countDataServers"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.IncorrectAmountOfFss">
            <summary>
            1008;The number of fail safe sets specified is incorrect.  Only one fail safe set containing one new database can be added to a Config at a time.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.IncorrectAmountOfDatabases">
            <summary>
            1009;The number of databases specified is incorrect.  Only one database can be added to a Config at a time.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NoFileFssForFileShareOnlyManifest">
            <summary>
            1010;The Deployment XML file being imported does not have any file fail safe sets, and the Manifest is a File Share only manifest (meaning it has no SQL objects defined).  The Import cannot continue.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotRebootServerWithWstConfig(System.String)">
            <summary>
            1100;{0} has WstConfig database on it. Cannot reboot a server which has the WstConfig database on it.
            </summary>
            <param name="serverName">Name of the server being rebooted</param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotRebootServerWithoutSqlDbs(System.String)">
            <summary>
            1101;{0} does not have any Sql databases registered with Webstore. Cannot reboot servers that do not have registered Sql databases with Webstore.
            </summary>
            <param name="serverName">Name of the server being rebooted</param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotRebootServerWithFileShares(System.String)">
            <summary>
            1102;Server {0} has fileshares registered with Webstore. Cannot reboot servers with FileShares.
            </summary>
            <param name="serverName">Name of the server being rebooted</param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ServerFssNotInDefaultState(System.String)">
            <summary>
            1103;The following server Fss's are not in default state. {0}
            </summary>
            <param name="errMsg">Detailed list of fss's/Db's not in default state.</param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.RebootServerTimeout(System.String,System.Int32)">
            <summary>
            1104; Server reboot for server :{0} Timedout. Timeout period was {1} ms.
            </summary>
            <param name="serverName"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.RebootServerFailure(System.String,System.Exception)">
            <summary>
            1105; Server reboot for server :{0} failed. Look at inner exception for details.
            </summary>
            <param name="serverName"></param>
            <param name="innerException"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.TooManyParametersForMappingDelete">
            <summary>
            1111;You cannot specify to delete more than one mapping at a time.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MissingParameterValueForSetting(System.String)">
            <summary>
            1200;Setting Name - {0}: Either the value or the Overwrite or the Remove attribute of a setting must be set.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.SettingAlreadyExists(System.String)">
            <summary>
            1201;Setting Name - {0} already exists in the WstConfig database. Cannot override existing setting. Please remove setting and then readd.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MissingElementDefinition(System.String)">
            <summary>
            1202;Missing definition for {0}
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MissingSettingDefinition(System.String)">
            <summary>
            1203;The definition for setting {0} does not exist.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InvalidValueProvided(System.String)">
            <summary>
            1204; The value for setting {0} is not correct.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ElementCannotBeEmpty(System.String,System.String)">
            <summary>
            1205; Inner Text for element {0} under node {1} cannot be empty.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ObjectDoesNotExist(System.String,System.String,System.Exception)">
            <summary>
            1206;The {0} "{1}" does not exist in the configuration database.
            </summary>
            <param name="objectType"></param>
            <param name="objectName"></param>
            <param name="innerException"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ClusterCanNotBeNull">
            <summary>
            1208;The cluster cannot be NULL.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.IndexOutOfRange(System.String,System.String)">
            <summary>
            1209;The object {0} with type {1} does not exist in the collection.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.DatabaseTemplateAlreadyExists(System.String)">
            <summary>
            1211;The DatabaseTemplate {0} already exists.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.RequiredEitherParameterMissing(System.String,System.String)">
            <summary>
            1212;You must specify either the {0} parameter or the {1} parameter on the command line.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ValueHasNotBeenSpecified(System.String,System.String)">
            <summary>
            1214;The {0} property in {1} has not been specified.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDropDefaultDatabaseTemplate">
            <summary>
            1215;You cannot drop the default database template.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDropTemplateAssignedToFSS">
            <summary>
            1216;You cannot drop a database template assigned to one or more SqlFailSafeSets.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDropTemplateAssignedToServer">
            <summary>
            1217;You cannot drop a database template assigned to one or more Servers.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.SqlFailSafeSetNotRegistered(System.Int16,System.String)">
            <summary>
            1219;Sql fail safe set number {0} from the Deployment {1} is not registered.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDropWebstoreSetting(System.String)">
            <summary>
            1221;Setting {0} is a webstore setting. Cannot drop webstore setting.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDemotePrincipal(System.String,System.String,System.String,System.String)">
            <summary>
            1227;Cannot demote database {0}:{1} while the mirror database {2}:{3} is offline.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotOfflinePrincipal(System.String,System.String,System.String,System.String)">
            <summary>
            1228;Cannot offline database {0}:{1} while the mirror database {2}:{3} is offline.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotOnlineMirror(System.String,System.String,System.String,System.String)">
            <summary>
            1229;Cannot online database {0}:{1} while the principal database {2}:{3} is offline. Online the principal database first.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MirroringDoesNotSupportServerDemoteWithNopromote">
            <summary>
            1231;Mirroring does not support server level demote with -nopromote option.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDropDefaultCluster">
            <summary>
            1232;You cannot drop the default cluster
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDropClusterAssignedToServer">
            <summary>
            1233;You cannot drop a cluster assigned to one or more Server(s)
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.PrimaryFileGroupIsMissing">
            <summary>
            1235;The "Primary" filegroup is missing. Sql Server requires that a Primary filegroup be defined for every database.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDropDefaultServerRole">
            <summary>
            1237;You cannot drop a default server role.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDropServerRole(System.String)">
            <summary>
            1238;You cannot drop a server role assigned to one or more {0}(s).
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDropServer(System.String)">
            <summary>
            1239;The server {0} is in use. It cannot be dropped.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ServerMustHaveDistributionDatabaseTemplate(System.String)">
            <summary>
            1240;You cannot assign the database template {0} to a server. Servers can only have distribution database templates.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.SqlFailSafeSetCannotHaveDistributionDatabaseTemplate(System.String)">
            <summary>
            1241;You cannot assign the database template {0} to a sql fail safe set. Sql fail safe sets can only have database templates that are not for distribution databases.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotAssignServersToCrossClusters(System.String,System.Int32,System.String,System.String)">
            <summary>
            1242;The Deployment {0} at Fail Safe Set {1}. You cannot assign the Data Servers {2} and {3} to different clusters within the same FSS.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.DatabaseNotForceRepairable(System.String,System.String)">
            <summary>
            1243;{0}:{1} is not force repairable. It is in the restoring state. Cannot recover from this copy.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringOjbectIsInUseCannotDelete(System.String)">
            <summary>
            1245;{0}
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ActionIdMustExistInTheCollection(System.String,System.String)">
            <summary>
            1246;The ActionID "{0}" does not exist in the list of ProcessAction for for AlertProcess "{1}".
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ProcessActionDoesNotHaveAnAction(System.String,System.String)">
            <summary>
            1247;The ProcessAction "{0}" specifies the Action "{1}" for a parent, but it does not exist.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoredDatumInvalidAttribute(System.String,System.String)">
            <summary>
            1248;The MonitoredDatum "{0}" cannot have an assembly, class, or method specified for a type of "{1}".
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringMissingAttribute(System.String,System.String,System.String)">
            <summary>
            1249;The {0} object with a name of "{1}" has a missing attribute "{2}".
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringMissingProperty(System.String,System.String,System.String,System.String)">
            <summary>
            1251;The {0} object with a name of "{1}" has a missing property "{2}" for a type of "{3}".
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringInvalidPropertyValue(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            1252;The {0} object with a name of "{1}" has a property named "{2}" which has an invalid value "{3}".  Acceptable values are "{4}".
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringInvalidNextAction(System.String,System.String,System.String)">
            <summary>
             1253;For Action "{0}" the "{1}" value must match a name in the collection, or it must be "{2}".
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringInvalidMonitoreDatumForAlertRule(System.String,System.String,System.String)">
            <summary>
             1254;The the alert rule [{0}], there is an invalid Monitored Datum [{1}] in the {2} conditions
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringInvalidPropertyDataType(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            1255;The {0} object with a name of "{1}" has a property named "{2}" which has an invalid data type of "{3}".  The only acceptable value is "{4}".
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringInvalidPropertyName(System.String,System.String,System.String,System.String)">
            <summary>
            1256;The {0} object with a name of "{1}" has a property named "{2}", which is invalid.  The only acceptable property names are "{3}".
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringInvalidAlertRuleCondition(System.String,System.String)">
            <summary>
            1257;For Alert Rule [{0}] there is a generate alert condition for which the monitored datum [{1}] will cause an infinte loop with the resolve alert condition.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringInvalidTimeAlertRuleCondition(System.String,System.String,System.Int32,System.String)">
            <summary>
            1258;For Alert Rule [{0}] there is a [{1}] condition for which threhold needs to be greater than [{2}], the sampling frequency for the monitored datum [{3}].
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InvalidXML(System.String,System.Int32,System.Int32)">
            <summary>
            1258;There was an error importing the XML: [{0}].\nThis occurred in line {1} at position {2}.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringInvalidDataPartition(System.String)">
            <summary>
            1259;The Monitoring Data Partition Num for Cluster [{0}] must be greater than zero, but less than the total # of data partitions in the WstPerf deployment.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringBadMonitoredDatum(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            1260;The MonitoredDatum "{0}" has a {1} attribute of with a value of "{2}".  The {3} attribute is set to "{4}", which must be greater than or equal to the {1} attribute.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringAlertRuleMustHaveMonitoredDatumMapped(System.String,System.String,System.String,System.String)">
            <summary>
            1261;For the Server Role Mapping "{0}", the Alert Rule "{1}" has a {2} condition in which the monitored datum "{3}" is referenced.  It is not mapped to this Server Role, and must be for this alert rule to work.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ActionIdHasCircularReference(System.String,System.String)">
            <summary>
            1262;The ActionID "{0}" has a circular reference in the AlertProcess "{1}".
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MovingDataAlreadyInProgress(System.Int32)">
            <summary>
            1263;The Sql Fail Safe Set {0} is already in a Move Data state. Abort the process with 'wst par movedata -abort -FssNum ###' or Force the process to complete with 'wst par movedata -force -FssNum ###'
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.EmptyUID(System.String)">
            <summary>
            1265;UID for {0} cannot be Empty.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.EmptyProperties">
            <summary>
            1266;Properties is NULL or has an invalid Uid.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NoAlertProcessRetryCount(System.String)">
            <summary>
            1267;If the AlertProcessName has a value, it is necessary to specify an AlertProcessRetryCount (greater than or equal to zero) for Alert Rule [{0}].
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NoAlertProcessRetryPeriod(System.String)">
            <summary>
            1268;If the AlertProcessName has a value, it is necessary to specify an AlertProcessRetryPeriod (greater than zero) for Alert Rule [{0}].
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.AlertProcessAttributeNotNeeded(System.String,System.String)">
            <summary>
            1269;The {0} is not necessary without an AlertProcessName for Alert Rule [{1}].
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InappropriateSqlFailSafeSetStatus(System.String,System.Int16)">
            <summary>
            1270;The {0} operation is inappropriate for fail safe set #{1}. The FSS is in the process of moving data between fail safe sets. Complete or abort the move data process and try again.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.AllocateInvalidNumberOfServers">
            <summary>
            1271;With "None" as the PartitionType in the manifest and with the Topology set to "NoSecondaries", only one server can be used when creating a deployment.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.AllocateServersMustBeInSameCluster">
            <summary>
            1272;With "None" as the PartitionType in the manifest, all servers must be in the same cluster.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InvalidSeverity(System.String)">
            <summary>
            1273;The severity on the Alert Rule [{0}] must be greater than 0.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotFindClassInAction(System.String,System.String,System.String)">
            <summary>
            1274;Cannot find class [{0}] for Action [{1}] of type [{2}].
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotFindMethodInClass(System.String,System.String,System.String,System.String)">
            <summary>
            1275;Cannot find method [{0}] on class [{1}] for Action [{2}] of type [{3}].
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotApplyPropertyToClass(System.String,System.String,System.String,System.String)">
            <summary>
            1276;Cannot apply property [{0}] on class [{1}] for Action [{2}] of type [{3}].
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InvalidPropertyTypeForClass(System.String,System.String,System.String,System.String)">
            <summary>
            1277;The passed in type [{0}] on property [{1}] for Action [{2}] is invalid, it needs to be [{3}].
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.StripeValidationFailure(System.String,System.String,System.String,System.String)">
            <summary>
            1278;Failure validating server {0} shares "{1}" as "{2}". The exception was: {3}.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CleanUpHasStarted">
            <summary>
            1279;MoveData cannot be called. We are currently cleaning data. Call wst par cleanup
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.JobStatusInvalidDataPartition(System.String,System.String)">
            <summary>
            JobStatusInvalidDataPartition = 1280;The JobStatus Data Partition Num for Cluster [{0}] must be greater than zero, but less than the total # of data partitions in the [{1}] deployment.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDropSqlFailSafeSet(System.Int32)">
            <summary>
            1281;Cannot drop Sql Fail Safe Set #{0} until all databases in the FSS are marked Needs Repair.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.FssPurgeCannotBeUsedForVariable">
            <summary>
            1282;The fss purge command cannot be used for variable partitioned applications.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.FssDropCannotBeUsedForFixed">
            <summary>
            1283;The fss drop command cannot be used for fixed partitioned applications.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.IncorrectSqlFssState(System.Int16,System.String,Microsoft.Webstore.Management.Wmo.WmoEnum.FailSafeSetStatus)">
            <summary>
            1284;The Sql Fail Safe ID {0} on the deployment {1} has an invalid state for this operation: {2}
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MethodHasBeenDeprecated(System.String,System.String)">
            <summary>
            1285;The method [{0}] on the [{1}] object has been deprecated.  It should no longer be used.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.PartitionOperationFailed(System.String)">
            <summary>
            1286;{0} failed on one or more partitions.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotBeUsedForVariable(System.String)">
            <summary>
            1287;The operation {0} cannot be used for variable partitioned environments.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InappropriateStatusDuringMoveData(System.String,System.String,System.String)">
            <summary>
            1288;The {0} operation is inappropriate for the database "{1}:{2}". Finish moving or cleaning data first.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringBadEventLogProperty(System.String)">
            <summary>
            1289;The MonitoredDatum "{0}", which is an EventLog type contains a negative property with no positive properties.  With a negative property, at least one positive property is necessary.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringBadEventLogProperty(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            1290;The MonitoredDatum "{0}" has a property "{1}" which has a value of {2}.  It must be greater or equal to the sampling frequency, which is {3}.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMoveDataResource.GetObject(System.String)">
            <summary>
            GetObject
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentResource.GetObject(System.String)">
            <summary>
            GetObject
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoAdminLock">
            <summary>
            Summary description for WmoAdminLock.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoConfig">
            <summary>
            Class for WmoConfig
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoNamedObject">
            <summary>
            Base class for objects identified by name
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoNamedObject.m_name">
            <summary>
            Name of the object
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoNamedObject.m_isInCollection">
            <summary>
            Whether the object is inside a collection
            Names of objects inside a collection can't be changed
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoNamedObject.isUpdated">
            <summary>
            Determines whether or not this item has been updated or not
            </summary>        
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNamedObject.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNamedObject.Name">
            <summary>
            name of the object
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNamedObject.IsInCollection">
            <summary>
            whether this object is in a collection
            (set by the add/remove methods for collections
            determines whether the name can be set)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNamedObject.IsUpdated">
            <summary>
            Determines whether or not this item has been updated or not
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoConfig.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoConfig.GetCentralizedSettingOverride(System.String,System.Object)">
            <summary>
            Returns the Setting that matches the settingEntry name. If the settingEntry does not exist
            in the WebstoreMetaData.WebstoreSettings class, it will return the default.
            </summary>
            <param name="settingEntry"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoConfig.GetSqlFailSafeSet(System.String,System.String)">
            <summary>
            Find and return the WmoSqlFailSafeSet object which contains the given database
            If it doesn't exist, throw exception.
            </summary>
            <param name="serverName"></param>
            <param name="dbName"></param>
            <returns>WmoSqlFailSafeSet Object which contains the given database</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoConfig.GetFileFailSafeSet(System.String,System.String)">
            <summary>
            Find and return the WmoFileFailSafeSet object which contains the given fileshare
            If it doesn't exist, throw exception.
            </summary>
            <param name="serverName"></param>
            <param name="fileSharePath"></param>
            <returns>WmoFileFailSafeSet Object which contains the given fileshare</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoConfig.WaitForClientPolling(System.Boolean)">
            <summary>
            Waits for client polling. If bWait = false, the user will be informed they should
            wait, but no wait will actually occur.
            </summary>
            <param name="bWait">true if can't continue until clients refreshed</param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoConfig.WaitForActivePrimaryProcess(System.String,System.String)">
            <summary>
            Waits for Primary Active Connection to go down to Zero.
            </summary>
        </member>
        <member name="E:Microsoft.Webstore.Management.Wmo.WmoConfig.WmoStatusEvent">
            <summary>
            Status Events
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoConfig.Singleton">
            <summary>
            Singleton object. This is avaiable no matter where in the code base you are.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoConfig.ThreadPool">
            <summary>
            ThreadPool
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoConfig.Manifests">
            <summary>
            collection of manifests
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoConfig.Deployments">
            <summary>
            collection of Deployments
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoConfig.ServerRoles">
            <summary>
            collection of Server Roles
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoConfig.DataServers">
            <summary>
            collection of SqlServers
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoConfig.Clusters">
            <summary>
            collection of Clusters
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoConfig.DatabaseTemplates">
            <summary>
            Collection of DatabaseTemplates
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoConfig.Monitoring">
            <summary>
            Monitoring Configuration
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoConfig.Environment">
            <summary>
            Environment
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoConfig.ConnectionString">
            <summary>
            Connection String
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDTC">
            <summary>
            Class for WmoDTC
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDTC.#ctor">
            <summary>
            DTCExecute helper
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDTC.Dispose">
            <summary>
            DTCExecute helper
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDTC.DTCExecute(System.Object,System.Object[],System.Reflection.MethodBase)">
            <summary>
            DTCExecute helper
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum">
            <summary>
            Enumerations used by Wmo
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MaxServerNameLength">
            <summary>
            Constants
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.StrToSetupStep(System.String)">
            <summary>
            Convert a String into a WmoEnum.SetupStep.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.SetupStepToStr(Microsoft.Webstore.Management.Wmo.WmoEnum.SetupStep)">
            <summary>
            Convert a WmoEnum.SetupStep into a String.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.PartitioningTypeToStr(Microsoft.Webstore.Management.Wmo.WmoEnum.PartitioningType)">
            <summary>
            translating partitiontype to string
            </summary>summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.StrToSecondaryType(System.String)">
            <summary>
            translating string to secondarytype
            </summary>summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.SecondaryTypeToStr(Microsoft.Webstore.Management.Wmo.WmoEnum.SecondaryType)">
            <summary>
            translating secondarytype to string
            </summary>summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.CommandTypeToStr(Microsoft.Webstore.Management.Wmo.WmoEnum.CommandType)">
            <summary>
            translating commandtype to string
            </summary>summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.StrToCommandType(System.String)">
            <summary>
            Translating CommandType to string
            </summary>summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.StrToDBStatus(System.String)">
            <summary>
            Convert a string into a WmoEnum.DBStatus
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.StrToDefaultDBStatus(System.String)">
            <summary>
            Convert a string into a WmoEnum.DBStatus
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatusToStr(Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus)">
            <summary>
            Convert a WmoEnum.DBStatus into a string.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.StrToFailSafeSetStatus(System.String)">
            <summary>
            Convert a string into a WmoEnum.FailSafeSetStatus
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.AdminLockResourceTypeToStr(Microsoft.Webstore.Management.Wmo.WmoEnum.AdminLockResourceType)">
            <summary>
            Convert a WmoEnum.AdminLockResourceType into a string.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.AdminLockResourceTypeToVerboseStr(Microsoft.Webstore.Management.Wmo.WmoEnum.AdminLockResourceType)">
            <summary>
            Convert a WmoEnum.AdminLockResourceType into a verbose string.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.StrToFileShareStatus(System.String)">
            <summary>
            Convert a string into a WmoEnum.FileShareStatus
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.FileShareStatusToStr(Microsoft.Webstore.Management.Wmo.WmoEnum.FileShareStatus)">
            <summary>
            Convert a WmoEnum.FileShareStatus into a string.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.StrToPartitionStatus(System.String)">
            <summary>
            Convert a String into a WmoEnum.PartitionStatus
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.PartitionStatusToStr(Microsoft.Webstore.Management.Wmo.WmoEnum.PartitionStatus)">
            <summary>
            Convert a WmoEnum.PartitionStatus into a string.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.StrToBool(System.String,System.Boolean)">
            <summary>
            translating string to bool.
            </summary>summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.StrToPublicationType(System.String)">
            <summary>
            Convert a String into a WmoEnum.PublicationType.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.PublicationTypeToStr(Microsoft.Webstore.Management.Wmo.WmoEnum.PublicationType)">
            <summary>
            Convert a WmoEnum.PublicationType into a String.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.StrToReplCallMethod(System.String)">
            <summary>
            Convert a String into a WmoEnum.ReplCallMethod.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.ReplCallMethodToStr(Microsoft.Webstore.Management.Wmo.WmoEnum.ReplCallMethod)">
            <summary>
            Convert a WmoEnum.PublicationType into a String.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.GetAssemblyVersion">
            <summary>
            Used to get the Assembly version attribute of the executing assembly.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum.SetupStep">
            <summary>
            Enumeration of steps in setup at which an object's source code may be executed.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SetupStep.BeforeTables">
            <summary>
            before creating tables
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SetupStep.Tables">
            <summary>
            with tables
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SetupStep.AfterTables">
            <summary>
            after creating tables, before creating views
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SetupStep.Views">
            <summary>
            with views
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SetupStep.AfterViews">
            <summary>
            after creating views, before creating sprocs
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SetupStep.StoredProcedures">
            <summary>
            with sprocs
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SetupStep.AfterStoredProcedures">
            <summary>
            after creating sprocs
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SetupStep.SecurityRoles">
            <summary>
            with SecurityRoles
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SetupStep.Jobs">
            <summary>
            After Security roles are installed
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SetupStep.Publications">
            <summary>
            with Publications
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum.PartitioningType">
            <summary>
            Enumeration of partitioning types available to a manifest.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.PartitioningType.None">
            <summary>
            Manifest is not written to support partitioning
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.PartitioningType.Fixed">
            <summary>
            Fixed
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.PartitioningType.Variable">
            <summary>
            Variable
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum.SecondaryType">
            <summary>
            Enumeration of types of secondary
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SecondaryType.NoSecondaries">
            <summary>
            No Secondary
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SecondaryType.WriteAllCopies">
            <summary>
            replicas with no synchronization provided by webstore
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SecondaryType.Mirroring">
            <summary>
            Mirroring secondary
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SecondaryType.SingleMaster">
            <summary>
            Single master replication
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SecondaryType.MultiMaster">
            <summary>
            multi master replication
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum.TableType">
            <summary>
            Enumeration of types of objects registered as tables in the manifest.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.TableType.Table">
            <summary>
            Table
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.TableType.View">
            <summary>
            View
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum.CommandType">
            <summary>
            Enumeration of command types.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.CommandType.PrimaryOnly">
            <summary>
            WriteOnly
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.CommandType.PrimaryThenSecondary">
            <summary>
            WriteThenRead
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.CommandType.SecondaryThenPrimary">
            <summary>
            ReadThenWrite
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.CommandType.PrimaryOrSecondary">
            <summary>
            ReadOrWrite
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.CommandType.SecondaryOnly">
            <summary>
            ReadOnly
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.CommandType.WriteAllCopies">
            <summary>
            WriteAllCopies
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus">
            <summary>
            Status of a database
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus.Online">
            <summary>
            The database is online.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus.Offline">
            <summary>
            The database has been marked offline by admin.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus.NoWriteAll">
            <summary>
            The database has been marked no write all.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus.NeedsRepair">
            <summary>
            The database has been marked needed repaired.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus.NotDeployed">
            <summary>
            The database is not deployed.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus.Standby">
            <summary>
            The database is not deployed.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum.FailSafeSetStatus">
            <summary>
            Status of a Fail Safe Set
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.FailSafeSetStatus.NotDeployed">
            <summary>
            The fail safe set (SQL or File) is not deployed.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.FailSafeSetStatus.Deployed">
            <summary>
            The fail safe set (SQL or File) is deployed.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.FailSafeSetStatus.UpOrDowngrading">
            <summary>
            The SQL fail safe set is in progress of being upgraded.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.FailSafeSetStatus.MovingData">
            <summary>
            The SQL fail safe set is in the process of having data moved to or from it. Suspend any promote/demote operations.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum.AdminLockResourceType">
            <summary>
            Enumeration of types of objects that can be locked in the config db.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.AdminLockResourceType.SQLFailsafeSet">
            <summary>
            SQLFailsafeSet
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.AdminLockResourceType.FileFailsafeSet">
            <summary>
            FileFailsafeSet
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.AdminLockResourceType.DistributionDatabase">
            <summary>
            DistribDB
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.AdminLockResourceType.Manifest">
            <summary>
            Manifest
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.AdminLockResourceType.Deployment">
            <summary>
            Deployment
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.AdminLockResourceType.Write">
            <summary>
            Write
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.AdminLockResourceType.Ticket">
            <summary>
            Ticket
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.AdminLockResourceType.MoveData">
            <summary>
            MoveData lock. Disallows deployment, config and other MoveData locks but allows all others.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum.FileShareStatus">
            <summary>
            Status of a File Share
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.FileShareStatus.Online">
            <summary>
            The FileShare is online.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.FileShareStatus.Offline">
            <summary>
            The FileShare has been marked offline by admin.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.FileShareStatus.NeedsRepair">
            <summary>
            The FileShare has been marked needsrepair by admin
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.FileShareStatus.NotDeployed">
            <summary>
            The FileShare is not deployed.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum.PartitionStatus">
            <summary>
            Status of a partition
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.PartitionStatus.ReadWrite">
            <summary>
            ReadWrite
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.PartitionStatus.ReadOnly">
            <summary>
            ReadOnly
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus">
            <summary>
            Status values for MoveData. Shared by the WstMoveData program.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.NotInitialized">
            <summary>
            Not initialized. This is set at first insert.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.MoveInitialized">
            <summary>
            Initialed value when wst par movedata is called.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.MoveJobStarted">
            <summary>
            Value when WMO submits the job to the JobFramework.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.MoveStart">
            <summary>
            Set by WstMoveData when it first starts MoveData. Not set
            in WstConfig.PartitionMoveMap
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.MoveData">
            <summary>
            Set by WstMoveData while the data is being moved. Not set
            in WstConfig.PartitionMoveMap
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.MoveFinished">
            <summary>
            Set by WstMoveData as well as by Wmo when the data has finished
            being moved.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.MoveRemapped">
            <summary>
            Set by WMO when the data partition has been drained and remapped.
            No equavalent for clean.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.MoveFailed">
            <summary>
            Set by either WstMoveData.exe or WMO for several reasons. Equavalent to an abort,
            except that it is set by the code, rather then by the user. The Progress column
            will have the error message, which will be reflected in the Status.XML.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.MoveAborted">
            <summary>
            Set by the user, either explicitly by wst mar movedata -abort, or by setting
            a database on a fail safe set involved in a move to NeedsRepair.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.MoveJobFailed">
            <summary>
            When the job framework cannot start a job. This can be due to the
            JobFrameworkAgent service not running, the WstMoveData.exe program
            is missing, or other reasons.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.CleanInitialized">
            <summary>
            Can be set once the status of the partition is set to MoveRemapped.
            This is done by the call to wst par clean 
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.CleanJobStarted">
            <summary>
            Value when WMO submits the job to the JobFramework.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.CleanStart">
            <summary>
            Set by WstMoveData when the clean process is started.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.CleanData">
            <summary>
            Set by WstMoveData when the clean process is in the process of being cleaned.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.CleanFinished">
            <summary>
            Set on both the WstConfig and application databases when the cleanup is
            finished.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.CleanFailed">
            <summary>
            Set by either WstMoveData.exe or WMO for several reasons. Equavalent to an abort,
            except that it is set by the code, rather then by the user. The Progress column
            will have the error message, which will be reflected in the Status.XML.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.CleanAborted">
            <summary>
            Wmo sets this when the customer has aborted the process.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.CleanJobFailed">
            <summary>
            When the job framework cannot start the job.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.NotInvolved">
            <summary>
            At start up time for the WstMoveData binary, it queries the WstConfig for
            details given a particular partition number. If the system is in a very bad state,
            it is possible that the partition being asked about is not involved in moving data.
            This can occur if the WstConfig database thinks that a move is going on, but the
            application database has no records. Possibly due to calling WstMoveData manually
            or a rogue job starting after a needsrepair.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.ApplicationGetStatusFailure">
            <summary>
            During the move, if a failure occurs getting application data, then set this value.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum.PublicationType">
            <summary>
            Enumeration of publication types
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.PublicationType.Single">
            <summary>
            Single Master
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.PublicationType.Multi">
            <summary>
            Multi Master
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum.ReplCallMethod">
            <summary>
            Enumeration of call methods for replication stored procedures
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.ReplCallMethod.Call">
            <summary>
            call
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.ReplCallMethod.Mcall">
            <summary>
            Mcall
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum.JobStatus">
            <summary>
            Enumeration of job status
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.JobStatus.Running">
            <summary>
            Running
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.JobStatus.Stopped">
            <summary>
            Stopped Nicely
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.JobStatus.Missing">
            <summary>
            Missing
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.JobStatus.Other">
            <summary>
            Other
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum.AuditResultStatus">
            <summary>
            Enumeration of audit result status
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.AuditResultStatus.Success">
            <summary>
            Success
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.AuditResultStatus.Failure">
            <summary>
            Manifest
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum.DBRecoveryMode">
            <summary>
            Enumeration of database recovery modes
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.DBRecoveryMode.SIMPLE">
            <summary>
            Simple
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.DBRecoveryMode.BULK_LOGGED">
            <summary>
            BulkLogged
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.DBRecoveryMode.FULL">
            <summary>
            Full
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum.SetupType">
            <summary>
            Enumeration of setup types
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SetupType.Setup">
            <summary>
            Deploying from scratch
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SetupType.Upgrade">
            <summary>
            For Upgrade. Includes Setup as well as upgrade only scripts.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SetupType.Downgrade">
            <summary>
            For Downgrade. Only downgrade scripts.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.Common.WmoLockServerFailSafeSet.GetSqlFailSafeSets(System.String)">
            <summary>
            Get the list of SqlFailSafeSets on the given server
            This is used by the WmoLockServerFailSafeSet object to
            get lock on all FailSafeSets of a server.
            NOTE: The FailSafeSets should always be returned in a 
            sorted order, so that deadlocks can be avoided.
            </summary>
            <param name="serverName">The name of the server on which
            to get the FailSafeSets</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.Common.WmoLockServerFailSafeSet.GetFileFailSafeSets(System.String)">
            <summary>
            Get the list of FileFailSafeSets on the given server
            This is used by the WmoLockServerFailSafeSet object to
            get lock on all FailSafeSets of a server.
            NOTE: The FailSafeSets should always be returned in a 
            sorted order, so that deadlocks can be avoided.
            </summary>
            <param name="serverName">The name of the server on which
            to get the FailSafeSets</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection">
            <summary>
            Base collection class of named objects
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.m_objects">
            <summary>
            Keep track of objects in collection using an ArrayList.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.IndexOf(System.String)">
            <summary>
            Returns the index of the first object of the given name.
            </summary>
            <returns>
            The 0-based index of the first object with the name.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.Contains(System.String)">
            <summary>
            Tests whether the collection contains an object of the given name.
            </summary>
            <returns>
            true if the collection contains an object identified by the name;
            false if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            required for ICollection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.Add(Microsoft.Webstore.Management.Wmo.WmoNamedObject)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.Clear">
            <summary>
            Removes all items from the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.AddWithoutDuplicateCheck(Microsoft.Webstore.Management.Wmo.WmoNamedObject)">
            <summary>
            Adds an object to the collection without checking beforehand it it exists in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.Remove(System.String)">
            <summary>
            Removes an object from the object collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.GetEnumerator">
            <summary>
            Gets the IEnumerator for this WmoNamedObjectCollection.  This is meant to 
            support the foreach statement.
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.Count">
            <summary>
            count of objects in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.IsSynchronized">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.SyncRoot">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.WmoNamedObjectEnumerator">
            <summary>
            This class implements the IEnumerator over a WmoNamedObjectCollection in support
            of the "foreach" keyword
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.WmoNamedObjectEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.WmoNamedObjectEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.  
            Must be called before accessing the Current element.
            </summary>
            <returns>
            true if enumerator successfully advanced to next element; 
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.WmoNamedObjectEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoNumberedObject">
            <summary>
            Base class for objects which are identified by number
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNumberedObject.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNumberedObject.CompareTo(System.Object)">
            <summary>
            IComparable.CompareTo implementation.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNumberedObject.ID">
            <summary>
            Number of the object
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNumberedObject.IDStr">
            <summary>
            name of the object
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNumberedObject.IsInCollection">
            <summary>
            whether this object is in a collection
            (set by the add/remove methods for collections
            determines whether the name can be set)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNumberedObject.DeploymentUid">
            <summary>
            UID of the deployment to which this object belongs
            set by the collection's Add method
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNumberedObject.IsBeingImportedNew">
            <summary>
            Determines if this object is in config or not.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection">
            <summary>
            Collection class for WmoNumberedObject
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.m_objects">
            <summary>
            Keep track of objects in collection using an ArrayList.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.IndexOf(System.Int32)">
            <summary>
            Returns the index of the first object of the given name.
            </summary>
            <returns>
            The 0-based index of the first object with the name.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.Sort">
            <summary>
            Sorts the array.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.ObjectAtIndex(System.Int32)">
            <summary>
            Returns the object at a given index in the internal array.
            used only by the enumerator.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.Contains(System.Int32)">
            <summary>
            Tests whether the collection contains an object of the given name.
            </summary>
            <returns>
            true if the collection contains an object identified by the name;
            false if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            required for ICollection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.Add(Microsoft.Webstore.Management.Wmo.WmoNumberedObject)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.Remove(System.Int32)">
            <summary>
            Removes an object from the object collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.GetEnumerator">
            <summary>
            Gets the IEnumerator for this WmoDatabaseCollection.  This is meant to
            support the foreach statement.
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.Count">
            <summary>
            count of objects in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.IsSynchronized">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.SyncRoot">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.DeploymentUid">
            <summary>
            the uid of the deployment that this collection belongs to
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.WmoNumberedObjectEnumerator">
            <summary>
            This class implements the IEnumerator over a WmoNamedObjectCollection in support
            of the "foreach" keyword
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.WmoNumberedObjectEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.WmoNumberedObjectEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            Must be called before accessing the Current element.
            </summary>
            <returns>
            true if enumerator successfully advanced to next element;
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.WmoNumberedObjectEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.WmoAgent.WmoSqlCmdHelper">
            <summary>
            Class for WmoSqlCmdHelper.  Used to help execute generic SQL script files or system sprocs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlCmdHelper.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlCmdHelper.Dispose">
            <summary>
            DTCExecute helper
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCommand">
            <summary>
            WmoCommand
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommand.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable.GetObjectData
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommand.StartAudit(System.Guid,System.Guid,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Write audit entry into AdminHistory table at the beginning of operation
            </summary>
            <param name="auditUid">AuditUID</param>
            <param name="parentAuditUid">ParentAuditUID</param>
            <param name="startObjectStatus">StartObjectStatus</param>
            <param name="cmdObjectType">CmdObjectType</param>
            <param name="cmdOperation">CmdOperation</param>
            <param name="objectName">ObjectName</param>
            <param name="additionalArguments">AdditionalArguments</param>
            <param name="reason">Reason</param>
            <param name="sproc">sproc</param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommand.FinishAudit(System.Guid,System.Int32,System.String)">
            <summary>
            Write audit entry into AdminHistory table at the end of operation
            </summary>
            <param name="auditUid">AuditUID</param>
            <param name="resultStatus">ResultStatus</param>
            <param name="errorMessage">ErrorMessage</param>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommand.InXmlPath">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommand.OutXmlPath">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommand.Reason">
            <summary>
            Reason
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommand.CmdObjectType">
            <summary>
            CmdObjectType
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommand.CmdOperation">
            <summary>
            CmdOperation
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommand.ObjectName">
            <summary>
            ObjectName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommand.AdditionalArguments">
            <summary>
            AdditionalArguments
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommand.LogFilePath">
            <summary>
            LogFilePath
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommand.OverWrite">
            <summary>
            Flag to indicate that the object can be overwritten or not. If false, a
            warning will state that the object already exists.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommand.AuditUID">
            <summary>
            Audituid
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommand.IsUTC">
            <summary>
            IsUTC
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommand.FromTime">
            <summary>
            FromTime
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommand.ToTime">
            <summary>
            ToTime
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommand.Count">
            <summary>
            Count
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommand.IsProxyCall">
            <summary>
            IsProxyCall
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommand.EventHandlerProxy">
            <summary>
            WmoStatusEventHandlerProxy
            </summary>
        </member>
        <member name="E:Microsoft.Webstore.Management.Wmo.WmoCommand.WmoStatusEvent">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoStatusEventHandlerProxy">
            <summary>
            WmoStatusEventHandlerProxy
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStatusEventHandlerProxy.FireStatusEvent(System.Object,Microsoft.Webstore.Common.WmoStatusEventArgs)">
            <summary>
            </summary>
        </member>
        <member name="E:Microsoft.Webstore.Management.Wmo.WmoStatusEventHandlerProxy.WmoStatusEvent">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCommandCluster">
            <summary>
            This class is used for Cluster manipulation, Import and Export
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandCluster.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            WmoCommandPartition
            </summary>    
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandCluster.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandCluster.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable.GetObjectData
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandCluster.Import">
            <summary>
            Import New Cluster
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandCluster.Purge">
            <summary>
            Purge Cluster
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandCluster.Export">
            <summary>
            Export Cluster Info
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandCluster.ClusterName">
            <summary>
            ClusterName
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase">
            <summary>
            class for WmoCommandDatabase
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            WmoCommandDatabase
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.#ctor">
            <summary>
            WmoCommandDatabase
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable.GetObjectData
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.AddConfig">
            <summary>
            add secondary configs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.Import">
            <summary>
            Import New Database Info
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.Setup">
            <summary>
            Setup Database 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.Drop">
            <summary>
            Drop Database
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.SetupRepl">
            <summary>
            Setup replication from database
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.DropRepl">
            <summary>
            Drop replication from database
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.Offline">
            <summary>
            Mark Database Offline
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.NeedsRepair">
            <summary>
            Mark Database for Repair
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.Repair">
            <summary>
            Repair Database
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.Online">
            <summary>
            Mark Database Online
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.Standby">
            <summary>
            Mark Database Standby
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.Promote">
            <summary>
            Promote Database
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.Demote">
            <summary>
            Demote Database
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.Updateinfo">
            <summary>
            Update Database Location 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.MarkAndTestRepl">
            <summary>
            Mark and Test Replication
            </summary>
            <remarks> Configurable Properties: PublishingServerName:	The server hosting the publishing database. PublishingDBName:	The publishing database. SubscribingServerName:	The server hosting the subscribing database. If a subscribing database/server is not specified, all outgoing replication streams from the publisher are tested. SubscribingDBName: The subscribing database.</remarks>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.MarkNeedsRepl">
            <summary>
            For MultiMaster a database, will reset the NeedsReplication column between the given dates.
            This forces the row to replicate.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.History">
            <summary>
            Admin History of a database
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.Status">
            <summary>
            Status of a database
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.DeploymentName">
            <summary>
            DeploymentName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.ServerName">
            <summary>
            ServerName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.DatabaseName">
            <summary>
            DatabaseName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.PublishingServerName">
            <summary>
            PublishingServerName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.PublishingDBName">
            <summary>
            PublishingDBName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.SubscribingServerName">
            <summary>
            SubscribingServerName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.SubscribingDBName">
            <summary>
            SubscribingDBName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.DataCenterName">
            <summary>
            DataCenterName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.SqlFailSafeSetID">
            <summary>
            SqlFailSafeSetID
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.IsDropPhysical">
            <summary>
            IsDropPhysical
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.IsNoBackupRestore">
            <summary>
            IsNoBackupRestore
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.IsForceRepair">
            <summary>
            IsForceRepair
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.IsForceNeedsRepair">
            <summary>
            IsForceNeedsRepair
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.IsForceOffline">
            <summary>
            IsForceOffline
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.IsForcePromote">
            <summary>
            IsForcePromote
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.IsForceDropRepl">
            <summary>
            IsForceDropRepl
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.IsJobsOnly">
            <summary>
            IsJobsOnly
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.IsReplicationOnly">
            <summary>
            IsReplicationOnly
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.StartTime">
            <summary>
            StartTime
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.EndTime">
            <summary>
            EndTime
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCommandDatabaseTemplate">
            <summary>
            class for WmoCommandDatabaseTemplate
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabaseTemplate.#ctor">
            <summary>
            WmoCommandDatabase
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabaseTemplate.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            WmoCommandDatabaseTemplate Serializor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabaseTemplate.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable.GetObjectData
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabaseTemplate.Import">
            <summary>
            Import New Database Template Info
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabaseTemplate.Export">
            <summary>
            Export Database Template Info
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabaseTemplate.Purge">
            <summary>
            Purge specified Database Template or any unattached database template.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabaseTemplate.AssignSqlFss">
            <summary>
            Assign DatabaseTemplate(s) to SqlFailSafeSet(s)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabaseTemplate.AssignServer">
            <summary>
            Assign DatabaseTemplate(s) to SqlFailSafeSets or DataServers.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabaseTemplate.CustomBackupScript">
            <summary>
            Set the Custom Backup string for Litespeed
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabaseTemplate.CustomRestoreScript">
            <summary>
            Set the Custom Restore string for Litespeed
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabaseTemplate.DatabaseTemplateName">
            <summary>
            DatabaseTemplateName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabaseTemplate.DeploymentName">
            <summary>
            DeploymentName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabaseTemplate.SqlFailSafeSetId">
            <summary>
            SqlFailSafeSetId
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabaseTemplate.ServerName">
            <summary>
            ServerName, used for assigning a distribution database template to a server.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabaseTemplate.Parameter">
            <summary>
            Parameter is used for the custom Litespeed parameters.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment">
            <summary>
            WmoCommandDeployment
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            WmoCommandDeployment
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable.GetObjectData
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.Import">
            <summary>
            Import Deployment
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.Setup">
            <summary>
            Setup Deployment
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.Export">
            <summary>
            Export Deployment
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.Upgrade">
            <summary>
            Run new manifests scripts from new manifest. Called after UpdateVersion has been called.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.Downgrade">
            <summary>
            Run downgrade scripts in order to restore a system to previous version.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.UpdateVersion">
            <summary>
            Update Deployment's Manifest Version as part of Deployment Upgrade
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.List">
            <summary>
            Lists out all Deployments.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.Status">
            <summary>
            Get Status of this deployment into an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.Drop">
            <summary>
            Drop Deployment
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.Settings">
            <summary>
            Modify/View Deployment Settings
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.History">
            <summary>
            Admin History of a deployment
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.Allocate">
            <summary>
            Auto Allocate
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.AddAccount">
            <summary>
            Add an account to the deployment role. 
            </summary>
            <remarks>Configurable properties: "DeploymentName" - The deployment name needed for setup with the original manifest. "UserName" - The account username (eg. domain\username). “SecurityRole" - The security role to add the account to. "Reason" - The reason for adding the account.</remarks>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.DropAccount">
            <summary>
            Drop Account from ConfigDB Role
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.UpdateTicket">
            <summary>
            Update Deployment Ticket
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.DeploymentName">
            <summary>
            DeploymentName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.SettingName">
            <summary>
            SettingName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.NewValue">
            <summary>
            NewValue
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.NewManifestVersion">
            <summary>
            NewManifestVersion
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.UserName">
            <summary>
            UserName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.SecurityRole">
            <summary>
            SecurityRole
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.IsVerbose">
            <summary>
            IsVerbose
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.IsReplicationOnly">
            <summary>
            IsReplicationOnly
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.IsForce">
            <summary>
            IsForce
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.IsReplTearDown">
            <summary>
            IsReplTearDown
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.SqlFSSNum">
            <summary>
            SqlFSSNum
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.NoAutoAllocate">
            <summary>
            NoAutoAllocate
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.IsRollingUpgrade">
            <summary>
            IsRollingUpgrade - Used during dep upgrade. Indicates that each database in the FSS
            must be marked offline before it is upgraded, then marked back online before the next
            is upgraded.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment">
             <summary>
            
             </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            WmoCommandEnvironment
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment.#ctor">
            <summary>
            WmoCommandEnvironment
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable.GetObjectData
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment.Settings">
            <summary>
            View/Change Environment Settings
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment.Genregfile">
            <summary>
            Generate Client Registry File
            THIS CODE IS ONLY REQUIRED FOR NATIVE SUPPORT. 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment.AddAccount">
            <summary>
            Add Account to ConfigDB Role
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment.DropAccount">
            <summary>
            Drop Account from ConfigDB Role
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment.Status">
            <summary>
            Get Status of this Site into an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment.History">
            <summary>
            Admin History
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment.Version">
            <summary>
            Version information for the Wmo.DLL, the Wst.exe and WstConfig database.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment.SettingName">
            <summary>
            SettingName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment.NewValue">
            <summary>
            NewValue
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment.UserName">
            <summary>
            UserName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment.SecurityRole">
            <summary>
            SecurityRole
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment.RegfilePath">
            <summary>
            RegfilePath
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment.DataCenter">
            <summary>
            DataCenter
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment.IsVerbose">
            <summary>
            IsVerbose
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet">
            <summary>
            Summary description for WmoCommandFailSafeSet.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            WmoCommandFailSafeSet
            </summary>    
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable.GetObjectData
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.Import">
            <summary>
            Imports an XML Delta file that includes and Sql and File Fail
            Safe Set nodes. Then registers them with the WstConfig.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.Setup">
            <summary>
            Calls Deploy on the items registered from Import.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.Purge">
            <summary>
            Purge FailSafeSet
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.Drop">
            <summary>
            Drops a sql fail safe set for a variable partitioned application.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.DefaultPrimary">
            <summary>
            Set Default Primary for a FailSafeSet
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.Offline">
            <summary>
            Marks offline all databases in the fail safe set.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.Online">
            <summary>
            Marks online all databases in the fail safe set.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.Promote">
            <summary>
            Promotes the Default Primary database in the fail safe set.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.Demote">
            <summary>
            Demotes all databases in the fail safe set.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.SetupRepl">
            <summary>
            Setup replication for the entire fail safe set
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.DropRepl">
            <summary>
            Drop replication for sql fail safe set.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.ProvPref">
            <summary>
            Set ProvPref for a FailSafeSet
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.ProvOn">
            <summary>
            Set ProvPref for a FailSafeSet
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.ProvOff">
            <summary>
            Set ProvPref for a FailSafeSet
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.MarkNeedsRepl">
            <summary>
            For MultiMaster, will reset the NeedsReplication column between the given dates.
            This forces the row to replicate. Works on all databases in the fail safe set.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.History">
            <summary>
            Admin History of a failsafeset
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.Updateinfo">
            <summary>
            Update Database or Fileshare Locations
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.ChangeWitness">
            <summary>
            Changes the witness server for this Failsafeset
            for a given mirroring deployment
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.SyncMirroring">
            <summary>
            For a FSS in a Mirroring Deployment, this updates the status and
            ensures the data is accurate
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.DeploymentName">
            <summary>
            DeploymentName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.NewPrimaryName">
            <summary>
            NewPrimaryName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.SQLFSSNum">
            <summary>
            SQLFSSNum
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.FileFSSNum">
            <summary>
            FileFSSNum
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.NewProvPref">
            <summary>
            ProvPref
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.IsForceDropRepl">
            <summary>
            IsForceDropRepl
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.IsForceOffline">
            <summary>
            IsForceOffline
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.IsForcePromote">
            <summary>
            IsForcePromote
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.StartTime">
            <summary>
            StartTime
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.EndTime">
            <summary>
            EndTime
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.NewWitnessServerName">
            <summary>
            The new witness server name for mirroring deployment
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            WmoCommandFileShare
            </summary>    
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.#ctor">
            <summary>
            WmoCommandFileShare
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable.GetObjectData
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.Import">
            <summary>
            Add Fileshare
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.Setup">
            <summary>
            Setup FileShare
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.Drop">
            <summary>
            Drop Fileshare
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.Offline">
            <summary>
            Mark Fileshare Offline
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.NeedsRepair">
            <summary>
            Mark Fileshare for Repair
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.Online">
            <summary>
            Mark Fileshare Online
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.Promote">
            <summary>
            Promote Fileshare
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.Demote">
            <summary>
            Demote Fileshare
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.Repair">
            <summary>
            Repair Fileshare 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.Updateinfo">
            <summary>
            Update Fileshare Location 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.History">
            <summary>
            Admin History of a fileshare
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.DeploymentName">
            <summary>
            DeploymentName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.ServerName">
            <summary>
            ServerName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.FileSharePath">
            <summary>
            FileSharePath
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.IsDelete">
            <summary>
            IsDelete
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.IsForceRepair">
            <summary>
            IsForceRepair
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.FileFSSNum">
            <summary>
            FileFSSNum
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCommandJobs">
            <summary>
            WmoCommandJobs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandJobs.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandJobs.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable.GetObjectData
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandJobs.Import">
            <summary>
            Imports/update Jobs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandJobs.Export">
            <summary>
            Export view of Jobs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandJobs.Drop">
            <summary>
            Drop job/JobSchedule
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandJobs.Disable">
            <summary>
            Disable the job
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandJobs.Enable">
            <summary>
            Enable the job
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandJobs.JobName">
            <summary>
            The name of the jobs
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandJobs.ScheduleNumber">
            <summary>
            Job schedule number
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCommandManifest">
             <summary>
            
             </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandManifest.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            WmoCommandManifest
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandManifest.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandManifest.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable.GetObjectData
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandManifest.Import">
            <summary>
            Import a Manifest Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandManifest.Export">
            <summary>
            Exports the Manifest. Uses DoExportSource and DoExportGeneratedObjects
            to determine if these files should be created as part of the export.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandManifest.List">
            <summary>
            Lists out all Manifests and the deployments that use them.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandManifest.Diff">
            <summary>
            Report the differences between two manifest versions.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandManifest.Purge">
            <summary>
            Purge manifest
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandManifest.History">
            <summary>
            Admin History of a manifest
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandManifest.ManifestName">
            <summary>
            ManifestName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandManifest.ManifestVersion">
            <summary>
            ManifestVersion
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandManifest.ManifestVersionForDiff">
            <summary>
            ManifestVersionForDiff
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandManifest.DoExportSource">
            <summary>
            Flag to indicate whether to export the source or not.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandManifest.DoExportGeneratedObjects">
            <summary>
            Flag to indicate whether to export the generate objects source or not.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandManifest.ExportManifestVersion">
            <summary>
            The user has the option of choosing what version of the Manifest
            to export. If not specified, the most recent Manifest is used.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCommandMonitoring">
             <summary>
            
             </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandMonitoring.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            WmoCommandMonitoring
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandMonitoring.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandMonitoring.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable.GetObjectData
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandMonitoring.Import">
            <summary>
            Import a Monitoring Configuration Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandMonitoring.Export">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandMonitoring.DeleteObject">
            <summary>
            delete perfcounter
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandMonitoring.DeleteMapping">
            <summary>
            delete perfcounter
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandMonitoring.History">
            <summary>
            Admin History of a monitoring configuration
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandMonitoring.MonitoringObjectName">
            <summary>
            Monitoring Object Name
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandMonitoring.MonitoringObjectType">
            <summary>
            Monitoring Object Type
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandMonitoring.ServerRole">
            <summary>
            Monitoring ServerRole
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandMonitoring.MonitoredDatumName">
            <summary>
            Monitoring MonitoredDatumName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandMonitoring.AlertRuleName">
            <summary>
            Monitoring AlertRuleName
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCommandPartition">
             <summary>
            
             </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            WmoCommandPartition
            </summary>    
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable.GetObjectData
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.Import">
            <summary>
            Imports an XML Delta file that includes new datapartition mapping. 
            Then registers them with the WstConfig.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.Map">
            <summary>
            Maps a DataPartition to a Sql and/or File Fail Safe Set.
            Each map happens one at a time.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.Cleanup">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.ReadOnly">
            <summary>
            Mark DataPartition ReadOnly
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.ReadWrite">
            <summary>
            Mark DataPartition ReadWrite
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.Status">
            <summary>
            View Data Partition Status
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.MoveData">
            <summary>
            Move Data 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.History">
            <summary>
            Admin History of a data partition
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.DeploymentName">
            <summary>
            DeploymentName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.DataPartition">
            <summary>
            DataPartition
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.NewSqlFSSNum">
            <summary>
            NewSqlFSSNum
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.OldSqlFSSNum">
            <summary>
            OldSqlFSSNum
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.NewFileFSSNum">
            <summary>
            NewFileFSSNum
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.OldFileFSSNum">
            <summary>
            OldFileFSSNum
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.IsForce">
            <summary>
            IsForce
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.Verbose">
            <summary>
            Verbose
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.BatchSize">
            <summary>
            BatchSize
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.CleanupInterval">
            <summary>
            CleanupInterval
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.IsForceMoveData">
            <summary>
            When true, the WstConfig database is updated to show that the move data is complete,
            without actually moving data.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.IsForceCleanData">
            <summary>
            When true, the WstConfig database is updated to show that the clean data is complete,
            without actually cleaning data.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.BulkCopyTimeout">
            <summary>
            Time out value used during bulk copy processing. Default is 8 hours (28800)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.NumThreads">
            <summary>
            NumThreads
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.Interval">
            <summary>
            Interval
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.UseNew">
            <summary>
            UseNew - A flag to indicate using old MoveData code or new MoveData code.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCommandServer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            WmoCommandPartition
            </summary>    
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable.GetObjectData
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.Offline">
            <summary>
            Mark Server Offline
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.Online">
            <summary>
            Mark Server Online
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.NeedsRepair">
            <summary>
            Mark Server for Repair
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.Repair">
            <summary>
            Repair Server 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.Promote">
            <summary>
            Promote Server
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.Demote">
            <summary>
            Demote Server
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.List">
            <summary>
            List all servers into an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.Status">
            <summary>
            Get Status of servers into an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.Import">
            <summary>
            Import New Server 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.Purge">
            <summary>
            Purge Server
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.History">
            <summary>
            Admin History of a server
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.ProvOn">
            <summary>
            Set Server ProvOn
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.ProvOff">
            <summary>
            Set Server ProvOff
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.Reboot">
            <summary>
            Reboot the server
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.CleanRebootStatus">
            <summary>
            Reboot the server
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.Export">
            <summary>
            Export Servers
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandServer.ServerName">
            <summary>
            ServerName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandServer.IsNoPromote">
            <summary>
            IsNoPromote
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandServer.IsForceOffline">
            <summary>
            IsForceOffline
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandServer.IsForceNeedsRepair">
            <summary>
            Used to force the application database into a needsrepair state without attempting to
            promote (in the case of a Primary NeedsRepair call), drop jobs or drop replication.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandServer.IsJobsOnly">
            <summary>
            IsJobsOnly
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandServer.IsReplicationOnly">
            <summary>
            IsReplicationOnly
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandServer.IsVerbose">
            <summary>
            IsVerbose
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandServer.Topology">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandServer.IsRebootOnly">
            <summary>
            Whether the server reboot command Reboot only. 
            If true then there will be no pre/post QC checks done.
            Only FSS locks will be taken.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandServer.RebootTimeout">
            <summary>
            The timeout value for reboot command.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCommandServerRole">
            <summary>
            The command class to import/export server roles
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServerRole.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServerRole.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable.GetObjectData
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServerRole.Import">
            <summary>
            Imports/update centralized settings 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServerRole.Export">
            <summary>
            Export view of the server roles
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServerRole.Purge">
            <summary>
            purge a server role
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandServerRole.Role">
            <summary>
            ServerName
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCommandSettings">
            <summary>
            The command class to import/export centralized settings
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandSettings.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandSettings.Import">
            <summary>
            Imports/update centralized settings 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandSettings.Export">
            <summary>
            Export view of the centralized settings
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandSettings.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable.GetObjectData
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoXml.XmlFileName">
            <summary>
            Once the Xml file has been loaded and validated, make the file
            name available to subsequent classes that use this abstract class.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoXml.XmlDirectory">
            <summary>
            XmlDirectory
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoXml.RawXml">
            <summary>
            Once the Xml file has been loaded and validated, make the raw
            Xml available to subsequent classes that use this utility class.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoXml.XmlDoc">
            <summary>
            Once the Xml file has been loaded and validated, make the
            XmlDocument available to subsequent classes.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoXmlBuilder">
            <summary>
            Summary description for Class1.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoXmlBuilder.#ctor(System.String)">
            <summary>
            Constructor for XML that requires an XSD
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoXmlBuilder.#ctor(System.String,System.String)">
            <summary>
            Constructor 
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCluster">
            <summary>
            Class for Cluster instances
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCluster.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCluster.InitializeServers">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCluster.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCluster.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Update this object with data from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCluster.PostInitialize">
            <summary>
            Do any post initialization steps, if necessary
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCluster.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCluster.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCluster.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCluster.IsEmpty">
            <summary>
            whether the cluster is empty for delete
            (ie. no svr left)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCluster.Purge">
            <summary>
            Purge an individual cluster
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCluster.Name">
            <summary>
            Name of the cluster.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCluster.Uid">
            <summary>
            Uid of the Cluster
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCluster.Path">
            <summary>
            The path of the cluster
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCluster.MonitoringServerUid">
            <summary>
            MonitoringServerUid of the Cluster
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCluster.MonitoringDataPartitionNum">
            <summary>
            MonitoringDataPartitionNum of the Cluster
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCluster.JobStatusDataPartitionNum">
            <summary>
            JobStatusDataPartitionNum of the Cluster
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCluster.Servers">
            <summary>
            Servers on this cluster
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCluster.IsCommon">
            <summary>
            The cluster used for cross cluster communications.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoClusterCollection">
            <summary>
            Collection class for WmoDataServer
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoClusterCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoClusterCollection.IndexOf(System.Guid)">
            <summary>
            Returns the index of the first object of the given Uid.
            </summary>
            <returns>
            The 0-based index of the first object with the Uid.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoClusterCollection.Add(Microsoft.Webstore.Management.Wmo.WmoCluster)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoClusterCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Loads the in-memory data from Xml, deep initialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoClusterCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Boolean)">
            <summary>
            this method uses a flag to indicate new or old Xml format.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoClusterCollection.PostInitialize">
            <summary>
            Does a call to update the Clusters, now that the DataServers have been loaded
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoClusterCollection.Initialize">
            <summary>
            Loads the in-memory data from the config dbs
            initializes dataserver, ipaddressswitches
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoClusterCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoClusterCollection.Register">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoClusterCollection.Purge">
            <summary>
            Purge any cluster not assigned to a DataServer.
            Do not purge defaults.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoClusterCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoClusterCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoClusterCollection.Item(System.Guid)">
            <summary>
            Uid indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDatabase">
            <summary>
            Base class for databases
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.GetHashCode">
            <summary>
            Overridden method
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.Equals(System.Object)">
            <summary>
            Overridden method
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.Initialize(System.String,System.String,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus,System.Guid)">
            <summary>
            Initialize from passing in parameters
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Initialize from xml dbs to in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Register this database. Note internal consistency must be validated
            before getting to this step. This step is inside a DTC.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.Register">
            <summary>
            Register this database
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.Initialize(Microsoft.Webstore.WstClient.WstDataReader,System.Guid,System.Guid)">
            <summary>
            Initialize from the config dbs to in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.ExportForRegister(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Used for bulk insert during register.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.Deploy">
            <summary>
            Installs the databases etc in the 'real' world.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.Deploy(Microsoft.Webstore.Management.Wmo.WmoEnum.SetupType,Microsoft.Webstore.Management.Wmo.WmoManifest,System.Boolean)">
            <summary>
            Upgrades a Deployment in the "Real world".
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.UnRegister">
            <summary>
            Removes the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.UnRegister(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            UnRegister this database
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.UnDeploy">
            <summary>
            Removes the databases etc from the 'real' world
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.Backup(Microsoft.Webstore.Management.Wmo.WmoEnum.DBRecoveryMode,System.Boolean)">
            <summary>
            Backup this database. Will use LiteSpeed if ListeSpeed is determined to be installed on both systems.
            FileGroups will be validated.
            </summary>
            <param name="recoveryMode"></param>
            <param name="doLogBackup"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.Restore(Microsoft.Webstore.Management.Wmo.WmoDatabase,System.Boolean,Microsoft.Webstore.Management.Wmo.WmoEnum.DBRecoveryMode,System.Boolean)">
            <summary>
            Restores over this database. LiteSpeed will be used if it is installed on bith systems.
            Supports mirroring with the withRecovery and recoveryMode parameters.
            </summary>
            <param name="sourceDatabase"></param>
            <param name="withRecovery"></param>
            <param name="recoveryMode"></param>
            <param name="doLogRestore"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.AggressiveDropDB">
            <summary>
            drops this database
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.Drop">
            <summary>
            drops this database
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.SetupPublication(System.String,System.String,System.String,System.Data.DataTable,System.Boolean,System.Boolean)">
            <summary>
            sets up the described publication
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.DropPublication(System.String)">
            <summary>
            drops up the described publication
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.SetupSubscription(System.String,System.String,System.String,System.Boolean)">
            <summary>
            sets up the described subscription
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.DropSubscription(System.String,System.String,System.String)">
            <summary>
            drops up the described subscription
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.DropAllSubscription(System.String)">
            <summary>
            drops up the described subscription
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.DeployJobs">
            <summary>
            Used to deploy (setup) jobs on the database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.EnableJobs">
            <summary>
            Enable and start jobs on the database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.DisableJobs">
            <summary>
            Disable and stop jobs on the databasse.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.DisableJobs(Microsoft.Webstore.Management.Wmo.WmoJobInstanceCollection)">
            <summary>
            Disable and stop jobs in the collection passed in
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.SetupSuitableJobs">
            <summary>
            Installs or drops jobs that are supposed to be on this database.
            In other words, if the IsPrimary flag is set for this database,
            then drop all Secondary Only jobs and install all Primary Only
            jobs, Leave jobs that are on both the Primary and Secondary alone.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.DropJobs(System.Boolean)">
            <summary>
            Drops jobs that are supposed to be on this database.
            See summary for SetupSuitableJobs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.GetStatus(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Boolean,System.Int32@)">
            <summary>
            GetStatus method for the object.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.IsLiteSpeedInstalled">
            <summary>
            Check to see if the third party software Litespeed is installed.
            Typically, this method will be called twice. One for the backup
            server and once for the restore server.
            </summary>
            <returns>bool</returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.Uid">
            <summary>
            Uid of this database
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.SqlServerName">
            <summary>
            Name of the server hosting this database
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.DatabaseName">
            <summary>
            name of the object
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.DeploymentUid">
            <summary>
            Guid of the deployment that this db belongs to
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.ManifestUid">
            <summary>
            Guid of the manifest that this db belongs to
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.SqlFailSafeSetID">
            <summary>
            Sql Fail Safe Set that this db belongs to
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.Jobs">
            <summary>
            Jobs registered on this database (not replication/mirroring jobs)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.Ticket">
            <summary>
            Ticket
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.Status">
            <summary>
            Status: IsDeployed, IsOffline, IsNeedsRepair
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.DefaultStatus">
            <summary>
            DefaultStatus: Online/Standby
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.IsPrimary">
            <summary>
            Whether this database is offline (admin access only)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.IsDefaultPrimary">
            <summary>
            Whether this database needs repairing (unreachable)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.IsInCollection">
            <summary>
            whether this object is in a collection
            (set by the add/remove methods for collections
            determines whether the name can be set)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.IsDeployed">
            <summary>
            Whether the database has been deployed
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.Latency">
            <summary>
            The replication latency in seconds.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.LatencyBucket">
            <summary>
            The replication latency bucket.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.ReplicationLatencies">
            <summary>
            All publications inserting into this database have a latency and a latencybucket.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection">
            <summary>
            Collection class for databases
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.m_objects">
            <summary>
            Keep track of objects in collection using an ArrayList.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.IndexOf(System.String,System.String)">
            <summary>
            Returns the index of the first object of the given name.
            </summary>
            <returns>
            The 0-based index of the first object with the name.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.IndexOf(System.Guid)">
            <summary>
            Returns the index of the first object of the given uid.
            </summary>
            <returns>
            The 0-based index of the first object with the uid.
            -1 if the collection doesn't contain an object with this uid.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.Contains(System.String,System.String)">
            <summary>
            Tests whether the collection contains an object of the given name.
            </summary>
            <returns>
            true if the collection contains an object identified by the name;
            false if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.Contains(System.Guid)">
            <summary>
            Tests whether the collection contains an object of the given Uid.
            </summary>
            <returns>
            true if the collection contains an object identified by the Uid.
            false if the collection doesn't contain an object with this Uid.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            required for ICollection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.Add(Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.Remove(System.String,System.String)">
            <summary>
            Removes an object from the object collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.ExportForRegister(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Used by the Register FailSafeSet collection for bulk inserts.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.GetEnumerator">
            <summary>
            Gets the IEnumerator for this WmoDatabaseCollection.  This is meant to
            support the foreach statement.
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.Validate">
            <summary>
            Validates the databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.GetStatus(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Boolean,System.Int32@)">
            <summary>
            GetStatus method for the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.Clean">
            <summary>
            remove all elements
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.Count">
            <summary>
            count of objects in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.Item(System.String,System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.Item(System.Guid)">
            <summary>
            Uid indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.IsSynchronized">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.SyncRoot">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.DeploymentUid">
            <summary>
            the uid of the deployment that this collection belongs to
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.SqlFailSafeSetID">
            <summary>
            Sql FailSafe Set that this db belongs to
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.SqlServerName">
            <summary>
            Server that this db belongs to
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.WmoDatabaseEnumerator">
            <summary>
            This class implements the IEnumerator over a WmoNamedObjectCollection in support
            of the "foreach" keyword
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.WmoDatabaseEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.WmoDatabaseEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            Must be called before accessing the Current element.
            </summary>
            <returns>
            true if enumerator successfully advanced to next element;
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.WmoDatabaseEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate">
            <summary>
            This class is used for defining the file groups, logical files, and
            backup stripes related to the creation, backing up and restoring of
            sQl databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.#ctor(System.Guid)">
            <summary>
            Default constructor defines the Uid of the object.
            The name of the object must still be defined before it can be registered.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Initialize from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            This method is usually called from the WmoDatabaseTemplateCollection Initialize method,
            but can also be called from a call to WspGetDatabaseTemplate.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Register the template. This method is called with Dtc already started at the collection level.
            All validation should be completed before you get to this step.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.RegisterLitespeedCustom">
            <summary>
            Register the template. This method is called with Dtc already started at the collection level.
            All validation should be completed before you get to this step.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.Purge">
            <summary>
            Purge the individual templates
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.CreateDatabaseRestoreCmd(System.String,System.String,System.String,System.Boolean,System.Boolean,Microsoft.Webstore.Management.Wmo.WmoEnum.DBRecoveryMode,System.Boolean)">
            <summary>
            This command creates a string that will be used to restore a database. NOTE: if the
            withRecovery flag is set to false for the full restore, it must be set to false for
            the log restore. Otherwise the resultant log file can not be restored.
            </summary>
            <param name="sourceServerName"></param>
            <param name="sourceDatabaseName"></param>
            <param name="destinationDatabaseName"></param>
            <param name="isLiteSpeedInstalled"></param>
            <param name="withRecovery"></param>
            <param name="recoveryMode"></param>
            <param name="isLogRestore"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.GetAllLogicalFilesInThisDatabaseTemplate">
            <summary>
            Gets all LogicalFiles for the DatabaseTemplate. The class structure doesn't
            work well for this because the LogicalFiles are split into FileGroups.
            Specifically for Backup/Restore the FileGroup component is not used.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.DatabaseTemplateUid">
            <summary>
            Uid of this DatabaseTemplate
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.DatabaseTemplateName">
            <summary>
            Name of this DatabaseTemplate
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.Description">
            <summary>
            Description of this DatabaseTemplate
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.FileGroups">
            <summary>
            The FileGroups that belong to this DatabaseTemplate.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.LogFile">
            <summary>
            The LogFile that belongs to this DatabaseTemplate.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.Stripes">
            <summary>
            The Stripe collection that belong to this DatabaseTemplate.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.IsInCollection">
            <summary>
            Whether this object is in a collection (set by the add/remove
            methods for collections determines whether the name can be set)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.IsOld">
            <summary>
            Used when the Sql Initialize fetches the DatabaseTemplate.
            It is for objects that already exist in the WstConfig, and therefore
            do not need to be registered.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.IsDistributionOnly">
            <summary>
            Flag to determine what kind of database template this is
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.LitespeedCustomBackup">
            <summary>
            Custom Litespeed backup script. Appended to Backup command string.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.LitespeedCustomRestore">
            <summary>
            Custom Litespeed Restore script. Appended to Restore command string.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection">
            <summary>
            Collection class for databases
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.m_objects">
            <summary>
            Keep track of objects in collection using an ArrayList.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.IndexOf(System.String)">
            <summary>
            Returns the index of the first object of the given name.
            </summary>
            <returns>
            The 0-based index of the first object with the name.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.IndexOf(System.Guid)">
            <summary>
            Returns the index of the first object of the given uid.
            </summary>
            <returns>
            The 0-based index of the first object with the uid.
            -1 if the collection doesn't contain an object with this uid.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.Contains(System.String)">
            <summary>
            Tests whether the collection contains an object of the given name.
            </summary>
            <returns>
            true if the collection contains an object identified by the name;
            false if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.Contains(System.Guid)">
            <summary>
            Tests whether the collection contains an object of the given Uid.
            </summary>
            <returns>
            true if the collection contains an object identified by the Uid.
            false if the collection doesn't contain an object with this Uid.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            required for ICollection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.Add(Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.Remove(System.String)">
            <summary>
            Removes an object from the object collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder)">
            <summary>
            Uses the properties of each item and sub item to create an XML object.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.Register">
            <summary>
            Register all DatabaseTemplates in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.GetEnumerator">
            <summary>
            Gets the IEnumerator for this WmoDatabaseTemplateCollection.  This is meant to
            support the foreach statement.
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml)">
            <summary>
            Passed in a WmoXml object, find all elements relating to DatabaseTemplates.
            With each element and sub-element, create the objects that make up the
            DatabaseTemplates.
            </summary>
            <param name="objXml"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.Initialize">
            <summary>
            Execute WspGetAllDatabaseTemplate. This will return four results sets.
            They are:
                all DatabaseTemplates
                all FileGroups in all DatabaseTemplates
                all LogicalFiles in all FileGroups in all DatabaseTemplates
                all Stripes in all DatabaseTemplates
            Takes these results and create the objects and sub-objects that make up
            a DatabaseTemplate.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.Validate">
            <summary>
            Validates the databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.Purge">
            <summary>
            Purge any template not assigned to a DataServer or SqlFailSafeSet.
            Do not purge default templates.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.Clean">
            <summary>
            remove all elements
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.Count">
            <summary>
            count of objects in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.Item(System.Guid)">
            <summary>
            Uid indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.IsSynchronized">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.SyncRoot">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.WmoDatabaseTemplateEnumerator">
            <summary>
            This class implements the IEnumerator over a WmoNamedObjectCollection in support
            of the "foreach" keyword
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.WmoDatabaseTemplateEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.WmoDatabaseTemplateEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            Must be called before accessing the Current element.
            </summary>
            <returns>
            true if enumerator successfully advanced to next element;
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.WmoDatabaseTemplateEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection">
            <summary>
            Collection class for WmoDataPartition
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.#ctor(System.Int32)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.IndexOf(System.Int32)">
            <summary>
            Returns the index of the first object of the given ID.
            </summary>
            <returns>
            The 0-based index of the first object with the ID.
            -1 if the collection doesn't contain an object with this ID.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.Contains(System.Int32)">
            <summary>
            Tests whether the collection contains an object of the given ID.
            </summary>
            <returns>
            true if the collection contains an object identified by the ID;
            false if the collection doesn't contain an object with this ID.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.Initialize">
            <summary>
            Initialize from the config db to in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Initialize from Xml
            </summary>
            <param name="objXml"></param>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.Initialize(System.Int32)">
            <summary>
            Initialize to a certain size
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement,System.Boolean)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            register all data partitions
            need another function to update individual ones
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.RegisterPartition(Microsoft.Webstore.Management.Wmo.WMOSprocs,System.Int16,System.Int16,System.Int16)">
            <summary>
            Register one data partition for re-map after Add Partition.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            required for ICollection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.GetEnumerator">
            <summary>
            Gets the IEnumerator for this WmoNamedObjectCollection.  This is meant to 
            support the foreach statement.
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.GetDPStatus(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Boolean,System.Int32,System.Int32@)">
            <summary>
            GetStatus method for the DataServer object. Called individually
            or by the DataServerCollection. Tell child objects to report their status.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.Validate(System.Boolean)">
            <summary>
            Validates the internal memory configuration.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.DeploymentUid">
            <summary>
            the uid of the deployment that this collection belongs to
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.Deployment">
            <summary>
            The deployment that this collection belongs to
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.DataPartitions">
            <summary>
            The array of DataPartitions.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.Ticket">
            <summary>
            ticket
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.Count">
            <summary>
            count of partitions in collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.IsSynchronized">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.SyncRoot">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.BeginNumber">
            <summary>
            When numbering the sql fail safe sets, this is the beginning number to start with
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.WmoDataPartitionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.WmoDataPartitionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.  
            Must be called before accessing the Current element.
            </summary>
            <returns>
            true if enumerator successfully advanced to next element; 
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.WmoDataPartitionEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataPartition.#ctor(System.Int16,System.Int16,System.Int16)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataPartition.ID">
            <summary>
            name of the object
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataPartition.SqlFailSafeSetID">
            <summary>
            Sql Fail Safe Set that this data partition is mapped to
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataPartition.FileFailSafeSetID">
            <summary>
            File Fail Safe Set that this data partition is mapped to
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataPartition.Ticket">
            <summary>
            ticket
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataPartition.Status">
            <summary>
            Status of the Partition
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataPartition.StatusStr">
            <summary>
            String converstion for Status of the Partition
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDataServer">
            <summary>
            Class for DataServer instances
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.InitializeDatabases">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.InitializeFileShares">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.ReInitialize">
            <summary>
            ReInitialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.InsertIPAddrSwitch(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            insert a IPAddress Switch pair into the array of struct
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Update this object with data from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.Initialize(System.String)">
            <summary>
            Initialize to defaults
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.InitializeForAssign(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Processes Xml to set the DatabaseTemplate. The rules are: If the element
            is not specified, use the preset. If the preset is not specified, use the
            default. In all cases verify the templates exist.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement,System.Boolean)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.UnRegister">
            <summary>
            Removes the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.UnRegisterIPs">
            <summary>
            Removes the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.DeployValidate">
            <summary>
            Validates IP addresses
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.GetStatus(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Boolean,System.Int32@)">
            <summary>
            GetStatus method for the DataServer object. Called individually
            or by the DataServerCollection. Tell child objects to report their status.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.IsEmpty">
            <summary>
            Whether the data server is in use for any other purpose.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.Assign">
            <summary>
            Assign DatabaseTemplate to the server.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.Assign(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Assign the database template to the server.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.Demote(System.Boolean,System.Guid,System.String,Microsoft.Webstore.Management.Wmo.Common.WmoLockServerFailSafeSet)">
            <summary>
            demote all databases and fileshares on server, and promote replicas
            currently not using IsNeedsRepair value
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.PrepareForDemoteDatabases(System.Boolean)">
            <summary>
            This method is helper to find the best secondaries to promote (if applicable).
            We will try to find the best online secondary to promote for the default
            primaries that are being demoted, such that we balance the new primaries accross the
            available data servers as best as possible.
            </summary>
            <param name="isNoPromote">true if not allowed to auto-promote</param>
            <returns>array of SvrDbDemoteHelper with secondary to be promoted</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.DemoteDatabases(System.Boolean,System.Guid,System.String,Microsoft.Webstore.Management.Wmo.Common.WmoLockServerFailSafeSet)">
            <summary>
            Called by Multithread
            demote all databases on server, and promote replicas
            The fssLocks is used by the svr reboot command. 
            This instance is used to pass the lock object to each
            newly spawned thread so that it can inherit the already 
            taken lock
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.DemoteDatabases(System.Boolean,System.Guid,System.String)">
            <summary>
            Called by Multithread
            demote all databases on server, and promote replicas
            currently not using IsNeedsRepair value
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.DemoteDatabase(System.Object)">
            <summary>
            Called by MultiThread
            demote a database and promote its replica
            currently not using IsNeedsRepair value
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.DemoteDatabase(Microsoft.Webstore.Management.Wmo.WmoDatabase,System.Boolean,System.Collections.ArrayList,System.Guid,Microsoft.Webstore.Management.Wmo.WmoAdminLock)">
            <summary>
            Called by Single Thread
            demote a database and promote its replica
            currently not using IsNeedsRepair value
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.DemoteFileShares(System.Boolean,System.Guid,System.String)">
            <summary>
            Called by Single Thread
            demote all fileshares on server, and promote replicas
            currently not using IsNeedsRepair value
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.Offline(System.Boolean,System.Guid,System.Boolean,System.String,Microsoft.Webstore.Management.Wmo.Common.WmoLockServerFailSafeSet)">
            <summary>
            Mark server offline
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.OfflineDatabases(System.Boolean,System.Guid,System.Boolean,System.String,Microsoft.Webstore.Management.Wmo.Common.WmoLockServerFailSafeSet)">
            <summary>
            Called by MultiThread
            Mark all databases on server offline
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.OfflineFileShares(System.Boolean,System.Guid,System.String)">
            <summary>
            Called by Single Thread
            Mark all fileshares on server offline
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.Promote(System.Guid,System.String,Microsoft.Webstore.Management.Wmo.Common.WmoLockServerFailSafeSet)">
            <summary>
            promote all databases on server, and demote replicas
            currently not checking isneedsrepair value
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.PromoteDatabases(System.Guid,System.String,Microsoft.Webstore.Management.Wmo.Common.WmoLockServerFailSafeSet)">
            <summary>
            Called by Multi Thread
            promote all databases on server, and demote replicas
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.PromoteDatabase(Microsoft.Webstore.Management.Wmo.WmoDatabase,System.Guid,Microsoft.Webstore.Management.Wmo.WmoAdminLock)">
            <summary>
            Called By Single Thread
            promote a database and demote its replica
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.PromoteDatabase(System.Object)">
            <summary>
            Called by Multi Thread
            promote a database and demote its replica
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.PromoteFileShares(System.Guid,System.String)">
            <summary>
            Called by Single Thread
            promote all fileshares on server, and demote replicas
            currently not checking isneedsrepair value
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.Online(System.Guid,System.String,Microsoft.Webstore.Management.Wmo.Common.WmoLockServerFailSafeSet)">
            <summary>
            Mark server online
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.OnlineDatabases(System.Guid,System.String,Microsoft.Webstore.Management.Wmo.Common.WmoLockServerFailSafeSet)">
            <summary>
            Called by Multi Thread
            Mark all databases on server online
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.OnlineFileShares(System.Guid,System.String)">
            <summary>
            Called by Single Thread
            Mark all fileshares on server online
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.Repair(System.Guid,System.String)">
            <summary>
            Repair server -- repair all databases on server
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.RepairDatabases(System.Guid,System.String)">
            <summary>
            repair all databases on server
            called by multi-thread
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.RepairFileShares(System.Guid,System.String)">
            <summary>
            repair all fileshares on server
            called by single
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataServer.Name">
            <summary>
            Name of the data server.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataServer.Uid">
            <summary>
            Uid of the Data Server
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataServer.DataCenterName">
            <summary>
            The name of the data center
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataServer.IPAddressSwitches">
            <summary>
            array of ipaddress and switches
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataServer.DeploymentUids">
            <summary>
            array of deploymentuids
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataServer.Description">
            <summary>
            The name of the data center
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataServer.DistributionServer">
            <summary>
            The server hosting the distrib db used by this server
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataServer.HostedDistribDB">
            <summary>
            The distribution database hosted on this server
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataServer.Databases">
            <summary>
            Databases on this server
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataServer.FileShares">
            <summary>
            FileShares on this server
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataServer.ClusterName">
            <summary>
            Name of the cluster hosting this server
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataServer.DistributionDatabaseTemplateUid">
            <summary>
            This is used for constructing a Distribution Database on this server.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataServer.DistributionDatabaseTemplateName">
            <summary>
            This is only used by export.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDataServer.SvrDbDemoteHelper">
             <summary>
             This is a private helper class used by WmoDataServer.Demote() to help find the
             best secondaries to promote (if applicable) by balancing load as best as possible
             accross the available data servers.
            
             An ArrayList of these objects are sorted by how many secondaries are available
             (least to greatest).  This way, the FSS with fewest secondaries to choose from get
             to pick the secondary/dataserver to promote first.
             </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.SvrDbDemoteHelper.FindBestSecondary(System.Collections.Hashtable)">
            <summary>
            Try to find best secondary to promote by looking at how many primaries are already on
            each server.
            </summary>
            <param name="primariesOnServer">This is a cache of number of primary dbs on server including
            the ones we intend to promote</param>
            <returns>Secondary to promote</returns>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoIPAddressSwitch">
            <summary>
            struct of IPAddress and Switch
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoIPAddressSwitch.NetworkSwitch">
            <summary>
            name of the network switch
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoIPAddressSwitch.IPAddress">
            <summary>
            IP Address
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoIPAddressSwitch.IsPreferred">
            <summary>
            IsPreferred
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoMirroringEndPoint">
            <summary>
            struct for Mirroring_EndPoint
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMirroringEndPoint.CompleteDomainName">
            <summary>
            The domain name for this endpoint
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMirroringEndPoint.PortNumber">
            <summary>
            The port number for this endpoint
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMirroringEndPoint.EndPointName">
            <summary>
            The name of the endpoint
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection">
            <summary>
            Collection class for WmoDataServer
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.IndexOf(System.Guid)">
            <summary>
            Returns the index of the first object of the given Uid.
            </summary>
            <returns>
            The 0-based index of the first object with the Uid.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.Contains(System.Guid)">
            <summary>
            Tests whether the collection contains an object of the given UID.
            </summary>
            <returns>
            true if the collection contains an object identified by the UID;
            false if the collection doesn't contain an object with this UID.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.Add(Microsoft.Webstore.Management.Wmo.WmoDataServer)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Boolean)">
            <summary>
            Imports an Xml document, passing on sections to child members.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.Initialize">
            <summary>
            Loads the in-memory data from the config dbs
            initializes dataserver, ipaddressswitches
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement,System.Guid,System.Boolean)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.Register">
            <summary>
            Validates then registers each Server in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.RegisterAfterValidate">
            <summary>
            Registers each Server in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.ValidateSqlFSSAgainstCrossClusterServers">
            <summary>
            Validate Sql Fail Safe sets against cross cluster servers.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.ValidateFileFSSAgainstCrossClusterServers">
            <summary>
            Validate File Fail Safe sets against cross cluster servers.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.Validate">
            <summary>
            Validate each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.GetStatus(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Boolean,System.Int32@)">
            <summary>
            GetStatus method for the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.List(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder)">
            <summary>
            List all data servers in the configuration.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.Assign">
            <summary>
            Assign DatabaseTemplate to the server.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.Item(System.Guid)">
            <summary>
            Uid indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.PresetDistributionDatabaseTemplateUid">
            <summary>
            For defining database templates for a series of servers.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDeployment">
            <summary>
            Class for deployments
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.InitializeInUseObjects(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Initialize the arrays of objects that use this deployment.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.InitializeClientSettings(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Loads the in-memory data from the Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.Import(Microsoft.Webstore.Management.Wmo.WmoXml,System.Boolean)">
            <summary>
            Imports an XML file for the deployment, splitting up the various tasks to each sub class.
            The doValidate parameter is used by the WebstoreWetupWizard
            </summary>
            <param name="objXml"></param>
            <param name="doValidate"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.ExportXmlFragmentForAllocate(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder)">
            <summary>
            Reads from the in-memory data to create an partial XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.ExportDeployment(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.RegisterDeployment(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.RegisterUpdateDeployment">
            <summary>
            Writes the in-memory data to the config dbs. Used for update deployment settings
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.RegisterClientSettings(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.RegisterUpdateClientSettings">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.Register">
            <summary>
            Writes the in-memory data to the config dbs
            this deployment and all collections under it
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.Deploy">
            <summary>
            Installs the databases etc in the 'real' world.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.DeployAudit(System.Guid)">
            <summary>
            Installs the databases etc in the 'real' world.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.Drop">
            <summary>
            drop deployment from wstconfig
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.Validate">
            <summary>
            Validates internal data as well as server readyness.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.ValidateDeployment(System.Boolean)">
            <summary>
            Validates whether the in-memory data matches the "real" world
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.ValidateDatabasesAndFileShares">
            <summary>
            ValidateDatabasesAndFileShares before deploying
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.ValidateDatabasesAndFileSharesForSqlUpgrade(System.Int32)">
            <summary>
            ValidateDatabasesAndFileShares before deploying
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.AddReplicaSetup(System.String)">
            <summary>
            Add Replica Setup. Run through FSSes and deploy them.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.AddFailSafeSetImport(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Registers new SqlFailSafeSet and FileFailSafeSet.
            Takes in SqlFailSafeSets and FileFailSafeSets
            in the form of a Delta XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.AddFailSafeSetRegister">
            <summary>
            Registers new FileFailSafeSet. No longer used for Sql.
            Takes in FileFailSafeSets in the form of a Delta XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.AddPartitionImport(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Registers or updates data partition mapping.
            Take in new data partition map
            in the form of a Delta XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.AddPartitionImportNew(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Registers or updates data partition mapping.
            Take in new data partition map
            in the form of a Delta XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.AddPartitionSetup(System.Guid)">
            <summary>
            Add the partition imported from AddPartitionImport.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.ValidateAndLoadAddFailSafeSet(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Add a partition. Takes in DataServers, SqlFailSafeSets, FileFailSafeSets
            and DataPartitions in the form of a Delta XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.MapPartition(Microsoft.Webstore.Management.Wmo.WMOSprocs,System.Int16,System.Int16,System.Int16)">
            <summary>
            Maps a data Partition to a SQL or File Fail Safe Set, or both.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.UpdateDatabase(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,System.Guid)">
            <summary>
            Can only update db if it's offline or needsrepair
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.UpdateVersionCheck(Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Deployment Upgrade verification.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.UpdateVersionSecurityRoleCheck(Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Always allow to add new roles, allow to drop an old role only if there is
            no security account belongs to this role
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.UpdateVersion(Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Associates a new Manifest with an existing Deployment.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.UpgradeAudit(System.Guid,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Upgrades the databases etc in the 'real' world.
            Steps:
            1) For any database that is marked NeedsRepair, ignore it.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.DowngradeAudit(System.Guid,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Downgrades to a previous version of the users Manifest. Prereqs:
            1) UpdateVersion must have been called that started an Upgrade, otherwise calls to this function is a NOP.
            2) All Fail Safe Sets that are not listed as being the Previous version will have their registered downgrade scripts run.
            3) Multiple calls to UpdateVersion without finishing downgrade are not supported. You must finish upgrade or downgrade before running a second UpdateVersion. If necessary use the -force command so that you can make a fresh start.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.GetStatus(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Boolean,System.Int32@)">
            <summary>
            GetStatus method for the Deployment object. Called individually
            or by the DeploymentCollection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.List(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder)">
            <summary>
            Lists the names of this Deployment in an XML node.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.CalculateAllocatedDatabaseName(System.Boolean,System.String,System.Int32,System.String)">
            <summary>
            This does the heavy lifting of marking up the database name with the replacement chars
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.GetServerNumber(System.String)">
            <summary>
            This will find the trailing number from a server name and return that
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.GetAndValidateMask(System.String)">
            <summary>
            This will take the passed in mask and determine if it can be used.  It will return "0" if it cannot
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.GetServerNumberString(System.String,System.String)">
            <summary>
            This will utilize the passed in mask and pad the passed in number appoppriately with the proper chars
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.GetProvPref(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder)">
            <summary>
            GetProvPref method for the Deployment object. 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.ReinitTemplateObjects">
            <summary>
            Reinitialize the TemplateObjects after changing the name and version of
            the manifest. Used during deployment upgrade.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.Name">
            <summary>
            Name of the deployment.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.Uid">
            <summary>
            Uid of the deployment.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.ManifestUid">
            <summary>
            Uid of the manifest this deployment deploys.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.ManifestName">
            <summary>
            Name of the manifest that this deployment deploys
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.SystemManifestUid">
            <summary>
            Uid of the system manifest this deployment deploys.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.PreviousManifestUid">
            <summary>
            Uid of the previous manifest after Update Version is called.
            The value will be equal to the current ManifestUID if Update
            Version has not been called.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.ManifestVersion">
            <summary>
            The Version of the Manifest this deployment belongs to.
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.ManifestIsFileshareOnly">
            <summary>
            Whether this manifest is a Fileshare Only manifest
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.WebstoreVersion">
            <summary>
            The Version of the System Manifest this deployment belongs to.
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.SqlDefaultReadCmdType">
            <summary>
            Default command type for Read commands.
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.SqlDefaultReadCmdTypeStr">
            <summary>
            Default command type for Read commands.
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.SqlDefaultWriteCmdType">
            <summary>
            Default command type for Write commands.
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.SqlDefaultWriteCmdTypeStr">
            <summary>
            Default command type for Write commands.
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.FileDefaultReadCmdType">
            <summary>
            Default command type for Read commands.
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.FileDefaultReadCmdTypeStr">
            <summary>
            Default command type for Read commands.
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.FileDefaultWriteCmdType">
            <summary>
            Default command type for Write commands.
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.FileDefaultWriteCmdTypeStr">
            <summary>
            Default command type for Write commands.
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.MaxTicket">
            <summary>
            max ticket
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.MaxPartitionTicket">
            <summary>
            maxpartitionticket
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.MaxDeleteTicket">
            <summary>
            maxdeleteticket
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.MaxDeploymentTicket">
            <summary>
            MaxDeploymentTicket
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.SqlClientSettingsTicket">
            <summary>
            ticket
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.FileClientSettingsTicket">
            <summary>
            ticket
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.SqlSecondaryStaleThreshold">
            <summary>
            How old a secondary must be before being considered stale
            causing clients to choose another database in the Sql FailSafe Set.
            in minutes.
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.SqlSecondaryStaleThresholdStr">
            <summary>
            String version of ClientSecondaryStaleThreshold
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.SqlSecondaryStaleDCThreshold">
            <summary>
            How old a secondary must be before being considered stale
            causing clients to choose a database in another data center.
            in minutes.
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.SqlSecondaryStaleDCThresholdStr">
            <summary>
            String version of ClientSecondaryStaleDCThreshold
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.FileSecondaryStaleThreshold">
            <summary>
            How old a secondary must be before being considered stale
            causing clients to choose another database in the Sql FailSafe Set.
            in minutes.
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.FileSecondaryStaleThresholdStr">
            <summary>
            String version of ClientSecondaryStaleThreshold
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.FileSecondaryStaleDCThreshold">
            <summary>
            How old a secondary must be before being considered stale
            causing clients to choose a database in another data center.
            in minutes.
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.FileSecondaryStaleDCThresholdStr">
            <summary>
            String version of ClientSecondaryStaleDCThreshold
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.PartitioningType">
            <summary>
            Partitioning option supported by this manifest
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.PartitioningTypeStr">
            <summary>
            get and set PartitioningType with string input/output
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.TypeOfSqlSecondaries">
            <summary>
            Replication option supported by this deployment and manifest.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.TypeOfSqlSecondariesStr">
            <summary>
            get and set PartitioningType with string input/output
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.Description">
            <summary>
            Description of the deployment
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.DataServers">
            <summary>
            Data Servers used by this deployment
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.DataServersInUse">
            <summary>
            Data Servers used by this deployment
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.ServerRoles">
            <summary>
            Server roles used by this deployment.
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.Clusters">
            <summary>
            Clusters used by this deployment
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.DatabaseTemplates">
            <summary>
            Database Templates used by this deployment
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.AllocateExportClusters">
            <summary>
            Used for autoallocate, these are the clusters that have been created separately
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.AllocateExportDataServers">
            <summary>
            Used for autoallocate, these are the clusters that have been created separately
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.TemplateObjects">
            <summary>
            Template objects, including accounts, files, distribution
            server and database, publications, subscriptions and jobs.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.SqlFailSafeSets">
            <summary>
            Collection of Sql FailSafe Sets.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.FileFailSafeSets">
            <summary>
            Collection of File Fail Safe Sets.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.DataPartitions">
            <summary>
            Collection of data partitions.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.IsAllocate">
            <summary>
            IsAllocate
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.ShouldAllocateAllNewDataPartitions">
            <summary>
            Tells us whether we should be allocating data partitions 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.ExportFromExistingDeployment">
            <summary>
            Tells us if we are exporing out existing deployment information (so we only have to do a fragment)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.ContainsInitialSqlClientSettings">
            <summary>
            Inidicates whether on the Import if Sql Client settings were passed in
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.ContainsInitialFileClientSettings">
            <summary>
            Inidicates whether on the Import if File Client settings were passed in
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDeploymentCollection">
             <summary>
            
             </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeploymentCollection.Add(Microsoft.Webstore.Management.Wmo.WmoDeployment)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeploymentCollection.IndexOf(System.Guid)">
            <summary>
            Returns the index of the first object of the given name.
            </summary>
            <returns>
            The 0-based index of the first object with the name.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeploymentCollection.Initialize">
            <summary>
            Loads the in-memory data from the config dbs, shallow initialize
            only initializes simple member variables of manifests, no collections
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeploymentCollection.GetStatus(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Boolean,System.Int32@)">
            <summary>
            GetStatus method for the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeploymentCollection.List(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder)">
            <summary>
            Lists all Deployments.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeploymentCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeploymentCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeploymentCollection.Item(System.Guid)">
            <summary>
            guid indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDeploymentObject">
            <summary>
            Base class for deployment objects
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeploymentObject.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeploymentObject.Name">
            <summary>
            Name of the deployment.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeploymentObject.DeploymentUid">
            <summary>
            UID of the deployment to which this object belongs
            set by the collection's Add method
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDeploymentObjectCollection">
            <summary>
            Base collection class for derivers of WmoDeploymentObject
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeploymentObjectCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeploymentObjectCollection.Add(Microsoft.Webstore.Management.Wmo.WmoDeploymentObject)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeploymentObjectCollection.DeploymentUid">
            <summary>
            the uid of the deployment that this collection belongs to
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeploymentObjectCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeploymentObjectCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDistributionDatabase">
            <summary>
            Class for distribution databases
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDistributionDatabase.#ctor(System.Guid)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDistributionDatabase.SetPublisherToUseDistributor(System.String,System.String)">
            <summary>
            run once per publishing server to associate the publishing server 
            with a distribution server
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDistributionDatabase.SqlServerUid">
            <summary>
            Name of the server hosting this database
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDistributionDatabase.SqlServerName">
            <summary>
            Name of the server hosting this database
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDistributionDatabase.DatabaseName">
            <summary>
            name of the object
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDistributionDatabase.ConfigSprocs">
            <summary>
            to run sprocs against config db (initialize)
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet">
            <summary>
            Class for File Fail Safe Sets
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.IsOperationAllowed(Microsoft.Webstore.Management.Wmo.WmoFileShare,System.String,System.Boolean)">
            <summary>
            Determines whether a particular operation is allowed or not
            </summary>
            <param name="fs"></param>
            <param name="op"></param>
            <param name="throwException"></param>
            <returns>bool</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.GetValidStatuses(System.String)">
            <summary>
            Gets the valid statuses for a given operation
            </summary>
            <param name="operation"></param>
            <returns>string</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Initialize from the config dbs to in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Initialize from the xml file
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.Uninitialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Uninitialize internal data from Initalize()
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.InitializeFileShare(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Initialize from the config dbs to in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.ReInitialize">
            <summary>
            ReInitialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.ExportForRegister(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Used only for bulk registration for FileFailSafeSets.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.Drop(System.Boolean)">
            <summary>
            drop fail safe set
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.DeployAudit(System.Guid)">
            <summary>
            Installs the FileShares etc in the 'real' world.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.Deploy(System.Object)">
            <summary>
            Installs the FileShares etc in the 'real' world.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.AddFileShare(System.String,System.String)">
            <summary>
            Add a fileshare. Verify that the server exists, and the fileshare
            does not. Then add it to the Database collection on the
            FileFailSafeSet and on the DataServer FileShare collection.
            Finally, register it with WstConfig.
            Note, this method is called by WmoCommandFileShare.Import
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.PromoteAudit(System.String,System.String,System.Guid)">
            <summary>
            Audit the promote
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.Promote(System.String,System.String,System.Guid)">
            <summary>
            Promotes the given FileShare to be the primary in the File Fail Safe Set
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.PromoteFSS(System.Guid)">
            <summary>
            Promote for the Fail Safe Set
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.DemoteAudit(System.String,System.String,System.Guid)">
            <summary>
            Audit the Demote
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.Demote(System.String,System.String)">
            <summary>
            Demotes the primary FileShare to be a secondary in the File
            Fail Safe Set
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.DemoteFSS(System.Guid)">
            <summary>
            Demote the fail safe set.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.ChangeConfigFileShareDemote(Microsoft.Webstore.Management.Wmo.WmoFileShare)">
            <summary>
            Changes the config db to demote this FileShare
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.ChangeConfigMarkNeedsRepairAndDemote(Microsoft.Webstore.Management.Wmo.WmoFileShare)">
            <summary>
            Changes the config db to demote this FileShare
            </summary>
            <summary>
            Changes the config db to demote this FileShare
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.ChangeConfigFileSharePromote(Microsoft.Webstore.Management.Wmo.WmoFileShare)">
            <summary>
            Changes the config db to demote this FileShare
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.MarkOfflineAudit(System.String,System.String,System.Guid)">
            <summary>
            Marks this FileShare offline (admin access only) with auditting
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.MarkOffline(System.String,System.String)">
            <summary>
            Marks this FileShare offline (admin access only)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.MarkNeedsRepairAudit(System.String,System.String,System.Guid)">
            <summary>
            Marks this FileShare MarkNeedsRepair (admin access only) with auditting
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.MarkNeedsRepair(System.String,System.String,System.Guid)">
            <summary>
            Marks this FileShare offline (admin access only)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.MarkOnlineAudit(System.String,System.String,System.Guid)">
            <summary>
            Marks this fileshare online (admin access only) and audit it
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.MarkOnline(System.String,System.String)">
            <summary>
            Marks this FileShare offline (admin access only)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.RepairAudit(System.String,System.String,System.Guid)">
            <summary>
            Repair this fileshare (admin access only) and audit it
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.Repair(System.String,System.String)">
            <summary>
            Repair simply changes fileshare status to offline for time being
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.ChangeStatusInConfigDB(Microsoft.Webstore.Management.Wmo.WmoFileShare,Microsoft.Webstore.Management.Wmo.WmoEnum.FileShareStatus)">
            <summary>
            Changes the config db to marks this FileShare offline
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.ChangeDefaultPrimary(Microsoft.Webstore.Management.Wmo.WmoFileShare)">
            <summary>
            Change the Primary file share of this fail safe set
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.GetStatus(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Boolean,System.Int32@)">
            <summary>
            GetStatus method for the object.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.GetProvPref(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder)">
            <summary>
            GetProvPref method for the object.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.Deployment">
            <summary>
            Set by the parent when this class is instantiated. This allows us to access
            child properties. This is used specifically to figure out what kind of Fail
            Safe Set Manager to create.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.DeploymentUid">
            <summary>
            UID of the deployment to which this object belongs
            set by the collection's Add method
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.ID">
            <summary>
            Number of the object
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.IDStr">
            <summary>
            String version of the number of the object
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.Ticket">
            <summary>
            Ticket used for Polling.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.Status">
            <summary>
            Status: Deployed, NotDeployed
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.PrimaryShareUid">
            <summary>
            Primary File Share for the Fail Safe Set
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.DefaultPrimaryShareUid">
            <summary>
            Default Primary File Share for the Fail Safe Set
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.FileShares">
            <summary>
            File Shares in this File Fail Safe Set
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.ProvPref">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.ProvStatus">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSetCollection">
            <summary>
            Collection class for WmoFileFailSafeSet
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSetCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSetCollection.Add(Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSetCollection.Initialize">
            <summary>
            Initialize from the config dbs to in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSetCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            initializes from xml file
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSetCollection.Uninitialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Removes any allocated data from the Initialize() call
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSetCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSetCollection.ExportForRegister(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder)">
            <summary>
            Used by Collection Register command to do bulk import of FileFailSafeSets and Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSetCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSetCollection.Validate">
            <summary>
            Validate the internal consistency of the Collection and each
            object within the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSetCollection.GetStatus(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Boolean,System.Int32@)">
            <summary>
            GetStatus method for the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSetCollection.GetProvPref(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder)">
            <summary>
            GetProvPref method for the collection.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSetCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSetCollection.Deployment">
            <summary>
            Set by the parent when this class is instantiated. This allows us to access
            child properties. This is used specifically to figure out what kind of Fail
            Safe Set Manager to create.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoFileGroup">
            <summary>
            This class is used for defining the file groups, logical files, and
            backup stripes related to the creation, backing up and restoring of
            sQl databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroup.#ctor">
            <summary>
            Default constructor. The DatabaseTemplateUid and FileGroupName must
            still be set. Once these have been set, the WmoLogicalFileCollection
            must also have these values set.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroup.#ctor(System.Guid)">
            <summary>
            Constructor with the DatabaseTemplateUid passed in.
            The name of the object must still be defined before it can be
            registered. Once these two are set, the WmoLogicalFileCollection
            must also have these values set.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroup.#ctor(System.Guid,System.String)">
            <summary>
            Constructor with the DatabaseTemplateUid and FileGroupName passed in.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroup.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Initialize from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroup.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Initialize the class from the WstConfig database. This method is called from
            the WmoDatabaseCollection initialize method or from the WmoFileGroup collection
            initialize method.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroup.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Register the template. This method is called with Dtc already started at the collection level.
            All validation should be completed before you get to this step.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroup.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroup.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileGroup.IsInCollection">
            <summary>
            Whether this object is in a collection (set by the add/remove
            methods for collections determines whether the name can be set)
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection">
            <summary>
            Collection class for databases
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.#ctor(System.Guid)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.IndexOf(System.String)">
            <summary>
            Returns the index of the first object of the given name.
            </summary>
            <returns>
            The 0-based index of the first object with the name.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.Contains(System.String)">
            <summary>
            Tests whether the collection contains an object of the given name.
            </summary>
            <returns>
            true if the collection contains an object identified by the name;
            false if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            required for ICollection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.Add(Microsoft.Webstore.Management.Wmo.WmoFileGroup)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.Remove(System.String)">
            <summary>
            Removes an object from the object collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.GetEnumerator">
            <summary>
            Gets the IEnumerator for this WmoFileGroupCollection.  This is meant to
            support the foreach statement.
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.Validate">
            <summary>
            Validates the databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.Clean">
            <summary>
            remove all elements
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.DatabaseTemplateUid">
            <summary>
            DatabaseTemplateUid of the parent
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.Count">
            <summary>
            count of objects in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.Item(System.String)">
            <summary>
            FileGroupName indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.IsSynchronized">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.SyncRoot">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.WmoFileGroupEnumerator">
            <summary>
            This class implements the IEnumerator over a WmoNamedObjectCollection in support
            of the "foreach" keyword
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.WmoFileGroupEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.WmoFileGroupEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            Must be called before accessing the Current element.
            </summary>
            <returns>
            true if enumerator successfully advanced to next element;
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.WmoFileGroupEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoFileShare">
            <summary>
            Class for file share information.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShare.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShare.Initialize(System.String,System.String,System.Guid)">
            <summary>
            Initialize from passing in parameters
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShare.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Initialize from xml dbs to in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShare.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Register this File share
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShare.Register">
            <summary>
            Register this fileshare
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShare.Initialize(Microsoft.Webstore.WstClient.WstDataReader,System.Guid,System.Guid)">
            <summary>
            Initialize from the config dbs to in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShare.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Uses in-memory data to create an XML element.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShare.ExportForRegister(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Used for bulk insert during register.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShare.Deploy">
            <summary>
            Simply Validate
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShare.Setup">
            <summary>
            deploy fileshare and change status to be online
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShare.UnRegister">
            <summary>
            Removes the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShare.UnRegister(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            UnRegister this fileshare
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShare.UnDeploy">
            <summary>
            What to do?
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShare.Validate">
            <summary>
            validate 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShare.DeployValidate">
            <summary>
            validate if fileshare exists, throws exception if it doesn't
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShare.GetStatus(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Boolean,System.Int32@)">
            <summary>
            GetStatus method for the object.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShare.Uid">
            <summary>
            Uid of this file share
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShare.FileSharePath">
            <summary>
            Path for this share.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShare.DataServer">
            <summary>
            The server where this file share path resides.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShare.DataServerName">
            <summary>
            The string name of the server where this file share path resides.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShare.DeploymentUid">
            <summary>
            Guid of the deployment that this file share belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShare.FileFailSafeSetID">
            <summary>
            File Fail Safe Set that this file share belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShare.FileFailSafeSet">
            <summary>
            FileFailSafeSet
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShare.Ticket">
            <summary>
            Ticket
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShare.Status">
            <summary>
            Status: Online or Offline. TODO: Determine if there are more states for File Shares.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShare.StatusStr">
            <summary>
            String converstion for Status of the File Share
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShare.IsPrimary">
            <summary>
            Primary File Share. For Promote/Demote.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShare.IsDefaultPrimary">
            <summary>
            The default primary share state. Used to restore a system to a known state.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShare.IsInCollection">
            <summary>
            whether this object is in a collection
            (set by the add/remove methods for collections
            determines whether the share path can be set)
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection">
            <summary>
            Collection class for File Shares
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.m_FileShares">
            <summary>
            Keep track of FileShares in collection using an ArrayList.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.IndexOf(System.String,System.String)">
            <summary>
            Returns the index of the first file share with the given data
            server and path.
            </summary>
            <returns>
            The 0-based index.
            -1 if the collection doesn't contain the object.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.IndexOf(System.Guid)">
            <summary>
            Returns the index of the first object of the given uid.
            </summary>
            <returns>
            The 0-based index of the first object with the uid.
            -1 if the collection doesn't contain an object with this uid.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.Contains(System.String,System.String)">
            <summary>
            Tests whether the collection contains an object of the given name.
            </summary>
            <returns>
            true if the collection contains an object identified by the name;
            false if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            required for ICollection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.Add(Microsoft.Webstore.Management.Wmo.WmoFileShare)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.Remove(System.String,System.String)">
            <summary>
            Removes an object from the object collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.ExportForRegister(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Used by the Register FailSafeSet collection for bulk inserts.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.Validate">
            <summary>
            Validate each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.GetEnumerator">
            <summary>
            Gets the IEnumerator for this WmoFileShareCollection.  This is
            meant to support the foreach statement.
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.Deploy">
            <summary>
            Installs the file shares in the 'real' world.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.GetStatus(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Boolean,System.Int32@)">
            <summary>
            GetStatus method for the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.Clean">
            <summary>
            remove all elements
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.Count">
            <summary>
            count of FileShares in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.Item(System.String,System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.Item(System.Guid)">
            <summary>
            Uid indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.IsSynchronized">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.SyncRoot">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.DeploymentUid">
            <summary>
            The uid of the deployment that this collection belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.FileFailSafeSetID">
            <summary>
            File Fail Safe Set that this file share collection belongs to
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.DataServer">
            <summary>
            Server that this file share is installed on.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.WmoFileShareEnumerator">
            <summary>
            This class implements the IEnumerator over a WmoFileShareCollection
            in support of the "foreach" keyword
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.WmoFileShareEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before
            the first element in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.WmoFileShareEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            Must be called before accessing the Current element.
            </summary>
            <returns>
            true if enumerator successfully advanced to next element;
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.WmoFileShareEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoLogFile">
            <summary>
            The WmoLogFile is a special hybrid between the WmoFileGroup and WmoLogicalFile
            classes. The LogFile has one FileGroup with the name LogFile which has one
            logical file of the users choosing. The data for the WmoLogFile class is stored
            in the LogicalFile table.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogFile.#ctor">
            <summary>
            Only the DatabaseTemplateUid is needed.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogFile.#ctor(System.Guid)">
            <summary>
            Only the DatabaseTemplateUid is needed.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogFile.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Initialize from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogFile.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Initialize the class from the WstConfig database. This method is called from
            the WmoDatabaseCollection initialize method or from the WmoLogFile collection
            initialize method.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogFile.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Register the template. This method is called with Dtc already started at the collection level.
            All validation should be completed before you get to this step.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogFile.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogFile.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoLogFile.DatabaseTemplateUid">
            <summary>
            The DatabaseTemplateUID passed in from the parent.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoLogFile.LogicalFileName">
            <summary>
            The LogicalFileName from the logicalFiles collection.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoLogicalFile">
            <summary>
            This class is used for defining a logical file, used for creating, backing up 
            and restoring Sql databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFile.#ctor">
            <summary>
            After using this constructor the user must set the DatabaseTemplateUid
            and FileGroupName.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFile.#ctor(System.Guid,System.String)">
            <summary>
            Pass in two parts of the identity for the logical file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFile.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Initialize from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFile.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Initialize from sql data reader.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFile.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Register the LogicalFile. This method is called with Dtc already started at the
            collection level. All validation should be completed before you get to this step.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFile.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Converts the internal variables into an XML fragment. This is appended
            to the Xml document object to output to a file by the parent.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFile.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoLogicalFile.IsInCollection">
            <summary>
            Whether this object is in a collection (set by the add/remove
            methods for collections determines whether the name can be set)
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection">
            <summary>
            Collection class for databases
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.#ctor">
            <summary>
            Default constructor. Must set the DatabaseTemplateUid and the FileGroupName.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.#ctor(System.Guid,System.String)">
            <summary>
            Prefered constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.IndexOf(System.String)">
            <summary>
            Returns the index of the first object of the given name.
            </summary>
            <returns>
            The 0-based index of the first object with the name.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.Contains(System.String)">
            <summary>
            Tests whether the collection contains an object of the given name.
            </summary>
            <returns>
            true if the collection contains an object identified by the name;
            false if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            required for ICollection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.Add(Microsoft.Webstore.Management.Wmo.WmoLogicalFile)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.Remove(System.String)">
            <summary>
            Removes an object from the object collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.GetEnumerator">
            <summary>
            Gets the IEnumerator for this WmoLogicalFileCollection.  This is meant to
            support the foreach statement.
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.Validate">
            <summary>
            Validates the databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.Clean">
            <summary>
            remove all elements
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.Count">
            <summary>
            count of objects in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.FileGroupName">
            <summary>
            count of objects in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.DatabaseTemplateUid">
            <summary>
            count of objects in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.IsSynchronized">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.SyncRoot">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.WmoLogicalFileEnumerator">
            <summary>
            This class implements the IEnumerator over a WmoNamedObjectCollection in support
            of the "foreach" keyword
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.WmoLogicalFileEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.WmoLogicalFileEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            Must be called before accessing the Current element.
            </summary>
            <returns>
            true if enumerator successfully advanced to next element;
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.WmoLogicalFileEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoReplicationLatency">
            <summary>
            Base class for databases
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationLatency.GetStatus(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Boolean,System.Int32@)">
            <summary>
            GetStatus method for the object.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationLatency.Publisher">
            <summary>
            The source of the publication.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationLatency.Subscriber">
            <summary>
            The source of the publication.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationLatency.Latency">
            <summary>
            The replication latency in seconds.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationLatency.LatencyBucket">
            <summary>
            The replication latency bucket.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection">
            <summary>
            Collection class for the above.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.m_objects">
            <summary>
            Keep track of objects in collection using an ArrayList.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.IndexOf(Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            Returns the index of the first object of the given name.
            </summary>
            <returns>
            The 0-based index of the first object with the name.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.Contains(Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            Tests whether the collection contains an object of the given name.
            </summary>
            <returns>
            true if the collection contains an object identified by the name;
            false if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            required for ICollection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.Add(Microsoft.Webstore.Management.Wmo.WmoReplicationLatency)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.Remove(Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            Removes an object from the object collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.GetEnumerator">
            <summary>
            Gets the IEnumerator for this WmoReplicationLatencyCollection.  This is meant to
            support the foreach statement.
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.GetStatus(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Boolean,System.Int32@)">
            <summary>
            GetStatus method for the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.Clean">
            <summary>
            remove all elements
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.Count">
            <summary>
            count of objects in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.Item(Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.IsSynchronized">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.SyncRoot">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.WmoReplicationLatencyEnumerator">
            <summary>
            This class implements the IEnumerator over a WmoNamedObjectCollection in support
            of the "foreach" keyword
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.WmoReplicationLatencyEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.WmoReplicationLatencyEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            Must be called before accessing the Current element.
            </summary>
            <returns>
            true if enumerator successfully advanced to next element;
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.WmoReplicationLatencyEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet">
            <summary>
            Class for Sql Fail Safe Sets
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Initialize from the config dbs to in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Initialize from the xml file
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Uninitialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Uninitialize internal data from Initalize()
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.InitializeAppDB(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Initialize from the config dbs to in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.ReInitialize">
            <summary>
            ReInitialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.ExportForRegister(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Used only for bulk registration for SqlFailSafeSets.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Drop(System.Boolean)">
            <summary>
            Drop fail safe set. The caller must have done the following before this call is made:
                Mapped the Data Partitions pointing to this FSS to a different FSS or to -1.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Deploy">
            <summary>
            Installs the databases etc in the 'real' world.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.DeployAudit(System.Guid)">
            <summary>
            Audit the Deploy
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Deploy(System.Object)">
            <summary>
            Installs the databases etc in the 'real' world.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Upgrade(System.Object)">
            <summary>
            Installs the databases etc in the 'real' world.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Downgrade(System.Object)">
            <summary>
            If a user feels that upgrade has failed, we supply the downgrade method.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.AddDatabase(System.String,System.String,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus)">
            <summary>
            Add a database. Verify that the server exists, and the database
            does not. Then add it to the Database collection on the
            SqlFailSafeSet and on the DataServer Database collection.
            Finally, register it with WstConfig.
            Note, this method is called by WmoCommandDatabase.Import and
            WmoCommandDatabase.AddConfig. The latter code is only reachable
            through MSI setup.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.RegisterLatency(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Initializes the data in the SqlFssLatency table
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.AddReplica(System.Object)">
            <summary>
            Add replicas to an existing sql fail safe set.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.AddReplica(System.String)">
            <summary>
            Add replicas to an existing sql fail safe set.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.PromoteAudit(System.String,System.String,System.Guid,Microsoft.Webstore.Management.Wmo.WmoAdminLock)">
            <summary>
            Audit the promote
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.PromoteDbInMirroring(System.String,System.String)">
            <summary>
            Demotes the primary database to be a secondary in the Sql FailSafe Set and auto promotes the secondary to Primary
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.PromoteFSS(System.Guid,System.Boolean)">
            <summary>
            Promote for the Fail Safe Set
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Promote(System.String,System.String,System.Guid,System.Boolean,Microsoft.Webstore.Management.Wmo.WmoAdminLock)">
            <summary>
            Promotes the given database to be the primary in the Sql FailSafe Set
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.DemoteFSS(System.Guid)">
            <summary>
            Demote the fail safe set.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.MarkOfflineFSS(System.Guid,System.Boolean)">
            <summary>
            Mark an entire fail safe set offline.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.MarkOnlineFSS(System.Guid)">
            <summary>
            Mark an entire fail safe set online.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.DemoteAudit(System.String,System.String,System.Guid,Microsoft.Webstore.Management.Wmo.WmoAdminLock)">
            <summary>
            Audit the Demote
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.DemoteDbInMirroring(System.String,System.String)">
            <summary>
            Demotes the primary database to be a secondary in the Sql FailSafe Set and auto promotes the secondary to Primary
            A database in mirroring can only be in the following state online/offline/notdeployed/needsrepair
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Demote(System.String,System.String,System.Guid,Microsoft.Webstore.Management.Wmo.WmoAdminLock)">
            <summary>
            Demotes the primary database to be a secondary in the Sql FailSafe Set
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.MarkOfflineAudit(System.String,System.String,System.Guid,System.Boolean,System.Boolean,Microsoft.Webstore.Management.Wmo.WmoAdminLock)">
            <summary>
            Marks this database offline (admin access only) and audit it
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.MarkOffline(System.String,System.String,System.Guid,System.Boolean,Microsoft.Webstore.Management.Wmo.WmoAdminLock)">
            <summary>
            Marks this database offline (admin access only)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.ForceMarkOfflineDatabase(System.String,System.String,System.Boolean)">
            <summary>
            We have to do this because in Mirroring db offline -force is not allowed
            while fss offline -force is allowed.
            </summary>
            <param name="serverName"></param>
            <param name="dbName"></param>
            <param name="isUpgradeWithReplTearDown"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.ForceMarkOffline(System.String,System.String,System.Boolean)">
            <summary>
            Marks this database offline (admin access only)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.MarkOfflineAudit(System.Object)">
            <summary>
            Marks this database offline (admin access only)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.MarkNeedsRepairAudit(System.String,System.String,System.Guid,System.Boolean)">
            <summary>
            Marks this database MarkNeedsRepair (admin access only) and audit it
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.MarkNeedsRepair(System.String,System.String,System.Guid,System.Boolean)">
            <summary>
            Marks this database needs repair
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.MarkNeedsRepairAudit(System.Object)">
            <summary>
            Called by Multi-Threading
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.MarkOnlineAudit(System.String,System.String,System.Guid,System.Boolean,Microsoft.Webstore.Management.Wmo.WmoAdminLock)">
            <summary>
            Marks this database online (admin access only) and audit it
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.MarkStandbyAudit(System.String,System.String,System.Guid,System.Boolean)">
            <summary>
            Marks this database standby (admin access only) and audit it
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.MarkOnline(System.String,System.String,System.Boolean,Microsoft.Webstore.Management.Wmo.WmoAdminLock)">
            <summary>
            Marks this database online (admin access only)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.MarkStandby(System.String,System.String,System.Boolean)">
            <summary>
            Marks this database standby (admin access only)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.MarkOnlineAudit(System.Object)">
            <summary>
            Marks this database online (admin access only)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.RepairAudit(System.String,System.String,System.Guid)">
            <summary>
            Repair the database (admin access only) and audit it
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Repair(System.String,System.String,System.Boolean)">
            <summary>
            Repairs the database. The Repair essentially calls DeploySecondary.
            However, we do additional checks, such as making sure that there
            is a primary database that is online, that the database is
            actually marked for repair, and that the force flag has not been
            used. The final state of the database is Offline.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.RepairAudit(System.Object)">
            <summary>
            Called by Multi-Threading
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.ForceRepair(System.String,System.String)">
            <summary>
            Forces Repairs of the database. In the case where all databases are
            marked as Needs Repair, we allow the operator to select a database
            to mark online.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.ChangeDefaultPrimary(Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            Change the Primary Database of this fail safe set
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.GetStatus(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Boolean,System.Int32@)">
            <summary>
            GetStatus method for the object.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.GetProvPref(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder)">
            <summary>
            GetProvPref method for the object.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.UpgradeAudit(System.Guid,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Audit the update from one manifest to the next
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.DeployUpgradeOrDowngradeScripts(System.Guid,Microsoft.Webstore.Management.Wmo.WmoManifest,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            DeployUpgradeScripts will walk through each database, put it into the correct
            state. (demoted, offline) then call the WmoDatabase level DeployUpgrade scripts.
            Once this is complete, it will online and demote as appropriate for the parameters
            passed in by the user.
            </summary>
            <param name="parentAuditUid"></param>
            <param name="manDelta"></param>
            <param name="isTopologyChange"></param>
            <param name="isReplTearDown"></param>
            <param name="isRollingUpgrade"></param>
            <param name="isUpgrade"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.DowngradeAudit(System.Guid,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Audit the update from one manifest to the next
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.SetManifestUid(System.Guid)">
            <summary>
            SetManifestUid
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.SetupRepl(System.String,System.String)">
            <summary>
            Setup replication.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.SetupRepl">
            <summary>
            Setup replication for all databases in the FSS.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.DropRepl(System.String,System.String,System.Boolean)">
            <summary>
            Drop replication.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.DropRepl(System.Boolean)">
            <summary>
            Drop replication from all databases in the FSS.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.MarkNeedsRepl(System.String,System.String,System.DateTime,System.DateTime)">
            <summary>
            Mark the ti_NeedsRepl column on all tables on a multimaster database. Return errors if the parematers incorrect.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.MarkNeedsRepl(System.DateTime,System.DateTime)">
            <summary>
            Mark the ti_NeedsRepl column on all databases in a fail safe set.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.IsLiteSpeedInstalled">
            <summary>
            The source and destination servers in a backup/restore set must both have Litespeed in order
            for the process to work.
            Backup and Restore can only happen between the primary and a secondary database.
            Furthermore, the secondary database must be in a not deployed or needs repair state.
            Therefore, we will check the servers that have these databases to see if Litespeed
            is installed. If any one of them do not have it installed, the test fails.
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Assign(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.InitializeForAssign(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Processes Xml to set the DatabaseTemplate. The rules are: If the element
            is not specified, use the preset. If the preset is not specified, use the
            default. In all cases verify the templates exist.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Deployment">
            <summary>
            Set by the parent when this class is instantiated. This allows us to access
            child properties. This is used specifically to figure out what kind of Fail
            Safe Set Manager to create.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.ManifestUid">
            <summary>
            The ManifestUid of the SqlFailSafeSet can be different from the
            Deployment ManifestUid during upgrade.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.TypeOfSqlSecondaries">
            <summary>
            Replication option supported by this fail safe set.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.SecondaryDeploymentManager">
            <summary>
            This virtual property determines what manager to return to the caller.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.ID">
            <summary>
            Number of the object
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.IDStr">
            <summary>
            String version of the number of the object
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Ticket">
             <summary>
            
             </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Status">
            <summary>
            Status: Deployed, NotDeployed
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.PrimaryDatabaseUid">
            <summary>
            Primary database for the partition
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.DefaultPrimaryDatabaseUid">
            <summary>
            Default primary database for the partition
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.WitnessServerUid">
            <summary>
            Witness server for the partition
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Databases">
            <summary>
            Databases in this Sql FailSafe Set
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Allocated">
            <summary>
            if current fss is auto allocated or not
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Override">
            <summary>
            Override for MarkOnline
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.ProvPref">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.ProvStatus">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.ReplicationPublicationDeploy">
            <summary>
            Publication info for the fail safe set.
            </summary>
            Publication information can differ between the deployment and the fail safe set
            due to topology upgrade. Therefore we have a Deployment level ReplPublicationForSecondaries
            and a FSS level ReplPublicationForSecondaries.
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.ClusterUid">
            <summary>
            The ClusterUid for the Sql Fail Safe Set.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Cluster">
            <summary>
            The Cluster for the Sql Fail Safe Set. Note that this.clusterUid must exist.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.DatabaseTemplateUid">
            <summary>
            The database template for the sql fail safe set.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.DatabaseTemplateName">
            <summary>
            The database template name used for export.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection">
            <summary>
            Collection class for WmoSqlFailSafeSet
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.Add(Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.Initialize">
            <summary>
            Initialize from the config dbs to in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            initializes from xml file
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.Uninitialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Removes any allocated data from the Initialize() call
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement,System.Boolean)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.ExportForRegister(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder)">
            <summary>
            Used by Collection Register command to do bulk import of SqlFailSafeSets and Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.Register">
            <summary>
            Registers SqlFailSafeSets.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.Validate">
            <summary>
            Validate the internal consistency of the Collection and each
            object within the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.GetStatus(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Boolean,System.Int32@)">
            <summary>
            GetStatus method for the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.GetProvPref(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder)">
            <summary>
            GetProvPref method for the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.SetAllocated(System.Boolean)">
            <summary>
            set allocated flag on all member.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.Assign">
            <summary>
            Assign DatabaseTemplate to each FSS in the array.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.Deployment">
            <summary>
            Set by the parent when this class is instantiated. This allows us to access
            child properties. This is used specifically to figure out what kind of Fail
            Safe Set Manager to create.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.NumSecondaries">
            <summary>
            NumSecondaries for auto allocate
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.NumPrimariesPerServer">
            <summary>
            NumPrimariesPerServer for auto allocate
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.PrimaryDatabaseName">
            <summary>
            Is the structure for the name of primary databases that are created through auto allocate
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.SecondaryDatabaseName">
            <summary>
            Is the structure for the name of secondary databases that are created through auto allocate
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.BeginNumber">
            <summary>
            When numbering the sql fail safe sets, this is the beginning number to start with
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.Datacenter">
            <summary>
            The data center that will be replaced in the Mask strings
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.ServerCluster">
            <summary>
            The server cluster that will be replaced in the Mask strings
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.PrimaryServerIdMask">
            <summary>
            The mask for the primary server id (e.g. "000" to force the server id to be three characters)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.SecondaryServerIdMask">
            <summary>
            The mask for the secondary server id (e.g. "000" to force the server id to be three characters)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.FssIdMask">
            <summary>
            The mask for the fail safe set id (e.g. "000" to force the fail safe set id to be three characters)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.UsePrimaryDatabaseName">
            <summary>
            This determines whether we should use the PrimaryDatabaseName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.UseSecondaryDatabaseName">
            <summary>
            This determines whether we should use the SecondaryDatabaseName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.PresetDatabaseTemplateName">
            <summary>
            Used for when the customer wants one database template for all fail safe sets.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.PresetDatabaseTemplateUid">
            <summary>
            Used for when the customer wants one database template for all fail safe sets.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.MirroringWitnessServerNames">
            <summary>
            List of all of the witness servers that will be used for allocation on new fail safe sets (it will alternate)
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoStripe">
            <summary>
            During repair operations or when adding a database, the stripe class is
            used to determine where the BAK files go.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripe.#ctor">
            <summary>
            Once constructed, the class requires the DatabaseTemplateUid.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripe.#ctor(System.Guid)">
            <summary>
            Class requires the DatabaseTemplateUid for all work.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripe.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Initialize from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripe.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Initialize from sql data reader.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripe.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Register the Stripe. This method is called with Dtc already started at the
            collection level. All validation should be completed before you get to this step.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripe.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Converts the internal variables into an XML fragment. This is appended
            to the Xml document object to output to a file by the parent.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripe.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoStripe.IsInCollection">
            <summary>
            Indicates whether this object is part of a collection.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoStripeCollection">
            <summary>
            Collection class for databases
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.#ctor(System.Guid)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.IndexOf(System.String)">
            <summary>
            Returns the index of the first object of the given name.
            </summary>
            <returns>
            The 0-based index of the first object with the name.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.Contains(System.String)">
            <summary>
            Tests whether the collection contains an object of the given name.
            </summary>
            <returns>
            true if the collection contains an object identified by the name;
            false if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            required for ICollection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.Add(Microsoft.Webstore.Management.Wmo.WmoStripe)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.Remove(System.String)">
            <summary>
            Removes an object from the object collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.GetEnumerator">
            <summary>
            Gets the IEnumerator for this WmoStripeCollection.  This is meant to
            support the foreach statement.
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.Initialize">
            <summary>
            Execute WspGetStripe. This will return one result set consisting of all Stripes, 
            given the passed in parameters.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.Validate">
            <summary>
            Validates the databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.Clean">
            <summary>
            remove all elements
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.Count">
            <summary>
            count of objects in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.DatabaseTemplateUid">
            <summary>
            The parent.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.IsSynchronized">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.SyncRoot">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.WmoStripeEnumerator">
            <summary>
            This class implements the IEnumerator over a WmoNamedObjectCollection in support
            of the "foreach" keyword
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.WmoStripeEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.WmoStripeEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            Must be called before accessing the Current element.
            </summary>
            <returns>
            true if enumerator successfully advanced to next element;
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.WmoStripeEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDeployTemplateObjects">
            <summary>
            Definition of the WmoDeployTemplateObjects class.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployTemplateObjects.#ctor">
            <summary>
            Constructor for the WmoDeployTemplateObjects class.
            </summary>
            <remarks>Written by BradT</remarks>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployTemplateObjects.Initialize">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployTemplateObjects.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Loads the in-memory data from the Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployTemplateObjects.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployTemplateObjects.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployTemplateObjects.Accounts">
            <summary>
            The Security Accounts collection.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployTemplateObjects.SystemManifestUid">
            <summary>
            The Manifest Uid of the Webstore system manifest (WebstoreManifest)
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoJobDeploy">
            <summary>
            Class for job deployments
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoJobDeploy.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoJobDeploy.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoJobDeploy.Initialize(Microsoft.Webstore.Management.Wmo.WmoManifestJob)">
            <summary>
            Using the WmoManifestJob as a base, create the WmoJobDeploy object
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoJobDeploy.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoJobDeploy.DeploymentUid">
            <summary>
            The GUID for the Deployment in which owns this job.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoJobDeploy.ManifestUid">
            <summary>
            The GUID for the Manifest in which this job is registered
            This value is populated by the thread that creates this object.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoJobDeployCollection">
            <summary>
            Collection class for WmoJobDeploy
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoJobDeployCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoJobDeployCollection.InitializeFromManifest">
            <summary>
            Initialize from Manifest
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoJobDeployCollection.Add(Microsoft.Webstore.Management.Wmo.WmoJobDeploy)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoJobDeployCollection.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoJobDeployCollection.ValidateName(Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection)">
            <summary>
            Validates the Job Instance Name. Walk through every partition and
            combine the given job name with the database name. If it is to long,
            throw an error. At any time, any database can be promoted or
            demoted, causing the various jobs to be installed. This check will
            guarantee that we won't have jobs with names that would be
            truncated after a successful Setup.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoJobDeployCollection.ManifestUid">
            <summary>
            The GUID for the Manifest in which these jobs exist.
            This value is populated by the thread that creates this object.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoJobDeployCollection.DeploymentUid">
            <summary>
            The Uid of the Deployment that this collection belongs to
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoJobDeployCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoJobDeployCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoReplicationDistributionDeploy">
            <summary>
            Class to hold the default distribution settings for a deployment.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationDistributionDeploy.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationDistributionDeploy.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationDistributionDeploy.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Reads the XML node to initialize during Import.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationDistributionDeploy.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationDistributionDeploy.RegisterUpdate">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationDistributionDeploy.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationDistributionDeploy.DeploymentUid">
            <summary>
            The uid of the deployment
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationDistributionDeploy.DrainNumRetries">
            <summary>
            Drain No Of Retries
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationDistributionDeploy.DrainIntervalSecs">
            <summary>
            Drain Interval
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationDistributionDeploy.StaleAlertInterval">
            <summary>
            The Stale Alert Interval in seconds.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoReplicationPublicationDeploy">
            <summary>
            Class to hold the default Publication settings for a deployment.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationPublicationDeploy.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationPublicationDeploy.Initialize">
            <summary>
            Creates a WstConfig connection then calls Initialize(reader)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationPublicationDeploy.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
            NOTE: This inititilize has two incoming paths. You will need to change the sprocs
            WspGetReplPublicationDeploy and WspGetFailSafeSetReplPublicationDeploy if you wish
            to change this code.
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationPublicationDeploy.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoManifestPublication)">
            <summary>
            Initialize during Import 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationPublicationDeploy.Initialize(Microsoft.Webstore.Management.Wmo.WmoManifestPublication)">
            <summary>
            Initialize during Upgrade
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationPublicationDeploy.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationPublicationDeploy.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationPublicationDeploy.DeploymentUid">
            <summary>
            The Deployment Uid where this publication is registered.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationPublicationDeploy.ManifestUid">
            <summary>
            The Manifest Uid where this publication is registered.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationPublicationDeploy.ManifestPubName">
            <summary>
            The Manifest publication name where this publication is registered.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationPublicationDeploy.IsInteresting">
            <summary>
            Whether this object has been populated
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoSecurityAccount">
            <summary>
            Class for registered accounts
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSecurityAccount.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSecurityAccount.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSecurityAccount.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSecurityAccount.Register">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSecurityAccount.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSecurityAccount.UnRegisterRole(System.String)">
            <summary>
            Removes the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSecurityAccount.UnRegister">
            <summary>
            Removes the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSecurityAccount.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSecurityAccount.IsNT">
            <summary>
            Whether this account is an NT security account
            (if not, must be SQL Server security)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSecurityAccount.ManifestUid">
            <summary>
            Uid of the manifest of the security roles
            that this account belongs to
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSecurityAccount.SecurityRoles">
            <summary>
            Security roles to which this account belongs
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoSecurityAccountCollection">
            <summary>
            Collection class for WmoSecurityAccount
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSecurityAccountCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSecurityAccountCollection.Add(Microsoft.Webstore.Management.Wmo.WmoSecurityAccount)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSecurityAccountCollection.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSecurityAccountCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSecurityAccountCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSecurityAccountCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSecurityAccountCollection.ManifestUid">
            <summary>
            Manifest whose roles this account can belong to
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnvironment">
            <summary>
            Class for Environment
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnvironment.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnvironment.Initialize">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnvironment.Register">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoEnvironment.Name">
            <summary>
            Environment Name
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoEnvironment.Uid">
            <summary>
            Environment Uid
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoEnvironment.PollingIntervalClient">
            <summary>
            Cfg Setting: PollingIntervalClient
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoEnvironment.TicketExpirationInterval">
            <summary>
            Cfg Setting: TicketExpirationInterval
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoEnvironment.PollingOffsetClient">
            <summary>
            Cfg Setting: PollingOffsetClient
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoEnvironment.PollingOffsetService">
            <summary>
            Cfg Setting: PollingOffsetService
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoEnvironment.HistoryRetentionPeriod">
            <summary>
            Cfg Setting: HistoryRetentionPeriod
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoEnvironment.LatencyPollingInterval">
            <summary>
            Cfg Setting: LatencyPollingInterval
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoEnvironment.LatencyBucket0">
            <summary>
            Cfg Setting: LatencyBucket0
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoEnvironment.LatencyBucket1">
            <summary>
            Cfg Setting: LatencyBucket1
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoEnvironment.LatencyBucket2">
            <summary>
            Cfg Setting: LatencyBucket2
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoEnvironment.LatencyBucket3">
            <summary>
            Cfg Setting: LatencyBucket3
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoEnvironment.LockWaitInterval">
            <summary>
            Cfg Setting: LockWaitInterval
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoEnvironment.LockNumRetries">
            <summary>
            Cfg Setting: LockNumRetries
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoEnvironment.Ticket">
            <summary>
            Ticket
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifest">
            <summary>
            Top level site object
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifest.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifest.Initialize">
            <summary>
            Loads the in-memory data from the config dbs, deep initialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifest.Import(Microsoft.Webstore.Management.Wmo.WmoXml,System.Boolean)">
            <summary>
            Loads the in-memory data from the XML. The XML is assumed to
            be validated before this function is called.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifest.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Loads the in-memory data from the Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifest.InitializePublication(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Loads the in-memory data from the Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifest.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifest.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Boolean)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifest.ExportSource(System.String)">
            <summary>
            Reads from the in-memory data to create the source files associated with the objects.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifest.ExportGeneratedObjects(System.String)">
            <summary>
            Reads from the in-memory data to create the source files associated with the objects.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifest.ExportManifest(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement,System.Boolean)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifest.RegisterManifest(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Writes to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifest.Register">
            <summary>
            Writes the source and Crc to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifest.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifest.ValidateManifest">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifest.List(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder)">
            <summary>
            Exports the name of the Manifest, its version and Service Name
            along with all Deployments that use this Manifest.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifest.Drop">
            <summary>
            drop manifest from wstconfig
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifest.Name">
            <summary>
            name of the object
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifest.IsInCollection">
            <summary>
            whether this object is in a collection
            (set by the add/remove methods for collections
            determines whether the name can be set)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifest.Uid">
            <summary>
            Uid of the manifest.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifest.Version">
            <summary>
            Version of the manifest.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifest.PartitioningType">
            <summary>
            Partitioning option supported by this manifest
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifest.IsFileshareOnly">
            <summary>
            Whether this manifest is a Fileshare Only manifest
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifest.PartitioningTypeStr">
            <summary>
            get and set PartitioningType with string input/output
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifest.DataPartitionCount">
            <summary>
            Number of data partitions. Valid only for hash based partitioning.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifest.DataPartitionColumnName">
            <summary>
            Name of the column containing the data partition column in each partitioned table.
            Can be overridden at the table level.
            Only valid for hash based partitioning.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifest.IsNoExtraObjectValidation">
            <summary>
            Whether webstore gives warning for the objects that
            are in the database but are not registered.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifest.TypeOfSqlSecondaries">
            <summary>
            Type of secondaries that this manifest has
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifest.OldTypeOfSqlSecondaries">
            <summary>
            Type of secondaries that this manifest has
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifest.TypeOfSqlSecondariesStr">
            <summary>
            Type of secondaries as a string.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifest.MinSQLServerVersion">
            <summary>
            Minimum version of SQL Server required
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifest.Description">
            <summary>
            Other description of the manifest
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifest.Scripts">
            <summary>
            Collection of registered scripts.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifest.StoredProcedures">
            <summary>
            Collection of registered stored procedures.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifest.Functions">
            <summary>
            Collection of registered functions.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifest.Triggers">
            <summary>
            Collection of registered tables.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifest.Tables">
            <summary>
            Collection of registered tables.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifest.Jobs">
            <summary>
            Collection of registered jobs.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifest.SecurityRoles">
            <summary>
            Collection of registered security roles.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifest.FileGroups">
            <summary>
            Collection of registered file groups.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifest.Sources">
            <summary>
            Collection of registered source files.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifest.PublicationForSecondaries">
            <summary>
            publication registered for secondary dbs.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestCollection">
            <summary>
            Collection class for WmoManifest
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoManifestCollection.m_objects">
            <summary>
            Keep track of objects in collection using an ArrayList.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestCollection.IndexOf(System.Guid)">
            <summary>
            Returns the index of the first object of the given guid.
            </summary>
            <returns>
            The 0-based index of the first object with the guid.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestCollection.IndexOf(System.String,System.String)">
            <summary>
            Returns the index of the first object of the given name.
            </summary>
            <returns>
            The 0-based index of the first object with the name.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestCollection.IndexOf(System.String)">
            <summary>
            Returns the index of the manifest with the given name with the most recent
            version. If multiple manifests of this name exist with different service
            names, an exception is thrown.
            </summary>
            <returns>
            The 0-based index of the first object with the name.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestCollection.Contains(System.Guid)">
            <summary>
            Tests whether the collection contains an object of the given name.
            </summary>
            <returns>
            true if the collection contains an object identified by the name;
            false if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestCollection.Contains(System.String,System.String)">
            <summary>
            Tests whether the collection contains an object of the given name.
            </summary>
            <returns>
            true if the collection contains an object identified by the name;
            false if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            required for ICollection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestCollection.Add(Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Adds a manifest to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestCollection.Remove(System.String,System.String)">
            <summary>
            Removes a manifest from the object collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestCollection.GetEnumerator">
            <summary>
            Gets the IEnumerator for this WmoManifestCollection.  This is meant to
            support the foreach statement.
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestCollection.Initialize">
            <summary>
            Loads the in-memory data from the config dbs, shallow initialize
            only initializes simple member variables of manifests, no collections
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestCollection.List(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder)">
            <summary>
            Lists all Manifests and their deployments.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestCollection.Count">
            <summary>
            count of objects in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestCollection.Item(System.Guid)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestCollection.Item(System.String,System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestCollection.WebstoreManifest">
            <summary>
            The webstore internal manifest
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestCollection.IsSynchronized">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestCollection.SyncRoot">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestCollection.WmoManifestEnumerator">
            <summary>
            This class implements the IEnumerator over a WmoNamedObjectCollection in support
            of the "foreach" keyword
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestCollection.WmoManifestEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestCollection.WmoManifestEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            Must be called before accessing the Current element.
            </summary>
            <returns>
            true if enumerator successfully advanced to next element;
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestCollection.WmoManifestEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestArticle">
            <summary>
            Summary description for WmoManifestArticle.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestArticle.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Sequence:
            If the Article node under table exists
                If the Name attribute is supplied, use it.
                else use the table name for the article name.
            else use the table name for the article name.
            If the DELSproc name is supplied use it
            else use wsp_MSdelTableName
            If the INSSproc name is supplied use it
            else use wsp_MSinsTableName
            If the UPDSproc name is supplied use it
            else use wsp_MSupdTableName
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestArticle.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestArticle.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Writes to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestArticle.Validate">
            <summary>
            Validate object
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestArticle.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Reads from the in-memory data to create an XML file. 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestArticle.Name">
            <summary>
            Name of the article.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestArticle.PublicationName">
            <summary>
            name of the publication
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestArticle.ManifestUid">
            <summary>
            Guid of the Manifest
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestArticle.TableName">
            <summary>
            name of table
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestArticle.InsertSprocName">
            <summary>
            InsertSprocName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestArticle.InsertCallMethod">
            <summary>
            InsertCallMethod
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestArticle.InsertCallMethodStr">
            <summary>
            InsertCallMethod string
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestArticle.UpdateSprocName">
            <summary>
            UpdateSprocName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestArticle.UpdateCallMethod">
            <summary>
            UpdateCallMethod
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestArticle.UpdateCallMethodStr">
            <summary>
            UpdateCallMethod string
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestArticle.DeleteSprocName">
            <summary>
            DeleteSprocName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestArticle.DeleteCallMethod">
            <summary>
            DeleteCallMethod
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestArticle.DeleteCallMethodStr">
            <summary>
            DeleteCallMethod string
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestArticleCollection">
            <summary>
            Collection class for WmoManifestArticle
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestArticleCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestArticleCollection.Add(Microsoft.Webstore.Management.Wmo.WmoManifestArticle)">
            <summary>
            Adds a manifest to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestArticleCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNodeList,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Update this object with data from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestArticleCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Writes to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestArticleCollection.Validate">
            <summary>
            Validate each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestArticleCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Reads from the in-memory data to create an XML file. 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestArticleCollection.ManifestUid">
            <summary>
            ManifestUid
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestArticleCollection.PublicationName">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestArticleCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroup">
            <summary>
            Class for registered file groups
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroup.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroup.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Update the ConfigDBs with the latest changes to the file group.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroup.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Update this object with data from a ConfigDB.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroup.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Update this object with data from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroup.Initialize(System.String)">
            <summary>
            Default object
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroup.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file. 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroup.Validate">
            <summary>
            Validate that the in-memory state is self-consistent.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroup.Equals(Microsoft.Webstore.Management.Wmo.WmoManifestFileGroup)">
            <summary>
            Compares 2 file groups
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroup.Name">
            <summary>
            Name of the article.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroup.ManifestUid">
            <summary>
            UID of the manifest to which this object belongs
            set by the collection's Add method
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroup.IsDeleted">
            <summary>
            This FileGroup was deleted from a previous Manifest.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroup.IsAdded">
            <summary>
            This FileGroup was added since a previous Manifest.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroupCollection">
            <summary>
            Collection class for WmoManifestFileGroup
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroupCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroupCollection.Add(Microsoft.Webstore.Management.Wmo.WmoManifestFileGroup)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroupCollection.Remove(System.String)">
            <summary>
            Removes an object from the file group collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroupCollection.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Loads the in-memory data from the config dbs, deep initialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroupCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Update this object with data from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroupCollection.GetDelta(Microsoft.Webstore.Management.Wmo.WmoManifestFileGroupCollection,Microsoft.Webstore.Management.Wmo.WmoManifestFileGroupCollection)">
            <summary>
            Looks for differences in a FileGroup collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroupCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroupCollection.Validate(Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Validate each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroupCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file. 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroupCollection.Equals(Microsoft.Webstore.Management.Wmo.WmoManifestFileGroupCollection)">
            <summary>
            Compares 2 collections
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroupCollection.ManifestUid">
            <summary>
            the uid of the manifest that this collection belongs to
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroupCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroupCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestFunction">
            <summary>
            Class for registered functions
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestObject">
            <summary>
            Base class for all Wmo classes identified by a string
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestObject.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestObject.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Read the source from the XML.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestObject.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoEnum.SetupStep,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Read the source from the XML.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestObject.Initialize(Microsoft.Webstore.WstClient.WstDataReader,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Initialize with reader (deep initialize)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestObject.Validate">
            <summary>
            validate
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestObject.ExportSource(System.String)">
            <summary>
            Exports the source file associated with this object.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestObject.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestObject.Source">
            <summary>
            Source code string used to install the object
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestObject.Name">
            <summary>
            Name of the manifest object.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestObject.ManifestUid">
            <summary>
            UID of the manifest to which this object belongs
            set by the collection's Add method
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFunction.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Update the ConfigDBs with the latest changes to the function.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFunction.Initialize(Microsoft.Webstore.WstClient.WstDataReader,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Update this object with data from a ConfigDB.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFunction.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Update this object with data from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFunction.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFunction.Validate">
            <summary>
            Validate that the in-memory state is self-consistent.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestFunction.IsInstallOnSecondary">
            <summary>
            Whether this object should be installed on secondary databases
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestFunction.IsInstallOnSecondaryStr">
            <summary>
            Converts a string representatin into true/false, validates and allows for defaults.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestFunction.IsInstallOnPrimary">
            <summary>
            Whether this object should be installed on primary databases
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestFunction.IsInstallOnPrimaryStr">
            <summary>
            Converts a string representatin into true/false, validates and allows for defaults.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestFunctionCollection">
            <summary>
            Collection class for WmoManifestFunction
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection">
            <summary>
            Base class for collections of object identified by a string
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection.m_objects">
            <summary>
            Keep track of objects in collection using an ArrayList.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection.IndexOf(System.String)">
            <summary>
            Returns the index of the first object of the given name.
            </summary>
            <returns>
            The 0-based index of the first object with the name.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection.Contains(System.String)">
            <summary>
            Tests whether the collection contains an object of the given name.
            </summary>
            <returns>
            true if the collection contains an object identified by the name;
            false if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            required for ICollection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection.Add(Microsoft.Webstore.Management.Wmo.WmoManifestObject)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection.Remove(System.String)">
            <summary>
            Removes an object from the object collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection.ExportSource(System.String)">
            <summary>
            Exports the source file associated with each object in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection.GetEnumerator">
            <summary>
            Gets the IEnumerator for this WmoManifestObjectCollection.  This is meant to
            support the foreach statement.
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection.Initialize(Microsoft.Webstore.WstClient.WstDataReader,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Initialize all objects within the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Initialize all objects within the collection using Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection.GetDelta(Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection,Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection)">
            Generic for WmoManifestFunction
            WmoManifestFunctionCollection
            nextManifest.Functions
            manDelta.Functions
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection.Manifest">
            <summary>
            the uid of the manifest that this collection belongs to
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection.Count">
            <summary>
            count of objects in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection.IsSynchronized">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection.SyncRoot">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection.WmoManifestObjectEnumerator">
            <summary>
            This class implements the IEnumerator over a WmoManifestObjectCollection in support
            of the "foreach" keyword
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection.WmoManifestObjectEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection.WmoManifestObjectEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            Must be called before accessing the Current element.
            </summary>
            <returns>
            true if enumerator successfully advanced to next element;
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection.WmoManifestObjectEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFunctionCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFunctionCollection.Add(Microsoft.Webstore.Management.Wmo.WmoManifestFunction)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFunctionCollection.Remove(System.String)">
            <summary>
            Removes an object from the function collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFunctionCollection.Initialize(Microsoft.Webstore.WstClient.WstDataReader,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Loads the in-memory data from the config dbs, deep initialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFunctionCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Loads the in-memory data from Xml, deep initialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFunctionCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFunctionCollection.Validate">
            <summary>
            Validate each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFunctionCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestFunctionCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestFunctionCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestJob">
            <summary>
            Class for registered jobs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestJob.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Update the ConfigDBs with the latest changes to the job.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestJob.Initialize(Microsoft.Webstore.WstClient.WstDataReader,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Update this object with data from a ConfigDB.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestJob.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Update this object with data from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestJob.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestJob.Validate">
            <summary>
            Validate that the in-memory state is self-consistent.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestJob.Name">
            <summary>
            Name of the manifest object.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestJob.IsInstallOnSecondary">
            <summary>
            Whether this job should be installed on secondary databases
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestJob.IsInstallOnSecondaryStr">
            <summary>
            Converts a string representatin into true/false, validates and allows for defaults.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestJob.IsInstallOnPrimary">
            <summary>
            Whether this job should be installed on primary databases
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestJob.IsInstallOnPrimaryStr">
            <summary>
            Converts a string representatin into true/false, validates and allows for defaults.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestJobCollection">
            <summary>
            Collection class for WmoManfiestJob
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestJobCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestJobCollection.Add(Microsoft.Webstore.Management.Wmo.WmoManifestJob)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestJobCollection.Remove(System.String)">
            <summary>
            Removes an object from the job collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestJobCollection.Initialize(Microsoft.Webstore.WstClient.WstDataReader,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Loads the in-memory data from the config dbs, deep initialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestJobCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Loads the in-memory data from Xml, deep initialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestJobCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestJobCollection.Validate">
            <summary>
            Validate each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestJobCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestJobCollection.Equals(Microsoft.Webstore.Management.Wmo.WmoManifestJobCollection)">
            <summary>
            Compares 2 collections
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestJobCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestJobCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestPublication">
            <summary>
            Class for registered Publications
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestPublication.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Update the ConfigDBs with the latest changes to the function.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestPublication.Initialize(Microsoft.Webstore.WstClient.WstDataReader,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Update this object with data from a ConfigDB.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestPublication.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Update this object with data from Xml
            Replication must be registered, even for Manifests that do not use SQL
            replication. This is to support AddPartition and MoveData.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestPublication.GenerateReplicationStoredProcedures">
            <summary>
            Generate the replication stored procedures for the registered tables.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestPublication.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestPublication.Validate">
            <summary>
            Validate that the in-memory state is self-consistent.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestPublication.Equals(Microsoft.Webstore.Management.Wmo.WmoManifestPublication)">
            <summary>
            Compares 2 collections
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestPublication.PublicationType">
            <summary>
            type of publication
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestPublication.PublicationTypeStr">
            <summary>
            type of publication, as string
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestPublication.MMChangeDateTimeColumnName">
            <summary>
            ChangeDateTime column name (multi master)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestPublication.MMNeedsReplicationColumnName">
            <summary>
            NeedsReplication column name (multi master)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestPublication.Articles">
            <summary>
            collection of articles
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestPublication.Name">
            <summary>
            name of publication
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestScript">
            <summary>
            Class for registered scripts
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestScript.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Update the ConfigDBs with the latest changes to the script.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestScript.Initialize(Microsoft.Webstore.WstClient.WstDataReader,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Update this object with data from a ConfigDB.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestScript.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Update this object with data from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestScript.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestScript.Validate">
            <summary>
            Validate that the in-memory state is self-consistent.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestScript.IsInstallOnSecondary">
            <summary>
            Whether this object should be installed on secondary databases
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestScript.IsInstallOnSecondaryStr">
            <summary>
            Converts a string representatin into true/false, validates and allows for defaults.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestScript.IsInstallOnPrimary">
            <summary>
            Whether this object should be installed on primary databases
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestScript.IsInstallOnPrimaryStr">
            <summary>
            Converts a string representatin into true/false, validates and allows for defaults.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestScript.IsUpgradeOnly">
            <summary>
            Whether this object is only run during deployment upgrade
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestScript.IsDowngradeOnly">
            <summary>
            Whether this object is only run during deployment downgrade
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestScript.IsUpgradeOnlyStr">
            <summary>
            Converts a string representatin into true/false, validates and allows for defaults.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestScript.IsDowngradeOnlyStr">
            <summary>
            Converts a string representatin into true/false, validates and allows for defaults.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestScriptCollection">
            <summary>
            Collection of WmoManifestScript objects.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestScriptCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestScriptCollection.Add(Microsoft.Webstore.Management.Wmo.WmoManifestScript)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestScriptCollection.Remove(System.String)">
            <summary>
            Removes an object from the script collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestScriptCollection.Initialize(Microsoft.Webstore.WstClient.WstDataReader,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Loads the in-memory data from the config dbs, deep initialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestScriptCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Loads the in-memory data from Xml, deep initialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestScriptCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestScriptCollection.Validate">
            <summary>
            Validate each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestScriptCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestScriptCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestScriptCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole">
            <summary>
            Class for registered security roles
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Update the ConfigDBs with the latest changes to the Security Role.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.Initialize(Microsoft.Webstore.WstClient.WstDataReader,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Update this object with data from a ConfigDB.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Update this object with data from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.ExportSprocPermissions(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.ExportFunctionPermissions(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.ExportTablePermissions(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.ExportViewPermissions(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.Validate">
            <summary>
            Validate that the in-memory state is self-consistent.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.ToString">
            <summary>
            override to string method
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.SprocGrantMaskByte">
            <summary>
            need to be rewritten
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.FunctionGrantMaskByte">
            <summary>
            need to be rewritten
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.TableGrantMaskByte">
            <summary>
            need to be rewritten
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.ViewGrantMaskByte">
            <summary>
            need to be rewritten
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.HasDeleteOnTables">
            <summary>
            Whether to grant Delete permissions on this role
            for all registered tables
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.HasUpdateOnTables">
            <summary>
            Whether to grant Update permissions on this role
            for all registered tables
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.HasInsertOnTables">
            <summary>
            Whether to grant Insert permissions on this role
            for all registered tables
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.HasSelectOnTables">
            <summary>
            Whether to grant Select permissions on this role
            for all registered tables
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.HasDeleteOnViews">
            <summary>
            Whether to grant Delete permissions on this role
            for all registered views
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.HasUpdateOnViews">
            <summary>
            Whether to grant Update permissions on this role
            for all registered views
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.HasInsertOnViews">
            <summary>
            Whether to grant Insert permissions on this role
            for all registered views
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.HasSelectOnViews">
            <summary>
            Whether to grant Select permissions on this role
            for all registered views
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.HasExecuteOnFunctions">
            <summary>
            Whether to grant Execute permissions on this role
            for all registered functions
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.HasExecuteOnSprocs">
            <summary>
            Whether to grant Execute permissions on this role
            for all registered stored procedures
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.HasDeleteOnTablesStr">
            <summary>
            Whether to grant Delete permissions on this role
            for all registered tables
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.HasUpdateOnTablesStr">
            <summary>
            Whether to grant Update permissions on this role
            for all registered tables
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.HasInsertOnTablesStr">
            <summary>
            Whether to grant Insert permissions on this role
            for all registered tables
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.HasSelectOnTablesStr">
            <summary>
            Whether to grant Select permissions on this role
            for all registered tables
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.HasDeleteOnViewsStr">
            <summary>
            Whether to grant Delete permissions on this role
            for all registered views
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.HasUpdateOnViewsStr">
            <summary>
            Whether to grant Update permissions on this role
            for all registered views
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.HasInsertOnViewsStr">
            <summary>
            Whether to grant Insert permissions on this role
            for all registered views
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.HasSelectOnViewsStr">
            <summary>
            Whether to grant Select permissions on this role
            for all registered views
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.HasExecuteOnFunctionsStr">
            <summary>
            Whether to grant Execute permissions on this role
            for all registered functions
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.HasExecuteOnSprocsStr">
            <summary>
            Whether to grant Execute permissions on this role
            for all registered stored procedures
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRoleCollection">
            <summary>
            Collection class for WmoManifestSecurityRole
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRoleCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRoleCollection.Add(Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRoleCollection.Remove(System.String)">
            <summary>
            Removes an object from the Security Role collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRoleCollection.Initialize(Microsoft.Webstore.WstClient.WstDataReader,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Loads the in-memory data from the config dbs, deep initialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRoleCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Loads the in-memory data from Xml, deep initialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRoleCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file. 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRoleCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRoleCollection.Validate">
            <summary>
            Validate each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRoleCollection.Equals(Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRoleCollection)">
            <summary>
            Compares 2 collections
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRoleCollection.ToString">
            <summary>
            Converts object to string for printing out
            </summary>
            <returns>string describing the object</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRoleCollection.GetDelta(Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection,Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection)">
            <summary>
            Gets the delta between the two manifests.  Since this is Security roles, we get all of the roles for the new manifest, and identify the new ones
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRoleCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRoleCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestSource">
            <summary>
            A class to hold the source code for a manifest object
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSource.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSource.Initialize(Microsoft.Webstore.WstClient.WstDataReader,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Update this object with data from a ConfigDB.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSource.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoEnum.SetupStep,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Update this object with data from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSource.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs,System.Guid)">
            <summary>
            Update the ConfigDBs with the latest changes to the script.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSource.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement,System.Boolean)">
            <summary>
            export to xml file
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSource.ExportSource(System.String)">
            <summary>
            Exports the source file associated with this object.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSource.Name">
            <summary>
            Name of the manifest object.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSource.Uid">
            <summary>
            Guid identifying the source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSource.Source">
            <summary>
            The SQL source code for the Manifest objects.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSource.SourceBytes">
            <summary>
            the source in bytes
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSource.Crc">
            <summary>
            Crc value for the stored source code string.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSource.ModDateTime">
            <summary>
            Modification date/time on the incoming file, or else the
            date/time that the XML was imported.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSource.FileName">
            <summary>
            The file name (SourceFile) for the SQL code in the Manifest.
            This file is always in a relative path to the Manifest XML file.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSource.SetupStep">
            <summary>
            setup step in which to run the object source
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSource.SetupStepStr">
            <summary>
            Convert a string to a SetupStep enum
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSource.InstallOrder">
            <summary>
            Ordering information within the setup step for running object source
            Rule 1: an object which does not depend on any other object within its
            setup step would have install order 1.
            Rule 2: an object which depends on other objects within its setup step
            will have install order of one more than the maximum install order of
            the objects it is dependant on.
            Example:
            Customers is table which does not have foreign key dependencies
            on other tables. It will have an install order of 1.
            Orders is another table which has no foreign key dependencies on other tables.
            It also has an install order of 1.
            CustomerOrders is a table which has foreign key dependencies on both the Customers
            and Orders tables. It has an install order of 2.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestSourceCollection">
            <summary>
            Collection class for WmoManifestSource
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSourceCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSourceCollection.Add(Microsoft.Webstore.Management.Wmo.WmoManifestSource)">
            <summary>
            Adds a manifest to the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSourceCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSourceCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedure">
            <summary>
            Class for registered stored procedures
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedure.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Update the ConfigDBs with the latest changes to the stored procedure.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedure.Initialize(Microsoft.Webstore.WstClient.WstDataReader,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Update this object with data from a ConfigDB.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedure.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Update this object with data from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedure.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedure.Validate">
            <summary>
            Validate that the in-memory state is self-consistent.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedure.IsGenerated">
            <summary>
            Whether this trigger is generated by webstore
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedure.IsGeneratedStr">
            <summary>
            String version of IsGenerated
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedure.IsInstallOnSecondary">
            <summary>
            Whether this job should be installed on secondary databases
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedure.IsInstallOnSecondaryStr">
            <summary>
            Converts a string representatin into true/false, validates and allows for defaults.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedure.IsInstallOnPrimary">
            <summary>
            Whether this job should be installed on primary databases
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedure.IsInstallOnPrimaryStr">
            <summary>
            Converts a string representatin into true/false, validates and allows for defaults.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedureCollection">
            <summary>
            Collection class for WmoManifestStoredProcedure
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedureCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedureCollection.Add(Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedure)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedureCollection.Remove(System.String)">
            <summary>
            Removes an object from the stored procedure collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedureCollection.Initialize(Microsoft.Webstore.WstClient.WstDataReader,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Loads the in-memory data from the config dbs, deep initialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedureCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Loads the in-memory data from Xml, deep initialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedureCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedureCollection.ExportSource(System.String)">
            <summary>
            Exports the source file associated with each object in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedureCollection.ExportGeneratedObjects(System.String)">
            <summary>
            Reads from the in-memory data to create the source files associated with the objects.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedureCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedureCollection.Validate">
            <summary>
            Validate each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedureCollection.RegisterGenerated(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedureCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedureCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestTable">
            <summary>
            Class for registered tables
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTable.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Update the ConfigDBs with the latest changes to the table.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTable.Initialize(Microsoft.Webstore.WstClient.WstDataReader,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Update this object with data from a ConfigDB.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTable.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Update this object with data from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTable.InitializeTable(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Update this object with data from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTable.InitializeView(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Update this object with data from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTable.ExportTable(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file. 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTable.ExportView(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file. 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTable.Validate">
            <summary>
            Validate that the in-memory state is self-consistent.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTable.ToString">
            <summary>
            override to string method
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestTable.Name">
            <summary>
            Name of the manifest object.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestTable.DataPartitionColumn">
            <summary>
            The name of the column holding the hash value.
            Defaults to the name set for the manifest if not specified.
            Required only for partitioned table in hash based partitioned manifests.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestTable.IsNonPartitioned">
            <summary>
            whether this table is non-partitioned
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestTable.IsPartitionedStr">
            <summary>
            String version of IsNonPartitioned. Currently the Xml has this as IsPartitioned. So this reverses the value for the IsNonPartitioned property.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestTable.TableType">
            <summary>
            which type of object this is
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestTable.TableTypeStr">
            <summary>
            which type of object this is
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestTableCollection">
            <summary>
            Collection class for WmoManifestTable
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTableCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTableCollection.Add(Microsoft.Webstore.Management.Wmo.WmoManifestTable)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTableCollection.Remove(System.String)">
            <summary>
            Removes an object from the table collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTableCollection.Initialize(Microsoft.Webstore.WstClient.WstDataReader,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Loads the in-memory data from the config dbs, deep initialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTableCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Loads the in-memory data from Xml, deep initialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTableCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file. 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTableCollection.ExportTables(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file. 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTableCollection.ExportViews(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file. 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTableCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTableCollection.Validate">
            <summary>
            Validate each object in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestTableCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestTableCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestTrigger">
            <summary>
            class for SQLTrigger
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTrigger.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Update the ConfigDBs with the latest changes to the table.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTrigger.Initialize(Microsoft.Webstore.WstClient.WstDataReader,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Update this object with data from a ConfigDB.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTrigger.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Update this object with data from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTrigger.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTrigger.Validate">
            <summary>
            Validate that the in-memory state is self-consistent.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestTriggerCollection">
            <summary>
            class for collection of triggers
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTriggerCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTriggerCollection.Add(Microsoft.Webstore.Management.Wmo.WmoManifestTrigger)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTriggerCollection.Remove(System.String)">
            <summary>
            Removes an object from the trigger collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTriggerCollection.Initialize(Microsoft.Webstore.WstClient.WstDataReader,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Loads the in-memory data from the config dbs, deep initialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTriggerCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Loads the in-memory data from Xml, deep initialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTriggerCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTriggerCollection.ExportSource(System.String)">
            <summary>
            Exports the source file associated with each object in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTriggerCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTriggerCollection.Validate">
            <summary>
            Validate each object in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestTriggerCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestTriggerCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoConfigManager">
            <summary>
            Summary description for WmoConfigManager.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager">
            <summary>
            Summary description for WmoFailSafeSetDatabaseManager.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.IsOperationAllowedForTopology(System.String,System.Boolean)">
            <summary>
            Gets the valid statuses for a given operation
            </summary>
            <param name="op"></param>
            <param name="throwException"></param>
            <returns>bool</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.GetTopology">
            <summary>
            Gets the currently employed toplogy
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.GetValidOperations(System.String)">
            <summary>
            Gets the valid statuses (in a comma separated string) for a given topology
            </summary>
            <param name="topology"></param>
            <returns>string</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.IsOperationAllowed(Microsoft.Webstore.Management.Wmo.WmoDatabase,System.String,System.Boolean)">
            <summary>
            Gets the valid statuses for a given operation
            </summary>
            <param name="db"></param>
            <param name="op"></param>
            <param name="throwException"></param>
            <returns>bool</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.GetValidStatuses(System.String)">
            <summary>
            Gets the valid statuses for a given operation
            </summary>
            <param name="operation"></param>
            <returns>string</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.PrepareForDeploy(System.String,System.String)">
            <summary>
            Preparation steps for Deploy.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.UpgradePreCheck(System.Boolean)">
            <summary>
            Upgrade precheck
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.PrepareForUpOrDowngrade(System.Int16)">
            <summary>
            Preparation steps for upgrade.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.AfterUpgrade(System.Int16)">
            <summary>
            After Upgrade
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.DeployEmptySecondary(System.String,System.String,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus)">
            <summary>
            Deploys a secondary database during initial deployment of the failsafe set.
            Exception if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.DeploySecondary(System.String,System.String,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus,System.Boolean)">
            <summary>
            Deploys a secondary database for all commands except initial deployment
            of the failsafe set. 
            Used for repairing a failed secondary.
            Exception if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.PrepareForRepair(System.String,System.String)">
            <summary>
            Preparation steps for Repair.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.Repair(System.String,System.String,System.Boolean)">
            <summary>
            Repairs a database that has been Marked as NeedsRepair.
            Changes Status of the database to Offline when finished.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.PrepareForOffline(System.String,System.String)">
            <summary>
            Preparation steps for Mark Offline.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.PrepareForForceOffline(System.String,System.String)">
            <summary>
            Preparation steps for Mark Offline.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.MarkOffline(System.String,System.String)">
            <summary>
            Does what is required for marking a database offline.
            Does nothing if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.ForceMarkOffline(System.String,System.String)">
            <summary>
            Does what is required for marking a database offline.
            Does nothing if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.MarkNeedsRepair(System.String,System.String,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus)">
            <summary>
            Does what is required for marking a database Needs Repair.
            Does nothing if the database listed is not in this.Databases.
            NOTE: called inside a try-catch block which swallows any exceptions thrown.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.PrepareForOnline(System.String,System.String)">
            <summary>
            Preparation steps for Mark Online.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.MarkOnline(System.String,System.String)">
            <summary>
            Does what is required for marking a database online.
            Does nothing if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.PrepareForStandby(System.String,System.String)">
            <summary>
            Preparation steps for Mark Standby.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.MarkStandby(System.String,System.String)">
            <summary>
            Does what is required by replication/logshipping for marking
            a database standby.
            Does nothing if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.Promote(System.String,System.String)">
            <summary>
            Does what is required for promoting a database.
            Exception if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.Demote(System.String,System.String,System.Boolean)">
            <summary>
            Does what is required for demoting a database.
            Exception if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.PrepareForDemote(System.String,System.String)">
            <summary>
            Preparation steps for Demote.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.AfterDemote(System.String,System.String)">
            <summary>
            AfterDemote
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.PrepareForPromote(System.String,System.String)">
            <summary>
            Preparation steps for Promote.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.AfterPromote(System.String,System.String)">
            <summary>
            AfterPromote
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.AfterRepair(System.String,System.String,System.Boolean)">
            <summary>
            AfterPromote
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.SetupRepl(System.String,System.String)">
            <summary>
            Setup replication at database level
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.DropRepl(System.String,System.String)">
            <summary>
            Drop replication from database
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.IsSqlAgentRunning(System.String)">
            <summary>
            check if sql server agent is running
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.ForceRepair(System.String,System.String)">
            <summary>
            Set up whatever is needed to take a populated database to Offline state.
            Exception if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.ChangeStatusInConfigDB(Microsoft.Webstore.Management.Wmo.WmoDatabase,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus,System.String)">
            <summary>
            Change status in the config db
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.ChangeStatusInConfigDB(Microsoft.Webstore.Management.Wmo.WmoDatabase,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus)">
            <summary>
            Change status in the config db
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.ChangeStatusInConfigDBLocked(Microsoft.Webstore.Management.Wmo.WmoDatabase,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus)">
            <summary>
            Change status in the config db
            THIS FUNCTION must be called with a ticket lock already in place.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.ChangeConfigDBPromote(Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            Changes the config db to demote this database
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.ChangeConfigDBDemote(Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            Changes the config db to demote this database
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.ChangeConfigDBDemoteLocked(Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            Changes the config db to demote this database
            THIS FUNCTION must be called with a ticket lock already in place.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.ChangeConfigDBOneStepPromoteDemote(Microsoft.Webstore.Management.Wmo.WmoDatabase,Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            Changes the config db to demote this database
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.ChangeConfigDBOneStepPromoteDemoteLocked(Microsoft.Webstore.Management.Wmo.WmoDatabase,Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            Changes the config db to demote this database
            THIS FUNCTION must be called with a ticket lock already in place.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.Initialize">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.DeploymentUid">
            <summary>
            the collection of databases this manager deals with
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.Databases">
            <summary>
            the collection of databases this manager deals with
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.PrimaryDB">
            <summary>
            The primary database (null if none)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoConfigManager.MarkOnline(System.String,System.String)">
            <summary>
            Same as WriteAllCopiesManager
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoConfigManager.DeploySecondary(System.String,System.String,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus,System.Boolean)">
            <summary>
            Deploys a new secondary database. Also used for repairing a failed secondary.
            Exception if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoConfigManager.Repair(System.String,System.String,System.Boolean)">
            <summary>
            Repair only marks the database Offline. The actually repair
            process will take place in the MarkOnline code.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoConfigManager.UpgradePreCheck(System.Boolean)">
            <summary>
            Upgrade should not be performed for WstConfig database. Use the special upgrader. 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoConfigManager.FindLatestSecondaryFromString(System.String)">
            <summary>
            Find latest secondary for the config Fss 
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDistributionDatabaseManager">
            <summary>
            Class for distribution databases
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDistributionDatabaseManager.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDistributionDatabaseManager.PublishingServer">
            <summary>
            publishing server
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDistributionDatabaseManager.PublishingServerName">
            <summary>
            publishing server name
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDistributionDatabaseManager.DistributionServer">
            <summary>
            distribution server
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDistributionDatabaseManager.DistribDB">
            <summary>
            whether this object has been initialized
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoJobInstance">
            <summary>
            Class for job instance
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoJobInstance.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoJobInstance.InitInstance(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Given a Job Name, Database Uid, and Data Server Uid, populate this object.
            The data comes from the JobDeploy table and then the Instance Name is
            generated by prepending the Database name to the JobName.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoJobInstance.JobInstanceName">
            <summary>
            The instance name used to deploy the job. This name is typically
            the Job Name decorated with the database name.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoJobInstance.DeploymentUid">
            <summary>
            The GUID of the Deployment for this job instance.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoJobInstance.SqlServerName">
            <summary>
            SqlServerName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoJobInstance.DatabaseName">
            <summary>
            DatabaseName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoJobInstance.JobName">
            <summary>
            JobName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoJobInstance.IsInstallOnPrimary">
            <summary>
            A flag used to indicate if the job was dropped to an existing application database.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoJobInstance.IsInstallOnSecondary">
            <summary>
            A flag used to indicate if the job was Added to an existing application database.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoJobInstanceCollection">
            <summary>
            Collection class for WmoJobInstance
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoJobInstanceCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoJobInstanceCollection.Add(Microsoft.Webstore.Management.Wmo.WmoJobInstance)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoJobInstanceCollection.InitInstance(System.Boolean)">
            <summary>
            Initialize JobInstanceCollection from JobDeploy.
            Pre-requisite: DeploymentUid, SqlServerName, DatabaseName must
            be populated before this is called.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoJobInstanceCollection.DeploymentUid">
            <summary>
            The Uid of the Deployment that this collection belongs to
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoJobInstanceCollection.SqlServerName">
            <summary>
            This collection of Job Instances is for a single Server/Database.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoJobInstanceCollection.DatabaseName">
            <summary>
            This collection of Job Instances is for a single Server/Database.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoJobInstanceCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoJobInstanceCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoMirroringManager">
            <summary>
            WmoMirroringManager is responsible to setup/tear down mirroring, process with
            mirroring topology promote/demote, online/offline and needsrepair/repair.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMirroringManager.PrepareForOffline(System.String,System.String)">
            <summary>
            Preparation steps for Mark Offline.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMirroringManager.SqlAgentDatabase">
            <summary>
            WmoSqlAgentDatabase object
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoMoveDataManager">
            <summary>
            Summary description for WmoMoveDataManager.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMoveDataManager.CreateBcpJobs">
            <summary>
            Create jobs at source databases
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMoveDataManager.WaitForBcpOut">
             <summary>
             idf status  ==  BcpJobCreated
             {
             1) Start the JOb
             2) Ping Status for BcpOutDone (while loop) Sleep 30s
             Note: you can get each table total rows!
             3) Update Dst DS BcpInfo (BcpTotal)
             4) Update Config BcpOutDone
             5) copy files
             5) wait for bcpin
            }
             </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMoveDataManager.CopyBcpFiles(Microsoft.Webstore.Management.Wmo.WmoMoveDataManager.SqlInfo,Microsoft.Webstore.Management.Wmo.WmoMoveDataManager.PartitionMapInfo)">
             <summary>
              // idf status  ==  BcpOutDone
            {
             1) Copy Bcp files to destination
             2) Update Config BcpFilesCopied
             3) Update DstDs BcpFilesCopied
            }
             </summary>
             <param name="oldInfo"></param>
             <param name="mapInfo"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMoveDataManager.WaitForBcpIn">
            <summary>
            if status  ==  BcpFilesCopied
            {
            1) Start the JOb dst
            2) Ping Status for BcpInDone (while loop) Sleep 30s
            3) Update Config BcpInDone
            }
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMoveDataManager.StartReplication">
            <summary>
            idf status  ==  BcpFilesCopied
            {
            3) Update Config BcpDone
            }
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMoveDataManager.DrainAndMap">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMoveDataManager.NumThreads">
            <summary>
            NumThreads
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMoveDataManager.BatchSize">
            <summary>
            BatchSize
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMoveDataManager.Interval">
            <summary>
            Interval
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoMultiMasterMgr">
            <summary>
            Summary description for WmoSingleMasterMgr.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoReplicationMgr">
            <summary>
            Summary description for WmoSingleMasterMgr.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationMgr.PrepareForPromote(System.String,System.String)">
            <summary>
            Preparation steps for Promote.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationMgr.PrepareForOnline(System.String,System.String)">
            <summary>
            Preparation steps for Mark Online.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationMgr.DrainReplication(Microsoft.Webstore.Management.Wmo.WmoDatabase,Microsoft.Webstore.Management.Wmo.WmoDatabase,System.Boolean)">
            <summary>
            drain replication between the specified pub and sub databases
            </summary>
            <param name="PublishingDB"></param>
            <param name="SubscribingDB"></param>
            <param name="IsRestartJob">Whether to attempt restarting stopped jobs in order to drain</param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationMgr.DrainReplication(Microsoft.Webstore.Management.Wmo.WmoDatabase,Microsoft.Webstore.Management.Wmo.WmoDistributionDatabaseManager,Microsoft.Webstore.Management.Wmo.WmoDatabase,System.DateTime,System.Boolean)">
            <summary>
            Finish draining replication between pub and sub databses with given changedatetime marker
            ie. marker already put into source database
            </summary>
            <param name="PublishingDB"></param>
            <param name="DistribDBManager"></param>
            <param name="SubscribingDB"></param>
            <param name="ChangeDateTime"></param>
            <param name="IsRestartJob">Whether to attempt restarting stopped jobs in order to drain</param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationMgr.DrainReplication(Microsoft.Webstore.Management.Wmo.WmoDatabase,Microsoft.Webstore.Management.Wmo.WmoDistributionDatabaseManager,Microsoft.Webstore.Management.Wmo.WmoDatabase,System.Int32,System.Int32,System.DateTime,System.Boolean)">
            <summary>
            Finish draining replication between pub and sub databses with given changedatetime marker
            ie. marker already put into source database
            </summary>
            <param name="PublishingDB"></param>
            <param name="DistribDBManager"></param>
            <param name="SubscribingDB"></param>
            <param name="DrainIntervalSecs"></param>
            <param name="DrainNumRetries"></param>
            <param name="ChangeDateTime"></param>
            <param name="IsRestartJob">Whether to attempt restarting stopped jobs in order to drain</param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationMgr.DrainReplication(Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager,Microsoft.Webstore.Management.Wmo.WmoDatabase,Microsoft.Webstore.Management.Wmo.WmoDatabase,System.Int32,System.Int32,System.DateTime,System.Boolean)">
            <summary>
            Check for marker on the subscriber side
            </summary>
            <param name="fssManager"></param>
            <param name="PubDatabase"></param>
            <param name="SubDatabase"></param>
            <param name="DrainIntervalSecs"></param>
            <param name="DrainNumRetries"></param>
            <param name="ChangeDateTime"></param>
            <param name="IsRestartJob">Whether to attempt restarting stopped jobs in order to drain</param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationMgr.PauseReplicationOutgoing(Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            Pause all out going replications from publishing DB
            Both logreader and distribution jobs are stopped
            </summary>
            <param name="publishingDB"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationMgr.PauseLogReader(Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            Pause log reader job of publishingDB
            </summary>
            <param name="publishingDB"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationMgr.PauseDistribution(Microsoft.Webstore.Management.Wmo.WmoDatabase,Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            pause distribution job from pub to sub databases
            </summary>
            <param name="publishingDB"></param>
            <param name="subscribingDB"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationMgr.UpdateSqlFailSafeSetSavedState(System.Int16)">
            <summary>
            Set the SavedState column.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationMgr.GetSqlFailSafeSetSavedState(System.Int16,System.Guid@,System.DateTime@)">
            <summary>
            Fetch saved state information
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMultiMasterMgr.DeployEmptySecondary(System.String,System.String,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus)">
            <summary>
            Deploys a secondary database during initial deployment of the failsafe set.
            Exception if the database listed is not in this.Databases.
            NOTE: does not do backup/restore of primary
            NOTE: assumes that there is no activity on the primary during the procedure.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMultiMasterMgr.Repair(System.String,System.String,System.Boolean)">
            <summary>
            Repairs a secondary database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMultiMasterMgr.MarkOffline(System.String,System.String)">
            <summary>
            Does what is required for marking a database offline.
            Does nothing if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMultiMasterMgr.ForceRepair(System.String,System.String)">
            <summary>
            Set up whatever is needed to take a populated database to Offline state.
            Exception if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMultiMasterMgr.MarkNeedsRepair(System.String,System.String,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus)">
            <summary>
            Does what is required for marking a database needs repair.
            Does nothing if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMultiMasterMgr.MarkOnline(System.String,System.String)">
            <summary>
            Does what is required for marking a database online.
            Does nothing if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMultiMasterMgr.MarkStandby(System.String,System.String)">
            <summary>
            Does what is required by replication for marking a database as a StandBy.
            Does nothing if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMultiMasterMgr.Promote(System.String,System.String)">
            <summary>
            Does what is required for promoting a database.
            Exception if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMultiMasterMgr.Demote(System.String,System.String,System.Boolean)">
            <summary>
            Does what is required for demoting a database.
            Exception if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMultiMasterMgr.PrepareForUpOrDowngrade(System.Int16)">
            <summary>
            For multmaster major schema upgrade, save the current state, demote the FSS and drain
            and drop replication.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMultiMasterMgr.AfterUpgrade(System.Int16)">
            <summary>
            For multmaster major schema upgrade, after upgrade is complete, reset up replication,
            then restore the saved state. Synchronise the various databases between each one by
            using the saved date in the MMDropReplication column as a starting point.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMultiMasterMgr.DeploySecondary(System.String,System.String,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus,System.Boolean)">
            <summary>
            Deploys a new secondary database. Also used for repairing a failed secondary.
            Exception if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMultiMasterMgr.UpdateSqlFailSafeSetMMDropReplication(System.Int16,System.DateTime)">
            <summary>
            Set the calue of the MMDropReplication column in the SqlFailSafeSet table.
            This code path is being used for Deployment Upgrade and for MoveData.
            In the case of Deployment Upgrade, replication is dropped at the start of the upgrade.
            The datetime saved in this column is used to syncronize any data items that were
            added or updated since replication was dropped.
            In the case of MoveData, the datetime is used to indicate when MoveData is started so
            that all data is syncronized for the new Sql FSS primaries to the replicas.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMultiMasterMgr.SetupRepl(System.String,System.String)">
            <summary>
            Setup replication.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMultiMasterMgr.DropRepl(System.String,System.String)">
            <summary>
            Drop replication.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoNoSecondaryManager">
            <summary>
            Summary description for WmoNoSecondaryManager.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNoSecondaryManager.DeploySecondary(System.String,System.String,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus,System.Boolean)">
            <summary>
            Detect errors
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNoSecondaryManager.Repair(System.String,System.String,System.Boolean)">
            <summary>
            Detect errors
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNoSecondaryManager.UpgradePreCheck(System.Boolean)">
            <summary>
            Topology upgrade is not supported for this topology type. 
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoReplHelper">
            <summary>
            Class for distribution databases
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplHelper.GetPublication(Microsoft.Webstore.Management.Wmo.WmoEnum.PublicationType,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            publication name
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoSingleMasterMgr">
            <summary>
            Summary description for WmoSingleMasterMgr.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSingleMasterMgr.DeployEmptySecondary(System.String,System.String,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus)">
            <summary>
            Deploys a secondary database during initial deployment of the failsafe set.
            Exception if the database listed is not in this.Databases.
            NOTE: does not do backup/restore of primary
            NOTE: assumes that there is no activity on the primary during the procedure.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSingleMasterMgr.Repair(System.String,System.String,System.Boolean)">
            <summary>
            Repairs a secondary database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSingleMasterMgr.MarkOffline(System.String,System.String)">
            <summary>
            Does what is required for marking  a database offline.
            Does nothing if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSingleMasterMgr.ForceRepair(System.String,System.String)">
            <summary>
            Set up whatever is needed to take a populated database to Offline state.
            Exception if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSingleMasterMgr.MarkNeedsRepair(System.String,System.String,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus)">
            <summary>
            Does what is required for marking a database needs repair.
            Does nothing if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSingleMasterMgr.MarkOnline(System.String,System.String)">
            <summary>
            Does what is required for marking a database online.
            Does nothing if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSingleMasterMgr.MarkStandby(System.String,System.String)">
            <summary>
            Does what is required by replication/logshipping for marking 
            a database standby.
            Does nothing if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSingleMasterMgr.Promote(System.String,System.String)">
            <summary>
            Does what is required for promoting a database.
            Exception if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSingleMasterMgr.Demote(System.String,System.String,System.Boolean)">
            <summary>
            Does what is required for demoting a database.
            Exception if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSingleMasterMgr.PrepareForDemote(System.String,System.String)">
            <summary>
            Preparation steps for Demote.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSingleMasterMgr.SetupRepl(System.String,System.String)">
            <summary>
            Setup replication.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSingleMasterMgr.DropRepl(System.String,System.String)">
            <summary>
            Drop replication.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSingleMasterMgr.DeploySecondary(System.String,System.String,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus,System.Boolean)">
            <summary>
            Deploys a new secondary database. Also used for repairing a failed secondary.
            Exception if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoWriteAllCopiesManager">
            <summary>
            Summary description for WmoWriteAllCopiesManager.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoWriteAllCopiesManager.MarkNeedsRepair(System.String,System.String,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus)">
            <summary>
            Marks a database needs repair.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoWriteAllCopiesManager.Repair(System.String,System.String,System.Boolean)">
            <summary>
            Repairs a secondary database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoWriteAllCopiesManager.ForceRepair(System.String,System.String)">
            <summary>
            Force repairs a secondary database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoWriteAllCopiesManager.RemoveUnNeededReplication(Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            Removes replication to and from current db.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoWriteAllCopiesManager.DeployEmptySecondary(System.String,System.String,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus)">
            <summary>
            Deploys a secondary database during initial deployment of the failsafe set.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoWriteAllCopiesManager.DeploySecondary(System.String,System.String,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus,System.Boolean)">
            <summary>
            Deploys a new secondary database. Also used for repairing a failed secondary.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoWriteAllCopiesManager.PrepareForOffline(System.String,System.String)">
            <summary>
            Preparation steps for mark offline. 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoWriteAllCopiesManager.MarkOnline(System.String,System.String)">
            <summary>
            Marks a database online.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoWriteAllCopiesManager.SetupPublication(Microsoft.Webstore.Management.Wmo.WmoDatabase,System.String,System.String,System.String,System.Data.DataTable,System.Boolean)">
            <summary>
            Setup publication.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoWriteAllCopiesManager.PreDrainReplication(Microsoft.Webstore.Management.Wmo.WmoDatabase,Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            Restart and drain a replication
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoWriteAllCopiesManager.DrainAndDropReplication(Microsoft.Webstore.Management.Wmo.WmoDatabase,Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            Drain and drop a replication.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoWriteAllCopiesManager.IsLastStream(Microsoft.Webstore.Management.Wmo.WmoDatabase,Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            Check if the pub db is the last replication stream exist for the sub db.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoWriteAllCopiesManager.SubscriptionExist(Microsoft.Webstore.Management.Wmo.WmoDatabase,Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            Check if a subscription exist for the sub db on the pub db.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoWriteAllCopiesManager.UpgradePreCheck(System.Boolean)">
            <summary>
            Topology upgrade for WARA is not yet implemented.
            For WARA, we can't allow upgrade if any of the databases in the fail safe set are offline.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.MoveDataJobSupport">
            <summary>
            Wrapper class for access to the JobEngine.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.MoveDataJobSupport.MoveDataJobCallback">
            <summary>
            The callback method for status report updates.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection">
            <summary>
            Collection class for WebstorePartitionMoveMap
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.SafeGet(System.String,System.String)">
            <summary>
            Get the data from the WebstorePartitionMoveMap table.
            </summary>//
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.Insert(System.String,System.String)">
            <summary>
            Call the WebstorePartitionMoveMap.Insert method on each object in this collection.
            Each object must have been initialized before calling this method.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.Clear">
            <summary>
            remove all elements
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.IndexOf(System.Int16)">
            <summary>
            Returns the index of the first object of the given name.
            </summary>
            <returns>
            The 0-based index of the first object with the name.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.Sort">
            <summary>
            Sorts the array.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.ObjectAtIndex(System.Int32)">
            <summary>
            Returns the object at a given index in the internal array.
            used only by the enumerator.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.Contains(System.Int16)">
            <summary>
            Tests whether the collection contains an object of the given name.
            </summary>
            <returns>
            true if the collection contains an object identified by the name;
            false if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            required for ICollection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.Add(Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.Remove(System.Int16)">
            <summary>
            Removes an object from the object collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.GetEnumerator">
            <summary>
            Gets the IEnumerator for this WmoDatabaseCollection.  This is meant to
            support the foreach statement.
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.DeploymentName">
            <summary>
            The Deployment defines the list of all partitions being moved.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.Count">
            <summary>
            count of objects in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.Item(System.Int16)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.IsSynchronized">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.SyncRoot">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.WebstorePartitionMoveMapEnumerator">
            <summary>
            This class implements the IEnumerator over a WebstorePartitionMoveMapCollection
            in support of the "foreach" keyword
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.WebstorePartitionMoveMapEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.WebstorePartitionMoveMapEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            Must be called before accessing the Current element.
            </summary>
            <returns>
            true if enumerator successfully advanced to next element;
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.WebstorePartitionMoveMapEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager">
            <summary>
            Summary description for WmoNewMoveDataManager.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.StartMoveData">
            <summary>
            Used for moving data in an "add partition" scenario.
            This method requires the following pre-conditions:
                o) Valid Manifest and Deployments have been imported and deployed.
                o) The command "wst fss import ..." has been called to import the new FSS.
                o) The command "wst fss setup ..."  has been called to set them up.
                o) The command "wst par import ..." has been called to fill the PartitionMoveMap
                        table with the partitions data that will be moving from one FSS to another.
            
            Dependencies: All partitions in the PartitionMoveMap table are checked to see if
            they are in the Default state. Any found to be in a non-default state will get a
            warning message, and all partitions associated with the FSS will have a status of
            aborted set.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.StartCleanUp">
            <summary>
            The data to be cleaned is the data on the source database that is no longer needed. 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.ResetPartitionMoveMapStatus(System.Boolean)">
            <summary>
            Resets the status to initial values for Move or for Clean.
            </summary>
            <param name="isClean"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.SafeSetFssToDeployed">
            <summary>
            Checks to see if there are any FSSes where all partitions are NOT listed as
            finished. All partitions must be set to MoveFinished, MoveAborted,
            CleanFinished or CleanAborted. If these criteria are met, the FSS status
            is set to "Deployed" instead of the "MovingData".
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.JobCallback(System.IAsyncResult)">
            <summary>
            Callback for job status.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.WatchMoveDataStatus">
            <summary>
            Every 15 seconds, poll the partitions that are moving data, and report the status
            VIA FireStatusEvent.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.MonitorRemoteStatus(Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap,System.Int32@,System.Int32@,System.Boolean)">
            <summary>
            Called from the main watch case statement above.
            Once the status in the WstConfig.PartitionMoveMap table is set to (Move)|(Clean)JobStarted,
            the application status values in the WebstorePartitionMoveMap table are monitored instead.
            Once the status for this table is set to (Move)|(Clean)Finished, the processing resumes
            </summary>
            <param name="configMap"></param>
            <param name="countFailed"></param>
            <param name="countInProgress"></param>
            <param name="isClean"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.CheckNonDefaultFailSafeSetStatus(System.Boolean)">
            <summary>
            Verifies the state of all fail safe sets that are involved in the move. If the FSS is not
            in the correct state, a warning is printed, and all Partitions related to the FSS have a
            status of aborted set.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.CheckIsDone(System.Boolean)">
            <summary>
            Verifies the state of all fail safe sets that are involved in the move. If the FSS is not
            in the correct state, a warning is printed, and all Partitions related to the FSS have a
            status of aborted set.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.DropWorkTables">
            <summary>
            Remove the WebstorePartitionMoveMap and WebstoreBulkCopy tables.
            This step is only run after all data partitions have been moved and all
            application data has been cleaned up.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.CheckDefaultStatus(Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap)">
            <summary>
            Check te status of both the source and destination dail safe set.
            </summary>
            <param name="map"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.PrepareDatabases(System.Boolean)">
            <summary>
            Installs the tables and sprocs on each destination database (primary) of the
            application that is involed in the move.
            This method must have VerifyState and VerifyProgress called before.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.PopulateDatabases(System.Boolean)">
            <summary>
            Is called as part of a sequence. See the Initialization method for required calls.
            o) Deletes the contents of the WebstorePartitionMoveMap and WebstoreBulkCopy
               tables. This is a safety measure. By the time this method is called, only the
               Destination Fail Safe sets that have been approved will be effected.
            o) Populate WebstorePartitionMoveMap based on the WstConfig databases
               PartitionMoveMap.
            o) Populate WebstoreBulkCopy based on the above, along with data from the WmoManifest.
            
            Each database that is part of the move will have all data available. That is, if
            there are 100 partitions being moved to 10 Fsses, all 100 partitions will be added to
            the tables, even if those rows do not apply to this fail safe set.
            
            At the end of this method, the WebstorePartitionMoveMap and WebstoreBulkCopy classes
            will be populated as well as the data in the databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.FillInWebstorePartitionMoveMapCollection(System.Boolean)">
            <summary>
            This method is called by PopulateDatabases(). All verifications will have been done by this point.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.FillInWebstoreBulkCopyCollection">
            <summary>
            This method is called by Initialize. All verifications will have been done by this point.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.SetupPausedReplication(System.Int16)">
            <summary>
            Given a partition number, setup paused replication from the source(s) to the destination.
            This requires creating the articles and the filters for the publication, adding the
            publications, subscriptions and subscribers.
            </summary>
            <param name="partitionNumber"></param>
            
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.AfterMultiMasterMoveData(System.Int16,System.Int16)">
            <summary>
            For multmaster move data, after the move from the old FSS is complete, update the
            NeedsReplication column in order to force replicate the data from the Primary
            database to the secondary database(s).
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.GetMoveDataPublicationName(System.Int16)">
            <summary>
            Name is in the form MoveData_DeploymentName_Partition_PartitionNumber
            </summary>
            <param name="partitionNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.RemoveReplication(System.Int16)">
            <summary>
            Reverse of setting it up. Drop the subscriptions, then publications
            This is a best effort. We don't want to rollback the entire move data if this fails.
            If it does fail, output a failure message. Otherwise ignore it. The user will have
            to clean them up.
            </summary>
            <param name="partitionNumber"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.RemapDataPartition(System.Int16,System.Int16)">
            <summary>
            This method actually does two things. It maps the specified partition to the new fail safe
            set, and it also sets the status to read/write at the same time.
            </summary>
            <param name="partitionNumber"></param>
            <param name="fssNumber"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.MarkNeedsRepair(System.Int16)">
            <summary>
            MarkNeedsRepair will already be in an AdminLock. It is called from
            the SqlFailSafeSet class during the MarkNeedsRepair method.
            </summary>
            <param name="fssNumber"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.MarkPartitionAborted(Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap)">
            <summary>
            This method assumes that the passed in configMap variable contains an up to date status
            taken from the WstConfig database.
            The status will not change for partitions marked MoveRemapped or CleanFinished. In these
            cases, an abort cannot roll back the work already performed.
            </summary>
            <param name="configMap"></param>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.DeploymentName">
            <summary>
            Returns the deployment name from the singleton based on the DeploymentUID
            passed in to the constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.Deployment">
            <summary>
            Returns the deployment from the singleton based on the DeploymentUID
            passed in to the constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.DistribDeploy">
            <summary>
            FIXX
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.Manifest">
            <summary>
            Returns the manifest of the deployment.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.WstConfigMoveMaps">
            <summary>
            A collection of the contents of the PartitionMoveMap table in the WstConfig database.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.ApplicationPartitionMoveMaps">
            <summary>
            A collection of the contents of the WebstorePartitionMoveMap table on the application
            databases. The data is generated based on the data in the WstConfig.PartitionMoveMap
            table, and inserted into this table during the move process.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.SqlFailSafeSets">
            <summary>
            The fail safe set collection of the Deployment. This includes the new FSSes as well
            as the old ones.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.SqlBulkCopyBatchSize">
            <summary>
            Batch size used during SqlBulkCopy. Default is 1000 rows.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.SqlBulkCopyTimeOut">
            <summary>
            Time out value used during bulk copy processing. Default is 8 hours (28800)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.CleanUpBatchSize">
            <summary>
            Used during cleanup. This is the number of rows to delete at a time. Default is 1000 rows.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.CleanUpDelay">
            <summary>
            The delay string used in the Cleanup filter. The default is 1/10th of a second.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap">
            <summary>
            This class is essentially just a structure to hold data from some columns of
            the WstConfig database PartitionMoveMap table.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap.#ctor(System.Guid)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap.Get(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Get the data from the WstConfig version of the PartitionMoveMap table.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap.GetStatus">
            <summary>
            Get the Status of the partition. Used within the watcher thread.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap.DeploymentUid">
            <summary>
            The deployment name involved in the move.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap.PartitionNum">
            <summary>
            The partition number of the data.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap.OldSQLFSSNum">
            <summary>
            The Sql Fail Safe Set where the data from the indicated partition is moving from.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap.NewSQLFSSNum">
            <summary>
            The Sql Fail Safe Set where the data from the indicated partition is moving to.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap.Status">
            <summary>
            Each partition being moved has a seperate status.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap.Progress">
            <summary>
            Freeform progress string. Updated by the watcher thread.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap.SourceServerName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap.SourceDatabaseName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap.DestinationServerName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap.DestinationDatabaseName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap.IsInCollection">
            <summary>
            Determines if this object is part of the Collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap.JobQueued">
            <summary>
            When the job is submitted to the job engine
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap.JobState">
            <summary>
            State of the job according to the job framework.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap.ApplicationGetStatusFailureCount">
            <summary>
            The number of times a failure occurs trying to get application status.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection">
            <summary>
            Collection class for WstConfigPartitionMoveMap
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.#ctor(System.Guid)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.Get">
            <summary>
            Get the data from the WstConfigPartitionMoveMap table.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.GetServersForJobs">
            <summary>
            Returns a generic List of servers where a partition on the server is either
            initialized or has a JobStarted status.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.IndexOf(System.Int16)">
            <summary>
            Returns the index of the first object of the given name.
            </summary>
            <returns>
            The 0-based index of the first object with the name.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.Sort">
            <summary>
            Sorts the array.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.ObjectAtIndex(System.Int32)">
            <summary>
            Returns the object at a given index in the internal array.
            used only by the enumerator.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.Contains(System.Int16)">
            <summary>
            Tests whether the collection contains an object of the given name.
            </summary>
            <returns>
            true if the collection contains an object identified by the name;
            false if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            required for ICollection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.Add(Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.Remove(System.Int16)">
            <summary>
            Removes an object from the object collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.GetEnumerator">
            <summary>
            Gets the IEnumerator.
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.DeploymentUid">
            <summary>
            The Deployment defines the list of all partitions being moved.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.Count">
            <summary>
            count of objects in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.Item(System.Int16)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.IsSynchronized">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.SyncRoot">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.WstConfigPartitionMoveMapEnumerator">
            <summary>
            This class implements the IEnumerator over a WstConfigPartitionMoveMapCollection
            in support of the "foreach" keyword
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.WstConfigPartitionMoveMapEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.WstConfigPartitionMoveMapEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            Must be called before accessing the Current element.
            </summary>
            <returns>
            true if enumerator successfully advanced to next element;
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.WstConfigPartitionMoveMapEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.SourceDestinationPair">
            <summary>
            Internal class used for the Status command.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoServerRole">
            <summary>
            Class for Server Role instances
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRole.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRole.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRole.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Takes an Xml node and initializes the member variables.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRole.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRole.UnRegister">
            <summary>
            Removes the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRole.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRole.Validate(System.String)">
            <summary>
            Validates the self consistency of the in-memory data
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoServerRole.Name">
            <summary>
            Name of the ServerRole.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoServerRole.Uid">
            <summary>
            Uid of the ServerRole
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoServerRole.DataServerUid">
            <summary>
            DateServerUid of the ServerRole
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoServerRole.Description">
            <summary>
            Description of the ServerRole
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoServerRoleCollection">
            <summary>
            Collection class for WmoServerRole
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleCollection.IndexOf(System.Guid)">
            <summary>
            Returns the index of the first object of the given Uid.
            </summary>
            <returns>
            The 0-based index of the first object with the Uid.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleCollection.Add(Microsoft.Webstore.Management.Wmo.WmoServerRole)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml)">
            <summary>
            Imports an Xml file, creating child objects and passing Xml fragments
            to them for further processing.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleCollection.Initialize">
            <summary>
            Loads the in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoDataServerCollection)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder)">
            <summary>
            Exports ServerRoles
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleCollection.Register">
            <summary>
            Register each ServerRole in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleCollection.Purge">
            <summary>
            Purge any server role not currently in use
            Do not purge default templates.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoServerRoleCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoServerRoleCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoServerRoleCollection.Item(System.Guid)">
            <summary>
            Uid indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstChannels.Pipe.PipeChannel">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstChannels.Pipe.PipeChannel.WSTAGENT_PIPENAME">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeChannel.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeChannel.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeChannel.#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IClientChannelSinkProvider,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)">
            <summary>
            
            </summary>
            <param name="properties"></param>
            <param name="clientProviderChain"></param>
            <param name="serverProviderChain"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeChannel.Parse(System.String,System.String@)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeChannel.CreateMessageSink(System.String,System.Object,System.String@)">
            <summary>
            IChannelSender
            </summary>
            <param name="url"></param>
            <param name="data"></param>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeChannel.GetUrlsForUri(System.String)">
            <summary>
            
            </summary>
            <param name="objectURI"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeChannel.StartListening(System.Object)">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeChannel.StopListening(System.Object)">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeChannel.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstChannels.Pipe.PipeChannel.ChannelName">
            <summary>
            IChannel
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstChannels.Pipe.PipeChannel.ChannelPriority">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstChannels.Pipe.PipeChannel.ChannelData">
            <summary>
            IChannelReciever
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstChannels.Pipe.PipeClientChannel">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeClientChannel.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeClientChannel.#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IClientChannelSinkProvider)">
            <summary>
            
            </summary>
            <param name="properties"></param>
            <param name="clientProviderChain"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeClientChannel.Parse(System.String,System.String@)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeClientChannel.CreateMessageSink(System.String,System.Object,System.String@)">
            <summary>
            IChannelSender
            </summary>
            <param name="url"></param>
            <param name="data"></param>
            <param name="objuri"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeClientChannel.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstChannels.Pipe.PipeClientChannel.ChannelName">
            <summary>
            IChannel
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstChannels.Pipe.PipeClientChannel.ChannelPriority">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstChannels.Pipe.PipeIOException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeIOException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="strText"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeIOException.#ctor(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="strText"></param>
            <param name="lastWin32Error"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeIOException.#ctor(Microsoft.Webstore.WstChannels.Pipe.PipeIOException)">
            <summary>
            
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeIOException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeIOException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Microsoft.Webstore.WstChannels.Pipe.PipeIOException.Message">
            <summary>
            Message
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstChannels.Pipe.PipeIOException.LastWin32Error">
            <summary>
            LastWin32Error
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstChannels.Pipe.PipeIOException.LastWin32ErrorMessage">
            <summary>
            LastWin32ErrorMessage
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstChannels.Pipe.PipeImpersonateClient">
            <summary>
            PipeImpersonateClient
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstChannels.Pipe.PipeServerChannel">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeServerChannel.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeServerChannel.#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)">
            <summary>
            CTOR used via the configuration file
            </summary>
            <param name="properties"></param>
            <param name="serverProviderChain"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeServerChannel.Parse(System.String,System.String@)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeServerChannel.GetUrlsForUri(System.String)">
            <summary>
            IChannelReceiver
            </summary>
            <param name="objuri"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeServerChannel.StartListening(System.Object)">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeServerChannel.StopListening(System.Object)">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeServerChannel.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstChannels.Pipe.PipeServerChannel.ChannelName">
            <summary>
            IChannel
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstChannels.Pipe.PipeServerChannel.ChannelPriority">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstChannels.Pipe.PipeServerChannel.ChannelData">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.WmoAgent.WmoAgentProxy">
            <summary>
            class for wstagent
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.WmoAgent.WmoAgentFileShare">
            <summary>
            fileshare object for the WmoAgent
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentFileShare.ValidateFileShare(System.String,System.String)">
            <summary>
            validate fileshare
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase">
            <summary>
            database object for the WmoAgent
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.GetLockObject(System.String)">
            <summary>
            LockObject
            BR - backup/restore (bug3591)
            GL - general server synchronization (bug3682, bug3807)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.m_htDatabases">
            <summary>
            Ensure Sproc installed.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.SetupJobs(System.String,System.String,System.Data.DataSet)">
            <summary>
            creates jobs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.DropJob(System.String,System.String)">
            <summary>
            Drops the specified job.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.DisEnableJob(System.String,System.String,System.Boolean)">
            <summary>
            Disables or Enables the specified job.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.RestartJob(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Restarts the specified job.
            Creates the job if job is missing and SourceText is specified.
            SourceFileName is used for error messaging if job is created with SourceText.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.EnableJob(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Enables the specified job.
            Creates the job if job is missing and SourceText is specified.
            SourceFileName is used for error messaging if job is created with SourceText.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.RestartJobWait(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Restarts the specified job and wait until restarting succeeds
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.RestartJobWait(System.String,System.String,System.String)">
            <summary>
            Restarts the specified job and wait until restarting succeeds
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.CheckJobStatus(System.String,System.String)">
            <summary>
            Restarts the specified job and wait until restarting succeeds
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.StopJob(System.String,System.String)">
            <summary>
            Stops the specified job and wait until restarting succeeds.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.StopJobWait(System.String,System.String)">
            <summary>
            Stops the specified job.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.ValidateSqlServerIP(System.String,System.String)">
            <summary>
            Validate SqlServer IP
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.ValidateStripe(System.String,System.String,System.String)">
            <summary>
            Validate stripe directory.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.ValidateMinSqlVersion(System.String,System.String)">
            <summary>
            Validate Minimum SQL Version.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.CreateDirectory(System.String,System.String)">
            <summary>
            Create transfer directory.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.IsSqlRunning(System.String)">
            <summary>
            Method to just make sure sql server is running
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.IsSqlAgentRunning(System.String)">
            <summary>
            Method to just make sure sql server agent is running
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.GetConnectionString(System.String,System.String)">
            <summary>
            Get a Sql Connection string with default settings.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.MarkNeedsRepl(System.String,System.String,System.String,System.String,System.String,System.DateTime,System.DateTime)">
            <summary>
            Marks the tiNeedsRepl column on all tables in a multi-master database. Used for
            synchronizing the data between databases of a fail safe set after replication has
            been restored.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.MarkNeedsReplByPartition(System.String,System.String,System.String,System.String,System.String,System.Int16)">
            <summary>
            Marks the tiNeedsRepl column on all tables in a multi-master database. Used for
            synchronizing the data between databases of a fail safe set after replication has
            been restored. This version updates the 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.MarkNeedsReplAll(System.String,System.String,System.String,System.String)">
            <summary>
            Marks the tiNeedsRepl column on all tables in a multi-master database. Used for
            synchronizing the data between databases of a fail safe set after replication has
            been restored. This version updates the 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.Backup(System.String,System.String,System.String,System.Boolean)">
            <summary>
            takes a backup of this database, BackupFilePath is a share
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.Copy(System.String,System.String)">
            <summary>
            copy backup file from one share to another
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.Restore(System.String,System.String,System.String,System.Boolean)">
            <summary>
            restores over this database
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.RemapDBUsers(System.String,System.String)">
            <summary>
            remap db users
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.UpdateAccount(System.String,System.String,System.String,System.Boolean)">
            <summary>
            remap db users
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.RunRegisteredScripts(System.String,System.String,System.Data.DataSet)">
            <summary>
            runs registered sql files in the database
            (scripts, tables, views, functions, sprocs and triggers)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.SetupRegisteredSecurity(System.String,System.String,System.Data.DataSet)">
            <summary>
            sets up roles and accounts as registered
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.AggressiveDropDB(System.String,System.String)">
            <summary>
            Aggressively drops this database
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.SetupPublication(System.String,System.String,System.String,System.String,System.String,System.Data.DataTable,System.Boolean,System.Boolean)">
            <summary>
            run to set up a publication
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.AddPublisherToDistributor(System.String,System.String,System.String,System.String)">
            <summary>
            run once per publishing server to associate the publishing server
            with a distribution server
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.SetupSubscription(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            run to set up subscription
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.DropSubscription(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            run to set up subscription
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.DropAllSubscription(System.String,System.String,System.String)">
            <summary>
            run to set up subscription
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.AddSubscriberToPublisher(System.String,System.String)">
            <summary>
            run once per publisher-subscriber pair to allow the subscribing server
            to subscribe to publications from the publishing server
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.CreateMirroringEndPoint(System.String,System.String,System.String)">
            <summary>
            Create mirroring end point on the server
            </summary>
            <param name="serverName"></param>
            <param name="endPointName"></param>
            <param name="port"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.IsSecondaryNeedBackupRestore(System.String,System.String)">
            <summary>
            If the database is in a synchronized mirroring session, there is no need to backup/restore.
            Otherwise, there is a need to backup/restore.
            </summary>
            <param name="serverName"></param>
            <param name="DatabaseName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.IsDbForceRepairable(System.String,System.String)">
            <summary>
            Determines the state of the database. If db in restore state, cannot forcerepair
            </summary>
            <param name="serverName"></param>
            <param name="DatabaseName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.SetWitnessOrPartnerOff(System.String,System.String,System.String)">
            <summary>
            Set Witness/Partner off when trying to drop mirroring
            </summary>
            <param name="WitnessOrPartner"></param>
            <param name="serverName"></param>
            <param name="dbName"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.SetWitnessOrPartner(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Set up witness or partner
            </summary>
            <param name="witnessOrPartener"></param>
            <param name="serverName"></param>
            <param name="partnerServerName"></param>
            <param name="dbName"></param>
            <param name="completeDomainName"></param>
            <param name="port"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.SetMirroringTimeout(System.String,System.String,System.String)">
            <summary>
            Sets the timeout value for the mirroring session.
            </summary>
            <param name="primaryServerName"></param>
            <param name="primaryDBName"></param>
            <param name="timeout"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.SetSessionSafety(System.String,System.String,System.String)">
            <summary>
            Set mirroring session safety to FULL or OFF. It must be FULL for automatic failover.
            </summary>
            <param name="serverName"></param>
            <param name="dbName"></param>
            <param name="safetyLevel"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.IsMirroringPrincipal(System.String,System.String)">
            <summary>
            Check if a database is participate in a mirroring session and participate as a principal
            </summary>
            <param name="serverName"></param>
            <param name="dbName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.SetMirroringPartnerFailover(System.String,System.String)">
            <summary>
            Failover to a mirroring partner
            </summary>
            <param name="serverName"></param>
            <param name="dbName"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.SetMirroringPartnerSuspendOrResume(System.String,System.String,System.String)">
            <summary>
            Suspend a mirroring partner
            </summary>
            <param name="serverName"></param>
            <param name="dbName"></param>
            <param name="suspendOrResume"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.FileGroup.ToString">
            <summary>
            returns string needed to put this file in a
            sql "create database" statement
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.FileInstance.ToString">
            <summary>
            returns string needed to put this file in a
            sql "create database" statement
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoMonitoringProperty">
            <summary>
            Top level site object
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoringProperty.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoringProperty.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Loads the in-memory data from the XML. The XML is assumed to
            be validated before this function is called.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoringProperty.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Initialize the class from the WstConfig database. This method is called from
            the WmoMonitoringPropertyCollection initialize method or from the WmoLogFile collection
            initialize method.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoringProperty.Register(Microsoft.Webstore.Management.Wmo.WmoMonitoringProperty.RegisterSproc)">
            <summary>
            Register the template. This method is called with Dtc already started at the
            collection level. All validation should be completed before you get to this step.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoringProperty.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMonitoringProperty.UidColumnName">
            <summary>
            The UID of the parent of this property, to be defined by the instantiation of this class
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMonitoringProperty.MonitoringPropertyUid">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMonitoringProperty.ParentUid">
            <summary>
            The UID of the parent of this property.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMonitoringProperty.DataType">
            <summary>
            The data type of this property.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMonitoringProperty.Value">
            <summary>
            The value of this  property.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoAction">
            <summary>
            Top level site object
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAction.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Loads the in-memory data from the XML. The XML is assumed to
            be validated before this function is called.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAction.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Initialize the class from the WstConfig database. This method is called from
            the WmoActionCollection initialize method or from the WmoLogFile collection
            initialize method.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAction.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Register the Action. This method is called with Dtc already started at the
            collection level. All validation should be completed before you get to this step.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAction.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoAction.Uid">
            <summary>
            The identifier for this action.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoAction.Type">
            <summary>
            The type of this action.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoAction.Description">
            <summary>
            The user defined description of the Action.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoAction.Properties">
            <summary>
            The collection of properties associated with this action.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoActionCollection">
            <summary>
            Collection class for Actions
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoActionCollection.lockCollection">
            <summary>
            Used for locks for threadsafeness
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoActionCollection.isInitialized">
            <summary>
            Flag to indicate if all the objects in the collection have been
            read from the config.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoActionCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoActionCollection.IndexOf(System.Guid)">
            <summary>
            Returns the index of the first object of the given uid.
            </summary>
            <returns>
            The 0-based index of the first object with the uid.
            -1 if the collection doesn't contain an object with this uid.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoActionCollection.Add(Microsoft.Webstore.Management.Wmo.WmoAction)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoActionCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Exports the in memory cache
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoActionCollection.AddAction(Microsoft.Webstore.Management.Wmo.WmoXml,System.Boolean)">
            <summary>
            Adds new Action(s)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoActionCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Given the Monitoring node, loads Actions into the cache.
            </summary>
            <param name="objXml"></param>
            <param name="nodeMonitoring"></param>
            <param name="overWrite"></param>
            The user can supply any number of Actions. This means that the user must use the
            "wst mon deleteobject" in order to delete any base object. However, any subobject,
            in this case, the properties on objects in the xml are not treated this way. If
            a user specifies a HA that contains properties, and they specify  the -overwrite flag.
            all properties will be purged on the object. In this case, the XML is the final
            rule as to what makes up this object.
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoActionCollection.Register">
            <summary>
            Registers the cached data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoActionCollection.Initialize">
            <summary>
            Loads the in-memory data from the WstConfig
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoActionCollection.Validate">
            <summary>
            Validates the databases.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoActionCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoActionCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoActionCollection.Item(System.Guid)">
            <summary>
            Uid indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoAlertProcess">
            <summary>
            Top level site object
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertProcess.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertProcess.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Loads the in-memory data from the XML.
            </summary>
            The caller must set the Uid and the Name of the object before this method is
            called. This is done in order to handle the overwrite case. The Parent
            collection is the only place that knows whether the object is new or
            pre-existing.
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertProcess.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Initialize the class from the WstConfig database. This method is called from
            the WmoAlertProcessCollection initialize method or from the WmoLogFile collection
            initialize method.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertProcess.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Register the Alert Process. This registered the contents of the WmoAlertProcess
            object with the WstConfig database. The contents must be verified and a DTC
            started before this call is made.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertProcess.UnRegister">
            <summary>
            UnRegister the AlertProcess. This deletes the AlertProcess and all ProcessAction
            children. Unlike Register, this method handles creating the DTC. This method is
            called from the WmoCommandMonitoring layer, one at a time.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertProcess.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoAlertProcess.Uid">
            <summary>
            The UID of this healing action.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoAlertProcess.Description">
            <summary>
            User defined description. 255 characters in length.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoAlertProcess.StartActionId">
            <summary>
            The Action that will be executed first when the healing process is started.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoAlertProcess.ProcessActions">
            <summary>
            A collection of WmoProcessActions
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoAlertProcessCollection">
            <summary>
            Collection class for AlertProcesses
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertProcessCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertProcessCollection.IndexOf(System.Guid)">
            <summary>
            Returns the index of the first object of the given Uid.
            </summary>
            <returns>
            The 0-based index of the first object with the Uid.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertProcessCollection.Add(Microsoft.Webstore.Management.Wmo.WmoAlertProcess)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertProcessCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Exports the in memory cache
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertProcessCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,System.Boolean)">
            <summary>
            An XML file using the target namespace of WebstoreMonitoringConfigurationSchema.xsd
            The XML file contains Monitoring and Self healing details. In this case AlertProcess
            information, including Actions as sub-nodes.
            </summary>
            <param name="objXml"></param>
            <param name="nodeMonitoring"></param>
            <param name="overWrite"></param>
            The XML file is THE reference for the sub-objects under AlertProcesses. If the
            user specifies true for overWrite, then any AlertProcess listed in the XML
            will take precedence over anything currently in the database. All entries
            pertaining to this AlertProcess will be purged, and the XML entries will
            be inserted in their place.
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertProcessCollection.Initialize">
            <summary>
            Loads the in-memory data from the WstConfig
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertProcessCollection.AddAlertProcess(Microsoft.Webstore.Management.Wmo.WmoXml,System.Boolean)">
            <summary>
            Adds new AlertProcess(es)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertProcessCollection.PreValidate">
            <summary>
            Validates the databases.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoAlertProcessCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoAlertProcessCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoAlertProcessCollection.Item(System.Guid)">
            <summary>
            Uid indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoAlertRule">
            <summary>
            Class for MonitoringAlertRule instances
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertRule.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertRule.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertRule.AddCondition(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Loads the in-memory data from the config dbs about conditions
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertRule.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Update this object with data from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertRule.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertRule.Register">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertRule.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertRule.UnRegister">
            <summary>
            Removes the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertRule.UnregisterAlertRuleCondition(Microsoft.Webstore.Common.Monitoring.AlertConditionType)">
            <summary>
            Removes the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertRule.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoAlertRule.Uid">
            <summary>
            Uid of the Alert Rule
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoAlertRule.Severity">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoAlertRule.GenerateAlertAt">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoAlertRule.GenerateAlertConditions">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoAlertRule.ResolveAlertConditions">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoAlertRule.AlertProcess">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoAlertRule.AlertProcessRetryCount">
            <summary>
            AlertProcessRetryCount
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoAlertRule.AlertProcessRetryPeriod">
            <summary>
            AlertProcessRetryCount
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoAlertRuleCollection">
            <summary>
            Collection class for WmoMonitoringAlertRule
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertRuleCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertRuleCollection.IndexOf(System.Guid)">
            <summary>
            Returns the index of the first object of the given Uid.
            </summary>
            <returns>
            The 0-based index of the first object with the Uid.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertRuleCollection.Add(Microsoft.Webstore.Management.Wmo.WmoAlertRule)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertRuleCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Loads the in-memory data from Xml, deep initialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertRuleCollection.Initialize">
            <summary>
            Loads the in-memory data from the config dbs
            initializes dataserver, ipaddressswitches
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertRuleCollection.AddAlertRule(Microsoft.Webstore.Management.Wmo.WmoXml,System.Boolean)">
            <summary>
            Adds new MonitoringAlertRule(s)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertRuleCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertRuleCollection.Register">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertRuleCollection.Validate">
            <summary>
            Validate each object in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoAlertRuleCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoAlertRuleCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoAlertRuleCollection.Item(System.Guid)">
            <summary>
            Uid indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoServerRoleMapping">
            <summary>
            Class for MonitoringServerRoleMapping instances
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleMapping.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleMapping.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleMapping.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Update this object with data from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleMapping.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleMapping.Register">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleMapping.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleMapping.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoServerRoleMapping.Uid">
            <summary>
            Uid of the mapping
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoServerRoleMapping.MonitoredData">
            <summary>
            MonitoredData
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoServerRoleMapping.AlertRules">
            <summary>
            AlertRules
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoServerRoleMappingCollection">
            <summary>
            Collection class for WmoMonitoringMapping
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleMappingCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleMappingCollection.IndexOf(System.Guid)">
            <summary>
            Returns the index of the first object of the given Uid.
            </summary>
            <returns>
            The 0-based index of the first object with the Uid.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleMappingCollection.Add(Microsoft.Webstore.Management.Wmo.WmoServerRoleMapping)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleMappingCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Loads the in-memory data from Xml, deep initialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleMappingCollection.Initialize">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleMappingCollection.AddServerRoleMapping(Microsoft.Webstore.Management.Wmo.WmoXml,System.Boolean)">
            <summary>
            Adds new mapping of server roles to monitoring items
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleMappingCollection.ValidateAndLoadAddServerRoleMapping(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,System.Boolean)">
            <summary>
            physically adds the mappings
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleMappingCollection.DeleteServerRoleToMonitoredDatumMapping(System.String,System.String)">
            <summary>
            Removes a mapping between a Data Server and MonitoredDatum
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleMappingCollection.DeleteServerRoleToAlertRuleMapping(System.String,System.String)">
            <summary>
            Removes a mapping between a Data Server and MonitoredDatum
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleMappingCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleMappingCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleMappingCollection.Validate">
            <summary>
            Validate each object in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoServerRoleMappingCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoServerRoleMappingCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoServerRoleMappingCollection.Item(System.Guid)">
            <summary>
            Uid indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatum">
            <summary>
            Class for MonitoringMonitoredDatum instances
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatum.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatum.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatum.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Update this object with data from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatum.UnRegister">
            <summary>
            Removes the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatum.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatum.Register">
            <summary>
            NOTE! This method only registers the MonitoringMonitoredDatum. It does not call
            RegisterDistribDBUse. Any method that calls this version of
            Register must call RegisterDistribDBUse for replicated applications.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatum.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatum.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatum.Uid">
            <summary>
            Uid of the Perf Counter
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatum.Type">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatum.SamplingFrequency">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatum.AggregationType">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatum.AggregationInterval">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatum.StaleTime">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatum.RatePrecision">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatum.CollectAt">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatum.Properties">
            <summary>
            The collection of Properties associated with this MonitoredDatum
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatumCollection">
            <summary>
            Collection class for WmoMonitoringMonitoredDatum
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatumCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatumCollection.IndexOf(System.Guid)">
            <summary>
            Returns the index of the first object of the given Uid.
            </summary>
            <returns>
            The 0-based index of the first object with the Uid.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatumCollection.Add(Microsoft.Webstore.Management.Wmo.WmoMonitoredDatum)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatumCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Loads the in-memory data from Xml, deep initialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatumCollection.Initialize">
            <summary>
            Loads the in-memory data from the config dbs
            initializes dataserver, ipaddressswitches
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatumCollection.AddMonitoredDatum(Microsoft.Webstore.Management.Wmo.WmoXml,System.Boolean)">
            <summary>
            Adds new MonitoringMonitoredDatum
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatumCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatumCollection.Register">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatumCollection.Validate">
            <summary>
            Validate each object in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatumCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatumCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatumCollection.Item(System.Guid)">
            <summary>
            Uid indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoMonitoring">
            <summary>
            Top level site object
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoring.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoring.Initialize">
            <summary>
            Loads the in-memory data from the config dbs, deep initialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoring.Import(Microsoft.Webstore.Management.Wmo.WmoXml,System.Boolean)">
            <summary>
            Loads the in-memory data from the XML. The XML is assumed to
            be validated before this function is called.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoring.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMonitoring.AlertRules">
            <summary>
            Collection of AlertRule.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMonitoring.AlertProcesses">
            <summary>
            Collection of AlertProcess.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMonitoring.MonitoredData">
            <summary>
            Collection of MonitoredData.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMonitoring.ServerRoleMapping">
            <summary>
            Collection of Mappings.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMonitoring.Actions">
            <summary>
            Collection of Actions used for self healing or determining if the server can be
            healed.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoProcessAction">
            <summary>
            Top level site object
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoProcessAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoProcessAction.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Loads the in-memory data from the XML. The XML is assumed to
            be validated before this function is called.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoProcessAction.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Initialize the class from the WstConfig database. This method is called from
            the WmoProcessActionCollection initialize method or from the WmoLogFile collection
            initialize method.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoProcessAction.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Register the ProcessAction. This method is called with Dtc already started at the
            collection level. All validation should be completed before you get to this step.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoProcessAction.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoProcessAction.ActionUid">
            <summary>
            The Uid of the Healing Action.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoProcessAction.Action">
            <summary>
            The Action object based off the Uid. This object is not available
            during initializion.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoProcessAction.AlertProcessUid">
            <summary>
            The Alert Process Uid
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoProcessAction.AlertProcess">
            <summary>
            The AlertProcess object based off the Uid. This object is not available
            during initializion.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoProcessAction.Id">
            <summary>
            The name of this action process.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoProcessAction.OnProceedId">
            <summary>
            What ProcessAction is executed next when the caller returns true;
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoProcessAction.OnFailureId">
            <summary>
            What ProcessAction is executed next on on failure.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoProcessAction.OnResolveId">
            <summary>
            What ProcessAction is executed next on on Resolve.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoProcessActionCollection">
            <summary>
            Collection class for actions
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoProcessActionCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoProcessActionCollection.Add(Microsoft.Webstore.Management.Wmo.WmoProcessAction)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoProcessActionCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Exports the in memory cache
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoProcessActionCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoProcessActionCollection.Unregister(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Unregister all ProcessActions associated with the AlertProcess. This method is
            ONLY called from the WmoAlertProcess.Register method. The internal steps are:
            User loads XML with the AlertProcess object always fully defined. At register
            time, we unregister all ProcessActions, then re-register them from the new
            objects supplied by the user. DTC must be started before this method is called.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoProcessActionCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Initializes data elements from XML
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoProcessActionCollection.Validate">
            <summary>
            Validates the databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoProcessActionCollection.ValidateCollectionContents">
            <summary>
            Validates the contents of the collection.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoProcessActionCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoProcessActionCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoProcessActionCollection.AlertProcessUid">
            <summary>
            The uid of the parent.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoMonitoringPropertyCollection`1">
            <summary>
            Collection class for WmoMonitoringProperty
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoringPropertyCollection`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoringPropertyCollection`1.Add(`0)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoringPropertyCollection`1.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Exports the in memory cache
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoringPropertyCollection`1.Register(Microsoft.Webstore.Management.Wmo.WmoMonitoringProperty.RegisterSproc)">
            <summary>
            Register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoringPropertyCollection`1.Validate">
            <summary>
            Validates the databases.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMonitoringPropertyCollection`1.ParentUid">
            <summary>
            This collection must always be in the context of a parent. 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMonitoringPropertyCollection`1.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMonitoringPropertyCollection`1.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoSetting">
            <summary>
            Stores an individual settings.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCentralizedSettings">
            <summary>
            Holds the metadata about the centaralized settings
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobFramework.Common.QueryExecute.WspBulkUpdateBatchExpirationInterval(System.Guid,System.String,System.Int32)">
            <summary>
            WspBulkUpdateBatchExpirationInterval
            </summary>
            <param name="statusId"></param>
            <param name="csvBatchIdsStr"></param>
            <param name="heartbeatInterval"></param>
        </member>
        <member name="T:Microsoft.Webstore.Common.ConfigurationAccess">
            <summary>
            This class provides functionality related to access to the configuration file. Instance functions are not thread-safe. Static functions are thread safe.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.ConfigurationAccess.#ctor">
            <summary>
            If not initialized, initializes the MSN Runtime and creates a new instance of ConfigurationAccess.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.ConfigurationAccess.AddWebstoreConfiguration(System.Xml.XmlNode)">
            <summary>
            Adds a new XmlNode to the webstore section of the configuration file.
            </summary>
            <param name="nodeToAdd">The new XmlNode to add.</param>
        </member>
        <member name="M:Microsoft.Webstore.Common.ConfigurationAccess.CreateNode(System.Xml.XmlNodeType,System.String,System.String)">
            <summary>
            Creates an System.Xml.XmlNode with the specified System.Xml.XmlNodeType System.Xml.XmlDocument.Name, and System.Xml.XmlNode.NamespaceURI.
            </summary>
            <param name="type">The XmlNodeType of the new node.</param>
            <param name="name">The qualified name of the new node. If the name contains a colon then it is parsed into System.Xml.XmlNode.Prefix and System.Xml.XmlDocument.LocalName components.</param>
            <param name="namespaceURI">The namespace URI of the new node.</param>
            <returns>The new XmlNode.</returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.ConfigurationAccess.CreateAttribute(System.String)">
            <summary>
            Creates an System.Xml.XmlAttribute with the specified System.Xml.XmlDocument.Name.
            </summary>
            <param name="attributeName">The qualified name of the attribute. If the name contains a colon, the System.Xml.XmlNode.Prefix property reflects the part of the name preceding the first colon and the System.Xml.XmlDocument.LocalName property reflects the part of the name following the first colon. The System.Xml.XmlNode.NamespaceURI remains empty unless the prefix is a recognized built-in prefix such as xmlns. In this case NamespaceURI has a value of http://www.w3.org/2000/xmlns/.</param>
            <returns>The new XmlAttribute.</returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.ConfigurationAccess.GetWebstoreConfiguration(System.String)">
            <summary>
            Gets the XmlElement that represent the Webstore configuration for the specified value.
            </summary>
            <param name="value">The value that identifies the webstore configuration we are looking for.</param>
            <returns>The XmlElement that represents the specified configuration.</returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.ConfigurationAccess.GetPathFromString(System.String)">
            <summary>
                Creates a fully expanded, valid path from the specified string.
            </summary>
            <param name="value">The string to expand and validate.</param>
            <returns>The fully expanded, valid path.</returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.ConfigurationAccess.OpenWebstoreSubKey(Microsoft.Win32.RegistryKeyPermissionCheck)">
            <summary>
            Locates and opens Webstore sub key in the registry.
            </summary>
            <param name="permission">Required access permissions while opening the WebstoreSubKey. </param>
            <returns>The handler to the opened Webstore subkey.</returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.ConfigurationAccess.GetConfigFileLocation">
            <summary>
            Gets the config file location.
            </summary>
            <returns>Config file location, null if it is not found.</returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.ConfigurationAccess.IntializeMsnRuntime">
            <summary>
            Initializes MSN Runtime.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.ConfigurationAccess.SaveNewConfiguration(Microsoft.Webstore.Common.ConfigurationAccess)">
            <summary>
            Saves the new configuration over the existing configuration file.
            </summary>
            <param name="newConfiguration"></param>
        </member>
        <member name="P:Microsoft.Webstore.Common.ConfigurationAccess.ConfigurationFilePath">
            <summary>
            Gets the full path for the configuration file that is used to initialize MSN Runtime.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.ConfigurationAccess.ConfigurationDocument">
            <summary>
            The Xml document that represent the configuration file. 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.ConfigurationAccess.Configuration">
            <summary>
            Gets the configuration exposed by the MSN Runtime for read only purposes.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.ConfigurationAccess.NamespaceURI">
            <summary>
            Gets the namespace uri of the configuration document.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.WmoStatusEventType">
            <summary>
            Status Event type.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.WmoStatusEventType.Verbose">
            <summary>
            Verbose.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.WmoStatusEventType.Information">
            <summary>
            Information.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.WmoStatusEventType.InProgress">
            <summary>
            The step is in progress.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.WmoStatusEventType.Success">
            <summary>
            The step succeeded.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.WmoStatusEventType.Fail">
            <summary>
            The step failed.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.WmoStatusEventType.Warning">
            <summary>
            Warning
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.WmoStatusEventArgs">
            <summary>
            class for WmoStatusEventArgs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WmoStatusEventArgs.#ctor(System.String,Microsoft.Webstore.Common.WmoStatusEventType)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WmoStatusEventArgs.#ctor(System.String,Microsoft.Webstore.Common.WmoStatusEventType,System.Exception)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WmoStatusEventArgs.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for Serializable
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WmoStatusEventArgs.ToString">
            <summary>
            ToString
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WmoStatusEventArgs.ToString(System.Boolean)">
            <summary>
            ToString
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WmoStatusEventArgs.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable.GetObjectData
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WmoStatusEventArgs.StepName">
            <summary>
            StepName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WmoStatusEventArgs.EventType">
            <summary>
            EventType
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WmoStatusEventArgs.Exception">
            <summary>
            EventType
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WmoStatusEventArgs.ThreadNumber">
            <summary>
            ThreadNumber
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WmoStatusEventArgs.DateTime">
            <summary>
            DateTime of event
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.WmoStatusEventHandler">
            <summary>
            delegate
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.WmoException">
            <summary>
            class for WmoException
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WmoException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WmoException.#ctor(System.Int32,System.Exception)">
             <summary>
            
             </summary>
             <param name="number"></param>
             <param name="innerException"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WmoException.#ctor(System.Int32,System.String,System.Exception)">
             <summary>
            
             </summary>
             <param name="number"></param>
             <param name="message"></param>
             <param name="innerException"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WmoException.#ctor(System.Int32,System.String)">
             <summary>
            
             </summary>
             <param name="number"></param>
             <param name="message"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WmoException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable.GetObjectData
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WmoException.ToString">
            <summary>
            ToString
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WmoException.ManifestName">
            <summary>
            ManifestName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WmoException.DeploymentName">
            <summary>
            DeploymentName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WmoException.ServerName">
            <summary>
            ServerName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WmoException.DatabaseName">
            <summary>
            DatabaseName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WmoException.Context">
            <summary>
            Context
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WmoException.Message">
            <summary>
            Message
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WmoException.Number">
            <summary>
            The number of the exception.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.WmoSpawnProcess">
            <summary>
            Helper class to spawn a process
            E.g. Svr reboot command will use it.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WmoSpawnProcess.Run(System.Int32)">
            <summary>
            Start the process
            </summary>
            <param name="timeoutMs"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.Common.WmoThreadLocalStorage">
            <summary>
            WmoThreadLocalStorage
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WmoThreadLocalStorage.Data">
            <summary>
            Data
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.LatencyInfo">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.LatencyInfo.#ctor(System.Int32,System.Guid,System.Guid,System.Int32,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.LatencyInfo.SourceSqlDBUid">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.LatencyInfo.DestSqlDBUid">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.LatencyInfo.Latency">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.LatencyInfo.LatencyBucket">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.LatencyInfo.SqlFssNum">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.WstLatencyManager">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstLatencyManager.GetLatency">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstLatencyManager.GetLatency(System.Guid,System.Guid,System.Guid)">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.WstTimer">
            <summary>
            A Timer class based on System.Net.Datatime
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTimer.#ctor">
            <summary>
            WstTimer constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTimer.Start">
            <summary>
            Starts the timer (must be called before Stop()).
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTimer.Stop">
            <summary>
            Stops the timer (can be called repeatedly for progressive elapsed time).
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTimer.ToString">
            <summary>
            Gets the elapsed time as a string in HH:mm:ss.fff format
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTimer.Ticks">
            <summary>
            Gets the elapsed time as number of Ticks
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTimer.Seconds">
            <summary>
            Gets the elapsed time as number of Seconds
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTimer.Milliseconds">
            <summary>
            Gets the elapsed time as number of Milliseconds
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTimer.ElapsedTime">
            <summary>
            Gets the elapsed time as a System.TimeSpan
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.WstTrace">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTrace.RefreshTraceSwitches">
            <summary>
            Refreshes the trace switches.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTrace.CreateLogFile(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTrace.WriteLogFileLineIf(System.Boolean,System.Object)">
            <summary>
            
            </summary>
            <param name="condition"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTrace.CloseLogFile">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTrace.TraceError(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTrace.TraceWarning(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTrace.TraceInfo(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTrace.TraceVerbose(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTrace.TraceDebug(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTrace.LogExceptionEvent(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="exceptionMsgPrefix"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTrace.LogExceptionEvent(System.String,System.Exception,System.Diagnostics.StackTrace)">
            <summary>
            
            </summary>
            <param name="exceptionMsgPrefix"></param>
            <param name="e"></param>
            <param name="st"></param>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.LogFileName">
            <summary>
            LogFileName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.GeneralTrace">
            <summary>
            GeneralTrace
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.LogFileTrace">
            <summary>
            LogFileTrace
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.WstDisplayVerbose">
            <summary>
            Display verbose message notifications on console
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.AdminToolDisplayVerbose">
            <summary>
            Display verbose message notifications on admin tool
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.TraceSqlStart">
            <summary>
            Trace begin execution of SQL commands on Deployments (true/false)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.TraceSqlCompleted">
            <summary>
            Trace execution completed of SQL commands Deployments (true/false)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.TraceSqlInfoMessages">
            <summary>
            Trace SQL Info Messages received from SQL Server during cmd execution (like print, etc)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.TraceSqlError">
            <summary>
            Trace errors received from SQL when executing SQL commands on Deployments (true/false)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.TraceCfgStart">
            <summary>
            Trace begin execution of SQL commands against Config DBs(true/false)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.TraceCfgCompleted">
            <summary>
            Trace execution completed of SQL commands against Config DBs(true/false)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.TraceCfgError">
            <summary>
            Trace errors received from SQL when executing SQL/WST commands against Config DBs (true/false)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.TraceDtcInfo">
            <summary>
            Trace start/end of Distributed Transactions (true/false)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.TraceAgentDB">
            <summary>
            Trace WmoSqlAgentDatabase low level database operations
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.TraceAdminLockInfo">
            <summary>
            Trace start/end of Admin Locks (true/false)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.TraceAdminLockVerbose">
            <summary>
            Trace more detailed AdminLock information (true/false)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.TraceMoveData">
            <summary>
            Trace WstMoveData low level database operations
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.WstWorkItem">
            <summary>
            WstWorkItem
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstWorkItem.#ctor(System.Threading.WaitCallback)">
            <summary>
            WstWorkItem
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstWorkItem.#ctor(System.Threading.WaitCallback,System.Object)">
            <summary>
            WstWorkItem
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstWorkItem.Start">
            <summary>
            Start
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.WstThread">
            <summary>
            WstThread
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThread.#ctor(System.Threading.WaitCallback)">
            <summary>
            WstThread
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThread.#ctor(System.Threading.WaitCallback,System.Object)">
            <summary>
            WstThread
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThread.#ctor(Microsoft.Webstore.Common.WstWorkItem)">
            <summary>
            WstThread
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThread.Start">
            <summary>
            Start
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.WstThreadPool">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="maxThreads"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
            <summary>
            Queue the process. If the active processes are less then the max,
            it will be put on the system queue immediately. Otherwise it
            will wait until a thread is free.
            Defaults the state to NULL
            Defaults the timeout to infinite.
            </summary>
            <param name="threadProc"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
            <summary>
            Queue the process. If the active processes are less then the max,
            it will be put on the system queue immediately. Otherwise it
            will wait until a thread is free.
            Defaults the timeout to infinite.
            </summary>
            <param name="threadProc"></param>
            <param name="state"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object,System.Int32)">
            <summary>
            Queue the process. If the active processes are less then the max,
            it will be put on the system queue immediately. Otherwise it
            will wait until a thread is free.
            If millisecondsTimeout is reached, returns false, otherwise
            returns true.
            </summary>
            <param name="threadProc"></param>
            <param name="state"></param>
            <param name="millisecondsTimeout"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.WstCallback(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.GetThreadPool(System.Int32)">
            <summary>
            Returns a thread pool using the passed in value. If the value is less then
            1, DefaultMaximumThreads is used instead.
            </summary>
            <param name="threadCount"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.GetThreadPool(System.String)">
            <summary>
            Uses passed in string as a call into the System Centralized settings
            for the value. If the setting is missing, uses the default.
            </summary>
            <param name="centralizedSetting"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.GetThreadPool(System.String,System.Int32)">
            <summary>
            Uses passed in string to get the centralized setting for the thread count.
            If the centralized setting does not exist or is less then 1, uses the
            requestedThreads parameter.
            </summary>
            <param name="centralizedSetting"></param>
            <param name="requestedThreads"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.GetCentralizedSettingOverride(System.String)">
            <summary>
            Returns the Setting that matches the settingEntry name. If the settingEntry does not exist
            in the WebstoreMetaData.WebstoreSettings class, it will return the default from this class.
            </summary>
            <param name="settingEntry"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.GetSystemAvailableThreads">
            <summary>
            Retrieves the difference between the maximum number of thread pool
            threads, returned by GetMaxThreads, and the number currently active.
            http://msdn2.microsoft.com/en-us/library/system.threading.threadpool.getavailablethreads.aspx
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.GetSystemMaxThreads">
            <summary>
            Retrieves the number of requests to the thread pool that can be active
            concurrently. All requests above that number remain queued until thread
            pool threads become available.
            http://msdn2.microsoft.com/en-us/library/system.threading.threadpool.getmaxthreads.aspx
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstThreadPool.MaxThreads">
            <summary>
            Property to set or get the maximum number of threads allowed
            for this pool.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstThreadPool.ActiveThreads">
            <summary>
            ActiveThreads are the number of threads in use.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstThreadPool.IsFull">
            <summary>
            Indicates if the pool can accept more processes.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.SQLSprocs.WspGetAdminLock(System.Data.SqlTypes.SqlGuid,System.Int16,System.String,System.Int32@)">
            <summary>
            Get a lock for a failsafe set or partition if available.
            </summary>
            <param name="ResourceUID"></param>
            <param name="ResourceID"></param>
            <param name="ResourceType"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.SQLSprocs.WspReleaseAdminLock(System.Data.SqlTypes.SqlGuid,System.Int16,System.String,System.Int32@)">
            <summary>
            Get a lock for a failsafe set or partition if available.
            </summary>
            <param name="ResourceUID">DeploymentUid</param>
            <param name="ResourceID"></param>
            <param name="ResourceType"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.SQLSprocs.WspUpdateDBStatus(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Int32,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Get all the filegroups and files information
            DeploymentUID is passed in because we need to row lock the deployment table first
            </summary>
            <param name="DeploymentUid"></param>
            <param name="DBUid"></param>
            <param name="Status"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.SQLSprocs.WspUpdateSQLFailSafeSetDemoteDB(System.Data.SqlTypes.SqlGuid,System.Int16,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Demote a database on the physical partition
            </summary>
            <param name="DeploymentUid"></param>
            <param name="SQLFailSafeSetID"></param>
            <param name="DBUid"></param>
            <param name="ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.SQLSprocs.WspGetConfigVersion">
            <summary>
            Compare that current wstconfig version is the same as the one supported
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.SQLSprocs.WspRegisterAdminHistoryStart(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32@)">
            <summary>
            Insert or update a Distribution
            </summary>
            <param name="AuditUID"></param>
            <param name="ParentAuditUID"></param>
            <param name="StartDateTime"></param>
            <param name="StartObjectState"></param>
            <param name="CmdObjectType"></param>
            <param name="CmdOperation"></param>
            <param name="ObjectName"></param>
            <param name="AdditionalArguments"></param>
            <param name="Reason"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.SQLSprocs.WspRegisterAdminHistoryFinish(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32,System.String,System.Int32@)">
            <summary>
            Insert or update Article
            </summary>
            <param name="AuditUID">for [AdminHistory].[AuditUID] column</param>
            <param name="EndDateTime">for [AdminHistory].[EndDateTime] column</param>
            <param name="ResultStatus">for [AdminHistory].[Status] column</param>
            <param name="ErrorMessage">for [AdminHistory].[ErrorMessage] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.SQLSprocs.WspUpdateServerRebootStatus(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.Int16,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Get a lock for a failsafe set or partition if available.
            </summary>
            <param name="DataServerUID"></param>
            <param name="Step"></param>
            <param name="StepDescription"></param>
            <param name="Status"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.SQLSprocs.WspCleanServerRebootStatus(System.Data.SqlTypes.SqlGuid,System.Int32@)">
            <summary>
            Get a lock for a failsafe set or partition if available.
            </summary>
            <param name="DataServerUID"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspCheckWmoVersion(System.String)">
            <summary>
            Compare wmo version and return config version
            </summary>
            <param name="WmoVersion"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterObjectSource(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Int32,System.Int16,System.Int32,System.Data.SqlTypes.SqlDateTime,System.String,System.String,System.Int32@)">
            <summary>
            Insert or update an Object Source
            </summary>
            <param name="ObjectSourceUid"></param>
            <param name="ManifestUID">for [ObjectSource].[ManifestUID] column</param>
            <param name="InstallOrder">for [ObjectSource].[InstallOrder] column</param>
            <param name="SetupStep">for [ObjectSource].[SetupStep] column</param>
            <param name="SourceCRC">for [ObjectSource].[SourceCRC] column</param>
            <param name="SourceModDateTime">for [ObjectSource].[SourceModDateTime] column</param>
            <param name="SourceFileName">for [ObjectSource].[SourceFileName] column</param>
            <param name="SourceText">for [ObjectSource].[SourceText] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspAgentGetFiles(System.Data.SqlTypes.SqlGuid,System.Int16)">
            <summary>
            Get all the filegroups and files information
            </summary>
            <param name="DeploymentUid"></param>
            <param name="SQLFSSNum"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspAgentGetJobSource(System.Data.SqlTypes.SqlGuid,System.Int32,System.Int32)">
            <summary>
            Get the Object Source for Jobs in a Manifest.
            </summary>
            <param name="SqlDatabaseUid"></param>
            <param name="GetPrimaryJobs"></param>
            <param name="GetSecondaryJobs"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspAgentGetRegisteredSecurity(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get all the Accounts belonging belonging to a Deployment
            </summary>
            <param name="DatabaseUid"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspDropDeployment(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            </summary>
            <param name="DeploymentUID"></param>
            <param name="SiteWideDeploymentTicket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspDropManifest(System.Data.SqlTypes.SqlGuid,System.Int32@)">
            <summary>
            Purge manifest and that is no longer in use. Remove from all tables that reference the Manifest.
            </summary>
            <param name="ManifestUID"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetWstConfigDatabase">
            <summary>
            Get information on a file group from SQLDatabase table
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetFileSharesForServer(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get all the SQLDatabases belonging belonging to a Server
            </summary>
            <param name="DataServerUID"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllSQLFileGroups(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get all SQLFileGroups belonging to a Manifest
            </summary>
            <param name="ManifestUID">for SQLFileGroup.ManifestUID column</param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllManifests">
            <summary>
            Get all the Manifests
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllDeployments">
            <summary>
            Get all the Deployments belonging belonging to a Manifest
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllSQLFailSafeSets(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get all the SQLFailSafeSets and databases belonging belonging to a Deployment
            </summary>
            <param name="DeploymentUID">for SQLFailSafeSet.DeploymentUID column</param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllDataPartitions(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get all the LogicalPartitions belonging belonging to a Deployment
            </summary>
            <param name="DeploymentUID">for DataPartition.DeploymentUID column</param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetEnvironment">
            <summary>
            Get information on environment, datacenter, switch and dataserver
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetClientSettings(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get information on a file group from Deployment table
            </summary>
            <param name="DeploymentUID">for [Deployment].[DeploymentUID] column</param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetManifest(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get information on a manifest from Manifest table
            </summary>
            <param name="ManifestUID"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetDeployment(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get information on a file group from Deployment table
            </summary>
            <param name="DeploymentUID">for [Deployment].[DeploymentUID] column</param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetDataServer(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get a specific Server
            </summary>
            <param name="DataServerUid"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterDataServer(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.String,System.String,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlGuid,System.Int32@)">
            <summary>
            Insert or update a DataServer
            </summary>
            <param name="DataServerUID">for [DataServer].[DataServerUID] column</param>
            <param name="ServerName">for [DataServer].[ServerName] column</param>
            <param name="DataCenterName">for [DataServer].[DataCenterName] column</param>
            <param name="ClusterName">for [DataServer].[ClusterUID] column</param>
            <param name="Description">for [DataServer].[Description] column</param>
            <param name="SiteWideServerTicket">for [Environment].[MaxServerTicket] column</param>
            <param name="DistributionDatabaseTemplateUid"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterDeployment(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.String,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime,System.String,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlGuid,System.Int32@)">
            <summary>
            </summary>
            <param name="DeploymentUID">for [Deployment].[DeploymentUID] column</param>
            <param name="ManifestUID">for [Deployment].[ManifestUID] column</param>
            <param name="DeploymentName">for [Deployment].[DeploymentName] column</param>
            <param name="MaxTicket">for [Deployment].[MaxTicket] column</param>
            <param name="MaxPartitionTicket">for [Deployment].[MaxPartitionTicket] column</param>
            <param name="MaxDeleteTicket">for [Deployment].[MaxDeleteTicket] column</param>
            <param name="Description">for [Deployment].[Description] column</param>
            <param name="SystemManifestUID">for [Deployment].[SystemManifestUID] column</param>
            <param name="SiteWideDeploymentTicket">for [Environment].[MaxDeploymentTicket] column</param>
            <param name="PreviousManifestUID"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterEnvironment(System.Data.SqlTypes.SqlGuid,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Insert or update a Deployment
            </summary>
            <param name="EnvironmentUID">for [Environment].[EnvironmentUID] column</param>
            <param name="EnvironmentName">for [Environment].[EnvironmentName] column</param>
            <param name="TicketExpirationInterval">for [Environment].[TicketExpirationInterval] column</param>
            <param name="PollingIntervalClient">for [Environment].[PollingIntervalClient] column</param>
            <param name="PollingOffsetClient">for [Environment].[PollingOffsetClient] column</param>
            <param name="PollingOffsetService">for [Environment].[PollingOffsetService] column</param>
            <param name="HistoryRetentionPeriod">for [Environment].[HistoryRetentionPeriod] column</param>
            <param name="LatencyPollingInterval">for [Environment].[LatencyPollingInterval] column</param>
            <param name="LatencyBucket0">for [Environment].[LatencyBucket0] column</param>
            <param name="LatencyBucket1">for [Environment].[LatencyBucket1] column</param>
            <param name="LatencyBucket2">for [Environment].[LatencyBucket2] column</param>
            <param name="LatencyBucket3">for [Environment].[LatencyBucket3] column</param>
            <param name="LockWaitInterval">for [Environment].[LockWaitInterval] column</param>
            <param name="LockNumRetries">for [Environment].[LockNumRetries] column</param>
            <param name="Ticket">for [Environment].[Ticket] column</param>
            <param name="SiteWideServerTicket">for [Environment].[SiteWideServerTicket] column</param>
            <param name="SiteWideServerDeleteTicket">for [Environment].[SiteWideServerDeleteTicket] column</param>
            <param name="SiteWideDeploymentTicket">for [Environment].[SiteWideDeploymentTicket] column</param>
            <param name="MaxSelfAdminInfoTicket">for [Environment].[MaxSelfAdminInfoTicket ] column</param>
            <param name="MaxSelfAdminInfoDeleteTicket">for [Environment].[MaxSelfAdminInfoDeleteTicket] column</param>
            <param name="MaxSettingsTicket">for [Environment].[MaxSettingsTicket] column</param>
            <param name="MaxSettingsDeleteTicket">for [Environment].[MaxSettingsDeleteTicket] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterClientSettings(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.String,System.Int32,System.Int32,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Insert or update a Deployment
            </summary>
            <param name="DeploymentUID">for [ClientSettings].[DeploymentUID] column</param>
            <param name="FailSafeSetType">for [ClientSettings].[FailSafeSetType] column</param>
            <param name="DefaultReadCmdType"></param>
            <param name="DefaultWriteCmdType"></param>
            <param name="SecondaryStaleThreshold">for [ClientSettings].[SecondaryStaleThreshold] column</param>
            <param name="SecondaryStaleDCThreshold">for [ClientSettings].[SecondaryStaleDCThreshold] column</param>
            <param name="Ticket">for [ClientSettings].[Ticket] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterSQLFileGroup(System.Data.SqlTypes.SqlGuid,System.String,System.Int32@)">
            <summary>
            Insert or update SQLFileGroup
            </summary>
            <param name="ManifestUID">for [SQLFileGroup].[ManifestUID] column</param>
            <param name="Name">for [SQLFileGroup].[Name] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterIPAddress(System.String,System.Data.SqlTypes.SqlGuid,System.String,System.Boolean,System.Int32@)">
            <summary>
            Insert or update an IPAddress
            </summary>
            <param name="IPAddr"></param>
            <param name="DataServerUID">for [IPAddress].[DataServerUID] column</param>
            <param name="SwitchName">for [IPAddress].[SwitchName] column</param>
            <param name="IsPreferred">for [IPAddress].[IsPreferred] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterManifest(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.String,System.Int16,System.String,System.Boolean,System.String,System.String,System.String,System.Int32@)">
            <summary>
            Insert or update a Manifest
            </summary>
            <param name="ManifestUID">for [Manifest].[ManifestUID] column</param>
            <param name="ManifestName">for [Manifest].[ManifestName] column</param>
            <param name="ManifestVersion">for [Manifest].[ManifestVersion] column</param>
            <param name="PartitionType">for [Manifest].[PartitionType] column</param>
            <param name="PartitionCount">for [Manifest].[PartitionCount] column</param>
            <param name="PartitionColumnName">for [Manifest].[PartitionColumnName] column</param>
            <param name="isNoExtraObjectValidation">for [Manifest].[isNoExtraObjectValidation] column</param>
            <param name="TypeOfSQLSecondaries"></param>
            <param name="minSQLServerVersion"></param>
            <param name="Description">for [Manifest].[Description] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterDataPartition(System.Data.SqlTypes.SqlGuid,System.Int32,System.Int32,System.Int32,System.Int32,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Insert or update a DataPartition
            </summary>
            <param name="DeploymentUID">for [DataPartition].[DeploymentUID] column</param>
            <param name="PartitionNum">for [DataPartition].[PartitionNum] column -- bug 4377</param>
            <param name="SQLFSSNum">for [DataPartition].[SQLFSSNum] column -- bug 4377</param>
            <param name="FileShareFSSNum">for [DataPartition].[FileShareFSSNum] column -- bug 4377</param>
            <param name="Status">for [DataPartition].[Status] column</param>
            <param name="Ticket">for [DataPartition].[Ticket] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterAllDataPartitions(System.Data.SqlTypes.SqlGuid,System.String,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Register all logical partitions
            </summary>
            <param name="DeploymentUID"></param>
            <param name="DataPartitions"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterAllSqlFailSafeSets(System.Data.SqlTypes.SqlGuid,System.String,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlGuid,System.Int32@)">
            <summary>
            Bulk Insert SqlFailSafeSet and Database.
            </summary>
            <param name="DeploymentUID"></param>
            <param name="RawXml"></param>
            <param name="Ticket"></param>
            <param name="ManifestUID"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterAllFileFailSafeSets(System.Data.SqlTypes.SqlGuid,System.String,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Bulk Insert FileFailSafeSet and FileShare.
            </summary>
            <param name="DeploymentUID"></param>
            <param name="RawXml"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterReplPublication(System.Data.SqlTypes.SqlGuid,System.String,System.Data.SqlTypes.SqlGuid,System.String,System.String,System.String,System.Int32@)">
            <summary>
            Insert or update a ReplPublication (Manifest)
            </summary>
            <param name="ManifestUID"></param>
            <param name="Name"></param>
            <param name="SourceUid"></param>
            <param name="PublicationType"></param>
            <param name="MMChangeDateTimeColumnName"></param>
            <param name="MMNeedsReplicationColumnName"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterReplArticle(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32@)">
            <summary>
            Insert or update a ReplArticle (Manifest)
            </summary>
            <param name="ManifestUID"></param>
            <param name="PublicationName"></param>
            <param name="ArticleName"></param>
            <param name="SqlTableName"></param>
            <param name="InsertSprocName"></param>
            <param name="UpdateSprocName"></param>
            <param name="DeleteSprocName"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterReplPublicationDeploy(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.Data.SqlTypes.SqlGuid,System.Int32@)">
            <summary>
            Insert or update a ReplPublicationDeploy row
            </summary>
            <param name="DeploymentUID"></param>
            <param name="PublicationName"></param>
            <param name="ManifestPubName"></param>
            <param name="ManifestUid"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterReplDistribDeploy(System.Data.SqlTypes.SqlGuid,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Insert or update a ReplDistribDeploy row
            </summary>
            <param name="DeploymentUid"></param>
            <param name="StaleAlertInterval"></param>
            <param name="DrainInterval"></param>
            <param name="DrainNumRetries"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterSQLFailSafeSet(System.Data.SqlTypes.SqlGuid,System.Int32,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Int32@)">
            <summary>
            Insert or update a SQLFailSafeSet
            </summary>
            <param name="DeploymentUID">for [SQLFailSafeSet].[DeploymentUID] column</param>
            <param name="SQLFSSNum">for [SQLFailSafeSet].[SQLFSSNum] column</param>
            <param name="PrimarySQLDBUID">for [SQLFailSafeSet].[PrimarySQLDBUID] column</param>
            <param name="DfltPriSQLDBUID">for [SQLFailSafeSet].[DfltPriSQLDBUID] column</param>
            <param name="Ticket">for [SQLFailSafeSet].[Ticket] column</param>
            <param name="Status">for [SQLFailSafeSet].[Status] column  -- bug 4377</param>
            <param name="ManifestUID"></param>
            <param name="ClusterUID"></param>
            <param name="DatabaseTemplateUID"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterSecurityAccount(System.Data.SqlTypes.SqlGuid,System.String,System.Int32@)">
            <summary>
            Get a lock for a failsafe set or partition if available.
            </summary>
            <param name="DeploymentUid"></param>
            <param name="AccountName"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterSecurityAccountRole(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.Data.SqlTypes.SqlGuid,System.Int32@)">
            <summary>
            Get a lock for a failsafe set or partition if available.
            </summary>
            <param name="DeploymentUid"></param>
            <param name="AccountName"></param>
            <param name="RoleName"></param>
            <param name="ManifestUid"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterSecurityRole(System.Data.SqlTypes.SqlGuid,System.String,System.Data.SqlTypes.SqlGuid,System.Byte,System.Byte,System.Byte,System.Byte,System.Int32@)">
            <summary>
            Insert or update a SecurityRole
            </summary>
            <param name="ManifestUID">for [SecurityRole].[ManifestUID] column</param>
            <param name="Name">for [SecurityRole].[Name] column</param>
            <param name="SourceUid"></param>
            <param name="SprocGrantMask">for [SecurityRole].[SprocGrantMask] column</param>
            <param name="FunctionGrantMask">for [SecurityRole].[FunctionGrantMask] column</param>
            <param name="TableGrantMask">for [SecurityRole].[TableGrantMask] column</param>
            <param name="ViewGrantMask">for [SecurityRole].[ViewGrantMask] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterSQLDatabase(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.Data.SqlTypes.SqlGuid,System.Int32,System.Data.SqlTypes.SqlDateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Insert or update a SQLDatabase
            </summary>
            <param name="SQLDatabaseUID">for [SQLDatabase].[SQLDatabaseUID] column</param>
            <param name="DataServerName">for [SQLDatabase].[SQLServerName] column</param>
            <param name="SQLDatabaseName">for [SQLDatabase].[SQLDatabaseName] column</param>
            <param name="DeploymentUID">for [SQLDatabase].[DeploymentUID] column</param>
            <param name="SQLFSSNum">for [SQLDatabase].[PhysicalPartitionNum] column -- bug 4377</param>
            <param name="Ticket">for [SQLDatabase].[Ticket] column</param>
            <param name="Status">for [SQLDatabase].[Status] column</param>
            <param name="DefaultStatus">for [SQLDatabase].[DefaultStatus] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterSQLTable(System.Data.SqlTypes.SqlGuid,System.String,System.Data.SqlTypes.SqlGuid,System.String,System.Boolean,System.String,System.Int32@)">
            <summary>
            Insert or update a SQLTable
            </summary>
            <param name="ManifestUID">for [SQLTable].[ManifestUID] column</param>
            <param name="Name">for [SQLTable].[Name] column</param>
            <param name="SourceUid"></param>
            <param name="TableType"></param>
            <param name="IsNonPartitioned">for [SQLTable].[IsNonPartitioned] column</param>
            <param name="PartitionColumnName">for [SQLTable].[PartitionColumnName] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterSQLObject(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.Data.SqlTypes.SqlGuid,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32@)">
            <summary>
            Insert or update the SQLObject table
            </summary>
            <param name="ManifestUID">for SQLObject.ManifestUID column</param>
            <param name="ObjectType">for SQLObject.ObjectType column</param>
            <param name="Name">for SQLObject.Name column</param>
            <param name="SourceUID">for SQLObject.SourceUID column</param>
            <param name="IsInstallOnPrimary">for SQLObject.IsInstallOnPrimary column</param>
            <param name="IsInstallOnSecondary">for SQLObject.IsInstallOnSecondary column</param>
            <param name="IsGenerated">for SQLObject.IsGenerated column</param>
            <param name="IsUpgradeOnly">for SQLObject.IsUpgradeOnly column</param>
            <param name="IsDowngradeOnly">for SQLObject.IsDowngradeOnly column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateDBStatus(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Int32,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Get all the filegroups and files information
            DeploymentUID is passed in because we need to row lock the deployment table first
            </summary>
            <param name="DeploymentUid"></param>
            <param name="DBUid"></param>
            <param name="Status"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateSQLFailSafeSetDemoteDB(System.Data.SqlTypes.SqlGuid,System.Int16,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Demote a database on the physical partition
            </summary>
            <param name="DeploymentUid"></param>
            <param name="SQLFailSafeSetID"></param>
            <param name="DBUid"></param>
            <param name="ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateSQLFailSafeSetPromoteDB(System.Data.SqlTypes.SqlGuid,System.Int16,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Promote a database on the physical partition
            </summary>
            <param name="DeploymentUid"></param>
            <param name="SQLFailSafeSetID"></param>
            <param name="DBUid"></param>
            <param name="ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateSQLFailSafeSetOneStepPromoteDemote(System.Data.SqlTypes.SqlGuid,System.Int16,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Demote a database on the physical partition
            </summary>
            <param name="DeploymentUid"></param>
            <param name="SQLFailSafeSetID"></param>
            <param name="DBToDemoteUid"></param>
            <param name="DBToPromoteUid"></param>
            <param name="ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllDatabaseTemplate">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetDatabaseTemplate(System.Int32@)">
            <summary>
            </summary>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllFileGroup(System.Int32@)">
            <summary>
            </summary>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetFileGroup(System.Data.SqlTypes.SqlGuid)">
            <summary>
            </summary>
            <param name="DatabaseTemplateUid"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllLogicalFile(System.Int32@)">
            <summary>
            </summary>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllLogFile(System.Int32@)">
            <summary>
            </summary>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetLogicalFile(System.Data.SqlTypes.SqlGuid)">
            <summary>
            </summary>
            <param name="DatabaseTemplateUid"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetStripe(System.Data.SqlTypes.SqlGuid)">
            <summary>
            </summary>
            <param name="DatabaseTemplateUid"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllStripe(System.Int32@)">
            <summary>
            </summary>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterDatabaseTemplate(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.Boolean,System.String,System.String,System.Int32@)">
            <summary>
            </summary>
            <param name="DatabaseTemplateUid"></param>
            <param name="Name"></param>
            <param name="Description"></param>
            <param name="IsDistributionOnly"></param>
            <param name="DatabaseBackupAdditionalScript"></param>
            <param name="DatabaseRestoreAdditionalScript"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspDropDatabaseTemplate(System.Data.SqlTypes.SqlGuid,System.Int32@)">
            <summary>
            Drop DatabaseTemplate(s) that are no longer in use.
            </summary>
            <param name="DatabaseTemplateUID"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterFileGroup(System.Data.SqlTypes.SqlGuid,System.String,System.Int32@)">
            <summary>
            </summary>
            <param name="DatabaseTemplateUid"></param>
            <param name="FileGroupName"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterLogicalFile(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32@)">
            <summary>
            </summary>
            <param name="DatabaseTemplateUid"></param>
            <param name="FileGroupName"></param>
            <param name="LogicalFileName"></param>
            <param name="Path"></param>
            <param name="Size"></param>
            <param name="MaxSize"></param>
            <param name="FileGrowth"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterStripe(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.Int32@)">
            <summary>
            </summary>
            <param name="DatabaseTemplateUid"></param>
            <param name="Directory"></param>
            <param name="Share"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateSqlFailSafeSetAssignDatabaseTemplate(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Int16,System.Int32@)">
            <summary>
            </summary>
            <param name="DatabaseTemplateUID"></param>
            <param name="DeploymentUID"></param>
            <param name="SQLFSSNum"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateServerAssignDatabaseTemplate(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Int32@)">
            <summary>
            </summary>
            <param name="DatabaseTemplateUID"></param>
            <param name="DataServerUID"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllDataServers">
            <summary>
            Get all Servers
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetSQLDBsForServer(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get all the SQLDatabases belonging belonging to a Server
            </summary>
            <param name="DataServerUID"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllFileFailSafeSets(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get all the FileFailSafeSets and databases belonging belonging to a Deployment
            </summary>
            <param name="DeploymentUID">for FileFailSafeSet.DeploymentUID column</param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterFileFailSafeSet(System.Data.SqlTypes.SqlGuid,System.Int32,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32,System.Int32@)">
            <summary>
            Insert or update a FileFailSafeSet
            </summary>
            <param name="DeploymentUID">for [FileFailSafeSet].[DeploymentUID] column</param>
            <param name="FileShareFSSNum">for [FileFailSafeSet].[FileShareFSSNum] column  -- bug 4377</param>
            <param name="PrimaryFileShareUID">for [FileFailSafeSet].[PrimaryFileShareUID] column</param>
            <param name="DfltPriFileShareUID">for [FileFailSafeSet].[DfltPriFileShareUID] column</param>
            <param name="Ticket">for [FileFailSafeSet].[Ticket] column</param>
            <param name="Status">for [FileFailSafeSet].[Status] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateFileFailSafeSetDemoteFileShare(System.Data.SqlTypes.SqlGuid,System.Int16,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Demote a file share on the physical partition
            </summary>
            <param name="DeploymentUid"></param>
            <param name="FileFailSafeSetID"></param>
            <param name="FileShareUID"></param>
            <param name="ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateFileFailSafeSetPromoteFileShare(System.Data.SqlTypes.SqlGuid,System.Int16,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Promote a database on the physical partition
            </summary>
            <param name="DeploymentUid"></param>
            <param name="FileFailSafeSetID"></param>
            <param name="FileShareUID"></param>
            <param name="ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterFileShare(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.Data.SqlTypes.SqlGuid,System.Int32,System.Data.SqlTypes.SqlDateTime,System.Int32,System.Int32@)">
            <summary>
            Insert or update a FileShare
            </summary>
            <param name="FileShareUID">for [FileShare].[FileShareUID] column</param>
            <param name="DataServerName">for [FileShare].[SQLServerName] column</param>
            <param name="FileSharePath">for [FileShare].[FileSharePath] column</param>
            <param name="DeploymentUID">for [FileShare].[DeploymentUID] column</param>
            <param name="FileShareFSSNum">for [FileShare].[PhysicalPartitionNum] column  -- bug 4377</param>
            <param name="Ticket">for [FileShare].[Ticket] column</param>
            <param name="Status">for [FileShare].[Status] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateFileShareStatus(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Int32,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Update the FileShare status
            DeploymentUID is passed in because we need to row lock the deployment
            table first
            </summary>
            <param name="DeploymentUid"></param>
            <param name="FileShareUID"></param>
            <param name="Status"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetDeploymentTemplateObjects(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get all information for the DatabaseTemplateObject. This includes default
            File Group info, Jobs, DistributionDefaults, Replication Publication, 
            Subscription and Accounts.
            </summary>
            <param name="DeploymentUid">Guid of the Deployment</param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetClientPollingInterval">
            <summary>
            Get Client Polling Interval
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetJobsForDatabase(System.String,System.String)">
            <summary>
             Get rows from Job table, but only jobs that would be installed on the
             passed in SqlServer and Database.
            </summary>
            <param name="ServerName"></param>
            <param name="SqlDatabaseName"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetObjectSource(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get information on a Object from the ObjectSource table
            </summary>
            <param name="ObjectSourceUID"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateSqlFailSafeSetStatus(System.Data.SqlTypes.SqlGuid,System.Int16,System.Int32,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Update the status to be Deployed or Not Deployed.
            </summary>
            <param name="DeploymentUid"></param>
            <param name="SQLFSSNum"></param>
            <param name="Status"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateSqlFailSafeSetManifestUid(System.Data.SqlTypes.SqlGuid,System.Int16,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Update the MainfestUID of the Sql Fail Safe Set
             DeploymentUID is passed in because we need to row lock the deployment table first.
            </summary>
            <param name="DeploymentUid"></param>
            <param name="SQLFSSNum"></param>
            <param name="ManifestUID"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateFileFailSafeSetStatus(System.Data.SqlTypes.SqlGuid,System.Int16,System.Int32,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Update the status to be Deployed, Not Deployed, upgrading or moving data.
             DeploymentUID is passed in because we need to row lock the deployment
             table first.
            </summary>
            <param name="DeploymentUid"></param>
            <param name="FileShareFSSNum"></param>
            <param name="Status"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetFSSLatency(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get information on a file group from Account table
            </summary>
            <param name="DeploymentUID"></param>
            <param name="DestSQLDBUID"></param>
            <param name="SourceSQLDBUID"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterSQLDatabase(System.Data.SqlTypes.SqlGuid,System.Int32@)">
            <summary>
            Delete from SQLDatabase table
            </summary>
            <param name="SQLDatabaseUID"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateMaxDeleteTicket(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Get all the filegroups and files information
            DeploymentUID is passed in because we need to row lock the deployment table first
            </summary>
            <param name="DeploymentUid"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateMaxTicket(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Get all the filegroups and files information
            DeploymentUID is passed in because we need to row lock the deployment table first
            </summary>
            <param name="DeploymentUid"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAdminHistory(System.String,System.String,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime,System.Int32)">
            <summary>
            Get the history for all objects or a particular object.
            </summary>
            <param name="CmdObjectType"></param>
            <param name="ObjectName"></param>
            <param name="FromDateTime"></param>
            <param name="ToDateTime"></param>
            <param name="Count"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllDPAdminHistory(System.String,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
            <summary>
            Get the history for a deployment
            </summary>
            <param name="DeploymentName"></param>
            <param name="FromDateTime"></param>
            <param name="ToDateTime"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterFileShare(System.Data.SqlTypes.SqlGuid,System.Int32@)">
            <summary>
            Delete from SQLDatabase table
            </summary>
            <param name="FileShareUID"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterIPs(System.Data.SqlTypes.SqlGuid,System.Int32@)">
            <summary>
            Delete from all IPs belonging to one dataserver
            </summary>
            <param name="DataServerUID"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterPartitionMoveMap(System.Data.SqlTypes.SqlGuid,System.Int16,System.Int16,System.Int32,System.String,System.Int32@)">
            <summary>
            </summary>
            <param name="DeploymentUID">for [PartitionMoveMap].[DeploymentUID] column</param>
            <param name="PartitionNum">for [PartitionMoveMap].[PartitionNum] column</param>
            <param name="NewSQLFSSNum">for [PartitionMoveMap].[NewSQLFSSNum] column</param>
            <param name="Status">for [PartitionMoveMap].[Status] column</param>
            <param name="Progress">for [PartitionMoveMap].[Progress] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetPartitionMoveMap(System.Data.SqlTypes.SqlGuid,System.Int16)">
            <summary>
            Get information on a file group from Account table
            </summary>
            <param name="DeploymentUID">for [PartitionMoveMap].[DeploymentUID] column</param>
            <param name="PartitionNum"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetNewPartitionMoveMap(System.Data.SqlTypes.SqlGuid)">
            <summary>
            When adding partition(s), the data needed for the transfer is kept in the PartitionMoveMap table.
            This sproc fetches the relevant data and returns it to the caller.
            </summary>
            <param name="DeploymentUID"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspNewRemapDataPartition(System.Data.SqlTypes.SqlGuid,System.Int16,System.Int16,System.Int32,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Remap DataPartitions using the redesigned movedata system.
            </summary>
            <param name="DeploymentUID"></param>
            <param name="PartitionNum"></param>
            <param name="SQLFSSNum"></param>
            <param name="Status"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspNewUpdateDataPartitionStatus(System.Data.SqlTypes.SqlGuid,System.Int16,System.Int16,System.Int32,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
             Set the status (readonly vs readwrite) on the DataPartition table.
            </summary>
            <param name="DeploymentUID"></param>
            <param name="PartitionNum"></param>
            <param name="SQLFSSNum"></param>
            <param name="Status"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateNewPartitionMoveMapStatus(System.Data.SqlTypes.SqlGuid,System.Int16,System.Int32,System.String,System.Int32@)">
            <summary>
            Set status of a partition that is being moved.
            </summary>
            <param name="DeploymentUID"></param>
            <param name="PartitionNum"></param>
            <param name="Status"></param>
            <param name="Progress"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterPartitionMoveMap(System.Data.SqlTypes.SqlGuid,System.Int16,System.Int16,System.Int16,System.Boolean,System.Int32@)">
            <summary>
            Delete from SQLDatabase table
            </summary>
            <param name="DeploymentUID">for [PartitionMoveMap].[DeploymentUID] column</param>
            <param name="PartitionNum"></param>
            <param name="NewSQLFSSNum"></param>
            <param name="OldSQLFSSNum"></param>
            <param name="IsForce"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterNewPartitionMoveMap(System.Data.SqlTypes.SqlGuid,System.Int32@)">
            <summary>
            </summary>
            <param name="DeploymentUID"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdatePartitionMoveMap(System.Data.SqlTypes.SqlGuid,System.Int16,System.Int16,System.Int32,System.String,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Int32@)">
            <summary>
            Insert or update a Account
            </summary>
            <param name="DeploymentUID">for [PartitionMoveMap].[DeploymentUID] column</param>
            <param name="NewSQLFSSNum">for [PartitionMoveMap].[NewSQLFSSNum] column</param>
            <param name="OldSQLFSSNum">for [PartitionMoveMap].[OldSQLFSSNum] column</param>
            <param name="Status">for [PartitionMoveMap].[Status] column</param>
            <param name="Progress">for [PartitionMoveMap].[Progress] column</param>
            <param name="OldSQLDBUid">for [PartitionMoveMap].[OldSQLDBUid] column</param>
            <param name="NewSQLDBUid">for [PartitionMoveMap].[NewSQLDBUid] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdatePartitionMoveMapProgress(System.Data.SqlTypes.SqlGuid,System.Int16,System.Int16,System.String,System.Int32@)">
            <summary>
            Insert or update a Account
            </summary>
            <param name="DeploymentUID">for [PartitionMoveMap].[DeploymentUID] column</param>
            <param name="NewSQLFSSNum">for [PartitionMoveMap].[NewSQLFSSNum] column</param>
            <param name="OldSQLFSSNum">for [PartitionMoveMap].[OldSQLFSSNum] column</param>
            <param name="Progress">for [PartitionMoveMap].[Progress] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetPartitionMoveMapStatus(System.Data.SqlTypes.SqlGuid,System.Int16)">
            <summary>
            Get the status from the PartitionMoveMap table.
            </summary>
            <param name="DeploymentUID"></param>
            <param name="PartitionNum"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRemapMoveDataPartition(System.Data.SqlTypes.SqlGuid,System.Int16,System.Int16,System.Int16,System.Int32,System.Boolean,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Remap DataPartitions
            </summary>
            <param name="DeploymentUID"></param>
            <param name="PartitionNum"></param>
            <param name="NewSQLFSSNum"></param>
            <param name="OldSQLFSSNum"></param>
            <param name="Status"></param>
            <param name="IsForce"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateMoveDataPartitionStatus(System.Data.SqlTypes.SqlGuid,System.Int16,System.Int16,System.Int32,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Remap DataPartitions
            </summary>
            <param name="DeploymentUID"></param>
            <param name="NewSQLFSSNum"></param>
            <param name="OldSQLFSSNum"></param>
            <param name="Status"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterSQLFailSafeSet(System.Data.SqlTypes.SqlGuid,System.Int16,System.Boolean,System.Int32@)">
            <summary>
            Drop a SqlFailSafeSet. If IsDropPartitions is true, drop the DataPartitions pointing to this FSS.
            </summary>
            <param name="DeploymentUID"></param>
            <param name="SQLFSSNum"></param>
            <param name="IsDropPartitions"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterFileFailSafeSet(System.Data.SqlTypes.SqlGuid,System.Int16,System.Int32@)">
            <summary>
            Delete from SQLDatabase table
            </summary>
            <param name="DeploymentUID"></param>
            <param name="FileShareFSSNum"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterAllFileShares(System.Data.SqlTypes.SqlGuid,System.Int16,System.Int32@)">
            <summary>
            Delete from SQLDatabase table
            </summary>
            <param name="DeploymentUID"></param>
            <param name="FileShareFSSNum"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetNumFilePrimariesOnServer(System.Data.SqlTypes.SqlGuid,System.Int16)">
            <summary>
            Get information on a security role from SQLTable table
            </summary>
            <param name="DeploymentUID"></param>
            <param name="FSSNum"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterDataServer(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Delete from DataServer table
            </summary>
            <param name="DataServerUID"></param>
            <param name="SiteWideServerTicket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllJobsForDatabase(System.String,System.String)">
            <summary>
             Get rows from Job table, but only jobs that would be installed on the
             passed in SqlServer and Database.
            </summary>
            <param name="ServerName"></param>
            <param name="SqlDatabaseName"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterSecurityAccountRole(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.Int32@)">
            <summary>
            Delete from SQLDatabase table
            </summary>
            <param name="DeploymentUID"></param>
            <param name="AccountName"></param>
            <param name="SecurityRole"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterSecurityAccount(System.Data.SqlTypes.SqlGuid,System.String,System.Int32@)">
            <summary>
            Delete from SQLDatabase table
            </summary>
            <param name="DeploymentUID"></param>
            <param name="AccountName"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterMirroringDeploy(System.Data.SqlTypes.SqlGuid,System.Int16,System.String,System.String,System.Int32@)">
            <summary>
            Insert or update the MirroringDeploy table.
            </summary>
            <param name="DeploymentUID">for [MirroringDeploy].[DeploymentUID] column</param>
            <param name="PortNumber">for [MirroringDeploy].[Port] column</param>
            <param name="CompleteDomainName">for [MirroringDeploy].[CompleteDomainName] column</param>
            <param name="EndPointName">for [MirroringDeploy].[EndPointName] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterMirroringEndPoint(System.Data.SqlTypes.SqlGuid,System.Int16,System.String,System.String,System.Int32@)">
            <summary>
            Insert or update the MirroringEndPoint table.
            </summary>
            <param name="DataServerUID">for [MirroringEndPoint].[DeploymentUID] column</param>
            <param name="PortNumber">for [MirroringEndPoint].[Port] column</param>
            <param name="CompleteDomainName">for [MirroringEndPoint].[CompleteDomainName] column</param>
            <param name="EndPointName">for [MirroringEndPoint].[EndPointName] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetServersForCluster(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get all the dataserver belonging to a cluster
            </summary>
            <param name="ClusterUID"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspPurgeCluster(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Drop Cluster(s) that are no longer in use.
            </summary>
            <param name="ClusterUID"></param>
            <param name="TicketIn"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterCluster(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlGuid,System.Int16,System.Byte,System.Int16,System.Int32@)">
            <summary>
            Insert or update a Cluster
            </summary>
            <param name="ClusterUID">for [Cluster].[ClusterUID] column</param>
            <param name="ClusterName">for [Cluster].[ClusterName] column</param>
            <param name="ClusterPath">for [Cluster].[ClusterPath] column</param>
            <param name="Ticket">for [DataServer].[Ticket] column</param>
            <param name="MonitoringServerUID">for [Cluster].[MonitoringServerUID] column</param>
            <param name="MonitoringDataPartitionNum">for [Cluster].[MonitoringDataPartitionNum] column</param>
            <param name="IsCommon"></param>
            <param name="JobStatusDataPartitionNum">for [Cluster].[JobStatusDataPartitionNum] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllClusters">
            <summary>
            Get all the Cluster
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateFssProvPref(System.Data.SqlTypes.SqlGuid,System.Int16,System.Int32,System.Int32,System.Int32,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            update fss provPref
            </summary>
            <param name="DeploymentUID"></param>
            <param name="FSSNum"></param>
            <param name="ProvPref"></param>
            <param name="ProvStatus"></param>
            <param name="FssType"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateSiteWideDeploymentTicket(System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Get all the filegroups and files information
            DeploymentUID is passed in because we need to row lock the deployment table first
            </summary>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateSiteWideServerTicket(System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Get all the filegroups and files information
            DeploymentUID is passed in because we need to row lock the deployment table first
            </summary>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateMaxSelfAdminInfoDeleteTicket(System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Get all the filegroups and files information
            </summary>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateMaxSelfAdminInfoTicket(System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Get all the filegroups and files information
            </summary>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllAlertRules">
            <summary>
            Get all the AlertRule
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllMonitoredData">
            <summary>
            Get all the MonitoredDatums
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterAlertRule(System.Data.SqlTypes.SqlGuid,System.String,System.Byte,System.String,System.Data.SqlTypes.SqlGuid,System.Int32,System.Int32,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Insert or update a AlertRule
            </summary>
            <param name="AlertRuleUid">for [AlertRule].[AlertRuleUid] column</param>
            <param name="Name">for [AlertRule].[Name] column</param>
            <param name="Severity">for [AlertRule].[Severity] column</param>
            <param name="GenerateAlertAt">for [AlertRule].[GenerateAlertAt] column</param>
            <param name="AlertProcessUID">for [AlertRule].[AlertProcessUID] column</param>
            <param name="AlertProcessRetryCount">for [AlertRule].[AlertProcessRetryCount] column</param>
            <param name="AlertProcessRetryPeriod">for [AlertRule].[AlertProcessRetryPeriod] column</param>
            <param name="Ticket">for [AlertRule].[Ticket] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterAlertRule(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Delete from AlertRule table
            </summary>
            <param name="AlertRuleUID"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterAlertRuleCondition(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Byte,System.String,System.String,System.Decimal,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Insert or update a AlertRuleCondition
            </summary>
            <param name="AlertRuleConditionUID">for [AlertCondition].[AlertRuleConditionUID] column</param>
            <param name="AlertRuleUID">for [AlertCondition].[AlertRuleUID] column</param>
            <param name="AlertRuleConditionType">for [AlertCondition].[AlertRuleConditionType] column</param>
            <param name="MonitoredDatumName">for [AlertCondition].[MonitoredDatumUID] column</param>
            <param name="ComparisonOperator">for [AlertCondition].[ComparisonOperator] column</param>
            <param name="Threshold">for [AlertCondition].[Threshold] column</param>
            <param name="Ticket">for [AlertCondition].[Ticket] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterAlertRuleConditions(System.Data.SqlTypes.SqlGuid,System.Byte,System.Int32@)">
            <summary>
            Delete from all AlertRuleCondition belonging to one AlertRule
            </summary>
            <param name="AlertRuleUID">for [AlertCondition].[AlertRuleUID] column</param>
            <param name="AlertRuleConditionType">for [AlertCondition].[AlertRuleConditionType] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspDropAllAlertRuleConditions(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
             Delete all conditions for an Alert Rule.  Used prior to the registration of an ALert Rule.
            </summary>
            <param name="AlertRuleUID"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterMonitoredDatum(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Delete from MonitoredDatum table
            </summary>
            <param name="MonitoredDatumUID"></param>
            <param name="MaxSelfAdminInfoTicket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspDropAllMonitoredDatumProperties(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
             Delete all properties for a Monitored Datum.  Used prior to the registration of a Monitored Datum.
            </summary>
            <param name="MonitoredDatumUID"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterMonitoredDatum(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Insert or update MonitoredData
            </summary>
            <param name="MonitoredDatumUid">for [MonitoredDatum].[MonitoredDatumUid] column</param>
            <param name="Name">for [MonitoredDatum].[Name] column</param>
            <param name="Type">for [MonitoredDatum].[Type] column</param>
            <param name="CollectAt">for [MonitoredDatum].[CollectAt] column</param>
            <param name="SamplingFrequency">for [MonitoredDatum].[SamplingFrequency] column</param>
            <param name="AggregationType">for [MonitoredDatum].[AggregationType] column</param>
            <param name="AggregationInterval">for [MonitoredDatum].[AggregationInterval] column</param>
            <param name="StaleTime">for [MonitoredDatum].[StaleTime] column</param>
            <param name="RatePrecision">for [MonitoredDatum].[RatePrecision] column</param>
            <param name="Ticket">for [MonitoredDatum].[Ticket] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterMonitoredDatumProperty(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.String,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Insert or update a MonitoredDatumProperty (used in Self healing)
            </summary>
            <param name="MonitoredDatumUID"></param>
            <param name="Name"></param>
            <param name="DataType"></param>
            <param name="Value"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllMappingsForServerRole(System.Data.SqlTypes.SqlGuid)">
            <summary>
            </summary>
            <param name="ServerRoleUID"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterServerRoleForMonitoredDatum(System.Data.SqlTypes.SqlGuid,System.String,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Insert or update a mapping for a server role and monitoreddatum
            </summary>
            <param name="ServerRoleUID">for [ServerRoleMonitoredDatumMapping].[ServerRoleUID] column</param>
            <param name="MonitoredDatumName">for [ServerRoleMonitoredDatumMapping].[MonitoredDatumUID] column</param>
            <param name="Ticket">for [ServerRoleMonitoredDatumMapping].[Ticket] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterServerRoleForMonitoredDatum(System.Data.SqlTypes.SqlGuid,System.String,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            remove a mapping for a server role and monitoreddatum
            </summary>
            <param name="ServerRoleUID">for [ServerRoleMonitoredDatumMapping].[ServerRoleUID] column</param>
            <param name="MonitoredDatumName">for [ServerRoleMonitoredDatumMapping].[MonitoredDatumUID] column</param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterServerRoleForAlertRule(System.Data.SqlTypes.SqlGuid,System.String,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Insert or update a mapping for a server role and alert rule
            </summary>
            <param name="ServerRoleUID">for [ServerRoleAlertRuleMapping].[ServerRoleUID] column</param>
            <param name="AlertRuleName">for [ServerRoleAlertRuleMapping].[AlertRuleUID] column</param>
            <param name="Ticket">for [ServerRoleAlertRuleMapping].[Ticket] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterServerRoleForAlertRule(System.Data.SqlTypes.SqlGuid,System.String,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            remove a mapping for a server role and AlertRule
            </summary>
            <param name="ServerRoleUID">for [ServerRoleAlertRuleMapping].[ServerRoleUID] column</param>
            <param name="AlertRuleName">for [ServerRoleAlertRuleMapping].[AlertRuleUID] column</param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateSqlFailSafeSetMMDropReplication(System.Data.SqlTypes.SqlGuid,System.Int16,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Update the MainfestUID of the Sql Fail Safe Set
             DeploymentUID is passed in because we need to row lock the deployment table first.
            </summary>
            <param name="DeploymentUid"></param>
            <param name="SQLFSSNum"></param>
            <param name="MMDropReplication"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateSqlFailSafeSetSavedState(System.Data.SqlTypes.SqlGuid,System.Int16,System.Int32@)">
            <summary>
            Update the SavedState of the Sql Fail Safe Set
             DeploymentUID is passed in because we need to row lock the deployment table first.
            </summary>
            <param name="DeploymentUid"></param>
            <param name="SQLFSSNum"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetSqlFailSafeSetSavedState(System.Data.SqlTypes.SqlGuid,System.Int16)">
            <summary>
            Get Saved State from the Sql Fail Safe Set
             DeploymentUID is passed in because we need to row lock the deployment table first.
            </summary>
            <param name="DeploymentUid"></param>
            <param name="SQLFSSNum"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetFailSafeSetReplPublicationDeploy(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
            <summary>
            </summary>
            <param name="DeploymentUID"></param>
            <param name="ManifestUID"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterSqlFssLatency(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Int32,System.Int32,System.Boolean,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Insert a placeholder row in the SqlFssLatency table if it doesn't exist.
            </summary>
            <param name="SourceSQLDBUID"></param>
            <param name="DestSQLDBUID"></param>
            <param name="Latency"></param>
            <param name="LatencyBucket"></param>
            <param name="IsForce"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspBulkRegisterSqlFssLatency(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Inserts or sets a placeholder row in the SqlFssLatency table
            </summary>
            <param name="DeploymentUID"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllServerRoles">
            <summary>
            Get all the Cluster
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetServerRolesForDataServer(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get all ServerRoles belonging to a DataServer
            </summary>
            <param name="DataServerUID">for DatatServer.DataServerUID column</param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspDropAllServerRolesForDataServer(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
             Delete all server roles on a data server. Used during DataServer Update.
            </summary>
            <param name="DataServerUID"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspDropAllMonitoringDataForServerRole(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
             Delete all monitored data and alert rules for a server role. Used during Server Role Mappings Update.
            </summary>
            <param name="ServerRoleUID"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterServerRole(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.Int32@)">
            <summary>
            Insert or update a ServerRole
            </summary>
            <param name="ServerRoleUID">for [ServerRole].[ServerRoleUID] column</param>
            <param name="ServerRoleName">for [ServerRole].[ServerRoleName] column</param>
            <param name="ServerRoleDescription">for [ServerRole].[ServerRoleDescription] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterServerRole(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Delete from ServerRole table
            </summary>
            <param name="ServerRoleUID"></param>
            <param name="SiteWideServerTicket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterServerRoleForDataServer(System.Data.SqlTypes.SqlGuid,System.String,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Insert or update a ServerRole
            </summary>
            <param name="DataServerUID">for [ServerRoleDataServerMapping].[DataServerUID] column</param>
            <param name="ServerRoleName">for [ServerRoleDataServerMapping].[ServerRoleUID] column</param>
            <param name="Ticket">for [ServerRoleDataServerMapping].[Ticket] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllSettings">
            <summary>
            Get all the Centralized Settings
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterSetting(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.String,System.Int16,System.Int16,System.Int16,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Get all the filegroups and files information
            </summary>
            <param name="SettingUid"></param>
            <param name="SettingName"></param>
            <param name="SettingValueType"></param>
            <param name="SettingDefaultValue"></param>
            <param name="SettingOverrideLevel"></param>
            <param name="isWebstoreSetting"></param>
            <param name="IsSettingFromFile"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateClientServerSetting(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.String,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Get all the filegroups and files information
            </summary>
            <param name="SettingUid"></param>
            <param name="ClientServerUid"></param>
            <param name="SettingValue"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateClusterSetting(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.String,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Get all the filegroups and files information
            </summary>
            <param name="SettingUid"></param>
            <param name="ClusterUid"></param>
            <param name="SettingValue"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateDeploymentSetting(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.String,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Get all the filegroups and files information
            </summary>
            <param name="SettingUid"></param>
            <param name="DeploymentUid"></param>
            <param name="SettingValue"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateServerRoleSetting(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.String,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Get all the filegroups and files information
            </summary>
            <param name="SettingUid"></param>
            <param name="ServerRoleUid"></param>
            <param name="SettingValue"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRemoveDeploymentSetting(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
             removes the the setting from the DeploymentSetting table.
            </summary>
            <param name="SettingUid"></param>
            <param name="DeploymentUid"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRemoveClusterSetting(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
             removes the the setting from the ClusterSetting table.
            </summary>
            <param name="SettingUid"></param>
            <param name="ClusterUid"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRemoveServerRoleSetting(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
             removes the the setting from the ServerRoleSetting table.
            </summary>
            <param name="SettingUid"></param>
            <param name="ServerRoleUid"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRemoveClientServerSetting(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
             removes the the setting from the ServerSetting table.
            </summary>
            <param name="SettingUid"></param>
            <param name="DataServerUid"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspDropSetting(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
             removes the the setting from the ServerSetting table.
            </summary>
            <param name="SettingUid"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateGlobalSetting(System.Data.SqlTypes.SqlGuid,System.String,System.Int16,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Get all the filegroups and files information
            </summary>
            <param name="SettingUid"></param>
            <param name="SettingValue"></param>
            <param name="IsResetValue"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspResetGlobalSetting(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Get all the filegroups and files information
            </summary>
            <param name="SettingUid"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetDataSetOfFileGroupsAndLogicalFiles(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get the FileGroups and LogicalFiles information
            </summary>
            <param name="DatabaseTemplateUID"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateSqlFailSafeSetWitnessServer(System.Data.SqlTypes.SqlGuid,System.Int16,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Update the MainfestUID of the Sql Fail Safe Set
             DeploymentUID is passed in because we need to row lock the deployment table first.
            </summary>
            <param name="DeploymentUid"></param>
            <param name="SQLFSSNum"></param>
            <param name="WitnessServerUid"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetMirroringTimeout(System.String)">
            <summary>
            Compare wmo version and return config version
            </summary>
            <param name="DeploymentName"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetDeploymentAndInUseObjects(System.Data.SqlTypes.SqlGuid)">
            <summary>
            </summary>
            <param name="DeploymentUID"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterAction(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.String,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Insert or update a Action (used in Self healing)
            </summary>
            <param name="ActionUID"></param>
            <param name="Name"></param>
            <param name="Type"></param>
            <param name="Description"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterAction(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Delete an Action
            </summary>
            <param name="ActionUID"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspDropAllActionProperties(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
             Delete all properties for an Action. Used prior to the registration of an action.
            </summary>
            <param name="ActionUID"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterActionProperty(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.String,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Insert or update a ActionProperty (used in Self healing)
            </summary>
            <param name="ActionUID"></param>
            <param name="Name"></param>
            <param name="DataType"></param>
            <param name="Value"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllAction">
            <summary>
             Return all rows in the Action table
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterAlertProcess(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.String,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Insert or update a AlertProcess (used in Self healing)
            </summary>
            <param name="AlertProcessUID"></param>
            <param name="Name"></param>
            <param name="Description"></param>
            <param name="StartActionId"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterAlertProcess(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Delete an AlertProcess
            </summary>
            <param name="AlertProcessUID"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllAlertProcess">
            <summary>
             Return all rows in the AlertProcess table
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterProcessAction(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.String,System.String,System.String,System.String,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Insert or update a Action (used in Self healing)
            </summary>
            <param name="AlertProcessUID"></param>
            <param name="ActionUID"></param>
            <param name="Id"></param>
            <param name="OnProceedId"></param>
            <param name="OnFailureId"></param>
            <param name="OnResolveId"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetProcessAction">
            <summary>
             Return all rows in the ProcessAction table
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterAllProcessAction(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
             Delete all ProcessActions under an AlertProcess. Called as part of
             deleting or updating the AlertProcess. It should not be called directly.
            </summary>
            <param name="AlertProcessUID"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterJob(System.String,System.Int32,System.String,System.String,System.String,System.Int32,System.String,System.String,System.String,System.Int32,System.Int32,System.Int16,System.Int32@)">
            <summary>
            Get all the Centralized Settings
            </summary>
            <param name="jobName"></param>
            <param name="DOP"></param>
            <param name="batch"></param>
            <param name="location"></param>
            <param name="machineClass"></param>
            <param name="nMachines"></param>
            <param name="assemblyName"></param>
            <param name="version"></param>
            <param name="arguments"></param>
            <param name="numRetries"></param>
            <param name="retryInterval"></param>
            <param name="isDisabled"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterJobSchedule(System.String,System.Int32,System.Int32,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get all the Centralized Settings
            </summary>
            <param name="jobName"></param>
            <param name="scheduleNumber"></param>
            <param name="schedulePriority"></param>
            <param name="startDate"></param>
            <param name="startTime"></param>
            <param name="scheduleType"></param>
            <param name="reccurenceType"></param>
            <param name="occursOn"></param>
            <param name="maxScheduleDelta"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspDropJob(System.String,System.Int32@)">
            <summary>
            Get all the Centralized Settings
            </summary>
            <param name="jobName"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspDropJobSchedule(System.String,System.Int32,System.Int32@)">
            <summary>
            Get all the Centralized Settings
            </summary>
            <param name="jobName"></param>
            <param name="scheduleNumber"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllJobFrameworkJobs">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateSQLFailSafeSetSyncMirroring(System.Data.SqlTypes.SqlGuid,System.Int16,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            </summary>
            <param name="DeploymentUid"></param>
            <param name="SQLFailSafeSetID"></param>
            <param name="DBUid"></param>
            <param name="ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspAddLinkedServer(System.String,System.Int32@)">
            <summary>
            Add a linked server
            </summary>
            <param name="remoteServer"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspAddSubscription(System.String,System.String,System.String,System.Boolean,System.Int32@)">
            <summary>
            Add a subscription
            </summary>
            <param name="Publication"></param>
            <param name="SubscribingDB"></param>
            <param name="SubscribingServer"></param>
            <param name="IsPaused"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspCheckSubscription(System.String,System.String,System.String,System.Int32@)">
            <summary>
            Check if subscription exists
            1-Subscription is there
            0-Subscription is missing
            </summary>
            <param name="Publication"></param>
            <param name="SubscribingDB"></param>
            <param name="SubscribingServer"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspCheckDrainableSubscription(System.String,System.String,System.String,System.Int32@)">
            <summary>
            Check if subscription exists
            1-Subscription is there
            0-Subscription is missing
            </summary>
            <param name="Publication"></param>
            <param name="SubscribingDB"></param>
            <param name="SubscribingServer"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspCheckDrainableLogreader(System.String,System.Int32@)">
            <summary>
            Check if logreader exists
            1-logreader is there
            0-logreader is missing
            </summary>
            <param name="Publication"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspMSInsSingleMaster(System.String,System.String)">
            <summary>
            generate insert repl sproc for single master
            </summary>
            <param name="dest_tabname"></param>
            <param name="dest_proc"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspMSUpdSingleMaster(System.String,System.String)">
            <summary>
            generate update repl sproc for single master
            </summary>
            <param name="dest_tabname"></param>
            <param name="dest_proc"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspMSDelSingleMaster(System.String,System.String)">
            <summary>
            generate delete repl sproc for single master
            </summary>
            <param name="dest_tabname"></param>
            <param name="dest_proc"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspMSInsMultiMaster(System.String,System.String,System.String,System.String)">
            <summary>
            generate insert repl sproc for mutli master
            </summary>
            <param name="dest_tabname"></param>
            <param name="dest_proc"></param>
            <param name="dt_colname"></param>
            <param name="ti_NeedsRepl_colname"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspMSUpdMultiMaster(System.String,System.String,System.String,System.String)">
            <summary>
            generate update repl sproc for mutli master
            </summary>
            <param name="dest_tabname"></param>
            <param name="dest_proc"></param>
            <param name="dt_colname"></param>
            <param name="ti_NeedsRepl_colname"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspMSDelMultiMaster(System.String,System.String)">
            <summary>
            generate delete repl sproc for multimaster
            </summary>
            <param name="dest_tabname"></param>
            <param name="dest_proc"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspDropSubscription(System.String,System.String,System.String,System.Int32@)">
            <summary>
            Drop a subscription
            </summary>
            <param name="Publication"></param>
            <param name="SubscribingDB"></param>
            <param name="SubscribingServer"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspDropAllSubscription(System.String,System.Int32@)">
            <summary>
            Drop all subscription
            </summary>
            <param name="Publication"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspDropPublication(System.String,System.Int32@)">
            <summary>
            Add a publication
            </summary>
            <param name="publicationName"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspGetWebstoreFSSLatency(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get information on a file group from Account table
            </summary>
            <param name="SourceUID"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspUpdateWebstoreFSSLatency(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Insert or update WebstoreFSSLatency
            </summary>
            <param name="SourceUID"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspInitializeWebstoreFSSLatency(System.Data.SqlTypes.SqlGuid,System.Int32@)">
            <summary>
            </summary>
            <param name="SourceUID"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspGetReplTimeStamp(System.String,System.String)">
            <summary>
            Get the transaction timestamp for the publication from the given publishing db
            </summary>
            <param name="PublishingServer"></param>
            <param name="PublishingDB"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspCheckColumnExist(System.String,System.String,System.Int32@)">
            <summary>
            Get information on a file group from Account table
            </summary>
            <param name="TableName"></param>
            <param name="ColumnName"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspGetActivePrimaryProcess(System.String)">
            <summary>
            Get information on a file group from SQLDatabase table
            </summary>
            <param name="DatabaseName"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspDropJob(System.String,System.Int32@)">
            <summary>
            Drop job
            </summary>
            <param name="JobName"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspDisEnableJob(System.String,System.Boolean,System.Int32@)">
            <summary>
            Disable/Enable job
            </summary>
            <param name="JobName"></param>
            <param name="fDisEnable"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspStartJob(System.String,System.Int32@)">
            <summary>
            Start a distribution job
            </summary>
            <param name="JobName"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspEnableJob(System.String,System.Int32@)">
            <summary>
            Start a distribution job
            </summary>
            <param name="JobName"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspStopJob(System.String,System.Int32@)">
            <summary>
            Stop a job
            </summary>
            <param name="JobName"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspGetLogReaderJobName(System.String,System.String)">
            <summary>
            Get log reader job name
            </summary>
            <param name="PublishingServer"></param>
            <param name="PublishingDatabase"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspGetDistributionJobName(System.String,System.String,System.String,System.String)">
            <summary>
            Start a distribution job
            </summary>
            <param name="PublishingServer"></param>
            <param name="PublishingDatabase"></param>
            <param name="SubscribingServer"></param>
            <param name="SubscribingDatabase"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspCheckJobStatus(System.String)">
            <summary>
            </summary>
            <param name="JobName"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspAddAccountToRole(System.String,System.String,System.Int32@)">
            <summary>
            Insert or update a Account
            </summary>
            <param name="LoginName"></param>
            <param name="Role"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspDropAccountFromRole(System.String,System.String,System.Int32@)">
            <summary>
            Insert or update a Account
            </summary>
            <param name="LoginName"></param>
            <param name="Role"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspDeleteWebstorePartitionMoveMap(System.Int16,System.Int16,System.Int16,System.Int32@)">
            <summary>
            Insert or update WebstorePartitionMoveMap
            </summary>
            <param name="NewSQLFSSNum"></param>
            <param name="OldSQLFSSNum"></param>
            <param name="PartitionNum"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspUpdateWebstorePartitionMoveMap(System.Int16,System.Int16,System.Int16,System.Int32,System.Int32@)">
            <summary>
            Insert or update WebstorePartitionMoveMap
            </summary>
            <param name="NewSQLFSSNum"></param>
            <param name="OldSQLFSSNum"></param>
            <param name="PartitionNum"></param>
            <param name="Status"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspRegisterWebstorePartitionMoveMap(System.Int16,System.Int16,System.Int16,System.Boolean,System.Int32,System.Int32@)">
            <summary>
            Insert or update WebstorePartitionMoveMap
            </summary>
            <param name="NewSQLFSSNum"></param>
            <param name="OldSQLFSSNum"></param>
            <param name="PartitionNum"></param>
            <param name="IsSource"></param>
            <param name="Status"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspGetWebstorePartitionMoveMap(System.Int16,System.Int16,System.Int16)">
            <summary>
            Get information on a file group from Account table
            </summary>
            <param name="NewSQLFSSNum"></param>
            <param name="OldSQLFSSNum"></param>
            <param name="PartitionNum"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspUpdateWebstoreBcpInfo(System.Int16,System.Int16,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Int32@)">
            <summary>
            Insert or update WebstoreBcpInfo
            </summary>
            <param name="NewSQLFSSNum"></param>
            <param name="OldSQLFSSNum"></param>
            <param name="TableName"></param>
            <param name="BcpOut"></param>
            <param name="BcpIn"></param>
            <param name="BcpTotal"></param>
            <param name="Status"></param>
            <param name="Progress"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspUpdateWebstoreBcpInfoStatus(System.Int16,System.Int16,System.String,System.Int32,System.Int32@)">
            <summary>
            Insert or update WebstoreBcpInfo
            </summary>
            <param name="NewSQLFSSNum"></param>
            <param name="OldSQLFSSNum"></param>
            <param name="TableName"></param>
            <param name="Status"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspDeleteWebstoreBcpInfo(System.Int16,System.Int16,System.String,System.Int32@)">
            <summary>
            Insert or update WebstoreBcpInfo
            </summary>
            <param name="NewSQLFSSNum"></param>
            <param name="OldSQLFSSNum"></param>
            <param name="TableName"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspRegisterWebstoreBcpInfo(System.Int16,System.Int16,System.String,System.String,System.String,System.Int32,System.Int32@)">
            <summary>
            Insert or update WebstoreBcpInfo
            </summary>
            <param name="NewSQLFSSNum"></param>
            <param name="OldSQLFSSNum"></param>
            <param name="TableName"></param>
            <param name="Filter_clause"></param>
            <param name="BcpFile"></param>
            <param name="Status"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspGetWebstoreBcpInfo(System.Int16,System.Int16,System.String)">
            <summary>
            Get information on a file group from Account table
            </summary>
            <param name="NewSQLFSSNum"></param>
            <param name="OldSQLFSSNum"></param>
            <param name="TableName"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspGetDeleteMoveDataQuery(System.String,System.String,System.Int32)">
            <summary>
            Get information on a file group from Account table
            </summary>
            <param name="table_name"></param>
            <param name="hash_column"></param>
            <param name="batch_size"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspGetDeleteMoveDataCount(System.String,System.String)">
            <summary>
            Get information on a file group from Account table
            </summary>
            <param name="table_name"></param>
            <param name="hash_column"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspGetSelectMoveDataQuery(System.Int16,System.Int16,System.String,System.String,System.String)">
            <summary>
            Get information on a file group from Account table
            </summary>
            <param name="NewSQLFSSNum"></param>
            <param name="OldSQLFSSNum"></param>
            <param name="TableName"></param>
            <param name="DataPartitionColumnName"></param>
            <param name="NeedsReplColumnName"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspGetDBRecoveryMode(System.String)">
            <summary>
            Add a subscription
            </summary>
            <param name="vcDatabase"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspRevokeDBAccess(System.String,System.Int32@)">
            <summary>
            Insert or update a Account
            </summary>
            <param name="LoginName"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspGetActualFileGroups">
            <summary>
            Get FileGroups and Logical files that actually make up a database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspMarkNeedsRepl(System.String,System.String,System.String,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            </summary>
            <param name="UpdateDateTimeColumn"></param>
            <param name="NeedsReplicationColumn"></param>
            <param name="TableName"></param>
            <param name="StartDateTime"></param>
            <param name="EndDateTime"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspMarkNeedsReplByPartition(System.String,System.String,System.String,System.Int16,System.Int32@)">
            <summary>
            </summary>
            <param name="TableName"></param>
            <param name="NeedsReplicationColumn"></param>
            <param name="PartitionColumn"></param>
            <param name="PartitionNumber"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspMarkNeedsReplAll(System.String,System.String,System.Int32@)">
            <summary>
            </summary>
            <param name="TableName"></param>
            <param name="NeedsReplicationColumn"></param>
            <param name="retVal"></param>
        </member>
        <member name="T:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy">
            <summary>
            Mirrors the WebstoreBulkCopy table used in MoveData processing.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstMoveData.WebstoreTableBase">
            <summary>
            Used for the comment elements that define the Webstore tables on the destination
            application databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreTableBase.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreTableBase.#ctor(System.String,System.Int16,System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreTableBase.DeploymentName">
            <summary>
            The deployment name where the bulk copy process is occuring.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreTableBase.PartitionNumber">
            <summary>
            The parition number that has data that is being moved.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreTableBase.NewPartitionNumber">
            <summary>
            The new partition number that has data that is being moved. This is reserverd
            for variable partitioning.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreTableBase.DestinationServerName">
            <summary>
            The server where the bulk data is being moved to. It also contains working
            information such as status, tables to be moved, column names to be used, etc. 
            See the WebstorePartitionMoveMap and WebstoreBulkCopy classes.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreTableBase.DestinationDatabaseName">
            <summary>
            The database that resides on the destination server. See the DestinationServer
            for more details.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.#ctor">
            <summary>
            Default constructor initializes the deploymentName and partitionNumber to empty values.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.#ctor(System.String,System.Int16,System.String,System.String)">
            <summary>
            Minimum value list constructor.
            </summary>
            <param name="deploymentName"></param>
            <param name="partitionNumber"></param>
            <param name="destinationServer"></param>
            <param name="destinationDatabase"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.Insert">
            <summary>
            Call to insert a preliminary row into the WebstoreBulkCopy table.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.Get(System.Data.SqlClient.SqlDataReader)">
            <summary>
            Fills in the object with the data from the WebstoreBulkCopyIn table.
            Called from the collection class and from the Get() method.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.Update(System.DateTime,System.DateTime,System.Int64,System.String)">
            <summary>
            Call to update start time, end time, copy count and other variables as needed during processing.
            Pass in a MinTime for Start Time to leave the existing value "as is"
            Pass in a MinTime for End Time and the value will be set to NULL in the table.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.Update">
            <summary>
            Call to update WebstoreBulkCopy based on member variables.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.OnSqlRowsCopied(System.Object,System.Data.SqlClient.SqlRowsCopiedEventArgs)">
            <summary>
            Event Handler for SqlBuilkCopy RowsCopied. It is invokded every "NotifyAfter"
            number of records.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.Validate">
            <summary>
            Validate the internal variables of the class.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.Equals(Microsoft.Webstore.WstMoveData.WebstoreBulkCopy)">
            <summary>
            IComparable function to return true/false on a bulkCopy object being equal.
            </summary>
            <param name="bulkCopy"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.CompareTo(Microsoft.Webstore.WstMoveData.WebstoreBulkCopy)">
            <summary>
            Uses InstallOrder followed by table name order for sorting.
            </summary>
            <param name="bulkCopy"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.System#IComparable#CompareTo(System.Object)">
            <summary>
            Compares a generic object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.TableName">
            <summary>
            The table in the sql database that has data in the partition that is being moved.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.InstallOrder">
            <summary>
            The order the tables are bulk copied into.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.PartitionNumberColumnName">
            <summary>
            The column name that indicates the partition for the data. Used in the filter
            queries.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.SqlBulkCopyFilter">
            <summary>
            The filter used for the SqlBulkCopy command.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.CleanUpFilter">
            <summary>
            The filter used for cleaning up source FSSes once the data has been copied.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.ProgressMessage">
            <summary>
            This message is updated by the bulk copy process.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.CreateDateTime">
            <summary>
            The date/time when the WMO created this record.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.StartTime">
            <summary>
            The start time when the process begins to WebstoreBulkCopy the data into the table.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.EndTime">
            <summary>
            The end time when the process finishes the WebstoreBulkCopy.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.CopyCount">
            <summary>
            The number of rows that have been copied into the table.
            This value is continuously updated during the process.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.IsInCollection">
            <summary>
            Flag that indicates that this object is a member of the WebstoreBulkCopyCollection.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection">
            <summary>
            Collection class for WebstoreBulkCopy
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.#ctor(System.String,System.Int16,System.String,System.String)">
            <summary>
            Full constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.Get">
            <summary>
            Get the data from the WebstoreBulkCopy table.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.Insert(System.String,System.String)">
            <summary>
            After adding each item to the collection call this method to insert them all.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.Delete">
            <summary>
            Delete all rows from the WebstoreBulkCopy table given the PartitionNumber.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.IndexOf(System.String,System.Int16,System.String)">
            <summary>
            Returns the index of the first object of the given name.
            </summary>
            <returns>
            The 0-based index of the first object with the name.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.Sort">
            <summary>
            Sorts the array.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.Reverse">
            <summary>
            Sorts the array in reverse order.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.ObjectAtIndex(System.Int32)">
            <summary>
            Returns the object at a given index in the internal array.
            used only by the enumerator.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.Contains(System.String,System.Int16,System.String)">
            <summary>
            Tests whether the collection contains an object of the given name.
            </summary>
            <returns>
            true if the collection contains an object identified by the name;
            false if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            required for ICollection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.Add(Microsoft.Webstore.WstMoveData.WebstoreBulkCopy)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.Remove(System.String,System.Int16,System.String)">
            <summary>
            Removes an object from the object collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.GetEnumerator">
            <summary>
            Gets the IEnumerator for this WmoDatabaseCollection.  This is meant to
            support the foreach statement.
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.Clear">
            <summary>
            remove all elements
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.Objects">
            <summary>
            Access to the internal array
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.Count">
            <summary>
            count of objects in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.Item(System.String,System.Int16,System.String)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.IsSynchronized">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.SyncRoot">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.WebstoreBulkCopyEnumerator">
            <summary>
            This class implements the IEnumerator over a WebstoreBulkCopyCollection
            in support of the "foreach" keyword
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.WebstoreBulkCopyEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.WebstoreBulkCopyEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            Must be called before accessing the Current element.
            </summary>
            <returns>
            true if enumerator successfully advanced to next element;
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.WebstoreBulkCopyEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap">
            <summary>
            Defines the elements existing in the application database WebstorePartitionMoveMap
            table.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.GetConnectionString(System.String,System.String)">
            <summary>
            Based on where this code is compiled, the connection string is retrieved from the
            WmoSqlAgentDatabase.GetConnectionString or from the WstSqlCmdHelper.GetConnectionString.
            </summary>
            <param name="serverName"></param>
            <param name="databaseName"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.#ctor">
            <summary>
            The minimum constructor requires nothing, DeploymentName and PartitionNumber
            are given default values.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.#ctor(System.String,System.Int16,System.String,System.String)">
            <summary>
            Constructor that defines the essential elements of the class. Given these details,
            a call to the database through Get() will get any additional details.
            </summary>
            <param name="deploymentName"></param>
            <param name="partitionNumber"></param>
            <param name="destinationServer"></param>
            <param name="destinationDatabase"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.Insert">
            <summary>
            Used by the WMO, this method inserts the values needed for the BulkCopy process.
            This includes the names of the partition columns, the needs replication columns,
            and the source and destination.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.Get">
            <summary>
            Get the data from the WebstorePartitionMoveMap table.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.CheckForWebstorePartitionMoveMapTable">
            <summary>
            Check the database for the correct objects.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.Get(System.Data.SqlClient.SqlDataReader)">
            <summary>
            Fills in the object with the data from the WebstorePartitionMoveMap table.
            Called from the collection class and from the Get() method.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.Update(Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus,System.String)">
            <summary>
            Call to update status while moving data.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.GetSqlBulkCopyFilter(Microsoft.Webstore.WstMoveData.WebstoreBulkCopy)">
            <summary>
            Get the filter used for SqlBulkCopy. The filter uses the required field
            PartitionNumberColumnName, and the optional field needsReplicationColumnName
            along with the IsMultiMaster column to build a select clause for SqlBulkCopy.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.GetCleanUpFilter(Microsoft.Webstore.WstMoveData.WebstoreBulkCopy)">
            <summary>
            Get the filter used for CleanUp of source FSSes after the data has been copied.
            The filter uses the required field PartitionNumberColumnName and CleanBatchSize
            to build a delete clause for SqlBulkCopy.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.SourceServerName">
            <summary>
            The SourceServerName is the location where the WebstoreBulkCopy is coming from.
            It is also used for status updates.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.SourceDatabaseName">
            <summary>
            The SourceDatabaseName is the location where the WebstoreBulkCopy is coming from.
            It is also used for status updates.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.NeedsReplicationColumnName">
            <summary>
            The column name used for MultiMaster replication. The query that generates the
            SqlBulkCopy filter sets this value to false if IsMultuMaster is true.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.IsMultiMaster">
            <summary>
            Indicates that the deployment is MultiMaster. Used for generating the filter
            used by SqlBulkCopy.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.SqlBulkCopyBatchSize">
            <summary>
            Batch size used during SqlBulkCopy. Default is 1000 rows.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.SqlBulkCopyTimeOut">
            <summary>
            Time out value used during bulk copy processing. Default is 8 hours (28800)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.CleanUpBatchSize">
            <summary>
            Used during cleanup. This is the number of rows to delete at a time. Default is 1000 rows.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.CleanUpDelay">
            <summary>
            The delay string used in the Cleanup filter. The default is 1/10th of a second.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.Status">
            <summary>
            Status values maintained by the process in the WebstorePartitionMoveMap table on
            the local application database server.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.StatusMessage">
            <summary>
            Freeform text that gives the moving status for this partition.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.CreateDateTime">
            <summary>
            When the MoveMap row was created. Read only.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.UpdateDateTime">
            <summary>
            The last time the MoveMap row was updated. Updates only occurs for Status
            and StatusMessage updates.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.IsInCollection">
            <summary>
            Determines if this object is part of the WebstorePartitionMoveMapCollection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstMoveDataApplicationSprocs.WspInsertWebstorePartitionMoveMap(System.String,System.Int16,System.Int16,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.String)">
            <summary>
             [ExecuteType(ExecuteNonQuery)]
             Insert WebstorePartitionMoveMap
            </summary>
            <param name="DeploymentName"></param>
            <param name="PartitionNumber"></param>
            <param name="NewPartitionNumber"></param>
            <param name="SourceServer"></param>
            <param name="SourceDatabase"></param>
            <param name="DestinationServer"></param>
            <param name="DestinationDatabase"></param>
            <param name="NeedsReplicationColumnName"></param>
            <param name="IsMultiMaster"></param>
            <param name="SqlBulkCopyBatchSize"></param>
            <param name="SqlBulkCopyTimeOut"></param>
            <param name="CleanUpBatchSize"></param>
            <param name="CleanUpDelay"></param>
            <param name="Status"></param>
            <param name="StatusMessage"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstMoveDataApplicationSprocs.WspUpdateWebstorePartitionMoveMap(System.String,System.Int16,System.Int16,System.String)">
            <summary>
             [ExecuteType(ExecuteNonQuery)]
             Update WebstorePartitionMoveMap
            </summary>
            <param name="DeploymentName"></param>
            <param name="PartitionNumber"></param>
            <param name="Status"></param>
            <param name="StatusMessage"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstMoveDataApplicationSprocs.WspGetAllWebstorePartitionMoveMap(System.String)">
            <summary>
             [ExecuteType(ExecuteNonQuery)]
             Return rows from the WebstorePartitionMoveMap table based on the DeploymentName.
            </summary>
            <param name="DeploymentName"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstMoveDataApplicationSprocs.WspGetWebstorePartitionMoveMap(System.String,System.Int16)">
            <summary>
             [ExecuteType(ExecuteNonQuery)]
             Return a row from the WebstorePartitionMoveMap table based on the DeploymentName and PartitionNumber
            </summary>
            <param name="DeploymentName"></param>
            <param name="PartitionNumber"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstMoveDataApplicationSprocs.WspGetWebstorePartitionMoveMapStatus(System.String,System.Int16)">
            <summary>
             [ExecuteType(ExecuteNonQuery)]
             Return a row from the WebstorePartitionMoveMap table based on the DeploymentName and PartitionNumber
            </summary>
            <param name="DeploymentName"></param>
            <param name="PartitionNumber"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstMoveDataApplicationSprocs.WspDeleteWebstorePartitionMoveMap">
            <summary>
             [ExecuteType(ExecuteNonQuery)]
             Delete rows from the WebstorePartitionMoveMap table based on the PK.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstMoveDataApplicationSprocs.WspInsertWebstoreBulkCopy(System.String,System.Int16,System.String,System.Int32,System.Int16,System.String)">
            <summary>
             [ExecuteType(ExecuteNonQuery)]
             Insert WebstoreBulkCopy
            </summary>
            <param name="DeploymentName"></param>
            <param name="PartitionNumber"></param>
            <param name="TableName"></param>
            <param name="InstallOrder"></param>
            <param name="NewPartitionNumber"></param>
            <param name="PartitionNumberColumnName"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstMoveDataApplicationSprocs.WspUpdateWebstoreBulkCopy(System.String,System.Int16,System.String,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime,System.Int64,System.String)">
            <summary>
             [ExecuteType(ExecuteNonQuery)]
             Update WebstoreBulkCopy
            </summary>
            <param name="DeploymentName"></param>
            <param name="PartitionNumber"></param>
            <param name="TableName"></param>
            <param name="StartTime"></param>
            <param name="EndTime"></param>
            <param name="CopyCount"></param>
            <param name="ProgressMessage"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstMoveDataApplicationSprocs.WspGetWebstoreBulkCopy(System.String,System.Int16)">
            <summary>
             [ExecuteType(ExecuteNonQuery)]
             Return a rowset from the WebstoreBulkCopy table based on the
             DeploymentName and PartitionNumber
            </summary>
            <param name="DeploymentName"></param>
            <param name="PartitionNumber"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstMoveDataApplicationSprocs.WspDeleteWebstoreBulkCopy(System.String,System.Int16)">
            <summary>
             [ExecuteType(ExecuteNonQuery)]
             Delete rows from the WebstoreBulkCopy table from the passed in Deployment and Partition
            </summary>
            <param name="DeploymentName"></param>
            <param name="PartitionNumber"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstMoveDataApplicationSprocs.WspGetSelectList(System.String,System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Returns a select list of all column names from a table.
            </summary>
            <param name="TableName"></param>
            <param name="PartitionNumberColumnName"></param>
            <param name="PartitionNumberColumnValue"></param>
            <param name="NeedsReplicationColumnName"></param>
            <param name="IsMultiMaster"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstMoveDataApplicationSprocs.WspCreateMoveDataLock(System.String,System.Int32@)">
            <summary>
             Create a lock for WstMoveData.exe so more then one copy cannot run at one time.
            </summary>
            <param name="DeploymentName"></param>
            <param name="retVal"></param>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK\debug\doc\AsyncInterface.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AsyncInterface</name>
    </assembly>
    <members>
        <member name="T:Microsoft.MSN.MSNCache.Common.CacheConfigurationManager">
            <summary>
            methods for managing settings
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Common.CacheConfigurationManager.DefaultPort">
            <summary>
            default port
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheConfigurationManager.GetInitializedConfiguration">
            <summary>
            initializes configuration if it hasn't been initialized before
            return configuration object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheConfigurationManager.SafeConfigurationChange(Microsoft.MSN.MSNCache.Asynchronous.ICacheConfiguration)">
            <summary>
            attempts to replace configuration value, in case of failure doesn't throw exception
            </summary>
            <returns>false if new configuration value cannot be set, i.e. due to failed validation</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheConfigurationManager.Initialize">
            <summary>
            Initializes configuration if it has not already been set. We do this rather than use
            a static initializer primarily because if the configuration setup throws an exception you
            get a rather obscure exception thrown back. This way it should be clearer whats going on
            if something throws.
            
            Three configuration options exist: 
            1) user can pass explicit object that implements ICacheConfiguration interface
            2) if no such object was found, use centralized settings
            3) if centralized settings cannot be used for any reason fallback to default configuration
            </summary>
            <returns>true if initialization has been performed in theis invocation</returns>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.CacheConstants">
            <summary>
            This class contains the constants used for WstCache (client and/or server).
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Common.CacheConstants.WstConnectionString">
            <summary>
            Deployment name to use for the cache database.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Common.CacheConstants.TraceSwitchDisplayName">
            <summary>
            Display name to use for MSNCacheManager tracing.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Common.CacheConstants.TraceSwitchDescription">
            <summary>
            Description to use for MSNCacheManager tracing.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Common.CacheConstants.TraceSourceServer">
            <summary>
            Default tracing source for MSNCacheManager.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Common.CacheConstants.CacheServiceName">
            <summary>
            The name of the service as we install it on a machine.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Common.CacheConstants.VeryOldDate">
            <summary>
            old date, older than any date expected to exist in DB
            used to initialize various components
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.CacheDb">
            <summary>
            This class provides access to the functionality of the cache database.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheDb.ClearStaticConfigs">
            <summary>
            Deletes all static config rows from the database.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheDb.CleanDatabase">
            <summary>
            Invokes the proc WspCleanDatabase which deletes everything
            from the database except static configs.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheDb.ExecuteQuery(Microsoft.MSN.MSNCache.Common.CacheDb.WstCommandCreator,Microsoft.MSN.MSNCache.Common.CacheDb.DataRowHandler)">
            <summary>
            Execute command and apply DataRowHandler processing to each row
            </summary>
            <param name="commandCreator"></param>
            <param name="handler"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheDb.UpdateBanks(Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Banks)">
            <summary>
            This method updates the banks from the database.  Will log the buckets that changed.
            </summary>
            <param name="previousBanks">previous version of banks, not required</param>
            <returns>newly created Banks object</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheDb.AdjustBanksAndBucketCounts(Microsoft.Webstore.WstClient.WstDataReader,Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Banks,System.Boolean@)">
            <summary>
            Adjust bank information in the client mapping table to match database
            </summary>
            <param name="rdr"></param>
            <param name="banks"></param>
            <param name="changeDetected"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheDb.GetConnection">
            <summary>
            Retrieves the connection to use for the cache database.
            </summary>
            <returns>a WstConnection object</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheDb.GetCommand(Microsoft.Webstore.WstClient.WstConnection)">
            <summary>
            create command with default characteristics
            </summary>
            <param name="conn"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheDb.AddParameter(Microsoft.Webstore.WstClient.WstCommand,System.String,System.Data.SqlDbType,System.Object)">
            <summary>
            create parameter of given type
            </summary>
            <param name="cmd"></param>
            <param name="parameterName"></param>
            <param name="type"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheDb.AddParameter(Microsoft.Webstore.WstClient.WstCommand,System.String,System.String)">
            <summary>
            add parameter 
            </summary>
            <param name="command"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheDb.AddParameter(Microsoft.Webstore.WstClient.WstCommand,System.String,System.Int32)">
            <summary>
            add parameter 
            </summary>
            <param name="command"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheDb.AddParameter(Microsoft.Webstore.WstClient.WstCommand,System.String,System.DateTime)">
            <summary>
            add parameter 
            </summary>
            <param name="command"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheDb.GetHostStatusUpdateCommand(Microsoft.Webstore.WstClient.WstConnection,System.String,System.Boolean,System.DateTime,System.DateTime)">
            <summary>
            generate command for updating host status in db (the heartbeat command)
            </summary>
            <param name="connection"></param>
            <param name="hostName"></param>
            <param name="configurationChanged"></param>
            <param name="hostVersion"></param>
            <param name="bucketVersion"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.CacheDb.DataRowHandler">
            <summary>
            method that processes single data row
            </summary>
            <param name="rdr"></param>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.CacheDb.WstCommandCreator">
            <summary>
            method that creates WstCommand 
            </summary>
            <param name="conn"></param>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.CacheSettings">
            <summary>
            This class implements cache configuration based on centralized settings
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.ICacheConfiguration">
            <summary>
            Represents the configuration options available to clients of the cache.
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.ICacheConfiguration.Port">
            <summary>
            The destination TCP port number to use when connecting to cache servers.
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.ICacheConfiguration.PollingIntervalSeconds">
            <summary>
            The amount of time between successive polls of Cache DB, in seconds.
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.ICacheConfiguration.RequestTimeoutMilliseconds">
            <summary>
            The maximum amount of time to wait on an outgoing request before timing out.
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.ICacheConfiguration.DefaultBank">
            <summary>
            The default Bank to use when calling GetCache.
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.ICacheConfiguration.DefaultLogicalCache">
            <summary>
            The default logical cache to use when calling GetCache.
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.ICacheConfiguration.ThrottleLimit">
            <summary>
            The maximum number of requests that can pile up in the unsent queue to a particular host before
            new requests for this host are rejected.  
            This should be seen as safety valve that prevents memory overflow, when a particular 
            host can’t process requests at the rate they are generated by the client
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.ICacheConfiguration.DenylistDurationSeconds">
            <summary>
            The duration of time (in seconds) that a host will stay on the denylist, once it
            has been denylisted.
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.ICacheConfiguration.MappingTableValidTimeSeconds">
            <summary>
            The maximum amount of time the mapping table (as read from Cache DB) can go between refreshes
            before it is considered invalid.
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.ICacheConfiguration.HostHeartbeatSeconds">
            <summary>
            How frequently cache host must update its status
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.ICacheConfiguration.HostHeartbeatExpirationSeconds">
            <summary>
            How long to wait after last heartbeat to declare that is host dead
            This value must be greater than HostHeartbeatSeconds
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheSettings.GetConfiguration">
            <summary>
            get configuration based on centralized settings
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheSettings.GetIntValue(System.String,System.Int32)">
            <summary>
            returns value of integer property, or default value if centralized setting doesn't exist
            throws FormatException if property is not a positive integer
            </summary>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheSettings.ConfigurationChange(System.Object,Microsoft.Webstore.MetaData.WebstoreEventArgs)">
            <summary>
            Delegate for the SettingsChanged event
            </summary>
            <param name="src"></param>
            <param name="args"></param>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.CacheSettings.Port">
            <summary>
            User supplied value is ignored,
            Keeping this setting for compatibility with existing config files
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.CacheSettings.PollingIntervalSeconds">
            <summary>
            how often client attempts to refresh configuration
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.CacheSettings.RequestTimeoutMilliseconds">
            <summary>
            default timeout value for individual request
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.CacheSettings.ThrottleLimit">
            <summary>
            The maximum number of requests that can pile up in the unsent queue to a particular host before
            new requests for this host are rejected.  
            This should be seen as safety valve that prevents memory overflow, when a particular 
            host can’t process requests at the rate they are generated by the client
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.CacheSettings.DenylistDurationSeconds">
            <summary>
            how long server remains denylisted after socket error is detected
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.CacheSettings.DefaultBank">
            <summary>
            default bank
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.CacheSettings.DefaultLogicalCache">
            <summary>
            default logical cache
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.CacheSettings.MappingTableValidTimeSeconds">
            <summary>
            max time mapping table remains valid after last refresh
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.CacheSettings.HostHeartbeatSeconds">
            <summary>
            interval at which 
            a) cacheserver sends heartbeat to database 
            b) retrieves master status
            c) performs master functions, when master
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.CacheSettings.HostHeartbeatExpirationSeconds">
            <summary>
            How long to wait after last heartbeat to declare that is host dead
            This value must be greater than HostHeartbeatSeconds
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.CollectionUtils">
            <summary>
            fill gaps in .Net collections API
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CollectionUtils.ContainsAll``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0})">
            <summary>
            return true if source collection contains all elements of the dest collection
            not the most effcient implementation (n^2)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="dest"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CollectionUtils.HasSameElements``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})">
            <summary>
            return true if both collections contain same elements, including duplicates, regardless of order
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="dest"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.DefaultCacheConfiguration">
            <summary>
            This class implements cache configuration based on centralized settings
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.DefaultCacheConfiguration.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.DefaultCacheConfiguration.Port">
            <summary>
            User supplied value is ignored,
            Keeping this setting for compatibility with existing config files
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.DefaultCacheConfiguration.PollingIntervalSeconds">
            <summary>
            how often client attempts to refresh configuration
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.DefaultCacheConfiguration.RequestTimeoutMilliseconds">
            <summary>
            default timeout value for individual request
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.DefaultCacheConfiguration.ThrottleLimit">
            <summary>
            The maximum number of requests that can pile up in the unsent queue to a particular host before
            new requests for this host are rejected.  
            This should be seen as safety valve that prevents memory overflow, when a particular 
            host can’t process requests at the rate they are generated by the client
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.DefaultCacheConfiguration.DenylistDurationSeconds">
            <summary>
            how long server remains denylisted after socket error is detected
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.DefaultCacheConfiguration.DefaultBank">
            <summary>
            default bank
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.DefaultCacheConfiguration.DefaultLogicalCache">
            <summary>
            default logical cache
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.DefaultCacheConfiguration.MappingTableValidTimeSeconds">
            <summary>
            max time mapping table remains valid after last refresh
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.DefaultCacheConfiguration.HostHeartbeatSeconds">
            <summary>
            interval at which 
            a) cacheserver sends heartbeat to database 
            b) retrieves master status
            c) performs master functions, when master
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.DefaultCacheConfiguration.HostHeartbeatExpirationSeconds">
            <summary>
            How long to wait after last heartbeat to declare that is host dead
            This value must be greater than HostHeartbeatSeconds
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.StaticConfig">
            <summary>
            This class contains helper methods for generating static config XML.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.StaticConfig.GenerateXml(Microsoft.MSN.MSNCache.Common.MSNCacheConfigurationConfig)">
            <summary>
            Method for generating the static config XML for a given MSNCache configuration.
            </summary>
            <param name="config">MSNCache configuration to generate from</param>
            <returns>XML string representation of the config</returns>
            <exception cref="T:System.ArgumentNullException">if config is null</exception>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.StaticConfig.ReadFromFile(System.String)">
            <summary>
            read configuration from static xml config file
            </summary>
            <param name="configFile"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.StaticConfig.ReadFromXmlString(System.String)">
            <summary>
            construct config object from XML string
            </summary>
            <param name="xmlString"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.StaticConfig.Read(System.Xml.XmlReader)">
            <summary>
            read configuration from static xml config file
            </summary>
            <param name="reader"></param>
            <returns></returns>
            <throws>XmlException on parsing error</throws>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.StaticConfig.Write(System.String,System.String)">
            <summary>
            write static config to file
            (no validation)
            </summary>
            <param name="configFileName"></param>
            <param name="xmlContent"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.StaticConfig.GetServerNode(System.String,System.Xml.XmlReader)">
            <summary>
            Haven't found a way to do string insensitive comparison in xpath, so just
            do this the hardway. 'string-upper' fn doesn't seem to exist 
            </summary>
            <param name="serverName"></param>
            <param name="reader"></param>
            <returns>Pointer to XML element under which this host lives</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.StaticConfig.GetStaticConfiguration">
            <summary>
            retrieve current configuration as xml string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.StaticConfig.GetStaticConfiguration(System.DateTime,System.String@,System.Nullable{System.DateTime}@)">
            <summary>
            retrieve static configuration from database if it's more recent than lastUpdate timestamp
            otherwise return null values;
            </summary>
            <param name="lastUpdate"></param>
            <param name="config"></param>
            <param name="latestVersion"></param>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.MSNCacheConfigurationConfig">
            <summary>
            Represents the element configuration\MSNCacheConfiguration
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.MSNCacheConfigurationConfig.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.MSNCacheConfigurationConfig.#ctor(Microsoft.MSN.MSNCache.Common.BanksConfig,Microsoft.MSN.MSNCache.Common.GlobalConfig)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.MSNCacheConfigurationConfig.XmlSerialize(System.Xml.XmlNode)">
            <summary>
            Serializes this node and all child nodes to XML
            </summary>
            <param name="parentNode">parent node to attach this node to</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.MSNCacheConfigurationConfig.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.MSNCacheConfigurationConfig.GetHashCode">
            <summary>
            used to get rid of silly warning
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.MSNCacheConfigurationConfig.RemoveServer(System.String)">
            <summary>
            remove server from static config 
            </summary>
            <param name="serverName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.MSNCacheConfigurationConfig.HasServer(System.String)">
            <summary>
            check if server is present in static config
            </summary>
            <param name="serverName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.MSNCacheConfigurationConfig.AddBank(System.String,System.UInt32)">
            <summary>
            add new bank to config
            </summary>
            <param name="bankName"></param>
            <param name="bucketCount"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.MSNCacheConfigurationConfig.AddLogicalCache(System.String,System.String,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            add logical cache element
            </summary>
            <param name="bankName"></param>
            <param name="cacheName"></param>
            <param name="maxMemory"></param>
            <param name="maxItems"></param>
            <param name="isDefault"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.MSNCacheConfigurationConfig.AddServerClass(System.String,System.String,System.UInt32)">
            <summary>
            add new server class to config
            </summary>
            <param name="bankName"></param>
            <param name="serverClassName"></param>
            <param name="capacity"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.MSNCacheConfigurationConfig.AddServer(System.String,System.String,System.String)">
            <summary>
            add new server to specified bank and class
            </summary>
            <param name="bankName"></param>
            <param name="serverClassName"></param>
            <param name="serverName"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.MSNCacheConfigurationConfig.GetAllServers">
            <summary>
            get all servers defined in current config
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.MSNCacheConfigurationConfig.Banks">
            <summary>
            The configuration\MSNCacheConfiguration\banks element within this element.
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.MSNCacheConfigurationConfig.Global">
            <summary>
            The configuration\MSNCacheConfiguration\global element within this element.
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.GlobalConfig">
            <summary>
            Represents the element configuration\MSNCacheConfiguration\global
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.GlobalConfig.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.GlobalConfig.#ctor(Microsoft.MSN.MSNCache.Common.TcpConfig)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.GlobalConfig.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.GlobalConfig.GetHashCode">
            <summary>
            used to get rid of silly warning
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.GlobalConfig.XmlSerialize(System.Xml.XmlNode)">
            <summary>
            Serializes this node and all child nodes to XML
            </summary>
            <param name="parentNode">parent node to attach this node to</param>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.GlobalConfig.Tcp">
            <summary>
            The configuration\MSNCacheConfiguration\global\Tcp element.
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.TcpConfig">
            <summary>
            Represents the element configuration\MSNCacheConfiguration\global\tcp
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.TcpConfig.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.TcpConfig.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.TcpConfig.GetHashCode">
            <summary>
            used to get rid of silly warning
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.TcpConfig.XmlSerialize(System.Xml.XmlNode)">
            <summary>
            Serializes this node and all child nodes to XML
            </summary>
            <param name="parentNode">parent node to attach this node to</param>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.TcpConfig.Port">
            <summary>
            The port attribute, optional.
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.TcpConfig.ConnectTimeout">
            <summary>
            The connecttimeout attribute, optional.
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.TcpConfig.RequestTimeout">
            <summary>
            The requesttimeout attribute, optional.
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.BanksConfig">
            <summary>
            Represents the element configuration\MSNCacheConfiguration\banks
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.BanksConfig.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.BanksConfig.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.BanksConfig.GetHashCode">
            <summary>
            used to get rid of silly warning
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.BanksConfig.XmlSerialize(System.Xml.XmlNode)">
            <summary>
            Serializes this node and all child nodes to XML
            </summary>
            <param name="parentNode">parent node to attach this node to</param>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.BanksConfig.Banks">
            <summary>
            A list of configuration\MSNCacheConfiguration\banks\bank elements under this node.
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.BankConfig">
            <summary>
            Represents the element configuration\MSNCacheConfiguration\banks\bank
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.BankConfig.#ctor(System.String,System.UInt32)">
            <summary>
            Defualt constructor.
            </summary>
            <param name="name"></param>
            <param name="buckets"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.BankConfig.GetHashCode">
            <summary>
            used to get rid of silly warning
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.BankConfig.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.BankConfig.XmlSerialize(System.Xml.XmlNode)">
            <summary>
            Serializes this node and all child nodes to XML
            </summary>
            <param name="parentNode">parent node to attach this node to</param>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.BankConfig.Name">
            <summary>
            The name attribute, required.
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.BankConfig.Buckets">
            <summary>
            The buckets attribute, required.
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.BankConfig.LogicalCacheNames">
            <summary>
            A list of nodes that will occur under this node under configuration\MSNCacheConfiguration\banks\bank\logicalcachenames
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.BankConfig.Servers">
            <summary>
            A list of nodes that will occur under this node under configuration\MSNCacheConfiguration\banks\bank\servers
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.LogicalCacheConfig">
            <summary>
            Represents the element configuration\MSNCacheConfiguration\banks\bank\logicalcachenames\logicalcache
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.LogicalCacheConfig.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.LogicalCacheConfig.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.LogicalCacheConfig.GetHashCode">
            <summary>
            used to get rid of silly warning
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.LogicalCacheConfig.XmlSerialize(System.Xml.XmlNode)">
            <summary>
            Serializes this node and all child nodes to XML
            </summary>
            <param name="parentNode">parent node to attach this node to</param>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.LogicalCacheConfig.Name">
            <summary>
            name attribute, required
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.LogicalCacheConfig.MaxItems">
            <summary>
            maxitems attribute, optional
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.LogicalCacheConfig.MaxMemory">
            <summary>
            maxmemory attribute, optional
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.LogicalCacheConfig.Default">
            <summary>
            default attribute, optional
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.ServerClassConfig">
            <summary>
            Represents the element configuration\MSNCacheConfiguration\banks\bank\servers\serverclass
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.ServerClassConfig.#ctor(System.UInt32)">
            <summary>
            Defualt constructor.
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.ServerClassConfig.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.ServerClassConfig.GetHashCode">
            <summary>
            used to get rid of silly warning
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.ServerClassConfig.XmlSerialize(System.Xml.XmlNode)">
            <summary>
            Serializes this node and all child nodes to XML
            </summary>
            <param name="parentNode">parent node to attach this node to</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.ServerClassConfig.AddServers(System.Collections.Generic.List{System.String})">
            <summary>
            add all servers to collection that passed as parameter
            </summary>
            <param name="rvalue"></param>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.ServerClassConfig.Name">
            <summary>
            name attribute, optional
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.ServerClassConfig.Capacity">
            <summary>
            capacity attribute, required
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.ServerClassConfig.Servers">
            <summary>
            List of "server" nodes under this element at configuration\MSNCacheConfiguration\banks\bank\servers\serverclass\server
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.XElement">
            <summary>
            emulator of Linq class with he same name
            should be removed once 3.5 libraries are required for client installations
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.Attribute">
            <summary>
            emulator of Linq class with he same name
            should be removed once 3.5 libraries are required for client installations
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.XDocument">
            <summary>
            emulator of Linq class with he same name
            should be removed once 3.5 libraries are required for client installations
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.XmlUtil">
            <summary>
            helper methods for handling XML
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.XmlUtil.GetOptionalAttributeValue(Microsoft.MSN.MSNCache.Common.XElement,System.String,System.String)">
            <summary>
            return attribute value, if present, otherwise return defaultValue
            </summary>
            <param name="xe"></param>
            <param name="attrName"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.XmlUtil.GetOptionalAttributeIntValue(Microsoft.MSN.MSNCache.Common.XElement,System.String,System.Nullable{System.Int32})">
            <summary>
            return attribute value, if present, otherwise return defaultValue
            </summary>
            <param name="xe"></param>
            <param name="attrName"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.XmlUtil.GetOptionalAttributeUintValue(Microsoft.MSN.MSNCache.Common.XElement,System.String,System.Nullable{System.UInt32})">
            <summary>
            return attribute value, if present, otherwise return defaultValue
            </summary>
            <param name="xe"></param>
            <param name="attrName"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.XmlUtil.GetOptionalAttributeBoolValue(Microsoft.MSN.MSNCache.Common.XElement,System.String,System.Nullable{System.Boolean})">
            <summary>
            return attribute value, if present, otherwise return defaultValue
            </summary>
            <param name="xe"></param>
            <param name="attrName"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.XmlUtil.GetRequiredAttributeValue(Microsoft.MSN.MSNCache.Common.XElement,System.String)">
            <summary>
            return value of required attribute
            throws exception if attribute is missing
            </summary>
            <param name="xe"></param>
            <param name="attrName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.XmlUtil.GetRequiredAttributeUintValue(Microsoft.MSN.MSNCache.Common.XElement,System.String)">
            <summary>
            return parsed value of required attribute
            throws exception if attribute is missing
            </summary>
            <param name="xe"></param>
            <param name="attrName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.XmlUtil.ValidateSchema(System.String,System.String)">
            <summary>
            validates xml against xsd
            throws XmlSchemaValidationException if validation fails 
            </summary>
            <param name="xml"></param>
            <param name="xsd"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.XmlUtil.ValidateSchema(System.IO.TextReader,System.IO.TextReader)">
            <summary>
            validates xml against xsd
            throws XmlSchemaValidationException if validation fails 
            </summary>
            <param name="xmlReader"></param>
            <param name="xsdReader"></param>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.ErrorCallback">
            <summary>
            This delegate can be used to receive callback notifications of error conditions
            in the cache library.
            </summary>
            <param name="errorText">a textual representation of the error condition</param>
            <param name="ex">the exception generated as a result of the error (if any)</param>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.AsynchronousCacheManager">
            <summary>
            This is the top-level class for accessing the cache library as a client.  This static class exposes
            methods to provide configuration for your client, retrieve cache instances, and provide an error
            callback.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.AsynchronousCacheManager.ValidateCache(System.String)">
            <summary>
            adds object to cache and verifies that it can be retrieved 
            throws exception if validation fails for any reason
            </summary>
            <param name="host"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.AsynchronousCacheManager.AddErrorCallback(Microsoft.MSN.MSNCache.Asynchronous.ErrorCallback)">
            <summary>
            This callback will get called whenever the cache encounters an error.
            
            multiple clients can register several callbacks, all of them will be called
            however each unique callback delegate will be registered at most once 
            </summary>
            <param name="handler">cannot be null</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.AsynchronousCacheManager.GetCache">
            <summary>
            Retrieves the cache instance for the default bank and logical cache.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.AsynchronousCacheManager.GetCache(System.String,System.String)">
            <summary>
            Retrieves the cache instance for a specific bank and logical cache.
            </summary>
            <param name="bank">name of the bank to retrieve, null means default</param>
            <param name="logicalCache">name of the logical cache to retrieve, null means default</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.AsynchronousCacheManager.GetCache(System.String)">
            <summary>
            Retrieves the cache instance for a DefaultBank and logical cache.
            </summary>
            <param name="logicalCache">name of the logical cache to retrieve, null means default</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.AsynchronousCacheManager.GetCacheForHost(System.String,System.String)">
            <summary>
            Retrieves the cache instance for a specific host and logical cache. 
            </summary>
            <param name="host">host name to retrieve cache for</param>
            <param name="logicalCache">logical cache to retrieve</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.AsynchronousCacheManager.GetErrorString(Microsoft.MSN.MSNCache.Asynchronous.CacheError)">
            <summary>
            Converts a cache error code into a string.  Deprecated in favor of MSNCacheException.GetErrorString.
            </summary>
            <param name="error">error code to convert</param>
            <returns>string representation of that error code</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.AsynchronousCacheManager.SignalError(System.String,System.Exception)">
            <summary>
            This will get called for errors and exceptions in background threads. The idea is to allow
            the calling application decide what and how to log these events, and what action to take.
            </summary>
            <param name="errorDescription"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.AsynchronousCacheManager.EnsureInitialized">
            <summary>
            Initializes configuration if it has not already been set. We do this rather than use
            a static initializer primarily because if the configuration setup throws an exception you
            get a rather obscure exception thrown back. This way it should be clearer whats going on
            if something throws.
            
            Three configuration options exist: 
            1) user can pass explicit object that implements ICacheConfiguration interface
            2) if no such object was found, use centralized settings
            3) if centralized settings cannot be used for any reason fallback to default configuration
            </summary>
            <returns>current configuration value</returns>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.AsynchronousCacheManager.Configuration">
            <summary>
            Set or retrieve the configuration for your cache.  By default the MSNCache section
            will be retrieved from your app.exe.config file.
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.AsynchronousCacheManager.ErrorCallback">
            <summary>
            This callback will get called whenever the cache encounters an error.
            
            multiple clients can register several callbacks, all of them will be called
            however each unique callback delegate will be registered at most once 
            
            setting callback to null has no effect
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Bank.#ctor(Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Bank)">
            <summary>
            copy constructor
            </summary>
            <param name="toCopy"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Bank.GetBucketForKey(System.String,System.UInt32)">
            <summary>
            Given some number of buckets and a key, calculates which bucket the
            key belongs to by using the hash function.
            </summary>
            <param name="key">key to hash, usually groupKey</param>
            <param name="numberOfBuckets">number of buckets in the bank</param>
            <returns>bucket number the key belongs to</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Bank.Hash(System.String)">
            <summary>
            Hash the key to a uint. This uses the same algorithm as in
            the C++ code (taken from stdext::hash_value) so an object
            should always hahs to the same server both when using this TCP client
            and the old COM client.
            </summary>
            <param name="key">key to hash</param>
            <returns>a hash value</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Bank.GetHashCode">
            <summary>
            We don't plan on using this but you get a warning if you implement Equals and not GetHashCode.
            So we'll make something that works.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Bank.Equals(System.Object)">
            <summary>
            One bank is equal to another bank IFF the following criteria are met:
            1) the name is the same
            2) the number of hosts is the same
            3) each host is the same
            </summary>
            <param name="obj">object to compare to</param>
            <returns>true if banks are equal</returns>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Banks">
            <summary>
            Represents a collection of banks from a mapping table.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Banks.#ctor(Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Banks)">
            <summary>
            Copy constructor, does a deep copy of another banks object.
            </summary>
            <param name="source">source object to copy</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Banks.#ctor">
            <summary>
            Default constructor, creates an empty bank.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Banks.AdjustBanksAndBucketCounts(System.Collections.Generic.Dictionary{System.String,System.Int32},System.Boolean@)">
            <summary>
            modify current bank information to match data retrieved from db
            </summary>
            <param name="dbBanks"></param>
            <param name="isModified"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Banks.GetHostName(System.String,System.String)">
            <summary>
            For a given bank and group key, retrieves the host it is currently mapped to.
            </summary>
            <param name="bankName">name of the bank</param>
            <param name="groupKey">group key</param>
            <returns>hostname it is mapped to</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Banks.Update(System.Int32,System.String,System.String)">
            <summary>
            Updates the mapping of a particular bucket to a particular host.
            </summary>
            <param name="bucket"></param>
            <param name="bankName"></param>
            <param name="hostName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Banks.GetHashCode">
            <summary>
            Hash code, we don't plan on using it but this works if we ever do and it gets rid of warnings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Banks.Equals(System.Object)">
            <summary>
            Deep equality comparison.  Two Banks are considered equal IFF the following are all true:
            1) the same bank names exist in each object
            2) each Bank in each object is equal
            </summary>
            <param name="obj">the Banks object to check equality</param>
            <returns>true if equal, false otherwise</returns>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Banks.Version">
            <summary>
            The current version of this banks.
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.MappingTable">
            <summary>
            This class incurs heavily multi-threaded use.  Our synchronization model is to make all of the
            parameters read-only except for mappingTableLeaseExpired.  When we need to change these values
            (like because we updated the banks mapping) we actually just create a new MappingTable object
            and InterlockedExchange out the Instance.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.MappingTable.GetValidHostName(System.String,System.String)">
            <summary>
            returns valid host or throws MSNCacheException if unable to do so 
            </summary>
            <param name="bankName"></param>
            <param name="groupKey"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.MappingTable.DetectExpiration">
            <summary>
            check expiration status of host mapping table and generate warning messages in logs
            the method is not thread safe - due to race conditions, the messages are not guarneed to be accurate to a tick 
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.MappingTable.UpdateTable">
            <summary>
            Called by TimerCallback and by static initializer.  Handles querying the database for the latest
            mapping and updating the Instance.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.MappingTable.OnTimer(System.Object)">
            <summary>
            timer callback
            </summary>
            <param name="obj"></param>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.MappingTable.LastUpdated">
            <summary>
            The time that this table was last updated.
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.MappingTable.Instance">
            <summary>
            Retrieves the global mapping table.
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.CacheConfig.DotNetCacheConfiguration">
            <summary>
            Cache configuration manager
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheConfig.DotNetCacheConfiguration.WstConnectionString">
            <summary>
            webstore deployment
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheConfig.DotNetCacheConfiguration.UseExeConfig">
            <summary>
            obsolete setting
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheConfig.DotNetCacheConfiguration.Port">
            <summary>
            User supplied value is ignored,
            Keeping this setting for compatibility with existing config files
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheConfig.DotNetCacheConfiguration.ConnectionString">
            <summary>
            User supplied value is ignored,
            Keeping this setting for compatibility with existing config files
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheConfig.DotNetCacheConfiguration.PollingIntervalSeconds">
            <summary>
            how often client attempts to refresh configuration
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheConfig.DotNetCacheConfiguration.MultipleSockets">
            <summary>
            reserved for future use
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheConfig.DotNetCacheConfiguration.ConnectionType">
            <summary>
            User supplied value is ignored,
            Keeping this setting for compatibility with existing config files
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheConfig.DotNetCacheConfiguration.RequestTimeoutMilliseconds">
            <summary>
            timeout value for individual request
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheConfig.DotNetCacheConfiguration.ThrottleLimit">
            <summary>
            The maximum number of requests that can pile up in the unsent queue to a particular host before
            new requests for this host are rejected.  
            This should be seen as safety valve that prevents memory overflow, when a particular 
            host can’t process requests at the rate they are generated by the client
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheConfig.DotNetCacheConfiguration.DenylistDurationSeconds">
            <summary>
            how long server remains denylisted after socket error is detected
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheConfig.DotNetCacheConfiguration.DefaultBank">
            <summary>
            default bank
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheConfig.DotNetCacheConfiguration.DefaultLogicalCache">
            <summary>
            default logical cache
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheConfig.DotNetCacheConfiguration.WebstoreAssemblyName">
            <summary>
            WstClient assembly name
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheConfig.DotNetCacheConfiguration.MappingTableValidTimeSeconds">
            <summary>
            max time mapping table remains valid after last refresh
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheConfig.DotNetCacheConfiguration.HostHeartbeatSeconds">
            <summary>
            How frequently cache host must update it's status
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheConfig.DotNetCacheConfiguration.HostHeartbeatExpirationSeconds">
            <summary>
            How long to wait after last heartbeat to declare that is host dead
            This value must be greater than HostHeartbeatSeconds
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.CacheError">
            <summary>
            Possible error codes that can be returned in an MSNCacheException
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheError.NoError">
            <summary>
            No error - everything is fine
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheError.Unknown">
            <summary>
            Unknown or unrecognized error
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheError.InvalidBank">
            <summary>
            The bank requested by the client application is invalid.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheError.InvalidLogicalCache">
            <summary>
            The logical cache requested by the client application is invalid.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheError.BucketFileDoesNotExist">
            <summary>
            The bucket mapping is out of date or doesn't exist.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheError.CannotConnectToSqlServer">
            <summary>
            Unable to connect to CacheDB
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheError.CannotConnectToWebstore">
            <summary>
            Unable to connect to CacheDB
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheError.NoConfiguration">
            <summary>
            Incorrect or missing cache client configuration
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheError.PortNotSet">
            <summary>
            Cache server destination port not specified in configuration.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheError.HostConnectionFailed">
            <summary>
            Attempt to connect to cache host server failed.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheError.RequestTimedOut">
            <summary>
            Request timed out.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheError.RequestThrottled">
            <summary>
            Request was refused due to client-side throttling.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheError.HostDenylisted">
            <summary>
            Request was refused due to host being denylisted.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheError.NetworkError">
            <summary>
            An unspecified network error occurred.
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.ChatHeader">
            <summary>
            This is a header prefixed to messages on the inter-cache protocol.
            We are just going to add a new message type leaving the existing
            messaging alone. So we need this prefix to keep the cache server happy.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.ChatHeader.#ctor(System.Byte[],System.Int32)">
            <summary>
            Construct a field object
            </summary>
            <param name="buffer">serialized blob array</param>
            <param name="offset">offset where this field lives</param>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.ChatHeader.Size">
            <summary>
            Size of a Field object in bytes. Note this is not the size of
            field contents (see Length below)
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.ConnectionType">
            <summary>
            The type of connection to use for connecting to the Cache DB.  In the future
            only Webstore will be supported.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.ConnectionType.None">
            <summary>
            Don't use a connection - invalid value.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.ConnectionType.File">
            <summary>
            Use a file - invalid value.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.ConnectionType.SqlServer">
            <summary>
            Use SQLServer - currently works, but is deprecated.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.ConnectionType.Webstore">
            <summary>
            Use Webstore
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.CacheSerialize">
            <summary>
            Serialization class. All serializable objects must inherit from this.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheSerialize.OnField(System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Called during deserialization to deserialize one field
            </summary>
            <param name="fieldNumber">Number of the field</param>
            <param name="length">Length of payload</param>
            <param name="data">For integer fields this is the value of the field</param>
            <param name="buff">Base of the blob</param>
            <param name="bufferOffset">Location in blob relative to the base of filed payload</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheSerialize.SerializeFields">
            <summary>
            Serialize fields - call into subclass.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheSerialize.Deserialize(System.Byte[])">
            <summary>
            Deserialize an object.
            </summary>
            <param name="serializedObjectBuffer">Buffer holding the serialized object</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheSerialize.Serialize">
            <summary>
            Serialize an object
            </summary>
            <returns>serialized object as byte array</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheSerialize.GetString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Called by derived class to get string field from blob
            </summary>
            <param name="serializedObjectBuffer">buffer containing blob</param>
            <param name="bufferOffset">start of payload relative to base of blob</param>
            <param name="length">length of payload</param>
            <returns>string</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheSerialize.GetBuffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Called by derived class to get byte array from serialized blob
            </summary>
            <param name="serializedObjectBuffer">buffer containing blob</param>
            <param name="bufferOffset">start of payload relative to base of blob</param>
            <param name="length">length of payload</param>
            <returns>data as abyte array</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheSerialize.SetField(System.Int32,System.Int32)">
            <summary>
            Called by derived class during serialization to set integer data into field
            </summary>
            <param name="fieldNumber">field number</param>
            <param name="data">data</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheSerialize.SetField(System.Int32,System.String)">
            <summary>
            Called by derived class during serialization to set string into field
            </summary>
            <param name="fieldNumber">field number</param>
            <param name="data">string data</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheSerialize.SetField(System.Int32,System.Byte[])">
            <summary>
            Called by derived class during serialization to set byte array into field
            </summary>
            <param name="fieldNumber">field number</param>
            <param name="data">data</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.RequestReader.BeginRead(System.String,Microsoft.MSN.MSNCache.Asynchronous.CacheState,Microsoft.MSN.MSNCache.Asynchronous.ReadSuccessCallback,Microsoft.MSN.MSNCache.Asynchronous.ReadErrorCallback)">
            <summary>
            initiate pending read on a socket
            </summary>
            <param name="hostName"></param>
            <param name="hostSocketHolder"></param>
            <param name="onSuccess"></param>
            <param name="onFail"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.RequestReader.OnReadResponseDone(System.IAsyncResult)">
            <summary>
            Called when read is done. This will read whatever data is available. When the object is 
            completely read we deserialize it, send it to the singleton response queue, and hang out
            a new read request.
            </summary>
            <param name="ar"></param>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.Field">
            <summary>
            Represents a field in the serialized blob
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.Field.#ctor(System.Byte[],System.Int32)">
            <summary>
            Construct a field object
            </summary>
            <param name="buffer">serialized blob array</param>
            <param name="offset">offset where this field lives</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.Field.Increment">
            <summary>
            Move to next field in serialized blob
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.Field.Size">
            <summary>
            Size of a Field object in bytes. Note this is not the size of
            field contents (see Length below)
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.Field.Number">
            <summary>
            Field Id
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.Field.Length">
            <summary>
            Length of contents
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.Field.Offset">
            <summary>
            Offset of field payload relative to start of blob
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheRequest.#ctor(Microsoft.MSN.MSNCache.Asynchronous.CacheRequest.RequestType,System.String,System.String,System.String,System.String,System.Object,System.AsyncCallback,System.Int32)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="bank"></param>
            <param name="logicalCache"></param>
            <param name="groupKey"></param>
            <param name="itemKey"></param>
            <param name="asyncState"></param>
            <param name="callback_"></param>
            <param name="requestTimeoutMillis">value less or equal zero, means no timeout</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheRequest.BlockTillDoneOrTimeout(System.TimeSpan)">
            <summary>
            blocks until request is completed or timeout is reached, whatever happens first
            </summary>
            <param name="timeout"> TimeSpan = -1ms means indefinite wait</param>
            <returns>return true if request is completed, false if timeout is reached</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheRequest.BlockTillDone(System.Int32@,System.String@)">
            <summary>
            blocks until request is completed and then sets status parameters
            </summary>
            <param name="resultCode"></param>
            <param name="errString"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheRequest.BlockTillDone">
            <summary>
             blocks until request is completed and then sets status parameters
             throws MSNCacheException in case status indicates error
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheRequest.GetObject(System.Int32@,System.String@)">
            <summary>
            Blocks until request is done, than returns value.
            Also sets Status and ErrorString out parameters
            </summary>
            <param name="resultCode"></param>
            <param name="errString"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheRequest.GetObject">
            <summary>
            Blocks until request is done, than returns value
            throws MSNCacheException in case status indicates error
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheRequest.GetRawData(System.Int32@,System.String@)">
            <summary>
            blocks until request is completed and then returns data and sets status parameters
            </summary>
            <param name="resultCode"></param>
            <param name="errString"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheRequest.GetRawData">
            <summary>
            blocks until request is completed and then returns data and sets status parameters
            throws MSNCacheException in case status indicates error
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheRequest.SignalCaller(Microsoft.MSN.MSNCache.Asynchronous.CacheError,System.String,System.Exception,System.Byte[])">
            <summary>
               1. set status and content
               2. set waithandle
               3. fire callbacks
            </summary>
            <param name="statusCode"></param>
            <param name="errorMsg"></param>
            <param name="ex"></param>
            <param name="content"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheRequest.SignalError(Microsoft.MSN.MSNCache.Asynchronous.CacheError,System.String,System.Exception)">
            <summary>
            Translate error message and call SignalCaller to complete request
            </summary>
            <param name="error"></param>
            <param name="msg"></param>
            <param name="ex"></param>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache">
            <summary>
            Asynchronous cache
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.Add(System.String,System.String,System.Object,System.TimeSpan)">
            <summary>
            Synchronously add object to cache 
            (operation is aborted after default request timeout interval expires)
            </summary>
            <param name="groupKey">The group key</param>
            <param name="itemKey">The item key</param>
            <param name="obj">Object to add</param>
            <param name="expiry">Expiry time - set to TimeSpan.Maxvalue for default value (24 hours) </param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.BeginAdd(System.String,System.String,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            Start to asynchronously add object to cache
            (operation is aborted after default request timeout interval expires)
            </summary>
            <param name="groupKey">The group key</param>
            <param name="itemKey">The item key</param>
            <param name="obj">Object to add</param>
            <param name="expiry">Expiry time , TimeSpan.MaxValue for default value (24 hours)</param>
            <param name="callback">An AsyncCallback delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the EndAdd delegate when the operation is complete.</param>
            <returns>IAsyncResult object that stores state information about this operation</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.BeginAdd(System.String,System.String,System.Object,System.TimeSpan,System.AsyncCallback,System.Object,System.Int32)">
            <summary>
            Start to asynchronously add object to cache
            </summary>
            <param name="groupKey">The group key</param>
            <param name="itemKey">The item key</param>
            <param name="obj">Object to add</param>
            <param name="expiry">Expiry time , TimeSpan.MaxValue for default value (24 hours)</param>
            <param name="callback">An AsyncCallback delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the EndAdd delegate when the operation is complete.</param>
            <param name="requestTimeoutMillis">max time to wait before aborting operation.  Zero or negative value means no timeout</param>
            <returns>IAsyncResult object that stores state information about this operation</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.EndAdd(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous Add 
            </summary>
            <param name="ar">An IAsyncResult that stores state information about this operation</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.EndAdd(System.IAsyncResult,System.Int32@,System.String@)">
            <summary>
            Ends a pending asynchronous add
            </summary>
            <param name="ar">An IAsyncResult that stores state information about this operation</param>
            <param name="returnCode">return code, 0 = success</param>
            <param name="exceptionString">descriptive string</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.AddByteArray(System.String,System.String,System.Byte[],System.TimeSpan)">
            <summary>
            Synchronously add a byte array to the cache
            (operation is aborted after default request timeout interval expires)
            </summary>
            <param name="groupKey">The group key</param>
            <param name="itemKey">The item key</param>
            <param name="buffer">Byte array to add</param>
            <param name="expiry">Expiry time - set to TimeSpan.Maxvalue for default value (24 hours) </param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.BeginAddByteArray(System.String,System.String,System.Byte[],System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            Start to asynchronously add byte array to cache
            (operation is aborted after default request timeout interval expires)
            </summary>
            <param name="groupKey">The group key</param>
            <param name="itemKey">The item key</param>
            <param name="buffer">Byte array to add</param>
            <param name="expiry">Expiry time , TimeSpan.MaxValue for default value (24 hours)</param>
            <param name="callback">An AsyncCallback delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the EndAddByteArray delegate when the operation is complete.</param>
            <returns>IAsyncResult object that stores state information about this operation</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.BeginAddByteArray(System.String,System.String,System.Byte[],System.TimeSpan,System.AsyncCallback,System.Object,System.Int32)">
            <summary>
            Start to asynchronously add byte array to cache
            </summary>
            <param name="groupKey">The group key</param>
            <param name="itemKey">The item key</param>
            <param name="buffer">Byte array to add</param>
            <param name="expiry">Expiry time , TimeSpan.MaxValue for default value (24 hours)</param>
            <param name="callback">An AsyncCallback delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the EndAddByteArray delegate when the operation is complete.</param>
            <param name="requestTimeoutMillis">max time to wait before aborting operation.  Zero or negative value means no timeout</param>
            <returns>IAsyncResult object that stores state information about this operation</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.EndAddByteArray(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous AddByteArray 
            </summary>
            <param name="ar">An IAsyncResult that stores state information about this operation</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.EndAddByteArray(System.IAsyncResult,System.Int32@,System.String@)">
            <summary>
            Ends a pending asynchronous AddByteArray
            </summary>
            <param name="ar">An IAsyncResult that stores state information about this operation</param>
            <param name="resultCode">return code, 0 = success</param>
            <param name="exceptionString">descriptive string</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.Get(System.String,System.String)">
            <summary>
            Synchronously get an item from the cache
            (operation is aborted after default request timeout interval expires)
            </summary>
            <param name="groupKey">The group key</param>
            <param name="itemKey">The item key</param>
            <returns>cached object, or null if object not in cache</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.BeginGet(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Start to asynchronously get object from cache
            (operation is aborted after default request timeout interval expires)
            </summary>
            <param name="groupKey">The group key</param>
            <param name="itemKey">The item key</param>
            <param name="callback">An AsyncCallback delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the EndGet delegate when the operation is complete.</param>
            <returns>IAsyncResult object that stores state information about this operation</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.BeginGet(System.String,System.String,System.AsyncCallback,System.Object,System.Int32)">
            <summary>
            Start to asynchronously get object from cache
            </summary>
            <param name="groupKey">The group key</param>
            <param name="itemKey">The item key</param>
            <param name="callback">An AsyncCallback delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the EndGet delegate when the operation is complete.</param>
            <param name="requestTimeoutMillis">max time to wait before aborting operation.  Zero or negative value means no timeout</param>
            <returns>IAsyncResult object that stores state information about this operation</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.EndGet(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous Get
            </summary>
            <param name="ar">An IAsyncResult that stores state information about this operation</param>
            <returns>cached object, or null if object not in cache</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.EndGet(System.IAsyncResult,System.Int32@,System.String@)">
            <summary>
            Ends a pending asynchronous Get
            </summary>
            <param name="ar">An IAsyncResult that stores state information about this operation</param>
            <param name="resultCode">return code, 0 = success</param>
            <param name="exceptionString">descriptive string</param>
            <returns>cached object, or null if object not in cache</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.GetByteArray(System.String,System.String)">
            <summary>
            Synchronously get a byte array from the cache
            (operation is aborted after default request timeout interval expires)
            </summary>
            <param name="groupKey">The group key</param>
            <param name="itemKey">The item key</param>
            <returns>cached byte array, or null if object not in cache</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.BeginGetByteArray(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Start to asynchronously get byte array from cache
            (operation is aborted after default request timeout interval expires)
            </summary>
            <param name="groupKey">The group key</param>
            <param name="itemKey">The item key</param>
            <param name="callback">An AsyncCallback delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the EndGetByteArray delegate when the operation is complete.</param>
            <returns>IAsyncResult object that stores state information about this operation</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.BeginGetByteArray(System.String,System.String,System.AsyncCallback,System.Object,System.Int32)">
            <summary>
            Start to asynchronously get byte array from cache
            </summary>
            <param name="groupKey">The group key</param>
            <param name="itemKey">The item key</param>
            <param name="callback">An AsyncCallback delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the EndGetByteArray delegate when the operation is complete.</param>
            <param name="requestTimeoutMillis">max time to wait before aborting operation.  Zero or negative value means no timeout</param>
            <returns>IAsyncResult object that stores state information about this operation</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.EndGetByteArray(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous GetByteArray
            </summary>
            <param name="ar">An IAsyncResult that stores state information about this operation</param>
            <returns>cached object, or null if object not in cache</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.EndGetByteArray(System.IAsyncResult,System.Int32@,System.String@)">
            <summary>
            Ends a pending asynchronous GetByteArray
            </summary>
            <param name="ar">An IAsyncResult that stores state information about this operation</param>
            <param name="returnCode">return code, 0 = success</param>
            <param name="exceptionString">descriptive string</param>
            <returns>cached object, or null if object not in cache</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.RemoveGroup(System.String)">
            <summary>
            Remove all items in named group
            (operation is aborted after default request timeout interval expires)
            </summary>
            <param name="groupKey">The group key</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.BeginRemoveGroup(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Start to asynchronously remove all items from a group
            (operation is aborted after default request timeout interval expires)
            </summary>
            <param name="groupKey">The group key</param>
            <param name="callback">An AsyncCallback delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the EndGroupRemove delegate when the operation is complete.</param>
            <returns>IAsyncResult object that stores state information about this operation</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.BeginRemoveGroup(System.String,System.AsyncCallback,System.Object,System.Int32)">
            <summary>
            Start to asynchronously remove all items from a group
            </summary>
            <param name="groupKey">The group key</param>
            <param name="callback">An AsyncCallback delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the EndGroupRemove delegate when the operation is complete.</param>
            <param name="requestTimeoutMillis">max time to wait before aborting operation.  Zero or negative value means no timeout</param>
            <returns>IAsyncResult object that stores state information about this operation</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.EndRemoveGroup(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous GroupRemove
            </summary>
            <param name="ar">An IAsyncResult that stores state information about this operation</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.EndRemoveGroup(System.IAsyncResult,System.Int32@,System.String@)">
            <summary>
            Ends a pending asynchronous GroupRemove avoiding throwing an exception if an error occured
            </summary>
            <param name="ar">IAsyncResult objecy</param>
            <param name="returnCode">Error Code</param>
            <param name="exceptionString">Error description</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.RemoveItem(System.String,System.String)">
            <summary>
            Remove specific item from cache
            (operation is aborted after default request timeout interval expires)
            </summary>
            <param name="groupKey">The group key</param>
            <param name="itemKey">The item key</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.BeginRemoveItem(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Start to asynchronously remove a specific item from the cache
            (operation is aborted after default request timeout interval expires)
            </summary>
            <param name="groupKey">The group key</param>
            <param name="itemKey">The item key</param>
            <param name="callback">An AsyncCallback delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the EndItemRemove delegate when the operation is complete.</param>
            <returns>IAsyncResult object that stores state information about this operation</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.BeginRemoveItem(System.String,System.String,System.AsyncCallback,System.Object,System.Int32)">
            <summary>
            Start to asynchronously remove a specific item from the cache
            </summary>
            <param name="groupKey">The group key</param>
            <param name="itemKey">The item key</param>
            <param name="callback">An AsyncCallback delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the EndItemRemove delegate when the operation is complete.</param>
            <param name="requestTimeoutMillis">max time to wait before aborting operation.  Zero or negative value means no timeout</param>
            <returns>IAsyncResult object that stores state information about this operation</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.EndRemoveItem(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous ItemRemove
            </summary>
            <param name="ar">An IAsyncResult that stores state information about this operation</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.EndRemoveItem(System.IAsyncResult,System.Int32@,System.String@)">
            <summary>
            Ends a pending asynchronous ItemRemove and returns returnCode and exception string.
            </summary>
            <param name="ar">An IAsyncResult that stores state information about this operation</param>
            <param name="returnCode"></param>
            <param name="exceptionString"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.GetResponseCode(System.IAsyncResult)">
            <summary>
            Returns the response code associated with an asynchronous cache operation
            </summary>
            <param name="ar">An IAsyncResult that stores state information about this operation</param>
            <returns>Response code</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.GetErrorString(System.IAsyncResult)">
            <summary>
            Returns the error string associated with an asynchronous cache operation
            </summary>
            <param name="ar">An IAsyncResult that stores state information about this operation</param>
            <returns>Error string</returns>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.Logger">
            <summary>
            Wrapper around MsnTrace log
            gurantees that messages sent from different methods and classes follow same formatting rules
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.Logger.LogError(System.String,System.Exception)">
            <summary>
            format exception and output it to trace
            formatting includes adding trace, and output of the "ultimate cause", the furthemost inner exception
            </summary>
            <param name="info"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.Logger.GetUltimateCause(System.Exception)">
            <summary>
            Returns input if exception doesn't contain InnerException
            otherwise drills down and return the innermost InnerException
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.Logger.TraceSource">
            <summary>
            Gets a trace source for logging 
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.MSNCacheException">
            <summary>
            This class represents an exception generated by the cache.  To determine the type of
            exception reference the Code property.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.MSNCacheException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Retrieves the underlying object data using a custom serialization info object.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.MSNCacheException.GetErrorString(Microsoft.MSN.MSNCache.Asynchronous.CacheError,System.String)">
            <summary>
            Retrieve the error string for a specific error number.
            </summary>
            <param name="errorNumber">error number, as retrieved by Code property</param>
            <param name="msg">custom user message</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.MSNCacheException.ErrorCode">
            <summary>
            Retrieve error code
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.MSNCacheException.Code">
            <summary>
            Retrieves the error code that generated the exception.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.RequestSender.BeginSend(Microsoft.MSN.MSNCache.Asynchronous.CacheState,Microsoft.MSN.MSNCache.Asynchronous.CacheRequest,Microsoft.MSN.MSNCache.Asynchronous.SendSuccessCallback,Microsoft.MSN.MSNCache.Asynchronous.SendErrorCallback)">
            <summary>
            initiate send request
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.RequestSender.OnSendRequestDone(System.IAsyncResult)">
            <summary>
            called asynchronously
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.RequestSender.IsSendComplete(System.Int32)">
            <summary>
            checks if additional bytes complete sent request
            if buffer has been completely sent, sets write complete flag
            </summary>
            <param name="moreBytesSent"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.SocketCache.EndAddByteArray(System.IAsyncResult)">
            Silly redirect TODO: mark as obsolete
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.HostCacheProxy">
            <summary>
            This class is a proxy for one remote cache. The complexity here is that we are
            using tcp for communications. With TCP if you a send there is no guarantee that
            the entire buffer will be sent atomically. Its possible for the send to succeed but
            send only a partial buffer. The send returns a count of bytes sent, and the application needs
            to issue a new send request for the data that was not sent on the first try. The problem 
            arises if there are multiple threads wanting to use the same socket - if thread A sends a 
            partial buffer there is a chance that thread B will get its write in before the second part 
            of thread A's buffer. In which case you have an interleaved buffer that can't be disentangled by the sender.
            
            This class solves the problem by queing all requests and only sending one request down the socket at a time.
            
            Also: once a request has been sent everything is asynchronous, so events can occur out of order.
            There are three events that could possibly happen:
            1. send completed
            2. receive completed
            3. timout
            You can't assume that anything is going to happen in any particular order - we can get a response completed
            before the send completed, and we can get both (or either) send completed and recieve completed after 
            timeout.
            
            To deal with the recieve completed coming before the send completed I added an event to the
            request object. This gets set on creation, and reset when the write completes. The read and timeout wait on this.
            
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.HostCacheProxy.OnConnectRequestDone(System.IAsyncResult)">
            <summary>
            Called when a request completes.
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.HostCacheProxy.SignalComplete(System.String,System.Byte[],Microsoft.MSN.MSNCache.Asynchronous.CacheError,System.String)">
            <summary>
            Signal waiting clients that we have completed, and also if there is a callback
            registered call it.
            </summary>
            <param name="requestId"></param>
            <param name="data"></param>
            <param name="status"></param>
            <param name="statusString"></param>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.CacheState">
            <summary>
            encapsulates internal state of HostCacheProxy object,
            access to all public/internal methods is synced using internal lock
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheState.BeginConnect(Microsoft.MSN.MSNCache.Asynchronous.CacheRequest,System.AsyncCallback)">
            <summary>
            starts async connect, if currenly disconnected.
            otherwise has no effect
            </summary>
            <returns>true if connect has started</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheState.BeginReceive(System.Byte[],System.Int32,System.Int32,System.AsyncCallback)">
            <summary>
            Hangs out an asynchronous read request. We will only have one read request outstanding
            on each socket so that we can be sure data is correctly sequenced. In practice all objects
            require at least two reads - the first reads the 12 byte header which has the object
            length. The second will read the remainder of the object. Because data in the
            buffer is self relative we need the buffer to be the complete length of the object
            including its 12 byte header. But we don't need the initial 12 bytes after the first read. 
            CacheRequest has the logic to figure out where in the buffer we are, and how much more data needs to be loaded
            </summary>
            <param name="readBuffer"></param>
            <param name="callback"></param>
            <param name="readBytesLeft"></param>
            <param name="readBytesReceived"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheState.EndConnect(System.IAsyncResult,Microsoft.MSN.MSNCache.Asynchronous.CacheRequest)">
            <summary>
            Ends async Connect request
            At the end of the method the HostConnectionState==Connected and thisSocket is mapped to valid connected Socket
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheState.EndSend(System.IAsyncResult)">
            <summary>
            End send request
            </summary>
            <param name="ar"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheState.BeginSend(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,Microsoft.MSN.MSNCache.Asynchronous.RequestSender)">
            <summary>
            Send async Send request
            </summary>
            <param name="buffer"></param>
            <param name="bytesSent"></param>
            <param name="bytesLeft"></param>
            <param name="callback"></param>
            <param name="sendHelper"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheState.InternalEnqueue(Microsoft.MSN.MSNCache.Asynchronous.CacheRequest)">
            <summary>
            place request into internal queue
            if for any reason request cannot be place in a queue, an appropriate exceptuion will be thrown
            </summary>
            <param name="request"></param>
            <returns>queue size BEFORE request has been added</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheState.RemoveFromPendingQueue(System.String)">
            <summary>
            removes request from internal pending queue
            </summary>
            <param name="requestId"></param>
            <returns>object that has been removed</returns>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.CacheClientCategoryInstaller">
            <summary>
            Category installer for the WstCacheClient event source.
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheClientCategoryInstaller.EventSource">
            <summary>
            The event source for which to install the category strings.
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents">
            <summary>
            Events in the CacheClient module.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.log">
            <summary>
            MSN Runtime's event logger 
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.#ctor">
            <summary>
            Private constructor prevents instantiation.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.WstCacheClientErrorValue">
            <summary>
            EventDefinition for WstCacheClientError
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.LogWstCacheClientError(System.String,System.String,System.String,System.String)">
            <summary>
            Method to log an event of type WstCacheClientError.
            </summary>
            <param name="description">Argument description for formatting the event text.</param>
            <param name="exceptionType">Argument exceptionType for formatting the event text.</param>
            <param name="exceptionMessage">Argument exceptionMessage for formatting the event text.</param>
            <param name="stackTrace">Argument stackTrace for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.LogWstCacheClientError(System.String,System.String,System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type WstCacheClientError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="description">Argument description for formatting the event text.</param>
            <param name="exceptionType">Argument exceptionType for formatting the event text.</param>
            <param name="exceptionMessage">Argument exceptionMessage for formatting the event text.</param>
            <param name="stackTrace">Argument stackTrace for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.HostDenyListedValue">
            <summary>
            EventDefinition for HostDenyListed
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.LogHostDenyListed(System.String,System.String)">
            <summary>
            Method to log an event of type HostDenyListed.
            </summary>
            <param name="hostName">Argument hostName for formatting the event text.</param>
            <param name="denyListExpiration">Argument denyListExpiration for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.LogHostDenyListed(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type HostDenyListed with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="hostName">Argument hostName for formatting the event text.</param>
            <param name="denyListExpiration">Argument denyListExpiration for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.MappingTableExpirationDetectedValue">
            <summary>
            EventDefinition for MappingTableExpirationDetected
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.LogMappingTableExpirationDetected(System.String)">
            <summary>
            Method to log an event of type MappingTableExpirationDetected.
            </summary>
            <param name="lastRefreshTimestamp">Argument lastRefreshTimestamp for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.LogMappingTableExpirationDetected(System.String,System.Exception)">
            <summary>
            Method to log an event of type MappingTableExpirationDetected with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="lastRefreshTimestamp">Argument lastRefreshTimestamp for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.MappingTableUpdateValue">
            <summary>
            EventDefinition for MappingTableUpdate
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.LogMappingTableUpdate">
            <summary>
            Method to log an event of type MappingTableUpdate.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.LogMappingTableUpdate(System.Exception)">
            <summary>
            Method to log an event of type MappingTableUpdate with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.ConfigurationChangeValue">
            <summary>
            EventDefinition for ConfigurationChange
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.LogConfigurationChange(System.String)">
            <summary>
            Method to log an event of type ConfigurationChange.
            </summary>
            <param name="config">Argument config for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.LogConfigurationChange(System.String,System.Exception)">
            <summary>
            Method to log an event of type ConfigurationChange with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="config">Argument config for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.FailedToChangeConfigurationValue">
            <summary>
            EventDefinition for FailedToChangeConfiguration
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.LogFailedToChangeConfiguration(System.String)">
            <summary>
            Method to log an event of type FailedToChangeConfiguration.
            </summary>
            <param name="config">Argument config for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.LogFailedToChangeConfiguration(System.String,System.Exception)">
            <summary>
            Method to log an event of type FailedToChangeConfiguration with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="config">Argument config for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.CentralizedSettingFoundValue">
            <summary>
            EventDefinition for CentralizedSettingFound
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.LogCentralizedSettingFound(System.String,System.String)">
            <summary>
            Method to log an event of type CentralizedSettingFound.
            </summary>
            <param name="name">Argument name for formatting the event text.</param>
            <param name="value">Argument value for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.LogCentralizedSettingFound(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type CentralizedSettingFound with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="name">Argument name for formatting the event text.</param>
            <param name="value">Argument value for formatting the event text.</param>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.EventLogger">
            <summary>
            Gets the EventLogger used to report events from this source.
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.EventSource">
            <summary>
            Gets the event source for events defined in this module.
            </summary>
            <value>
            The event source for events defined in this module.
            </value>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.WstCacheClientError">
            <summary>
              Gets the EventDefinition for the WstCacheClientError.
            </summary>
            <value>The EventDefinition for the WstCacheClientError</value>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.HostDenyListed">
            <summary>
              Gets the EventDefinition for the HostDenyListed.
            </summary>
            <value>The EventDefinition for the HostDenyListed</value>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.MappingTableExpirationDetected">
            <summary>
              Gets the EventDefinition for the MappingTableExpirationDetected.
            </summary>
            <value>The EventDefinition for the MappingTableExpirationDetected</value>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.MappingTableUpdate">
            <summary>
              Gets the EventDefinition for the MappingTableUpdate.
            </summary>
            <value>The EventDefinition for the MappingTableUpdate</value>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.ConfigurationChange">
            <summary>
              Gets the EventDefinition for the ConfigurationChange.
            </summary>
            <value>The EventDefinition for the ConfigurationChange</value>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.FailedToChangeConfiguration">
            <summary>
              Gets the EventDefinition for the FailedToChangeConfiguration.
            </summary>
            <value>The EventDefinition for the FailedToChangeConfiguration</value>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.CentralizedSettingFound">
            <summary>
              Gets the EventDefinition for the CentralizedSettingFound.
            </summary>
            <value>The EventDefinition for the CentralizedSettingFound</value>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK\debug\doc\JobAgentTestJob.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JobAgentTestJob</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Webstore.JobFramework.Testing.JobAgentTestJob.JobAgentTestJobWorker">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobFramework.Testing.JobAgentTestJob.JobAgentTestJobWorker.EventLogSource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobFramework.Testing.JobAgentTestJob.JobAgentTestJobWorker.EventLogFilename">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobFramework.Testing.JobAgentTestJob.JobAgentTestJobWorker.EventLogMessageType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobFramework.Testing.JobAgentTestJob.JobAgentTestJobWorker.Init(Microsoft.Webstore.JobEngine.IJobAgent,System.String,Microsoft.Webstore.JobEngine.Location,System.Object,System.Int32)">
            <summary>
            
            </summary>
            <param name="ja"></param>
            <param name="localMachine"></param>
            <param name="location"></param>
            <param name="userArgs"></param>
            <param name="batchId"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobFramework.Testing.JobAgentTestJob.JobAgentTestJobWorker.PartialBaseInit(Microsoft.Webstore.JobEngine.IJobAgent,System.String,Microsoft.Webstore.JobEngine.Location,System.Object,System.Int32)">
            <summary>
            This do a partial initial like the base.Init(), but intentionally did not init the timer.
            This is because we will be controlling the timing. Normal worker should never do this.
            </summary>
            <param name="ja"></param>
            <param name="localMachine"></param>
            <param name="location"></param>
            <param name="userArgs"></param>
            <param name="batchId"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobFramework.Testing.JobAgentTestJob.JobAgentTestJobWorker.TerminateJob">
            <summary>
            Is called when the job should be terminated
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobFramework.Testing.JobAgentTestJob.JobAgentTestJobWorker.Run(Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.IPartitionSet,System.Int32@)">
            <summary>
            
            </summary>
            <param name="inputSet"></param>
            <param name="outputSet"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.JobFramework.Testing.JobAgentTestJob.JobAgentTestJob">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobFramework.Testing.JobAgentTestJob.JobAgentTestJob.Main(System.String[])">
            <summary>
            This method is not meant to run standalone. This is just to test the worker.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK\debug\doc\WstBackupJob.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WstBackupJob</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Webstore.OfflineProcessing.NeedFullException">
            <summary>
            This exception is what we throw when we are trying to do a log backup but a full is required.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.BackupMaker">
            <summary>
            This class handles creating a backup and performing any backup
            calculations (like how much space on disk it will take, etc).
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.BackupMaker.BackupSetName">
            <summary>
            Use this to describe the backups so that they can be differentiated
            from other backups.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupMaker.BuildBackupCommand(System.String)">
            <summary>
            Creates the backup command string to use for a given backup file.
            </summary>
            <param name="backupFile">path to the backup file to create</param>
            <returns>SQL command string</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupMaker.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="serverName">name of the server the database resides on</param>
            <param name="databaseName">name of the database to backup</param>
            <exception cref="T:System.ArgumentNullException">if serverName or databaseName null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupMaker.DoBackup(System.String)">
            <summary>
            Performs a backup.
            </summary>
            <param name="newBackupPath">path and name of the backup file to create</param>
            <exception cref="T:System.ArgumentNullException">if called with null newBackupPath</exception>
            <exception cref="T:System.IO.FileNotFoundException">if the backup file does not exist after backup succeeds</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on any database errors</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupMaker.BuildMasterConnectionString">
            <summary>
            Builds the connection string to use for the SqlConnection.
            </summary>
            <returns>connection string</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupMaker.BuildConnectionString">
            <summary>
            Returns the connection string to use for this SQL server.
            </summary>
            <returns>connection string</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupMaker.GetFreeSpaceRequired">
            <summary>
            Retrieves the approximate amount of free space required for the backup.
            </summary>
            <returns>approximate size of the backup, in bytes</returns>
            <exception cref="T:System.Data.DataException">if expected results are not returned from the database query</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on SQL error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupMaker.SpaceUsedStringToInt64(System.String)">
            <summary>
            This helper function converts the output of the sp_spaceused SPROC to an actual number,
            since it is normally a string something like "553 KB".
            </summary>
            <param name="spaceUsed">string back from sp_spaceused</param>
            <returns>Int64 in bytes</returns>
            <exception cref="T:System.Data.DataException">if spaceUsed is not in KB</exception>
            <exception cref="T:System.ArgumentNullException">if spaceUsed is null</exception>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupMaker.FreeSpaceRequired">
            <summary>
            The amount of free space required on disk for the backup file this will create.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.DataAccess">
            <summary>
            This class is a common base class for WstBackup database.
            
            In broad strokes, how does a client connect to the WstDatabase?  There are two dimensions:
            1) the client looks for the centralized setting WstBackupSiteAndDeployment to look for the
               name of the site and deployment to use for WstBackup.  If that centralized setting isn't
               present, the client uses the default site and deployment name 'WstBackup'
            2) the client also looks at its cluster for a setting "OfflineProcessingDataPartitionNumber"
               which it uses as its variable partition number when sending requests
            
            Neither of these methods are supported at the moment.  We will always use PartitionNumber 0
            and default site WstBackup.
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DataAccess.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DataAccess.GetBackupPartition">
            <summary>
            When we get to supporting partitions, this will be used.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DataAccess.GetConnection">
            <summary>
            The connection comes out of centralized settings.  If there is no site\deployment
            name specified then we default to "WstBackup".
            </summary>
            <returns>a newly created WstConnection object</returns>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.DatabaseTemplateSet">
            <summary>
            This class contains the logic to read and retrieve database template information.
            We only really need to know stripe path and share, and we only need to retrieve
            them by template name.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DatabaseTemplateSet.#ctor">
            <summary>
            Default constructor, yields a new template set.  Template contents
            will be populated on demand or when Refresh is called.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DatabaseTemplateSet.Refresh">
            <summary>
            Called to refresh the set of templates from the database.
            </summary>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">if a stripe UID was found without a name</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on error reaching WstConfig database</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on error reaching WstConfig database</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DatabaseTemplateSet.GetShare(System.String)">
            <summary>
            Retrieves the stripe share for a given template.  Null if not found.
            </summary>
            <param name="templateName">name of the template to retrieve stripe info for</param>
            <returns>stripe share (doesn't include server name), null if templateName not found</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">if a stripe UID was found without a name</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on error reaching WstConfig database</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on error reaching WstConfig database</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DatabaseTemplateSet.GetPath(System.String)">
            <summary>
            Retrieves the stripe path for a given template.  Null if not found.
            </summary>
            <param name="templateName">name of the template to retrieve stripe info for</param>
            <returns>stripe path (doesn't include server name), null if templateName not found</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">if a stripe UID was found without a name</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on error reaching WstConfig database</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on error reaching WstConfig database</exception>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.DatabaseTemplateSet.DatabaseTemplateInfo">
            <summary>
            Represents all of the info we store about a single database template.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.IFreeSpaceCalculator">
            <summary>
            This interface represents a free space calculator.  It is here strictly for
            the purposes of enabling testability.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.IFreeSpaceCalculator.GetFromDir(System.String)">
            <summary>
            Calculates the amount of free space left in a directory.
            </summary>
            <param name="dir">path to the directory</param>
            <returns>amount of free space left in directory, in bytes</returns>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.FreeSpaceCalculator">
            <summary>
            This class is for convenience sake only, to enable unit testing,
            because it is notoriously hard to simulate low free space conditions
            in unit tests.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.FreeSpaceCalculator.GetFromDir(System.String)">
            <summary>
            Calculates the free space from a directory.
            </summary>
            <param name="dir">directory to use for free space calculation</param>
            <returns>number of bytes free space</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.FullBackupMaker.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="serverName">name of the server the database lives on</param>
            <param name="databaseName">name of the database to back up</param>
            <exception cref="T:System.ArgumentNullException">if serverName or databaseName are null</exception>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.IBackupConfig">
            <summary>
            This interface exists only to assist with testing.  There is really only one
            production code implementation of it.  See BackupConfig for the real
            definitive implementation and description of the properties.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.LiteSpeedFullBackupMaker">
            <summary>
            This class implements the SqlLiteSpeed backup maker.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.LiteSpeedFullBackupMaker.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="serverName">name of the server the database lives on</param>
            <param name="databaseName">name of the database to back up</param>
            <exception cref="T:System.ArgumentNullException">if serverName or databaseName are null</exception>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.LiteSpeedLogBackupMaker">
            <summary>
            This class implements the SqlLiteSpeed backup maker for log files.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.LiteSpeedLogBackupMaker.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="serverName">name of the server the database lives on</param>
            <param name="databaseName">name of the database to back up</param>
            <exception cref="T:System.ArgumentNullException">if serverName or databaseName are null</exception>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.LiteSpeedUtils">
            <summary>
            This class contains some utilities for performing basic checks on SQLLiteSpeed.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.LiteSpeedUtils.IsInstalled(System.String)">
            <summary>
            Determines whether or not SQLLiteSpeed is installed on a given server.
            </summary>
            <param name="serverName">name of the server to check</param>
            <returns>true if SQLLiteSpeed is installed, false otherwise</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:System.ArgumentNullException">if serverName is null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.LiteSpeedUtils.IsEnabled(System.String)">
            <summary>
            Determines whether or not SqlLiteSpeed is enabled for a particular deployment.
            </summary>
            <param name="deploymentName">name of the deployment</param>
            <returns>true if LiteSpeed is enabled for this deployment</returns>
            <exception cref="T:System.ArgumentNullException">if deploymentName is null</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.LiteSpeedUtils.IsEnabled(System.Guid)">
            <summary>
            Determines whether or not SQLLiteSpeed is enabled for a particular deployment.
            </summary>
            <param name="deploymentUID">Guid of the deployment</param>
            <returns>true if LiteSpeed is enabled for this deployment</returns>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.LogBackupMaker.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="serverName">name of the server the database lives on</param>
            <param name="databaseName">name of the database to back up</param>
            <exception cref="T:System.ArgumentNullException">if serverName or databaseName is null</exception>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.IOPJobWorker">
            <summary>
            This is the minimal interface for a worker class to implement.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.IOPJobWorker.DoIteration(System.Boolean)">
            <summary>
            Executes an iteration of the job.
            </summary>
            <param name="asConsole">boolean indicating whether or not this job is being run as console</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.IOPJobWorker.GetSleepTimeInMS">
            <summary>
            Retrieves the amount of time that the job should sleep between iterations.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.WstOPJobWorker">
            <summary>
            This class implements the job worker for the Offline Processing backup job.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJobWorker.Init(Microsoft.Webstore.JobEngine.IJobAgent,System.String,Microsoft.Webstore.JobEngine.Location,System.Object,System.Int32)">
            <summary>
            This is a trivial init method which simply populates arguments in the base class and stores user args.
            </summary>
            <param name="ja"></param>
            <param name="localMachine"></param>
            <param name="location"></param>
            <param name="userArgs"></param>
            <param name="batchId"></param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJobWorker.Run(Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.IPartitionSet,System.Int32@)">
            <summary>
            This job runs as a continuous loop for ever (well at least until someone kills it or it dies of natural
            causes).  The basic idea is:
             - do some stuff
             - wait awhile
             - loop back
            This method implements that basic logic.  All of the real logic of the job is contained in the class
            IOPJobWorker.
            </summary>
            <param name="inputSet">not used, the job figures out its own PartitionSet based on the machine it is running on</param>
            <param name="outputSet">not used</param>
            <param name="statusCode">return value</param>
            <returns>null</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJobWorker.CreateWorkerFromXmlArguments(System.String)">
            <summary>
            Override this method in your subclass to create the worker.
            </summary>
            <param name="userArgs">arguments as xml passed in from the job framework</param>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.WstOPJob">
            <summary>
            This class implements the Job Coordinator for the Offline Processing backup job.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJob.Start(System.String,System.Int32,Microsoft.Webstore.JobEngine.BatchOption,Microsoft.Webstore.JobEngine.Location,System.String)">
            <summary>
            This is the Job Coordinator starting point routine for an OfflineProcessing job.
            </summary>
            <param name="jobName">name of the job, defined by the job description XML</param>
            <param name="dop">degree of parallelism, needs to be something really high</param>
            <param name="batchOption">doesn't matter since location must be ServerRole</param>
            <param name="location">must be ServerRole</param>
            <param name="userArguments">user arguments, should be XML conforming to schema and defined by the job description XML</param>
            <returns>return code, 0 indicates success</returns>
            <exception cref="T:System.Xml.XmlException">if userArguments is not a valid Xml document</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">if location type is not ServerRole</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJob.ValidateArgs(System.String)">
            <summary>
            This method performs validation of the user arguments at the JobCoordinator level.
            </summary>
            <param name="userArgs">arguments passed in from the user</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJob.GetWorkerType">
            <summary>
            Returns a type object for the worker to instantiate.
            </summary>
            <returns>type object describing the IJobStep worker</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJob.RunAsConsole(System.String[])">
            <summary>
            Call this to see if the application should run at the console.  It so it will see
            the first arg as "-console", the second arg as "-argfile", and the third arg will be
            the XML file to read for user args.
            </summary>
            <param name="args">commandline arguments</param>
            <returns>true if it was run as console, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJob.LogException(System.Exception)">
            <summary>
            This is called if an exception occurs from calling job.Run.  You can provide
            your own implementation in a subclass if you want to log any errors.
            </summary>
            <param name="ex">exception that was generatd, will be rethrown</param>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.SqlBackupFile">
            <summary>
            This class represents a SQL backup file and contains methods to manipulate its contents.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.SqlBackupFile.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new SqlBackupFile object for a given filepath.
            </summary>
            <param name="filePath">path to the SqlBackupFile</param>
            <param name="useLiteSpeed">whether or not we should use LiteSpeed to process the backupfile</param>
            <exception cref="T:System.ArgumentNullException">if filePath is empty</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.SqlBackupFile.GetDatabaseName">
            <summary>
            Retrieves the original name of this database.
            </summary>
            <returns>original name of this database</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.SqlBackupFile.GetServerName">
            <summary>
            Retrieves the original server name this database was on.
            </summary>
            <returns>name of the server that generated this backup</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.SqlBackupFile.GetRestoredSizeInBytes">
            <summary>
            Retrieves the size of this backup, when restored, in bytes.
            </summary>
            <returns>size of the backup, when restored, in bytes</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.SqlBackupFile.ReadBackupFilelist">
            <summary>
            Reads in all the interesting contents from the backup.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.SqlBackupFile.ReadBackupHeader">
            <summary>
            Reads in all the interesting contents from the backup.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.SqlBackupFile.GetDataFiles">
            <summary>
            Returns an enumeration of all logical data file names in the backup.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.SqlBackupFile.GetLogFiles">
            <summary>
            Returns an enumeration of all logical log file names in the backup.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.SqlBackupFile.FilePath">
            <summary>
            The filepath of this backup file.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.BackupConfig">
            <summary>
            This class represents the backup job configuration for a single
            database on a server.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupConfig.#cctor">
            <summary>
            Static constructor, creates a new DatabaseTemplateSet.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupConfig.#ctor(Microsoft.Webstore.OfflineProcessing.BackupJobArguments,Microsoft.Webstore.MetaData.WebstoreDatabase,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Default constructor
            </summary>
            <param name="args">arguments to the job, used for determining schedule etc</param>
            <param name="db">database this configuration is for</param>
            <param name="shouldBackup">whether or not this database should be backed up,should be determined from job config</param>
            <param name="shouldManageRetention">whether or not we should manage retention of backups for this database</param>
            <param name="shouldOfflineProcess">whether or not this database should be offline processed, should be determined from job config and backup policy</param>
            <exception cref="T:System.ArgumentNullException">if args or db is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">if shouldBackup is false but shouldOfflineProcess is true</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupConfig.FigureOutStripePath(Microsoft.Webstore.MetaData.WebstoreDatabase)">
            <summary>
            Helper method for determining the stripe path for a given database.
            </summary>
            <param name="db"></param>
            <returns>the path on local machine for the stripe</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">if a stripe UID was found without a name</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on error reaching WstConfig database</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on error reaching WstConfig database</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupConfig.FigureOutStripeShare(Microsoft.Webstore.MetaData.WebstoreDatabase)">
            <summary>
            Helper method for determining the stripe share for a given database.
            </summary>
            <param name="db"></param>
            <returns>the path on network for the stripe</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">if a stripe UID was found without a name</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on error reaching WstConfig database</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on error reaching WstConfig database</exception>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupConfig.TemplateSet">
            <summary>
            Static instance of DatabaseTemplateSet for use in determining stripe info.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupConfig.NextFullStart">
            <summary>
            The next time this database should be backed up with a full, according to the schedule.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupConfig.LastFullStart">
            <summary>
            The last time this database should have been backed up with a full, according to the schedule.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupConfig.NextLogStart">
            <summary>
            The next time this database should be backed up with a log, according to the schedule.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupConfig.LastLogStart">
            <summary>
            The last time this database should have been backed up with a log, according to the schedule.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupConfig.Database">
            <summary>
            The database that this backup configuration is for.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupConfig.ShouldBackup">
            <summary>
            Whether or not this database should be backed up.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupConfig.ShouldOfflineProcess">
            <summary>
            Whether or not this database should be sent for offline processing after
            being backed up.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupConfig.ShouldManageRecoveryMode">
            <summary>
            Whether or not we should be managing the recovery mode of this database.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupConfig.ShouldManageRetention">
            <summary>
            Whether or not we should be managing the backup retention for this database.  We might want to manage
            retention policy but not actually back up a database - for instance in the case of a secondary.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupConfig.ForceFullBackup">
            <summary>
            Whether or not a full backup needs to be triggered regardless of timing.
            Defaults to false but gets set to true whenever we toggle recovery mode
            from simple to full.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupConfig.StripeShare">
            <summary>
            The stripe share/path where this database should store its backups.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupConfig.StripePath">
            <summary>
            The strip path (local) where this database should store its backups.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupConfig.DatabaseName">
            <summary>
            The name of the database this backup config is for.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupConfig.DeploymentUID">
            <summary>
            The UID of the deployment this database belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupConfig.FSSNum">
            <summary>
            The FSSId of the FSS this database belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupConfig.DatabaseStatus">
            <summary>
            The status of the database this backup config is for.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupConfig.BackupsToRetain">
            <summary>
            The maximum number of backups to retain, described in job args.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupConfig.ServerName">
            <summary>
            Returns the name of the server that this database is on.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupConfigSet.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Webstore.OfflineProcessing.IBackupConfig})">
            <summary>
            Creates a new BackupConfigSet from a set of configs.
            </summary>
            <param name="configs">configs to use for this set</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupConfigSet.GetConfigsForBackup">
            <summary>
            Retrieves the subset of backup configs in this set that are
            enabled for backup.
            </summary>
            <returns>all BackupConfigs in this set with ShouldBackup == true</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupConfigSet.ContentsAreEqual(Microsoft.Webstore.OfflineProcessing.BackupConfigSet,Microsoft.Webstore.OfflineProcessing.BackupConfigSet)">
            <summary>
            Convenience member added to do a comparison of two BackupConfigSets to see
            if their contents are equal.  This means they have the same BackupConfig
            items but they could be in different orders.
            </summary>
            <param name="s1">first BackupConfigSet to compare</param>
            <param name="s2">second BackupConfigSet to compare</param>
            <returns>true if the sets have the same contents</returns>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.BackupDataAccess">
            <summary>
            This class represents the WstBackup database.
            
            In broad strokes, how does a client connect to the WstDatabase?  There are two dimensions:
            1) the client looks for the centralized setting WstBackupSiteAndDeployment to look for the
               name of the site and deployment to use for WstBackup.  If that centralized setting isn't
               present, the client uses the default site and deployment name 'WstBackup'
            2) the client also looks at its cluster for a setting "OfflineProcessingDataPartitionNumber"
               which it uses as its variable partition number when sending requests
            
            Neither of these methods are supported at the moment.  We will always use PartitionNumber 0
            and default site WstBackup.
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupDataAccess.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupDataAccess.UpdateBackupRecords(Microsoft.Webstore.OfflineProcessing.BackupFileSet)">
            <summary>
            This function makes sure that there are entries for all of the files in
            the WstBackup database and makes sure that entries for this database / server
            set that are older than the oldest in this fileSet get deleted.
            </summary>
            <param name="fileSet">set of files to update records in the WstBackup database</param>
            <exception cref="T:System.ArgumentNullException">if fileSet is null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupDataAccess.DeleteBackupRecords(Microsoft.Webstore.OfflineProcessing.BackupFileSet)">
            <summary>
            Deletes all backup records older than the oldest full in fileset.
            </summary>
            <param name="fileset">set of files that are still valid</param>
            <exception cref="T:System.ArgumentNullException">if fileset is null</exception>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.BackupFileInfo">
            <summary>
            This class represents a backup file and contains the static methods needed to perform various
            transforms (like retrieving the path, etc).
            The system basically saves backups like this:
            rootDir\OfflineProcessing\Type\yyyy-MM-ddTHH-mm-ss_DatabaseName.ext
            An example would be:
            c:\stripe\OfflineProcessing\Full\2008-01-23T12-22-23_UtAppFss0.bak
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupFileInfo.GetSharePath(System.String)">
            <summary>
            Retrieves the share path to the backup.  By prepending servername\
            a client would have the full UNC to this backup file.
            </summary>
            <param name="rootShareDir">share location (no preceding \, no preceding server name)</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">if rootShareDir is null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupFileInfo.#ctor">
            <summary>
            Internal use only constructor.  Instead call ConvertFromFileInfo.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupFileInfo.GetFullBackupLocation(System.String)">
            <summary>
            Returns the directory location that full backups will be created in for a particular
            root dir.
            </summary>
            <param name="rootDir">root directory, typically stripe path</param>
            <returns>string representation of the path to the full backup location</returns>
            <exception cref="T:System.ArgumentNullException">if rootDir is null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupFileInfo.GetLogBackupLocation(System.String)">
            <summary>
            Retrieves the directory that will contain log backups for a particular root dir.
            </summary>
            <param name="rootDir">root directory, typically stripe path</param>
            <returns>string representation of the path to the log backup location</returns>
            <exception cref="T:System.ArgumentNullException">if rootDir is null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupFileInfo.ConvertFromFileInfo(System.IO.FileInfo)">
            <summary>
            Creates a new BackupFileInfo object from a FileInfo.
            </summary>
            <param name="fi">object to create the BackupFileInfo from</param>
            <returns>newly created and populated BackupFileInfo</returns>
            <exception cref="T:System.ArgumentNullException">if fi is null</exception>
            <exception cref="T:System.IO.InvalidDataException">if fi describes a file that is not in backup format</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupFileInfo.GetAllByDatabase(System.String,System.String)">
            <summary>
            This helper function creates a list of all BackupFileInfo objects for a given
            root directory, and database name.
            </summary>
            <param name="rootDir">root directory (normally stripe share)</param>
            <param name="databaseName">database name to look for</param>
            <returns>list of results (possibly empty, never null)</returns>
            <exception cref="T:System.ArgumentNullException">if rootDir or databaseName are null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupFileInfo.CreateRootDirStructure(System.String)">
            <summary>
            Given the root dir, create the Full directory if it does not exist
            </summary>
            <param name="rootDir">root directory to use, normally the stripe</param>
            <exception cref="T:System.ArgumentNullException">if rootDir or databaseName are null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupFileInfo.CreateFullBackupName(System.String,System.DateTime,System.Boolean,System.String)">
            <summary>
            Helper method that returns the full backup name to use
            </summary>
            <param name="rootDir">root dir (generally stripe path)</param>
            <param name="databaseName">name of the database to backup</param>
            <param name="backupUtcTime">The utcTime of backup</param>
            <param name="usingLiteSpeed">true if this backup is using litespeed</param>
            <returns>The file name to use</returns>
            <exception cref="T:System.ArgumentNullException">if rootDir or databaseName are empty</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupFileInfo.CreateLogBackupName(System.String,System.DateTime,System.Boolean,System.String)">
            <summary>
            Helper method that returns the log backup name to use
            </summary>
            <param name="rootDir">root dir (generally stripe path)</param>
            <param name="databaseName">name of the database to backup</param>
            <param name="backupUtcTime">The utcTime of backup</param>
            <param name="usingLiteSpeed">true if this backup is using litespeed</param>
            <returns>The file name to use</returns>
            <exception cref="T:System.ArgumentNullException">if rootDir or databaseName are empty</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupFileInfo.CreateBackupName(System.DateTime,System.Boolean,System.String,System.String)">
            <summary>
            Internal helper method for creating backup names.
            </summary>
            <param name="databaseName">name of the database to create a backup name for</param>
            <param name="backupUtcTime">time of the backup</param>
            <param name="liteSpeed">true if this backup should be named for litespeed</param>
            <param name="extension">extension for the backup</param>
            <returns>database file backup name</returns>
            <exception cref="T:System.ArgumentNullException">if databaseName or extension are null/empty</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupFileInfo.CreateFullBackup(System.String,System.DateTime,System.Boolean,System.String)">
            <summary>
            This function creates a new BackupFileInfo that represents a full backup.  IT DOES NOT
            ACTUALLY CREATE THE BACKUP FILE, so check .Exists whenever you need to use it.
            </summary>
            <param name="rootDir">root directory for backups</param>
            <param name="databaseName">database name</param>
            <param name="backupUtcTime">time to create the backup for</param>
            <param name="usingLiteSpeed">true if the backup is using litespeed</param>
            <returns>BackupFileInfo object</returns>
            <exception cref="T:System.ArgumentNullException">if rootdir or databasename are null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupFileInfo.CreateLogBackup(System.String,System.DateTime,System.Boolean,System.String)">
            <summary>
            This function creates a new BackupFileInfo that represents a log backup.  IT DOES NOT
            ACTUALLY CREATE THE BACKUP FILE, so check .Exists whenever you need to use it.
            </summary>
            <param name="rootDir">root directory for backups</param>
            <param name="databaseName">database name</param>
            <param name="backupUtcTime">time to create the backup for</param>
            <param name="usingLiteSpeed">true if this back was made using litespeed</param>
            <returns>BackupFileInfo object</returns>
            <exception cref="T:System.ArgumentNullException">if rootdir or databasename are null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupFileInfo.CreateBackup(System.String,System.DateTime,System.Boolean,System.String,Microsoft.Webstore.OfflineProcessing.BackupJobArgumentsXml.BackupType)">
            <summary>
            Internal method which implements CreateLogBackup and CreateFullBackup.
            </summary>
            <param name="rootDir"></param>
            <param name="databaseName"></param>
            <param name="backupUtcTime"></param>
            <param name="usingLiteSpeed"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupFileInfo.ParseFileName(System.String,System.DateTime@,Microsoft.Webstore.OfflineProcessing.BackupFileInfo.BackupMakerType@)">
            <summary>
            Parse the file name to extract the utcTime, suffix and extension
            We do the inverse of what was done in "GenerateXXXFileName"
            </summary>
            <param name="fileName"></param>
            <param name="utcTime">The utcTime embedded in the name</param>
            <param name="makerType">contains the backup maker type</param>
            <exception cref="T:System.FormatException">if the filename is not in the expected format</exception>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupFileInfo.Name">
            <summary>
            The name of the backup file.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupFileInfo.FullName">
            <summary>
            The full name of the backup file.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupFileInfo.Exists">
            <summary>
            Whether or not the backup file exists.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupFileInfo.FileInfo">
            <summary>
            The underlying FileInfo object.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupFileInfo.BackupFileCreationDate">
            <summary>
            The creation date of the backup file.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupFileInfo.BackupType">
            <summary>
            Retrieves the type of backup represented by this file.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupFileInfo.FileSizeInMB">
            <summary>
            Size of the file in MB.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupFileInfo.RestoreSizeInMB">
            <summary>
            Size of the file when restored in MB.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupFileInfo.DeploymentManifestVersion">
            <summary>
            This doesn't work, don't use it.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupFileInfo.UsingLiteSpeed">
            <summary>
            Whether or not this backup file was made using Sql LiteSpeed.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.BackupFileSet">
            <summary>
            This class represents a set of backup files, along with a backup configuration.
            It is instantiated from an IBackupConfig and is responsible for discovering all
            of the files that belong to the backup set.
            
            There are only two fields in the IBackupConfig that we use:
            - stripe path
            - databasename
            
            There are two very different access patterns for files in a backupset:
            - full backups
            - log backups
            
            Full backups have a filecount-based retention policy applied to them.  That is
            the user specifies the maximum number of backups to keep and we always delete the
            oldest first until we achieve that number.  So mainly the access pattern for full
            backups is:
            - how many full backups are there?
            - delete the oldest
            
            For log backups we have an archivebit-based retention policy applied to them.
            That is the user doesn't specify anything and we always just delete any log
            backup that has the archive bit set.  So the pattern of access for log backups
            is:
            - delete anything with archive bit set, regardless of age
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupFileSet.CreateFromConfig(Microsoft.Webstore.OfflineProcessing.IBackupConfig)">
            <summary>
            Instantiates a new BackupFileSet by searching config stripe path for backups.
            </summary>
            <param name="config">config to use to get stripe path and database name from</param>
            <returns>a newly created BackupFileSet object</returns>
            <exception cref="T:System.ArgumentNullException">if config is null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupFileSet.#ctor(Microsoft.Webstore.OfflineProcessing.IBackupConfig)">
            <summary>
            Private constructor used by CreateFromConfig.
            </summary>
            <param name="config">config to store</param>
            <exception cref="T:System.ArgumentNullException">if config is null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupFileSet.SearchForBackups">
            <summary>
            This method is called once by the static instantiator CreateFromConfig
            and builds the initial list of BackupFileInfo objects by searching the
            backup directories.
            </summary>
            <exception cref="T:System.ArgumentNullException">if StripePath or DatabaseName are null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupFileSet.AddNewFile(Microsoft.Webstore.OfflineProcessing.BackupFileInfo)">
            <summary>
            Method to add a newly create file to the set.  Its called when we successfully create
            a new backup file.
            </summary>
            <param name="newFile">backup file to add to the set</param>
            <exception cref="T:System.ArgumentNullException">if newFile is null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupFileSet.DeleteOldest">
            <summary>
            Deletes the oldest full backup, and all log backups that are in its sequence or older.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">if no full files exist</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupFileSet.DeleteOldLogs">
            <summary>
            Deletes all logs older than the oldest backup.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupFileSet.DeleteLogs(System.Boolean)">
            <summary>
            This function deletes log files.  If checkArchiveBit is set to true, it will
            only delete log files with the archive bit set.  Otherwise it deletes all log
            files in a set.
            </summary>
            <param name="checkArchiveBit">set to true if you want to preserve log files without archive bit set</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupFileSet.KillFileLocks(System.String)">
            <summary>
            This function attempts to kill the file locks on files in a particular path.
            </summary>
            <param name="path">path to kill filelocks in</param>
            <exception cref="T:System.ArgumentNullException">if path is null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupFileSet.DeleteFile(Microsoft.Webstore.OfflineProcessing.BackupFileInfo)">
            <summary>
            This function deletes a file from disk and from this backup set.  The file must have come from
            this backup set.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">if the file isn't in this set</exception>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupFileSet.FullFileCount">
            <summary>
            The number of files in this backup set.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupFileSet.FullOldestDate">
            <summary>
            Retrieves the date of the oldest backup in the set, or DateTime.MinValue if
            no backups exist in the set.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupFileSet.Config">
            <summary>
            The config for this backup file set.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupFileSet.FreeSpaceCalculator">
            <summary>
            Used only for testability purposes, defaults to FreeSpaceCalculator.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupFileSet.FreeSpace">
            <summary>
            The free space left on the drive this file set is on.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.BackupJobArguments">
            <summary>
            This class represents the arguments passed to the backup job.  It also contains the logic
            for parsing the arguments from XML.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobArguments.CreateFromXML(System.String)">
            <summary>
            This method parses a string containing xml conforming to BackupJobArgumentsSchema.xsd
            and returns a new BackupJobArguments object populated with the parsed values.
            </summary>
            <param name="argumentsAsXml">string containing xml conforming to BackupJobArgumentsSchema.xsd</param>
            <returns>newly created BackupJobArguments from the xml</returns>
            <exception cref="T:System.ArgumentNullException">if argumentsAsXml or backupJobSchema are null</exception>
            <exception cref="T:System.Xml.XmlException">if argumentsAsXml is not a valid Xml document, if any required nodes cannot be found in the XML, or if any arguments are out of range</exception>
            <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">if argumentsAsXml cannot be validated against the schema</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobArguments.CalcNextStartFrom(System.DateTime)">
            <summary>
            Using the schedule on this item, calculates the next start time from any point in time (assumed UTC).
            </summary>
            <param name="someTime">time to calculate next start time from</param>
            <returns>next start time</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobArguments.CalcNextLogFrom(System.DateTime)">
            <summary>
            Using the schedule on this item, calculate the next log backup start time.
            </summary>
            <param name="sometime">time to calculate next log backup from</param>
            <returns>time of the next log backup, or MinValue if log backups aren't enabled</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobArguments.CalcLastStartFrom(System.DateTime)">
            <summary>
            Using the schedule on this item, calculates the previous start time from any point in time (assumed UTC).
            </summary>
            <param name="someTime">time to calculate previous start time from</param>
            <returns>previous start time</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobArguments.CalcLastLogFrom(System.DateTime)">
            <summary>
            Using the schedule on this item, calculate the start time of the previous log backup.
            </summary>
            <param name="sometime">time to calculate last log backup from</param>
            <returns>time of the last log backup, or MinValue if log backups aren't enabled</returns>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobArguments.NextFullStart">
            <summary>
            The time to start the next full backup, according to the schedule set in these settings.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobArguments.LastFullStart">
            <summary>
            The time that the last full backup should have started, according to the schedule set in
            these settings.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobArguments.NextLogStart">
            <summary>
            The time to start the next log backup, according to the schedule set in these settings.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobArguments.LastLogStart">
            <summary>
            The time that the last log backup should have started, according to the schedule set in
            these settings.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobArguments.TypeOfBackup">
            <summary>
            The type of backup to perform at each scheduled interval.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobArguments.MaximumBackupsToRetain">
            <summary>
            The minimum number of backups to retain.  -1 means retain as many as possible.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobArguments.MinutesBetweenLogBackups">
            <summary>
            If log backups are enabled, the number of minutes between successive log backups.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobArguments.DeploymentsToBackup">
            <summary>
            The list of deployments that should be backed up.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.BackupJobArgumentsXml">
            <summary>
            This class is used to serialize / deserialize backup job arguments to/from XML.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobArgumentsXml.#ctor">
            <summary>
            Creates a BackupJobArgumentsXml object with default values.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobArgumentsXml.CreateFromXML(System.String,System.String)">
            <summary>
            This method parses a string containing xml conforming to BackupJobArgumentsSchema.xsd
            and returns a new BackupJobArgumentsXml object populated with the parsed values.
            </summary>
            <param name="argumentsAsXml">string containing xml conforming to BackupJobArgumentsSchema.xsd</param>
            <param name="backupJobSchema">string containing the BackupJobArgumentsSchema.xsd</param>
            <returns>newly created BackupJobArguments from the xml</returns>
            <exception cref="T:System.ArgumentNullException">if argumentsAsXml or backupJobSchema are null</exception>
            <exception cref="T:System.Xml.XmlException">if argumentsAsXml is not a valid Xml document, if any required nodes cannot be found in the XML, or if any arguments are out of range</exception>
            <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">if argumentsAsXml cannot be validated against the schema</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobArgumentsXml.ProcessScheduleXml(Microsoft.Webstore.Common.XmlProcessor,System.Xml.XmlNode,Microsoft.Webstore.OfflineProcessing.BackupJobArgumentsXml)">
            <summary>
            Pulls/parses the individual arguments and values out of the XML for BackupSettings.Schedule xml item.
            This method is broken out from CreateFromXML simply to make things more readable.
            </summary>
            <param name="xmlProc"></param>
            <param name="schedule"></param>
            <param name="retval">object to store processed settings on</param>
            <exception cref="T:System.Xml.XmlException">if any of the arguments are out of range, or if any required nodes can't be found</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobArgumentsXml.ProcessBackupInfoXml(Microsoft.Webstore.Common.XmlProcessor,System.Xml.XmlNode,Microsoft.Webstore.OfflineProcessing.BackupJobArgumentsXml)">
            <summary>
            Pulls/parses the individual arguments and values out of the XML for BackupSettings.BackupInfo xml item.
            This method is broken out from CreateFromXML simply to make things more readable.
            </summary>
            <param name="xmlProc"></param>
            <param name="backupInfo"></param>
            <param name="retval"></param>
            <exception cref="T:System.Xml.XmlException">if any required nodes cannot be found</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobArgumentsXml.ProcessDeploymentsXml(Microsoft.Webstore.Common.XmlProcessor,System.Xml.XmlNode,Microsoft.Webstore.OfflineProcessing.BackupJobArgumentsXml)">
            <summary>
            Pulls/parses the individual arguments and values out of the XML for BackupSettings.Deployments xml item.
            This method is broken out from CreateFromXML simply to make things more readable.
            </summary>
            <param name="xmlProc"></param>
            <param name="deployments"></param>
            <param name="retval"></param>
            <exception cref="T:System.Xml.XmlException">if any required nodes cannot be found</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobArgumentsXml.AddDeploymentToBackup(System.String)">
            <summary>
            Adds a deployment to the list to be backed up.
            </summary>
            <param name="deploymentName">name of deployment</param>
            <exception cref="T:System.ArgumentNullException">if deploymentName is null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobArgumentsXml.ToString">
            <summary>
            Returns an XML serialized string version of these arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobArgumentsXml.Period">
            <summary>
            The scheduling period of the backup: daily, weekly, or hourly.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobArgumentsXml.MinuteOccursOn">
            <summary>
            The minute of the hour the backup occurs on.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobArgumentsXml.HourOccursOn">
            <summary>
            The hour of the day the backup occurs on (UTC).
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobArgumentsXml.DayOccursOn">
            <summary>
            The day of the week the backup occurs on (UTC).
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobArgumentsXml.TypeOfBackup">
            <summary>
            The type of backup to perform at each scheduled interval.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobArgumentsXml.MaximumBackupsToRetain">
            <summary>
            The maximum number of backups to retain.  -1 means retain as many as possible.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobArgumentsXml.MinutesBetweenLogBackups">
            <summary>
            If log backups are enabled, the number of minutes between successive log backups.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobArgumentsXml.DeploymentsToBackup">
            <summary>
            The list of deployments that should be backed up.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobArgumentsXml.Xml">
            <summary>
            Returns the XML representation of these arguments.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.BackupJobArgumentsXml.BackupType">
            <summary>
            The type of backup to be performed.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.BackupJobArgumentsXml.SchedulingPeriod">
            <summary>
            The schedule for the backup.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.BackupJobResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobResources.BackupJobArgumentsSchema">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
            &lt;xs:schema id=&quot;BackupJobArguments&quot;
                targetNamespace=&quot;urn:BackupJobArgumentsSchema.xsd&quot;
                elementFormDefault=&quot;qualified&quot;
                xmlns=&quot;urn:BackupJobArgumentsSchema.xsd&quot;
                xmlns:mstns=&quot;urn:BackupJobArgumentsSchema.xsd&quot;
                xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;
            &gt;
              &lt;xs:element name=&quot;BackupJobSettings&quot;&gt;
                &lt;xs:annotation&gt;
                  &lt;xs:documentation&gt;The parent element for backup job settings.&lt;/xs:documentation&gt;
                &lt;/xs:annotation&gt;
                &lt;xs:complexType&gt;
             [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.BackupJobWorker">
            <summary>
            This class contains the implementation of the actual work we do in this job.  It essentially has a single
            method, ExecuteIteration, which gets called repeatedly.  The idea is that you execute an iteration, then
            you wait some duration of time, then you execute another iteration.  The job is designed to run continually
            so on error it throws an exception rather than returning a status code.
            
            The goal is that all policy and decision making logic stays in this job.  That is any time we need to make
            a decision, like "should we back up this database?" or "is it time to back up a database?" the decision gets
            made in this class.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobWorker.CreateFromXmlArguments(System.String)">
            <summary>
            Method used to create a worker, requires xml arguments.
            </summary>
            <param name="xmlArgs">XML arguments, in string form, conforming to BackupJobArgumentsSchema.xsd</param>
            <returns>a new instance of BackupJobWorker with the passed in args</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobWorker.DoIteration(System.Boolean)">
            <summary>
            This executes a single round (or iteration) of processing for the job.  You can
            consider this the "main" method on this class.
            The asConsole flag changes the behavior of the job in the following way:
            - it makes the job ignore the scheduling information in the args
              and think it is always time for a backup.  This is to facilitate testing mainly.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobWorker.DoFullBackup(Microsoft.Webstore.OfflineProcessing.BackupFileSet,System.Collections.Generic.List{Microsoft.Webstore.OfflineProcessing.BackupFileSet})">
            <summary>
            Performs a full backup on a given backup fileset.
            </summary>
            <param name="fileset">BackupFileSet that contains the config to use and will contain the newly created backup</param>
            <param name="backups">set of all backups on our server, used for making space</param>
            <exception cref="T:System.ArgumentNullException">if fileset or backups are null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobWorker.DoLogBackup(Microsoft.Webstore.OfflineProcessing.BackupFileSet,System.Collections.Generic.List{Microsoft.Webstore.OfflineProcessing.BackupFileSet})">
            <summary>
            Performs a log backup on a given backup fileset.
            </summary>
            <param name="fileset">BackupFileSet that contains the config to use and will contain the newly created backup</param>
            <param name="backups">set of all backups on our server, used for making space</param>
            <exception cref="T:System.ArgumentNullException">if fileset or backups are null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobWorker.DoBackup(Microsoft.Webstore.OfflineProcessing.BackupMaker,Microsoft.Webstore.OfflineProcessing.BackupFileSet,Microsoft.Webstore.OfflineProcessing.BackupFileInfo)">
            <summary>
            Performs a backup on a given backup fileset.
            </summary>
            <param name="maker">BackupMaker to use for creating the backup</param>
            <param name="fileset">BackupFileSet that contains the config to use and will contain the newly created backup</param>
            <param name="newBackup">BackupFileInfo containig the name of the new file</param>
            <exception cref="T:System.ArgumentNullException">if maker, fileset, or newBackup are null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobWorker.ManageRecoveryMode(Microsoft.Webstore.OfflineProcessing.IBackupConfig)">
            <summary>
            Performs recovery mode management on a database.  For any database
            that we should backup, the recovery mode should be set to full.  For
            any database that we shouldn't backup, the recovery mode should be set
            to simple.
            </summary>
            <param name="config">config describing the database</param>
            <exception cref="T:System.ArgumentNullException">if config is null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobWorker.GetSleepTimeInMS">
            <summary>
            Retrieve the time to sleep between iterations.
            </summary>
            <returns>the time to sleep between iterations</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobWorker.IsTimeForFullBackup(Microsoft.Webstore.OfflineProcessing.IBackupConfig)">
            <summary>
            Determines if it is time to make a full backup.  The criteria for this are:
            1. if config.ForceFull is set, yes
            2. if no record of a previous full can be found, and we are less than 25% of the way into the backup window
            3. if the previous full was before config.LastFull
            </summary>
            <param name="config">config describing the database</param>
            <returns>true if a full backup should be performed</returns>
            <exception cref="T:System.ArgumentNullException">if config is null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobWorker.IsTimeForLogBackup(Microsoft.Webstore.OfflineProcessing.IBackupConfig)">
            <summary>
            Determines if it is time to perform a log backup.  The criteria is:
            - log backups are enabled; AND
            - last backup (of any sort) was before config.LastLogStart
            </summary>
            <param name="config">config that describes the database being checked</param>
            <returns>true if we should perform a log backup</returns>
            <exception cref="T:System.ArgumentNullException">if config is null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobWorker.IsDbStateOkayForBackup(Microsoft.Webstore.OfflineProcessing.IBackupConfig)">
            <summary>
            Helper function for deciding if a database state is okay for backing up.
            </summary>
            <param name="config">config describing the database</param>
            <returns>true if database state is okay for backup</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobWorker.MakeSpaceForBackup(Microsoft.Webstore.OfflineProcessing.BackupMaker,Microsoft.Webstore.OfflineProcessing.BackupFileSet,System.Collections.Generic.IEnumerable{Microsoft.Webstore.OfflineProcessing.BackupFileSet})">
            <summary>
            This method is responsible for making appropriate space for the backup.
            It figures out how much space is required to perform the backup, then checks
            the stripe path to make sure at least that much space is available.  If not,
            it enters an aggressive cleanup phase where it first:
            - deletes as many backups from the database being backed up as it can
            and if that isn't enough
            - deletes backups from all other databases oldest to youngest
            </summary>
            <param name="maker">BackupMaker object to use for making the backup (used to determine how much space)</param>
            <param name="dbFileSet">BackupFileSet for the database we need to make space for</param>
            <param name="allFileSets">set of all BackupFileSet on our machine (might need for aggressive space cleanup)</param>
            <exception cref="T:System.ApplicationException">if enough free space cannot be made</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobWorker.AggressiveCleanup(System.Collections.Generic.IEnumerable{Microsoft.Webstore.OfflineProcessing.BackupFileSet})">
            <summary>
            This method performs an aggressive cleanup.  It will find the oldest backup
            in a set and delete it.  If no backups exist in any of the sets it throws an exception.
            </summary>
            <param name="allFileSets">BackupFileSet container to search for oldest backup</param>
            <exception cref="T:System.ApplicationException">if no sets have any backups to delete</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobWorker.GetBackupConfigSet">
            <summary>
            Creates a list of all WebstoreDatabases that are on this server along with their
            configuration with respect to backup.
            </summary>
            <returns>list of configs for all databases on this server, never null (but might be empty)</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobWorker.GetBackupFileSets(Microsoft.Webstore.OfflineProcessing.BackupConfigSet)">
            <summary>
            This method retrieves the list of currently existing backup files made by
            the backup job, on disk, for each BackupConfig in the configs set.
            </summary>
            <param name="configs">set of BackupConfig objects to retrieve on-disk backup info for</param>
            <returns>list of BackupFileSet objects, one for each BackupConfigSet in the configs</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobWorker.ShouldOfflineProcess(Microsoft.Webstore.MetaData.WebstoreDatabase)">
            <summary>
            Helper method for determining if we should offline process a database.  The point
            of this method is to keep the logic of "should we offline process a database" in a
            single, easy to modify place because there is a lot of ongoing discussion about this.
            </summary>
            <param name="db">database to check</param>
            <returns>true if we should offline process it</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobWorker.ShouldBackup(Microsoft.Webstore.MetaData.WebstoreDatabase)">
            <summary>
            Helper method for determining if we should backup a database (really to see
            if backups are configured).
            </summary>
            <param name="db">database to check</param>
            <returns>true if backups are configured for this database</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobWorker.ShouldManageRetention(Microsoft.Webstore.MetaData.WebstoreDatabase)">
            <summary>
            Determines whether or not we should manage the retention policy of a given database.
            </summary>
            <param name="db">database to test</param>
            <returns>true if we should manage retention policy of the database</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobWorker.IsDbInDeployments(Microsoft.Webstore.MetaData.WebstoreDatabase)">
            <summary>
            Tests whether or not a given database is in the list of deployments we are supposed to (potentially) back up.
            </summary>
            <param name="db">database to test</param>
            <returns>true if it is in the deployment list</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobWorker.IsDefaultPrimary(Microsoft.Webstore.MetaData.WebstoreDatabase)">
            <summary>
            Tests whether or not a given database is the default primary.
            </summary>
            <param name="db">database to test</param>
            <returns>true if it is</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobWorker.IsPrimary(Microsoft.Webstore.MetaData.WebstoreDatabase)">
            <summary>
            Tests whether or not a given database is the primary.
            </summary>
            <param name="db">database to test</param>
            <returns>true if it is</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobWorker.CleanupByRetention(Microsoft.Webstore.OfflineProcessing.BackupFileSet)">
            <summary>
            Method to cleanup a backup file set based on its retention policy,
            as describe in its config.
            </summary>
            <param name="set"></param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobWorker.CleanupAll(Microsoft.Webstore.OfflineProcessing.BackupFileSet)">
            <summary>
            Method to clean up all members of a backup file set.
            </summary>
            <param name="set">file set to delete</param>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.WstBackupJobWorker">
            <summary>
            This class implements the job worker for the Offline Processing backup job.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.WstBackupJob">
            <summary>
            This class implements the Job Coordinator for the Offline Processing backup job.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.SqlBackupRecord">
            <summary>
            This class represents all of the information we consider interesting
            for a backup, whether one we are in the process of creating or one
            that was historical (from msdb.backupset).
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.SqlBackupRecord.GetLastRecordForDatabase(System.String,System.String)">
            <summary>
            This method retrieves the last backup record for a given database name and
            server.
            </summary>
            <param name="serverName">name of the server to retrieve the last backup record for</param>
            <param name="databaseName">name of the database to retrieve last backup record for</param>
            <returns>SqlBackupRecord describing the last completed backup, possibly null if non found</returns>
            <exception cref="T:System.ArgumentNullException">if serverName or databaseName are null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on sql error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.SqlBackupRecord.GetLastFullRecordForDatabase(System.String,System.String)">
            <summary>
            This method retrieves the last full backup record for a given database name and
            server.
            </summary>
            <param name="serverName">name of the server to retrieve the last backup record for</param>
            <param name="databaseName">name of the database to retrieve last backup record for</param>
            <returns>SqlBackupRecord describing the last completed backup, possibly null if non found</returns>
            <exception cref="T:System.ArgumentNullException">if serverName or databaseName are null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on sql error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.SqlBackupRecord.GetForDatabase(System.String,System.String,System.Boolean)">
            <summary>
            Internal helper method for connecting to master on a server and executing a command that
            returns a SqlBackupRecord object..
            </summary>
            <param name="serverName">name of the server</param>
            <param name="databaseName">name of the database to retrieve records for</param>
            <param name="fullOnly">true if only full records are wanted</param>
            <returns>SqlBackupRecord</returns>
            <exception cref="T:System.ArgumentNullException">if serverName or databaseName are null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on sql error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.SqlBackupRecord.BuildGetLastRecordConnectString(System.String)">
            <summary>
            Creates the connect string for the GetLastRecordForDatabase command.
            </summary>
            <param name="serverName">name of the server the database lives on</param>
            <returns>connect string</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.SqlBackupRecord.BuildGetLastRecordCommand(System.Data.SqlClient.SqlCommand,System.String,System.Boolean)">
            <summary>
            Builds the SqlCommand object to do GetLastRecordForDatabase.
            </summary>
            <param name="cmd">command object to populate</param>
            <param name="databaseName">databaseName</param>
            <param name="fullOnly">true if only full records are wanted</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.SqlBackupRecord.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Constructor for making a new SqlBackupRecord.
            </summary>
            <param name="startTime">time the backup started</param>
            <param name="finishTime">time the backup finished</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.SqlBackupRecord.AdjustTimes(System.Int32)">
            <summary>
            So the times are stored wierd in backupset.  The times are stored in
            database time and there is a time_zone field which is the number
            of 15 minute offsets from UTC that the local database time is in.  So
            this function attempts to set the times to UTC.  A - value means you
            have to add 15 minute increments until get to zero, while a + value
            means you have to subtrace 15 minute increments.
            </summary>
            <param name="timeZoneOffset">see summary</param>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.SqlBackupRecord.Start">
            <summary>
            The time at which this backup started, in UTC.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.SqlBackupRecord.Finish">
            <summary>
            The time at which this backup finished, in UTC.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.RecoveryModeControl">
            <summary>
            This class handles retrieving and setting the recovery mode for a database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RecoveryModeControl.#ctor(Microsoft.Webstore.OfflineProcessing.IBackupConfig)">
            <summary>
            Default constructor.
            </summary>
            <param name="config">config that describes the database to set recovery mode for</param>
            <exception cref="T:System.ArgumentNullException">if config is null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RecoveryModeControl.IsInFullRecoveryMode">
            <summary>
            Determine whether or not a database is currently in full recovery mode.
            </summary>
            <returns>true if a database is in full recovery mode, false otherwise</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RecoveryModeControl.SetRecoveryMode(System.Boolean)">
            <summary>
            Called to set the recovery mode on a database.
            </summary>
            <param name="setToFull">true if you want to set recovery mode to full, false sets to simple</param>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RecoveryModeControl.MasterConnectionString">
            <summary>
            Generates a connection string for master database.
            </summary>
            <returns>connection string for master</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RecoveryModeControl.AlterDatabaseCommand(System.Boolean)">
            <summary>
            Generates the AlterDatabase command string.
            </summary>
            <param name="setToFull"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.BackupJobCategoryInstaller">
            <summary>
            Category installer for the BackupJob event source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobCategoryInstaller.EventSource">
            <summary>
            The event source for which to install the category strings.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.BackupJobEvents">
            <summary>
            Events in the BackupJob module.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.log">
            <summary>
            MSN Runtime's event logger 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.#ctor">
            <summary>
            Private constructor prevents instantiation.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.JobCoordinatorErrorValue">
            <summary>
            EventDefinition for JobCoordinatorError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.LogJobCoordinatorError(System.String)">
            <summary>
            Method to log an event of type JobCoordinatorError.
            </summary>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.LogJobCoordinatorError(System.String,System.Exception)">
            <summary>
            Method to log an event of type JobCoordinatorError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.UserArgumentsErrorValue">
            <summary>
            EventDefinition for UserArgumentsError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.LogUserArgumentsError(System.String)">
            <summary>
            Method to log an event of type UserArgumentsError.
            </summary>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.LogUserArgumentsError(System.String,System.Exception)">
            <summary>
            Method to log an event of type UserArgumentsError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.JobArgumentsErrorValue">
            <summary>
            EventDefinition for JobArgumentsError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.LogJobArgumentsError(System.String)">
            <summary>
            Method to log an event of type JobArgumentsError.
            </summary>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.LogJobArgumentsError(System.String,System.Exception)">
            <summary>
            Method to log an event of type JobArgumentsError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.JobExecutionErrorValue">
            <summary>
            EventDefinition for JobExecutionError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.LogJobExecutionError(System.String)">
            <summary>
            Method to log an event of type JobExecutionError.
            </summary>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.LogJobExecutionError(System.String,System.Exception)">
            <summary>
            Method to log an event of type JobExecutionError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.DatabaseInBadStateValue">
            <summary>
            EventDefinition for DatabaseInBadState
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.LogDatabaseInBadState(System.String,System.String)">
            <summary>
            Method to log an event of type DatabaseInBadState.
            </summary>
            <param name="databaseName">Argument databaseName for formatting the event text.</param>
            <param name="state">Argument state for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.LogDatabaseInBadState(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type DatabaseInBadState with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="databaseName">Argument databaseName for formatting the event text.</param>
            <param name="state">Argument state for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.AggressiveCleanupInProgressValue">
            <summary>
            EventDefinition for AggressiveCleanupInProgress
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.LogAggressiveCleanupInProgress(System.String,System.String)">
            <summary>
            Method to log an event of type AggressiveCleanupInProgress.
            </summary>
            <param name="databaseName">Argument databaseName for formatting the event text.</param>
            <param name="backupLocation">Argument backupLocation for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.LogAggressiveCleanupInProgress(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type AggressiveCleanupInProgress with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="databaseName">Argument databaseName for formatting the event text.</param>
            <param name="backupLocation">Argument backupLocation for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.SuperAggressiveCleanupInProgressValue">
            <summary>
            EventDefinition for SuperAggressiveCleanupInProgress
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.LogSuperAggressiveCleanupInProgress(System.String,System.String)">
            <summary>
            Method to log an event of type SuperAggressiveCleanupInProgress.
            </summary>
            <param name="databaseName">Argument databaseName for formatting the event text.</param>
            <param name="backupLocation">Argument backupLocation for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.LogSuperAggressiveCleanupInProgress(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type SuperAggressiveCleanupInProgress with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="databaseName">Argument databaseName for formatting the event text.</param>
            <param name="backupLocation">Argument backupLocation for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.DeleteBackupValue">
            <summary>
            EventDefinition for DeleteBackup
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.LogDeleteBackup(System.String)">
            <summary>
            Method to log an event of type DeleteBackup.
            </summary>
            <param name="filename">Argument filename for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.LogDeleteBackup(System.String,System.Exception)">
            <summary>
            Method to log an event of type DeleteBackup with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="filename">Argument filename for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.SwitchedRecoveryModeToFullValue">
            <summary>
            EventDefinition for SwitchedRecoveryModeToFull
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.LogSwitchedRecoveryModeToFull(System.String)">
            <summary>
            Method to log an event of type SwitchedRecoveryModeToFull.
            </summary>
            <param name="databaseName">Argument databaseName for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.LogSwitchedRecoveryModeToFull(System.String,System.Exception)">
            <summary>
            Method to log an event of type SwitchedRecoveryModeToFull with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="databaseName">Argument databaseName for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.SwitchedRecoveryModeToSimpleValue">
            <summary>
            EventDefinition for SwitchedRecoveryModeToSimple
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.LogSwitchedRecoveryModeToSimple(System.String)">
            <summary>
            Method to log an event of type SwitchedRecoveryModeToSimple.
            </summary>
            <param name="databaseName">Argument databaseName for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.LogSwitchedRecoveryModeToSimple(System.String,System.Exception)">
            <summary>
            Method to log an event of type SwitchedRecoveryModeToSimple with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="databaseName">Argument databaseName for formatting the event text.</param>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.EventLogger">
            <summary>
            Gets the EventLogger used to report events from this source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.EventSource">
            <summary>
            Gets the event source for events defined in this module.
            </summary>
            <value>
            The event source for events defined in this module.
            </value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.JobCoordinatorError">
            <summary>
              Gets the EventDefinition for the JobCoordinatorError.
            </summary>
            <value>The EventDefinition for the JobCoordinatorError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.UserArgumentsError">
            <summary>
              Gets the EventDefinition for the UserArgumentsError.
            </summary>
            <value>The EventDefinition for the UserArgumentsError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.JobArgumentsError">
            <summary>
              Gets the EventDefinition for the JobArgumentsError.
            </summary>
            <value>The EventDefinition for the JobArgumentsError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.JobExecutionError">
            <summary>
              Gets the EventDefinition for the JobExecutionError.
            </summary>
            <value>The EventDefinition for the JobExecutionError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.DatabaseInBadState">
            <summary>
              Gets the EventDefinition for the DatabaseInBadState.
            </summary>
            <value>The EventDefinition for the DatabaseInBadState</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.AggressiveCleanupInProgress">
            <summary>
              Gets the EventDefinition for the AggressiveCleanupInProgress.
            </summary>
            <value>The EventDefinition for the AggressiveCleanupInProgress</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.SuperAggressiveCleanupInProgress">
            <summary>
              Gets the EventDefinition for the SuperAggressiveCleanupInProgress.
            </summary>
            <value>The EventDefinition for the SuperAggressiveCleanupInProgress</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.DeleteBackup">
            <summary>
              Gets the EventDefinition for the DeleteBackup.
            </summary>
            <value>The EventDefinition for the DeleteBackup</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.SwitchedRecoveryModeToFull">
            <summary>
              Gets the EventDefinition for the SwitchedRecoveryModeToFull.
            </summary>
            <value>The EventDefinition for the SwitchedRecoveryModeToFull</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.SwitchedRecoveryModeToSimple">
            <summary>
              Gets the EventDefinition for the SwitchedRecoveryModeToSimple.
            </summary>
            <value>The EventDefinition for the SwitchedRecoveryModeToSimple</value>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK\debug\doc\WstAggregationJob.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WstAggregationJob</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Webstore.OfflineProcessing.IOPJobWorker">
            <summary>
            This is the minimal interface for a worker class to implement.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.IOPJobWorker.DoIteration(System.Boolean)">
            <summary>
            Executes an iteration of the job.
            </summary>
            <param name="asConsole">boolean indicating whether or not this job is being run as console</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.IOPJobWorker.GetSleepTimeInMS">
            <summary>
            Retrieves the amount of time that the job should sleep between iterations.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.WstOPJobWorker">
            <summary>
            This class implements the job worker for the Offline Processing backup job.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJobWorker.Init(Microsoft.Webstore.JobEngine.IJobAgent,System.String,Microsoft.Webstore.JobEngine.Location,System.Object,System.Int32)">
            <summary>
            This is a trivial init method which simply populates arguments in the base class and stores user args.
            </summary>
            <param name="ja"></param>
            <param name="localMachine"></param>
            <param name="location"></param>
            <param name="userArgs"></param>
            <param name="batchId"></param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJobWorker.Run(Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.IPartitionSet,System.Int32@)">
            <summary>
            This job runs as a continuous loop for ever (well at least until someone kills it or it dies of natural
            causes).  The basic idea is:
             - do some stuff
             - wait awhile
             - loop back
            This method implements that basic logic.  All of the real logic of the job is contained in the class
            IOPJobWorker.
            </summary>
            <param name="inputSet">not used, the job figures out its own PartitionSet based on the machine it is running on</param>
            <param name="outputSet">not used</param>
            <param name="statusCode">return value</param>
            <returns>null</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJobWorker.CreateWorkerFromXmlArguments(System.String)">
            <summary>
            Override this method in your subclass to create the worker.
            </summary>
            <param name="userArgs">arguments as xml passed in from the job framework</param>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.WstOPJob">
            <summary>
            This class implements the Job Coordinator for the Offline Processing backup job.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJob.Start(System.String,System.Int32,Microsoft.Webstore.JobEngine.BatchOption,Microsoft.Webstore.JobEngine.Location,System.String)">
            <summary>
            This is the Job Coordinator starting point routine for an OfflineProcessing job.
            </summary>
            <param name="jobName">name of the job, defined by the job description XML</param>
            <param name="dop">degree of parallelism, needs to be something really high</param>
            <param name="batchOption">doesn't matter since location must be ServerRole</param>
            <param name="location">must be ServerRole</param>
            <param name="userArguments">user arguments, should be XML conforming to schema and defined by the job description XML</param>
            <returns>return code, 0 indicates success</returns>
            <exception cref="T:System.Xml.XmlException">if userArguments is not a valid Xml document</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">if location type is not ServerRole</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJob.ValidateArgs(System.String)">
            <summary>
            This method performs validation of the user arguments at the JobCoordinator level.
            </summary>
            <param name="userArgs">arguments passed in from the user</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJob.GetWorkerType">
            <summary>
            Returns a type object for the worker to instantiate.
            </summary>
            <returns>type object describing the IJobStep worker</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJob.RunAsConsole(System.String[])">
            <summary>
            Call this to see if the application should run at the console.  It so it will see
            the first arg as "-console", the second arg as "-argfile", and the third arg will be
            the XML file to read for user args.
            </summary>
            <param name="args">commandline arguments</param>
            <returns>true if it was run as console, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJob.LogException(System.Exception)">
            <summary>
            This is called if an exception occurs from calling job.Run.  You can provide
            your own implementation in a subclass if you want to log any errors.
            </summary>
            <param name="ex">exception that was generatd, will be rethrown</param>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.WstAggregationJobWorker">
            <summary>
            This class implements the job worker for the Offline Processing backup job.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.AggregationJobArgumentsXml.#ctor">
            <summary>
            Creates a new object with default values.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.AggregationJobWorker">
            <summary>
            This class contains the implementation of the actual work we do in this job.  
            The goal is that all policy and decision making logic stays in this job.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.AggregationJobWorker.DoIteration(System.Boolean)">
            <summary>
            Copies all new data from the WstStaging servers to the WstReporting servers
            </summary>
            <param name="asConsole">This parameter is not currently used.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.AggregationJobWorker.GetSleepTimeInMS">
            <summary>
            Amount of time Aggregation Job should wait in between runs.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.Properties.AggregationJobResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.Properties.AggregationJobResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.Properties.AggregationJobResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.Properties.AggregationJobResources.AggregationJobArgumentsSchema">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
            &lt;xs:schema attributeFormDefault=&quot;unqualified&quot; elementFormDefault=&quot;qualified&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;
              &lt;xs:element name=&quot;WstAggregationJobSettings&quot;&gt;
                &lt;xs:annotation&gt;
                  &lt;xs:documentation&gt;The parent element for the WstAggregationJob settings.&lt;/xs:documentation&gt;
                &lt;/xs:annotation&gt;
                &lt;xs:complexType&gt;
                  &lt;xs:sequence&gt;
                    &lt;xs:element name=&quot;SsisAggregationPackage&quot; minOccurs=&quot;1&quot; maxOccurs=&quot;1&quot;&gt;
                      &lt;xs:annotation&gt;
                     [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.AggregationJobCategoryInstaller">
            <summary>
            Category installer for the WstAggregationJob event source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.AggregationJobCategoryInstaller.EventSource">
            <summary>
            The event source for which to install the category strings.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.AggregationJobEvents">
            <summary>
            Events in the AggregationJob module.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.AggregationJobEvents.log">
            <summary>
            MSN Runtime's event logger 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.AggregationJobEvents.#ctor">
            <summary>
            Private constructor prevents instantiation.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.AggregationJobEvents.JobCoordinatorErrorValue">
            <summary>
            EventDefinition for JobCoordinatorError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.AggregationJobEvents.LogJobCoordinatorError(System.String)">
            <summary>
            Method to log an event of type JobCoordinatorError.
            </summary>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.AggregationJobEvents.LogJobCoordinatorError(System.String,System.Exception)">
            <summary>
            Method to log an event of type JobCoordinatorError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.AggregationJobEvents.UserArgumentsErrorValue">
            <summary>
            EventDefinition for UserArgumentsError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.AggregationJobEvents.LogUserArgumentsError(System.String)">
            <summary>
            Method to log an event of type UserArgumentsError.
            </summary>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.AggregationJobEvents.LogUserArgumentsError(System.String,System.Exception)">
            <summary>
            Method to log an event of type UserArgumentsError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.AggregationJobEvents.JobArgumentsErrorValue">
            <summary>
            EventDefinition for JobArgumentsError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.AggregationJobEvents.LogJobArgumentsError(System.String)">
            <summary>
            Method to log an event of type JobArgumentsError.
            </summary>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.AggregationJobEvents.LogJobArgumentsError(System.String,System.Exception)">
            <summary>
            Method to log an event of type JobArgumentsError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.AggregationJobEvents.JobExecutionErrorValue">
            <summary>
            EventDefinition for JobExecutionError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.AggregationJobEvents.LogJobExecutionError(System.String)">
            <summary>
            Method to log an event of type JobExecutionError.
            </summary>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.AggregationJobEvents.LogJobExecutionError(System.String,System.Exception)">
            <summary>
            Method to log an event of type JobExecutionError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.AggregationJobEvents.JobExecutionDataCenterWarningValue">
            <summary>
            EventDefinition for JobExecutionDataCenterWarning
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.AggregationJobEvents.LogJobExecutionDataCenterWarning(System.String)">
            <summary>
            Method to log an event of type JobExecutionDataCenterWarning.
            </summary>
            <param name="message">Argument message for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.AggregationJobEvents.LogJobExecutionDataCenterWarning(System.String,System.Exception)">
            <summary>
            Method to log an event of type JobExecutionDataCenterWarning with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="message">Argument message for formatting the event text.</param>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.AggregationJobEvents.EventLogger">
            <summary>
            Gets the EventLogger used to report events from this source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.AggregationJobEvents.EventSource">
            <summary>
            Gets the event source for events defined in this module.
            </summary>
            <value>
            The event source for events defined in this module.
            </value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.AggregationJobEvents.JobCoordinatorError">
            <summary>
              Gets the EventDefinition for the JobCoordinatorError.
            </summary>
            <value>The EventDefinition for the JobCoordinatorError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.AggregationJobEvents.UserArgumentsError">
            <summary>
              Gets the EventDefinition for the UserArgumentsError.
            </summary>
            <value>The EventDefinition for the UserArgumentsError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.AggregationJobEvents.JobArgumentsError">
            <summary>
              Gets the EventDefinition for the JobArgumentsError.
            </summary>
            <value>The EventDefinition for the JobArgumentsError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.AggregationJobEvents.JobExecutionError">
            <summary>
              Gets the EventDefinition for the JobExecutionError.
            </summary>
            <value>The EventDefinition for the JobExecutionError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.AggregationJobEvents.JobExecutionDataCenterWarning">
            <summary>
              Gets the EventDefinition for the JobExecutionDataCenterWarning.
            </summary>
            <value>The EventDefinition for the JobExecutionDataCenterWarning</value>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK\debug\doc\WstJobFrameworkCoordinator.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WstJobFrameworkCoordinator</name>
    </assembly>
    <members>
        <member name="M:JobCoordinator.JobCoordinator.SpawnJob(System.String,System.Boolean)">
            <summary>
            Tells the coordinator whether it can spawn jobs or not
            </summary>
            <param name="jobName">Name of job</param>
            <param name="spawnJob">Boolean value determining whether or job can be spawned</param>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK\debug\doc\WstJobFrameworkAgent.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WstJobFrameworkAgent</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Webstore.JobEngine.JobStepProxy">
            <summary>
            The JobStepProxy is the jobstep from the agent app domain that we can return to the client through
            remoting. It forwards all call to the JobStep from the job appdomain. This allows us to have a single
            network sink.
            </summary>    
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepProxy.Add(Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.IPartitionSet)">
            <summary>
            Allows the Job Agent to add new partitions if it notices that there is
            currently a worker running of the same type.
            It is a performance optimization.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProxy.AcceptAdd">
            <summary>
            If true, the Job Agent is allowed to pass in new partitions
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobAgent.CreateNewAsyncExecuteBatch(Microsoft.Webstore.JobEngine.IJobEngine,System.String,System.String,Microsoft.Webstore.JobEngine.Location,System.Int32,System.String,System.String,System.Version,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Create the ASyncExecuteBatch that will host the worker in the Job Agent machine
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobAgent.UpdateStatus(System.Int32,System.String)">
            <summary>
            Called by the worker to update status (human readable)
            This status ultimately gets logged to the jobDetails table
            in the jobStatus deployment
            </summary>
            <param name="batchId">JobAgent issues batchId</param>
            <param name="status"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobAgent.SendMessage(System.String,System.String)">
            <summary>
            A message was sent to us via the WstJobFrameworkManager.  We need to store it, so that workers
            can utilize it.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobAgent.InitializeLifetimeService">
            <summary>
            Make the JobAgent lease eternal so that JobAgent doesn't get GCed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobAgent.AddWorkItemToExpiredList(Microsoft.Webstore.JobEngine.JobAgentWorkItem)">
            <summary>
            This puts the work item into one of the expired list and writes info to the event log.
            </summary>
            <param name="jaWorkItem">the item to be expired.</param>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobAgent.IsListenerInitialized">
            <summary>
            Has the listner for commands been initialized?
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobAgentService.OnStart(System.String[])">
            <summary>
            Set things in motion so your service can do its work.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobAgentService.OnStop">
            <summary>
            Stop this service.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JobFrameworkAgentCategoryInstaller">
            <summary>
            Category installer for the WstJobFrameworkAgent event source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkAgentCategoryInstaller.EventSource">
            <summary>
            The event source for which to install the category strings.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents">
            <summary>
            Events in the JobFrameworkAgent module.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.log">
            <summary>
            MSN Runtime's event logger 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.#ctor">
            <summary>
            Private constructor prevents instantiation.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.JobFrameworkStartupFailureValue">
            <summary>
            EventDefinition for JobFrameworkStartupFailure
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.LogJobFrameworkStartupFailure(System.String)">
            <summary>
            Method to log an event of type JobFrameworkStartupFailure.
            </summary>
            <param name="errorMessage">Argument errorMessage for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.LogJobFrameworkStartupFailure(System.String,System.Exception)">
            <summary>
            Method to log an event of type JobFrameworkStartupFailure with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="errorMessage">Argument errorMessage for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.JobEngineHeartBeatFailureValue">
            <summary>
            EventDefinition for JobEngineHeartBeatFailure
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.LogJobEngineHeartBeatFailure(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Method to log an event of type JobEngineHeartBeatFailure.
            </summary>
            <param name="workItemId">Argument workItemId for formatting the event text.</param>
            <param name="batchId">Argument batchId for formatting the event text.</param>
            <param name="jobName">Argument jobName for formatting the event text.</param>
            <param name="jobConsecutiveHeartbeatFailureRemainCount">Argument jobConsecutiveHeartbeatFailureRemainCount for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.LogJobEngineHeartBeatFailure(System.Int32,System.Int32,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type JobEngineHeartBeatFailure with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="workItemId">Argument workItemId for formatting the event text.</param>
            <param name="batchId">Argument batchId for formatting the event text.</param>
            <param name="jobName">Argument jobName for formatting the event text.</param>
            <param name="jobConsecutiveHeartbeatFailureRemainCount">Argument jobConsecutiveHeartbeatFailureRemainCount for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.CreateNewJobStepFailureValue">
            <summary>
            EventDefinition for CreateNewJobStepFailure
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.LogCreateNewJobStepFailure(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Method to log an event of type CreateNewJobStepFailure.
            </summary>
            <param name="assemblyName">Argument assemblyName for formatting the event text.</param>
            <param name="Version">Argument Version for formatting the event text.</param>
            <param name="jobStepFullName">Argument jobStepFullName for formatting the event text.</param>
            <param name="isSafeMode">Argument isSafeMode for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.LogCreateNewJobStepFailure(System.String,System.String,System.String,System.Boolean,System.Exception)">
            <summary>
            Method to log an event of type CreateNewJobStepFailure with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="assemblyName">Argument assemblyName for formatting the event text.</param>
            <param name="Version">Argument Version for formatting the event text.</param>
            <param name="jobStepFullName">Argument jobStepFullName for formatting the event text.</param>
            <param name="isSafeMode">Argument isSafeMode for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.HeartBeatThreadFailureValue">
            <summary>
            EventDefinition for HeartBeatThreadFailure
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.LogHeartBeatThreadFailure">
            <summary>
            Method to log an event of type HeartBeatThreadFailure.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.LogHeartBeatThreadFailure(System.Exception)">
            <summary>
            Method to log an event of type HeartBeatThreadFailure with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.AppDomainUnloadErrorValue">
            <summary>
            EventDefinition for AppDomainUnloadError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.LogAppDomainUnloadError(System.Boolean)">
            <summary>
            Method to log an event of type AppDomainUnloadError.
            </summary>
            <param name="isSafeMode">Argument isSafeMode for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.LogAppDomainUnloadError(System.Boolean,System.Exception)">
            <summary>
            Method to log an event of type AppDomainUnloadError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="isSafeMode">Argument isSafeMode for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.JobAgentHeartbeatFailureCountDecrementValue">
            <summary>
            EventDefinition for JobAgentHeartbeatFailureCountDecrement
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.LogJobAgentHeartbeatFailureCountDecrement(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Method to log an event of type JobAgentHeartbeatFailureCountDecrement.
            </summary>
            <param name="workItemId">Argument workItemId for formatting the event text.</param>
            <param name="batchId">Argument batchId for formatting the event text.</param>
            <param name="jobName">Argument jobName for formatting the event text.</param>
            <param name="jobConsecutiveHeartbeatFailureRemainCount">Argument jobConsecutiveHeartbeatFailureRemainCount for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.LogJobAgentHeartbeatFailureCountDecrement(System.Int32,System.Int32,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type JobAgentHeartbeatFailureCountDecrement with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="workItemId">Argument workItemId for formatting the event text.</param>
            <param name="batchId">Argument batchId for formatting the event text.</param>
            <param name="jobName">Argument jobName for formatting the event text.</param>
            <param name="jobConsecutiveHeartbeatFailureRemainCount">Argument jobConsecutiveHeartbeatFailureRemainCount for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.JobAgentHeartbeatFailureCountResetValue">
            <summary>
            EventDefinition for JobAgentHeartbeatFailureCountReset
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.LogJobAgentHeartbeatFailureCountReset(System.Int32,System.Int32,System.String)">
            <summary>
            Method to log an event of type JobAgentHeartbeatFailureCountReset.
            </summary>
            <param name="workItemId">Argument workItemId for formatting the event text.</param>
            <param name="batchId">Argument batchId for formatting the event text.</param>
            <param name="jobName">Argument jobName for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.LogJobAgentHeartbeatFailureCountReset(System.Int32,System.Int32,System.String,System.Exception)">
            <summary>
            Method to log an event of type JobAgentHeartbeatFailureCountReset with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="workItemId">Argument workItemId for formatting the event text.</param>
            <param name="batchId">Argument batchId for formatting the event text.</param>
            <param name="jobName">Argument jobName for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.JobAgentExpiredWorkItemValue">
            <summary>
            EventDefinition for JobAgentExpiredWorkItem
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.LogJobAgentExpiredWorkItem(System.Int32,System.Int32,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Method to log an event of type JobAgentExpiredWorkItem.
            </summary>
            <param name="workItemId">Argument workItemId for formatting the event text.</param>
            <param name="batchId">Argument batchId for formatting the event text.</param>
            <param name="jobName">Argument jobName for formatting the event text.</param>
            <param name="safeMode">Argument safeMode for formatting the event text.</param>
            <param name="numberHBFailures">Argument numberHBFailures for formatting the event text.</param>
            <param name="numberHBFailuresMax">Argument numberHBFailuresMax for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.LogJobAgentExpiredWorkItem(System.Int32,System.Int32,System.String,System.Boolean,System.Int32,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type JobAgentExpiredWorkItem with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="workItemId">Argument workItemId for formatting the event text.</param>
            <param name="batchId">Argument batchId for formatting the event text.</param>
            <param name="jobName">Argument jobName for formatting the event text.</param>
            <param name="safeMode">Argument safeMode for formatting the event text.</param>
            <param name="numberHBFailures">Argument numberHBFailures for formatting the event text.</param>
            <param name="numberHBFailuresMax">Argument numberHBFailuresMax for formatting the event text.</param>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.EventLogger">
            <summary>
            Gets the EventLogger used to report events from this source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.EventSource">
            <summary>
            Gets the event source for events defined in this module.
            </summary>
            <value>
            The event source for events defined in this module.
            </value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.JobFrameworkStartupFailure">
            <summary>
              Gets the EventDefinition for the JobFrameworkStartupFailure.
            </summary>
            <value>The EventDefinition for the JobFrameworkStartupFailure</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.JobEngineHeartBeatFailure">
            <summary>
              Gets the EventDefinition for the JobEngineHeartBeatFailure.
            </summary>
            <value>The EventDefinition for the JobEngineHeartBeatFailure</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.CreateNewJobStepFailure">
            <summary>
              Gets the EventDefinition for the CreateNewJobStepFailure.
            </summary>
            <value>The EventDefinition for the CreateNewJobStepFailure</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.HeartBeatThreadFailure">
            <summary>
              Gets the EventDefinition for the HeartBeatThreadFailure.
            </summary>
            <value>The EventDefinition for the HeartBeatThreadFailure</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.AppDomainUnloadError">
            <summary>
              Gets the EventDefinition for the AppDomainUnloadError.
            </summary>
            <value>The EventDefinition for the AppDomainUnloadError</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.JobAgentHeartbeatFailureCountDecrement">
            <summary>
              Gets the EventDefinition for the JobAgentHeartbeatFailureCountDecrement.
            </summary>
            <value>The EventDefinition for the JobAgentHeartbeatFailureCountDecrement</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.JobAgentHeartbeatFailureCountReset">
            <summary>
              Gets the EventDefinition for the JobAgentHeartbeatFailureCountReset.
            </summary>
            <value>The EventDefinition for the JobAgentHeartbeatFailureCountReset</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.JobAgentExpiredWorkItem">
            <summary>
              Gets the EventDefinition for the JobAgentExpiredWorkItem.
            </summary>
            <value>The EventDefinition for the JobAgentExpiredWorkItem</value>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK\debug\doc\WstCustomScriptJob.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WstCustomScriptJob</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Webstore.Jobs.CustomScriptJobWorker">
            <summary>
            Class to execute Custom Script jobs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.CustomScriptJobWorker.Initialize(System.String,Microsoft.Webstore.JobEngine.Location,System.Object,System.Int32)">
            <summary>
            Performs and JobWorker initialization
            </summary>
            <param name="localMachine">Name of the local machine</param>
            <param name="location">location</param>
            <param name="userArgs">User Arguments</param>
            <param name="batchId">Batch ID</param>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.CustomScriptJobWorker.TerminateJob">
            <summary>
            Is called when the job should be terminated
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.CustomScriptJobWorker.RunJob(Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.IPartitionSet,System.Int32@)">
            <summary>
            Executes the job
            </summary>
            <param name="inputSet">Input partition set to work upon</param>
            <param name="outputSet">Output partition set that was worked upon</param>
            <param name="statusCode">Status code to return</param>       
            <returns>IPartitionSet object</returns>
        </member>
        <member name="T:Microsoft.Webstore.Jobs.CustomScriptJobCategoryInstaller">
            <summary>
            Category installer for the WstCustomScriptJob event source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Jobs.CustomScriptJobCategoryInstaller.EventSource">
            <summary>
            The event source for which to install the category strings.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Jobs.CustomScriptJobEvents">
            <summary>
            Events in the CustomScriptJob module.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Jobs.CustomScriptJobEvents.log">
            <summary>
            MSN Runtime's event logger 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.CustomScriptJobEvents.#ctor">
            <summary>
            Private constructor prevents instantiation.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Jobs.CustomScriptJobEvents.CustomScriptExecuteErrorValue">
            <summary>
            EventDefinition for CustomScriptExecuteError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.CustomScriptJobEvents.LogCustomScriptExecuteError(System.String)">
            <summary>
            Method to log an event of type CustomScriptExecuteError.
            </summary>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.CustomScriptJobEvents.LogCustomScriptExecuteError(System.String,System.Exception)">
            <summary>
            Method to log an event of type CustomScriptExecuteError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.Jobs.CustomScriptJobEvents.ArgumentsErrorValue">
            <summary>
            EventDefinition for ArgumentsError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.CustomScriptJobEvents.LogArgumentsError(System.String)">
            <summary>
            Method to log an event of type ArgumentsError.
            </summary>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.CustomScriptJobEvents.LogArgumentsError(System.String,System.Exception)">
            <summary>
            Method to log an event of type ArgumentsError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.Jobs.CustomScriptJobEvents.RecordExceptionValue">
            <summary>
            EventDefinition for RecordException
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.CustomScriptJobEvents.LogRecordException(System.String)">
            <summary>
            Method to log an event of type RecordException.
            </summary>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.CustomScriptJobEvents.LogRecordException(System.String,System.Exception)">
            <summary>
            Method to log an event of type RecordException with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.Jobs.CustomScriptJobEvents.CustomScriptExecutionFailureValue">
            <summary>
            EventDefinition for CustomScriptExecutionFailure
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.CustomScriptJobEvents.LogCustomScriptExecutionFailure(System.Int32,System.Int32)">
            <summary>
            Method to log an event of type CustomScriptExecutionFailure.
            </summary>
            <param name="exitCode">Argument exitCode for formatting the event text.</param>
            <param name="successCode">Argument successCode for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.CustomScriptJobEvents.LogCustomScriptExecutionFailure(System.Int32,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type CustomScriptExecutionFailure with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exitCode">Argument exitCode for formatting the event text.</param>
            <param name="successCode">Argument successCode for formatting the event text.</param>
        </member>
        <member name="P:Microsoft.Webstore.Jobs.CustomScriptJobEvents.EventLogger">
            <summary>
            Gets the EventLogger used to report events from this source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Jobs.CustomScriptJobEvents.EventSource">
            <summary>
            Gets the event source for events defined in this module.
            </summary>
            <value>
            The event source for events defined in this module.
            </value>
        </member>
        <member name="P:Microsoft.Webstore.Jobs.CustomScriptJobEvents.CustomScriptExecuteError">
            <summary>
              Gets the EventDefinition for the CustomScriptExecuteError.
            </summary>
            <value>The EventDefinition for the CustomScriptExecuteError</value>
        </member>
        <member name="P:Microsoft.Webstore.Jobs.CustomScriptJobEvents.ArgumentsError">
            <summary>
              Gets the EventDefinition for the ArgumentsError.
            </summary>
            <value>The EventDefinition for the ArgumentsError</value>
        </member>
        <member name="P:Microsoft.Webstore.Jobs.CustomScriptJobEvents.RecordException">
            <summary>
              Gets the EventDefinition for the RecordException.
            </summary>
            <value>The EventDefinition for the RecordException</value>
        </member>
        <member name="P:Microsoft.Webstore.Jobs.CustomScriptJobEvents.CustomScriptExecutionFailure">
            <summary>
              Gets the EventDefinition for the CustomScriptExecutionFailure.
            </summary>
            <value>The EventDefinition for the CustomScriptExecutionFailure</value>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK\debug\doc\WstCollectorJob.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WstCollectorJob</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Webstore.OfflineProcessing.DataAccess">
            <summary>
            This class is a common base class for WstBackup database.
            
            In broad strokes, how does a client connect to the WstDatabase?  There are two dimensions:
            1) the client looks for the centralized setting WstBackupSiteAndDeployment to look for the
               name of the site and deployment to use for WstBackup.  If that centralized setting isn't
               present, the client uses the default site and deployment name 'WstBackup'
            2) the client also looks at its cluster for a setting "OfflineProcessingDataPartitionNumber"
               which it uses as its variable partition number when sending requests
            
            Neither of these methods are supported at the moment.  We will always use PartitionNumber 0
            and default site WstBackup.
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DataAccess.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DataAccess.GetBackupPartition">
            <summary>
            When we get to supporting partitions, this will be used.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DataAccess.GetConnection">
            <summary>
            The connection comes out of centralized settings.  If there is no site\deployment
            name specified then we default to "WstBackup".
            </summary>
            <returns>a newly created WstConnection object</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.GetQueueItemsByServer(System.String)">
            <summary>
            Gets the active queue items for a particular server.
            UT NOTE: This is tests in QueueItemSet tests.
            </summary>
            <param name="serverName">name of the server to retrieve queue items for</param>
            <returns>a set of queue items</returns>
            <exception cref="T:System.ArgumentNullException">if serverName is null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on SQL error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on WSTClient exception</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.HeartBeat(Microsoft.Webstore.OfflineProcessing.QueueItem)">
            <summary>
            Updates the heartbeat on a particular QueueItem.
            </summary>
            <param name="item">item to update heartbeat on</param>
            <returns>true if heartbeating was successful, false otherwise (means the item has been cancelled or claimed by another server)</returns>
            <exception cref="T:System.ArgumentNullException">if item is null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on sql error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on wst error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.GetDeploymentRecord(System.Guid)">
            <summary>
            Retrieves a DeploymentRecord for a given deployment GUID.
            UT NOTE: tested as part of DeploymentRecord tests
            </summary>
            <param name="deploymentUID">deployment guid to retrieve</param>
            <returns>DeploymentRecord</returns>
            <exception cref="T:System.Data.DataException">if deploymentUID does not match a deployment in the database</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database problem</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on Wst problem</exception>
            <exception cref="T:System.ArgumentException">if any of the database values are incorrect</exception>
            <exception cref="T:System.ArgumentNullException">if SPROCText for any sprocs are null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.CreateNewQueueItem(Microsoft.Webstore.OfflineProcessing.FSSBackupRecord,System.String,System.DateTime,System.String)">
            <summary>
            Attempts to create a new queue item.  If it fails (due to constraint violations)
            it returns false, otherwise returns true.
            </summary>
            <param name="record">record containing deployment guid and SQLFSSNum</param>
            <param name="ownerServer">server that should own this queue item</param>
            <param name="expires">expiration date of this queue item</param>
            <param name="offlineBackupPath">full path to the backup file when copied</param>
            <returns>true if a new queue item could be created</returns>
            <exception cref="T:System.ArgumentNullException">if record, ownerServer, or offlineBackupPath are null</exception>
            <exception cref="T:System.ArgumentException">if expires is in the past</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on wst error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.ReclaimQueueItem(Microsoft.Webstore.OfflineProcessing.FSSBackupRecord,System.String,System.String)">
            <summary>
            Attempts to reclaim a reset queue item.  If it fails (due to race conditions)
            it returns false, otherwise returns true.
            </summary>
            <param name="record">record containing deployment guid and SQLFSSNum</param>
            <param name="ownerServer">server that should own this queue item</param>
            <param name="offlineBackupPath">full path to the backup file when copied</param>
            <returns>true if the queue item could be reclaimed</returns>
            <exception cref="T:System.ArgumentNullException">if record, ownerServer, or offlineBackupPath are null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.RestoreQueueItem(Microsoft.Webstore.OfflineProcessing.QueueItem,System.Int32,System.String)">
            <summary>
            Attempts to move a backup from the "waiting for restore" state to the "restoring" state.
            Might fail due to race condition (many restore jobs all running at same time on same
            server), in which case it will return false.
            </summary>
            <param name="itemToRestore">QueueItem to switch to restoring state</param>
            <param name="restoreJobId">id of this restore job</param>
            <param name="restoredDatabaseName">name to use for the restored database</param>
            <returns>true if the queue item was transitioned by this job to restoring state, false otherwise</returns>
            <exception cref="T:System.ArgumentNullException">if itemToRestore or restoredDatabaseName are null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.FailQueueItem(Microsoft.Webstore.OfflineProcessing.QueueItem)">
            <summary>
            Called when processing of a queue item fails, handles reassigning / cancelling it in the database.
            </summary>
            <param name="item">item to cancel</param>
            <exception cref="T:System.ArgumentNullException">if item is null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on sql error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
            <exception cref="T:System.ArgumentException">if item is not a valid, active queue item</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.FailQueueItemNoThrow(Microsoft.Webstore.OfflineProcessing.QueueItem)">
            <summary>
            Calls FailQueueItem but logs and swallows any exceptions.
            </summary>
            <param name="item">item to cancel</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.FinishQueueItem(Microsoft.Webstore.OfflineProcessing.QueueItem)">
            <summary>
            Called when processing of a queue item finishes.
            </summary>
            <param name="item">item to finish</param>
            <exception cref="T:System.ArgumentNullException">if item is null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on sql error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
            <exception cref="T:System.ArgumentException">if item is not a valid, active queue item</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.CleanupQueue(System.DateTime)">
            <summary>
            Performs the routine per-iteration queue cleanup.  Fails anything that has
            a stale heartbeat and cancels anything that is expired.
            </summary>
            <param name="oldestValidHeartbeat">the time of the oldest valid heartbeat, in UTC</param>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.GetNewFSSBackups">
            <summary>
            Retrieves the list of available new FSSBackups (new backups are backups are non-reset backups).
            UT NOTE: Tested in FSSBAckupRecord Tests
            </summary>
            <returns>list of new backups</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">on database problem</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on Wst problem</exception>
            <exception cref="T:System.ArgumentNullException">on null values from database</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.GetResetFSSBackups">
            <summary>
            Retrieves the list of available reset FSSBackups.
            UT NOTE: Tested in FSSBAckupRecord tests.
            </summary>
            <returns>list of new backups</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
            <exception cref="T:System.ArgumentNullException">if any of the database fields are null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.GetTransferringItem(Microsoft.Webstore.OfflineProcessing.FSSBackupRecord,System.String)">
            <summary>
            Retrieves the QueueItem that is being transferred for a particular backup record
            and owner server.
            </summary>
            <param name="record">record that belongs to the queue item</param>
            <param name="ownerServer">server that owns the queue item</param>
            <returns>QueueItem if found, null otherwise</returns>
            <exception cref="T:System.ArgumentNullException">if record or ownerServer are null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on Wst error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.UpdateAllHeartbeats(System.String)">
            <summary>
            Updates the heartbeats of all items belonging to this server in the 
            "waiting for restore" state.
            </summary>
            <param name="ownerServer">server the items belong to</param>
            <exception cref="T:System.ArgumentNullException">if ownerServer is null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on wst exception</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.UpdateQueueState(Microsoft.Webstore.OfflineProcessing.QueueItem,Microsoft.Webstore.OfflineProcessing.QueueItem.State)">
            <summary>
            Updates the state of a queue item.
            </summary>
            <param name="item">item to update</param>
            <param name="newState">new state to assign to it</param>
            <returns>true if update succeeded</returns>
            <exception cref="T:System.ArgumentNullException">if item is null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.DeploymentRecord">
            <summary>
            This class represents a deployment record in the WstBackup database.
            This includes things like the deploymentname and client name, the times
            during which a database can be pulled, and the times during which a database
            can be processed.  These records live in the "Deployment" table in WstBackup.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.#ctor(System.Guid,System.String,System.String,System.DateTime,System.Int32,System.DateTime,System.Int32,Microsoft.Webstore.OfflineProcessing.DeploymentRecord.CycleLengthUnits,System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="deploymentUid">DeploymentUID</param>
            <param name="deploymentName">name of this deployment</param>
            <param name="clientName">name of the client (partner) this deployment belongs to</param>
            <param name="pullStartTime">start time of a pull, must be in the past</param>
            <param name="pullDurationInMinutes">max duration of a pull window in minutes, &gt;0</param>
            <param name="processingStart">start time of any processing cycle, must be in the past</param>
            <param name="processingCycleLength">length of time for a processing cycle, must be &gt;0</param>
            <param name="processingCycleLengthUnits">units for length of time of a processing cycle</param>
            <param name="requiresReportingDb">whether or not this deployment requires a reporting DB</param>
            <exception cref="T:System.ArgumentNullException">if deploymentName is null</exception>
            <exception cref="T:System.ArgumentException">if pullStartTime or processingStart occur in future</exception>
            <exception cref="T:System.ArgumentException">if pullDurationInMinutes or processingCycleLength are .lt. 1</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.IsPullTimeOkay(System.DateTime)">
            <summary>
            Checks to see if a given time is within a valid pull window.
            </summary>
            <param name="timeToCheck">time to check</param>
            <returns>true if the given time is during a valid pull window</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.GetPullWindowEnd">
            <summary>
            Gets the time of the end of the most recent pull window.
            </summary>
            <returns>end of the most recent pull window</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.GetCycleExpirationTime(System.DateTime,System.Int32)">
            <summary>
            Calculates the cycle expiration time based on any time.  If you want the expiration time
            for the cycle that someTime is in, use cyclesAfterCurrent == 0.  If you want the expiration
            time of cycle one after someTime is in, use cyclesAfterCurrent == 1, etc.
            </summary>
            <param name="someTime">time to calculate expiration for</param>
            <param name="cyclesAfterCurrent">number of cycles after the current to add</param>
            <returns>start of next cycle - 1 minute</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.IsInCycles(System.DateTime,System.Int32)">
            <summary>
            Checks to see if a given time is within a processing cycle window(s).  It will check
            the current processing window plus cyclesBeforeCurrent.
            </summary>
            <param name="timeToCheck">time to check</param>
            <param name="cyclesBeforeCurrent">number of cycles before the current to check</param>
            <returns>true if the given time is during a valid cycle window</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.FindCycleStartTime(System.DateTime,System.DateTime,System.Int32,Microsoft.Webstore.OfflineProcessing.DeploymentRecord.CycleLengthUnits)">
            <summary>
            Finds the start time of the cycle that contains a given time.
            </summary>
            <param name="forTime">time to find the cycle beginning of</param>
            <param name="cycleStart">start time of any cycle</param>
            <param name="cycleLength">length of a cycle</param>
            <param name="cycleLengthUnits">units of length of the cycle</param>
            <returns>start time of the cycle forTime belongs to</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.FindCycleEndTime(System.DateTime,System.DateTime,System.Int32,Microsoft.Webstore.OfflineProcessing.DeploymentRecord.CycleLengthUnits)">
            <summary>
            Finds the end time of the cycle that contains a given time.
            </summary>
            <param name="forTime">time to find the cycle end of</param>
            <param name="cycleStart">start time of any cycle</param>
            <param name="cycleLength">length of a cycle</param>
            <param name="cycleLengthUnits">units of length of the cycle</param>
            <returns>end time of the cycle forTime belongs to</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.CalcCycleSpan(System.Int32,Microsoft.Webstore.OfflineProcessing.DeploymentRecord.CycleLengthUnits)">
            <summary>
            Calculates the span of a cycle, given a length and units
            </summary>
            <param name="cycleLength"></param>
            <param name="cycleLengthUnits"></param>
            <returns>timespan of the cycle</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.AddSproc(Microsoft.Webstore.OfflineProcessing.DeploymentSproc)">
            <summary>
            Adds a sproc to the internal list.
            </summary>
            <param name="sproc">sproc to add</param>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.DeploymentUID">
            <summary>
            The GUID that uniquely identifies this deployment.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.PullStartTime">
            <summary>
            The start time (for a given day) of the time window during which it is
            okay to pull a backup record for hosts in this deployment.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.PullDurationInMinutes">
            <summary>
            The duration of the time window each day during which it is okay to pull
            a backup record for hosts in this deployment.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.ProcessingStart">
            <summary>
            The start of any processing cycle.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.ProcessingCycleLength">
            <summary>
            The magnitude of the length of a single processing cycle.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.ProcessingCycleLengthUnits">
            <summary>
            The units of the length of a single processing cycle.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.RequiresReportingDb">
            <summary>
            Whether or not processing of backups for this deployment requires the
            reporting DB.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.Sprocs">
            <summary>
            The sprocs configured for this deployment.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.Name">
            <summary>
            The name of this deployment.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.ClientName">
            <summary>
            The name of the client (aka partner) this deployment belongs to.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.DeploymentSproc">
            <summary>
            This class represents a sproc (really a script) for a deployment.  Sprocs have
            a many to one relationship with deployments and are strongly ordered.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DeploymentSproc.#ctor(System.Guid,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="deploymentUid">UID of the deployment this belongs to</param>
            <param name="commandText">commandText, can't be null</param>
            <exception cref="T:System.ArgumentNullException">if commandText is null</exception>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentSproc.DeploymentUid">
            <summary>
            The UID of the deployment this sproc belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentSproc.CommandText">
            <summary>
            The command text to dump into a SqlCommand object for this sproc.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.IFreeSpaceCalculator">
            <summary>
            This interface represents a free space calculator.  It is here strictly for
            the purposes of enabling testability.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.IFreeSpaceCalculator.GetFromDir(System.String)">
            <summary>
            Calculates the amount of free space left in a directory.
            </summary>
            <param name="dir">path to the directory</param>
            <returns>amount of free space left in directory, in bytes</returns>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.FreeSpaceCalculator">
            <summary>
            This class is for convenience sake only, to enable unit testing,
            because it is notoriously hard to simulate low free space conditions
            in unit tests.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.FreeSpaceCalculator.GetFromDir(System.String)">
            <summary>
            Calculates the free space from a directory.
            </summary>
            <param name="dir">directory to use for free space calculation</param>
            <returns>number of bytes free space</returns>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord">
            <summary>
            This class represents a backup record from the WstBackup database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.#ctor(System.Guid,System.Int16,System.String,System.String,System.DateTime,System.DateTime,System.Int32,System.String,System.Boolean)">
            <summary>
            Default constructor for FSSBackupRecord.
            </summary>
            <param name="deploymentUid">guid of the deployment that this record belongs to</param>
            <param name="sqlfssNum">FSSNum that this record belongs to</param>
            <param name="serverName">name of the server that contains the backup</param>
            <param name="serverShare">share on the server that contains the backup</param>
            <param name="created">date and time this backup record was created</param>
            <param name="finished">date and time this backup record was finished</param>
            <param name="backupSizeInMB">size of the backup record in MB</param>
            <param name="deploymentManifestVersion">deployment manifest version that generated this backup</param>
            <param name="usingLiteSpeed">whether or not this backup was created using LiteSpeed</param>
            <exception cref="T:System.ArgumentNullException">if serverName, serverShare, or deploymentManifestVersion are null</exception>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.QueueItem">
            <summary>
            Contains the QueueItem that represents this FSSBackupRecord.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.Deployment">
            <summary>
            Contains the deployment record that belongs to this FSSBackupRecord.
            Isn't guaranteed to be populated.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.DeploymentUID">
            <summary>
            Returns the deploymentUID that this backup record belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.SQLFSSNum">
            <summary>
            Returns the FSSNum that this backup record belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.ServerName">
            <summary>
            The name of the server that contains this backup.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.ServerShare">
            <summary>
            The share on the server that contains this backup.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.Created">
            <summary>
            Returns the date this backup was Created.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.Finished">
            <summary>
            Returns the date this backup was finished.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.BackupSizeInMB">
            <summary>
            The size of this backup record in MB.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.DeploymentManifestVersion">
            <summary>
            The deployment manifest version that generated this backup.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.UsingLiteSpeed">
            <summary>
            Whether or not this backup was created using SqlLiteSpeed.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.ISynchronousWorkItem">
            <summary>
            Represents a long-running synchronous work item.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.ISynchronousWorkItem.Run">
            <summary>
            Executes the work item, throws an exception if it fails.
            </summary>
            <returns>true if the job ran to completion, false if it was aborted (due to Cancel)</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.ISynchronousWorkItem.Cancel">
            <summary>
            Cancels the work item.  This will be called from a different thread
            than Run so it needs to be threadsafe.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker">
            <summary>
            This class implements a worker thread that performs periodic heartbeating.  It does
            the following:
            - execute a long-running synchronous operation on a background thread
            - periodically notify the calling thread that we are still alive (so it can heartbeat)
            - return status/success
            - provide a cancel method for the synchronous operation in the background thread
            - provide a timeout for the synchronous operation in the background thread
            
            Technically since we are using events we should implement IDisposable.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.#ctor(System.Int64,System.DateTime,Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.HeartbeatDelegate,Microsoft.Webstore.OfflineProcessing.ISynchronousWorkItem)">
            <summary>
            Constructor for the HeartbeatingWorker.
            </summary>
            <param name="heartbeatIntervalInMS">interval in MS between heartbeats, minimum 1000</param>
            <param name="endTime">the time at which to end the background operation</param>
            <param name="heartbeatDelegate">delegate to call back whenever we heartbeat</param>
            <param name="workItem">item that implements the long-running synchronous work</param>
            <exception cref="T:System.ArgumentException">if heartbeatIntervalInMS is less than 1000</exception>
            <exception cref="T:System.ArgumentException">if endTime is in the past</exception>
            <exception cref="T:System.ArgumentNullException">if heartbeatDelegate or workItem are null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.Finalize">
            <summary>
            Finalizer, needs to call dispose.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.HeartbeatTimerCallback(System.Object)">
            <summary>
            The callback used by the timer to indicate that we need to do periodic processing.
            This is called from an anonymous background threadpool thread.
            </summary>
            <param name="arg">ignored</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.CancelAbort">
            <summary>
            This is called to attempt cancelling and then aborting the thread.  Can only be
            called from the main thread.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.Run">
            <summary>
            This runs the background synchronous worker and starts heartbeating.  When this
            returns the result of the operation can be determined by checking OperationResult
            and OperationException.
            
            Here are what the different status means:
             NotInitialized - something went wrong in this library, report the error to us
             Success - job ran to completion and all heartbeats occurred as expected
             Cancel - job expired or heartbeat delegate returned false and Cancel method worked correctly
             Abort - job expired or heartbeat delegate returned false and Cancel method didn't work (check OperationException)
             Exception - workItem.Run method generated an exception (check OperationException)          
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.ThreadStart">
            <summary>
            This method implements the background worker thread.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.Dispose">
            <summary>
            Tears down this object.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.Dispose(System.Boolean)">
            <summary>
            Tears down this object.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.EndTime">
            <summary>
            The time at which this copy operation should end.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.HeartbeatIntervalInMS">
            <summary>
            The heartbeat interval in MS to use.  When the thread is running a timer
            will be created with this interval and the HeartbeatEvent will be set
            everytime the timer goes off.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.OperationResult">
            <summary>
            The result of the operation.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.OperationException">
            <summary>
            If an exception was generated, a copy of the exception.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.HeartbeatDelegate">
            <summary>
            This is called to perform heartbeating.  This will always be called in the context
            of the main thread.
            </summary>
            <returns>true if successful and loop should continue, false otherwise</returns>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.LiteSpeedUtils">
            <summary>
            This class contains some utilities for performing basic checks on SQLLiteSpeed.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.LiteSpeedUtils.IsInstalled(System.String)">
            <summary>
            Determines whether or not SQLLiteSpeed is installed on a given server.
            </summary>
            <param name="serverName">name of the server to check</param>
            <returns>true if SQLLiteSpeed is installed, false otherwise</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:System.ArgumentNullException">if serverName is null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.LiteSpeedUtils.IsEnabled(System.String)">
            <summary>
            Determines whether or not SqlLiteSpeed is enabled for a particular deployment.
            </summary>
            <param name="deploymentName">name of the deployment</param>
            <returns>true if LiteSpeed is enabled for this deployment</returns>
            <exception cref="T:System.ArgumentNullException">if deploymentName is null</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.LiteSpeedUtils.IsEnabled(System.Guid)">
            <summary>
            Determines whether or not SQLLiteSpeed is enabled for a particular deployment.
            </summary>
            <param name="deploymentUID">Guid of the deployment</param>
            <returns>true if LiteSpeed is enabled for this deployment</returns>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.IOPJobWorker">
            <summary>
            This is the minimal interface for a worker class to implement.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.IOPJobWorker.DoIteration(System.Boolean)">
            <summary>
            Executes an iteration of the job.
            </summary>
            <param name="asConsole">boolean indicating whether or not this job is being run as console</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.IOPJobWorker.GetSleepTimeInMS">
            <summary>
            Retrieves the amount of time that the job should sleep between iterations.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.WstOPJobWorker">
            <summary>
            This class implements the job worker for the Offline Processing backup job.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJobWorker.Init(Microsoft.Webstore.JobEngine.IJobAgent,System.String,Microsoft.Webstore.JobEngine.Location,System.Object,System.Int32)">
            <summary>
            This is a trivial init method which simply populates arguments in the base class and stores user args.
            </summary>
            <param name="ja"></param>
            <param name="localMachine"></param>
            <param name="location"></param>
            <param name="userArgs"></param>
            <param name="batchId"></param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJobWorker.Run(Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.IPartitionSet,System.Int32@)">
            <summary>
            This job runs as a continuous loop for ever (well at least until someone kills it or it dies of natural
            causes).  The basic idea is:
             - do some stuff
             - wait awhile
             - loop back
            This method implements that basic logic.  All of the real logic of the job is contained in the class
            IOPJobWorker.
            </summary>
            <param name="inputSet">not used, the job figures out its own PartitionSet based on the machine it is running on</param>
            <param name="outputSet">not used</param>
            <param name="statusCode">return value</param>
            <returns>null</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJobWorker.CreateWorkerFromXmlArguments(System.String)">
            <summary>
            Override this method in your subclass to create the worker.
            </summary>
            <param name="userArgs">arguments as xml passed in from the job framework</param>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.WstOPJob">
            <summary>
            This class implements the Job Coordinator for the Offline Processing backup job.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJob.Start(System.String,System.Int32,Microsoft.Webstore.JobEngine.BatchOption,Microsoft.Webstore.JobEngine.Location,System.String)">
            <summary>
            This is the Job Coordinator starting point routine for an OfflineProcessing job.
            </summary>
            <param name="jobName">name of the job, defined by the job description XML</param>
            <param name="dop">degree of parallelism, needs to be something really high</param>
            <param name="batchOption">doesn't matter since location must be ServerRole</param>
            <param name="location">must be ServerRole</param>
            <param name="userArguments">user arguments, should be XML conforming to schema and defined by the job description XML</param>
            <returns>return code, 0 indicates success</returns>
            <exception cref="T:System.Xml.XmlException">if userArguments is not a valid Xml document</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">if location type is not ServerRole</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJob.ValidateArgs(System.String)">
            <summary>
            This method performs validation of the user arguments at the JobCoordinator level.
            </summary>
            <param name="userArgs">arguments passed in from the user</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJob.GetWorkerType">
            <summary>
            Returns a type object for the worker to instantiate.
            </summary>
            <returns>type object describing the IJobStep worker</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJob.RunAsConsole(System.String[])">
            <summary>
            Call this to see if the application should run at the console.  It so it will see
            the first arg as "-console", the second arg as "-argfile", and the third arg will be
            the XML file to read for user args.
            </summary>
            <param name="args">commandline arguments</param>
            <returns>true if it was run as console, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJob.LogException(System.Exception)">
            <summary>
            This is called if an exception occurs from calling job.Run.  You can provide
            your own implementation in a subclass if you want to log any errors.
            </summary>
            <param name="ex">exception that was generatd, will be rethrown</param>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.QueueItem">
            <summary>
            This class represents a single backup record in the WstBackup database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.QueueItem.#ctor(System.Guid,System.Int16,System.String,System.Int32,System.Int32,System.Int32,System.DateTime,System.DateTime,System.DateTime,System.DateTime,System.String,System.String,System.String,System.Boolean,System.String,System.DateTime,System.DateTime)">
            <summary>
            Creates a new QueueItem.
            </summary>
            <param name="deploymentUid">guid of the deployment this queue item belongs to</param>
            <param name="fssNum">fssNum this item belongs to</param>
            <param name="ownerServer">name of the server that owns this item</param>
            <param name="iterationNumber">FSS iteration number this item belongs to</param>
            <param name="currentState">current state of the queue item</param>
            <param name="failureCount">current failure count of the queue item</param>
            <param name="created">time this item was created in UTC</param>
            <param name="expires">time this item expires in UTC</param>
            <param name="lastHeartbeat">the last heartbeat time of this item</param>
            <param name="enqueueTime">the time this item was added to the active queue</param>
            <param name="path">path (if exists) to the backup file on OwnerServer</param>
            <param name="deploymentManifestVersion">deployment manifest version of the backup record this queue item is for</param>
            <param name="restoredDatabaseName">name of the restored database for this item</param>
            <param name="usingLiteSpeed">whether or not the backup for this queue item was made using SQLLiteSpeed</param>
            <param name="backupFinishDate">date and time the backup finished</param>
            <param name="backupServer">server the backup was created on</param>
            <param name="backupStartDate">date and time the backup started</param>
            <exception cref="T:System.ArgumentNullException">if ownerServer, path, restoredDatabaseName, backupServer, or deploymentManifestVersion are null</exception>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.RestoredDatabaseName">
            <summary>
            The name of the database once it has been restored by OP.  May be empty if it hasn't been restored
            yet.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.DeploymentManifestVersion">
            <summary>
            The deployment manifest version of the backup record this queue item is for.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.Path">
            <summary>
            The path to the backup file on the offline processing server.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.DeploymentUid">
            <summary>
            The DeploymentUID of the deployment that this queue item belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.FSSNum">
            <summary>
            The SQLFSSNum of the FSS/deployment that this queue item belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.OwnerServer">
            <summary>
            The name of the server that currently owns this queue item, can be empty if not owned.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.IterationNumber">
            <summary>
            The iteration number, within this FSS/Deployment, of this queue item.  This
            is to enforce the uniqueness constraint that only a single queue item can
            exist at any time for a given FSS/Deployment pair.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.FailureCount">
            <summary>
            The number of times this queue item has been failed.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.CurrentState">
            <summary>
            The current state of this QueueItem.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.Created">
            <summary>
            The time this queue item was created.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.Expires">
            <summary>
            The time this queue item expires (can be in the past if it already expired).
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.LastHeartBeat">
            <summary>
            The time this queue item was last heartbeated.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.EnqueueTime">
            <summary>
            The time this queue item was last put into the queue (or bumped to the back
            if it was failed).
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.UsingLiteSpeed">
            <summary>
            Whether or not the backup for this item was made using Lite Speed.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.BackupServer">
            <summary>
            The server that generated the backup belonging to this queue item.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.BackupStartDate">
            <summary>
            The time the backup was started.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.BackupFinishDate">
            <summary>
            The time the backup for this queue item was finished.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.QueueItemSet">
            <summary>
            This class represents a set of backup records from the WstBackup database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.QueueItemSet.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Webstore.OfflineProcessing.QueueItem})">
            <summary>
            Constructor which takes an enumeration of records.
            </summary>
            <param name="newRecords">enumeration of records to initialize the set with</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.QueueItemSet.#ctor(Microsoft.Webstore.OfflineProcessing.QueueItem)">
            <summary>
            Constructor which takes a single record.
            </summary>
            <param name="newRecord">single record to initialize the set with</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.QueueItemSet.GetByServer(System.String,Microsoft.Webstore.OfflineProcessing.CommonDataAccess)">
            <summary>
            Retrieves the set of all backup records in WstBackup database for a given server.
            </summary>
            <param name="serverName">name of the server to retrieve QueueItems for</param>
            <param name="backupDb">backup database to use for retrieving the recordset</param>
            <returns>a set of QueueItems that are active on that server</returns>
            <exception cref="T:System.ArgumentNullException">if serverName or backupDb are null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on SQL error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on WSTClient exception</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.QueueItemSet.GetByPath(System.String)">
            <summary>
            Retrieves the QueueItem that has a particular filepath.
            </summary>
            <param name="filePath">path of item to retrieve</param>
            <returns>QueueItem that belongs to that filePath, null if not found</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.QueueItemSet.GetByRestoredDatabaseName(System.String)">
            <summary>
            Retrieves the QueueItem that has a particular restored database name.
            </summary>
            <param name="dbName">database name of the item to retrieve</param>
            <returns>QueueItem that belongs to the restored database name, null if not found</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.QueueItemSet.GetItemsByPath">
            <summary>
            Retrieves the items in the set, indexed by path.
            </summary>
            <returns>the items in this set, indexed by path</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.QueueItemSet.GetItemsByRestoredDbName">
            <summary>
            Retrieves the items in the set, indexed by restored Db name.
            </summary>
            <returns>the items in this set, indexed by restored db name</returns>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItemSet.Count">
            <summary>
            Number of records in this set.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItemSet.Item(System.Int32)">
            <summary>
            Indexor for the set.
            </summary>
            <param name="i">0-based index into the array</param>
            <returns>requested item in the array</returns>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.CollectorJobArgumentsXml">
            <summary>
            This class implements round-tripping to and from XML for collector job arguments.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobArgumentsXml.#ctor">
            <summary>
            Creates a new object with default arguments.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobArgumentsXml.CreateFromXML(System.String,System.String)">
            <summary>
            This method parses a string containing xml conforming to CollectorJobArgumentsSchema.xsd
            and returns a new CollectorJobArguments object populated with the parsed values.
            </summary>
            <param name="argumentsAsXml">string containing xml conforming to CollectorJobArgumentsSchema.xsd</param>
            <param name="schema">string containing the XSD schema</param>
            <returns>newly created CollectorJobArgumentsXml from the xml</returns>
            <exception cref="T:System.ArgumentNullException">if argumentsAsXml or schema are null</exception>
            <exception cref="T:System.Xml.XmlException">if argumentsAsXml is not a valid Xml document, if any required nodes cannot be found in the XML, or if any arguments are out of range</exception>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobArgumentsXml.BackupPath">
            <summary>
            The path where pulled backups should be stored.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobArgumentsXml.Xml">
            <summary>
            Converts the current arguments into valid XML.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.CommonJobCategoryInstaller">
            <summary>
            Category installer for the CommonJob event source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobCategoryInstaller.EventSource">
            <summary>
            The event source for which to install the category strings.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.CommonJobEvents">
            <summary>
            Events in the CommonJob module.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.log">
            <summary>
            MSN Runtime's event logger 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.#ctor">
            <summary>
            Private constructor prevents instantiation.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.SqlErrorValue">
            <summary>
            EventDefinition for SqlError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogSqlError(System.String,System.String)">
            <summary>
            Method to log an event of type SqlError.
            </summary>
            <param name="sqlStr">Argument sqlStr for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogSqlError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type SqlError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="sqlStr">Argument sqlStr for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.WstErrorValue">
            <summary>
            EventDefinition for WstError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogWstError(System.String,System.String)">
            <summary>
            Method to log an event of type WstError.
            </summary>
            <param name="sqlStr">Argument sqlStr for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogWstError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type WstError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="sqlStr">Argument sqlStr for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.DatabaseErrorValue">
            <summary>
            EventDefinition for DatabaseError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogDatabaseError(System.String,System.String)">
            <summary>
            Method to log an event of type DatabaseError.
            </summary>
            <param name="sqlStr">Argument sqlStr for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogDatabaseError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type DatabaseError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="sqlStr">Argument sqlStr for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.HeartbeatErrorValue">
            <summary>
            EventDefinition for HeartbeatError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogHeartbeatError(System.String,System.String)">
            <summary>
            Method to log an event of type HeartbeatError.
            </summary>
            <param name="item">Argument item for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogHeartbeatError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type HeartbeatError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="item">Argument item for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.GetDeploymentErrorValue">
            <summary>
            EventDefinition for GetDeploymentError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogGetDeploymentError(System.String,System.String)">
            <summary>
            Method to log an event of type GetDeploymentError.
            </summary>
            <param name="deploymentGuid">Argument deploymentGuid for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogGetDeploymentError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type GetDeploymentError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="deploymentGuid">Argument deploymentGuid for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.CreateNewQueueItemErrorValue">
            <summary>
            EventDefinition for CreateNewQueueItemError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogCreateNewQueueItemError(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Method to log an event of type CreateNewQueueItemError.
            </summary>
            <param name="backupRecord">Argument backupRecord for formatting the event text.</param>
            <param name="ownerServer">Argument ownerServer for formatting the event text.</param>
            <param name="expires">Argument expires for formatting the event text.</param>
            <param name="backupPath">Argument backupPath for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogCreateNewQueueItemError(System.String,System.String,System.String,System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type CreateNewQueueItemError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="backupRecord">Argument backupRecord for formatting the event text.</param>
            <param name="ownerServer">Argument ownerServer for formatting the event text.</param>
            <param name="expires">Argument expires for formatting the event text.</param>
            <param name="backupPath">Argument backupPath for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.GetTransferringItemErrorValue">
            <summary>
            EventDefinition for GetTransferringItemError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogGetTransferringItemError(System.String,System.String,System.String)">
            <summary>
            Method to log an event of type GetTransferringItemError.
            </summary>
            <param name="backupRecord">Argument backupRecord for formatting the event text.</param>
            <param name="ownerServer">Argument ownerServer for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogGetTransferringItemError(System.String,System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type GetTransferringItemError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="backupRecord">Argument backupRecord for formatting the event text.</param>
            <param name="ownerServer">Argument ownerServer for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.ReclaimQueueItemErrorValue">
            <summary>
            EventDefinition for ReclaimQueueItemError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogReclaimQueueItemError(System.String,System.String)">
            <summary>
            Method to log an event of type ReclaimQueueItemError.
            </summary>
            <param name="backupRecord">Argument backupRecord for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogReclaimQueueItemError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type ReclaimQueueItemError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="backupRecord">Argument backupRecord for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.UpdateAllHeartbeatsErrorValue">
            <summary>
            EventDefinition for UpdateAllHeartbeatsError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogUpdateAllHeartbeatsError(System.String,System.String)">
            <summary>
            Method to log an event of type UpdateAllHeartbeatsError.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogUpdateAllHeartbeatsError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type UpdateAllHeartbeatsError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.UpdateQueueStateErrorValue">
            <summary>
            EventDefinition for UpdateQueueStateError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogUpdateQueueStateError(System.String,System.String,System.String)">
            <summary>
            Method to log an event of type UpdateQueueStateError.
            </summary>
            <param name="item">Argument item for formatting the event text.</param>
            <param name="state">Argument state for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogUpdateQueueStateError(System.String,System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type UpdateQueueStateError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="item">Argument item for formatting the event text.</param>
            <param name="state">Argument state for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.FailQueueItemErrorValue">
            <summary>
            EventDefinition for FailQueueItemError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogFailQueueItemError(System.String,System.String)">
            <summary>
            Method to log an event of type FailQueueItemError.
            </summary>
            <param name="item">Argument item for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogFailQueueItemError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type FailQueueItemError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="item">Argument item for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.RestoreQueueItemErrorValue">
            <summary>
            EventDefinition for RestoreQueueItemError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogRestoreQueueItemError(System.String,System.String,System.String,System.String)">
            <summary>
            Method to log an event of type RestoreQueueItemError.
            </summary>
            <param name="item">Argument item for formatting the event text.</param>
            <param name="restoreJobId">Argument restoreJobId for formatting the event text.</param>
            <param name="restoredDatabaseName">Argument restoredDatabaseName for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogRestoreQueueItemError(System.String,System.String,System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type RestoreQueueItemError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="item">Argument item for formatting the event text.</param>
            <param name="restoreJobId">Argument restoreJobId for formatting the event text.</param>
            <param name="restoredDatabaseName">Argument restoredDatabaseName for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.FinishQueueItemErrorValue">
            <summary>
            EventDefinition for FinishQueueItemError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogFinishQueueItemError(System.String,System.String)">
            <summary>
            Method to log an event of type FinishQueueItemError.
            </summary>
            <param name="item">Argument item for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogFinishQueueItemError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type FinishQueueItemError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="item">Argument item for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.EventLogger">
            <summary>
            Gets the EventLogger used to report events from this source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.EventSource">
            <summary>
            Gets the event source for events defined in this module.
            </summary>
            <value>
            The event source for events defined in this module.
            </value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.SqlError">
            <summary>
              Gets the EventDefinition for the SqlError.
            </summary>
            <value>The EventDefinition for the SqlError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.WstError">
            <summary>
              Gets the EventDefinition for the WstError.
            </summary>
            <value>The EventDefinition for the WstError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.DatabaseError">
            <summary>
              Gets the EventDefinition for the DatabaseError.
            </summary>
            <value>The EventDefinition for the DatabaseError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.HeartbeatError">
            <summary>
              Gets the EventDefinition for the HeartbeatError.
            </summary>
            <value>The EventDefinition for the HeartbeatError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.GetDeploymentError">
            <summary>
              Gets the EventDefinition for the GetDeploymentError.
            </summary>
            <value>The EventDefinition for the GetDeploymentError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.CreateNewQueueItemError">
            <summary>
              Gets the EventDefinition for the CreateNewQueueItemError.
            </summary>
            <value>The EventDefinition for the CreateNewQueueItemError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.GetTransferringItemError">
            <summary>
              Gets the EventDefinition for the GetTransferringItemError.
            </summary>
            <value>The EventDefinition for the GetTransferringItemError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.ReclaimQueueItemError">
            <summary>
              Gets the EventDefinition for the ReclaimQueueItemError.
            </summary>
            <value>The EventDefinition for the ReclaimQueueItemError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.UpdateAllHeartbeatsError">
            <summary>
              Gets the EventDefinition for the UpdateAllHeartbeatsError.
            </summary>
            <value>The EventDefinition for the UpdateAllHeartbeatsError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.UpdateQueueStateError">
            <summary>
              Gets the EventDefinition for the UpdateQueueStateError.
            </summary>
            <value>The EventDefinition for the UpdateQueueStateError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.FailQueueItemError">
            <summary>
              Gets the EventDefinition for the FailQueueItemError.
            </summary>
            <value>The EventDefinition for the FailQueueItemError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.RestoreQueueItemError">
            <summary>
              Gets the EventDefinition for the RestoreQueueItemError.
            </summary>
            <value>The EventDefinition for the RestoreQueueItemError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.FinishQueueItemError">
            <summary>
              Gets the EventDefinition for the FinishQueueItemError.
            </summary>
            <value>The EventDefinition for the FinishQueueItemError</value>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.FileCopyWorker">
            <summary>
            This class implements the file copy worker.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.FileCopyWorker.#ctor(System.String,System.String)">
            <summary>
            Constructor for the FileCopyWorker.
            </summary>
            <param name="copySource">source file and path</param>
            <param name="copyTarget">target file and path</param>
            <exception cref="T:System.ArgumentNullException">if copySource or copyTarget are null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.FileCopyWorker.Run">
            <summary>
            Performs the file copy.
            </summary>
            <returns>true, always</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.FileCopyWorker.Cancel">
            <summary>
            doesn't do anything, we can't cancel a copy
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FileCopyWorker.CopySource">
            <summary>
            The source path of the file to copy.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FileCopyWorker.CopyTarget">
            <summary>
            The target path to copy the file to.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.WstCollectorJobWorker">
            <summary>
            This class implements the job worker for the Offline Processing collector job.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.WstCollectorJob">
            <summary>
            This class implements the Job Coordinator for the Offline Processing collector job.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstCollectorJob.ValidateArgs(System.String)">
            <summary>
            All we do is make sure the CollectorJobArguments can be created.  We don't
            validate the path at this stage because we are the coordinator and who
            knows if the path will be valid on the worker machines?
            </summary>
            <param name="userArgs">arguments conforming to CollectorJobArgumentsSchema.xsd</param>
            <exception cref="T:System.Xml.XmlException">if userArgs cannot be validated or are missing components</exception>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.CollectorJobArguments">
            <summary>
            This class represents the arguments passed to the collector job.  It also contains the logic
            for parsing the arguments from XML.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobArguments.CreateFromXML(System.String)">
            <summary>
            This method parses a string containing xml conforming to CollectorJobArgumentsSchema.xsd
            and returns a new CollectorJobArguments object populated with the parsed values.
            </summary>
            <param name="argumentsAsXml">string containing xml conforming to CollectorJobArgumentsSchema.xsd</param>
            <returns>newly created CollectorJobArguments from the xml</returns>
            <exception cref="T:System.ArgumentNullException">if argumentsAsXml is null</exception>
            <exception cref="T:System.Xml.XmlException">if argumentsAsXml is not a valid Xml document, if any required nodes cannot be found in the XML, or if any arguments are out of range</exception>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobArguments.BackupPath">
            <summary>
            The path where pulled backups should be stored.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.CollectorJobResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobResources.CollectorJobArgumentsSchema">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
            &lt;xs:schema id=&quot;CollectorJobArguments&quot;
                targetNamespace=&quot;urn:CollectorJobArgumentsSchema.xsd&quot;
                elementFormDefault=&quot;qualified&quot;
                xmlns=&quot;urn:CollectorJobArgumentsSchema.xsd&quot;
                xmlns:mstns=&quot;urn:CollectorJobArgumentsSchema.xsd&quot;
                xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;
            &gt;
              &lt;xs:element name=&quot;BackupJobSettings&quot;&gt;
                &lt;xs:annotation&gt;
                  &lt;xs:documentation&gt;The parent element for backup job settings.&lt;/xs:documentation&gt;
                &lt;/xs:annotation&gt;
                &lt;xs:co [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.CreateFromXmlArguments(System.String)">
            <summary>
            Creates a new job worker from xml arguments.
            </summary>
            <param name="xmlArgs">arguments in xml conforming to CollectorJobArgumentsSchema.xsd</param>
            <returns>newly created CollectorJobWorker</returns>
            <exception cref="T:System.Xml.XmlException">if xml fails to validate</exception>
            <exception cref="T:System.ArgumentNullException">if xmlArgs is null</exception>
            <exception cref="T:System.IO.IOException">if backup directory cannot be created</exception>
            <exception cref="T:System.NotSupportedException">if backup directory is not a recognizable path</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.#ctor(System.String)">
            <summary>
            Internal constructor, instead use CreateFromXmlArguments since that performs validation.
            </summary>
            <param name="backupPath">path for this worker to use, can't be null</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.DoIteration(System.Boolean)">
            <summary>
            Performs one iteration of the service.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.GetSleepTimeInMS">
            <summary>
            Retrieves the number of milliseconds that the job should sleep between iterations.
            </summary>
            <returns>number of milliseconds the job should sleep between iterations</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.CreateCopyWorker(Microsoft.Webstore.OfflineProcessing.FSSBackupRecord)">
            <summary>
            Creates a FileCopyWorker and populates it with all the appropriate values.
            </summary>
            <param name="record">record to use for creating the copy worker</param>
            <returns>newly created FileCopyWorker</returns>
            <exception cref="T:System.ArgumentNullException">if record or record.Deployment are null</exception>
            <exception cref="T:System.ArgumentException">if heartbeat interval is less than 1</exception>
            <exception cref="T:System.ArgumentException">if calculated pull window enddTime is in the past</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.ClaimNewBackup(Microsoft.Webstore.OfflineProcessing.CommonDataAccess)">
            <summary>
            Retrieves the next available backup record that a queue item can
            be created for, creates the queue item, and returns success/failure.
            If successful stores the backup record to pull in backupToPull and stores
            the deployment it belongs to in deploymentToPull.
            </summary>
            <param name="db">database to use</param>
            <returns>null if couldn't be claimed, FSSBackupRecord otherwise</returns>
            <exception cref="T:System.ArgumentNullException">if db is null</exception>
            <exception cref="T:System.ArgumentException">if any of the database values are incorrect</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
            <exception cref="T:System.Data.DataException">if record does not have a matching deployment in the database</exception>
            <exception cref="T:System.Data.DataException">if newly created queue item cannot immediately be requeried</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.HaveEnoughDiskSpace(Microsoft.Webstore.OfflineProcessing.FSSBackupRecord)">
            <summary>
            Calculates whether or not we have enough disk space to pull a backup record.
            </summary>
            <param name="record">record to use for disk space calculations</param>
            <returns>true if we probably have enough disk space for this record</returns>
            <exception cref="T:System.ArgumentNullException">if record is null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.GetAndValidateDeployment(Microsoft.Webstore.OfflineProcessing.FSSBackupRecord,Microsoft.Webstore.OfflineProcessing.CommonDataAccess)">
            <summary>
            Attempts to retrieve the DeploymentRecord for a backup, and validates that it is
            appropriate to pull the backup (the backup is within the current cycle and the current
            time is within the deployment pulling window).  If success it stores the
            deployment record in record.Deployment and returns true.
            </summary>
            <param name="record">record to check</param>
            <param name="db">db to use for retrieving deployment info</param>
            <returns>true if it was possible to get and validate the deployment record</returns>
            <exception cref="T:System.ArgumentNullException">if record or db are null</exception>
            <exception cref="T:System.Data.DataException">if record does not have a matching deployment in the database</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database problem</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on Wst problem</exception>
            <exception cref="T:System.ArgumentException">if any of the database values are incorrect</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.CalculateQueueItemExpiration(Microsoft.Webstore.OfflineProcessing.FSSBackupRecord)">
            <summary>
            Calculates the expiration time for a new queue item based on a backup record.
            The reason this is tricky is because we accept backup records from the current
            cycle or the previous cycle.  So what we need to first try taking the end time
            of the previous cycle and see if that is in the past, and if so try taking
            the end time of the current cycle.
            </summary>
            <param name="record">backup record to try creating queue item for</param>
            <returns>expiration time for the new queue item</returns>
            <exception cref="T:System.ArgumentNullException">if record is null, or record.Deployment</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.CreateQueueItem(Microsoft.Webstore.OfflineProcessing.FSSBackupRecord,Microsoft.Webstore.OfflineProcessing.CommonDataAccess)">
            <summary>
            Attempts to create a new QueueItem for a backup record.  Might fail
            if some other collector beat us to it.
            </summary>
            <param name="record">backup record to try creating queue item for</param>
            <param name="db">db to use for creating the new queue item</param>
            <returns>null if someone beat us to it</returns>
            <exception cref="T:System.ArgumentNullException">if record or db are null, or record.Deployment</exception>
            <exception cref="T:System.ArgumentException">if calculated expiration date is in the past</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on wst error</exception>
            <exception cref="T:System.Data.DataException">if the newly created queueitem can't be immediately queried</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.ReclaimQueueItem(Microsoft.Webstore.OfflineProcessing.FSSBackupRecord,Microsoft.Webstore.OfflineProcessing.CommonDataAccess)">
            <summary>
            Attempts to reclaim an existing reset QueueItem for a backup record.  Might fail
            if some other collector beat us to it.
            </summary>
            <param name="record">backup record to reclaiming queue item for</param>
            <param name="db">db to use for reclaiming the new queue item</param>
            <returns>null if someone beat us to it</returns>
            <exception cref="T:System.ArgumentNullException">if record or db are null, or record.Deployment</exception>
            <exception cref="T:System.Data.DataException">if we are not able to query the newly reclaimed queue item</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.GetPathFromRecord(Microsoft.Webstore.OfflineProcessing.FSSBackupRecord)">
            <summary>
            Calculates the path on local disk for a file that a given backup record
            will be copied to.
            </summary>
            <param name="record">record</param>
            <returns>full path on local disk</returns>
            <exception cref="T:System.ArgumentNullException">if record is null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.ClaimResetBackup(Microsoft.Webstore.OfflineProcessing.CommonDataAccess)">
            <summary>
            Retrieves the next available reset backup record that a queue item can
            be created for, claims the queue item, and returns a result code.
            </summary>
            <param name="db">database to use</param>
            <returns>a backup record if one could be claimed, null otherwise</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.UpdateOnDiskBackup(System.String,Microsoft.Webstore.OfflineProcessing.QueueItemSet,Microsoft.Webstore.OfflineProcessing.CommonDataAccess)">
            <summary>
            Performs the once-per-iteration processing on an on-disk backup.  This consists of checking
            to see if the backup should still be around (if it exists in the queue in a non-restored state)
            and heartbeating it if necessary.  Increments restoreWaitingCount for each backup that is
            valid and waiting for restore.
            </summary>
            <param name="backupItem">path to the backup to update</param>
            <param name="ourItems">collection of all active queue items for our service</param>
            <param name="backupDb">backup database to use for heartbeating, if needed</param>
            <exception cref="T:System.ArgumentNullException">if backupItem, ourItems, or backupDb are null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on sql error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on wst error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.FindBackupsForPath(System.String)">
            <summary>
            Finds all of the backup files in a particular path.
            We don't use nested sub-directories, to keep things simple.  So
            this really only searches the path name passed in and none of its
            sub-paths.  Additionally, we only look for *.bak as backup files.
            </summary>
            <param name="backupPath">path to find files in</param>
            <returns>list of discovered backup files</returns>
            <exception cref="T:System.ArgumentNullException">if backupPath is null</exception>
            <exception cref="T:System.ArgumentException">from DirectoryInfo ctor</exception>
            <exception cref="T:System.Security.SecurityException">from DirectoryInfo ctor</exception>
            <exception cref="T:System.IO.PathTooLongException">from DirectoryInfo ctor</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">from DirectoryInfo.GetFiles</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.IsReportingDbInstalled">
            <summary>
            Determines whether or not the reporting DB infrastructure is installed and working
            on this server.
            </summary>
            <returns>true if reporting DB is installed, false otherwise</returns>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.BackupPath">
            <summary>
            Retrieves the backup path as defined by the user arguments.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.MaxWaitingForRestore">
            <summary>
            Maximum number of backups on disk that can be in the state "waiting for restore".
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.HeartbeatIntervalInMinutes">
            <summary>
            Interval in minutes between heartbeating items we own.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.MaxMissedHeartbeats">
            <summary>
            Maximum number of missed heartbeats before an item gets cancelled.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.WaitingForRestoreCount">
            <summary>
            After an iteration, the number of backups on disk waiting for restore.
            Only exposed for testing purposes, otherwise its an internal.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.FreeSpaceCalc">
            <summary>
            The FreeSpaceCalculator used for calculating free space.  The only reason
            we expose this as a property is to allow us to provide a mock for it in
            the unit tests, because it is notoriously difficult to create low-space conditions
            for unit tests and have everything work correctly.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.Heartbeater">
            <summary>
            This class is used for heartbeating during a long synchronous copy operation.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.Heartbeater.#ctor(Microsoft.Webstore.OfflineProcessing.QueueItem,Microsoft.Webstore.OfflineProcessing.CommonDataAccess)">
            <summary>
            Constructor
            </summary>
            <param name="itemToHeartbeat">queue item we are copying that needs to be heartbeated</param>
            <param name="backupDb">database to heartbeat</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.Heartbeater.DoHeartbeat">
            <summary>
            This method performs the heartbeat.
            </summary>
            <returns>true if heartbeating succeeded</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.CollectorJobCategoryInstaller">
            <summary>
            Category installer for the CollectorJob event source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobCategoryInstaller.EventSource">
            <summary>
            The event source for which to install the category strings.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents">
            <summary>
            Events in the CollectorJob module.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.log">
            <summary>
            MSN Runtime's event logger 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.#ctor">
            <summary>
            Private constructor prevents instantiation.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.JobCoordinatorErrorValue">
            <summary>
            EventDefinition for JobCoordinatorError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LogJobCoordinatorError(System.String)">
            <summary>
            Method to log an event of type JobCoordinatorError.
            </summary>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LogJobCoordinatorError(System.String,System.Exception)">
            <summary>
            Method to log an event of type JobCoordinatorError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.UserArgumentsErrorValue">
            <summary>
            EventDefinition for UserArgumentsError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LogUserArgumentsError(System.String)">
            <summary>
            Method to log an event of type UserArgumentsError.
            </summary>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LogUserArgumentsError(System.String,System.Exception)">
            <summary>
            Method to log an event of type UserArgumentsError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.JobArgumentsErrorValue">
            <summary>
            EventDefinition for JobArgumentsError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LogJobArgumentsError(System.String)">
            <summary>
            Method to log an event of type JobArgumentsError.
            </summary>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LogJobArgumentsError(System.String,System.Exception)">
            <summary>
            Method to log an event of type JobArgumentsError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.JobExecutionErrorValue">
            <summary>
            EventDefinition for JobExecutionError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LogJobExecutionError(System.String)">
            <summary>
            Method to log an event of type JobExecutionError.
            </summary>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LogJobExecutionError(System.String,System.Exception)">
            <summary>
            Method to log an event of type JobExecutionError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LiteSpeedBackupSkippedValue">
            <summary>
            EventDefinition for LiteSpeedBackupSkipped
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LogLiteSpeedBackupSkipped(System.String)">
            <summary>
            Method to log an event of type LiteSpeedBackupSkipped.
            </summary>
            <param name="backupRecord">Argument backupRecord for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LogLiteSpeedBackupSkipped(System.String,System.Exception)">
            <summary>
            Method to log an event of type LiteSpeedBackupSkipped with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="backupRecord">Argument backupRecord for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.ReportingBackupSkippedValue">
            <summary>
            EventDefinition for ReportingBackupSkipped
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LogReportingBackupSkipped(System.String)">
            <summary>
            Method to log an event of type ReportingBackupSkipped.
            </summary>
            <param name="backupRecord">Argument backupRecord for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LogReportingBackupSkipped(System.String,System.Exception)">
            <summary>
            Method to log an event of type ReportingBackupSkipped with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="backupRecord">Argument backupRecord for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.ServerNotInMetaDataValue">
            <summary>
            EventDefinition for ServerNotInMetaData
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LogServerNotInMetaData(System.String)">
            <summary>
            Method to log an event of type ServerNotInMetaData.
            </summary>
            <param name="server">Argument server for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LogServerNotInMetaData(System.String,System.Exception)">
            <summary>
            Method to log an event of type ServerNotInMetaData with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="server">Argument server for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.FileDeleteErrorValue">
            <summary>
            EventDefinition for FileDeleteError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LogFileDeleteError(System.String,System.String)">
            <summary>
            Method to log an event of type FileDeleteError.
            </summary>
            <param name="file">Argument file for formatting the event text.</param>
            <param name="ex">Argument ex for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LogFileDeleteError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type FileDeleteError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="file">Argument file for formatting the event text.</param>
            <param name="ex">Argument ex for formatting the event text.</param>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.EventLogger">
            <summary>
            Gets the EventLogger used to report events from this source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.EventSource">
            <summary>
            Gets the event source for events defined in this module.
            </summary>
            <value>
            The event source for events defined in this module.
            </value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.JobCoordinatorError">
            <summary>
              Gets the EventDefinition for the JobCoordinatorError.
            </summary>
            <value>The EventDefinition for the JobCoordinatorError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.UserArgumentsError">
            <summary>
              Gets the EventDefinition for the UserArgumentsError.
            </summary>
            <value>The EventDefinition for the UserArgumentsError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.JobArgumentsError">
            <summary>
              Gets the EventDefinition for the JobArgumentsError.
            </summary>
            <value>The EventDefinition for the JobArgumentsError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.JobExecutionError">
            <summary>
              Gets the EventDefinition for the JobExecutionError.
            </summary>
            <value>The EventDefinition for the JobExecutionError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LiteSpeedBackupSkipped">
            <summary>
              Gets the EventDefinition for the LiteSpeedBackupSkipped.
            </summary>
            <value>The EventDefinition for the LiteSpeedBackupSkipped</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.ReportingBackupSkipped">
            <summary>
              Gets the EventDefinition for the ReportingBackupSkipped.
            </summary>
            <value>The EventDefinition for the ReportingBackupSkipped</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.ServerNotInMetaData">
            <summary>
              Gets the EventDefinition for the ServerNotInMetaData.
            </summary>
            <value>The EventDefinition for the ServerNotInMetaData</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.FileDeleteError">
            <summary>
              Gets the EventDefinition for the FileDeleteError.
            </summary>
            <value>The EventDefinition for the FileDeleteError</value>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK\debug\doc\WstJobFrameworkGenericCoordinator.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WstJobFrameworkGenericCoordinator</name>
    </assembly>
    <members>
        <member name="M:GenericJobCoordinator.GenericJobCoordinator.SpawnJob(System.String,System.Boolean)">
            <summary>
            Tells the coordinator whether it can spawn jobs or not
            </summary>
            <param name="jobName">Name of job</param>
            <param name="spawnJob">Boolean value determining whether or job can be spawned</param>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK\release\doc\JobAgentTestJob.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JobAgentTestJob</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Webstore.JobFramework.Testing.JobAgentTestJob.JobAgentTestJobWorker">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobFramework.Testing.JobAgentTestJob.JobAgentTestJobWorker.EventLogSource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobFramework.Testing.JobAgentTestJob.JobAgentTestJobWorker.EventLogFilename">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobFramework.Testing.JobAgentTestJob.JobAgentTestJobWorker.EventLogMessageType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobFramework.Testing.JobAgentTestJob.JobAgentTestJobWorker.Init(Microsoft.Webstore.JobEngine.IJobAgent,System.String,Microsoft.Webstore.JobEngine.Location,System.Object,System.Int32)">
            <summary>
            
            </summary>
            <param name="ja"></param>
            <param name="localMachine"></param>
            <param name="location"></param>
            <param name="userArgs"></param>
            <param name="batchId"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobFramework.Testing.JobAgentTestJob.JobAgentTestJobWorker.PartialBaseInit(Microsoft.Webstore.JobEngine.IJobAgent,System.String,Microsoft.Webstore.JobEngine.Location,System.Object,System.Int32)">
            <summary>
            This do a partial initial like the base.Init(), but intentionally did not init the timer.
            This is because we will be controlling the timing. Normal worker should never do this.
            </summary>
            <param name="ja"></param>
            <param name="localMachine"></param>
            <param name="location"></param>
            <param name="userArgs"></param>
            <param name="batchId"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobFramework.Testing.JobAgentTestJob.JobAgentTestJobWorker.TerminateJob">
            <summary>
            Is called when the job should be terminated
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobFramework.Testing.JobAgentTestJob.JobAgentTestJobWorker.Run(Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.IPartitionSet,System.Int32@)">
            <summary>
            
            </summary>
            <param name="inputSet"></param>
            <param name="outputSet"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.JobFramework.Testing.JobAgentTestJob.JobAgentTestJob">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobFramework.Testing.JobAgentTestJob.JobAgentTestJob.Main(System.String[])">
            <summary>
            This method is not meant to run standalone. This is just to test the worker.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK\debug\doc\WstJobFrameworkManager.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WstJobFrameworkManager</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Webstore.JobEngine.JobServiceBase">
            <summary>
            Service provides a mechanism for ensuring that we have one and only instance
            of a service running among a group of machines
            We install and run the service on all the machines but only the one which has its name
            in the serviceTG will run
            At startup, they will look for the entry which has the right Service ID (a GUID) and that is
            either expired (lease_expiration) or unassigned (machine null)
            They will try to update such entry with the local machine name. Only one will succeed
            Then they query the table and check that they are the winner before proceeding further
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Service.OnStart(System.String[])">
            <summary>
            Set things in motion so your service can do its work.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Service.OnStop">
            <summary>
            Stop this service.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JobFrameworkManagerCategoryInstaller">
            <summary>
            Category installer for the WstJobFrameworkManager event source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkManagerCategoryInstaller.EventSource">
            <summary>
            The event source for which to install the category strings.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents">
            <summary>
            Events in the JobFrameworkManager module.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.log">
            <summary>
            MSN Runtime's event logger 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.#ctor">
            <summary>
            Private constructor prevents instantiation.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.ScheduleJobFailureValue">
            <summary>
            EventDefinition for ScheduleJobFailure
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.LogScheduleJobFailure(System.String,System.String)">
            <summary>
            Method to log an event of type ScheduleJobFailure.
            </summary>
            <param name="jobName">Argument jobName for formatting the event text.</param>
            <param name="exceptionString">Argument exceptionString for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.LogScheduleJobFailure(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type ScheduleJobFailure with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="jobName">Argument jobName for formatting the event text.</param>
            <param name="exceptionString">Argument exceptionString for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.UpdateLeaseFailureValue">
            <summary>
            EventDefinition for UpdateLeaseFailure
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.LogUpdateLeaseFailure">
            <summary>
            Method to log an event of type UpdateLeaseFailure.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.LogUpdateLeaseFailure(System.Exception)">
            <summary>
            Method to log an event of type UpdateLeaseFailure with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.TryBecomeJobManagerFailureValue">
            <summary>
            EventDefinition for TryBecomeJobManagerFailure
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.LogTryBecomeJobManagerFailure(System.String)">
            <summary>
            Method to log an event of type TryBecomeJobManagerFailure.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.LogTryBecomeJobManagerFailure(System.String,System.Exception)">
            <summary>
            Method to log an event of type TryBecomeJobManagerFailure with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.JobStatusUpdateFailedValue">
            <summary>
            EventDefinition for JobStatusUpdateFailed
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.LogJobStatusUpdateFailed">
            <summary>
            Method to log an event of type JobStatusUpdateFailed.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.LogJobStatusUpdateFailed(System.Exception)">
            <summary>
            Method to log an event of type JobStatusUpdateFailed with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.JobFrameworkCoordinatorThreadFailureValue">
            <summary>
            EventDefinition for JobFrameworkCoordinatorThreadFailure
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.LogJobFrameworkCoordinatorThreadFailure">
            <summary>
            Method to log an event of type JobFrameworkCoordinatorThreadFailure.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.LogJobFrameworkCoordinatorThreadFailure(System.Exception)">
            <summary>
            Method to log an event of type JobFrameworkCoordinatorThreadFailure with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.JobCoordinatorExtractionFailedValue">
            <summary>
            EventDefinition for JobCoordinatorExtractionFailed
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.LogJobCoordinatorExtractionFailed">
            <summary>
            Method to log an event of type JobCoordinatorExtractionFailed.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.LogJobCoordinatorExtractionFailed(System.Exception)">
            <summary>
            Method to log an event of type JobCoordinatorExtractionFailed with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.CoordinatorAssemblyInfoReadFailureValue">
            <summary>
            EventDefinition for CoordinatorAssemblyInfoReadFailure
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.LogCoordinatorAssemblyInfoReadFailure(System.String)">
            <summary>
            Method to log an event of type CoordinatorAssemblyInfoReadFailure.
            </summary>
            <param name="jcFullName">Argument jcFullName for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.LogCoordinatorAssemblyInfoReadFailure(System.String,System.Exception)">
            <summary>
            Method to log an event of type CoordinatorAssemblyInfoReadFailure with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="jcFullName">Argument jcFullName for formatting the event text.</param>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.EventLogger">
            <summary>
            Gets the EventLogger used to report events from this source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.EventSource">
            <summary>
            Gets the event source for events defined in this module.
            </summary>
            <value>
            The event source for events defined in this module.
            </value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.ScheduleJobFailure">
            <summary>
              Gets the EventDefinition for the ScheduleJobFailure.
            </summary>
            <value>The EventDefinition for the ScheduleJobFailure</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.UpdateLeaseFailure">
            <summary>
              Gets the EventDefinition for the UpdateLeaseFailure.
            </summary>
            <value>The EventDefinition for the UpdateLeaseFailure</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.TryBecomeJobManagerFailure">
            <summary>
              Gets the EventDefinition for the TryBecomeJobManagerFailure.
            </summary>
            <value>The EventDefinition for the TryBecomeJobManagerFailure</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.JobStatusUpdateFailed">
            <summary>
              Gets the EventDefinition for the JobStatusUpdateFailed.
            </summary>
            <value>The EventDefinition for the JobStatusUpdateFailed</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.JobFrameworkCoordinatorThreadFailure">
            <summary>
              Gets the EventDefinition for the JobFrameworkCoordinatorThreadFailure.
            </summary>
            <value>The EventDefinition for the JobFrameworkCoordinatorThreadFailure</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.JobCoordinatorExtractionFailed">
            <summary>
              Gets the EventDefinition for the JobCoordinatorExtractionFailed.
            </summary>
            <value>The EventDefinition for the JobCoordinatorExtractionFailed</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.CoordinatorAssemblyInfoReadFailure">
            <summary>
              Gets the EventDefinition for the CoordinatorAssemblyInfoReadFailure.
            </summary>
            <value>The EventDefinition for the CoordinatorAssemblyInfoReadFailure</value>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK\release\doc\WebstoreWrapper.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WebstoreWrapper</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Webstore.Wrapper.WrapperWstConnection">
            <summary>
            Class that effective wraps the WstConnection for the express purpose of callings its 
            properties that return generic collections
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Wrapper.WrapperWstConnection.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Wrapper.WrapperWstConnection.Open">
            <summary>
            Open a connection to the Webstore resource)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Wrapper.WrapperWstConnection.ConnectionString">
            <summary>
            Connection String (deployment name)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Wrapper.WrapperWstConnection.SqlPartitions">
            <summary>
            Returns a collection WrapperWebstoreSQLFss objects (which wrap the generic WebstoreSQLFss object) 
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Wrapper.WrapperWebstoreSQLFss">
            <summary>
            Class that effective wraps the WebstoreSQLFss object for the express purpose of callings its 
            properties that return generic collections
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Wrapper.WrapperWebstoreSQLFss.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Wrapper.WrapperWebstoreSQLFss.FssId">
            <summary>
            Fail Safe Set ID
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Wrapper.WrapperWebstoreSQLFss.Databases">
            <summary>
            Returns a collection WrapperWebstoreDatabase objects (which wrap the generic WebstoreDatabase object) 
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Wrapper.WrapperWebstoreDatabase">
            <summary>
            Class that effective wraps the WebstoreDatabase object for the express purpose of callings its 
            properties that return generic collections
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Wrapper.WrapperWebstoreDatabase.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Wrapper.WrapperWebstoreDatabase.Server">
            <summary>
            Name of the server 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Wrapper.WrapperWebstoreDatabase.Name">
            <summary>
            Name of the database 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Wrapper.WrapperWebstoreDatabase.IsPrimary">
            <summary>
            boolean value indicating if the database is primary or not 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Wrapper.WrapperWebstoreDatabase.Status">
            <summary>
            Status of the database
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK\debug\doc\WstSampleJob.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WstSampleJob</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Webstore.JobFramework.Testing.SampleJob.EventLogHelper">
            <summary>
            This class is used to log events over given period of time.  Call StartListening
            to begin listening to the specified event log.  If a file name is provided, then 
            the events will be saved to a file.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobFramework.Testing.SampleJob.EventLog_Reader">
            <summary>
            This is a helper class that is used to read
            the EventLog for webstore related events.
            The events are read form the ApplicationLog, 
            and are filtered on webstore.
            All the members of this class are static.
            </summary>
            
        </member>
        <member name="T:Microsoft.Webstore.JobFramework.Testing.SampleJob.SampleJobWorker">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobFramework.Testing.SampleJob.SampleJobWorker.Init(Microsoft.Webstore.JobEngine.IJobAgent,System.String,Microsoft.Webstore.JobEngine.Location,System.Object,System.Int32)">
            <summary>
            
            </summary>
            <param name="ja"></param>
            <param name="localMachine"></param>
            <param name="location"></param>
            <param name="userArgs"></param>
            <param name="batchId"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobFramework.Testing.SampleJob.SampleJobWorker.TerminateJob">
            <summary>
            Is called when the job should be terminated
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobFramework.Testing.SampleJob.SampleJobWorker.Run(Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.IPartitionSet,System.Int32@)">
            <summary>
            
            </summary>
            <param name="inputSet"></param>
            <param name="outputSet"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK\debug\doc\WstSqlScriptJob.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WstSqlScriptJob</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Webstore.Jobs.SqlScriptJobWorker">
            <summary>
            Class to execute SQL Script jobs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.SqlScriptJobWorker.Initialize(System.String,Microsoft.Webstore.JobEngine.Location,System.Object,System.Int32)">
            <summary>
            Performs and JobWorker initialization
            </summary>
            <param name="localMachine">Name of the local machine</param>
            <param name="location">location</param>
            <param name="userArgs">User Arguments</param>
            <param name="batchId">Batch ID</param>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.SqlScriptJobWorker.TerminateJob">
            <summary>
            Is called when the job should be terminated
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.SqlScriptJobWorker.RunJob(Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.IPartitionSet,System.Int32@)">
            <summary>
            Executes the job
            </summary>
            <param name="inputSet">Input partition set to work upon</param>
            <param name="outputSet">Output partition set that was worked upon</param>
            <param name="statusCode">Status code to return</param>       
            <returns>IPartitionSet object</returns>
        </member>
        <member name="T:Microsoft.Webstore.Jobs.SqlScriptJobCategoryInstaller">
            <summary>
            Category installer for the WstSqlScriptJob event source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Jobs.SqlScriptJobCategoryInstaller.EventSource">
            <summary>
            The event source for which to install the category strings.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Jobs.SqlScriptJobEvents">
            <summary>
            Events in the SqlScriptJob module.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Jobs.SqlScriptJobEvents.log">
            <summary>
            MSN Runtime's event logger 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.SqlScriptJobEvents.#ctor">
            <summary>
            Private constructor prevents instantiation.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Jobs.SqlScriptJobEvents.SqlExecuteErrorValue">
            <summary>
            EventDefinition for SqlExecuteError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.SqlScriptJobEvents.LogSqlExecuteError(System.String,System.String)">
            <summary>
            Method to log an event of type SqlExecuteError.
            </summary>
            <param name="query">Argument query for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.SqlScriptJobEvents.LogSqlExecuteError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type SqlExecuteError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="query">Argument query for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.Jobs.SqlScriptJobEvents.ArgumentsErrorValue">
            <summary>
            EventDefinition for ArgumentsError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.SqlScriptJobEvents.LogArgumentsError(System.String)">
            <summary>
            Method to log an event of type ArgumentsError.
            </summary>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.SqlScriptJobEvents.LogArgumentsError(System.String,System.Exception)">
            <summary>
            Method to log an event of type ArgumentsError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.Jobs.SqlScriptJobEvents.RecordExceptionValue">
            <summary>
            EventDefinition for RecordException
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.SqlScriptJobEvents.LogRecordException(System.String)">
            <summary>
            Method to log an event of type RecordException.
            </summary>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.SqlScriptJobEvents.LogRecordException(System.String,System.Exception)">
            <summary>
            Method to log an event of type RecordException with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.Jobs.SqlScriptJobEvents.ScriptWasNotExecutedValue">
            <summary>
            EventDefinition for ScriptWasNotExecuted
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.SqlScriptJobEvents.LogScriptWasNotExecuted(System.String,System.String,System.String)">
            <summary>
            Method to log an event of type ScriptWasNotExecuted.
            </summary>
            <param name="script">Argument script for formatting the event text.</param>
            <param name="database">Argument database for formatting the event text.</param>
            <param name="server">Argument server for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.SqlScriptJobEvents.LogScriptWasNotExecuted(System.String,System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type ScriptWasNotExecuted with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="script">Argument script for formatting the event text.</param>
            <param name="database">Argument database for formatting the event text.</param>
            <param name="server">Argument server for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.Jobs.SqlScriptJobEvents.ScriptCancelledDbChangedValue">
            <summary>
            EventDefinition for ScriptCancelledDbChanged
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.SqlScriptJobEvents.LogScriptCancelledDbChanged(System.String,System.String,System.String,System.String)">
            <summary>
            Method to log an event of type ScriptCancelledDbChanged.
            </summary>
            <param name="script">Argument script for formatting the event text.</param>
            <param name="database">Argument database for formatting the event text.</param>
            <param name="server">Argument server for formatting the event text.</param>
            <param name="newDbStatus">Argument newDbStatus for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.SqlScriptJobEvents.LogScriptCancelledDbChanged(System.String,System.String,System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type ScriptCancelledDbChanged with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="script">Argument script for formatting the event text.</param>
            <param name="database">Argument database for formatting the event text.</param>
            <param name="server">Argument server for formatting the event text.</param>
            <param name="newDbStatus">Argument newDbStatus for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.Jobs.SqlScriptJobEvents.ScriptCancelledFssChangedValue">
            <summary>
            EventDefinition for ScriptCancelledFssChanged
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.SqlScriptJobEvents.LogScriptCancelledFssChanged(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Method to log an event of type ScriptCancelledFssChanged.
            </summary>
            <param name="script">Argument script for formatting the event text.</param>
            <param name="database">Argument database for formatting the event text.</param>
            <param name="server">Argument server for formatting the event text.</param>
            <param name="fss">Argument fss for formatting the event text.</param>
            <param name="newDbStatus">Argument newDbStatus for formatting the event text.</param>
            <param name="isPrimary">Argument isPrimary for formatting the event text.</param>
            <param name="databaseType">Argument databaseType for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.SqlScriptJobEvents.LogScriptCancelledFssChanged(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type ScriptCancelledFssChanged with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="script">Argument script for formatting the event text.</param>
            <param name="database">Argument database for formatting the event text.</param>
            <param name="server">Argument server for formatting the event text.</param>
            <param name="fss">Argument fss for formatting the event text.</param>
            <param name="newDbStatus">Argument newDbStatus for formatting the event text.</param>
            <param name="isPrimary">Argument isPrimary for formatting the event text.</param>
            <param name="databaseType">Argument databaseType for formatting the event text.</param>
        </member>
        <member name="P:Microsoft.Webstore.Jobs.SqlScriptJobEvents.EventLogger">
            <summary>
            Gets the EventLogger used to report events from this source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Jobs.SqlScriptJobEvents.EventSource">
            <summary>
            Gets the event source for events defined in this module.
            </summary>
            <value>
            The event source for events defined in this module.
            </value>
        </member>
        <member name="P:Microsoft.Webstore.Jobs.SqlScriptJobEvents.SqlExecuteError">
            <summary>
              Gets the EventDefinition for the SqlExecuteError.
            </summary>
            <value>The EventDefinition for the SqlExecuteError</value>
        </member>
        <member name="P:Microsoft.Webstore.Jobs.SqlScriptJobEvents.ArgumentsError">
            <summary>
              Gets the EventDefinition for the ArgumentsError.
            </summary>
            <value>The EventDefinition for the ArgumentsError</value>
        </member>
        <member name="P:Microsoft.Webstore.Jobs.SqlScriptJobEvents.RecordException">
            <summary>
              Gets the EventDefinition for the RecordException.
            </summary>
            <value>The EventDefinition for the RecordException</value>
        </member>
        <member name="P:Microsoft.Webstore.Jobs.SqlScriptJobEvents.ScriptWasNotExecuted">
            <summary>
              Gets the EventDefinition for the ScriptWasNotExecuted.
            </summary>
            <value>The EventDefinition for the ScriptWasNotExecuted</value>
        </member>
        <member name="P:Microsoft.Webstore.Jobs.SqlScriptJobEvents.ScriptCancelledDbChanged">
            <summary>
              Gets the EventDefinition for the ScriptCancelledDbChanged.
            </summary>
            <value>The EventDefinition for the ScriptCancelledDbChanged</value>
        </member>
        <member name="P:Microsoft.Webstore.Jobs.SqlScriptJobEvents.ScriptCancelledFssChanged">
            <summary>
              Gets the EventDefinition for the ScriptCancelledFssChanged.
            </summary>
            <value>The EventDefinition for the ScriptCancelledFssChanged</value>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK\debug\doc\WstRestoreJob.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WstRestoreJob</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Webstore.OfflineProcessing.DataAccess">
            <summary>
            This class is a common base class for WstBackup database.
            
            In broad strokes, how does a client connect to the WstDatabase?  There are two dimensions:
            1) the client looks for the centralized setting WstBackupSiteAndDeployment to look for the
               name of the site and deployment to use for WstBackup.  If that centralized setting isn't
               present, the client uses the default site and deployment name 'WstBackup'
            2) the client also looks at its cluster for a setting "OfflineProcessingDataPartitionNumber"
               which it uses as its variable partition number when sending requests
            
            Neither of these methods are supported at the moment.  We will always use PartitionNumber 0
            and default site WstBackup.
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DataAccess.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DataAccess.GetBackupPartition">
            <summary>
            When we get to supporting partitions, this will be used.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DataAccess.GetConnection">
            <summary>
            The connection comes out of centralized settings.  If there is no site\deployment
            name specified then we default to "WstBackup".
            </summary>
            <returns>a newly created WstConnection object</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.GetQueueItemsByServer(System.String)">
            <summary>
            Gets the active queue items for a particular server.
            UT NOTE: This is tests in QueueItemSet tests.
            </summary>
            <param name="serverName">name of the server to retrieve queue items for</param>
            <returns>a set of queue items</returns>
            <exception cref="T:System.ArgumentNullException">if serverName is null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on SQL error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on WSTClient exception</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.HeartBeat(Microsoft.Webstore.OfflineProcessing.QueueItem)">
            <summary>
            Updates the heartbeat on a particular QueueItem.
            </summary>
            <param name="item">item to update heartbeat on</param>
            <returns>true if heartbeating was successful, false otherwise (means the item has been cancelled or claimed by another server)</returns>
            <exception cref="T:System.ArgumentNullException">if item is null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on sql error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on wst error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.GetDeploymentRecord(System.Guid)">
            <summary>
            Retrieves a DeploymentRecord for a given deployment GUID.
            UT NOTE: tested as part of DeploymentRecord tests
            </summary>
            <param name="deploymentUID">deployment guid to retrieve</param>
            <returns>DeploymentRecord</returns>
            <exception cref="T:System.Data.DataException">if deploymentUID does not match a deployment in the database</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database problem</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on Wst problem</exception>
            <exception cref="T:System.ArgumentException">if any of the database values are incorrect</exception>
            <exception cref="T:System.ArgumentNullException">if SPROCText for any sprocs are null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.CreateNewQueueItem(Microsoft.Webstore.OfflineProcessing.FSSBackupRecord,System.String,System.DateTime,System.String)">
            <summary>
            Attempts to create a new queue item.  If it fails (due to constraint violations)
            it returns false, otherwise returns true.
            </summary>
            <param name="record">record containing deployment guid and SQLFSSNum</param>
            <param name="ownerServer">server that should own this queue item</param>
            <param name="expires">expiration date of this queue item</param>
            <param name="offlineBackupPath">full path to the backup file when copied</param>
            <returns>true if a new queue item could be created</returns>
            <exception cref="T:System.ArgumentNullException">if record, ownerServer, or offlineBackupPath are null</exception>
            <exception cref="T:System.ArgumentException">if expires is in the past</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on wst error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.ReclaimQueueItem(Microsoft.Webstore.OfflineProcessing.FSSBackupRecord,System.String,System.String)">
            <summary>
            Attempts to reclaim a reset queue item.  If it fails (due to race conditions)
            it returns false, otherwise returns true.
            </summary>
            <param name="record">record containing deployment guid and SQLFSSNum</param>
            <param name="ownerServer">server that should own this queue item</param>
            <param name="offlineBackupPath">full path to the backup file when copied</param>
            <returns>true if the queue item could be reclaimed</returns>
            <exception cref="T:System.ArgumentNullException">if record, ownerServer, or offlineBackupPath are null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.RestoreQueueItem(Microsoft.Webstore.OfflineProcessing.QueueItem,System.Int32,System.String)">
            <summary>
            Attempts to move a backup from the "waiting for restore" state to the "restoring" state.
            Might fail due to race condition (many restore jobs all running at same time on same
            server), in which case it will return false.
            </summary>
            <param name="itemToRestore">QueueItem to switch to restoring state</param>
            <param name="restoreJobId">id of this restore job</param>
            <param name="restoredDatabaseName">name to use for the restored database</param>
            <returns>true if the queue item was transitioned by this job to restoring state, false otherwise</returns>
            <exception cref="T:System.ArgumentNullException">if itemToRestore or restoredDatabaseName are null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.FailQueueItem(Microsoft.Webstore.OfflineProcessing.QueueItem)">
            <summary>
            Called when processing of a queue item fails, handles reassigning / cancelling it in the database.
            </summary>
            <param name="item">item to cancel</param>
            <exception cref="T:System.ArgumentNullException">if item is null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on sql error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
            <exception cref="T:System.ArgumentException">if item is not a valid, active queue item</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.FailQueueItemNoThrow(Microsoft.Webstore.OfflineProcessing.QueueItem)">
            <summary>
            Calls FailQueueItem but logs and swallows any exceptions.
            </summary>
            <param name="item">item to cancel</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.FinishQueueItem(Microsoft.Webstore.OfflineProcessing.QueueItem)">
            <summary>
            Called when processing of a queue item finishes.
            </summary>
            <param name="item">item to finish</param>
            <exception cref="T:System.ArgumentNullException">if item is null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on sql error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
            <exception cref="T:System.ArgumentException">if item is not a valid, active queue item</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.CleanupQueue(System.DateTime)">
            <summary>
            Performs the routine per-iteration queue cleanup.  Fails anything that has
            a stale heartbeat and cancels anything that is expired.
            </summary>
            <param name="oldestValidHeartbeat">the time of the oldest valid heartbeat, in UTC</param>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.GetNewFSSBackups">
            <summary>
            Retrieves the list of available new FSSBackups (new backups are backups are non-reset backups).
            UT NOTE: Tested in FSSBAckupRecord Tests
            </summary>
            <returns>list of new backups</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">on database problem</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on Wst problem</exception>
            <exception cref="T:System.ArgumentNullException">on null values from database</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.GetResetFSSBackups">
            <summary>
            Retrieves the list of available reset FSSBackups.
            UT NOTE: Tested in FSSBAckupRecord tests.
            </summary>
            <returns>list of new backups</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
            <exception cref="T:System.ArgumentNullException">if any of the database fields are null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.GetTransferringItem(Microsoft.Webstore.OfflineProcessing.FSSBackupRecord,System.String)">
            <summary>
            Retrieves the QueueItem that is being transferred for a particular backup record
            and owner server.
            </summary>
            <param name="record">record that belongs to the queue item</param>
            <param name="ownerServer">server that owns the queue item</param>
            <returns>QueueItem if found, null otherwise</returns>
            <exception cref="T:System.ArgumentNullException">if record or ownerServer are null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on Wst error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.UpdateAllHeartbeats(System.String)">
            <summary>
            Updates the heartbeats of all items belonging to this server in the 
            "waiting for restore" state.
            </summary>
            <param name="ownerServer">server the items belong to</param>
            <exception cref="T:System.ArgumentNullException">if ownerServer is null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on wst exception</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.UpdateQueueState(Microsoft.Webstore.OfflineProcessing.QueueItem,Microsoft.Webstore.OfflineProcessing.QueueItem.State)">
            <summary>
            Updates the state of a queue item.
            </summary>
            <param name="item">item to update</param>
            <param name="newState">new state to assign to it</param>
            <returns>true if update succeeded</returns>
            <exception cref="T:System.ArgumentNullException">if item is null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.DeploymentRecord">
            <summary>
            This class represents a deployment record in the WstBackup database.
            This includes things like the deploymentname and client name, the times
            during which a database can be pulled, and the times during which a database
            can be processed.  These records live in the "Deployment" table in WstBackup.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.#ctor(System.Guid,System.String,System.String,System.DateTime,System.Int32,System.DateTime,System.Int32,Microsoft.Webstore.OfflineProcessing.DeploymentRecord.CycleLengthUnits,System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="deploymentUid">DeploymentUID</param>
            <param name="deploymentName">name of this deployment</param>
            <param name="clientName">name of the client (partner) this deployment belongs to</param>
            <param name="pullStartTime">start time of a pull, must be in the past</param>
            <param name="pullDurationInMinutes">max duration of a pull window in minutes, &gt;0</param>
            <param name="processingStart">start time of any processing cycle, must be in the past</param>
            <param name="processingCycleLength">length of time for a processing cycle, must be &gt;0</param>
            <param name="processingCycleLengthUnits">units for length of time of a processing cycle</param>
            <param name="requiresReportingDb">whether or not this deployment requires a reporting DB</param>
            <exception cref="T:System.ArgumentNullException">if deploymentName is null</exception>
            <exception cref="T:System.ArgumentException">if pullStartTime or processingStart occur in future</exception>
            <exception cref="T:System.ArgumentException">if pullDurationInMinutes or processingCycleLength are .lt. 1</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.IsPullTimeOkay(System.DateTime)">
            <summary>
            Checks to see if a given time is within a valid pull window.
            </summary>
            <param name="timeToCheck">time to check</param>
            <returns>true if the given time is during a valid pull window</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.GetPullWindowEnd">
            <summary>
            Gets the time of the end of the most recent pull window.
            </summary>
            <returns>end of the most recent pull window</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.GetCycleExpirationTime(System.DateTime,System.Int32)">
            <summary>
            Calculates the cycle expiration time based on any time.  If you want the expiration time
            for the cycle that someTime is in, use cyclesAfterCurrent == 0.  If you want the expiration
            time of cycle one after someTime is in, use cyclesAfterCurrent == 1, etc.
            </summary>
            <param name="someTime">time to calculate expiration for</param>
            <param name="cyclesAfterCurrent">number of cycles after the current to add</param>
            <returns>start of next cycle - 1 minute</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.IsInCycles(System.DateTime,System.Int32)">
            <summary>
            Checks to see if a given time is within a processing cycle window(s).  It will check
            the current processing window plus cyclesBeforeCurrent.
            </summary>
            <param name="timeToCheck">time to check</param>
            <param name="cyclesBeforeCurrent">number of cycles before the current to check</param>
            <returns>true if the given time is during a valid cycle window</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.FindCycleStartTime(System.DateTime,System.DateTime,System.Int32,Microsoft.Webstore.OfflineProcessing.DeploymentRecord.CycleLengthUnits)">
            <summary>
            Finds the start time of the cycle that contains a given time.
            </summary>
            <param name="forTime">time to find the cycle beginning of</param>
            <param name="cycleStart">start time of any cycle</param>
            <param name="cycleLength">length of a cycle</param>
            <param name="cycleLengthUnits">units of length of the cycle</param>
            <returns>start time of the cycle forTime belongs to</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.FindCycleEndTime(System.DateTime,System.DateTime,System.Int32,Microsoft.Webstore.OfflineProcessing.DeploymentRecord.CycleLengthUnits)">
            <summary>
            Finds the end time of the cycle that contains a given time.
            </summary>
            <param name="forTime">time to find the cycle end of</param>
            <param name="cycleStart">start time of any cycle</param>
            <param name="cycleLength">length of a cycle</param>
            <param name="cycleLengthUnits">units of length of the cycle</param>
            <returns>end time of the cycle forTime belongs to</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.CalcCycleSpan(System.Int32,Microsoft.Webstore.OfflineProcessing.DeploymentRecord.CycleLengthUnits)">
            <summary>
            Calculates the span of a cycle, given a length and units
            </summary>
            <param name="cycleLength"></param>
            <param name="cycleLengthUnits"></param>
            <returns>timespan of the cycle</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.AddSproc(Microsoft.Webstore.OfflineProcessing.DeploymentSproc)">
            <summary>
            Adds a sproc to the internal list.
            </summary>
            <param name="sproc">sproc to add</param>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.DeploymentUID">
            <summary>
            The GUID that uniquely identifies this deployment.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.PullStartTime">
            <summary>
            The start time (for a given day) of the time window during which it is
            okay to pull a backup record for hosts in this deployment.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.PullDurationInMinutes">
            <summary>
            The duration of the time window each day during which it is okay to pull
            a backup record for hosts in this deployment.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.ProcessingStart">
            <summary>
            The start of any processing cycle.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.ProcessingCycleLength">
            <summary>
            The magnitude of the length of a single processing cycle.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.ProcessingCycleLengthUnits">
            <summary>
            The units of the length of a single processing cycle.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.RequiresReportingDb">
            <summary>
            Whether or not processing of backups for this deployment requires the
            reporting DB.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.Sprocs">
            <summary>
            The sprocs configured for this deployment.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.Name">
            <summary>
            The name of this deployment.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.ClientName">
            <summary>
            The name of the client (aka partner) this deployment belongs to.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.DeploymentSproc">
            <summary>
            This class represents a sproc (really a script) for a deployment.  Sprocs have
            a many to one relationship with deployments and are strongly ordered.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DeploymentSproc.#ctor(System.Guid,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="deploymentUid">UID of the deployment this belongs to</param>
            <param name="commandText">commandText, can't be null</param>
            <exception cref="T:System.ArgumentNullException">if commandText is null</exception>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentSproc.DeploymentUid">
            <summary>
            The UID of the deployment this sproc belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentSproc.CommandText">
            <summary>
            The command text to dump into a SqlCommand object for this sproc.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.IFreeSpaceCalculator">
            <summary>
            This interface represents a free space calculator.  It is here strictly for
            the purposes of enabling testability.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.IFreeSpaceCalculator.GetFromDir(System.String)">
            <summary>
            Calculates the amount of free space left in a directory.
            </summary>
            <param name="dir">path to the directory</param>
            <returns>amount of free space left in directory, in bytes</returns>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.FreeSpaceCalculator">
            <summary>
            This class is for convenience sake only, to enable unit testing,
            because it is notoriously hard to simulate low free space conditions
            in unit tests.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.FreeSpaceCalculator.GetFromDir(System.String)">
            <summary>
            Calculates the free space from a directory.
            </summary>
            <param name="dir">directory to use for free space calculation</param>
            <returns>number of bytes free space</returns>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord">
            <summary>
            This class represents a backup record from the WstBackup database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.#ctor(System.Guid,System.Int16,System.String,System.String,System.DateTime,System.DateTime,System.Int32,System.String,System.Boolean)">
            <summary>
            Default constructor for FSSBackupRecord.
            </summary>
            <param name="deploymentUid">guid of the deployment that this record belongs to</param>
            <param name="sqlfssNum">FSSNum that this record belongs to</param>
            <param name="serverName">name of the server that contains the backup</param>
            <param name="serverShare">share on the server that contains the backup</param>
            <param name="created">date and time this backup record was created</param>
            <param name="finished">date and time this backup record was finished</param>
            <param name="backupSizeInMB">size of the backup record in MB</param>
            <param name="deploymentManifestVersion">deployment manifest version that generated this backup</param>
            <param name="usingLiteSpeed">whether or not this backup was created using LiteSpeed</param>
            <exception cref="T:System.ArgumentNullException">if serverName, serverShare, or deploymentManifestVersion are null</exception>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.QueueItem">
            <summary>
            Contains the QueueItem that represents this FSSBackupRecord.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.Deployment">
            <summary>
            Contains the deployment record that belongs to this FSSBackupRecord.
            Isn't guaranteed to be populated.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.DeploymentUID">
            <summary>
            Returns the deploymentUID that this backup record belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.SQLFSSNum">
            <summary>
            Returns the FSSNum that this backup record belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.ServerName">
            <summary>
            The name of the server that contains this backup.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.ServerShare">
            <summary>
            The share on the server that contains this backup.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.Created">
            <summary>
            Returns the date this backup was Created.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.Finished">
            <summary>
            Returns the date this backup was finished.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.BackupSizeInMB">
            <summary>
            The size of this backup record in MB.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.DeploymentManifestVersion">
            <summary>
            The deployment manifest version that generated this backup.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.UsingLiteSpeed">
            <summary>
            Whether or not this backup was created using SqlLiteSpeed.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.ISynchronousWorkItem">
            <summary>
            Represents a long-running synchronous work item.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.ISynchronousWorkItem.Run">
            <summary>
            Executes the work item, throws an exception if it fails.
            </summary>
            <returns>true if the job ran to completion, false if it was aborted (due to Cancel)</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.ISynchronousWorkItem.Cancel">
            <summary>
            Cancels the work item.  This will be called from a different thread
            than Run so it needs to be threadsafe.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker">
            <summary>
            This class implements a worker thread that performs periodic heartbeating.  It does
            the following:
            - execute a long-running synchronous operation on a background thread
            - periodically notify the calling thread that we are still alive (so it can heartbeat)
            - return status/success
            - provide a cancel method for the synchronous operation in the background thread
            - provide a timeout for the synchronous operation in the background thread
            
            Technically since we are using events we should implement IDisposable.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.#ctor(System.Int64,System.DateTime,Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.HeartbeatDelegate,Microsoft.Webstore.OfflineProcessing.ISynchronousWorkItem)">
            <summary>
            Constructor for the HeartbeatingWorker.
            </summary>
            <param name="heartbeatIntervalInMS">interval in MS between heartbeats, minimum 1000</param>
            <param name="endTime">the time at which to end the background operation</param>
            <param name="heartbeatDelegate">delegate to call back whenever we heartbeat</param>
            <param name="workItem">item that implements the long-running synchronous work</param>
            <exception cref="T:System.ArgumentException">if heartbeatIntervalInMS is less than 1000</exception>
            <exception cref="T:System.ArgumentException">if endTime is in the past</exception>
            <exception cref="T:System.ArgumentNullException">if heartbeatDelegate or workItem are null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.Finalize">
            <summary>
            Finalizer, needs to call dispose.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.HeartbeatTimerCallback(System.Object)">
            <summary>
            The callback used by the timer to indicate that we need to do periodic processing.
            This is called from an anonymous background threadpool thread.
            </summary>
            <param name="arg">ignored</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.CancelAbort">
            <summary>
            This is called to attempt cancelling and then aborting the thread.  Can only be
            called from the main thread.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.Run">
            <summary>
            This runs the background synchronous worker and starts heartbeating.  When this
            returns the result of the operation can be determined by checking OperationResult
            and OperationException.
            
            Here are what the different status means:
             NotInitialized - something went wrong in this library, report the error to us
             Success - job ran to completion and all heartbeats occurred as expected
             Cancel - job expired or heartbeat delegate returned false and Cancel method worked correctly
             Abort - job expired or heartbeat delegate returned false and Cancel method didn't work (check OperationException)
             Exception - workItem.Run method generated an exception (check OperationException)          
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.ThreadStart">
            <summary>
            This method implements the background worker thread.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.Dispose">
            <summary>
            Tears down this object.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.Dispose(System.Boolean)">
            <summary>
            Tears down this object.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.EndTime">
            <summary>
            The time at which this copy operation should end.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.HeartbeatIntervalInMS">
            <summary>
            The heartbeat interval in MS to use.  When the thread is running a timer
            will be created with this interval and the HeartbeatEvent will be set
            everytime the timer goes off.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.OperationResult">
            <summary>
            The result of the operation.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.OperationException">
            <summary>
            If an exception was generated, a copy of the exception.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.HeartbeatDelegate">
            <summary>
            This is called to perform heartbeating.  This will always be called in the context
            of the main thread.
            </summary>
            <returns>true if successful and loop should continue, false otherwise</returns>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.LiteSpeedUtils">
            <summary>
            This class contains some utilities for performing basic checks on SQLLiteSpeed.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.LiteSpeedUtils.IsInstalled(System.String)">
            <summary>
            Determines whether or not SQLLiteSpeed is installed on a given server.
            </summary>
            <param name="serverName">name of the server to check</param>
            <returns>true if SQLLiteSpeed is installed, false otherwise</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:System.ArgumentNullException">if serverName is null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.LiteSpeedUtils.IsEnabled(System.String)">
            <summary>
            Determines whether or not SqlLiteSpeed is enabled for a particular deployment.
            </summary>
            <param name="deploymentName">name of the deployment</param>
            <returns>true if LiteSpeed is enabled for this deployment</returns>
            <exception cref="T:System.ArgumentNullException">if deploymentName is null</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.LiteSpeedUtils.IsEnabled(System.Guid)">
            <summary>
            Determines whether or not SQLLiteSpeed is enabled for a particular deployment.
            </summary>
            <param name="deploymentUID">Guid of the deployment</param>
            <returns>true if LiteSpeed is enabled for this deployment</returns>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.IOPJobWorker">
            <summary>
            This is the minimal interface for a worker class to implement.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.IOPJobWorker.DoIteration(System.Boolean)">
            <summary>
            Executes an iteration of the job.
            </summary>
            <param name="asConsole">boolean indicating whether or not this job is being run as console</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.IOPJobWorker.GetSleepTimeInMS">
            <summary>
            Retrieves the amount of time that the job should sleep between iterations.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.WstOPJobWorker">
            <summary>
            This class implements the job worker for the Offline Processing backup job.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJobWorker.Init(Microsoft.Webstore.JobEngine.IJobAgent,System.String,Microsoft.Webstore.JobEngine.Location,System.Object,System.Int32)">
            <summary>
            This is a trivial init method which simply populates arguments in the base class and stores user args.
            </summary>
            <param name="ja"></param>
            <param name="localMachine"></param>
            <param name="location"></param>
            <param name="userArgs"></param>
            <param name="batchId"></param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJobWorker.Run(Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.IPartitionSet,System.Int32@)">
            <summary>
            This job runs as a continuous loop for ever (well at least until someone kills it or it dies of natural
            causes).  The basic idea is:
             - do some stuff
             - wait awhile
             - loop back
            This method implements that basic logic.  All of the real logic of the job is contained in the class
            IOPJobWorker.
            </summary>
            <param name="inputSet">not used, the job figures out its own PartitionSet based on the machine it is running on</param>
            <param name="outputSet">not used</param>
            <param name="statusCode">return value</param>
            <returns>null</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJobWorker.CreateWorkerFromXmlArguments(System.String)">
            <summary>
            Override this method in your subclass to create the worker.
            </summary>
            <param name="userArgs">arguments as xml passed in from the job framework</param>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.WstOPJob">
            <summary>
            This class implements the Job Coordinator for the Offline Processing backup job.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJob.Start(System.String,System.Int32,Microsoft.Webstore.JobEngine.BatchOption,Microsoft.Webstore.JobEngine.Location,System.String)">
            <summary>
            This is the Job Coordinator starting point routine for an OfflineProcessing job.
            </summary>
            <param name="jobName">name of the job, defined by the job description XML</param>
            <param name="dop">degree of parallelism, needs to be something really high</param>
            <param name="batchOption">doesn't matter since location must be ServerRole</param>
            <param name="location">must be ServerRole</param>
            <param name="userArguments">user arguments, should be XML conforming to schema and defined by the job description XML</param>
            <returns>return code, 0 indicates success</returns>
            <exception cref="T:System.Xml.XmlException">if userArguments is not a valid Xml document</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">if location type is not ServerRole</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJob.ValidateArgs(System.String)">
            <summary>
            This method performs validation of the user arguments at the JobCoordinator level.
            </summary>
            <param name="userArgs">arguments passed in from the user</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJob.GetWorkerType">
            <summary>
            Returns a type object for the worker to instantiate.
            </summary>
            <returns>type object describing the IJobStep worker</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJob.RunAsConsole(System.String[])">
            <summary>
            Call this to see if the application should run at the console.  It so it will see
            the first arg as "-console", the second arg as "-argfile", and the third arg will be
            the XML file to read for user args.
            </summary>
            <param name="args">commandline arguments</param>
            <returns>true if it was run as console, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJob.LogException(System.Exception)">
            <summary>
            This is called if an exception occurs from calling job.Run.  You can provide
            your own implementation in a subclass if you want to log any errors.
            </summary>
            <param name="ex">exception that was generatd, will be rethrown</param>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.QueueItem">
            <summary>
            This class represents a single backup record in the WstBackup database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.QueueItem.#ctor(System.Guid,System.Int16,System.String,System.Int32,System.Int32,System.Int32,System.DateTime,System.DateTime,System.DateTime,System.DateTime,System.String,System.String,System.String,System.Boolean,System.String,System.DateTime,System.DateTime)">
            <summary>
            Creates a new QueueItem.
            </summary>
            <param name="deploymentUid">guid of the deployment this queue item belongs to</param>
            <param name="fssNum">fssNum this item belongs to</param>
            <param name="ownerServer">name of the server that owns this item</param>
            <param name="iterationNumber">FSS iteration number this item belongs to</param>
            <param name="currentState">current state of the queue item</param>
            <param name="failureCount">current failure count of the queue item</param>
            <param name="created">time this item was created in UTC</param>
            <param name="expires">time this item expires in UTC</param>
            <param name="lastHeartbeat">the last heartbeat time of this item</param>
            <param name="enqueueTime">the time this item was added to the active queue</param>
            <param name="path">path (if exists) to the backup file on OwnerServer</param>
            <param name="deploymentManifestVersion">deployment manifest version of the backup record this queue item is for</param>
            <param name="restoredDatabaseName">name of the restored database for this item</param>
            <param name="usingLiteSpeed">whether or not the backup for this queue item was made using SQLLiteSpeed</param>
            <param name="backupFinishDate">date and time the backup finished</param>
            <param name="backupServer">server the backup was created on</param>
            <param name="backupStartDate">date and time the backup started</param>
            <exception cref="T:System.ArgumentNullException">if ownerServer, path, restoredDatabaseName, backupServer, or deploymentManifestVersion are null</exception>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.RestoredDatabaseName">
            <summary>
            The name of the database once it has been restored by OP.  May be empty if it hasn't been restored
            yet.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.DeploymentManifestVersion">
            <summary>
            The deployment manifest version of the backup record this queue item is for.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.Path">
            <summary>
            The path to the backup file on the offline processing server.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.DeploymentUid">
            <summary>
            The DeploymentUID of the deployment that this queue item belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.FSSNum">
            <summary>
            The SQLFSSNum of the FSS/deployment that this queue item belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.OwnerServer">
            <summary>
            The name of the server that currently owns this queue item, can be empty if not owned.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.IterationNumber">
            <summary>
            The iteration number, within this FSS/Deployment, of this queue item.  This
            is to enforce the uniqueness constraint that only a single queue item can
            exist at any time for a given FSS/Deployment pair.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.FailureCount">
            <summary>
            The number of times this queue item has been failed.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.CurrentState">
            <summary>
            The current state of this QueueItem.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.Created">
            <summary>
            The time this queue item was created.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.Expires">
            <summary>
            The time this queue item expires (can be in the past if it already expired).
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.LastHeartBeat">
            <summary>
            The time this queue item was last heartbeated.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.EnqueueTime">
            <summary>
            The time this queue item was last put into the queue (or bumped to the back
            if it was failed).
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.UsingLiteSpeed">
            <summary>
            Whether or not the backup for this item was made using Lite Speed.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.BackupServer">
            <summary>
            The server that generated the backup belonging to this queue item.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.BackupStartDate">
            <summary>
            The time the backup was started.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.BackupFinishDate">
            <summary>
            The time the backup for this queue item was finished.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.QueueItemSet">
            <summary>
            This class represents a set of backup records from the WstBackup database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.QueueItemSet.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Webstore.OfflineProcessing.QueueItem})">
            <summary>
            Constructor which takes an enumeration of records.
            </summary>
            <param name="newRecords">enumeration of records to initialize the set with</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.QueueItemSet.#ctor(Microsoft.Webstore.OfflineProcessing.QueueItem)">
            <summary>
            Constructor which takes a single record.
            </summary>
            <param name="newRecord">single record to initialize the set with</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.QueueItemSet.GetByServer(System.String,Microsoft.Webstore.OfflineProcessing.CommonDataAccess)">
            <summary>
            Retrieves the set of all backup records in WstBackup database for a given server.
            </summary>
            <param name="serverName">name of the server to retrieve QueueItems for</param>
            <param name="backupDb">backup database to use for retrieving the recordset</param>
            <returns>a set of QueueItems that are active on that server</returns>
            <exception cref="T:System.ArgumentNullException">if serverName or backupDb are null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on SQL error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on WSTClient exception</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.QueueItemSet.GetByPath(System.String)">
            <summary>
            Retrieves the QueueItem that has a particular filepath.
            </summary>
            <param name="filePath">path of item to retrieve</param>
            <returns>QueueItem that belongs to that filePath, null if not found</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.QueueItemSet.GetByRestoredDatabaseName(System.String)">
            <summary>
            Retrieves the QueueItem that has a particular restored database name.
            </summary>
            <param name="dbName">database name of the item to retrieve</param>
            <returns>QueueItem that belongs to the restored database name, null if not found</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.QueueItemSet.GetItemsByPath">
            <summary>
            Retrieves the items in the set, indexed by path.
            </summary>
            <returns>the items in this set, indexed by path</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.QueueItemSet.GetItemsByRestoredDbName">
            <summary>
            Retrieves the items in the set, indexed by restored Db name.
            </summary>
            <returns>the items in this set, indexed by restored db name</returns>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItemSet.Count">
            <summary>
            Number of records in this set.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItemSet.Item(System.Int32)">
            <summary>
            Indexor for the set.
            </summary>
            <param name="i">0-based index into the array</param>
            <returns>requested item in the array</returns>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.SqlBackupFile">
            <summary>
            This class represents a SQL backup file and contains methods to manipulate its contents.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.SqlBackupFile.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new SqlBackupFile object for a given filepath.
            </summary>
            <param name="filePath">path to the SqlBackupFile</param>
            <param name="useLiteSpeed">whether or not we should use LiteSpeed to process the backupfile</param>
            <exception cref="T:System.ArgumentNullException">if filePath is empty</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.SqlBackupFile.GetDatabaseName">
            <summary>
            Retrieves the original name of this database.
            </summary>
            <returns>original name of this database</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.SqlBackupFile.GetServerName">
            <summary>
            Retrieves the original server name this database was on.
            </summary>
            <returns>name of the server that generated this backup</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.SqlBackupFile.GetRestoredSizeInBytes">
            <summary>
            Retrieves the size of this backup, when restored, in bytes.
            </summary>
            <returns>size of the backup, when restored, in bytes</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.SqlBackupFile.ReadBackupFilelist">
            <summary>
            Reads in all the interesting contents from the backup.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.SqlBackupFile.ReadBackupHeader">
            <summary>
            Reads in all the interesting contents from the backup.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.SqlBackupFile.GetDataFiles">
            <summary>
            Returns an enumeration of all logical data file names in the backup.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.SqlBackupFile.GetLogFiles">
            <summary>
            Returns an enumeration of all logical log file names in the backup.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.SqlBackupFile.FilePath">
            <summary>
            The filepath of this backup file.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.CommonJobCategoryInstaller">
            <summary>
            Category installer for the CommonJob event source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobCategoryInstaller.EventSource">
            <summary>
            The event source for which to install the category strings.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.CommonJobEvents">
            <summary>
            Events in the CommonJob module.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.log">
            <summary>
            MSN Runtime's event logger 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.#ctor">
            <summary>
            Private constructor prevents instantiation.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.SqlErrorValue">
            <summary>
            EventDefinition for SqlError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogSqlError(System.String,System.String)">
            <summary>
            Method to log an event of type SqlError.
            </summary>
            <param name="sqlStr">Argument sqlStr for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogSqlError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type SqlError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="sqlStr">Argument sqlStr for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.WstErrorValue">
            <summary>
            EventDefinition for WstError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogWstError(System.String,System.String)">
            <summary>
            Method to log an event of type WstError.
            </summary>
            <param name="sqlStr">Argument sqlStr for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogWstError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type WstError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="sqlStr">Argument sqlStr for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.DatabaseErrorValue">
            <summary>
            EventDefinition for DatabaseError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogDatabaseError(System.String,System.String)">
            <summary>
            Method to log an event of type DatabaseError.
            </summary>
            <param name="sqlStr">Argument sqlStr for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogDatabaseError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type DatabaseError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="sqlStr">Argument sqlStr for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.HeartbeatErrorValue">
            <summary>
            EventDefinition for HeartbeatError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogHeartbeatError(System.String,System.String)">
            <summary>
            Method to log an event of type HeartbeatError.
            </summary>
            <param name="item">Argument item for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogHeartbeatError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type HeartbeatError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="item">Argument item for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.GetDeploymentErrorValue">
            <summary>
            EventDefinition for GetDeploymentError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogGetDeploymentError(System.String,System.String)">
            <summary>
            Method to log an event of type GetDeploymentError.
            </summary>
            <param name="deploymentGuid">Argument deploymentGuid for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogGetDeploymentError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type GetDeploymentError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="deploymentGuid">Argument deploymentGuid for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.CreateNewQueueItemErrorValue">
            <summary>
            EventDefinition for CreateNewQueueItemError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogCreateNewQueueItemError(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Method to log an event of type CreateNewQueueItemError.
            </summary>
            <param name="backupRecord">Argument backupRecord for formatting the event text.</param>
            <param name="ownerServer">Argument ownerServer for formatting the event text.</param>
            <param name="expires">Argument expires for formatting the event text.</param>
            <param name="backupPath">Argument backupPath for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogCreateNewQueueItemError(System.String,System.String,System.String,System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type CreateNewQueueItemError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="backupRecord">Argument backupRecord for formatting the event text.</param>
            <param name="ownerServer">Argument ownerServer for formatting the event text.</param>
            <param name="expires">Argument expires for formatting the event text.</param>
            <param name="backupPath">Argument backupPath for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.GetTransferringItemErrorValue">
            <summary>
            EventDefinition for GetTransferringItemError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogGetTransferringItemError(System.String,System.String,System.String)">
            <summary>
            Method to log an event of type GetTransferringItemError.
            </summary>
            <param name="backupRecord">Argument backupRecord for formatting the event text.</param>
            <param name="ownerServer">Argument ownerServer for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogGetTransferringItemError(System.String,System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type GetTransferringItemError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="backupRecord">Argument backupRecord for formatting the event text.</param>
            <param name="ownerServer">Argument ownerServer for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.ReclaimQueueItemErrorValue">
            <summary>
            EventDefinition for ReclaimQueueItemError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogReclaimQueueItemError(System.String,System.String)">
            <summary>
            Method to log an event of type ReclaimQueueItemError.
            </summary>
            <param name="backupRecord">Argument backupRecord for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogReclaimQueueItemError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type ReclaimQueueItemError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="backupRecord">Argument backupRecord for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.UpdateAllHeartbeatsErrorValue">
            <summary>
            EventDefinition for UpdateAllHeartbeatsError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogUpdateAllHeartbeatsError(System.String,System.String)">
            <summary>
            Method to log an event of type UpdateAllHeartbeatsError.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogUpdateAllHeartbeatsError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type UpdateAllHeartbeatsError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.UpdateQueueStateErrorValue">
            <summary>
            EventDefinition for UpdateQueueStateError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogUpdateQueueStateError(System.String,System.String,System.String)">
            <summary>
            Method to log an event of type UpdateQueueStateError.
            </summary>
            <param name="item">Argument item for formatting the event text.</param>
            <param name="state">Argument state for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogUpdateQueueStateError(System.String,System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type UpdateQueueStateError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="item">Argument item for formatting the event text.</param>
            <param name="state">Argument state for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.FailQueueItemErrorValue">
            <summary>
            EventDefinition for FailQueueItemError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogFailQueueItemError(System.String,System.String)">
            <summary>
            Method to log an event of type FailQueueItemError.
            </summary>
            <param name="item">Argument item for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogFailQueueItemError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type FailQueueItemError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="item">Argument item for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.RestoreQueueItemErrorValue">
            <summary>
            EventDefinition for RestoreQueueItemError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogRestoreQueueItemError(System.String,System.String,System.String,System.String)">
            <summary>
            Method to log an event of type RestoreQueueItemError.
            </summary>
            <param name="item">Argument item for formatting the event text.</param>
            <param name="restoreJobId">Argument restoreJobId for formatting the event text.</param>
            <param name="restoredDatabaseName">Argument restoredDatabaseName for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogRestoreQueueItemError(System.String,System.String,System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type RestoreQueueItemError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="item">Argument item for formatting the event text.</param>
            <param name="restoreJobId">Argument restoreJobId for formatting the event text.</param>
            <param name="restoredDatabaseName">Argument restoredDatabaseName for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.FinishQueueItemErrorValue">
            <summary>
            EventDefinition for FinishQueueItemError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogFinishQueueItemError(System.String,System.String)">
            <summary>
            Method to log an event of type FinishQueueItemError.
            </summary>
            <param name="item">Argument item for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogFinishQueueItemError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type FinishQueueItemError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="item">Argument item for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.EventLogger">
            <summary>
            Gets the EventLogger used to report events from this source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.EventSource">
            <summary>
            Gets the event source for events defined in this module.
            </summary>
            <value>
            The event source for events defined in this module.
            </value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.SqlError">
            <summary>
              Gets the EventDefinition for the SqlError.
            </summary>
            <value>The EventDefinition for the SqlError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.WstError">
            <summary>
              Gets the EventDefinition for the WstError.
            </summary>
            <value>The EventDefinition for the WstError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.DatabaseError">
            <summary>
              Gets the EventDefinition for the DatabaseError.
            </summary>
            <value>The EventDefinition for the DatabaseError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.HeartbeatError">
            <summary>
              Gets the EventDefinition for the HeartbeatError.
            </summary>
            <value>The EventDefinition for the HeartbeatError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.GetDeploymentError">
            <summary>
              Gets the EventDefinition for the GetDeploymentError.
            </summary>
            <value>The EventDefinition for the GetDeploymentError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.CreateNewQueueItemError">
            <summary>
              Gets the EventDefinition for the CreateNewQueueItemError.
            </summary>
            <value>The EventDefinition for the CreateNewQueueItemError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.GetTransferringItemError">
            <summary>
              Gets the EventDefinition for the GetTransferringItemError.
            </summary>
            <value>The EventDefinition for the GetTransferringItemError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.ReclaimQueueItemError">
            <summary>
              Gets the EventDefinition for the ReclaimQueueItemError.
            </summary>
            <value>The EventDefinition for the ReclaimQueueItemError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.UpdateAllHeartbeatsError">
            <summary>
              Gets the EventDefinition for the UpdateAllHeartbeatsError.
            </summary>
            <value>The EventDefinition for the UpdateAllHeartbeatsError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.UpdateQueueStateError">
            <summary>
              Gets the EventDefinition for the UpdateQueueStateError.
            </summary>
            <value>The EventDefinition for the UpdateQueueStateError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.FailQueueItemError">
            <summary>
              Gets the EventDefinition for the FailQueueItemError.
            </summary>
            <value>The EventDefinition for the FailQueueItemError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.RestoreQueueItemError">
            <summary>
              Gets the EventDefinition for the RestoreQueueItemError.
            </summary>
            <value>The EventDefinition for the RestoreQueueItemError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.FinishQueueItemError">
            <summary>
              Gets the EventDefinition for the FinishQueueItemError.
            </summary>
            <value>The EventDefinition for the FinishQueueItemError</value>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.Heartbeater">
            <summary>
            This class performs periodic heartbeating of an item.  It's just a light wrapper around
            CommonDataAccess.HeartBeat.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.Heartbeater.#ctor(Microsoft.Webstore.OfflineProcessing.QueueItem,Microsoft.Webstore.OfflineProcessing.CommonDataAccess)">
            <summary>
            Constructor
            </summary>
            <param name="itemToHeartbeat">item to heartbeat</param>
            <param name="db">database to use for heartbeating</param>
            <exception cref="T:System.ArgumentNullException">if itemToHeartbeat or db are null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.Heartbeater.DoHeartbeat">
            <summary>
            Heartbeats the item.
            </summary>
            <returns>true if heartbeat was successful</returns>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.ProcessDatabaseWorker">
            <summary>
            This class handles the long-running synchronous work item of processing
            a restored database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.ProcessDatabaseWorker.#ctor(Microsoft.Webstore.OfflineProcessing.RestoredDatabase,Microsoft.Webstore.OfflineProcessing.DeploymentRecord,System.Collections.Generic.IEnumerable{Microsoft.Webstore.OfflineProcessing.DeploymentSproc})">
            <summary>
            Constructor
            </summary>
            <param name="dbToProcess">database to process</param>
            <param name="deployment">record of the deployment</param>
            <param name="sprocsToExecute">sprocs to execute</param>
            <exception cref="T:System.ArgumentNullException">if dbToProcess, deployment, dbToProcess.Item, or sprocsToExecute are null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.ProcessDatabaseWorker.Run">
            <summary>
            This performs the synchronous restore operation.  Returns true if processing
            continues to the end, false if it was cancelled midway through.  Throws exceptions
            from RestoredDatabase.Process.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.ProcessDatabaseWorker.Cancel">
            <summary>
            Cancel routine.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.RestoreDatabaseWorker">
            <summary>
            This is the worker that performs the restore operation.  It's just a light wrapper
            around RestoredDatabase.Restore and RestoredDatabase.Cancel.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreDatabaseWorker.#ctor(Microsoft.Webstore.OfflineProcessing.RestoredDatabase,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="dbToRestore">database to be restored</param>
            <param name="backupFileLocation">location of the backup file to restore from</param>
            <param name="dataPath">path to put new data files in</param>
            <param name="logPath">path to put new log files in</param>
            <param name="usingLiteSpeed">whether or not to use SQLLiteSpeed</param>
            <exception cref="T:System.ArgumentNullException">if dbToRestore, backupFileLocatin, dataPath, or logPath are null</exception>
            <exception cref="T:System.ArgumentException">if backupFileLocation, dataPath, or logPath do not exist</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreDatabaseWorker.Run">
            <summary>
            Implements the restore functionality, called from a different thread.
            </summary>
            <returns>true always</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreDatabaseWorker.Cancel">
            <summary>
            Cancels the ongoing restore.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.RestoredDatabase">
            <summary>
            This class represents a database that has been restored on an offline processing machine.
            This class needs to know quite a bit about the "rules" for creating database identifiers
            since it needs to create new database names.  The rules for compat level 90 in SQL for
            identifiers (database names qualify as identifiers) are as follows:
             - the first character must be [A-Za-z_@#]
             - subsequent characters must be [A-Za-z_$#@]
             - cannot be a reserved word
             - embedded spaces not allowed
             - 1 to 128 characters
             
            A note on CancelProcess and CancelRestore:
            These are only mostly threadsafe.  An extremely narrow window exists where we could have
            created the new command object and assigned it to .Command in the thread executing Process/Restore,
            but not actually have called SqlCommand.ExecuteNOnQuery, and if we task switched away
            at exactly this split second and another thread called CancelProcess or CancelRestore at
            that exact second then would end up cancelling the SqlCommand before it was executed,
            which is a no-op (I checked this with a quick test), which would mean that the operation
            would not actually get cancelled.
            
            The fact that there is the potential for race condition is mitigated by the fact that
            CancelProcess and CancelRestore are always called from within HeartbeatingWorker.CancelAbort
            which first calls Cancel, then waits 100ms, and if the thread hasn't terminated, it calls
            Thread.Abort.  So in practice even if we hit this really rare race condition it will just
            result in the thread exiting a bit late due to ThreadAbort and maybe the exception message
            looking a bit cryptic.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.RestoredDatabase.namePrepend">
            <summary>
            This string will be the first part of the name of any database that was generated
            as part of offline processing.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.RestoredDatabase.syncObject">
            <summary>
            This lock is used to guarantee that access to the command object
            is wrapped by checks to wasCancelled.  Used for locking short-term
            access to command.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.RestoredDatabase.usingCommand">
            <summary>
            Whether or not we are currently using the command.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoredDatabase.Drop">
            <summary>
            Attempts to drop the database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoredDatabase.Restore(Microsoft.Webstore.OfflineProcessing.SqlBackupFile,System.String,System.String,System.Boolean)">
            <summary>
            Performs a restore on the database.
            </summary>
            <param name="backupFile">name and path of the backup file to restore</param>
            <param name="dataFilePath">path to place data files in</param>
            <param name="logFilePath">path to place log files in</param>
            <param name="usingLiteSpeed">whether or not to use SQLLiteSpeed for the restore</param>
            <exception cref="T:System.ArgumentNullException">if backupFile, dataFilePath, or logFilePath are null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:System.ArgumentException">if a restore command is already in progress</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoredDatabase.Process(Microsoft.Webstore.OfflineProcessing.DeploymentSproc,System.Guid,System.Int16,System.String,System.String,System.String,System.DateTime)">
            <summary>
            Performs processing on the database.
            </summary>
            <param name="deploymentName">name of the deployment</param>
            <param name="backupDate">date the backup was finished</param>
            <param name="clientName">name of the client (product) that owns the deployment</param>
            <param name="serverName">server the backup was generated on</param>
            <param name="deploymentUid">UID of the deployment</param>
            <param name="fssNum">fssNum of the backup</param>
            <param name="sproc">sproc to execute</param>
            <exception cref="T:System.ArgumentNullException">if sproc, deploymentName, clientName, serverName, or sproc.CommandText are null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:System.ArgumentException">if processing is already in progress</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoredDatabase.CancelRestore">
            <summary>
            Cancels an ongoing restore.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoredDatabase.CancelProcess">
            <summary>
            Cancels an ongoing process.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoredDatabase.CancelSql">
            <summary>
            Cancels whatever SQL is currently running.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoredDatabase.CreateRestoreCommand(Microsoft.Webstore.OfflineProcessing.SqlBackupFile,System.String,System.String,System.Boolean)">
            <summary>
            Creates the restore TSQL command.
            </summary>
            <param name="backupFile">backup to use for the restore</param>
            <param name="dataFilePath">path to the dataFiles</param>
            <param name="logFilePath">path to log files</param>
            <param name="usingLiteSpeed">whether or not to use LiteSpeed</param>
            <returns>TSQL restore command</returns>
            <exception cref="T:System.ArgumentNullException">if backupfile, datafilePath, or logFilePath are null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoredDatabase.GenerateName(System.String,System.String)">
            <summary>
            Generates a new database name, given its serverName and dbName.
            </summary>
            <param name="serverName">name of the server that the database originally lived on</param>
            <param name="dbName">original name of the database</param>
            <returns>a new database name, might not be unique</returns>
            <exception cref="T:System.ArgumentNullException">if serverName or dbName are null</exception>
            <exception cref="T:System.ArgumentException">if the resulting name violates sql naming conventions</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoredDatabase.GenerateName(System.String)">
            <summary>
            Generates a new database name, given its dbName.
            </summary>
            <param name="dbName">original name of the database</param>
            <returns>a new database name, guaranteed to be unique</returns>
            <exception cref="T:System.ArgumentNullException">if dbName is null</exception>
            <exception cref="T:System.ArgumentException">if the resulting name violates sql naming conventions</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoredDatabase.ValidateDatabaseName(System.String)">
            <summary>
            Validates whether or not a database name is valid.
            </summary>
            <param name="dbName">name of the database to validate</param>
            <exception cref="T:System.ArgumentException">if dbName does not validate</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoredDatabase.#ctor(System.String,System.String)">
            <summary>
            Constructor for internal use.
            </summary>
            <param name="dbName">name of the database, must start with _op_</param>
            <param name="serverName">name of the server this database is on</param>
            <exception cref="T:System.ArgumentNullException">if dbName or serverName are null</exception>
            <exception cref="T:System.ArgumentException">if dbName does not start with namePrepend</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoredDatabase.GetForServer(System.String)">
            <summary>
            Retrieves the list of restored database at a particular point in time on a particular
            server.  This list is generated by doing string matching for database names starting
            with RestoredDatabase.namePrepend.
            </summary>
            <param name="serverName">name of the server to retrieve RestoredDatabases for</param>
            <returns>a list (may be empty, never null) of restored databases</returns>
            <exception cref="T:System.ArgumentNullException">if serverName is null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoredDatabase.BuildMasterConnectionString(System.String)">
            <summary>
            Builds the connection string to use for the SqlConnection.
            </summary>
            <param name="serverName">name of the server to connect to</param>
            <returns>connection string</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoredDatabase.BuildConnectionString">
            <summary>
            Builds the connection string to use for a SqlConnection to the restored
            database.
            </summary>
            <returns>connection string</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoredDatabase.GetNewDataFileName">
            <summary>
            Generates a new data file name, unique to this database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoredDatabase.GetNewLogFileName">
            <summary>
            Generates a new log file name, unique to this database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoredDatabase.GetNewFileName(System.Int32,System.String)">
            <summary>
            Helper function for generating new files names, unique to this database.
            </summary>
            <param name="index"></param>
            <param name="extension"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoredDatabase.Name">
            <summary>
            The Name of the database.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoredDatabase.ServerName">
            <summary>
            The name of the server this database exists on.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoredDatabase.Item">
            <summary>
            The QueueItem associated with this database.  Can be null.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoredDatabase.Command">
            <summary>
            Use this property for accessing the internal SqlCommand object
            for use in the process or restore command.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoredDatabase.UsingCommand">
            <summary>
            Controls whether or not we are currently using the command object.
            Attempting to use the command object twice at the same time results
            in an exception.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.WstRestoreJobWorker">
            <summary>
            This class implements the job worker for the Offline Processing restore job.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.WstRestoreJob">
            <summary>
            This class implements the Job Coordinator for the Offline Processing restore job.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstRestoreJob.ValidateArgs(System.String)">
            <summary>
            All we do is make sure the RestoreJobArguments can be created.  We don't
            validate the path at this stage because we are the coordinator and who
            knows if the path will be valid on the worker machines?
            </summary>
            <param name="userArgs">arguments conforming to RestoreJobArgumentsSchema.xsd</param>
            <exception cref="T:System.Xml.XmlException">if userArgs cannot be validated or are missing components</exception>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.RestoreJobArguments">
            <summary>
            This class represents the arguments passed to the restore job.  It also contains the logic
            for parsing the arguments from XML.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreJobArguments.CreateFromXML(System.String)">
            <summary>
            This method parses a string containing xml conforming to RestoreJobArgumentsSchema.xsd
            and returns a new RestoreJobArguments object populated with the parsed values.
            </summary>
            <param name="argumentsAsXml">string containing xml conforming to RestoreJobArgumentsSchema.xsd</param>
            <returns>newly created RestoreJobArguments from the xml</returns>
            <exception cref="T:System.ArgumentNullException">if argumentsAsXml is null</exception>
            <exception cref="T:System.Xml.XmlException">if argumentsAsXml is not a valid Xml document, if any required nodes cannot be found in the XML, or if any arguments are out of range</exception>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoreJobArguments.DataPath">
            <summary>
            The path where data files should be restored.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoreJobArguments.LogPath">
            <summary>
            The path where log files should be restored.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoreJobArguments.JobId">
            <summary>
            The jobId for this job.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.RestoreJobResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoreJobResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoreJobResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoreJobResources.RestoreJobArgumentsSchema">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
            &lt;xs:schema id=&quot;CollectorJobArguments&quot;
                targetNamespace=&quot;urn:CollectorJobArgumentsSchema.xsd&quot;
                elementFormDefault=&quot;qualified&quot;
                xmlns=&quot;urn:CollectorJobArgumentsSchema.xsd&quot;
                xmlns:mstns=&quot;urn:CollectorJobArgumentsSchema.xsd&quot;
                xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;
            &gt;
              &lt;xs:element name=&quot;CollectorJobSettings&quot;&gt;
                &lt;xs:annotation&gt;
                  &lt;xs:documentation&gt;The parent element for offline processing collector job settings.&lt;/xs:documentation&gt;
                &lt;/x [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreJobWorker.CreateFromXmlArguments(System.String)">
            <summary>
            Creates a new job worker from xml arguments.
            </summary>
            <param name="xmlArgs">arguments in xml conforming to RestoreJobArgumentsSchema.xsd</param>
            <returns>newly created CollectorJobWorker</returns>
            <exception cref="T:System.Xml.XmlException">if xml fails to validate</exception>
            <exception cref="T:System.ArgumentNullException">if xmlArgs is null</exception>
            <exception cref="T:System.IO.IOException">if backup directory cannot be created</exception>
            <exception cref="T:System.NotSupportedException">if backup directory is not a recognizable path</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreJobWorker.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Internal constructor, instead use CreateFromXmlArguments since that performs validation.
            </summary>
            <param name="dataPath">path for this worker to use for storing data files, can't be null</param>
            <param name="logPath">path for this worker to use for storing log files, can't be null</param>
            <param name="jobId">unique id of the Job (not a hard requirement that its unique)</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreJobWorker.DoIteration(System.Boolean)">
            <summary>
            Performs one iteration of the service.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreJobWorker.TryRestoreDatabase(Microsoft.Webstore.OfflineProcessing.RestoredDatabase,Microsoft.Webstore.OfflineProcessing.CommonDataAccess)">
            <summary>
            Performs a restore (while heartbeating) of a database.
            </summary>
            <param name="dbToRestore">database to restore</param>
            <param name="backupDb">database to heartbeat</param>
            <returns>true if restoration was successful</returns>
            <exception cref="T:System.ArgumentNullException">if dbToRestore, backupDb, or dbToRestore.Item are null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on heartbeat database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on heartbeat webstore error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreJobWorker.TryProcessingDatabase(Microsoft.Webstore.OfflineProcessing.RestoredDatabase,Microsoft.Webstore.OfflineProcessing.CommonDataAccess)">
            <summary>
            Performs processing (while heartbeating) of a database.
            </summary>
            <param name="dbToProcess">database to process</param>
            <param name="backupDb">database to heartbeat</param>
            <returns>true if processing was successful</returns>
            <exception cref="T:System.ArgumentNullException">if dbToProcess, backupDb, or dbToProcess.Item are null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on heartbeat database error, or exception getting DeploymentRecord</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on heartbeat webstore error, or exception getting DeploymentRecord</exception>
            <exception cref="T:System.Data.DataException">if Deployment does not exist in the database</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreJobWorker.GetItemToRestore(Microsoft.Webstore.OfflineProcessing.QueueItemSet,Microsoft.Webstore.OfflineProcessing.CommonDataAccess)">
            <summary>
            Retrieves the QueueItem to restore and transitions its state in the database to
            "restoring".  Returns null if there is no item to restore.  In order for an item
            to be restorable, the following criteria must be met:
            - restore size in MB must fit on our disk
            - state of the item must be "WaitingForRestore"
            - and OwnerServer must be our server
            </summary>
            <param name="ourItems">list of all QueueItems assigned to our server</param>
            <param name="db">WstBackup database object</param>
            <returns>new RestoredDatabase object if successful, null otherwise</returns>
            <exception cref="T:System.ArgumentNullException">if ourItems or db are null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreJobWorker.TryClaimItemForRestore(Microsoft.Webstore.OfflineProcessing.QueueItem,Microsoft.Webstore.OfflineProcessing.CommonDataAccess)">
            <summary>
            Attempts to claim and item for restore.  The item can only be claimed for
            restore if the following criteria are met:
            - restore size in MB must fit on our disk
            - WspQueueRestore must succeed
            </summary>
            <param name="item">item to try claiming</param>
            <param name="db">WstBackup database</param>
            <returns>new RestoredDatabase object if successful, null otherwise</returns>
            <exception cref="T:System.ArgumentNullException">if item or db are null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreJobWorker.TryCleanupRestoredDatabase(Microsoft.Webstore.OfflineProcessing.RestoredDatabase,Microsoft.Webstore.OfflineProcessing.QueueItemSet)">
            <summary>
            This function attempts to clean up a restored database on our server.  It will
            delete any database that isn't currently assigned to our server in the
            "Being restored" or "Being processed" state.
            </summary>
            <param name="db">database to try cleaning up</param>
            <param name="ourItems">set of queue items active for our server</param>
            <returns>true if the database was deleted</returns>
            <exception cref="T:System.ArgumentNullException">if db or ourItems is null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreJobWorker.GetSleepTimeInMS">
            <summary>
            Retrieves the number of milliseconds that the job should sleep between iterations.
            </summary>
            <returns>number of milliseconds the job should sleep between iterations</returns>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoreJobWorker.DataPath">
            <summary>
            Retrieves the restore path for data files as defined by the user arguments.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoreJobWorker.LogPath">
            <summary>
            Retrieves the restore path for log files as defined by the user arguments.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoreJobWorker.HeartbeatIntervalInMinutes">
            <summary>
            Interval in minutes between heartbeating items we own.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoreJobWorker.JobId">
            <summary>
            Unique ID of this job (with respect to this machine).
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoreJobWorker.FreeSpaceCalculator">
            <summary>
            The free space calculator to use (intended only for testing purposes).
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.RestoreJobCategoryInstaller">
            <summary>
            Category installer for the RestoreJob event source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoreJobCategoryInstaller.EventSource">
            <summary>
            The event source for which to install the category strings.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents">
            <summary>
            Events in the RestoreJob module.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.log">
            <summary>
            MSN Runtime's event logger 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.#ctor">
            <summary>
            Private constructor prevents instantiation.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.JobCoordinatorErrorValue">
            <summary>
            EventDefinition for JobCoordinatorError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.LogJobCoordinatorError(System.String)">
            <summary>
            Method to log an event of type JobCoordinatorError.
            </summary>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.LogJobCoordinatorError(System.String,System.Exception)">
            <summary>
            Method to log an event of type JobCoordinatorError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.UserArgumentsErrorValue">
            <summary>
            EventDefinition for UserArgumentsError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.LogUserArgumentsError(System.String)">
            <summary>
            Method to log an event of type UserArgumentsError.
            </summary>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.LogUserArgumentsError(System.String,System.Exception)">
            <summary>
            Method to log an event of type UserArgumentsError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.JobArgumentsErrorValue">
            <summary>
            EventDefinition for JobArgumentsError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.LogJobArgumentsError(System.String)">
            <summary>
            Method to log an event of type JobArgumentsError.
            </summary>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.LogJobArgumentsError(System.String,System.Exception)">
            <summary>
            Method to log an event of type JobArgumentsError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.JobExecutionErrorValue">
            <summary>
            EventDefinition for JobExecutionError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.LogJobExecutionError(System.String)">
            <summary>
            Method to log an event of type JobExecutionError.
            </summary>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.LogJobExecutionError(System.String,System.Exception)">
            <summary>
            Method to log an event of type JobExecutionError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.DropDatabaseErrorValue">
            <summary>
            EventDefinition for DropDatabaseError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.LogDropDatabaseError(System.String,System.String)">
            <summary>
            Method to log an event of type DropDatabaseError.
            </summary>
            <param name="restoredDatabase">Argument restoredDatabase for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.LogDropDatabaseError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type DropDatabaseError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="restoredDatabase">Argument restoredDatabase for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.RestoreDatabaseErrorValue">
            <summary>
            EventDefinition for RestoreDatabaseError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.LogRestoreDatabaseError(System.String,System.String)">
            <summary>
            Method to log an event of type RestoreDatabaseError.
            </summary>
            <param name="restoredDatabase">Argument restoredDatabase for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.LogRestoreDatabaseError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type RestoreDatabaseError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="restoredDatabase">Argument restoredDatabase for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.ProcessDatabaseErrorValue">
            <summary>
            EventDefinition for ProcessDatabaseError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.LogProcessDatabaseError(System.String,System.String)">
            <summary>
            Method to log an event of type ProcessDatabaseError.
            </summary>
            <param name="processDatabase">Argument processDatabase for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.LogProcessDatabaseError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type ProcessDatabaseError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="processDatabase">Argument processDatabase for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.EventLogger">
            <summary>
            Gets the EventLogger used to report events from this source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.EventSource">
            <summary>
            Gets the event source for events defined in this module.
            </summary>
            <value>
            The event source for events defined in this module.
            </value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.JobCoordinatorError">
            <summary>
              Gets the EventDefinition for the JobCoordinatorError.
            </summary>
            <value>The EventDefinition for the JobCoordinatorError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.UserArgumentsError">
            <summary>
              Gets the EventDefinition for the UserArgumentsError.
            </summary>
            <value>The EventDefinition for the UserArgumentsError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.JobArgumentsError">
            <summary>
              Gets the EventDefinition for the JobArgumentsError.
            </summary>
            <value>The EventDefinition for the JobArgumentsError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.JobExecutionError">
            <summary>
              Gets the EventDefinition for the JobExecutionError.
            </summary>
            <value>The EventDefinition for the JobExecutionError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.DropDatabaseError">
            <summary>
              Gets the EventDefinition for the DropDatabaseError.
            </summary>
            <value>The EventDefinition for the DropDatabaseError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.RestoreDatabaseError">
            <summary>
              Gets the EventDefinition for the RestoreDatabaseError.
            </summary>
            <value>The EventDefinition for the RestoreDatabaseError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.ProcessDatabaseError">
            <summary>
              Gets the EventDefinition for the ProcessDatabaseError.
            </summary>
            <value>The EventDefinition for the ProcessDatabaseError</value>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK\release\doc\AsyncInterface.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AsyncInterface</name>
    </assembly>
    <members>
        <member name="T:Microsoft.MSN.MSNCache.Common.CacheConfigurationManager">
            <summary>
            methods for managing settings
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Common.CacheConfigurationManager.DefaultPort">
            <summary>
            default port
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheConfigurationManager.GetInitializedConfiguration">
            <summary>
            initializes configuration if it hasn't been initialized before
            return configuration object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheConfigurationManager.SafeConfigurationChange(Microsoft.MSN.MSNCache.Asynchronous.ICacheConfiguration)">
            <summary>
            attempts to replace configuration value, in case of failure doesn't throw exception
            </summary>
            <returns>false if new configuration value cannot be set, i.e. due to failed validation</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheConfigurationManager.Initialize">
            <summary>
            Initializes configuration if it has not already been set. We do this rather than use
            a static initializer primarily because if the configuration setup throws an exception you
            get a rather obscure exception thrown back. This way it should be clearer whats going on
            if something throws.
            
            Three configuration options exist: 
            1) user can pass explicit object that implements ICacheConfiguration interface
            2) if no such object was found, use centralized settings
            3) if centralized settings cannot be used for any reason fallback to default configuration
            </summary>
            <returns>true if initialization has been performed in theis invocation</returns>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.CacheConstants">
            <summary>
            This class contains the constants used for WstCache (client and/or server).
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Common.CacheConstants.WstConnectionString">
            <summary>
            Deployment name to use for the cache database.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Common.CacheConstants.TraceSwitchDisplayName">
            <summary>
            Display name to use for MSNCacheManager tracing.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Common.CacheConstants.TraceSwitchDescription">
            <summary>
            Description to use for MSNCacheManager tracing.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Common.CacheConstants.TraceSourceServer">
            <summary>
            Default tracing source for MSNCacheManager.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Common.CacheConstants.CacheServiceName">
            <summary>
            The name of the service as we install it on a machine.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Common.CacheConstants.VeryOldDate">
            <summary>
            old date, older than any date expected to exist in DB
            used to initialize various components
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.CacheDb">
            <summary>
            This class provides access to the functionality of the cache database.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheDb.ClearStaticConfigs">
            <summary>
            Deletes all static config rows from the database.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheDb.CleanDatabase">
            <summary>
            Invokes the proc WspCleanDatabase which deletes everything
            from the database except static configs.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheDb.ExecuteQuery(Microsoft.MSN.MSNCache.Common.CacheDb.WstCommandCreator,Microsoft.MSN.MSNCache.Common.CacheDb.DataRowHandler)">
            <summary>
            Execute command and apply DataRowHandler processing to each row
            </summary>
            <param name="commandCreator"></param>
            <param name="handler"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheDb.UpdateBanks(Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Banks)">
            <summary>
            This method updates the banks from the database.  Will log the buckets that changed.
            </summary>
            <param name="previousBanks">previous version of banks, not required</param>
            <returns>newly created Banks object</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheDb.AdjustBanksAndBucketCounts(Microsoft.Webstore.WstClient.WstDataReader,Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Banks,System.Boolean@)">
            <summary>
            Adjust bank information in the client mapping table to match database
            </summary>
            <param name="rdr"></param>
            <param name="banks"></param>
            <param name="changeDetected"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheDb.GetConnection">
            <summary>
            Retrieves the connection to use for the cache database.
            </summary>
            <returns>a WstConnection object</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheDb.GetCommand(Microsoft.Webstore.WstClient.WstConnection)">
            <summary>
            create command with default characteristics
            </summary>
            <param name="conn"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheDb.AddParameter(Microsoft.Webstore.WstClient.WstCommand,System.String,System.Data.SqlDbType,System.Object)">
            <summary>
            create parameter of given type
            </summary>
            <param name="cmd"></param>
            <param name="parameterName"></param>
            <param name="type"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheDb.AddParameter(Microsoft.Webstore.WstClient.WstCommand,System.String,System.String)">
            <summary>
            add parameter 
            </summary>
            <param name="command"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheDb.AddParameter(Microsoft.Webstore.WstClient.WstCommand,System.String,System.Int32)">
            <summary>
            add parameter 
            </summary>
            <param name="command"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheDb.AddParameter(Microsoft.Webstore.WstClient.WstCommand,System.String,System.DateTime)">
            <summary>
            add parameter 
            </summary>
            <param name="command"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheDb.GetHostStatusUpdateCommand(Microsoft.Webstore.WstClient.WstConnection,System.String,System.Boolean,System.DateTime,System.DateTime)">
            <summary>
            generate command for updating host status in db (the heartbeat command)
            </summary>
            <param name="connection"></param>
            <param name="hostName"></param>
            <param name="configurationChanged"></param>
            <param name="hostVersion"></param>
            <param name="bucketVersion"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.CacheDb.DataRowHandler">
            <summary>
            method that processes single data row
            </summary>
            <param name="rdr"></param>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.CacheDb.WstCommandCreator">
            <summary>
            method that creates WstCommand 
            </summary>
            <param name="conn"></param>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.CacheSettings">
            <summary>
            This class implements cache configuration based on centralized settings
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.ICacheConfiguration">
            <summary>
            Represents the configuration options available to clients of the cache.
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.ICacheConfiguration.Port">
            <summary>
            The destination TCP port number to use when connecting to cache servers.
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.ICacheConfiguration.PollingIntervalSeconds">
            <summary>
            The amount of time between successive polls of Cache DB, in seconds.
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.ICacheConfiguration.RequestTimeoutMilliseconds">
            <summary>
            The maximum amount of time to wait on an outgoing request before timing out.
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.ICacheConfiguration.DefaultBank">
            <summary>
            The default Bank to use when calling GetCache.
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.ICacheConfiguration.DefaultLogicalCache">
            <summary>
            The default logical cache to use when calling GetCache.
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.ICacheConfiguration.ThrottleLimit">
            <summary>
            The maximum number of requests that can pile up in the unsent queue to a particular host before
            new requests for this host are rejected.  
            This should be seen as safety valve that prevents memory overflow, when a particular 
            host can’t process requests at the rate they are generated by the client
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.ICacheConfiguration.DenylistDurationSeconds">
            <summary>
            The duration of time (in seconds) that a host will stay on the denylist, once it
            has been denylisted.
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.ICacheConfiguration.MappingTableValidTimeSeconds">
            <summary>
            The maximum amount of time the mapping table (as read from Cache DB) can go between refreshes
            before it is considered invalid.
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.ICacheConfiguration.HostHeartbeatSeconds">
            <summary>
            How frequently cache host must update its status
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.ICacheConfiguration.HostHeartbeatExpirationSeconds">
            <summary>
            How long to wait after last heartbeat to declare that is host dead
            This value must be greater than HostHeartbeatSeconds
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheSettings.GetConfiguration">
            <summary>
            get configuration based on centralized settings
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheSettings.GetIntValue(System.String,System.Int32)">
            <summary>
            returns value of integer property, or default value if centralized setting doesn't exist
            throws FormatException if property is not a positive integer
            </summary>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheSettings.ConfigurationChange(System.Object,Microsoft.Webstore.MetaData.WebstoreEventArgs)">
            <summary>
            Delegate for the SettingsChanged event
            </summary>
            <param name="src"></param>
            <param name="args"></param>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.CacheSettings.Port">
            <summary>
            User supplied value is ignored,
            Keeping this setting for compatibility with existing config files
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.CacheSettings.PollingIntervalSeconds">
            <summary>
            how often client attempts to refresh configuration
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.CacheSettings.RequestTimeoutMilliseconds">
            <summary>
            default timeout value for individual request
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.CacheSettings.ThrottleLimit">
            <summary>
            The maximum number of requests that can pile up in the unsent queue to a particular host before
            new requests for this host are rejected.  
            This should be seen as safety valve that prevents memory overflow, when a particular 
            host can’t process requests at the rate they are generated by the client
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.CacheSettings.DenylistDurationSeconds">
            <summary>
            how long server remains denylisted after socket error is detected
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.CacheSettings.DefaultBank">
            <summary>
            default bank
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.CacheSettings.DefaultLogicalCache">
            <summary>
            default logical cache
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.CacheSettings.MappingTableValidTimeSeconds">
            <summary>
            max time mapping table remains valid after last refresh
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.CacheSettings.HostHeartbeatSeconds">
            <summary>
            interval at which 
            a) cacheserver sends heartbeat to database 
            b) retrieves master status
            c) performs master functions, when master
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.CacheSettings.HostHeartbeatExpirationSeconds">
            <summary>
            How long to wait after last heartbeat to declare that is host dead
            This value must be greater than HostHeartbeatSeconds
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.CollectionUtils">
            <summary>
            fill gaps in .Net collections API
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CollectionUtils.ContainsAll``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0})">
            <summary>
            return true if source collection contains all elements of the dest collection
            not the most effcient implementation (n^2)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="dest"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CollectionUtils.HasSameElements``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})">
            <summary>
            return true if both collections contain same elements, including duplicates, regardless of order
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="dest"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.DefaultCacheConfiguration">
            <summary>
            This class implements cache configuration based on centralized settings
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.DefaultCacheConfiguration.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.DefaultCacheConfiguration.Port">
            <summary>
            User supplied value is ignored,
            Keeping this setting for compatibility with existing config files
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.DefaultCacheConfiguration.PollingIntervalSeconds">
            <summary>
            how often client attempts to refresh configuration
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.DefaultCacheConfiguration.RequestTimeoutMilliseconds">
            <summary>
            default timeout value for individual request
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.DefaultCacheConfiguration.ThrottleLimit">
            <summary>
            The maximum number of requests that can pile up in the unsent queue to a particular host before
            new requests for this host are rejected.  
            This should be seen as safety valve that prevents memory overflow, when a particular 
            host can’t process requests at the rate they are generated by the client
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.DefaultCacheConfiguration.DenylistDurationSeconds">
            <summary>
            how long server remains denylisted after socket error is detected
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.DefaultCacheConfiguration.DefaultBank">
            <summary>
            default bank
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.DefaultCacheConfiguration.DefaultLogicalCache">
            <summary>
            default logical cache
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.DefaultCacheConfiguration.MappingTableValidTimeSeconds">
            <summary>
            max time mapping table remains valid after last refresh
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.DefaultCacheConfiguration.HostHeartbeatSeconds">
            <summary>
            interval at which 
            a) cacheserver sends heartbeat to database 
            b) retrieves master status
            c) performs master functions, when master
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.DefaultCacheConfiguration.HostHeartbeatExpirationSeconds">
            <summary>
            How long to wait after last heartbeat to declare that is host dead
            This value must be greater than HostHeartbeatSeconds
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.StaticConfig">
            <summary>
            This class contains helper methods for generating static config XML.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.StaticConfig.GenerateXml(Microsoft.MSN.MSNCache.Common.MSNCacheConfigurationConfig)">
            <summary>
            Method for generating the static config XML for a given MSNCache configuration.
            </summary>
            <param name="config">MSNCache configuration to generate from</param>
            <returns>XML string representation of the config</returns>
            <exception cref="T:System.ArgumentNullException">if config is null</exception>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.StaticConfig.ReadFromFile(System.String)">
            <summary>
            read configuration from static xml config file
            </summary>
            <param name="configFile"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.StaticConfig.ReadFromXmlString(System.String)">
            <summary>
            construct config object from XML string
            </summary>
            <param name="xmlString"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.StaticConfig.Read(System.Xml.XmlReader)">
            <summary>
            read configuration from static xml config file
            </summary>
            <param name="reader"></param>
            <returns></returns>
            <throws>XmlException on parsing error</throws>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.StaticConfig.Write(System.String,System.String)">
            <summary>
            write static config to file
            (no validation)
            </summary>
            <param name="configFileName"></param>
            <param name="xmlContent"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.StaticConfig.GetServerNode(System.String,System.Xml.XmlReader)">
            <summary>
            Haven't found a way to do string insensitive comparison in xpath, so just
            do this the hardway. 'string-upper' fn doesn't seem to exist 
            </summary>
            <param name="serverName"></param>
            <param name="reader"></param>
            <returns>Pointer to XML element under which this host lives</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.StaticConfig.GetStaticConfiguration">
            <summary>
            retrieve current configuration as xml string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.StaticConfig.GetStaticConfiguration(System.DateTime,System.String@,System.Nullable{System.DateTime}@)">
            <summary>
            retrieve static configuration from database if it's more recent than lastUpdate timestamp
            otherwise return null values;
            </summary>
            <param name="lastUpdate"></param>
            <param name="config"></param>
            <param name="latestVersion"></param>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.MSNCacheConfigurationConfig">
            <summary>
            Represents the element configuration\MSNCacheConfiguration
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.MSNCacheConfigurationConfig.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.MSNCacheConfigurationConfig.#ctor(Microsoft.MSN.MSNCache.Common.BanksConfig,Microsoft.MSN.MSNCache.Common.GlobalConfig)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.MSNCacheConfigurationConfig.XmlSerialize(System.Xml.XmlNode)">
            <summary>
            Serializes this node and all child nodes to XML
            </summary>
            <param name="parentNode">parent node to attach this node to</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.MSNCacheConfigurationConfig.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.MSNCacheConfigurationConfig.GetHashCode">
            <summary>
            used to get rid of silly warning
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.MSNCacheConfigurationConfig.RemoveServer(System.String)">
            <summary>
            remove server from static config 
            </summary>
            <param name="serverName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.MSNCacheConfigurationConfig.HasServer(System.String)">
            <summary>
            check if server is present in static config
            </summary>
            <param name="serverName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.MSNCacheConfigurationConfig.AddBank(System.String,System.UInt32)">
            <summary>
            add new bank to config
            </summary>
            <param name="bankName"></param>
            <param name="bucketCount"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.MSNCacheConfigurationConfig.AddLogicalCache(System.String,System.String,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            add logical cache element
            </summary>
            <param name="bankName"></param>
            <param name="cacheName"></param>
            <param name="maxMemory"></param>
            <param name="maxItems"></param>
            <param name="isDefault"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.MSNCacheConfigurationConfig.AddServerClass(System.String,System.String,System.UInt32)">
            <summary>
            add new server class to config
            </summary>
            <param name="bankName"></param>
            <param name="serverClassName"></param>
            <param name="capacity"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.MSNCacheConfigurationConfig.AddServer(System.String,System.String,System.String)">
            <summary>
            add new server to specified bank and class
            </summary>
            <param name="bankName"></param>
            <param name="serverClassName"></param>
            <param name="serverName"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.MSNCacheConfigurationConfig.GetAllServers">
            <summary>
            get all servers defined in current config
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.MSNCacheConfigurationConfig.Banks">
            <summary>
            The configuration\MSNCacheConfiguration\banks element within this element.
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.MSNCacheConfigurationConfig.Global">
            <summary>
            The configuration\MSNCacheConfiguration\global element within this element.
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.GlobalConfig">
            <summary>
            Represents the element configuration\MSNCacheConfiguration\global
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.GlobalConfig.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.GlobalConfig.#ctor(Microsoft.MSN.MSNCache.Common.TcpConfig)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.GlobalConfig.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.GlobalConfig.GetHashCode">
            <summary>
            used to get rid of silly warning
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.GlobalConfig.XmlSerialize(System.Xml.XmlNode)">
            <summary>
            Serializes this node and all child nodes to XML
            </summary>
            <param name="parentNode">parent node to attach this node to</param>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.GlobalConfig.Tcp">
            <summary>
            The configuration\MSNCacheConfiguration\global\Tcp element.
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.TcpConfig">
            <summary>
            Represents the element configuration\MSNCacheConfiguration\global\tcp
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.TcpConfig.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.TcpConfig.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.TcpConfig.GetHashCode">
            <summary>
            used to get rid of silly warning
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.TcpConfig.XmlSerialize(System.Xml.XmlNode)">
            <summary>
            Serializes this node and all child nodes to XML
            </summary>
            <param name="parentNode">parent node to attach this node to</param>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.TcpConfig.Port">
            <summary>
            The port attribute, optional.
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.TcpConfig.ConnectTimeout">
            <summary>
            The connecttimeout attribute, optional.
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.TcpConfig.RequestTimeout">
            <summary>
            The requesttimeout attribute, optional.
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.BanksConfig">
            <summary>
            Represents the element configuration\MSNCacheConfiguration\banks
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.BanksConfig.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.BanksConfig.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.BanksConfig.GetHashCode">
            <summary>
            used to get rid of silly warning
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.BanksConfig.XmlSerialize(System.Xml.XmlNode)">
            <summary>
            Serializes this node and all child nodes to XML
            </summary>
            <param name="parentNode">parent node to attach this node to</param>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.BanksConfig.Banks">
            <summary>
            A list of configuration\MSNCacheConfiguration\banks\bank elements under this node.
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.BankConfig">
            <summary>
            Represents the element configuration\MSNCacheConfiguration\banks\bank
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.BankConfig.#ctor(System.String,System.UInt32)">
            <summary>
            Defualt constructor.
            </summary>
            <param name="name"></param>
            <param name="buckets"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.BankConfig.GetHashCode">
            <summary>
            used to get rid of silly warning
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.BankConfig.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.BankConfig.XmlSerialize(System.Xml.XmlNode)">
            <summary>
            Serializes this node and all child nodes to XML
            </summary>
            <param name="parentNode">parent node to attach this node to</param>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.BankConfig.Name">
            <summary>
            The name attribute, required.
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.BankConfig.Buckets">
            <summary>
            The buckets attribute, required.
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.BankConfig.LogicalCacheNames">
            <summary>
            A list of nodes that will occur under this node under configuration\MSNCacheConfiguration\banks\bank\logicalcachenames
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.BankConfig.Servers">
            <summary>
            A list of nodes that will occur under this node under configuration\MSNCacheConfiguration\banks\bank\servers
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.LogicalCacheConfig">
            <summary>
            Represents the element configuration\MSNCacheConfiguration\banks\bank\logicalcachenames\logicalcache
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.LogicalCacheConfig.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.LogicalCacheConfig.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.LogicalCacheConfig.GetHashCode">
            <summary>
            used to get rid of silly warning
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.LogicalCacheConfig.XmlSerialize(System.Xml.XmlNode)">
            <summary>
            Serializes this node and all child nodes to XML
            </summary>
            <param name="parentNode">parent node to attach this node to</param>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.LogicalCacheConfig.Name">
            <summary>
            name attribute, required
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.LogicalCacheConfig.MaxItems">
            <summary>
            maxitems attribute, optional
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.LogicalCacheConfig.MaxMemory">
            <summary>
            maxmemory attribute, optional
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.LogicalCacheConfig.Default">
            <summary>
            default attribute, optional
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.ServerClassConfig">
            <summary>
            Represents the element configuration\MSNCacheConfiguration\banks\bank\servers\serverclass
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.ServerClassConfig.#ctor(System.UInt32)">
            <summary>
            Defualt constructor.
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.ServerClassConfig.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.ServerClassConfig.GetHashCode">
            <summary>
            used to get rid of silly warning
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.ServerClassConfig.XmlSerialize(System.Xml.XmlNode)">
            <summary>
            Serializes this node and all child nodes to XML
            </summary>
            <param name="parentNode">parent node to attach this node to</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.ServerClassConfig.AddServers(System.Collections.Generic.List{System.String})">
            <summary>
            add all servers to collection that passed as parameter
            </summary>
            <param name="rvalue"></param>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.ServerClassConfig.Name">
            <summary>
            name attribute, optional
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.ServerClassConfig.Capacity">
            <summary>
            capacity attribute, required
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.ServerClassConfig.Servers">
            <summary>
            List of "server" nodes under this element at configuration\MSNCacheConfiguration\banks\bank\servers\serverclass\server
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.XElement">
            <summary>
            emulator of Linq class with he same name
            should be removed once 3.5 libraries are required for client installations
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.Attribute">
            <summary>
            emulator of Linq class with he same name
            should be removed once 3.5 libraries are required for client installations
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.XDocument">
            <summary>
            emulator of Linq class with he same name
            should be removed once 3.5 libraries are required for client installations
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.XmlUtil">
            <summary>
            helper methods for handling XML
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.XmlUtil.GetOptionalAttributeValue(Microsoft.MSN.MSNCache.Common.XElement,System.String,System.String)">
            <summary>
            return attribute value, if present, otherwise return defaultValue
            </summary>
            <param name="xe"></param>
            <param name="attrName"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.XmlUtil.GetOptionalAttributeIntValue(Microsoft.MSN.MSNCache.Common.XElement,System.String,System.Nullable{System.Int32})">
            <summary>
            return attribute value, if present, otherwise return defaultValue
            </summary>
            <param name="xe"></param>
            <param name="attrName"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.XmlUtil.GetOptionalAttributeUintValue(Microsoft.MSN.MSNCache.Common.XElement,System.String,System.Nullable{System.UInt32})">
            <summary>
            return attribute value, if present, otherwise return defaultValue
            </summary>
            <param name="xe"></param>
            <param name="attrName"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.XmlUtil.GetOptionalAttributeBoolValue(Microsoft.MSN.MSNCache.Common.XElement,System.String,System.Nullable{System.Boolean})">
            <summary>
            return attribute value, if present, otherwise return defaultValue
            </summary>
            <param name="xe"></param>
            <param name="attrName"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.XmlUtil.GetRequiredAttributeValue(Microsoft.MSN.MSNCache.Common.XElement,System.String)">
            <summary>
            return value of required attribute
            throws exception if attribute is missing
            </summary>
            <param name="xe"></param>
            <param name="attrName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.XmlUtil.GetRequiredAttributeUintValue(Microsoft.MSN.MSNCache.Common.XElement,System.String)">
            <summary>
            return parsed value of required attribute
            throws exception if attribute is missing
            </summary>
            <param name="xe"></param>
            <param name="attrName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.XmlUtil.ValidateSchema(System.String,System.String)">
            <summary>
            validates xml against xsd
            throws XmlSchemaValidationException if validation fails 
            </summary>
            <param name="xml"></param>
            <param name="xsd"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.XmlUtil.ValidateSchema(System.IO.TextReader,System.IO.TextReader)">
            <summary>
            validates xml against xsd
            throws XmlSchemaValidationException if validation fails 
            </summary>
            <param name="xmlReader"></param>
            <param name="xsdReader"></param>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.ErrorCallback">
            <summary>
            This delegate can be used to receive callback notifications of error conditions
            in the cache library.
            </summary>
            <param name="errorText">a textual representation of the error condition</param>
            <param name="ex">the exception generated as a result of the error (if any)</param>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.AsynchronousCacheManager">
            <summary>
            This is the top-level class for accessing the cache library as a client.  This static class exposes
            methods to provide configuration for your client, retrieve cache instances, and provide an error
            callback.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.AsynchronousCacheManager.ValidateCache(System.String)">
            <summary>
            adds object to cache and verifies that it can be retrieved 
            throws exception if validation fails for any reason
            </summary>
            <param name="host"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.AsynchronousCacheManager.AddErrorCallback(Microsoft.MSN.MSNCache.Asynchronous.ErrorCallback)">
            <summary>
            This callback will get called whenever the cache encounters an error.
            
            multiple clients can register several callbacks, all of them will be called
            however each unique callback delegate will be registered at most once 
            </summary>
            <param name="handler">cannot be null</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.AsynchronousCacheManager.GetCache">
            <summary>
            Retrieves the cache instance for the default bank and logical cache.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.AsynchronousCacheManager.GetCache(System.String,System.String)">
            <summary>
            Retrieves the cache instance for a specific bank and logical cache.
            </summary>
            <param name="bank">name of the bank to retrieve, null means default</param>
            <param name="logicalCache">name of the logical cache to retrieve, null means default</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.AsynchronousCacheManager.GetCache(System.String)">
            <summary>
            Retrieves the cache instance for a DefaultBank and logical cache.
            </summary>
            <param name="logicalCache">name of the logical cache to retrieve, null means default</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.AsynchronousCacheManager.GetCacheForHost(System.String,System.String)">
            <summary>
            Retrieves the cache instance for a specific host and logical cache. 
            </summary>
            <param name="host">host name to retrieve cache for</param>
            <param name="logicalCache">logical cache to retrieve</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.AsynchronousCacheManager.GetErrorString(Microsoft.MSN.MSNCache.Asynchronous.CacheError)">
            <summary>
            Converts a cache error code into a string.  Deprecated in favor of MSNCacheException.GetErrorString.
            </summary>
            <param name="error">error code to convert</param>
            <returns>string representation of that error code</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.AsynchronousCacheManager.SignalError(System.String,System.Exception)">
            <summary>
            This will get called for errors and exceptions in background threads. The idea is to allow
            the calling application decide what and how to log these events, and what action to take.
            </summary>
            <param name="errorDescription"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.AsynchronousCacheManager.EnsureInitialized">
            <summary>
            Initializes configuration if it has not already been set. We do this rather than use
            a static initializer primarily because if the configuration setup throws an exception you
            get a rather obscure exception thrown back. This way it should be clearer whats going on
            if something throws.
            
            Three configuration options exist: 
            1) user can pass explicit object that implements ICacheConfiguration interface
            2) if no such object was found, use centralized settings
            3) if centralized settings cannot be used for any reason fallback to default configuration
            </summary>
            <returns>current configuration value</returns>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.AsynchronousCacheManager.Configuration">
            <summary>
            Set or retrieve the configuration for your cache.  By default the MSNCache section
            will be retrieved from your app.exe.config file.
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.AsynchronousCacheManager.ErrorCallback">
            <summary>
            This callback will get called whenever the cache encounters an error.
            
            multiple clients can register several callbacks, all of them will be called
            however each unique callback delegate will be registered at most once 
            
            setting callback to null has no effect
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Bank.#ctor(Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Bank)">
            <summary>
            copy constructor
            </summary>
            <param name="toCopy"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Bank.GetBucketForKey(System.String,System.UInt32)">
            <summary>
            Given some number of buckets and a key, calculates which bucket the
            key belongs to by using the hash function.
            </summary>
            <param name="key">key to hash, usually groupKey</param>
            <param name="numberOfBuckets">number of buckets in the bank</param>
            <returns>bucket number the key belongs to</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Bank.Hash(System.String)">
            <summary>
            Hash the key to a uint. This uses the same algorithm as in
            the C++ code (taken from stdext::hash_value) so an object
            should always hahs to the same server both when using this TCP client
            and the old COM client.
            </summary>
            <param name="key">key to hash</param>
            <returns>a hash value</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Bank.GetHashCode">
            <summary>
            We don't plan on using this but you get a warning if you implement Equals and not GetHashCode.
            So we'll make something that works.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Bank.Equals(System.Object)">
            <summary>
            One bank is equal to another bank IFF the following criteria are met:
            1) the name is the same
            2) the number of hosts is the same
            3) each host is the same
            </summary>
            <param name="obj">object to compare to</param>
            <returns>true if banks are equal</returns>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Banks">
            <summary>
            Represents a collection of banks from a mapping table.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Banks.#ctor(Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Banks)">
            <summary>
            Copy constructor, does a deep copy of another banks object.
            </summary>
            <param name="source">source object to copy</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Banks.#ctor">
            <summary>
            Default constructor, creates an empty bank.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Banks.AdjustBanksAndBucketCounts(System.Collections.Generic.Dictionary{System.String,System.Int32},System.Boolean@)">
            <summary>
            modify current bank information to match data retrieved from db
            </summary>
            <param name="dbBanks"></param>
            <param name="isModified"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Banks.GetHostName(System.String,System.String)">
            <summary>
            For a given bank and group key, retrieves the host it is currently mapped to.
            </summary>
            <param name="bankName">name of the bank</param>
            <param name="groupKey">group key</param>
            <returns>hostname it is mapped to</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Banks.Update(System.Int32,System.String,System.String)">
            <summary>
            Updates the mapping of a particular bucket to a particular host.
            </summary>
            <param name="bucket"></param>
            <param name="bankName"></param>
            <param name="hostName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Banks.GetHashCode">
            <summary>
            Hash code, we don't plan on using it but this works if we ever do and it gets rid of warnings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Banks.Equals(System.Object)">
            <summary>
            Deep equality comparison.  Two Banks are considered equal IFF the following are all true:
            1) the same bank names exist in each object
            2) each Bank in each object is equal
            </summary>
            <param name="obj">the Banks object to check equality</param>
            <returns>true if equal, false otherwise</returns>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Banks.Version">
            <summary>
            The current version of this banks.
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.MappingTable">
            <summary>
            This class incurs heavily multi-threaded use.  Our synchronization model is to make all of the
            parameters read-only except for mappingTableLeaseExpired.  When we need to change these values
            (like because we updated the banks mapping) we actually just create a new MappingTable object
            and InterlockedExchange out the Instance.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.MappingTable.GetValidHostName(System.String,System.String)">
            <summary>
            returns valid host or throws MSNCacheException if unable to do so 
            </summary>
            <param name="bankName"></param>
            <param name="groupKey"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.MappingTable.DetectExpiration">
            <summary>
            check expiration status of host mapping table and generate warning messages in logs
            the method is not thread safe - due to race conditions, the messages are not guarneed to be accurate to a tick 
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.MappingTable.UpdateTable">
            <summary>
            Called by TimerCallback and by static initializer.  Handles querying the database for the latest
            mapping and updating the Instance.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.MappingTable.OnTimer(System.Object)">
            <summary>
            timer callback
            </summary>
            <param name="obj"></param>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.MappingTable.LastUpdated">
            <summary>
            The time that this table was last updated.
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.MappingTable.Instance">
            <summary>
            Retrieves the global mapping table.
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.CacheConfig.DotNetCacheConfiguration">
            <summary>
            Cache configuration manager
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheConfig.DotNetCacheConfiguration.WstConnectionString">
            <summary>
            webstore deployment
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheConfig.DotNetCacheConfiguration.UseExeConfig">
            <summary>
            obsolete setting
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheConfig.DotNetCacheConfiguration.Port">
            <summary>
            User supplied value is ignored,
            Keeping this setting for compatibility with existing config files
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheConfig.DotNetCacheConfiguration.ConnectionString">
            <summary>
            User supplied value is ignored,
            Keeping this setting for compatibility with existing config files
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheConfig.DotNetCacheConfiguration.PollingIntervalSeconds">
            <summary>
            how often client attempts to refresh configuration
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheConfig.DotNetCacheConfiguration.MultipleSockets">
            <summary>
            reserved for future use
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheConfig.DotNetCacheConfiguration.ConnectionType">
            <summary>
            User supplied value is ignored,
            Keeping this setting for compatibility with existing config files
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheConfig.DotNetCacheConfiguration.RequestTimeoutMilliseconds">
            <summary>
            timeout value for individual request
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheConfig.DotNetCacheConfiguration.ThrottleLimit">
            <summary>
            The maximum number of requests that can pile up in the unsent queue to a particular host before
            new requests for this host are rejected.  
            This should be seen as safety valve that prevents memory overflow, when a particular 
            host can’t process requests at the rate they are generated by the client
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheConfig.DotNetCacheConfiguration.DenylistDurationSeconds">
            <summary>
            how long server remains denylisted after socket error is detected
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheConfig.DotNetCacheConfiguration.DefaultBank">
            <summary>
            default bank
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheConfig.DotNetCacheConfiguration.DefaultLogicalCache">
            <summary>
            default logical cache
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheConfig.DotNetCacheConfiguration.WebstoreAssemblyName">
            <summary>
            WstClient assembly name
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheConfig.DotNetCacheConfiguration.MappingTableValidTimeSeconds">
            <summary>
            max time mapping table remains valid after last refresh
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheConfig.DotNetCacheConfiguration.HostHeartbeatSeconds">
            <summary>
            How frequently cache host must update it's status
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheConfig.DotNetCacheConfiguration.HostHeartbeatExpirationSeconds">
            <summary>
            How long to wait after last heartbeat to declare that is host dead
            This value must be greater than HostHeartbeatSeconds
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.CacheError">
            <summary>
            Possible error codes that can be returned in an MSNCacheException
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheError.NoError">
            <summary>
            No error - everything is fine
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheError.Unknown">
            <summary>
            Unknown or unrecognized error
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheError.InvalidBank">
            <summary>
            The bank requested by the client application is invalid.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheError.InvalidLogicalCache">
            <summary>
            The logical cache requested by the client application is invalid.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheError.BucketFileDoesNotExist">
            <summary>
            The bucket mapping is out of date or doesn't exist.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheError.CannotConnectToSqlServer">
            <summary>
            Unable to connect to CacheDB
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheError.CannotConnectToWebstore">
            <summary>
            Unable to connect to CacheDB
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheError.NoConfiguration">
            <summary>
            Incorrect or missing cache client configuration
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheError.PortNotSet">
            <summary>
            Cache server destination port not specified in configuration.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheError.HostConnectionFailed">
            <summary>
            Attempt to connect to cache host server failed.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheError.RequestTimedOut">
            <summary>
            Request timed out.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheError.RequestThrottled">
            <summary>
            Request was refused due to client-side throttling.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheError.HostDenylisted">
            <summary>
            Request was refused due to host being denylisted.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheError.NetworkError">
            <summary>
            An unspecified network error occurred.
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.ChatHeader">
            <summary>
            This is a header prefixed to messages on the inter-cache protocol.
            We are just going to add a new message type leaving the existing
            messaging alone. So we need this prefix to keep the cache server happy.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.ChatHeader.#ctor(System.Byte[],System.Int32)">
            <summary>
            Construct a field object
            </summary>
            <param name="buffer">serialized blob array</param>
            <param name="offset">offset where this field lives</param>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.ChatHeader.Size">
            <summary>
            Size of a Field object in bytes. Note this is not the size of
            field contents (see Length below)
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.ConnectionType">
            <summary>
            The type of connection to use for connecting to the Cache DB.  In the future
            only Webstore will be supported.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.ConnectionType.None">
            <summary>
            Don't use a connection - invalid value.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.ConnectionType.File">
            <summary>
            Use a file - invalid value.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.ConnectionType.SqlServer">
            <summary>
            Use SQLServer - currently works, but is deprecated.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.ConnectionType.Webstore">
            <summary>
            Use Webstore
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.CacheSerialize">
            <summary>
            Serialization class. All serializable objects must inherit from this.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheSerialize.OnField(System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Called during deserialization to deserialize one field
            </summary>
            <param name="fieldNumber">Number of the field</param>
            <param name="length">Length of payload</param>
            <param name="data">For integer fields this is the value of the field</param>
            <param name="buff">Base of the blob</param>
            <param name="bufferOffset">Location in blob relative to the base of filed payload</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheSerialize.SerializeFields">
            <summary>
            Serialize fields - call into subclass.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheSerialize.Deserialize(System.Byte[])">
            <summary>
            Deserialize an object.
            </summary>
            <param name="serializedObjectBuffer">Buffer holding the serialized object</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheSerialize.Serialize">
            <summary>
            Serialize an object
            </summary>
            <returns>serialized object as byte array</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheSerialize.GetString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Called by derived class to get string field from blob
            </summary>
            <param name="serializedObjectBuffer">buffer containing blob</param>
            <param name="bufferOffset">start of payload relative to base of blob</param>
            <param name="length">length of payload</param>
            <returns>string</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheSerialize.GetBuffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Called by derived class to get byte array from serialized blob
            </summary>
            <param name="serializedObjectBuffer">buffer containing blob</param>
            <param name="bufferOffset">start of payload relative to base of blob</param>
            <param name="length">length of payload</param>
            <returns>data as abyte array</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheSerialize.SetField(System.Int32,System.Int32)">
            <summary>
            Called by derived class during serialization to set integer data into field
            </summary>
            <param name="fieldNumber">field number</param>
            <param name="data">data</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheSerialize.SetField(System.Int32,System.String)">
            <summary>
            Called by derived class during serialization to set string into field
            </summary>
            <param name="fieldNumber">field number</param>
            <param name="data">string data</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheSerialize.SetField(System.Int32,System.Byte[])">
            <summary>
            Called by derived class during serialization to set byte array into field
            </summary>
            <param name="fieldNumber">field number</param>
            <param name="data">data</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.RequestReader.BeginRead(System.String,Microsoft.MSN.MSNCache.Asynchronous.CacheState,Microsoft.MSN.MSNCache.Asynchronous.ReadSuccessCallback,Microsoft.MSN.MSNCache.Asynchronous.ReadErrorCallback)">
            <summary>
            initiate pending read on a socket
            </summary>
            <param name="hostName"></param>
            <param name="hostSocketHolder"></param>
            <param name="onSuccess"></param>
            <param name="onFail"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.RequestReader.OnReadResponseDone(System.IAsyncResult)">
            <summary>
            Called when read is done. This will read whatever data is available. When the object is 
            completely read we deserialize it, send it to the singleton response queue, and hang out
            a new read request.
            </summary>
            <param name="ar"></param>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.Field">
            <summary>
            Represents a field in the serialized blob
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.Field.#ctor(System.Byte[],System.Int32)">
            <summary>
            Construct a field object
            </summary>
            <param name="buffer">serialized blob array</param>
            <param name="offset">offset where this field lives</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.Field.Increment">
            <summary>
            Move to next field in serialized blob
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.Field.Size">
            <summary>
            Size of a Field object in bytes. Note this is not the size of
            field contents (see Length below)
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.Field.Number">
            <summary>
            Field Id
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.Field.Length">
            <summary>
            Length of contents
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.Field.Offset">
            <summary>
            Offset of field payload relative to start of blob
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheRequest.#ctor(Microsoft.MSN.MSNCache.Asynchronous.CacheRequest.RequestType,System.String,System.String,System.String,System.String,System.Object,System.AsyncCallback,System.Int32)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="bank"></param>
            <param name="logicalCache"></param>
            <param name="groupKey"></param>
            <param name="itemKey"></param>
            <param name="asyncState"></param>
            <param name="callback_"></param>
            <param name="requestTimeoutMillis">value less or equal zero, means no timeout</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheRequest.BlockTillDoneOrTimeout(System.TimeSpan)">
            <summary>
            blocks until request is completed or timeout is reached, whatever happens first
            </summary>
            <param name="timeout"> TimeSpan = -1ms means indefinite wait</param>
            <returns>return true if request is completed, false if timeout is reached</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheRequest.BlockTillDone(System.Int32@,System.String@)">
            <summary>
            blocks until request is completed and then sets status parameters
            </summary>
            <param name="resultCode"></param>
            <param name="errString"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheRequest.BlockTillDone">
            <summary>
             blocks until request is completed and then sets status parameters
             throws MSNCacheException in case status indicates error
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheRequest.GetObject(System.Int32@,System.String@)">
            <summary>
            Blocks until request is done, than returns value.
            Also sets Status and ErrorString out parameters
            </summary>
            <param name="resultCode"></param>
            <param name="errString"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheRequest.GetObject">
            <summary>
            Blocks until request is done, than returns value
            throws MSNCacheException in case status indicates error
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheRequest.GetRawData(System.Int32@,System.String@)">
            <summary>
            blocks until request is completed and then returns data and sets status parameters
            </summary>
            <param name="resultCode"></param>
            <param name="errString"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheRequest.GetRawData">
            <summary>
            blocks until request is completed and then returns data and sets status parameters
            throws MSNCacheException in case status indicates error
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheRequest.SignalCaller(Microsoft.MSN.MSNCache.Asynchronous.CacheError,System.String,System.Exception,System.Byte[])">
            <summary>
               1. set status and content
               2. set waithandle
               3. fire callbacks
            </summary>
            <param name="statusCode"></param>
            <param name="errorMsg"></param>
            <param name="ex"></param>
            <param name="content"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheRequest.SignalError(Microsoft.MSN.MSNCache.Asynchronous.CacheError,System.String,System.Exception)">
            <summary>
            Translate error message and call SignalCaller to complete request
            </summary>
            <param name="error"></param>
            <param name="msg"></param>
            <param name="ex"></param>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache">
            <summary>
            Asynchronous cache
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.Add(System.String,System.String,System.Object,System.TimeSpan)">
            <summary>
            Synchronously add object to cache 
            (operation is aborted after default request timeout interval expires)
            </summary>
            <param name="groupKey">The group key</param>
            <param name="itemKey">The item key</param>
            <param name="obj">Object to add</param>
            <param name="expiry">Expiry time - set to TimeSpan.Maxvalue for default value (24 hours) </param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.BeginAdd(System.String,System.String,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            Start to asynchronously add object to cache
            (operation is aborted after default request timeout interval expires)
            </summary>
            <param name="groupKey">The group key</param>
            <param name="itemKey">The item key</param>
            <param name="obj">Object to add</param>
            <param name="expiry">Expiry time , TimeSpan.MaxValue for default value (24 hours)</param>
            <param name="callback">An AsyncCallback delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the EndAdd delegate when the operation is complete.</param>
            <returns>IAsyncResult object that stores state information about this operation</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.BeginAdd(System.String,System.String,System.Object,System.TimeSpan,System.AsyncCallback,System.Object,System.Int32)">
            <summary>
            Start to asynchronously add object to cache
            </summary>
            <param name="groupKey">The group key</param>
            <param name="itemKey">The item key</param>
            <param name="obj">Object to add</param>
            <param name="expiry">Expiry time , TimeSpan.MaxValue for default value (24 hours)</param>
            <param name="callback">An AsyncCallback delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the EndAdd delegate when the operation is complete.</param>
            <param name="requestTimeoutMillis">max time to wait before aborting operation.  Zero or negative value means no timeout</param>
            <returns>IAsyncResult object that stores state information about this operation</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.EndAdd(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous Add 
            </summary>
            <param name="ar">An IAsyncResult that stores state information about this operation</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.EndAdd(System.IAsyncResult,System.Int32@,System.String@)">
            <summary>
            Ends a pending asynchronous add
            </summary>
            <param name="ar">An IAsyncResult that stores state information about this operation</param>
            <param name="returnCode">return code, 0 = success</param>
            <param name="exceptionString">descriptive string</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.AddByteArray(System.String,System.String,System.Byte[],System.TimeSpan)">
            <summary>
            Synchronously add a byte array to the cache
            (operation is aborted after default request timeout interval expires)
            </summary>
            <param name="groupKey">The group key</param>
            <param name="itemKey">The item key</param>
            <param name="buffer">Byte array to add</param>
            <param name="expiry">Expiry time - set to TimeSpan.Maxvalue for default value (24 hours) </param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.BeginAddByteArray(System.String,System.String,System.Byte[],System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            Start to asynchronously add byte array to cache
            (operation is aborted after default request timeout interval expires)
            </summary>
            <param name="groupKey">The group key</param>
            <param name="itemKey">The item key</param>
            <param name="buffer">Byte array to add</param>
            <param name="expiry">Expiry time , TimeSpan.MaxValue for default value (24 hours)</param>
            <param name="callback">An AsyncCallback delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the EndAddByteArray delegate when the operation is complete.</param>
            <returns>IAsyncResult object that stores state information about this operation</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.BeginAddByteArray(System.String,System.String,System.Byte[],System.TimeSpan,System.AsyncCallback,System.Object,System.Int32)">
            <summary>
            Start to asynchronously add byte array to cache
            </summary>
            <param name="groupKey">The group key</param>
            <param name="itemKey">The item key</param>
            <param name="buffer">Byte array to add</param>
            <param name="expiry">Expiry time , TimeSpan.MaxValue for default value (24 hours)</param>
            <param name="callback">An AsyncCallback delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the EndAddByteArray delegate when the operation is complete.</param>
            <param name="requestTimeoutMillis">max time to wait before aborting operation.  Zero or negative value means no timeout</param>
            <returns>IAsyncResult object that stores state information about this operation</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.EndAddByteArray(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous AddByteArray 
            </summary>
            <param name="ar">An IAsyncResult that stores state information about this operation</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.EndAddByteArray(System.IAsyncResult,System.Int32@,System.String@)">
            <summary>
            Ends a pending asynchronous AddByteArray
            </summary>
            <param name="ar">An IAsyncResult that stores state information about this operation</param>
            <param name="resultCode">return code, 0 = success</param>
            <param name="exceptionString">descriptive string</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.Get(System.String,System.String)">
            <summary>
            Synchronously get an item from the cache
            (operation is aborted after default request timeout interval expires)
            </summary>
            <param name="groupKey">The group key</param>
            <param name="itemKey">The item key</param>
            <returns>cached object, or null if object not in cache</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.BeginGet(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Start to asynchronously get object from cache
            (operation is aborted after default request timeout interval expires)
            </summary>
            <param name="groupKey">The group key</param>
            <param name="itemKey">The item key</param>
            <param name="callback">An AsyncCallback delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the EndGet delegate when the operation is complete.</param>
            <returns>IAsyncResult object that stores state information about this operation</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.BeginGet(System.String,System.String,System.AsyncCallback,System.Object,System.Int32)">
            <summary>
            Start to asynchronously get object from cache
            </summary>
            <param name="groupKey">The group key</param>
            <param name="itemKey">The item key</param>
            <param name="callback">An AsyncCallback delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the EndGet delegate when the operation is complete.</param>
            <param name="requestTimeoutMillis">max time to wait before aborting operation.  Zero or negative value means no timeout</param>
            <returns>IAsyncResult object that stores state information about this operation</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.EndGet(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous Get
            </summary>
            <param name="ar">An IAsyncResult that stores state information about this operation</param>
            <returns>cached object, or null if object not in cache</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.EndGet(System.IAsyncResult,System.Int32@,System.String@)">
            <summary>
            Ends a pending asynchronous Get
            </summary>
            <param name="ar">An IAsyncResult that stores state information about this operation</param>
            <param name="resultCode">return code, 0 = success</param>
            <param name="exceptionString">descriptive string</param>
            <returns>cached object, or null if object not in cache</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.GetByteArray(System.String,System.String)">
            <summary>
            Synchronously get a byte array from the cache
            (operation is aborted after default request timeout interval expires)
            </summary>
            <param name="groupKey">The group key</param>
            <param name="itemKey">The item key</param>
            <returns>cached byte array, or null if object not in cache</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.BeginGetByteArray(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Start to asynchronously get byte array from cache
            (operation is aborted after default request timeout interval expires)
            </summary>
            <param name="groupKey">The group key</param>
            <param name="itemKey">The item key</param>
            <param name="callback">An AsyncCallback delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the EndGetByteArray delegate when the operation is complete.</param>
            <returns>IAsyncResult object that stores state information about this operation</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.BeginGetByteArray(System.String,System.String,System.AsyncCallback,System.Object,System.Int32)">
            <summary>
            Start to asynchronously get byte array from cache
            </summary>
            <param name="groupKey">The group key</param>
            <param name="itemKey">The item key</param>
            <param name="callback">An AsyncCallback delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the EndGetByteArray delegate when the operation is complete.</param>
            <param name="requestTimeoutMillis">max time to wait before aborting operation.  Zero or negative value means no timeout</param>
            <returns>IAsyncResult object that stores state information about this operation</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.EndGetByteArray(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous GetByteArray
            </summary>
            <param name="ar">An IAsyncResult that stores state information about this operation</param>
            <returns>cached object, or null if object not in cache</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.EndGetByteArray(System.IAsyncResult,System.Int32@,System.String@)">
            <summary>
            Ends a pending asynchronous GetByteArray
            </summary>
            <param name="ar">An IAsyncResult that stores state information about this operation</param>
            <param name="returnCode">return code, 0 = success</param>
            <param name="exceptionString">descriptive string</param>
            <returns>cached object, or null if object not in cache</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.RemoveGroup(System.String)">
            <summary>
            Remove all items in named group
            (operation is aborted after default request timeout interval expires)
            </summary>
            <param name="groupKey">The group key</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.BeginRemoveGroup(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Start to asynchronously remove all items from a group
            (operation is aborted after default request timeout interval expires)
            </summary>
            <param name="groupKey">The group key</param>
            <param name="callback">An AsyncCallback delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the EndGroupRemove delegate when the operation is complete.</param>
            <returns>IAsyncResult object that stores state information about this operation</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.BeginRemoveGroup(System.String,System.AsyncCallback,System.Object,System.Int32)">
            <summary>
            Start to asynchronously remove all items from a group
            </summary>
            <param name="groupKey">The group key</param>
            <param name="callback">An AsyncCallback delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the EndGroupRemove delegate when the operation is complete.</param>
            <param name="requestTimeoutMillis">max time to wait before aborting operation.  Zero or negative value means no timeout</param>
            <returns>IAsyncResult object that stores state information about this operation</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.EndRemoveGroup(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous GroupRemove
            </summary>
            <param name="ar">An IAsyncResult that stores state information about this operation</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.EndRemoveGroup(System.IAsyncResult,System.Int32@,System.String@)">
            <summary>
            Ends a pending asynchronous GroupRemove avoiding throwing an exception if an error occured
            </summary>
            <param name="ar">IAsyncResult objecy</param>
            <param name="returnCode">Error Code</param>
            <param name="exceptionString">Error description</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.RemoveItem(System.String,System.String)">
            <summary>
            Remove specific item from cache
            (operation is aborted after default request timeout interval expires)
            </summary>
            <param name="groupKey">The group key</param>
            <param name="itemKey">The item key</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.BeginRemoveItem(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Start to asynchronously remove a specific item from the cache
            (operation is aborted after default request timeout interval expires)
            </summary>
            <param name="groupKey">The group key</param>
            <param name="itemKey">The item key</param>
            <param name="callback">An AsyncCallback delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the EndItemRemove delegate when the operation is complete.</param>
            <returns>IAsyncResult object that stores state information about this operation</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.BeginRemoveItem(System.String,System.String,System.AsyncCallback,System.Object,System.Int32)">
            <summary>
            Start to asynchronously remove a specific item from the cache
            </summary>
            <param name="groupKey">The group key</param>
            <param name="itemKey">The item key</param>
            <param name="callback">An AsyncCallback delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the EndItemRemove delegate when the operation is complete.</param>
            <param name="requestTimeoutMillis">max time to wait before aborting operation.  Zero or negative value means no timeout</param>
            <returns>IAsyncResult object that stores state information about this operation</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.EndRemoveItem(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous ItemRemove
            </summary>
            <param name="ar">An IAsyncResult that stores state information about this operation</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.EndRemoveItem(System.IAsyncResult,System.Int32@,System.String@)">
            <summary>
            Ends a pending asynchronous ItemRemove and returns returnCode and exception string.
            </summary>
            <param name="ar">An IAsyncResult that stores state information about this operation</param>
            <param name="returnCode"></param>
            <param name="exceptionString"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.GetResponseCode(System.IAsyncResult)">
            <summary>
            Returns the response code associated with an asynchronous cache operation
            </summary>
            <param name="ar">An IAsyncResult that stores state information about this operation</param>
            <returns>Response code</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.GetErrorString(System.IAsyncResult)">
            <summary>
            Returns the error string associated with an asynchronous cache operation
            </summary>
            <param name="ar">An IAsyncResult that stores state information about this operation</param>
            <returns>Error string</returns>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.Logger">
            <summary>
            Wrapper around MsnTrace log
            gurantees that messages sent from different methods and classes follow same formatting rules
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.Logger.LogError(System.String,System.Exception)">
            <summary>
            format exception and output it to trace
            formatting includes adding trace, and output of the "ultimate cause", the furthemost inner exception
            </summary>
            <param name="info"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.Logger.GetUltimateCause(System.Exception)">
            <summary>
            Returns input if exception doesn't contain InnerException
            otherwise drills down and return the innermost InnerException
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.Logger.TraceSource">
            <summary>
            Gets a trace source for logging 
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.MSNCacheException">
            <summary>
            This class represents an exception generated by the cache.  To determine the type of
            exception reference the Code property.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.MSNCacheException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Retrieves the underlying object data using a custom serialization info object.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.MSNCacheException.GetErrorString(Microsoft.MSN.MSNCache.Asynchronous.CacheError,System.String)">
            <summary>
            Retrieve the error string for a specific error number.
            </summary>
            <param name="errorNumber">error number, as retrieved by Code property</param>
            <param name="msg">custom user message</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.MSNCacheException.ErrorCode">
            <summary>
            Retrieve error code
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.MSNCacheException.Code">
            <summary>
            Retrieves the error code that generated the exception.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.RequestSender.BeginSend(Microsoft.MSN.MSNCache.Asynchronous.CacheState,Microsoft.MSN.MSNCache.Asynchronous.CacheRequest,Microsoft.MSN.MSNCache.Asynchronous.SendSuccessCallback,Microsoft.MSN.MSNCache.Asynchronous.SendErrorCallback)">
            <summary>
            initiate send request
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.RequestSender.OnSendRequestDone(System.IAsyncResult)">
            <summary>
            called asynchronously
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.RequestSender.IsSendComplete(System.Int32)">
            <summary>
            checks if additional bytes complete sent request
            if buffer has been completely sent, sets write complete flag
            </summary>
            <param name="moreBytesSent"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.SocketCache.EndAddByteArray(System.IAsyncResult)">
            Silly redirect TODO: mark as obsolete
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.HostCacheProxy">
            <summary>
            This class is a proxy for one remote cache. The complexity here is that we are
            using tcp for communications. With TCP if you a send there is no guarantee that
            the entire buffer will be sent atomically. Its possible for the send to succeed but
            send only a partial buffer. The send returns a count of bytes sent, and the application needs
            to issue a new send request for the data that was not sent on the first try. The problem 
            arises if there are multiple threads wanting to use the same socket - if thread A sends a 
            partial buffer there is a chance that thread B will get its write in before the second part 
            of thread A's buffer. In which case you have an interleaved buffer that can't be disentangled by the sender.
            
            This class solves the problem by queing all requests and only sending one request down the socket at a time.
            
            Also: once a request has been sent everything is asynchronous, so events can occur out of order.
            There are three events that could possibly happen:
            1. send completed
            2. receive completed
            3. timout
            You can't assume that anything is going to happen in any particular order - we can get a response completed
            before the send completed, and we can get both (or either) send completed and recieve completed after 
            timeout.
            
            To deal with the recieve completed coming before the send completed I added an event to the
            request object. This gets set on creation, and reset when the write completes. The read and timeout wait on this.
            
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.HostCacheProxy.OnConnectRequestDone(System.IAsyncResult)">
            <summary>
            Called when a request completes.
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.HostCacheProxy.SignalComplete(System.String,System.Byte[],Microsoft.MSN.MSNCache.Asynchronous.CacheError,System.String)">
            <summary>
            Signal waiting clients that we have completed, and also if there is a callback
            registered call it.
            </summary>
            <param name="requestId"></param>
            <param name="data"></param>
            <param name="status"></param>
            <param name="statusString"></param>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.CacheState">
            <summary>
            encapsulates internal state of HostCacheProxy object,
            access to all public/internal methods is synced using internal lock
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheState.BeginConnect(Microsoft.MSN.MSNCache.Asynchronous.CacheRequest,System.AsyncCallback)">
            <summary>
            starts async connect, if currenly disconnected.
            otherwise has no effect
            </summary>
            <returns>true if connect has started</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheState.BeginReceive(System.Byte[],System.Int32,System.Int32,System.AsyncCallback)">
            <summary>
            Hangs out an asynchronous read request. We will only have one read request outstanding
            on each socket so that we can be sure data is correctly sequenced. In practice all objects
            require at least two reads - the first reads the 12 byte header which has the object
            length. The second will read the remainder of the object. Because data in the
            buffer is self relative we need the buffer to be the complete length of the object
            including its 12 byte header. But we don't need the initial 12 bytes after the first read. 
            CacheRequest has the logic to figure out where in the buffer we are, and how much more data needs to be loaded
            </summary>
            <param name="readBuffer"></param>
            <param name="callback"></param>
            <param name="readBytesLeft"></param>
            <param name="readBytesReceived"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheState.EndConnect(System.IAsyncResult,Microsoft.MSN.MSNCache.Asynchronous.CacheRequest)">
            <summary>
            Ends async Connect request
            At the end of the method the HostConnectionState==Connected and thisSocket is mapped to valid connected Socket
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheState.EndSend(System.IAsyncResult)">
            <summary>
            End send request
            </summary>
            <param name="ar"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheState.BeginSend(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,Microsoft.MSN.MSNCache.Asynchronous.RequestSender)">
            <summary>
            Send async Send request
            </summary>
            <param name="buffer"></param>
            <param name="bytesSent"></param>
            <param name="bytesLeft"></param>
            <param name="callback"></param>
            <param name="sendHelper"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheState.InternalEnqueue(Microsoft.MSN.MSNCache.Asynchronous.CacheRequest)">
            <summary>
            place request into internal queue
            if for any reason request cannot be place in a queue, an appropriate exceptuion will be thrown
            </summary>
            <param name="request"></param>
            <returns>queue size BEFORE request has been added</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheState.RemoveFromPendingQueue(System.String)">
            <summary>
            removes request from internal pending queue
            </summary>
            <param name="requestId"></param>
            <returns>object that has been removed</returns>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.CacheClientCategoryInstaller">
            <summary>
            Category installer for the WstCacheClient event source.
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheClientCategoryInstaller.EventSource">
            <summary>
            The event source for which to install the category strings.
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents">
            <summary>
            Events in the CacheClient module.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.log">
            <summary>
            MSN Runtime's event logger 
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.#ctor">
            <summary>
            Private constructor prevents instantiation.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.WstCacheClientErrorValue">
            <summary>
            EventDefinition for WstCacheClientError
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.LogWstCacheClientError(System.String,System.String,System.String,System.String)">
            <summary>
            Method to log an event of type WstCacheClientError.
            </summary>
            <param name="description">Argument description for formatting the event text.</param>
            <param name="exceptionType">Argument exceptionType for formatting the event text.</param>
            <param name="exceptionMessage">Argument exceptionMessage for formatting the event text.</param>
            <param name="stackTrace">Argument stackTrace for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.LogWstCacheClientError(System.String,System.String,System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type WstCacheClientError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="description">Argument description for formatting the event text.</param>
            <param name="exceptionType">Argument exceptionType for formatting the event text.</param>
            <param name="exceptionMessage">Argument exceptionMessage for formatting the event text.</param>
            <param name="stackTrace">Argument stackTrace for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.HostDenyListedValue">
            <summary>
            EventDefinition for HostDenyListed
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.LogHostDenyListed(System.String,System.String)">
            <summary>
            Method to log an event of type HostDenyListed.
            </summary>
            <param name="hostName">Argument hostName for formatting the event text.</param>
            <param name="denyListExpiration">Argument denyListExpiration for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.LogHostDenyListed(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type HostDenyListed with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="hostName">Argument hostName for formatting the event text.</param>
            <param name="denyListExpiration">Argument denyListExpiration for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.MappingTableExpirationDetectedValue">
            <summary>
            EventDefinition for MappingTableExpirationDetected
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.LogMappingTableExpirationDetected(System.String)">
            <summary>
            Method to log an event of type MappingTableExpirationDetected.
            </summary>
            <param name="lastRefreshTimestamp">Argument lastRefreshTimestamp for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.LogMappingTableExpirationDetected(System.String,System.Exception)">
            <summary>
            Method to log an event of type MappingTableExpirationDetected with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="lastRefreshTimestamp">Argument lastRefreshTimestamp for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.MappingTableUpdateValue">
            <summary>
            EventDefinition for MappingTableUpdate
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.LogMappingTableUpdate">
            <summary>
            Method to log an event of type MappingTableUpdate.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.LogMappingTableUpdate(System.Exception)">
            <summary>
            Method to log an event of type MappingTableUpdate with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.ConfigurationChangeValue">
            <summary>
            EventDefinition for ConfigurationChange
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.LogConfigurationChange(System.String)">
            <summary>
            Method to log an event of type ConfigurationChange.
            </summary>
            <param name="config">Argument config for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.LogConfigurationChange(System.String,System.Exception)">
            <summary>
            Method to log an event of type ConfigurationChange with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="config">Argument config for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.FailedToChangeConfigurationValue">
            <summary>
            EventDefinition for FailedToChangeConfiguration
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.LogFailedToChangeConfiguration(System.String)">
            <summary>
            Method to log an event of type FailedToChangeConfiguration.
            </summary>
            <param name="config">Argument config for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.LogFailedToChangeConfiguration(System.String,System.Exception)">
            <summary>
            Method to log an event of type FailedToChangeConfiguration with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="config">Argument config for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.CentralizedSettingFoundValue">
            <summary>
            EventDefinition for CentralizedSettingFound
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.LogCentralizedSettingFound(System.String,System.String)">
            <summary>
            Method to log an event of type CentralizedSettingFound.
            </summary>
            <param name="name">Argument name for formatting the event text.</param>
            <param name="value">Argument value for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.LogCentralizedSettingFound(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type CentralizedSettingFound with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="name">Argument name for formatting the event text.</param>
            <param name="value">Argument value for formatting the event text.</param>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.EventLogger">
            <summary>
            Gets the EventLogger used to report events from this source.
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.EventSource">
            <summary>
            Gets the event source for events defined in this module.
            </summary>
            <value>
            The event source for events defined in this module.
            </value>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.WstCacheClientError">
            <summary>
              Gets the EventDefinition for the WstCacheClientError.
            </summary>
            <value>The EventDefinition for the WstCacheClientError</value>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.HostDenyListed">
            <summary>
              Gets the EventDefinition for the HostDenyListed.
            </summary>
            <value>The EventDefinition for the HostDenyListed</value>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.MappingTableExpirationDetected">
            <summary>
              Gets the EventDefinition for the MappingTableExpirationDetected.
            </summary>
            <value>The EventDefinition for the MappingTableExpirationDetected</value>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.MappingTableUpdate">
            <summary>
              Gets the EventDefinition for the MappingTableUpdate.
            </summary>
            <value>The EventDefinition for the MappingTableUpdate</value>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.ConfigurationChange">
            <summary>
              Gets the EventDefinition for the ConfigurationChange.
            </summary>
            <value>The EventDefinition for the ConfigurationChange</value>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.FailedToChangeConfiguration">
            <summary>
              Gets the EventDefinition for the FailedToChangeConfiguration.
            </summary>
            <value>The EventDefinition for the FailedToChangeConfiguration</value>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.CentralizedSettingFound">
            <summary>
              Gets the EventDefinition for the CentralizedSettingFound.
            </summary>
            <value>The EventDefinition for the CentralizedSettingFound</value>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK\debug\doc\Wmo.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Wmo</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy">
            <summary>
            Mirrors the WebstoreBulkCopy table used in MoveData processing.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstMoveData.WebstoreTableBase">
            <summary>
            Used for the comment elements that define the Webstore tables on the destination
            application databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreTableBase.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreTableBase.#ctor(System.String,System.Int16,System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreTableBase.DeploymentName">
            <summary>
            The deployment name where the bulk copy process is occuring.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreTableBase.PartitionNumber">
            <summary>
            The parition number that has data that is being moved.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreTableBase.NewPartitionNumber">
            <summary>
            The new partition number that has data that is being moved. This is reserverd
            for variable partitioning.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreTableBase.DestinationServerName">
            <summary>
            The server where the bulk data is being moved to. It also contains working
            information such as status, tables to be moved, column names to be used, etc. 
            See the WebstorePartitionMoveMap and WebstoreBulkCopy classes.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreTableBase.DestinationDatabaseName">
            <summary>
            The database that resides on the destination server. See the DestinationServer
            for more details.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.#ctor">
            <summary>
            Default constructor initializes the deploymentName and partitionNumber to empty values.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.#ctor(System.String,System.Int16,System.String,System.String)">
            <summary>
            Minimum value list constructor.
            </summary>
            <param name="deploymentName"></param>
            <param name="partitionNumber"></param>
            <param name="destinationServer"></param>
            <param name="destinationDatabase"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.Insert">
            <summary>
            Call to insert a preliminary row into the WebstoreBulkCopy table.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.Get(System.Data.SqlClient.SqlDataReader)">
            <summary>
            Fills in the object with the data from the WebstoreBulkCopyIn table.
            Called from the collection class and from the Get() method.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.Update(System.DateTime,System.DateTime,System.Int64,System.String)">
            <summary>
            Call to update start time, end time, copy count and other variables as needed during processing.
            Pass in a MinTime for Start Time to leave the existing value "as is"
            Pass in a MinTime for End Time and the value will be set to NULL in the table.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.Update">
            <summary>
            Call to update WebstoreBulkCopy based on member variables.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.OnSqlRowsCopied(System.Object,System.Data.SqlClient.SqlRowsCopiedEventArgs)">
            <summary>
            Event Handler for SqlBuilkCopy RowsCopied. It is invokded every "NotifyAfter"
            number of records.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.Validate">
            <summary>
            Validate the internal variables of the class.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.Equals(Microsoft.Webstore.WstMoveData.WebstoreBulkCopy)">
            <summary>
            IComparable function to return true/false on a bulkCopy object being equal.
            </summary>
            <param name="bulkCopy"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.CompareTo(Microsoft.Webstore.WstMoveData.WebstoreBulkCopy)">
            <summary>
            Uses InstallOrder followed by table name order for sorting.
            </summary>
            <param name="bulkCopy"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.System#IComparable#CompareTo(System.Object)">
            <summary>
            Compares a generic object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.TableName">
            <summary>
            The table in the sql database that has data in the partition that is being moved.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.InstallOrder">
            <summary>
            The order the tables are bulk copied into.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.PartitionNumberColumnName">
            <summary>
            The column name that indicates the partition for the data. Used in the filter
            queries.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.SqlBulkCopyFilter">
            <summary>
            The filter used for the SqlBulkCopy command.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.CleanUpFilter">
            <summary>
            The filter used for cleaning up source FSSes once the data has been copied.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.ProgressMessage">
            <summary>
            This message is updated by the bulk copy process.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.CreateDateTime">
            <summary>
            The date/time when the WMO created this record.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.StartTime">
            <summary>
            The start time when the process begins to WebstoreBulkCopy the data into the table.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.EndTime">
            <summary>
            The end time when the process finishes the WebstoreBulkCopy.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.CopyCount">
            <summary>
            The number of rows that have been copied into the table.
            This value is continuously updated during the process.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.IsInCollection">
            <summary>
            Flag that indicates that this object is a member of the WebstoreBulkCopyCollection.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.IsChanged">
            <summary>
            Only an object that has changed is persisted.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection">
            <summary>
            Collection class for WebstoreBulkCopy
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.#ctor(System.String,System.Int16,System.String,System.String)">
            <summary>
            Full constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.Get">
            <summary>
            Get the data from the WebstoreBulkCopy table.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.Insert(System.String,System.String)">
            <summary>
            After adding each item to the collection call this method to insert them all.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.Delete">
            <summary>
            Delete all rows from the WebstoreBulkCopy table given the PartitionNumber.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.IndexOf(System.String,System.Int16,System.String)">
            <summary>
            Returns the index of the first object of the given name.
            </summary>
            <returns>
            The 0-based index of the first object with the name.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.Sort">
            <summary>
            Sorts the array.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.Reverse">
            <summary>
            Sorts the array in reverse order.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.ObjectAtIndex(System.Int32)">
            <summary>
            Returns the object at a given index in the internal array.
            used only by the enumerator.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.Contains(System.String,System.Int16,System.String)">
            <summary>
            Tests whether the collection contains an object of the given name.
            </summary>
            <returns>
            true if the collection contains an object identified by the name;
            false if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            required for ICollection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.Add(Microsoft.Webstore.WstMoveData.WebstoreBulkCopy)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.Remove(System.String,System.Int16,System.String)">
            <summary>
            Removes an object from the object collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.GetEnumerator">
            <summary>
            Gets the IEnumerator for this WmoDatabaseCollection.  This is meant to
            support the foreach statement.
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.Clear">
            <summary>
            remove all elements
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.Objects">
            <summary>
            Access to the internal array
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.Count">
            <summary>
            count of objects in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.Item(System.String,System.Int16,System.String)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.IsSynchronized">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.SyncRoot">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.WebstoreBulkCopyEnumerator">
            <summary>
            This class implements the IEnumerator over a WebstoreBulkCopyCollection
            in support of the "foreach" keyword
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.WebstoreBulkCopyEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.WebstoreBulkCopyEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            Must be called before accessing the Current element.
            </summary>
            <returns>
            true if enumerator successfully advanced to next element;
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.WebstoreBulkCopyEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap">
            <summary>
            Defines the elements existing in the application database WebstorePartitionMoveMap
            table.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.GetConnectionString(System.String,System.String)">
            <summary>
            Based on where this code is compiled, the connection string is retrieved from the
            WmoSqlAgentDatabase.GetConnectionString or from the WstSqlCmdHelper.GetConnectionString.
            </summary>
            <param name="serverName"></param>
            <param name="databaseName"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.#ctor">
            <summary>
            The minimum constructor requires nothing, DeploymentName and PartitionNumber
            are given default values.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.#ctor(System.String,System.Int16,System.String,System.String)">
            <summary>
            Constructor that defines the essential elements of the class. Given these details,
            a call to the database through Get() will get any additional details.
            </summary>
            <param name="deploymentName"></param>
            <param name="partitionNumber"></param>
            <param name="destinationServer"></param>
            <param name="destinationDatabase"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.Insert">
            <summary>
            Used by the WMO, this method inserts the values needed for the BulkCopy process.
            This includes the names of the partition columns, the needs replication columns,
            and the source and destination.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.Get">
            <summary>
            Get the data from the WebstorePartitionMoveMap table.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.CheckForWebstorePartitionMoveMapTable">
            <summary>
            Check the database for the correct objects.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.Get(System.Data.SqlClient.SqlDataReader)">
            <summary>
            Fills in the object with the data from the WebstorePartitionMoveMap table.
            Called from the collection class and from the Get() method.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.Update(Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus,System.String)">
            <summary>
            Call to update status while moving data.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.GetSqlBulkCopyFilter(Microsoft.Webstore.WstMoveData.WebstoreBulkCopy)">
            <summary>
            Get the filter used for SqlBulkCopy. The filter uses the required field
            PartitionNumberColumnName, and the optional field needsReplicationColumnName
            along with the IsMultiMaster column to build a select clause for SqlBulkCopy.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.GetCleanUpFilter(Microsoft.Webstore.WstMoveData.WebstoreBulkCopy)">
            <summary>
            Get the filter used for CleanUp of source FSSes after the data has been copied.
            The filter uses the required field PartitionNumberColumnName and CleanBatchSize
            to build a delete clause for SqlBulkCopy.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.SourceServerName">
            <summary>
            The SourceServerName is the location where the WebstoreBulkCopy is coming from.
            It is also used for status updates.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.SourceDatabaseName">
            <summary>
            The SourceDatabaseName is the location where the WebstoreBulkCopy is coming from.
            It is also used for status updates.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.NeedsReplicationColumnName">
            <summary>
            The column name used for MultiMaster replication. The query that generates the
            SqlBulkCopy filter sets this value to false if IsMultuMaster is true.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.IsMultiMaster">
            <summary>
            Indicates that the deployment is MultiMaster. Used for generating the filter
            used by SqlBulkCopy.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.SqlBulkCopyBatchSize">
            <summary>
            Batch size used during SqlBulkCopy. Default is 1000 rows.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.SqlBulkCopyTimeOut">
            <summary>
            Time out value used during bulk copy processing. Default is 8 hours (28800)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.CleanUpBatchSize">
            <summary>
            Used during cleanup. This is the number of rows to delete at a time. Default is 1000 rows.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.CleanUpDelay">
            <summary>
            The delay string used in the Cleanup filter. The default is 1/10th of a second.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.Status">
            <summary>
            Status values maintained by the process in the WebstorePartitionMoveMap table on
            the local application database server.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.StatusMessage">
            <summary>
            Freeform text that gives the moving status for this partition.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.CreateDateTime">
            <summary>
            When the MoveMap row was created. Read only.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.UpdateDateTime">
            <summary>
            The last time the MoveMap row was updated. Updates only occurs for Status
            and StatusMessage updates.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.IsInCollection">
            <summary>
            Determines if this object is part of the WebstorePartitionMoveMapCollection
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstMoveData.MoveDataException">
            <summary>
            MoveData specific exceptions derived from Exception.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.MoveDataException.#ctor">
            <summary>
            Basic exception
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.MoveDataException.#ctor(System.String)">
            <summary>
            Exception with message
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.MoveDataException.#ctor(System.String,System.Exception)">
            <summary>
            Exception with message and innerException
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstMoveDataApplicationSprocs.WspCreateMoveDataLock(System.String,System.Int32@)">
            <summary>
             Create a lock for WstMoveData.exe so more then one copy cannot run at one time.
            </summary>
            <param name="DeploymentName"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstMoveDataApplicationSprocs.WspDeleteWebstoreBulkCopy(System.String,System.Int16)">
            <summary>
             [ExecuteType(ExecuteNonQuery)]
             Delete rows from the WebstoreBulkCopy table from the passed in Deployment and Partition
            </summary>
            <param name="DeploymentName"></param>
            <param name="PartitionNumber"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstMoveDataApplicationSprocs.WspDeleteWebstorePartitionMoveMap">
            <summary>
             [ExecuteType(ExecuteNonQuery)]
             Delete rows from the WebstorePartitionMoveMap table based on the PK.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstMoveDataApplicationSprocs.WspGetAllWebstorePartitionMoveMap(System.String)">
            <summary>
             [ExecuteType(ExecuteNonQuery)]
             Return rows from the WebstorePartitionMoveMap table based on the DeploymentName.
            </summary>
            <param name="DeploymentName"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstMoveDataApplicationSprocs.WspGetSelectList(System.String,System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Returns a select list of all column names from a table.
            </summary>
            <param name="TableName"></param>
            <param name="PartitionNumberColumnName"></param>
            <param name="PartitionNumberColumnValue"></param>
            <param name="NeedsReplicationColumnName"></param>
            <param name="IsMultiMaster"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstMoveDataApplicationSprocs.WspGetWebstoreBulkCopy(System.String,System.Int16)">
            <summary>
             [ExecuteType(ExecuteNonQuery)]
             Return a rowset from the WebstoreBulkCopy table based on the
             DeploymentName and PartitionNumber
            </summary>
            <param name="DeploymentName"></param>
            <param name="PartitionNumber"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstMoveDataApplicationSprocs.WspGetWebstorePartitionMoveMap(System.String,System.Int16)">
            <summary>
             [ExecuteType(ExecuteNonQuery)]
             Return a row from the WebstorePartitionMoveMap table based on the DeploymentName and PartitionNumber
            </summary>
            <param name="DeploymentName"></param>
            <param name="PartitionNumber"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstMoveDataApplicationSprocs.WspGetWebstorePartitionMoveMapStatus(System.String,System.Int16)">
            <summary>
             [ExecuteType(ExecuteNonQuery)]
             Return a row from the WebstorePartitionMoveMap table based on the DeploymentName and PartitionNumber
            </summary>
            <param name="DeploymentName"></param>
            <param name="PartitionNumber"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstMoveDataApplicationSprocs.WspInsertWebstoreBulkCopy(System.String,System.Int16,System.String,System.Int32,System.Int16,System.String)">
            <summary>
             [ExecuteType(ExecuteNonQuery)]
             Insert WebstoreBulkCopy
            </summary>
            <param name="DeploymentName"></param>
            <param name="PartitionNumber"></param>
            <param name="TableName"></param>
            <param name="InstallOrder"></param>
            <param name="NewPartitionNumber"></param>
            <param name="PartitionNumberColumnName"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstMoveDataApplicationSprocs.WspInsertWebstorePartitionMoveMap(System.String,System.Int16,System.Int16,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.String)">
            <summary>
             [ExecuteType(ExecuteNonQuery)]
             Insert WebstorePartitionMoveMap
            </summary>
            <param name="DeploymentName"></param>
            <param name="PartitionNumber"></param>
            <param name="NewPartitionNumber"></param>
            <param name="SourceServer"></param>
            <param name="SourceDatabase"></param>
            <param name="DestinationServer"></param>
            <param name="DestinationDatabase"></param>
            <param name="NeedsReplicationColumnName"></param>
            <param name="IsMultiMaster"></param>
            <param name="SqlBulkCopyBatchSize"></param>
            <param name="SqlBulkCopyTimeOut"></param>
            <param name="CleanUpBatchSize"></param>
            <param name="CleanUpDelay"></param>
            <param name="Status"></param>
            <param name="StatusMessage"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstMoveDataApplicationSprocs.WspUpdateWebstoreBulkCopy(System.String,System.Int16,System.String,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime,System.Int64,System.String)">
            <summary>
             [ExecuteType(ExecuteNonQuery)]
             Update WebstoreBulkCopy
            </summary>
            <param name="DeploymentName"></param>
            <param name="PartitionNumber"></param>
            <param name="TableName"></param>
            <param name="StartTime"></param>
            <param name="EndTime"></param>
            <param name="CopyCount"></param>
            <param name="ProgressMessage"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstMoveDataApplicationSprocs.WspUpdateWebstorePartitionMoveMap(System.String,System.Int16,System.Int16,System.String)">
            <summary>
             [ExecuteType(ExecuteNonQuery)]
             Update WebstorePartitionMoveMap
            </summary>
            <param name="DeploymentName"></param>
            <param name="PartitionNumber"></param>
            <param name="Status"></param>
            <param name="StatusMessage"></param>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCommand">
            <summary>
            WmoCommand
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommand.#ctor">
            <summary>
            Handles setting up logging and the WmoStatusEvent handler.
            </summary>
        </member>
        <member name="E:Microsoft.Webstore.Management.Wmo.WmoCommand.WmoStatusEvent">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommand.InXmlPath">
            <summary>
            Specifies the incoming XML file.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommand.OutXmlPath">
            <summary>
            Specifies the outgoing XML file.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommand.Reason">
            <summary>
            The reason for the command. Logged to the Audit History
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommand.CmdObjectType">
            <summary>
            The type of the object, for example Database, FailSafeSet, Cluster, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommand.CmdOperation">
            <summary>
            The operation to be perfored, for example Demote.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommand.ObjectName">
            <summary>
            As in DataServer.Name = MyServer1234
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommand.AdditionalArguments">
            <summary>
            Arguments used for objects that are specialized.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommand.LogFilePath">
            <summary>
            The location where logging information is stored.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommand.OverWrite">
            <summary>
            Flag to indicate that the object can be overwritten or not. If false, a
            warning will state that the object already exists.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommand.AuditUID">
            <summary>
            Audituid
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommand.IsUTC">
            <summary>
            IsUTC
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommand.FromTime">
            <summary>
            FromTime
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommand.ToTime">
            <summary>
            ToTime
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommand.Count">
            <summary>
            Count
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCommandCluster">
            <summary>
            This class is used for Cluster manipulation, Import and Export
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandCluster.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandCluster.Import">
            <summary>
            Import New Cluster
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandCluster.Purge">
            <summary>
            Purge Cluster
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandCluster.Export">
            <summary>
            Export Cluster Info
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandCluster.ClusterName">
            <summary>
            ClusterName
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase">
            <summary>
            class for WmoCommandDatabase
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.#ctor">
            <summary>
            WmoCommandDatabase
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.AddConfig">
            <summary>
            add secondary configs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.Import">
            <summary>
            Import New Database Info
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.Setup">
            <summary>
            Setup Database
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.Drop">
            <summary>
            Drop Database
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.SetupRepl">
            <summary>
            Setup replication from database
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.DropRepl">
            <summary>
            Drop replication from database
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.Offline">
            <summary>
            Mark Database Offline
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.NeedsRepair">
            <summary>
            Mark Database for NeedsRepair
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.Repair">
            <summary>
            Repair a Database that has been marked needsrepair.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.Online">
            <summary>
            Mark Database Online
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.Standby">
            <summary>
            Mark Database Standby
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.Promote">
            <summary>
            Promote Database
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.Demote">
            <summary>
            Demote Database
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.MarkAndTestRepl">
            <summary>
            Mark and Test Replication
            </summary>
            <remarks> Configurable Properties: PublishingServerName:    The server hosting the publishing database. PublishingDBName:   The publishing database. SubscribingServerName: The server hosting the subscribing database. If a subscribing database/server is not specified, all outgoing replication streams from the publisher are tested. SubscribingDBName: The subscribing database.</remarks>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.MarkNeedsRepl">
            <summary>
            For MultiMaster a database, will reset the NeedsReplication column between the given dates.
            This forces the row to replicate.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.DefaultStatus">
            <summary>
            Set Default Status for the database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.History">
            <summary>
            Admin History of a database
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.Status">
            <summary>
            Status of a database
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.DeploymentName">
            <summary>
            DeploymentName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.ServerName">
            <summary>
            ServerName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.DatabaseName">
            <summary>
            DatabaseName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.PublishingServerName">
            <summary>
            PublishingServerName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.PublishingDBName">
            <summary>
            PublishingDBName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.SubscribingServerName">
            <summary>
            SubscribingServerName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.SubscribingDBName">
            <summary>
            SubscribingDBName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.DataCenterName">
            <summary>
            DataCenterName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.SqlFailSafeSetID">
            <summary>
            SqlFailSafeSetID. The member variable value defaults to -1.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.IsDropPhysical">
            <summary>
            IsDropPhysical
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.IsNoBackupRestore">
            <summary>
            IsNoBackupRestore
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.IsForceRepair">
            <summary>
            IsForceRepair
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.IsForceNeedsRepair">
            <summary>
            IsForceNeedsRepair
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.IsForceOffline">
            <summary>
            IsForceOffline
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.IsForceOnline">
            <summary>
            IsForceOnline
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.IsForcePromote">
            <summary>
            IsForcePromote
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.IsForceDropRepl">
            <summary>
            IsForceDropRepl
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.IsJobsOnly">
            <summary>
            IsJobsOnly
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.IsReplicationOnly">
            <summary>
            IsReplicationOnly
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.StartTime">
            <summary>
            StartTime
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.EndTime">
            <summary>
            EndTime
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.NewDefaultStatus">
            <summary>
            NewDefaultStatus is used to determine what status to return to when using server level commands.
            The value must be "Online" or "Standby"
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCommandDatabaseTemplate">
            <summary>
            class for WmoCommandDatabaseTemplate
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabaseTemplate.#ctor">
            <summary>
            WmoCommandDatabase
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabaseTemplate.Import">
            <summary>
            Import New Database Template Info
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabaseTemplate.Export">
            <summary>
            Export Database Template Info
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabaseTemplate.Purge">
            <summary>
            Purge specified Database Template or any unattached database template.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabaseTemplate.AssignSqlFss">
            <summary>
            Assign DatabaseTemplate(s) to SqlFailSafeSet(s)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabaseTemplate.AssignServer">
            <summary>
            Assign DatabaseTemplate(s) to SqlFailSafeSets or DataServers.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabaseTemplate.CustomBackupScript">
            <summary>
            Set the Custom Backup string for Litespeed
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabaseTemplate.CustomRestoreScript">
            <summary>
            Set the Custom Restore string for Litespeed
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabaseTemplate.DatabaseTemplateName">
            <summary>
            DatabaseTemplateName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabaseTemplate.DeploymentName">
            <summary>
            DeploymentName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabaseTemplate.SqlFailSafeSetId">
            <summary>
            SqlFailSafeSetId
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabaseTemplate.ServerName">
            <summary>
            ServerName, used for assigning a distribution database template to a server.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabaseTemplate.Parameter">
            <summary>
            Parameter is used for the custom Litespeed parameters.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCommandDataCenter">
            <summary>
            This class is used for DataCenter Import, Export and Purge
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDataCenter.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDataCenter.Import">
            <summary>
            Import New DataCenter
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDataCenter.Purge">
            <summary>
            Purge DataCenter
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDataCenter.Export">
            <summary>
            Export DataCenter Info
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDataCenter.DataCenterName">
            <summary>
            DataCenterName
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment">
            <summary>
            WmoCommandDeployment
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.Import">
            <summary>
            Import Deployment
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.Setup">
            <summary>
            Setup Deployment
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.Export">
            <summary>
            Export Deployment
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.Upgrade">
            <summary>
            Run new manifests scripts from new manifest. Called after UpdateVersion has been called.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.Downgrade">
            <summary>
            Run downgrade scripts in order to restore a system to previous version.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.UpdateVersion">
            <summary>
            Update Deployment's Manifest Version as part of Deployment Upgrade
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.List">
            <summary>
            Lists out all Deployments.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.Status">
            <summary>
            Get Status of this deployment into an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.Drop">
            <summary>
            Drop Deployment
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.Settings">
            <summary>
            Modify/View Deployment Settings
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.History">
            <summary>
            Admin History of a deployment
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.Allocate">
            <summary>
            Auto Allocate
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.AddAccount">
            <summary>
            Add an account to the deployment role. 
            </summary>
            <remarks>Configurable properties: "DeploymentName" - The deployment name needed for setup with the original manifest. "UserName" - The account username (eg. domain\username). “SecurityRole" - The security role to add the account to. "Reason" - The reason for adding the account.</remarks>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.DropAccount">
            <summary>
            Drop Account from ConfigDB Role
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.UpdateTicket">
            <summary>
            Update Deployment Ticket
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.EnableGeo">
            <summary>
            Drop Account from ConfigDB Role
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.DisableGeo">
            <summary>
            Drop Account from ConfigDB Role
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.UpdateGeoInfo">
            <summary>
            Update Geo information. Used for mass updates.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.DeploymentName">
            <summary>
            DeploymentName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.SettingName">
            <summary>
            SettingName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.NewValue">
            <summary>
            NewValue
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.NewManifestVersion">
            <summary>
            NewManifestVersion
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.UserName">
            <summary>
            UserName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.SecurityRole">
            <summary>
            SecurityRole
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.IsVerbose">
            <summary>
            IsVerbose
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.IsReplicationOnly">
            <summary>
            IsReplicationOnly
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.IsForce">
            <summary>
            IsForce
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.IsReplTearDown">
            <summary>
            IsReplTearDown
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.SqlFSSNum">
            <summary>
            SqlFSSNum
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.NoAutoAllocate">
            <summary>
            NoAutoAllocate
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.IsRollingUpgrade">
            <summary>
            DEPRECATED. Please use IsRolling.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.IsRolling">
            <summary>
            IsRolling - Used during dep upgrade or downgrade. Indicates that each database
            in the FSS must be marked offline before work is performed then marked back
            online before moving to the next database.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.RemoveGeoInfo">
            <summary>
            Used with UpdateGeoInfo. If specified, and the deployment is not GeoEnabled, it will
            remove all GeoInfo associated with a deployment.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment">
             <summary>
            
             </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment.#ctor">
            <summary>
            WmoCommandEnvironment
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment.Settings">
            <summary>
            View/Change Environment Settings
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment.Genregfile">
            <summary>
            Generate Client Registry File
            THIS CODE IS ONLY REQUIRED FOR NATIVE SUPPORT. 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment.AddAccount">
            <summary>
            Add Account to ConfigDB Role
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment.DropAccount">
            <summary>
            Drop Account from ConfigDB Role
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment.Status">
            <summary>
            Get Status of this Site into an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment.History">
            <summary>
            Admin History
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment.Version">
            <summary>
            Version information for the Wmo.DLL, the Wst.exe and WstConfig database.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment.SettingName">
            <summary>
            SettingName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment.NewValue">
            <summary>
            NewValue
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment.UserName">
            <summary>
            UserName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment.SecurityRole">
            <summary>
            SecurityRole
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment.RegfilePath">
            <summary>
            RegfilePath
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment.DataCenter">
            <summary>
            DataCenter
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment.IsVerbose">
            <summary>
            IsVerbose
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet">
            <summary>
            Summary description for WmoCommandFailSafeSet.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.Import">
            <summary>
            Imports an XML Delta file that includes and Sql and File Fail
            Safe Set nodes. Then registers them with the WstConfig.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.Setup">
            <summary>
            Calls Deploy on the items registered from Import.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.Purge">
            <summary>
            Purge FailSafeSet
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.Drop">
            <summary>
            Drops a sql fail safe set for a variable partitioned application.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.DefaultPrimary">
            <summary>
            Set Default Primary for a FailSafeSet
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.DefaultGeoPartner">
            <summary>
            Set Default GeoPartner for a FailSafeSet
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.MovePrimary">
            <summary>
            Set Default GeoPartner for a FailSafeSet
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.Offline">
            <summary>
            Marks offline all databases in the fail safe set.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.Online">
            <summary>
            Marks online all databases in the fail safe set.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.Promote">
            <summary>
            Promotes the Default Primary database in the fail safe set.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.Demote">
            <summary>
            Demotes all databases in the fail safe set.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.SetupRepl">
            <summary>
            Setup replication for the entire fail safe set
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.DropRepl">
            <summary>
            Drop replication for sql fail safe set.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.MarkNeedsRepl">
            <summary>
            For MultiMaster, will reset the NeedsReplication column between the given dates.
            This forces the row to replicate. Works on all databases in the fail safe set.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.History">
            <summary>
            Admin History of a failsafeset
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.Updateinfo">
            <summary>
            Update Database or Fileshare Locations
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.ChangeWitness">
            <summary>
            Changes the witness server for this Failsafeset
            for a given mirroring deployment
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.SyncMirroring">
            <summary>
            For a FSS in a Mirroring Deployment, this updates the status and
            ensures the data is accurate
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.DeploymentName">
            <summary>
            DeploymentName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.NewPrimaryName">
            <summary>
            The location of the Primary database in the failsafe set. The string is in the form "ServerName\DatabaseName".
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.NewGeoPartnerName">
            <summary>
            The location of the GeoPartner database in the datacenter and failsafe set. The string is in the form "ServerName\DatabaseName".
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.ServerName">
            <summary>
            The name of a Server
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.DatabaseName">
            <summary>
            The name of a Database
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.SQLFSSNum">
            <summary>
            SQLFSSNum
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.FileFSSNum">
            <summary>
            FileFSSNum
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.IsForceDropRepl">
            <summary>
            IsForceDropRepl
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.IsForceOffline">
            <summary>
            IsForceOffline
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.IsForcePromote">
            <summary>
            IsForcePromote
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.StartTime">
            <summary>
            StartTime
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.EndTime">
            <summary>
            EndTime
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.NewWitnessServerName">
            <summary>
            The new witness server name for mirroring deployment
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.#ctor">
            <summary>
            WmoCommandFileShare
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.Import">
            <summary>
            Add Fileshare
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.Setup">
            <summary>
            Setup FileShare
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.Drop">
            <summary>
            Drop Fileshare
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.Offline">
            <summary>
            Mark Fileshare Offline
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.NeedsRepair">
            <summary>
            Mark Fileshare for Repair
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.Online">
            <summary>
            Mark Fileshare Online
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.Promote">
            <summary>
            Promote Fileshare
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.Demote">
            <summary>
            Demote Fileshare
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.Repair">
            <summary>
            Repair Fileshare 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.Updateinfo">
            <summary>
            Update Fileshare Location 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.History">
            <summary>
            Admin History of a fileshare
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.DeploymentName">
            <summary>
            DeploymentName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.ServerName">
            <summary>
            ServerName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.FileSharePath">
            <summary>
            FileSharePath
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.IsDelete">
            <summary>
            IsDelete
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.IsForceRepair">
            <summary>
            IsForceRepair
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.FileFSSNum">
            <summary>
            FileFSSNum
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCommandJobs">
            <summary>
            WmoCommandJobs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandJobs.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandJobs.Import">
            <summary>
            Imports/update Jobs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandJobs.Export">
            <summary>
            Export view of Jobs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandJobs.Drop">
            <summary>
            Drop job/JobSchedule
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandJobs.Disable">
            <summary>
            Disable the job
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandJobs.Enable">
            <summary>
            Enable the job
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandJobs.History">
            <summary>
            Admin History for jobs
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandJobs.JobName">
            <summary>
            The name of the jobs
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandJobs.ScheduleNumber">
            <summary>
            Job schedule number
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCommandManifest">
             <summary>
            
             </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandManifest.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandManifest.Import">
            <summary>
            Import a Manifest Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandManifest.Export">
            <summary>
            Exports the Manifest. Uses DoExportSource and DoExportGeneratedObjects
            to determine if these files should be created as part of the export.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandManifest.List">
            <summary>
            Lists out all Manifests and the deployments that use them.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandManifest.Diff">
            <summary>
            Report the differences between two manifest versions.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandManifest.Purge">
            <summary>
            Purge manifest
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandManifest.History">
            <summary>
            Admin History of a manifest
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandManifest.ManifestName">
            <summary>
            ManifestName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandManifest.ManifestVersion">
            <summary>
            ManifestVersion
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandManifest.ManifestVersionForDiff">
            <summary>
            ManifestVersionForDiff
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandManifest.DoExportSource">
            <summary>
            Flag to indicate whether to export the source or not.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandManifest.DoExportGeneratedObjects">
            <summary>
            Flag to indicate whether to export the generate objects source or not.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandManifest.ExportManifestVersion">
            <summary>
            The user has the option of choosing what version of the Manifest
            to export. If not specified, the most recent Manifest is used.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandManifest.IsDowngrade">
            <summary>
            Used with manifest Diff. If True, it specifies that the diff should be generated for
            a downgrade, not an upgrade.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCommandMonitoring">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandMonitoring.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandMonitoring.Import">
            <summary>
            Import a Monitoring Configuration Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandMonitoring.Export">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandMonitoring.DeleteObject">
            <summary>
            delete object
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandMonitoring.DeleteMapping">
            <summary>
            delete mapping
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandMonitoring.History">
            <summary>
            Admin History of a monitoring configuration
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandMonitoring.MonitoringObjectName">
            <summary>
            Monitoring Object Name
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandMonitoring.MonitoringObjectType">
            <summary>
            Monitoring Object Type
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandMonitoring.MappingObjectType">
            <summary>
            Mapping Object Type
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandMonitoring.MappingObjectSourceName">
            <summary>
            Monitoring ServerRole
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandMonitoring.MonitoredDatumName">
            <summary>
            Monitoring MonitoredDatumName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandMonitoring.AlertRuleName">
            <summary>
            Monitoring AlertRuleName
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCommandPartition">
             <summary>
            
             </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.Import">
            <summary>
            Imports an XML Delta file that includes new datapartition mapping. 
            Then registers them with the WstConfig.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.Map">
            <summary>
            Maps a DataPartition to a Sql and/or File Fail Safe Set.
            Each map happens one at a time.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.Cleanup">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.ReadOnly">
            <summary>
            Mark DataPartition ReadOnly
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.ReadWrite">
            <summary>
            Mark DataPartition ReadWrite
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.Status">
            <summary>
            View Data Partition Status
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.MoveData">
            <summary>
            Move Data 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.History">
            <summary>
            Admin History of a data partition
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.DeploymentName">
            <summary>
            DeploymentName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.DataPartition">
            <summary>
            DataPartition
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.NewSqlFSSNum">
            <summary>
            NewSqlFSSNum
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.OldSqlFSSNum">
            <summary>
            OldSqlFSSNum
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.NewFileFSSNum">
            <summary>
            NewFileFSSNum
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.OldFileFSSNum">
            <summary>
            OldFileFSSNum
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.IsForce">
            <summary>
            IsForce
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.Verbose">
            <summary>
            Verbose
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.BatchSize">
            <summary>
            BatchSize
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.CleanupInterval">
            <summary>
            CleanupInterval
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.IsForceMoveData">
            <summary>
            When true, the WstConfig database is updated to show that the move data is complete,
            without actually moving data.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.IsForceCleanData">
            <summary>
            When true, the WstConfig database is updated to show that the clean data is complete,
            without actually cleaning data.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.BulkCopyTimeout">
            <summary>
            Time out value used during bulk copy processing. Default is 8 hours (28800)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.NumThreads">
            <summary>
            NumThreads
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.Interval">
            <summary>
            Interval
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCommandServer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.Offline">
            <summary>
            Mark Server Offline
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.Online">
            <summary>
            Mark Server Online
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.NeedsRepair">
            <summary>
            Mark Server for Repair
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.Repair">
            <summary>
            Repair Server 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.Promote">
            <summary>
            Promote Server
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.Demote">
            <summary>
            Demote Server
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.List">
            <summary>
            List all servers into an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.Status">
            <summary>
            Get Status of servers into an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.Import">
            <summary>
            Import New Server 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.Purge">
            <summary>
            Purge Server
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.History">
            <summary>
            Admin History of a server
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.Reboot">
            <summary>
            Reboot the server
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.CleanRebootStatus">
            <summary>
            Reboot the server
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.Export">
            <summary>
            Export Servers
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.Suppress">
            <summary>
            Suppress Server
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.Unsuppress">
            <summary>
            Unuppress Server
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandServer.ServerName">
            <summary>
            ServerName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandServer.IsNoPromote">
            <summary>
            IsNoPromote
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandServer.IsForceOffline">
            <summary>
            IsForceOffline
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandServer.IsForceOnline">
            <summary>
            IsForceOnline
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandServer.IsForceNeedsRepair">
            <summary>
            Used to force the application database into a needsrepair state without attempting to
            promote (in the case of a Primary NeedsRepair call), drop jobs or drop replication.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandServer.IsJobsOnly">
            <summary>
            IsJobsOnly
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandServer.IsReplicationOnly">
            <summary>
            IsReplicationOnly
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandServer.IsVerbose">
            <summary>
            IsVerbose
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandServer.Topology">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandServer.IsRebootOnly">
            <summary>
            Whether the server reboot command Reboot only. 
            If true then there will be no pre/post QC checks done.
            Only FSS locks will be taken.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandServer.RebootTimeout">
            <summary>
            The timeout value for reboot command.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCommandServerRole">
            <summary>
            The command class to import/export server roles
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServerRole.#ctor">
            <summary>
            Default constructor for WmoCommandServerRole
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServerRole.Import">
            <summary>
            Imports/update server roles 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServerRole.Export">
            <summary>
            Export view of the server roles
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServerRole.Purge">
            <summary>
            purge a server role
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandServerRole.Role">
            <summary>
            The role of the server.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCommandSettings">
            <summary>
            The command class to import/export centralized settings
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandSettings.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandSettings.Import">
            <summary>
            Imports/update centralized settings 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandSettings.Export">
            <summary>
            Export view of the centralized settings
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoXml.XmlFileName">
            <summary>
            Once the Xml file has been loaded and validated, make the file
            name available to subsequent classes that use this abstract class.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoXml.XmlDirectory">
            <summary>
            XmlDirectory
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoXml.RawXml">
            <summary>
            Once the Xml file has been loaded and validated, make the raw
            Xml available to subsequent classes that use this utility class.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoXml.XmlDoc">
            <summary>
            Once the Xml file has been loaded and validated, make the
            XmlDocument available to subsequent classes.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoXmlBuilder">
            <summary>
            Summary description for Class1.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoXmlBuilder.#ctor(System.String)">
            <summary>
            Constructor for XML that requires an XSD
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoXmlBuilder.#ctor(System.String,System.String)">
            <summary>
            Constructor 
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoAdminLock">
            <summary>
            Summary description for WmoAdminLock.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoConfig">
            <summary>
            Class for WmoConfig
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoNamedObject">
            <summary>
            Base class for objects identified by name
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoNamedObject.m_name">
            <summary>
            Name of the object
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoNamedObject.m_isInCollection">
            <summary>
            Whether the object is inside a collection
            Names of objects inside a collection can't be changed
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoNamedObject.isUpdated">
            <summary>
            Determines whether or not this item has been updated or not
            </summary>        
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNamedObject.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNamedObject.Name">
            <summary>
            name of the object
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNamedObject.IsInCollection">
            <summary>
            whether this object is in a collection
            (set by the add/remove methods for collections
            determines whether the name can be set)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNamedObject.IsUpdated">
            <summary>
            Determines whether or not this item has been updated or not
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoConfig.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoConfig.GetCentralizedSettingOverride(System.String,System.Object)">
            <summary>
            Returns the Setting that matches the settingEntry name. If the settingEntry does not exist
            in the WebstoreMetaData.WebstoreSettings class, it will return the default.
            </summary>
            <param name="settingEntry"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoConfig.GetSqlFailSafeSet(System.String,System.String)">
            <summary>
            Find and return the WmoSqlFailSafeSet object which contains the given database
            If it doesn't exist, throw exception.
            </summary>
            <param name="serverName"></param>
            <param name="dbName"></param>
            <returns>WmoSqlFailSafeSet Object which contains the given database</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoConfig.GetFileFailSafeSet(System.String,System.String)">
            <summary>
            Find and return the WmoFileFailSafeSet object which contains the given fileshare
            If it doesn't exist, throw exception.
            </summary>
            <param name="serverName"></param>
            <param name="fileSharePath"></param>
            <returns>WmoFileFailSafeSet Object which contains the given fileshare</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoConfig.UpdateAccount(System.String,System.Boolean)">
            <summary>
            Adds an account or drops an account from the WstClientLib role.
            </summary>
            <param name="userName"></param>
            <param name="bAdd"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoConfig.WaitForClientPolling(System.Boolean)">
            <summary>
            Waits for client polling. If bWait = false, the user will be informed they should
            wait, but no wait will actually occur.
            </summary>
            <param name="bWait">true if can't continue until clients refreshed</param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoConfig.WaitForActivePrimaryProcess(System.String,System.String)">
            <summary>
            Waits for Primary Active Connection to go down to Zero.
            </summary>
        </member>
        <member name="E:Microsoft.Webstore.Management.Wmo.WmoConfig.WmoStatusEvent">
            <summary>
            Status Events
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoConfig.Singleton">
            <summary>
            Singleton object. This is available no matter where in the code base you are.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoConfig.ThreadPool">
            <summary>
            ThreadPool
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoConfig.Manifests">
            <summary>
            collection of manifests
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoConfig.Deployments">
            <summary>
            collection of Deployments
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoConfig.ServerRoles">
            <summary>
            collection of Server Roles
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoConfig.DataServers">
            <summary>
            collection of SqlServers
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoConfig.DataCenters">
            <summary>
            Collection of DataCenters
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoConfig.Clusters">
            <summary>
            collection of Clusters
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoConfig.DatabaseTemplates">
            <summary>
            Collection of DatabaseTemplates
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoConfig.Monitoring">
            <summary>
            Monitoring Configuration
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoConfig.Environment">
            <summary>
            Environment
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoConfig.ConnectionString">
            <summary>
            Connection String
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDTC">
            <summary>
            Class for WmoDTC
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDTC.#ctor">
            <summary>
            DTCExecute helper
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDTC.Dispose">
            <summary>
            DTCExecute helper
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDTC.DTCExecute(System.Object,System.Object[],System.Reflection.MethodBase)">
            <summary>
            DTCExecute helper
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum">
            <summary>
            Enumerations used by Wmo
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MaxServerNameLength">
            <summary>
            Constants
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.StrToSetupStep(System.String)">
            <summary>
            Convert a String into a WmoEnum.SetupStep.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.SetupStepToStr(Microsoft.Webstore.Management.Wmo.WmoEnum.SetupStep)">
            <summary>
            Convert a WmoEnum.SetupStep into a String.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.PartitioningTypeToStr(Microsoft.Webstore.Management.Wmo.WmoEnum.PartitioningType)">
            <summary>
            translating partitiontype to string
            </summary>summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.StrToSecondaryType(System.String)">
            <summary>
            translating string to secondarytype
            </summary>summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.SecondaryTypeToStr(Microsoft.Webstore.Management.Wmo.WmoEnum.SecondaryType)">
            <summary>
            translating secondarytype to string
            </summary>summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.CommandTypeToStr(Microsoft.Webstore.Management.Wmo.WmoEnum.CommandType)">
            <summary>
            translating commandtype to string
            </summary>summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.StrToCommandType(System.String)">
            <summary>
            Translating CommandType to string
            </summary>summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.StrToDBStatus(System.String)">
            <summary>
            Convert a string into a WmoEnum.DBStatus
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.StrToDefaultDBStatus(System.String)">
            <summary>
            Convert a string into a WmoEnum.DBStatus
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatusToStr(Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus)">
            <summary>
            Convert a WmoEnum.DBStatus into a string.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.StrToFailSafeSetStatus(System.String)">
            <summary>
            Convert a string into a WmoEnum.FailSafeSetStatus
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.AdminLockResourceTypeToStr(Microsoft.Webstore.Management.Wmo.WmoEnum.AdminLockResourceType)">
            <summary>
            Convert a WmoEnum.AdminLockResourceType into a string.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.AdminLockResourceTypeToVerboseStr(Microsoft.Webstore.Management.Wmo.WmoEnum.AdminLockResourceType)">
            <summary>
            Convert a WmoEnum.AdminLockResourceType into a verbose string.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.StrToFileShareStatus(System.String)">
            <summary>
            Convert a string into a WmoEnum.FileShareStatus
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.FileShareStatusToStr(Microsoft.Webstore.Management.Wmo.WmoEnum.FileShareStatus)">
            <summary>
            Convert a WmoEnum.FileShareStatus into a string.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.StrToPartitionStatus(System.String)">
            <summary>
            Convert a String into a WmoEnum.PartitionStatus
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.PartitionStatusToStr(Microsoft.Webstore.Management.Wmo.WmoEnum.PartitionStatus)">
            <summary>
            Convert a WmoEnum.PartitionStatus into a string.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.StrToBool(System.String,System.Boolean)">
            <summary>
            translating string to bool.
            </summary>summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.StrToPublicationType(System.String)">
            <summary>
            Convert a String into a WmoEnum.PublicationType.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.PublicationTypeToStr(Microsoft.Webstore.Management.Wmo.WmoEnum.PublicationType)">
            <summary>
            Convert a WmoEnum.PublicationType into a String.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.StrToReplCallMethod(System.String)">
            <summary>
            Convert a String into a WmoEnum.ReplCallMethod.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.ReplCallMethodToStr(Microsoft.Webstore.Management.Wmo.WmoEnum.ReplCallMethod)">
            <summary>
            Convert a WmoEnum.PublicationType into a String.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.GetAssemblyVersion">
            <summary>
            Used to get the Assembly version attribute of the executing assembly.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum.SetupStep">
            <summary>
            Enumeration of steps in setup at which an object's source code may be executed.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SetupStep.BeforeTables">
            <summary>
            before creating tables
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SetupStep.Tables">
            <summary>
            with tables
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SetupStep.AfterTables">
            <summary>
            after creating tables, before creating views
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SetupStep.Views">
            <summary>
            with views
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SetupStep.AfterViews">
            <summary>
            after creating views, before creating sprocs
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SetupStep.StoredProcedures">
            <summary>
            with sprocs
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SetupStep.AfterStoredProcedures">
            <summary>
            after creating sprocs
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SetupStep.SecurityRoles">
            <summary>
            with SecurityRoles
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SetupStep.Jobs">
            <summary>
            After Security roles are installed
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SetupStep.Publications">
            <summary>
            with Publications
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum.PartitioningType">
            <summary>
            Enumeration of partitioning types available to a manifest.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.PartitioningType.None">
            <summary>
            Manifest is not written to support partitioning
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.PartitioningType.Fixed">
            <summary>
            Fixed
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.PartitioningType.Variable">
            <summary>
            Variable
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum.SecondaryType">
            <summary>
            Enumeration of types of secondary
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SecondaryType.NoSecondaries">
            <summary>
            No Secondary
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SecondaryType.WriteAllCopies">
            <summary>
            replicas with no synchronization provided by webstore
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SecondaryType.Mirroring">
            <summary>
            Mirroring secondary
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SecondaryType.SingleMaster">
            <summary>
            Single master replication
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SecondaryType.MultiMaster">
            <summary>
            multi master replication
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum.TableType">
            <summary>
            Enumeration of types of objects registered as tables in the manifest.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.TableType.Table">
            <summary>
            Table
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.TableType.View">
            <summary>
            View
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum.CommandType">
            <summary>
            Enumeration of command types.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.CommandType.PrimaryOnly">
            <summary>
            WriteOnly
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.CommandType.PrimaryThenSecondary">
            <summary>
            WriteThenRead
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.CommandType.SecondaryThenPrimary">
            <summary>
            ReadThenWrite
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.CommandType.PrimaryOrSecondary">
            <summary>
            ReadOrWrite
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.CommandType.SecondaryOnly">
            <summary>
            ReadOnly
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.CommandType.WriteAllCopies">
            <summary>
            WriteAllCopies
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus">
            <summary>
            Status of a database
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus.Online">
            <summary>
            The database is online.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus.Offline">
            <summary>
            The database has been marked offline by admin.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus.NoWriteAll">
            <summary>
            The database has been marked no write all.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus.NeedsRepair">
            <summary>
            The database has been marked needed repaired.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus.NotDeployed">
            <summary>
            The database is not deployed.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus.Standby">
            <summary>
            The database is not deployed.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum.FailSafeSetStatus">
            <summary>
            Status of a Fail Safe Set
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.FailSafeSetStatus.NotDeployed">
            <summary>
            The fail safe set (SQL or File) is not deployed.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.FailSafeSetStatus.Deployed">
            <summary>
            The fail safe set (SQL or File) is deployed.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.FailSafeSetStatus.UpOrDowngrading">
            <summary>
            The SQL fail safe set is in progress of being upgraded.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.FailSafeSetStatus.MovingData">
            <summary>
            The SQL fail safe set is in the process of having data moved to or from it. Suspend any promote/demote operations.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum.AdminLockResourceType">
            <summary>
            Enumeration of types of objects that can be locked in the config db.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.AdminLockResourceType.SQLFailsafeSet">
            <summary>
            SQLFailsafeSet
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.AdminLockResourceType.FileFailsafeSet">
            <summary>
            FileFailsafeSet
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.AdminLockResourceType.DistributionDatabase">
            <summary>
            DistribDB
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.AdminLockResourceType.Manifest">
            <summary>
            Manifest
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.AdminLockResourceType.Deployment">
            <summary>
            Deployment
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.AdminLockResourceType.Write">
            <summary>
            Write
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.AdminLockResourceType.Ticket">
            <summary>
            Ticket
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.AdminLockResourceType.MoveData">
            <summary>
            MoveData lock. Disallows deployment, config and other MoveData locks but allows all others.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum.FileShareStatus">
            <summary>
            Status of a File Share
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.FileShareStatus.Online">
            <summary>
            The FileShare is online.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.FileShareStatus.Offline">
            <summary>
            The FileShare has been marked offline by admin.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.FileShareStatus.NeedsRepair">
            <summary>
            The FileShare has been marked needsrepair by admin
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.FileShareStatus.NotDeployed">
            <summary>
            The FileShare is not deployed.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum.PartitionStatus">
            <summary>
            Status of a partition
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.PartitionStatus.ReadWrite">
            <summary>
            ReadWrite
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.PartitionStatus.ReadOnly">
            <summary>
            ReadOnly
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus">
            <summary>
            Status values for MoveData. Shared by the WstMoveData program.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.NotInitialized">
            <summary>
            Not initialized. This is set at first insert.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.MoveInitialized">
            <summary>
            Initialed value when wst par movedata is called.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.MoveJobStarted">
            <summary>
            Value when WMO submits the job to the JobFramework.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.MoveStart">
            <summary>
            Set by WstMoveData when it first starts MoveData. Not set
            in WstConfig.PartitionMoveMap
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.MoveData">
            <summary>
            Set by WstMoveData while the data is being moved. Not set
            in WstConfig.PartitionMoveMap
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.MoveFinished">
            <summary>
            Set by WstMoveData as well as by Wmo when the data has finished
            being moved.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.MoveRemapped">
            <summary>
            Set by WMO when the data partition has been drained and remapped.
            No equavalent for clean.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.MoveFailed">
            <summary>
            Set by either WstMoveData.exe or WMO for several reasons. Equavalent to an abort,
            except that it is set by the code, rather then by the user. The Progress column
            will have the error message, which will be reflected in the Status.XML.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.MoveAborted">
            <summary>
            Set by the user, either explicitly by wst mar movedata -abort, or by setting
            a database on a fail safe set involved in a move to NeedsRepair.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.MoveJobFailed">
            <summary>
            When the job framework cannot start a job. This can be due to the
            WstJobFrameworkAgent service not running, the WstMoveData.exe program
            is missing, or other reasons.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.CleanInitialized">
            <summary>
            Can be set once the status of the partition is set to MoveRemapped.
            This is done by the call to wst par clean 
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.CleanJobStarted">
            <summary>
            Value when WMO submits the job to the JobFramework.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.CleanStart">
            <summary>
            Set by WstMoveData when the clean process is started.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.CleanData">
            <summary>
            Set by WstMoveData when the clean process is in the process of being cleaned.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.CleanFinished">
            <summary>
            Set on both the WstConfig and application databases when the cleanup is
            finished.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.CleanFailed">
            <summary>
            Set by either WstMoveData.exe or WMO for several reasons. Equavalent to an abort,
            except that it is set by the code, rather then by the user. The Progress column
            will have the error message, which will be reflected in the Status.XML.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.CleanAborted">
            <summary>
            Wmo sets this when the customer has aborted the process.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.CleanJobFailed">
            <summary>
            When the job framework cannot start the job.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.NotInvolved">
            <summary>
            At start up time for the WstMoveData binary, it queries the WstConfig for
            details given a particular partition number. If the system is in a very bad state,
            it is possible that the partition being asked about is not involved in moving data.
            This can occur if the WstConfig database thinks that a move is going on, but the
            application database has no records. Possibly due to calling WstMoveData manually
            or a rogue job starting after a needsrepair.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.ApplicationGetStatusFailure">
            <summary>
            During the move, if a failure occurs getting application data, then set this value.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum.PublicationType">
            <summary>
            Enumeration of publication types
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.PublicationType.Single">
            <summary>
            Single Master
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.PublicationType.Multi">
            <summary>
            Multi Master
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum.ReplCallMethod">
            <summary>
            Enumeration of call methods for replication stored procedures
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.ReplCallMethod.Call">
            <summary>
            call
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.ReplCallMethod.Mcall">
            <summary>
            Mcall
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum.JobStatus">
            <summary>
            Enumeration of job status
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.JobStatus.Running">
            <summary>
            Running
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.JobStatus.Stopped">
            <summary>
            Stopped Nicely
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.JobStatus.Missing">
            <summary>
            Missing
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.JobStatus.Other">
            <summary>
            Other
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum.AuditResultStatus">
            <summary>
            Enumeration of audit result status
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.AuditResultStatus.Success">
            <summary>
            Success
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.AuditResultStatus.Failure">
            <summary>
            Manifest
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum.DBRecoveryMode">
            <summary>
            Enumeration of database recovery modes
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.DBRecoveryMode.SIMPLE">
            <summary>
            Simple
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.DBRecoveryMode.BULK_LOGGED">
            <summary>
            BulkLogged
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.DBRecoveryMode.FULL">
            <summary>
            Full
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum.SetupType">
            <summary>
            Enumeration of setup types
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SetupType.Setup">
            <summary>
            Deploying from scratch
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SetupType.Upgrade">
            <summary>
            For Upgrade. Includes Setup as well as upgrade only scripts.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SetupType.Downgrade">
            <summary>
            For Downgrade. Only downgrade scripts.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.Common.WmoLockServerFailSafeSet.GetSqlFailSafeSets(System.String)">
            <summary>
            Get the list of SqlFailSafeSets on the given server
            This is used by the WmoLockServerFailSafeSet object to
            get lock on all FailSafeSets of a server.
            NOTE: The FailSafeSets should always be returned in a 
            sorted order, so that deadlocks can be avoided.
            </summary>
            <param name="serverName">The name of the server on which
            to get the FailSafeSets</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.Common.WmoLockServerFailSafeSet.GetFileFailSafeSets(System.String)">
            <summary>
            Get the list of FileFailSafeSets on the given server
            This is used by the WmoLockServerFailSafeSet object to
            get lock on all FailSafeSets of a server.
            NOTE: The FailSafeSets should always be returned in a 
            sorted order, so that deadlocks can be avoided.
            </summary>
            <param name="serverName">The name of the server on which
            to get the FailSafeSets</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection">
            <summary>
            Base collection class of named objects
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.m_objects">
            <summary>
            Keep track of objects in collection using an ArrayList.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.IndexOf(System.String,System.Boolean)">
            <summary>
            Returns the index of the first object of the given name.
            </summary>
            <returns>
            The 0-based index of the first object with the name.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.Contains(System.String)">
            <summary>
            Tests whether the collection contains an object of the given name.
            </summary>
            <returns>
            true if the collection contains an object identified by the name;
            false if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            required for ICollection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.Add(Microsoft.Webstore.Management.Wmo.WmoNamedObject)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.Clear">
            <summary>
            Removes all items from the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.AddWithoutDuplicateCheck(Microsoft.Webstore.Management.Wmo.WmoNamedObject)">
            <summary>
            Adds an object to the collection without checking beforehand it it exists in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.Remove(System.String)">
            <summary>
            Removes an object from the object collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.GetEnumerator">
            <summary>
            Gets the IEnumerator for this WmoNamedObjectCollection.  This is meant to 
            support the foreach statement.
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.Count">
            <summary>
            count of objects in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.IsSynchronized">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.SyncRoot">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.WmoNamedObjectEnumerator">
            <summary>
            This class implements the IEnumerator over a WmoNamedObjectCollection in support
            of the "foreach" keyword
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.WmoNamedObjectEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.WmoNamedObjectEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.  
            Must be called before accessing the Current element.
            </summary>
            <returns>
            true if enumerator successfully advanced to next element; 
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.WmoNamedObjectEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoNumberedObject">
            <summary>
            Base class for objects which are identified by number
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNumberedObject.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNumberedObject.CompareTo(System.Object)">
            <summary>
            IComparable.CompareTo implementation.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNumberedObject.ID">
            <summary>
            Number of the object
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNumberedObject.IDStr">
            <summary>
            name of the object
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNumberedObject.IsInCollection">
            <summary>
            whether this object is in a collection
            (set by the add/remove methods for collections
            determines whether the name can be set)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNumberedObject.DeploymentUid">
            <summary>
            UID of the deployment to which this object belongs
            set by the collection's Add method
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNumberedObject.IsBeingImportedNew">
            <summary>
            Determines if this object is in config or not.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection">
            <summary>
            Collection class for WmoNumberedObject
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.m_objects">
            <summary>
            Keep track of objects in collection using an ArrayList.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.IndexOf(System.Int32)">
            <summary>
            Returns the index of the first object of the given name.
            </summary>
            <returns>
            The 0-based index of the first object with the name.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.Sort">
            <summary>
            Sorts the array.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.ObjectAtIndex(System.Int32)">
            <summary>
            Returns the object at a given index in the internal array.
            used only by the enumerator.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.Contains(System.Int32)">
            <summary>
            Tests whether the collection contains an object of the given name.
            </summary>
            <returns>
            true if the collection contains an object identified by the name;
            false if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            required for ICollection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.Add(Microsoft.Webstore.Management.Wmo.WmoNumberedObject)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.Remove(System.Int32)">
            <summary>
            Removes an object from the object collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.GetEnumerator">
            <summary>
            Gets the IEnumerator for this WmoDatabaseCollection.  This is meant to
            support the foreach statement.
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.Count">
            <summary>
            count of objects in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.IsSynchronized">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.SyncRoot">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.DeploymentUid">
            <summary>
            the uid of the deployment that this collection belongs to
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.WmoNumberedObjectEnumerator">
            <summary>
            This class implements the IEnumerator over a WmoNamedObjectCollection in support
            of the "foreach" keyword
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.WmoNumberedObjectEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.WmoNumberedObjectEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            Must be called before accessing the Current element.
            </summary>
            <returns>
            true if enumerator successfully advanced to next element;
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.WmoNumberedObjectEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.WmoAgent.WmoSqlCmdHelper">
            <summary>
            Class for WmoSqlCmdHelper.  Used to help execute generic SQL script files or system sprocs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlCmdHelper.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlCmdHelper.Dispose">
            <summary>
            DTCExecute helper
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoGeoPartner">
            <summary>
            This class is used for defining the GeoPartner relationships within the SqlFailSafeSet.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoGeoPartner.#ctor(Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet)">
            <summary>
            Default constructor defines the Uid of the object.
            The name of the object must still be defined before it can be registered.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoGeoPartner.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Initialize from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoGeoPartner.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Called from the WmoGeoPartnerCollection, which is in turn called by the WmoSqlFailSafeSet parent.
            DeploymentUID, DataCenterName, SQLFSSNum, GeoPartnerDBUID, DefaultGeoPartnerDBUID
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoGeoPartner.Initialize(Microsoft.Webstore.Management.Wmo.WmoDatabase,Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            Called from MovePrimary and sometimes from AddDatabase, it uses already available
            data to make a GeoPartner object.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoGeoPartner.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Register the GeoPartner
            All validation should be completed before you get to this step.
            This is meant to be called from the GeopartnerCollection Register method.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoGeoPartner.ExportGeoPartner(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlNode)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoGeoPartner.ExportDefaultGeoPartner(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlNode)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoGeoPartner.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoGeoPartner.SqlFailSafeSet">
            <summary>
            The Sql Fail Safe Set where this GeoPartner is located.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoGeoPartner.Deployment">
            <summary>
            The Deployment where this GeoPartner is located.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoGeoPartner.SqlFssNumber">
            <summary>
            The fail safe set number of the FSS where this GeoPartner is located.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoGeoPartner.GeoPartnerDatabase">
            <summary>
            WmoDatabase of the GeoPartner
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoGeoPartner.DefaultGeoPartnerDatabase">
            <summary>
            WmoDatabase of the DefaultGeoPartner
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoGeoPartner.GeoPartnerDatabaseUid">
            <summary>
            SqlDatabaseUid of the GeoPartner
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoGeoPartner.DefaultGeoPartnerDatabaseUid">
            <summary>
            SqlDatabaseUid of the DefaultGeoPartner
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoGeoPartner.DataCenterName">
            <summary>
            The name of the DataCenter where the Default GeoPartner is located.
            The GeoPartner need not be defined, but the DefaultGeoPartner must always be defined.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoGeoPartner.IsInCollection">
            <summary>
            Whether this object is in a collection (set by the add/remove
            methods for collections determines whether the name can be set)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoGeoPartner.IsNew">
            <summary>
            Determines if GeoPartner information is new.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoGeoPartnerCollection">
            <summary>
            Collection class for GeoPartners
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoGeoPartnerCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            This method is called only when DefaultGeoPartners has already been found on the FSS.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoGeoPartnerCollection.MergeGeoPartner(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            If it exists, finds the GeoPartner associated with the DefaultGeoPartner
            </summary>
            <param name="objXml"></param>
            <param name="nodeSqlFailSafeSet"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoGeoPartnerCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlNode)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoGeoPartnerCollection.Register">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoGeoPartnerCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoGeoPartnerCollection.IndexOfDataCenterName(System.String)">
            <summary>
            Only one GP can be in a Data Center at a time, so passing in the DataCenterName will
            return a unique GP. However, it returns null if the DC is where the Primary is
            located or if the DataCenterName passed in is not associated with any server in the FSS.
            </summary>
            <param name="dataCenterName"></param>
            <returns>WmoGeoPartner or null</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoGeoPartnerCollection.IndexOfGeoPartner(System.Guid)">
            <summary>
            Returns the GeoPartner given the SqlDatabaseUid of the database.
            </summary>
            <param name="geoPartnerUid"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoGeoPartnerCollection.IndexOfDefaultGeoPartner(System.Guid)">
            <summary>
            Returns the DefaultGeoPartner given the SqlDatabaseUid of the database.
            This method must always be able to return a vlue.
            </summary>
            <param name="defaultGeoPartnerUid"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCluster">
            <summary>
            Class for Cluster instances
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCluster.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCluster.InitializeServers">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCluster.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCluster.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Update this object with data from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCluster.PostInitialize">
            <summary>
            Do any post initialization steps, if necessary
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCluster.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs,System.DateTime)">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCluster.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCluster.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCluster.IsEmpty">
            <summary>
            whether the cluster is empty for delete
            (ie. no svr left)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCluster.Purge">
            <summary>
            Purge an individual cluster
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCluster.Name">
            <summary>
            Name of the cluster.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCluster.Uid">
            <summary>
            Uid of the Cluster
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCluster.Path">
            <summary>
            The path of the cluster
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCluster.MonitoringServerUid">
            <summary>
            MonitoringServerUid of the Cluster
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCluster.MonitoringDataPartitionNum">
            <summary>
            MonitoringDataPartitionNum of the Cluster
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCluster.JobStatusDataPartitionNum">
            <summary>
            JobStatusDataPartitionNum of the Cluster
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCluster.Servers">
            <summary>
            Servers on this cluster
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCluster.IsCommon">
            <summary>
            The cluster used for cross cluster communications.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoClusterCollection">
            <summary>
            Collection class for WmoDataServer
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoClusterCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoClusterCollection.IndexOf(System.Guid)">
            <summary>
            Returns the index of the first object of the given Uid.
            </summary>
            <returns>
            The 0-based index of the first object with the Uid.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoClusterCollection.Add(Microsoft.Webstore.Management.Wmo.WmoCluster)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoClusterCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Loads the in-memory data from Xml, deep initialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoClusterCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Boolean)">
            <summary>
            this method uses a flag to indicate new or old Xml format.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoClusterCollection.PostInitialize">
            <summary>
            Does a call to update the Clusters, now that the DataServers have been loaded
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoClusterCollection.Initialize">
            <summary>
            Loads the in-memory data from the config dbs
            initializes dataserver, ipaddressswitches
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoClusterCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoClusterCollection.Register">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoClusterCollection.Purge">
            <summary>
            Purge any cluster not assigned to a DataServer.
            Do not purge defaults.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoClusterCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoClusterCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoClusterCollection.Item(System.Guid)">
            <summary>
            Uid indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDatabase">
            <summary>
            Base class for databases
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.GetHashCode">
            <summary>
            Overridden method
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.Equals(System.Object)">
            <summary>
            Overridden method
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.Initialize(System.String,System.String,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus,System.Guid)">
            <summary>
            Initialize from passing in parameters
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Initialize from xml dbs to in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Register this database. Note internal consistency must be validated
            before getting to this step. This step is inside a DTC.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.SetDefaultStatus">
            <summary>
            Set the default status of the database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.Register">
            <summary>
            Register this database
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.Initialize(Microsoft.Webstore.WstClient.WstDataReader,System.Guid,System.Guid)">
            <summary>
            Initialize from the config dbs to in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.ExportForRegister(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Used for bulk insert during register.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.Deploy">
            <summary>
            Installs the databases etc in the 'real' world.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.Deploy(Microsoft.Webstore.Management.Wmo.WmoEnum.SetupType,Microsoft.Webstore.Management.Wmo.WmoManifest,System.Boolean)">
            <summary>
            Upgrades a Deployment in the "Real world".
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.UnRegister">
            <summary>
            Removes the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.UnRegister(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            UnRegister this database
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.Backup(Microsoft.Webstore.Management.Wmo.WmoEnum.DBRecoveryMode,System.Boolean)">
            <summary>
            Backup this database. Will use LiteSpeed if ListeSpeed is determined to be installed on both systems.
            FileGroups will be validated.
            </summary>
            <param name="recoveryMode"></param>
            <param name="doLogBackup"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.Restore(Microsoft.Webstore.Management.Wmo.WmoDatabase,System.Boolean,Microsoft.Webstore.Management.Wmo.WmoEnum.DBRecoveryMode,System.Boolean)">
            <summary>
            Restores over this database. LiteSpeed will be used if it is installed on bith systems.
            Supports mirroring with the withRecovery and recoveryMode parameters.
            </summary>
            <param name="sourceDatabase"></param>
            <param name="withRecovery"></param>
            <param name="recoveryMode"></param>
            <param name="doLogRestore"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.AggressiveDropDB">
            <summary>
            drops this database
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.Drop">
            <summary>
            drops this database
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.SetDefaultStatus(System.String)">
            <summary>
            Sets the default status of the database
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.SetupPublication(System.String,System.String,System.String,System.Data.DataTable,System.Boolean,System.Boolean)">
            <summary>
            sets up the described publication
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.DropPublication(System.String)">
            <summary>
            drops up the described publication
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.SetupSubscription(System.String,System.String,System.String,System.Boolean)">
            <summary>
            sets up the described subscription
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.DropSubscription(System.String,System.String,System.String)">
            <summary>
            drops up the described subscription
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.DropAllSubscription(System.String)">
            <summary>
            drops up the described subscription
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.DeployJobs(System.Guid)">
            <summary>
            Used to deploy (setup) jobs on the database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.EnableJobs(System.Guid)">
            <summary>
            Enable and start jobs on the database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.DisableJobs">
            <summary>
            Disable and stop jobs on the databasse.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.DisableJobs(Microsoft.Webstore.Management.Wmo.WmoJobInstanceCollection)">
            <summary>
            Disable and stop jobs in the collection passed in
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.SetupSuitableJobs">
            <summary>
            Installs or drops jobs that are supposed to be on this database.
            In other words, if the IsPrimary flag is set for this database,
            then drop all Secondary Only jobs and install all Primary Only
            jobs, Leave jobs that are on both the Primary and Secondary alone.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.DropJobs(System.Boolean,System.Guid)">
            <summary>
            Drops jobs that are supposed to be on this database.
            See summary for SetupSuitableJobs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.GetStatus(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Boolean,System.Int32@)">
            <summary>
            GetStatus method for the object.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.IsLiteSpeedInstalled">
            <summary>
            Check to see if the third party software Litespeed is installed.
            Typically, this method will be called twice. One for the backup
            server and once for the restore server.
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.CleanupReplication">
            <summary>
            Used when the specific database has been restored and replication "leftovers" are in the
            database that need to be removed. This occurs after doing a restore from a databse
            that IS replicated but the restored database is not known to the system as a replicated
            database.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.Uid">
            <summary>
            Uid of this database
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.SqlServerName">
            <summary>
            Name of the server hosting this database
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.DatabaseName">
            <summary>
            name of the object
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.DeploymentUid">
            <summary>
            Guid of the deployment that this db belongs to
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.ManifestUid">
            <summary>
            Guid of the manifest that this db belongs to
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.SqlFailSafeSetID">
            <summary>
            Sql Fail Safe Set that this db belongs to
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.Jobs">
            <summary>
            Jobs registered on this database (not replication/mirroring jobs)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.Ticket">
            <summary>
            Ticket
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.Status">
            <summary>
            Status: IsDeployed, IsOffline, IsNeedsRepair
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.DefaultStatus">
            <summary>
            DefaultStatus: Online/Standby
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.IsPrimary">
            <summary>
            Whether this database is offline (admin access only)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.IsDefaultPrimary">
            <summary>
            Whether this database needs repairing (unreachable)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.IsGeoPartner">
            <summary>
            Whether this database is offline (admin access only)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.IsDefaultGeoPartner">
            <summary>
            Whether this database needs repairing (unreachable)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.IsInCollection">
            <summary>
            whether this object is in a collection
            (set by the add/remove methods for collections
            determines whether the name can be set)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.IsDeployed">
            <summary>
            Whether the database has been deployed
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.Latency">
            <summary>
            The replication latency in seconds.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.LatencyBucket">
            <summary>
            The replication latency bucket.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.ReplicationLatencies">
            <summary>
            All publications inserting into this database have a latency and a latencybucket.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.SqlFailSafeSet">
            <summary>
            Only valid if the parent is a WmoSqlFailSafeSetobject
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection">
            <summary>
            Collection class for databases
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.m_objects">
            <summary>
            Keep track of objects in collection using an ArrayList.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.IndexOf(System.String,System.String)">
            <summary>
            Returns the index of the first object of the given name.
            </summary>
            <returns>
            The 0-based index of the first object with the name.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.IndexOf(System.Guid)">
            <summary>
            Returns the index of the first object of the given uid.
            </summary>
            <returns>
            The 0-based index of the first object with the uid.
            -1 if the collection doesn't contain an object with this uid.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.Contains(System.String,System.String)">
            <summary>
            Tests whether the collection contains an object of the given name.
            </summary>
            <returns>
            true if the collection contains an object identified by the name;
            false if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.Contains(System.Guid)">
            <summary>
            Tests whether the collection contains an object of the given Uid.
            </summary>
            <returns>
            true if the collection contains an object identified by the Uid.
            false if the collection doesn't contain an object with this Uid.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            required for ICollection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.Add(Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.Remove(System.String,System.String)">
            <summary>
            Removes an object from the object collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.ExportForRegister(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Used by the Register FailSafeSet collection for bulk inserts.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.GetEnumerator">
            <summary>
            Gets the IEnumerator for this WmoDatabaseCollection.  This is meant to
            support the foreach statement.
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.Validate">
            <summary>
            Validates the databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.GetStatus(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Boolean,System.Int32@)">
            <summary>
            GetStatus method for the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.Clean">
            <summary>
            remove all elements
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.Count">
            <summary>
            count of objects in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.Item(System.String,System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.Item(System.Guid)">
            <summary>
            Uid indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.IsSynchronized">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.SyncRoot">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.DeploymentUid">
            <summary>
            the uid of the deployment that this collection belongs to
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.SqlFailSafeSetID">
            <summary>
            Sql FailSafe Set that this db belongs to
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.SqlServerName">
            <summary>
            Server that this db belongs to
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.WmoDatabaseEnumerator">
            <summary>
            This class implements the IEnumerator over a WmoNamedObjectCollection in support
            of the "foreach" keyword
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.WmoDatabaseEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.WmoDatabaseEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            Must be called before accessing the Current element.
            </summary>
            <returns>
            true if enumerator successfully advanced to next element;
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.WmoDatabaseEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate">
            <summary>
            This class is used for defining the file groups, logical files, and
            backup stripes related to the creation, backing up and restoring of
            sQl databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.#ctor(System.Guid)">
            <summary>
            Default constructor defines the Uid of the object.
            The name of the object must still be defined before it can be registered.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Initialize from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            This method is usually called from the WmoDatabaseTemplateCollection Initialize method,
            but can also be called from a call to WspGetDatabaseTemplate.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Register the template. This method is called with Dtc already started at the collection level.
            All validation should be completed before you get to this step.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.RegisterLitespeedCustom">
            <summary>
            Register the template. This method is called with Dtc already started at the collection level.
            All validation should be completed before you get to this step.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.Purge">
            <summary>
            Purge the individual templates
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.CreateDatabaseRestoreCmd(System.String,System.String,System.String,System.Boolean,System.Boolean,Microsoft.Webstore.Management.Wmo.WmoEnum.DBRecoveryMode,System.Boolean)">
            <summary>
            This command creates a string that will be used to restore a database. NOTE: if the
            withRecovery flag is set to false for the full restore, it must be set to false for
            the log restore. Otherwise the resultant log file can not be restored.
            </summary>
            <param name="sourceServerName"></param>
            <param name="sourceDatabaseName"></param>
            <param name="destinationDatabaseName"></param>
            <param name="isLiteSpeedInstalled"></param>
            <param name="withRecovery"></param>
            <param name="recoveryMode"></param>
            <param name="isLogRestore"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.GetAllLogicalFilesInThisDatabaseTemplate">
            <summary>
            Gets all LogicalFiles for the DatabaseTemplate. The class structure doesn't
            work well for this because the LogicalFiles are split into FileGroups.
            Specifically for Backup/Restore the FileGroup component is not used.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.DatabaseTemplateUid">
            <summary>
            Uid of this DatabaseTemplate
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.DatabaseTemplateName">
            <summary>
            Name of this DatabaseTemplate
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.Description">
            <summary>
            Description of this DatabaseTemplate
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.FileGroups">
            <summary>
            The FileGroups that belong to this DatabaseTemplate.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.LogFile">
            <summary>
            The LogFile that belongs to this DatabaseTemplate.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.Stripes">
            <summary>
            The Stripe collection that belong to this DatabaseTemplate.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.IsInCollection">
            <summary>
            Whether this object is in a collection (set by the add/remove
            methods for collections determines whether the name can be set)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.IsOld">
            <summary>
            Used when the Sql Initialize fetches the DatabaseTemplate.
            It is for objects that already exist in the WstConfig, and therefore
            do not need to be registered.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.IsDistributionOnly">
            <summary>
            Flag to determine what kind of database template this is
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.LitespeedCustomBackup">
            <summary>
            Custom Litespeed backup script. Appended to Backup command string.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.LitespeedCustomRestore">
            <summary>
            Custom Litespeed Restore script. Appended to Restore command string.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection">
            <summary>
            Collection class for databases
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.m_objects">
            <summary>
            Keep track of objects in collection using an ArrayList.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.IndexOf(System.String)">
            <summary>
            Returns the index of the first object of the given name.
            </summary>
            <returns>
            The 0-based index of the first object with the name.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.IndexOf(System.Guid)">
            <summary>
            Returns the index of the first object of the given uid.
            </summary>
            <returns>
            The 0-based index of the first object with the uid.
            -1 if the collection doesn't contain an object with this uid.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.Contains(System.String)">
            <summary>
            Tests whether the collection contains an object of the given name.
            </summary>
            <returns>
            true if the collection contains an object identified by the name;
            false if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.Contains(System.Guid)">
            <summary>
            Tests whether the collection contains an object of the given Uid.
            </summary>
            <returns>
            true if the collection contains an object identified by the Uid.
            false if the collection doesn't contain an object with this Uid.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            required for ICollection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.Add(Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.Remove(System.String)">
            <summary>
            Removes an object from the object collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder)">
            <summary>
            Uses the properties of each item and sub item to create an XML object.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.Register">
            <summary>
            Register all DatabaseTemplates in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.GetEnumerator">
            <summary>
            Gets the IEnumerator for this WmoDatabaseTemplateCollection.  This is meant to
            support the foreach statement.
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml)">
            <summary>
            Passed in a WmoXml object, find all elements relating to DatabaseTemplates.
            With each element and sub-element, create the objects that make up the
            DatabaseTemplates.
            </summary>
            <param name="objXml"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.Initialize">
            <summary>
            Execute WspGetAllDatabaseTemplate. This will return four results sets.
            They are:
                all DatabaseTemplates
                all FileGroups in all DatabaseTemplates
                all LogicalFiles in all FileGroups in all DatabaseTemplates
                all Stripes in all DatabaseTemplates
            Takes these results and create the objects and sub-objects that make up
            a DatabaseTemplate.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.Validate">
            <summary>
            Validates the databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.Purge">
            <summary>
            Purge any template not assigned to a DataServer or SqlFailSafeSet.
            Do not purge default templates.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.Clean">
            <summary>
            remove all elements
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.Count">
            <summary>
            count of objects in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.Item(System.Guid)">
            <summary>
            Uid indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.IsSynchronized">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.SyncRoot">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.WmoDatabaseTemplateEnumerator">
            <summary>
            This class implements the IEnumerator over a WmoNamedObjectCollection in support
            of the "foreach" keyword
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.WmoDatabaseTemplateEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.WmoDatabaseTemplateEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            Must be called before accessing the Current element.
            </summary>
            <returns>
            true if enumerator successfully advanced to next element;
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.WmoDatabaseTemplateEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDataCenter">
            <summary>
            Class for DataCenter instances
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataCenter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataCenter.InitializeServers">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataCenter.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataCenter.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Fill this object with data from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataCenter.Initialize(System.String)">
            <summary>
            Meant to be called from Server Register. Defaults description to "".
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataCenter.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataCenter.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataCenter.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataCenter.IsEmpty">
            <summary>
            whether the DataCenter is empty for delete
            (ie. no svr left)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataCenter.Purge">
            <summary>
            Purge an individual DataCenter
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataCenter.Name">
            <summary>
            Name of the DataCenter.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataCenter.Servers">
            <summary>
            Servers on this DataCenter
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDataCenterCollection">
            <summary>
            Collection class for WmoDataServer
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataCenterCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataCenterCollection.Add(Microsoft.Webstore.Management.Wmo.WmoDataCenter)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataCenterCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Loads the in-memory data from Xml, deep initialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataCenterCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml)">
            <summary>
            Initialize using XML for input.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataCenterCollection.Initialize">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataCenterCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataCenterCollection.Register">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataCenterCollection.Purge">
            <summary>
            Purge any DataCenter not assigned to a DataServer.
            Do not purge defaults.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataCenterCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataCenterCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection">
            <summary>
            Collection class for WmoDataPartition
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.#ctor(System.Int32)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.IndexOf(System.Int32)">
            <summary>
            Returns the index of the first object of the given ID.
            </summary>
            <returns>
            The 0-based index of the first object with the ID.
            -1 if the collection doesn't contain an object with this ID.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.Contains(System.Int32)">
            <summary>
            Tests whether the collection contains an object of the given ID.
            </summary>
            <returns>
            true if the collection contains an object identified by the ID;
            false if the collection doesn't contain an object with this ID.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.Initialize">
            <summary>
            Initialize from the config db to in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Initialize from Xml
            </summary>
            <param name="objXml"></param>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.Initialize(System.Int32)">
            <summary>
            Initialize to a certain size
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement,System.Boolean)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            register all data partitions
            need another function to update individual ones
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.RegisterPartition(Microsoft.Webstore.Management.Wmo.WMOSprocs,System.Int16,System.Int16,System.Int16)">
            <summary>
            Register one data partition for re-map after Add Partition.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            required for ICollection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.GetEnumerator">
            <summary>
            Gets the IEnumerator for this WmoNamedObjectCollection.  This is meant to 
            support the foreach statement.
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.GetDPStatus(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Boolean,System.Int32,System.Int32@)">
            <summary>
            GetStatus method for the DataServer object. Called individually
            or by the DataServerCollection. Tell child objects to report their status.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.Validate(System.Boolean)">
            <summary>
            Validates the internal memory configuration.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.DeploymentUid">
            <summary>
            the uid of the deployment that this collection belongs to
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.Deployment">
            <summary>
            The deployment that this collection belongs to
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.DataPartitions">
            <summary>
            The array of DataPartitions.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.Ticket">
            <summary>
            ticket
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.Count">
            <summary>
            count of partitions in collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.IsSynchronized">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.SyncRoot">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.BeginNumber">
            <summary>
            When numbering the sql fail safe sets, this is the beginning number to start with
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.WmoDataPartitionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.WmoDataPartitionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.  
            Must be called before accessing the Current element.
            </summary>
            <returns>
            true if enumerator successfully advanced to next element; 
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.WmoDataPartitionEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataPartition.#ctor(System.Int16,System.Int16,System.Int16)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataPartition.ID">
            <summary>
            name of the object
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataPartition.SqlFailSafeSetID">
            <summary>
            Sql Fail Safe Set that this data partition is mapped to
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataPartition.FileFailSafeSetID">
            <summary>
            File Fail Safe Set that this data partition is mapped to
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataPartition.Ticket">
            <summary>
            ticket
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataPartition.Status">
            <summary>
            Status of the Partition
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataPartition.StatusStr">
            <summary>
            String converstion for Status of the Partition
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDataServer">
            <summary>
            Class for DataServer instances
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.InitializeDatabases">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.InitializeFileShares">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.ReInitialize">
            <summary>
            ReInitialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.InsertIPAddrSwitch(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            insert a IPAddress Switch pair into the array of struct
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Update this object with data from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.Initialize(System.String)">
            <summary>
            Initialize to defaults
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.InitializeForAssign(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Processes Xml to set the DatabaseTemplate. The rules are: If the element
            is not specified, use the preset. If the preset is not specified, use the
            default. In all cases verify the templates exist.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs,System.DateTime)">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.Register(System.DateTime)">
            <summary>
            Creates a DTC, opens connections to all online WstConfig databases, then calls the
            private Register Method to register DataServers and IP Addresses.
            If applicable the Mirroring end point is also registered.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.AssignServerRoles(Microsoft.Webstore.Management.Wmo.WMOSprocs,System.DateTime)">
            <summary>
            Assigns the ServerRoles to the server.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.AssignServerRoles(System.DateTime)">
            <summary>
            Inside a DTC, deletes then re-adds all server roles. This handles the case where a
            an assigned ServerRole is removed.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement,System.Boolean)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.UnRegister">
            <summary>
            Removes the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.DeployValidate">
            <summary>
            Validates IP addresses
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.GetStatus(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Boolean,System.Int32@)">
            <summary>
            GetStatus method for the DataServer object. Called individually
            or by the DataServerCollection. Tell child objects to report their status.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.IsEmpty">
            <summary>
            Whether the data server is in use for any other purpose.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.Assign">
            <summary>
            Assign DatabaseTemplate to the server.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.Assign(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Assign the database template to the server.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.Demote(System.Boolean,System.Guid,System.String,Microsoft.Webstore.Management.Wmo.Common.WmoLockServerFailSafeSet)">
            <summary>
            demote all databases and fileshares on server, and promote replicas
            currently not using IsNeedsRepair value
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.PrepareForDemoteDatabases(System.Boolean)">
            <summary>
            This method is helper to find the best secondaries to promote (if applicable).
            We will try to find the best online secondary to promote for the default
            primaries that are being demoted, such that we balance the new primaries accross the
            available data servers as best as possible.
            </summary>
            <param name="isNoPromote">true if not allowed to auto-promote</param>
            <returns>array of SvrDbDemoteHelper with secondary to be promoted</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.DemoteDatabases(System.Boolean,System.Guid,System.String,Microsoft.Webstore.Management.Wmo.Common.WmoLockServerFailSafeSet)">
            <summary>
            Called by Multithread
            demote all databases on server, and promote replicas
            The fssLocks is used by the svr reboot command. 
            This instance is used to pass the lock object to each
            newly spawned thread so that it can inherit the already 
            taken lock
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.DemoteDatabases(System.Boolean,System.Guid,System.String)">
            <summary>
            Called by Multithread
            demote all databases on server, and promote replicas
            currently not using IsNeedsRepair value
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.DemoteDatabase(System.Object)">
            <summary>
            Called by MultiThread
            demote a database and promote its replica
            currently not using IsNeedsRepair value
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.DemoteDatabase(Microsoft.Webstore.Management.Wmo.WmoDatabase,System.Boolean,System.Collections.ArrayList,System.Guid,Microsoft.Webstore.Management.Wmo.WmoAdminLock)">
            <summary>
            Called by Single Thread
            demote a database and promote its replica
            currently not using IsNeedsRepair value
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.DemoteFileShares(System.Boolean,System.Guid,System.String)">
            <summary>
            Called by Single Thread
            demote all fileshares on server, and promote replicas
            currently not using IsNeedsRepair value
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.Offline(System.Boolean,System.Guid,System.Boolean,System.String,Microsoft.Webstore.Management.Wmo.Common.WmoLockServerFailSafeSet)">
            <summary>
            Mark server offline
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.OfflineDatabases(System.Boolean,System.Guid,System.Boolean,System.String,Microsoft.Webstore.Management.Wmo.Common.WmoLockServerFailSafeSet)">
            <summary>
            Called by MultiThread
            Mark all databases on server offline
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.OfflineFileShares(System.Boolean,System.Guid,System.String)">
            <summary>
            Called by Single Thread
            Mark all fileshares on server offline
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.Promote(System.Guid,System.String,Microsoft.Webstore.Management.Wmo.Common.WmoLockServerFailSafeSet)">
            <summary>
            promote all databases on server, and demote replicas
            currently not checking isneedsrepair value
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.PromoteDatabases(System.Guid,System.String,Microsoft.Webstore.Management.Wmo.Common.WmoLockServerFailSafeSet)">
            <summary>
            Called by Multi Thread
            promote all databases on server, and demote replicas
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.PromoteDatabase(Microsoft.Webstore.Management.Wmo.WmoDatabase,System.Guid,Microsoft.Webstore.Management.Wmo.WmoAdminLock)">
            <summary>
            Called By Single Thread
            promote a database and demote its replica
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.PromoteDatabase(System.Object)">
            <summary>
            Called by Multi Thread
            promote a database and demote its replica
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.PromoteFileShares(System.Guid,System.String)">
            <summary>
            Called by Single Thread
            promote all fileshares on server, and demote replicas
            currently not checking isneedsrepair value
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.Online(System.Guid,System.Boolean,System.String,Microsoft.Webstore.Management.Wmo.Common.WmoLockServerFailSafeSet)">
            <summary>
            Mark server online
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.OnlineDatabases(System.Guid,System.String,Microsoft.Webstore.Management.Wmo.Common.WmoLockServerFailSafeSet)">
            <summary>
            Called by Multi Thread
            Mark all databases on server online
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.OnlineFileShares(System.Guid,System.String)">
            <summary>
            Called by Single Thread
            Mark all fileshares on server online
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.Repair(System.Guid,System.String)">
            <summary>
            Repair server -- repair all databases on server
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.RepairDatabases(System.Guid,System.String)">
            <summary>
            repair all databases on server
            called by multi-thread
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.RepairFileShares(System.Guid,System.String)">
            <summary>
            repair all fileshares on server
            called by single
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataServer.Name">
            <summary>
            Name of the data server.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataServer.Uid">
            <summary>
            Uid of the Data Server
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataServer.DataCenterName">
            <summary>
            The name of the data center
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataServer.IPAddressSwitches">
            <summary>
            array of ipaddress and switches
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataServer.DeploymentUids">
            <summary>
            array of deploymentuids
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataServer.Description">
            <summary>
            The name of the data center
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataServer.DistributionServer">
            <summary>
            The server hosting the distrib db used by this server
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataServer.HostedDistribDB">
            <summary>
            The distribution database hosted on this server
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataServer.Databases">
            <summary>
            Databases on this server
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataServer.FileShares">
            <summary>
            FileShares on this server
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataServer.ClusterName">
            <summary>
            Name of the cluster hosting this server
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataServer.DistributionDatabaseTemplateUid">
            <summary>
            This is used for constructing a Distribution Database on this server.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataServer.DistributionDatabaseTemplateName">
            <summary>
            This is only used by export.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDataServer.SvrDbDemoteHelper">
             <summary>
             This is a private helper class used by WmoDataServer.Demote() to help find the
             best secondaries to promote (if applicable) by balancing load as best as possible
             accross the available data servers.
            
             An ArrayList of these objects are sorted by how many secondaries are available
             (least to greatest).  This way, the FSS with fewest secondaries to choose from get
             to pick the secondary/dataserver to promote first.
             </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.SvrDbDemoteHelper.FindBestSecondary">
            <summary>
            Try to find best secondary to promote by looking at how many primaries are already on
            each server.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoIPAddressSwitch">
            <summary>
            struct of IPAddress and Switch
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoIPAddressSwitch.NetworkSwitch">
            <summary>
            name of the network switch
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoIPAddressSwitch.IPAddress">
            <summary>
            IP Address
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoIPAddressSwitch.IsPreferred">
            <summary>
            IsPreferred
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoMirroringEndPoint">
            <summary>
            struct for Mirroring_EndPoint
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMirroringEndPoint.CompleteDomainName">
            <summary>
            The domain name for this endpoint
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMirroringEndPoint.PortNumber">
            <summary>
            The port number for this endpoint
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMirroringEndPoint.EndPointName">
            <summary>
            The name of the endpoint
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection">
            <summary>
            Collection class for WmoDataServer
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.IndexOf(System.Guid)">
            <summary>
            Returns the index of the first object of the given Uid.
            </summary>
            <returns>
            The 0-based index of the first object with the Uid.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.Contains(System.Guid)">
            <summary>
            Tests whether the collection contains an object of the given UID.
            </summary>
            <returns>
            true if the collection contains an object identified by the UID;
            false if the collection doesn't contain an object with this UID.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.Add(Microsoft.Webstore.Management.Wmo.WmoDataServer)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Boolean)">
            <summary>
            Imports an Xml document, passing on sections to child members.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.Initialize">
            <summary>
            Loads the in-memory data from the config dbs
            initializes dataserver, ipaddressswitches
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement,System.Guid,System.Boolean)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.Register">
            <summary>
            Validates then registers each Server in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.RegisterAfterValidate">
            <summary>
            Registers each Server in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.ValidateSqlFSSAgainstCrossClusterServers">
            <summary>
            Validate Sql Fail Safe sets against cross cluster servers.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.ValidateFileFSSAgainstCrossClusterServers">
            <summary>
            Validate File Fail Safe sets against cross cluster servers.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.Validate">
            <summary>
            Validate each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.GetStatus(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Boolean,System.Int32@)">
            <summary>
            GetStatus method for the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.List(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder)">
            <summary>
            List all data servers in the configuration.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.Assign">
            <summary>
            Assign DatabaseTemplate to the server.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.Item(System.Guid)">
            <summary>
            Uid indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.PresetDistributionDatabaseTemplateUid">
            <summary>
            For defining database templates for a series of servers.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDeployment">
            <summary>
            Class for deployments
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.InitializeInUseObjects(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Initialize the arrays of objects that use this deployment.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.InitializeClientSettings(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Loads the in-memory data from the Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.Import(Microsoft.Webstore.Management.Wmo.WmoXml,System.Boolean)">
            <summary>
            Imports an XML file for the deployment, splitting up the various tasks to each sub class.
            The doValidate parameter is used by the WebstoreWetupWizard
            </summary>
            <param name="objXml"></param>
            <param name="doValidate"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.ExportXmlFragmentForAllocate(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder)">
            <summary>
            Reads from the in-memory data to create an partial XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.ExportDeployment(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.RegisterDeployment(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.RegisterUpdateDeployment">
            <summary>
            Writes the in-memory data to the config dbs. Used for update deployment settings
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.RegisterClientSettings(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.RegisterUpdateClientSettings">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.Register">
            <summary>
            Writes the in-memory data to the config dbs
            this deployment and all collections under it
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.Deploy">
            <summary>
            Installs the databases etc in the 'real' world.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.DeployAudit(System.Guid)">
            <summary>
            Installs the databases etc in the 'real' world.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.Drop">
            <summary>
            drop deployment from wstconfig
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.Validate">
            <summary>
            Validates internal data as well as server readyness.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.ValidateDeployment(System.Boolean)">
            <summary>
            Validates whether the in-memory data matches the "real" world
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.ValidateDatabasesAndFileShares">
            <summary>
            ValidateDatabasesAndFileShares before deploying
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.ValidateDatabasesAndFileSharesForSqlUpgrade(System.Int32)">
            <summary>
            ValidateDatabasesAndFileShares before deploying
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.AddReplicaSetup(System.String)">
            <summary>
            Add Replica Setup. Run through FSSes and deploy them.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.AddFailSafeSetImport(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Registers new SqlFailSafeSet and FileFailSafeSet.
            Takes in SqlFailSafeSets and FileFailSafeSets
            in the form of a Delta XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.AddFailSafeSetRegister">
            <summary>
            Registers new FileFailSafeSet. No longer used for Sql.
            Takes in FileFailSafeSets in the form of a Delta XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.AddPartitionImport(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Registers or updates data partition mapping.
            Take in new data partition map
            in the form of a Delta XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.AddPartitionImportNew(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Registers or updates data partition mapping.
            Take in new data partition map
            in the form of a Delta XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.AddPartitionSetup(System.Guid)">
            <summary>
            Add the partition imported from AddPartitionImport.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.ValidateAndLoadAddFailSafeSet(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Add a partition. Takes in DataServers, SqlFailSafeSets, FileFailSafeSets
            and DataPartitions in the form of a Delta XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.MapPartition(Microsoft.Webstore.Management.Wmo.WMOSprocs,System.Int16,System.Int16,System.Int16)">
            <summary>
            Maps a data Partition to a SQL or File Fail Safe Set, or both.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.UpdateDatabase(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,System.Guid)">
            <summary>
            Can only update db if it's offline or needsrepair
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.RemoveGeoInfo(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Associates a new Manifest with an existing Deployment.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.AddReplicaDatabaseRegister">
            <summary>
            Registers additional databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.UpdateVersionCheck(Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Deployment Upgrade verification.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.UpdateVersionSecurityRoleCheck(Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Always allow to add new roles, allow to drop an old role only if there is
            no security account belongs to this role
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.UpdateVersion(Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Associates a new Manifest with an existing Deployment.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.UpgradeAudit(System.Guid,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Upgrades the databases etc in the 'real' world.
            Steps:
            1) For any database that is marked NeedsRepair, ignore it.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.DowngradeAudit(System.Guid,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Downgrades to a previous version of the users Manifest. Prereqs:
            1) UpdateVersion must have been called that started an Upgrade, otherwise calls to this function is a NOP.
            2) All Fail Safe Sets that are not listed as being the Previous version will have their registered downgrade scripts run.
            3) Multiple calls to UpdateVersion without finishing downgrade are not supported. You must finish upgrade or downgrade before running a second UpdateVersion. If necessary use the -force command so that you can make a fresh start.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.GetStatus(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Boolean,System.Int32@)">
            <summary>
            GetStatus method for the Deployment object. Called individually
            or by the DeploymentCollection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.List(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder)">
            <summary>
            Lists the names of this Deployment in an XML node.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.CalculateAllocatedDatabaseName(System.Boolean,System.String,System.Int32,System.String)">
            <summary>
            This does the heavy lifting of marking up the database name with the replacement chars
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.GetServerNumber(System.String)">
            <summary>
            This will find the trailing number from a server name and return that
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.GetAndValidateMask(System.String)">
            <summary>
            This will take the passed in mask and determine if it can be used.  It will return "0" if it cannot
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.GetServerNumberString(System.String,System.String)">
            <summary>
            This will utilize the passed in mask and pad the passed in number appoppriately with the proper chars
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.UpdateEnableGeo(System.Boolean)">
            <summary>
            Updates the EnableGeo column in the Deployment table.
            </summary>
            <param name="enableOrDisable"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.UpdateGeoEnabled(System.Boolean)">
            <summary>
            Enables or disables Geo in the deployment
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.ReinitTemplateObjects">
            <summary>
            Reinitialize the TemplateObjects after changing the name and version of
            the manifest. Used during deployment upgrade.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.Name">
            <summary>
            Name of the deployment.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.Uid">
            <summary>
            Uid of the deployment.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.ManifestUid">
            <summary>
            Uid of the manifest this deployment deploys.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.ManifestName">
            <summary>
            Name of the manifest that this deployment deploys
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.SystemManifestUid">
            <summary>
            Uid of the system manifest this deployment deploys.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.PreviousManifestUid">
            <summary>
            Uid of the previous manifest after Update Version is called.
            The value will be equal to the current ManifestUID if Update
            Version has not been called.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.ManifestVersion">
            <summary>
            The Version of the Manifest this deployment belongs to.
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.ManifestIsFileshareOnly">
            <summary>
            Whether this manifest is a Fileshare Only manifest
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.WebstoreVersion">
            <summary>
            The Version of the System Manifest this deployment belongs to.
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.SqlDefaultReadCmdType">
            <summary>
            Default command type for Read commands.
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.SqlDefaultReadCmdTypeStr">
            <summary>
            Default command type for Read commands.
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.SqlDefaultWriteCmdType">
            <summary>
            Default command type for Write commands.
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.SqlDefaultWriteCmdTypeStr">
            <summary>
            Default command type for Write commands.
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.FileDefaultReadCmdType">
            <summary>
            Default command type for Read commands.
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.FileDefaultReadCmdTypeStr">
            <summary>
            Default command type for Read commands.
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.FileDefaultWriteCmdType">
            <summary>
            Default command type for Write commands.
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.FileDefaultWriteCmdTypeStr">
            <summary>
            Default command type for Write commands.
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.MaxTicket">
            <summary>
            max ticket
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.MaxPartitionTicket">
            <summary>
            maxpartitionticket
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.MaxDeleteTicket">
            <summary>
            maxdeleteticket
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.MaxDeploymentTicket">
            <summary>
            MaxDeploymentTicket
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.SqlClientSettingsTicket">
            <summary>
            ticket
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.FileClientSettingsTicket">
            <summary>
            ticket
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.SqlSecondaryStaleThreshold">
            <summary>
            How old a secondary must be before being considered stale
            causing clients to choose another database in the Sql FailSafe Set.
            in minutes.
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.SqlSecondaryStaleThresholdStr">
            <summary>
            String version of ClientSecondaryStaleThreshold
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.SqlSecondaryStaleDCThreshold">
            <summary>
            How old a secondary must be before being considered stale
            causing clients to choose a database in another data center.
            in minutes.
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.SqlSecondaryStaleDCThresholdStr">
            <summary>
            String version of ClientSecondaryStaleDCThreshold
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.FileSecondaryStaleThreshold">
            <summary>
            How old a secondary must be before being considered stale
            causing clients to choose another database in the Sql FailSafe Set.
            in minutes.
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.FileSecondaryStaleThresholdStr">
            <summary>
            String version of ClientSecondaryStaleThreshold
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.FileSecondaryStaleDCThreshold">
            <summary>
            How old a secondary must be before being considered stale
            causing clients to choose a database in another data center.
            in minutes.
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.FileSecondaryStaleDCThresholdStr">
            <summary>
            String version of ClientSecondaryStaleDCThreshold
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.PartitioningType">
            <summary>
            Partitioning option supported by this manifest
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.PartitioningTypeStr">
            <summary>
            get and set PartitioningType with string input/output
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.TypeOfSqlSecondaries">
            <summary>
            Replication option supported by this deployment and manifest.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.TypeOfSqlSecondariesStr">
            <summary>
            get and set PartitioningType with string input/output
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.Description">
            <summary>
            Description of the deployment
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.DataServers">
            <summary>
            Data Servers used by this deployment
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.DataCenters">
            <summary>
            Data Centers used by this deployment
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.DataServersInUse">
            <summary>
            Data Servers used by this deployment
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.ServerRoles">
            <summary>
            Server roles used by this deployment.
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.Clusters">
            <summary>
            Clusters used by this deployment
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.DatabaseTemplates">
            <summary>
            Database Templates used by this deployment
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.AllocateExportClusters">
            <summary>
            Used for autoallocate, these are the clusters that have been created separately
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.AllocateExportDataServers">
            <summary>
            Used for autoallocate, these are the clusters that have been created separately
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.TemplateObjects">
            <summary>
            Template objects, including accounts, files, distribution
            server and database, publications, subscriptions and jobs.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.SqlFailSafeSets">
            <summary>
            Collection of Sql FailSafe Sets.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.FileFailSafeSets">
            <summary>
            Collection of File Fail Safe Sets.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.DataPartitions">
            <summary>
            Collection of data partitions.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.IsAllocate">
            <summary>
            IsAllocate
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.ShouldAllocateAllNewDataPartitions">
            <summary>
            Tells us whether we should be allocating data partitions 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.ExportFromExistingDeployment">
            <summary>
            Tells us if we are exporing out existing deployment information (so we only have to do a fragment)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.ContainsInitialSqlClientSettings">
            <summary>
            Inidicates whether on the Import if Sql Client settings were passed in
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.ContainsInitialFileClientSettings">
            <summary>
            Inidicates whether on the Import if File Client settings were passed in
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.IsGeoEnabled">
            <summary>
            If the Deployment is GeoEnabled, extra validation is performed for various commands
            including Dep and fss import, promote/demote, etc.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDeploymentCollection">
             <summary>
            
             </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeploymentCollection.Add(Microsoft.Webstore.Management.Wmo.WmoDeployment)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeploymentCollection.IndexOf(System.Guid)">
            <summary>
            Returns the index of the first object of the given name.
            </summary>
            <returns>
            The 0-based index of the first object with the name.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeploymentCollection.Initialize">
            <summary>
            Loads the in-memory data from the config dbs, shallow initialize
            only initializes simple member variables of manifests, no collections
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeploymentCollection.GetStatus(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Boolean,System.Int32@)">
            <summary>
            GetStatus method for the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeploymentCollection.List(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder)">
            <summary>
            Lists all Deployments.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeploymentCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeploymentCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeploymentCollection.Item(System.Guid)">
            <summary>
            guid indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDeploymentObject">
            <summary>
            Base class for deployment objects
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeploymentObject.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeploymentObject.Name">
            <summary>
            Name of the deployment.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeploymentObject.DeploymentUid">
            <summary>
            UID of the deployment to which this object belongs
            set by the collection's Add method
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDeploymentObjectCollection">
            <summary>
            Base collection class for derivers of WmoDeploymentObject
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeploymentObjectCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeploymentObjectCollection.Add(Microsoft.Webstore.Management.Wmo.WmoDeploymentObject)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeploymentObjectCollection.DeploymentUid">
            <summary>
            the uid of the deployment that this collection belongs to
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeploymentObjectCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeploymentObjectCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDistributionDatabase">
            <summary>
            Class for distribution databases
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDistributionDatabase.#ctor(System.Guid)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDistributionDatabase.SetPublisherToUseDistributor(System.String,System.String)">
            <summary>
            run once per publishing server to associate the publishing server 
            with a distribution server
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDistributionDatabase.SqlServerUid">
            <summary>
            Name of the server hosting this database
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDistributionDatabase.SqlServerName">
            <summary>
            Name of the server hosting this database
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDistributionDatabase.DatabaseName">
            <summary>
            name of the object
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDistributionDatabase.ConfigSprocs">
            <summary>
            to run sprocs against config db (initialize)
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet">
            <summary>
            Class for File Fail Safe Sets
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.IsOperationAllowed(Microsoft.Webstore.Management.Wmo.WmoFileShare,System.String,System.Boolean)">
            <summary>
            Determines whether a particular operation is allowed or not
            </summary>
            <param name="fs"></param>
            <param name="op"></param>
            <param name="throwException"></param>
            <returns>bool</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.GetValidStatuses(System.String)">
            <summary>
            Gets the valid statuses for a given operation
            </summary>
            <param name="operation"></param>
            <returns>string</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Initialize from the config dbs to in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Initialize from the xml file
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.Uninitialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Uninitialize internal data from Initalize()
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.InitializeFileShare(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Initialize from the config dbs to in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.ReInitialize">
            <summary>
            ReInitialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.ExportForRegister(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Used only for bulk registration for FileFailSafeSets.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.Drop(System.Boolean)">
            <summary>
            drop fail safe set
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.DeployAudit(System.Guid)">
            <summary>
            Installs the FileShares etc in the 'real' world.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.Deploy(System.Object)">
            <summary>
            Installs the FileShares etc in the 'real' world.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.AddFileShare(System.String,System.String)">
            <summary>
            Add a fileshare. Verify that the server exists, and the fileshare
            does not. Then add it to the Database collection on the
            FileFailSafeSet and on the DataServer FileShare collection.
            Finally, register it with WstConfig.
            Note, this method is called by WmoCommandFileShare.Import
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.PromoteAudit(System.String,System.String,System.Guid)">
            <summary>
            Audit the promote
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.Promote(System.String,System.String,System.Guid)">
            <summary>
            Promotes the given FileShare to be the primary in the File Fail Safe Set
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.PromoteFSS(System.Guid)">
            <summary>
            Promote for the Fail Safe Set
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.DemoteAudit(System.String,System.String,System.Guid)">
            <summary>
            Audit the Demote
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.Demote(System.String,System.String)">
            <summary>
            Demotes the primary FileShare to be a secondary in the File
            Fail Safe Set
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.DemoteFSS(System.Guid)">
            <summary>
            Demote the fail safe set.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.ChangeConfigFileShareDemote(Microsoft.Webstore.Management.Wmo.WmoFileShare)">
            <summary>
            Changes the config db to demote this FileShare
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.ChangeConfigMarkNeedsRepairAndDemote(Microsoft.Webstore.Management.Wmo.WmoFileShare)">
            <summary>
            Changes the config db to demote this FileShare
            </summary>
            <summary>
            Changes the config db to demote this FileShare
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.ChangeConfigFileSharePromote(Microsoft.Webstore.Management.Wmo.WmoFileShare)">
            <summary>
            Changes the config db to demote this FileShare
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.MarkOfflineAudit(System.String,System.String,System.Guid)">
            <summary>
            Marks this FileShare offline (admin access only) with auditting
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.MarkOffline(System.String,System.String)">
            <summary>
            Marks this FileShare offline (admin access only)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.MarkNeedsRepairAudit(System.String,System.String,System.Guid)">
            <summary>
            Marks this FileShare MarkNeedsRepair (admin access only) with auditting
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.MarkNeedsRepair(System.String,System.String,System.Guid)">
            <summary>
            Marks this FileShare offline (admin access only)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.MarkOnlineAudit(System.String,System.String,System.Guid)">
            <summary>
            Marks this fileshare online (admin access only) and audit it
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.MarkOnline(System.String,System.String)">
            <summary>
            Marks this FileShare offline (admin access only)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.RepairAudit(System.String,System.String,System.Guid)">
            <summary>
            Repair this fileshare (admin access only) and audit it
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.Repair(System.String,System.String)">
            <summary>
            Repair simply changes fileshare status to offline for time being
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.ChangeStatusInConfigDB(Microsoft.Webstore.Management.Wmo.WmoFileShare,Microsoft.Webstore.Management.Wmo.WmoEnum.FileShareStatus)">
            <summary>
            Changes the config db to marks this FileShare offline
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.ChangeDefaultPrimary(Microsoft.Webstore.Management.Wmo.WmoFileShare)">
            <summary>
            Change the Primary file share of this fail safe set
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.GetStatus(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Boolean,System.Int32@)">
            <summary>
            GetStatus method for the object.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.Deployment">
            <summary>
            Set by the parent when this class is instantiated. This allows us to access
            child properties. This is used specifically to figure out what kind of Fail
            Safe Set Manager to create.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.DeploymentUid">
            <summary>
            UID of the deployment to which this object belongs
            set by the collection's Add method
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.ID">
            <summary>
            Number of the object
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.IDStr">
            <summary>
            String version of the number of the object
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.Ticket">
            <summary>
            Ticket used for Polling.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.Status">
            <summary>
            Status: Deployed, NotDeployed
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.PrimaryShareUid">
            <summary>
            Primary File Share for the Fail Safe Set
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.DefaultPrimaryShareUid">
            <summary>
            Default Primary File Share for the Fail Safe Set
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.FileShares">
            <summary>
            File Shares in this File Fail Safe Set
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSetCollection">
            <summary>
            Collection class for WmoFileFailSafeSet
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSetCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSetCollection.Add(Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSetCollection.Initialize">
            <summary>
            Initialize from the config dbs to in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSetCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            initializes from xml file
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSetCollection.Uninitialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Removes any allocated data from the Initialize() call
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSetCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSetCollection.ExportForRegister(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder)">
            <summary>
            Used by Collection Register command to do bulk import of FileFailSafeSets and Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSetCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSetCollection.Validate">
            <summary>
            Validate the internal consistency of the Collection and each
            object within the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSetCollection.GetStatus(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Boolean,System.Int32@)">
            <summary>
            GetStatus method for the collection.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSetCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSetCollection.Deployment">
            <summary>
            Set by the parent when this class is instantiated. This allows us to access
            child properties. This is used specifically to figure out what kind of Fail
            Safe Set Manager to create.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoFileGroup">
            <summary>
            This class is used for defining the file groups, logical files, and
            backup stripes related to the creation, backing up and restoring of
            sQl databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroup.#ctor">
            <summary>
            Default constructor. The DatabaseTemplateUid and FileGroupName must
            still be set. Once these have been set, the WmoLogicalFileCollection
            must also have these values set.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroup.#ctor(System.Guid)">
            <summary>
            Constructor with the DatabaseTemplateUid passed in.
            The name of the object must still be defined before it can be
            registered. Once these two are set, the WmoLogicalFileCollection
            must also have these values set.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroup.#ctor(System.Guid,System.String)">
            <summary>
            Constructor with the DatabaseTemplateUid and FileGroupName passed in.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroup.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Initialize from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroup.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Initialize the class from the WstConfig database. This method is called from
            the WmoDatabaseCollection initialize method or from the WmoFileGroup collection
            initialize method.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroup.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Register the template. This method is called with Dtc already started at the collection level.
            All validation should be completed before you get to this step.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroup.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroup.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileGroup.IsInCollection">
            <summary>
            Whether this object is in a collection (set by the add/remove
            methods for collections determines whether the name can be set)
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection">
            <summary>
            Collection class for databases
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.#ctor(System.Guid)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.IndexOf(System.String)">
            <summary>
            Returns the index of the first object of the given name.
            </summary>
            <returns>
            The 0-based index of the first object with the name.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.Contains(System.String)">
            <summary>
            Tests whether the collection contains an object of the given name.
            </summary>
            <returns>
            true if the collection contains an object identified by the name;
            false if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            required for ICollection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.Add(Microsoft.Webstore.Management.Wmo.WmoFileGroup)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.Remove(System.String)">
            <summary>
            Removes an object from the object collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.GetEnumerator">
            <summary>
            Gets the IEnumerator for this WmoFileGroupCollection.  This is meant to
            support the foreach statement.
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.Validate">
            <summary>
            Validates the databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.Clean">
            <summary>
            remove all elements
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.DatabaseTemplateUid">
            <summary>
            DatabaseTemplateUid of the parent
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.Count">
            <summary>
            count of objects in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.Item(System.String)">
            <summary>
            FileGroupName indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.IsSynchronized">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.SyncRoot">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.WmoFileGroupEnumerator">
            <summary>
            This class implements the IEnumerator over a WmoNamedObjectCollection in support
            of the "foreach" keyword
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.WmoFileGroupEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.WmoFileGroupEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            Must be called before accessing the Current element.
            </summary>
            <returns>
            true if enumerator successfully advanced to next element;
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.WmoFileGroupEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoFileShare">
            <summary>
            Class for file share information.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShare.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShare.Initialize(System.String,System.String,System.Guid)">
            <summary>
            Initialize from passing in parameters
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShare.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Initialize from xml dbs to in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShare.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Register this File share
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShare.Register">
            <summary>
            Register this fileshare
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShare.Initialize(Microsoft.Webstore.WstClient.WstDataReader,System.Guid,System.Guid)">
            <summary>
            Initialize from the config dbs to in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShare.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Uses in-memory data to create an XML element.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShare.ExportForRegister(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Used for bulk insert during register.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShare.Deploy">
            <summary>
            Simply Validate
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShare.Setup">
            <summary>
            deploy fileshare and change status to be online
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShare.UnRegister">
            <summary>
            Removes the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShare.UnRegister(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            UnRegister this fileshare
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShare.UnDeploy">
            <summary>
            What to do?
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShare.Validate">
            <summary>
            validate 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShare.DeployValidate">
            <summary>
            validate if fileshare exists, throws exception if it doesn't
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShare.GetStatus(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Boolean,System.Int32@)">
            <summary>
            GetStatus method for the object.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShare.Uid">
            <summary>
            Uid of this file share
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShare.FileSharePath">
            <summary>
            Path for this share.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShare.DataServer">
            <summary>
            The server where this file share path resides.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShare.DataServerName">
            <summary>
            The string name of the server where this file share path resides.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShare.DeploymentUid">
            <summary>
            Guid of the deployment that this file share belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShare.FileFailSafeSetID">
            <summary>
            File Fail Safe Set that this file share belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShare.FileFailSafeSet">
            <summary>
            FileFailSafeSet
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShare.Ticket">
            <summary>
            Ticket
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShare.Status">
            <summary>
            Status: Online or Offline. TODO: Determine if there are more states for File Shares.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShare.StatusStr">
            <summary>
            String converstion for Status of the File Share
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShare.IsPrimary">
            <summary>
            Primary File Share. For Promote/Demote.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShare.IsDefaultPrimary">
            <summary>
            The default primary share state. Used to restore a system to a known state.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShare.IsInCollection">
            <summary>
            whether this object is in a collection
            (set by the add/remove methods for collections
            determines whether the share path can be set)
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection">
            <summary>
            Collection class for File Shares
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.m_FileShares">
            <summary>
            Keep track of FileShares in collection using an ArrayList.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.IndexOf(System.String,System.String)">
            <summary>
            Returns the index of the first file share with the given data
            server and path.
            </summary>
            <returns>
            The 0-based index.
            -1 if the collection doesn't contain the object.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.IndexOf(System.Guid)">
            <summary>
            Returns the index of the first object of the given uid.
            </summary>
            <returns>
            The 0-based index of the first object with the uid.
            -1 if the collection doesn't contain an object with this uid.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.Contains(System.String,System.String)">
            <summary>
            Tests whether the collection contains an object of the given name.
            </summary>
            <returns>
            true if the collection contains an object identified by the name;
            false if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            required for ICollection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.Add(Microsoft.Webstore.Management.Wmo.WmoFileShare)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.Remove(System.String,System.String)">
            <summary>
            Removes an object from the object collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.ExportForRegister(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Used by the Register FailSafeSet collection for bulk inserts.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.Validate">
            <summary>
            Validate each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.GetEnumerator">
            <summary>
            Gets the IEnumerator for this WmoFileShareCollection.  This is
            meant to support the foreach statement.
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.Deploy">
            <summary>
            Installs the file shares in the 'real' world.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.GetStatus(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Boolean,System.Int32@)">
            <summary>
            GetStatus method for the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.Clean">
            <summary>
            remove all elements
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.Count">
            <summary>
            count of FileShares in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.Item(System.String,System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.Item(System.Guid)">
            <summary>
            Uid indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.IsSynchronized">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.SyncRoot">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.DeploymentUid">
            <summary>
            The uid of the deployment that this collection belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.FileFailSafeSetID">
            <summary>
            File Fail Safe Set that this file share collection belongs to
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.DataServer">
            <summary>
            Server that this file share is installed on.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.WmoFileShareEnumerator">
            <summary>
            This class implements the IEnumerator over a WmoFileShareCollection
            in support of the "foreach" keyword
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.WmoFileShareEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before
            the first element in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.WmoFileShareEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            Must be called before accessing the Current element.
            </summary>
            <returns>
            true if enumerator successfully advanced to next element;
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.WmoFileShareEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoLogFile">
            <summary>
            The WmoLogFile is a special hybrid between the WmoFileGroup and WmoLogicalFile
            classes. The LogFile has one FileGroup with the name LogFile which has one
            logical file of the users choosing. The data for the WmoLogFile class is stored
            in the LogicalFile table.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogFile.#ctor">
            <summary>
            Only the DatabaseTemplateUid is needed.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogFile.#ctor(System.Guid)">
            <summary>
            Only the DatabaseTemplateUid is needed.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogFile.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Initialize from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogFile.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Initialize the class from the WstConfig database. This method is called from
            the WmoDatabaseCollection initialize method or from the WmoLogFile collection
            initialize method.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogFile.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Register the template. This method is called with Dtc already started at the collection level.
            All validation should be completed before you get to this step.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogFile.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogFile.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoLogFile.DatabaseTemplateUid">
            <summary>
            The DatabaseTemplateUID passed in from the parent.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoLogFile.LogicalFileName">
            <summary>
            The LogicalFileName from the logicalFiles collection.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoLogicalFile">
            <summary>
            This class is used for defining a logical file, used for creating, backing up 
            and restoring Sql databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFile.#ctor">
            <summary>
            After using this constructor the user must set the DatabaseTemplateUid
            and FileGroupName.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFile.#ctor(System.Guid,System.String)">
            <summary>
            Pass in two parts of the identity for the logical file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFile.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Initialize from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFile.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Initialize from sql data reader.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFile.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Register the LogicalFile. This method is called with Dtc already started at the
            collection level. All validation should be completed before you get to this step.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFile.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Converts the internal variables into an XML fragment. This is appended
            to the Xml document object to output to a file by the parent.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFile.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoLogicalFile.IsInCollection">
            <summary>
            Whether this object is in a collection (set by the add/remove
            methods for collections determines whether the name can be set)
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection">
            <summary>
            Collection class for databases
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.#ctor">
            <summary>
            Default constructor. Must set the DatabaseTemplateUid and the FileGroupName.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.#ctor(System.Guid,System.String)">
            <summary>
            Prefered constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.IndexOf(System.String)">
            <summary>
            Returns the index of the first object of the given name.
            </summary>
            <returns>
            The 0-based index of the first object with the name.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.Contains(System.String)">
            <summary>
            Tests whether the collection contains an object of the given name.
            </summary>
            <returns>
            true if the collection contains an object identified by the name;
            false if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            required for ICollection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.Add(Microsoft.Webstore.Management.Wmo.WmoLogicalFile)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.Remove(System.String)">
            <summary>
            Removes an object from the object collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.GetEnumerator">
            <summary>
            Gets the IEnumerator for this WmoLogicalFileCollection.  This is meant to
            support the foreach statement.
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.Validate">
            <summary>
            Validates the databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.Clean">
            <summary>
            remove all elements
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.Count">
            <summary>
            count of objects in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.FileGroupName">
            <summary>
            count of objects in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.DatabaseTemplateUid">
            <summary>
            count of objects in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.IsSynchronized">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.SyncRoot">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.WmoLogicalFileEnumerator">
            <summary>
            This class implements the IEnumerator over a WmoNamedObjectCollection in support
            of the "foreach" keyword
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.WmoLogicalFileEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.WmoLogicalFileEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            Must be called before accessing the Current element.
            </summary>
            <returns>
            true if enumerator successfully advanced to next element;
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.WmoLogicalFileEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoReplicationLatency">
            <summary>
            Base class for databases
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationLatency.GetStatus(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Boolean,System.Int32@)">
            <summary>
            GetStatus method for the object.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationLatency.Publisher">
            <summary>
            The source of the publication.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationLatency.Subscriber">
            <summary>
            The source of the publication.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationLatency.Latency">
            <summary>
            The replication latency in seconds.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationLatency.LatencyBucket">
            <summary>
            The replication latency bucket.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection">
            <summary>
            Collection class for the above.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.m_objects">
            <summary>
            Keep track of objects in collection using an ArrayList.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.IndexOf(Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            Returns the index of the first object of the given name.
            </summary>
            <returns>
            The 0-based index of the first object with the name.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.Contains(Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            Tests whether the collection contains an object of the given name.
            </summary>
            <returns>
            true if the collection contains an object identified by the name;
            false if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            required for ICollection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.Add(Microsoft.Webstore.Management.Wmo.WmoReplicationLatency)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.Remove(Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            Removes an object from the object collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.GetEnumerator">
            <summary>
            Gets the IEnumerator for this WmoReplicationLatencyCollection.  This is meant to
            support the foreach statement.
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.GetStatus(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Boolean,System.Int32@)">
            <summary>
            GetStatus method for the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.Clean">
            <summary>
            remove all elements
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.Count">
            <summary>
            count of objects in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.Item(Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.IsSynchronized">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.SyncRoot">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.WmoReplicationLatencyEnumerator">
            <summary>
            This class implements the IEnumerator over a WmoNamedObjectCollection in support
            of the "foreach" keyword
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.WmoReplicationLatencyEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.WmoReplicationLatencyEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            Must be called before accessing the Current element.
            </summary>
            <returns>
            true if enumerator successfully advanced to next element;
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.WmoReplicationLatencyEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet">
            <summary>
            Class for Sql Fail Safe Sets
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Initialize from the config dbs to in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Initialize from the xml file
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Uninitialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Uninitialize internal data from Initalize()
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.InitializeAppDB(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Initialize from the config dbs to in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.InitializeGeoPartner(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Initialize from the config dbs to in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.ReInitialize">
            <summary>
            ReInitialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.ExportForRegister(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Used only for bulk registration for SqlFailSafeSets.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Drop(System.Boolean)">
            <summary>
            Drop fail safe set. The caller must have done the following before this call is made:
                Mapped the Data Partitions pointing to this FSS to a different FSS or to -1.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Deploy">
            <summary>
            Installs the databases etc in the 'real' world.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.DeployAudit(System.Guid)">
            <summary>
            Audit the Deploy
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Deploy(System.Object)">
            <summary>
            Installs the databases etc in the 'real' world.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Upgrade(System.Object)">
            <summary>
            Installs the databases etc in the 'real' world.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Downgrade(System.Object)">
            <summary>
            If a user feels that upgrade has failed, we supply the downgrade method.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.AddDatabase(System.String,System.String,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus)">
            <summary>
            Add a database. Verify that the server exists, and the database
            does not. Then add it to the Database collection on the
            SqlFailSafeSet and on the DataServer Database collection.
            Finally, register it with WstConfig.
            Note, this method is called by WmoCommandDatabase.Import and
            WmoCommandDatabase.AddConfig. The latter code is only reachable
            through MSI setup.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.RegisterLatency(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Initializes the data in the SqlFssLatency table
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.AddReplica(System.Object)">
            <summary>
            Add replicas to an existing sql fail safe set.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.AddReplica(System.String)">
            <summary>
            Add replicas to an existing sql fail safe set.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.PromoteAudit(System.String,System.String,System.Guid,Microsoft.Webstore.Management.Wmo.WmoAdminLock)">
            <summary>
            Audit the promote
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.PromoteDbInMirroring(System.String,System.String)">
            <summary>
            Demotes the primary database to be a secondary in the Sql FailSafe Set and auto promotes the secondary to Primary
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.PromoteFSS(System.Guid,System.Boolean)">
            <summary>
            Promote for the Fail Safe Set
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Promote(System.String,System.String,System.Guid,System.Boolean,Microsoft.Webstore.Management.Wmo.WmoAdminLock)">
            <summary>
            Promotes the given database to be the primary in the Sql FailSafe Set
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.DemoteWithPromoteDecisionTree(Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            If a databases needs to be demoted, it returns it. Otherwise it returns null. 
            </summary>
            <param name="databaseToPromote"></param>
            <returns>WmoDatabase primaryToDemote</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.DemoteFSS(System.Guid)">
            <summary>
            Demote the fail safe set.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.MarkOfflineFSS(System.Guid,System.Boolean)">
            <summary>
            Mark an entire fail safe set offline.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.MarkOnlineFSS(System.Guid)">
            <summary>
            Mark an entire fail safe set online.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.DemoteAudit(System.String,System.String,System.Guid,Microsoft.Webstore.Management.Wmo.WmoAdminLock)">
            <summary>
            Audit the Demote
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.DemoteDbInMirroring(System.String,System.String)">
            <summary>
            Demotes the primary database to be a secondary in the Sql FailSafe Set and auto promotes the secondary to Primary
            A database in mirroring can only be in the following state online/offline/notdeployed/needsrepair
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Demote(System.String,System.String,System.Guid,Microsoft.Webstore.Management.Wmo.WmoAdminLock)">
            <summary>
            Demotes the primary database to be a secondary in the Sql FailSafe Set
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.MarkOfflineAudit(System.String,System.String,System.Guid,System.Boolean,System.Boolean,Microsoft.Webstore.Management.Wmo.WmoAdminLock)">
            <summary>
            Marks this database offline (admin access only) and audit it
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.MarkOffline(System.String,System.String,System.Guid,System.Boolean,Microsoft.Webstore.Management.Wmo.WmoAdminLock)">
            <summary>
            Marks this database offline (admin access only)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.ForceMarkOfflineDatabase(System.String,System.String,System.Boolean)">
            <summary>
            We have to do this because in Mirroring db offline -force is not allowed
            while fss offline -force is allowed.
            </summary>
            <param name="serverName"></param>
            <param name="dbName"></param>
            <param name="isUpgradeWithReplTearDown"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.ForceMarkOffline(System.String,System.String,System.Boolean)">
            <summary>
            Marks this database offline (admin access only)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.MarkOfflineAudit(System.Object)">
            <summary>
            Marks this database offline (admin access only)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.MarkNeedsRepairAudit(System.String,System.String,System.Guid,System.Boolean)">
            <summary>
            Marks this database MarkNeedsRepair (admin access only) and audit it
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.MarkNeedsRepair(System.String,System.String,System.Guid,System.Boolean)">
            <summary>
            Marks this database needs repair
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.MarkNeedsRepairAudit(System.Object)">
            <summary>
            Called by Multi-Threading
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.MarkOnlineAudit(System.String,System.String,System.Guid,System.Boolean,System.Boolean,Microsoft.Webstore.Management.Wmo.WmoAdminLock)">
            <summary>
            Marks this database online (admin access only) and audit it
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.MarkStandbyAudit(System.String,System.String,System.Guid,System.Boolean)">
            <summary>
            Marks this database standby (admin access only) and audit it
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.MarkOnline(System.String,System.String,System.Boolean,Microsoft.Webstore.Management.Wmo.WmoAdminLock,System.Boolean)">
            <summary>
            Marks this database online (admin access only)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.ForceMarkOnline(System.String,System.String)">
            <summary>
            Marks this database online. This command is a database level only command.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.ChangingStatus(Microsoft.Webstore.Management.Wmo.WmoDatabase,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus)">
            <summary>
            Messages that the database is being marked to "status" state, then calls
            SecondaryDeploymentManager.ChangeStatusInConfigDB to change it.
            </summary>
            <param name="database"></param>
            <param name="status"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.MarkOnline(System.String,System.String,System.Boolean)">
            <summary>
            This command is for strictly database level commands. Any call to this method will
            simply mark the database as Online. If a DefaultStatus is available on the database
            it is ignored.
            </summary>
            <param name="serverName"></param>
            <param name="dbName"></param>
            <param name="isUpgradeWithReplTearDown"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.MarkStandby(System.String,System.String,System.Boolean)">
            <summary>
            Marks this database standby (admin access only)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.MarkOnlineAudit(System.Object)">
            <summary>
            Marks this database online (admin access only)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.RepairAudit(System.String,System.String,System.Guid)">
            <summary>
            Repair the database (admin access only) and audit it
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Repair(System.String,System.String,System.Boolean)">
            <summary>
            Repairs the database. The Repair essentially calls DeploySecondary.
            However, we do additional checks, such as making sure that there
            is a primary database that is online, that the database is
            actually marked for repair, and that the force flag has not been
            used. The final state of the database is Offline.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.RepairAudit(System.Object)">
            <summary>
            Called by Multi-Threading
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.ForceRepair(System.String,System.String)">
            <summary>
            Forces Repairs of the database. In the case where all databases are
            marked as Needs Repair, we allow the operator to select a database
            to mark online.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.ChangeDefaultPrimary(Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            Change the Primary Database of this fail safe set
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.ChangeDefaultGeoPartner(Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            Change the default GeoPartner database for this fail safe set and datacenter
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.MovePrimary(Microsoft.Webstore.Management.Wmo.WmoDatabase,System.Guid)">
            <summary>
            Swap the Primary and DefaultPrimary with the GeoPartner and DefaultGeoPartner in a
            different data center.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.CheckGeoPartnerStatus(Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            Used by MovePrimary. checks the state of GP in the new datacenter.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.GetStatus(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Boolean,System.Int32@)">
            <summary>
            GetStatus method for the object.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.UpgradeAudit(System.Guid,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Audit the update from one manifest to the next
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.DeployUpgradeOrDowngradeScripts(System.Guid,Microsoft.Webstore.Management.Wmo.WmoManifest,System.Boolean,System.Boolean,System.Boolean,Microsoft.Webstore.Management.Wmo.WmoEnum.SetupType)">
            <summary>
            DeployUpgradeScripts will walk through each database, put it into the correct
            state. (demoted, offline) then call the WmoDatabase level DeployUpgrade scripts.
            Once this is complete, it will online and demote as appropriate for the parameters
            passed in by the user.
            </summary>
            <param name="parentAuditUid"></param>
            <param name="manDelta"></param>
            <param name="isTopologyChange"></param>
            <param name="isReplTearDown"></param>
            <param name="isRolling"></param>
            <param name="setupType"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.RestoreDefaultDatabaseState(Microsoft.Webstore.Management.Wmo.WmoDatabase,System.Guid,System.Boolean)">
            <summary>
            Returns to database to default state (online or standby). Used during upgrade.
            </summary>
            <param name="db"></param>
            <param name="parentAuditUid"></param>
            <param name="isReplTearDown"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.SetupReplicationAfterUpgradeOrDowngrade(System.Guid,System.Boolean,System.Boolean)">
            <summary>
            Once the upgrade or downgrade scripts have been run, it is possible that replication
            will not be set up. Set it up here.
            In addition, for an MM upgrade with rolling upgrade, do the data sync in a "rolling" manor.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.UpdateSqlFailSafeSetMMDropReplication(System.Int16,System.DateTime)">
            <summary>
            Set the value of the MMDropReplication column in the SqlFailSafeSet table.
            DropReplication column in the SqlFailSafeSet table.
            This code path is being used for Deployment Upgrade and for MoveData.
            In the case of Deployment Upgrade, replication is dropped at the start of the upgrade.
            The datetime saved in this column is used to syncronize any data items that were
            added or updated since replication was dropped.
            In the case of MoveData, the datetime is used to indicate when MoveData is started so
            that all data is syncronized for the new Sql FSS primaries to the replicas.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.GetSqlFailSafeSetMMDropReplication">
            <summary>
            Fetch saved state information
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.DowngradeAudit(System.Guid,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Audit the update from one manifest to the next
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.SetManifestUid(System.Guid)">
            <summary>
            SetManifestUid
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.SetupRepl(System.String,System.String,System.Boolean)">
            <summary>
            Setup replication.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.SetupRepl(System.Boolean)">
            <summary>
            Setup replication for all databases in the FSS.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.DropRepl(System.String,System.String,System.Boolean)">
            <summary>
            Drop replication.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.DropRepl(System.Boolean)">
            <summary>
            Drop replication from all databases in the FSS.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.MarkNeedsRepl(System.String,System.String,System.DateTime,System.DateTime)">
            <summary>
            Mark the ti_NeedsRepl column on all tables on a multimaster database. Return errors if the parematers incorrect.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.MarkNeedsRepl(System.DateTime,System.DateTime)">
            <summary>
            Mark the ti_NeedsRepl column on all databases in a fail safe set.
            Called from the wst fss 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.IsLiteSpeedInstalled">
            <summary>
            The source and destination servers in a backup/restore set must both have Litespeed in order
            for the process to work.
            Backup and Restore can only happen between the primary and a secondary database.
            Furthermore, the secondary database must be in a not deployed or needs repair state.
            Therefore, we will check the servers that have these databases to see if Litespeed
            is installed. If any one of them do not have it installed, the test fails.
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Assign(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.InitializeForAssign(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Processes Xml to set the DatabaseTemplate. The rules are: If the element
            is not specified, use the preset. If the preset is not specified, use the
            default. In all cases verify the templates exist.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.IsDatabaseInPrimaryDataCenter(Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            Returns true if the server where the databases exists is in the same data center
            as the DefaultPrimary database server.
            It will also return true if the Deployment is not GeoEnabled.
            And return true for any deployment that is not MultiMaster.
            Database must be in the FailSafeSet.
            </summary>
            <param name="db"></param>
            <returns>bool</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.GetDatabasesInDataCenter(System.String)">
            <summary>
            Meant to be called from methods that already know that there is at least one
            database in the datacenter that is passed in. Will throw an exception if no
            databases are found.
            </summary>
            <param name="dataCenterName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.GetGeoPartnerInDataCenter(Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            Gets GeoPartner database in the passed in DataCenter. If the DB is demoted,
            the method returns null.
            </summary>
            <param name="database"></param>
            <returns>WmoDatabase</returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Deployment">
            <summary>
            Set by the parent when this class is instantiated. This allows us to access
            child properties. This is used specifically to figure out what kind of Fail
            Safe Set Manager to create.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.ManifestUid">
            <summary>
            The ManifestUid of the SqlFailSafeSet can be different from the
            Deployment ManifestUid during upgrade.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.TypeOfSqlSecondaries">
            <summary>
            Replication option supported by this fail safe set.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.SecondaryDeploymentManager">
            <summary>
            This virtual property determines what manager to return to the caller.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.ID">
            <summary>
            Number of the object
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.IDStr">
            <summary>
            String version of the number of the object
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Status">
            <summary>
            Status: Deployed, NotDeployed, UpOrDowngrading, MovingData
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.PrimaryDatabaseUid">
            <summary>
            Primary database for the fail safe set
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.DefaultPrimaryDatabaseUid">
            <summary>
            Default primary database for the fail safe set
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.WitnessServerUid">
            <summary>
            Witness server for the partition
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Databases">
            <summary>
            Databases in this Sql FailSafe Set
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Allocated">
            <summary>
            if current fss is auto allocated or not
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Override">
            <summary>
            Override for MarkOnline
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.ReplicationPublicationDeploy">
            <summary>
            Publication info for the fail safe set.
            </summary>
            Publication information can differ between the deployment and the fail safe set
            due to topology upgrade. Therefore we have a Deployment level ReplPublicationForSecondaries
            and a FSS level ReplPublicationForSecondaries.
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.ClusterUid">
            <summary>
            The ClusterUid for the Sql Fail Safe Set.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Cluster">
            <summary>
            The Cluster for the Sql Fail Safe Set. Note that this.clusterUid must exist.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.DatabaseTemplateUid">
            <summary>
            The database template for the sql fail safe set.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.DatabaseTemplateName">
            <summary>
            The database template name used for export.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection">
            <summary>
            Collection class for WmoSqlFailSafeSet
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.Add(Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.Initialize">
            <summary>
            Initialize from the config dbs to in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            initializes from xml file
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.Uninitialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Removes any allocated data from the Initialize() call
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement,System.Boolean)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.ExportForRegister(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder)">
            <summary>
            Used by Collection Register command to do bulk import of SqlFailSafeSets and Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.Register">
            <summary>
            Registers SqlFailSafeSets.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.Validate">
            <summary>
            Validate the internal consistency of the Collection and each
            object within the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.GetStatus(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Boolean,System.Int32@)">
            <summary>
            GetStatus method for the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.SetAllocated(System.Boolean)">
            <summary>
            set allocated flag on all member.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.Assign">
            <summary>
            Assign DatabaseTemplate to each FSS in the array.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.Deployment">
            <summary>
            Set by the parent when this class is instantiated. This allows us to access
            child properties. This is used specifically to figure out what kind of Fail
            Safe Set Manager to create.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.NumSecondaries">
            <summary>
            NumSecondaries for auto allocate
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.NumPrimariesPerServer">
            <summary>
            NumPrimariesPerServer for auto allocate
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.PrimaryDatabaseName">
            <summary>
            Is the structure for the name of primary databases that are created through auto allocate
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.SecondaryDatabaseName">
            <summary>
            Is the structure for the name of secondary databases that are created through auto allocate
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.BeginNumber">
            <summary>
            When numbering the sql fail safe sets, this is the beginning number to start with
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.Datacenter">
            <summary>
            The data center that will be replaced in the Mask strings
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.ServerCluster">
            <summary>
            The server cluster that will be replaced in the Mask strings
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.PrimaryServerIdMask">
            <summary>
            The mask for the primary server id (e.g. "000" to force the server id to be three characters)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.SecondaryServerIdMask">
            <summary>
            The mask for the secondary server id (e.g. "000" to force the server id to be three characters)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.FssIdMask">
            <summary>
            The mask for the fail safe set id (e.g. "000" to force the fail safe set id to be three characters)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.UsePrimaryDatabaseName">
            <summary>
            This determines whether we should use the PrimaryDatabaseName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.UseSecondaryDatabaseName">
            <summary>
            This determines whether we should use the SecondaryDatabaseName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.PresetDatabaseTemplateName">
            <summary>
            Used for when the customer wants one database template for all fail safe sets.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.PresetDatabaseTemplateUid">
            <summary>
            Used for when the customer wants one database template for all fail safe sets.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.MirroringWitnessServerNames">
            <summary>
            List of all of the witness servers that will be used for allocation on new fail safe sets (it will alternate)
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDeployTemplateObjects">
            <summary>
            Definition of the WmoDeployTemplateObjects class.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployTemplateObjects.#ctor">
            <summary>
            Constructor for the WmoDeployTemplateObjects class.
            </summary>
            <remarks>Written by BradT</remarks>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployTemplateObjects.Initialize">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployTemplateObjects.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Loads the in-memory data from the Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployTemplateObjects.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployTemplateObjects.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployTemplateObjects.Accounts">
            <summary>
            The Security Accounts collection.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployTemplateObjects.SystemManifestUid">
            <summary>
            The Manifest Uid of the Webstore system manifest (WebstoreManifest)
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoJobDeploy">
            <summary>
            Class for job deployments
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoJobDeploy.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoJobDeploy.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoJobDeploy.Initialize(Microsoft.Webstore.Management.Wmo.WmoManifestJob)">
            <summary>
            Using the WmoManifestJob as a base, create the WmoJobDeploy object
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoJobDeploy.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoJobDeploy.DeploymentUid">
            <summary>
            The GUID for the Deployment in which owns this job.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoJobDeploy.ManifestUid">
            <summary>
            The GUID for the Manifest in which this job is registered
            This value is populated by the thread that creates this object.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoJobDeployCollection">
            <summary>
            Collection class for WmoJobDeploy
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoJobDeployCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoJobDeployCollection.InitializeFromManifest">
            <summary>
            Initialize from Manifest
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoJobDeployCollection.Add(Microsoft.Webstore.Management.Wmo.WmoJobDeploy)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoJobDeployCollection.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoJobDeployCollection.ValidateName(Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection)">
            <summary>
            Validates the Job Instance Name. Walk through every partition and
            combine the given job name with the database name. If it is to long,
            throw an error. At any time, any database can be promoted or
            demoted, causing the various jobs to be installed. This check will
            guarantee that we won't have jobs with names that would be
            truncated after a successful Setup.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoJobDeployCollection.ManifestUid">
            <summary>
            The GUID for the Manifest in which these jobs exist.
            This value is populated by the thread that creates this object.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoJobDeployCollection.DeploymentUid">
            <summary>
            The Uid of the Deployment that this collection belongs to
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoJobDeployCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoJobDeployCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoReplicationDistributionDeploy">
            <summary>
            Class to hold the default distribution settings for a deployment.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationDistributionDeploy.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationDistributionDeploy.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationDistributionDeploy.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Reads the XML node to initialize during Import.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationDistributionDeploy.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationDistributionDeploy.RegisterUpdate">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationDistributionDeploy.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationDistributionDeploy.DeploymentUid">
            <summary>
            The uid of the deployment
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationDistributionDeploy.DrainNumRetries">
            <summary>
            Drain No Of Retries
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationDistributionDeploy.DrainIntervalSecs">
            <summary>
            Drain Interval
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationDistributionDeploy.StaleAlertInterval">
            <summary>
            The Stale Alert Interval in seconds.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoReplicationPublicationDeploy">
            <summary>
            Class to hold the default Publication settings for a deployment.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationPublicationDeploy.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationPublicationDeploy.Initialize">
            <summary>
            Creates a WstConfig connection then calls Initialize(reader)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationPublicationDeploy.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
            NOTE: This inititilize has two incoming paths. You will need to change the sprocs
            WspGetReplPublicationDeploy and WspGetFailSafeSetReplPublicationDeploy if you wish
            to change this code.
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationPublicationDeploy.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoManifestPublication)">
            <summary>
            Initialize during Import 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationPublicationDeploy.Initialize(Microsoft.Webstore.Management.Wmo.WmoManifestPublication)">
            <summary>
            Initialize during Upgrade
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationPublicationDeploy.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationPublicationDeploy.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationPublicationDeploy.DeploymentUid">
            <summary>
            The Deployment Uid where this publication is registered.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationPublicationDeploy.ManifestUid">
            <summary>
            The Manifest Uid where this publication is registered.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationPublicationDeploy.ManifestPubName">
            <summary>
            The Manifest publication name where this publication is registered.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationPublicationDeploy.IsInteresting">
            <summary>
            Whether this object has been populated
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoSecurityAccount">
            <summary>
            Class for registered accounts
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSecurityAccount.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSecurityAccount.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSecurityAccount.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSecurityAccount.Register">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSecurityAccount.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSecurityAccount.UnRegisterRole(System.String)">
            <summary>
            Removes the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSecurityAccount.UnRegister">
            <summary>
            Removes the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSecurityAccount.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSecurityAccount.IsNT">
            <summary>
            Whether this account is an NT security account
            (if not, must be SQL Server security)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSecurityAccount.ManifestUid">
            <summary>
            Uid of the manifest of the security roles
            that this account belongs to
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSecurityAccount.SecurityRoles">
            <summary>
            Security roles to which this account belongs
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoSecurityAccountCollection">
            <summary>
            Collection class for WmoSecurityAccount
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSecurityAccountCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSecurityAccountCollection.Add(Microsoft.Webstore.Management.Wmo.WmoSecurityAccount)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSecurityAccountCollection.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSecurityAccountCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSecurityAccountCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSecurityAccountCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSecurityAccountCollection.ManifestUid">
            <summary>
            Manifest whose roles this account can belong to
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoStripe">
            <summary>
            During repair operations or when adding a database, the stripe class is
            used to determine where the BAK files go.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripe.#ctor">
            <summary>
            Once constructed, the class requires the DatabaseTemplateUid.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripe.#ctor(System.Guid)">
            <summary>
            Class requires the DatabaseTemplateUid for all work.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripe.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Initialize from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripe.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Initialize from sql data reader.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripe.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Register the Stripe. This method is called with Dtc already started at the
            collection level. All validation should be completed before you get to this step.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripe.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Converts the internal variables into an XML fragment. This is appended
            to the Xml document object to output to a file by the parent.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripe.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoStripe.IsInCollection">
            <summary>
            Indicates whether this object is part of a collection.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoStripeCollection">
            <summary>
            Collection class for databases
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.#ctor(System.Guid)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.IndexOf(System.String)">
            <summary>
            Returns the index of the first object of the given name.
            </summary>
            <returns>
            The 0-based index of the first object with the name.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.Contains(System.String)">
            <summary>
            Tests whether the collection contains an object of the given name.
            </summary>
            <returns>
            true if the collection contains an object identified by the name;
            false if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            required for ICollection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.Add(Microsoft.Webstore.Management.Wmo.WmoStripe)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.Remove(System.String)">
            <summary>
            Removes an object from the object collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.GetEnumerator">
            <summary>
            Gets the IEnumerator for this WmoStripeCollection.  This is meant to
            support the foreach statement.
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.Initialize">
            <summary>
            Execute WspGetStripe. This will return one result set consisting of all Stripes, 
            given the passed in parameters.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.Validate">
            <summary>
            Validates the databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.Clean">
            <summary>
            remove all elements
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.Count">
            <summary>
            count of objects in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.DatabaseTemplateUid">
            <summary>
            The parent.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.IsSynchronized">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.SyncRoot">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.WmoStripeEnumerator">
            <summary>
            This class implements the IEnumerator over a WmoNamedObjectCollection in support
            of the "foreach" keyword
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.WmoStripeEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.WmoStripeEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            Must be called before accessing the Current element.
            </summary>
            <returns>
            true if enumerator successfully advanced to next element;
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.WmoStripeEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnvironment">
            <summary>
            Class for Environment
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnvironment.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnvironment.Initialize">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnvironment.Register">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoEnvironment.Name">
            <summary>
            Environment Name
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoEnvironment.Uid">
            <summary>
            Environment Uid
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoEnvironment.PollingIntervalClient">
            <summary>
            Cfg Setting: PollingIntervalClient
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoEnvironment.TicketExpirationInterval">
            <summary>
            Cfg Setting: TicketExpirationInterval
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoEnvironment.PollingOffsetClient">
            <summary>
            Cfg Setting: PollingOffsetClient
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoEnvironment.PollingOffsetService">
            <summary>
            Cfg Setting: PollingOffsetService
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoEnvironment.LatencyBucket0">
            <summary>
            Cfg Setting: LatencyBucket0
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoEnvironment.LatencyBucket1">
            <summary>
            Cfg Setting: LatencyBucket1
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoEnvironment.LatencyBucket2">
            <summary>
            Cfg Setting: LatencyBucket2
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoEnvironment.LatencyBucket3">
            <summary>
            Cfg Setting: LatencyBucket3
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoEnvironment.LockWaitInterval">
            <summary>
            Cfg Setting: LockWaitInterval
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoEnvironment.LockNumRetries">
            <summary>
            Cfg Setting: LockNumRetries
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoEnvironment.Ticket">
            <summary>
            Ticket
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.MoveDataJobSupport">
            <summary>
            Wrapper class for access to the JobEngine.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.MoveDataJobSupport.MoveDataJobCallback">
            <summary>
            The callback method for status report updates.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection">
            <summary>
            Collection class for WebstorePartitionMoveMap
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.SafeGet(System.String,System.String)">
            <summary>
            Get the data from the WebstorePartitionMoveMap table.
            </summary>//
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.Insert(System.String,System.String)">
            <summary>
            Call the WebstorePartitionMoveMap.Insert method on each object in this collection.
            Each object must have been initialized before calling this method.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.Clear">
            <summary>
            remove all elements
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.IndexOf(System.Int16)">
            <summary>
            Returns the index of the first object of the given name.
            </summary>
            <returns>
            The 0-based index of the first object with the name.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.Sort">
            <summary>
            Sorts the array.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.ObjectAtIndex(System.Int32)">
            <summary>
            Returns the object at a given index in the internal array.
            used only by the enumerator.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.Contains(System.Int16)">
            <summary>
            Tests whether the collection contains an object of the given name.
            </summary>
            <returns>
            true if the collection contains an object identified by the name;
            false if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            required for ICollection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.Add(Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.Remove(System.Int16)">
            <summary>
            Removes an object from the object collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.GetEnumerator">
            <summary>
            Gets the IEnumerator for this WmoDatabaseCollection.  This is meant to
            support the foreach statement.
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.DeploymentName">
            <summary>
            The Deployment defines the list of all partitions being moved.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.Count">
            <summary>
            count of objects in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.Item(System.Int16)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.IsSynchronized">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.SyncRoot">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.WebstorePartitionMoveMapEnumerator">
            <summary>
            This class implements the IEnumerator over a WebstorePartitionMoveMapCollection
            in support of the "foreach" keyword
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.WebstorePartitionMoveMapEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.WebstorePartitionMoveMapEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            Must be called before accessing the Current element.
            </summary>
            <returns>
            true if enumerator successfully advanced to next element;
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.WebstorePartitionMoveMapEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap">
            <summary>
            This class is essentially just a structure to hold data from some columns of
            the WstConfig database PartitionMoveMap table.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap.#ctor(System.Guid)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap.Get(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Get the data from the WstConfig version of the PartitionMoveMap table.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap.GetStatus">
            <summary>
            Get the Status of the partition. Used within the watcher thread.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap.DeploymentUid">
            <summary>
            The deployment name involved in the move.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap.PartitionNum">
            <summary>
            The partition number of the data.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap.OldSQLFSSNum">
            <summary>
            The Sql Fail Safe Set where the data from the indicated partition is moving from.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap.NewSQLFSSNum">
            <summary>
            The Sql Fail Safe Set where the data from the indicated partition is moving to.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap.Status">
            <summary>
            Each partition being moved has a seperate status.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap.Progress">
            <summary>
            Freeform progress string. Updated by the watcher thread.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap.SourceServerName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap.SourceDatabaseName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap.DestinationServerName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap.DestinationDatabaseName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap.IsInCollection">
            <summary>
            Determines if this object is part of the Collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap.JobQueued">
            <summary>
            When the job is submitted to the job engine
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap.JobState">
            <summary>
            State of the job according to the job framework.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap.ApplicationGetStatusFailureCount">
            <summary>
            The number of times a failure occurs trying to get application status.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection">
            <summary>
            Collection class for WstConfigPartitionMoveMap
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.#ctor(System.Guid)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.Get">
            <summary>
            Get the data from the WstConfigPartitionMoveMap table.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.GetServersForJobs">
            <summary>
            Returns a generic List of servers where a partition on the server is either
            initialized or has a JobStarted status.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.IndexOf(System.Int16)">
            <summary>
            Returns the index of the first object of the given name.
            </summary>
            <returns>
            The 0-based index of the first object with the name.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.Sort">
            <summary>
            Sorts the array.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.ObjectAtIndex(System.Int32)">
            <summary>
            Returns the object at a given index in the internal array.
            used only by the enumerator.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.Contains(System.Int16)">
            <summary>
            Tests whether the collection contains an object of the given name.
            </summary>
            <returns>
            true if the collection contains an object identified by the name;
            false if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            required for ICollection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.Add(Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.Remove(System.Int16)">
            <summary>
            Removes an object from the object collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.GetEnumerator">
            <summary>
            Gets the IEnumerator.
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.DeploymentUid">
            <summary>
            The Deployment defines the list of all partitions being moved.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.Count">
            <summary>
            count of objects in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.Item(System.Int16)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.IsSynchronized">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.SyncRoot">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.WstConfigPartitionMoveMapEnumerator">
            <summary>
            This class implements the IEnumerator over a WstConfigPartitionMoveMapCollection
            in support of the "foreach" keyword
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.WstConfigPartitionMoveMapEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.WstConfigPartitionMoveMapEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            Must be called before accessing the Current element.
            </summary>
            <returns>
            true if enumerator successfully advanced to next element;
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.WstConfigPartitionMoveMapEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.SourceDestinationPair">
            <summary>
            Internal class used for the Status command.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoConfigManager">
            <summary>
            Summary description for WmoConfigManager.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager">
            <summary>
            Summary description for WmoFailSafeSetDatabaseManager.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.IsOperationAllowedForTopology(System.String,System.Boolean)">
            <summary>
            Gets the valid statuses for a given operation
            </summary>
            <param name="op"></param>
            <param name="throwException"></param>
            <returns>bool</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.GetTopology">
            <summary>
            Gets the currently employed toplogy
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.GetValidOperations(System.String)">
            <summary>
            Gets the valid statuses (in a comma separated string) for a given topology
            </summary>
            <param name="topology"></param>
            <returns>string</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.IsOperationAllowed(Microsoft.Webstore.Management.Wmo.WmoDatabase,System.String,System.Boolean)">
            <summary>
            Gets the valid statuses for a given operation
            </summary>
            <param name="db"></param>
            <param name="op"></param>
            <param name="throwException"></param>
            <returns>bool</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.GetValidStatuses(System.String)">
            <summary>
            Gets the valid statuses for a given operation
            </summary>
            <param name="operation"></param>
            <returns>string</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.PrepareForDeploy(System.String,System.String)">
            <summary>
            Preparation steps for Deploy.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.UpgradePreCheck(System.Boolean)">
            <summary>
            Upgrade precheck
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.PrepareForUpOrDowngrade(System.Int16)">
            <summary>
            Preparation steps for upgrade.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.DeployEmptySecondary(System.String,System.String,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus)">
            <summary>
            Deploys a secondary database during initial deployment of the failsafe set.
            Exception if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.DeploySecondary(System.String,System.String,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus,System.Boolean)">
            <summary>
            Deploys a secondary database for all commands except initial deployment
            of the failsafe set. 
            Used for repairing a failed secondary.
            Exception if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.PrepareForRepair(System.String,System.String)">
            <summary>
            Preparation steps for Repair.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.Repair(System.String,System.String,System.Boolean)">
            <summary>
            Repairs a database that has been Marked as NeedsRepair.
            Changes Status of the database to Offline when finished.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.PrepareForOffline(System.String,System.String)">
            <summary>
            Preparation steps for Mark Offline.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.PrepareForForceOffline(System.String,System.String)">
            <summary>
            Preparation steps for Mark Offline.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.MarkOffline(System.String,System.String)">
            <summary>
            Does what is required for marking a database offline.
            Does nothing if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.ForceMarkOnline(System.String,System.String)">
            <summary>
            Marks a database online, ignoring errors.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.ForceMarkOffline(System.String,System.String)">
            <summary>
            Does what is required for marking a database offline.
            Does nothing if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.MarkNeedsRepair(System.String,System.String,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus)">
            <summary>
            Does what is required for marking a database Needs Repair.
            Does nothing if the database listed is not in this.Databases.
            NOTE: called inside a try-catch block which swallows any exceptions thrown.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.PrepareForOnline(System.String,System.String)">
            <summary>
            Preparation steps for Mark Online.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.MarkOnline(System.String,System.String)">
            <summary>
            Does what is required for marking a database online.
            Does nothing if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.PrepareForStandby(System.String,System.String)">
            <summary>
            Preparation steps for Mark Standby.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.MarkStandby(System.String,System.String)">
            <summary>
            Does what is required by replication/logshipping for marking
            a database standby.
            Does nothing if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.Promote(System.String,System.String)">
            <summary>
            Does what is required for promoting a database.
            Exception if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.Demote(System.String,System.String,System.Boolean)">
            <summary>
            Does what is required for demoting a database.
            Exception if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.PrepareForDemote(System.String,System.String)">
            <summary>
            Preparation steps for Demote.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.AfterDemote(System.String,System.String)">
            <summary>
            AfterDemote
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.PrepareForPromote(System.String,System.String)">
            <summary>
            Preparation steps for Promote.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.AfterPromote(System.String,System.String)">
            <summary>
            AfterPromote
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.AfterRepair(System.String,System.String,System.Boolean)">
            <summary>
            AfterPromote
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.SetupRepl(System.String,System.String,System.Boolea