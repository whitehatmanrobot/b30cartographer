n <see cref="T:System.Linq.IGrouping`2" />.
                </param>
      <param name="resultSelector">
                    A function to create a result value from each group.
                </param>
      <param name="comparer">
                    An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys with.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TKey">
                    The type of the key returned by <paramref name="keySelector" />.
                </typeparam>
      <typeparam name="TElement">
                    The type of the elements in each <see cref="T:System.Linq.IGrouping`2" />.
                </typeparam>
      <typeparam name="TResult">
                    The type of the result value returned by <paramref name="resultSelector" />.
                </typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
      <summary>
                    Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.
                </summary>
      <returns>
                    A collection of elements of type <paramref name="TResult" /> where each element represents a projection over a group and its key.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.
                </param>
      <param name="keySelector">
                    A function to extract the key for each element.
                </param>
      <param name="resultSelector">
                    A function to create a result value from each group.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TKey">
                    The type of the key returned by <paramref name="keySelector" />.
                </typeparam>
      <typeparam name="TResult">
                    The type of the result value returned by <paramref name="resultSelector" />.
                </typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
                    Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The keys are compared by using a specified comparer.
                </summary>
      <returns>
                    A collection of elements of type <paramref name="TResult" /> where each element represents a projection over a group and its key.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.
                </param>
      <param name="keySelector">
                    A function to extract the key for each element.
                </param>
      <param name="resultSelector">
                    A function to create a result value from each group.
                </param>
      <param name="comparer">
                    An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys with.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TKey">
                    The type of the key returned by <paramref name="keySelector" />.
                </typeparam>
      <typeparam name="TResult">
                    The type of the result value returned by <paramref name="resultSelector" />.
                </typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
      <summary>
                    Correlates the elements of two sequences based on equality of keys and groups the results. The default equality comparer is used to compare keys.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements of type <paramref name="TResult" /> that are obtained by performing a grouped join on two sequences.
                </returns>
      <param name="outer">
                    The first sequence to join.
                </param>
      <param name="inner">
                    The sequence to join to the first sequence.
                </param>
      <param name="outerKeySelector">
                    A function to extract the join key from each element of the first sequence.
                </param>
      <param name="innerKeySelector">
                    A function to extract the join key from each element of the second sequence.
                </param>
      <param name="resultSelector">
                    A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.
                </param>
      <typeparam name="TOuter">
                    The type of the elements of the first sequence.
                </typeparam>
      <typeparam name="TInner">
                    The type of the elements of the second sequence.
                </typeparam>
      <typeparam name="TKey">
                    The type of the keys returned by the key selector functions.
                </typeparam>
      <typeparam name="TResult">
                    The type of the result elements.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>
                    Correlates the elements of two sequences based on key equality and groups the results. A specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> is used to compare keys.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements of type <paramref name="TResult" /> that are obtained by performing a grouped join on two sequences.
                </returns>
      <param name="outer">
                    The first sequence to join.
                </param>
      <param name="inner">
                    The sequence to join to the first sequence.
                </param>
      <param name="outerKeySelector">
                    A function to extract the join key from each element of the first sequence.
                </param>
      <param name="innerKeySelector">
                    A function to extract the join key from each element of the second sequence.
                </param>
      <param name="resultSelector">
                    A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.
                </param>
      <param name="comparer">
                    An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to hash and compare keys.
                </param>
      <typeparam name="TOuter">
                    The type of the elements of the first sequence.
                </typeparam>
      <typeparam name="TInner">
                    The type of the elements of the second sequence.
                </typeparam>
      <typeparam name="TKey">
                    The type of the keys returned by the key selector functions.
                </typeparam>
      <typeparam name="TResult">
                    The type of the result elements.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
                    Produces the set intersection of two sequences by using the default equality comparer to compare values.
                </summary>
      <returns>
                    A sequence that contains the elements that form the set intersection of two sequences.
                </returns>
      <param name="first">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in <paramref name="second" /> will be returned.
                </param>
      <param name="second">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in the first sequence will be returned.
                </param>
      <typeparam name="TSource">
                    The type of the elements of the input sequences.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
                    Produces the set intersection of two sequences by using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.
                </summary>
      <returns>
                    A sequence that contains the elements that form the set intersection of two sequences.
                </returns>
      <param name="first">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in <paramref name="second" /> will be returned.
                </param>
      <param name="second">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in the first sequence will be returned.
                </param>
      <param name="comparer">
                    An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.
                </param>
      <typeparam name="TSource">
                    The type of the elements of the input sequences.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
      <summary>
                    Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that has elements of type <paramref name="TResult" /> that are obtained by performing an inner join on two sequences.
                </returns>
      <param name="outer">
                    The first sequence to join.
                </param>
      <param name="inner">
                    The sequence to join to the first sequence.
                </param>
      <param name="outerKeySelector">
                    A function to extract the join key from each element of the first sequence.
                </param>
      <param name="innerKeySelector">
                    A function to extract the join key from each element of the second sequence.
                </param>
      <param name="resultSelector">
                    A function to create a result element from two matching elements.
                </param>
      <typeparam name="TOuter">
                    The type of the elements of the first sequence.
                </typeparam>
      <typeparam name="TInner">
                    The type of the elements of the second sequence.
                </typeparam>
      <typeparam name="TKey">
                    The type of the keys returned by the key selector functions.
                </typeparam>
      <typeparam name="TResult">
                    The type of the result elements.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>
                    Correlates the elements of two sequences based on matching keys. A specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> is used to compare keys.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that has elements of type <paramref name="TResult" /> that are obtained by performing an inner join on two sequences.
                </returns>
      <param name="outer">
                    The first sequence to join.
                </param>
      <param name="inner">
                    The sequence to join to the first sequence.
                </param>
      <param name="outerKeySelector">
                    A function to extract the join key from each element of the first sequence.
                </param>
      <param name="innerKeySelector">
                    A function to extract the join key from each element of the second sequence.
                </param>
      <param name="resultSelector">
                    A function to create a result element from two matching elements.
                </param>
      <param name="comparer">
                    An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to hash and compare keys.
                </param>
      <typeparam name="TOuter">
                    The type of the elements of the first sequence.
                </typeparam>
      <typeparam name="TInner">
                    The type of the elements of the second sequence.
                </typeparam>
      <typeparam name="TKey">
                    The type of the keys returned by the key selector functions.
                </typeparam>
      <typeparam name="TResult">
                    The type of the result elements.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
                    Returns the last element of a sequence.
                </summary>
      <returns>
                    The value at the last position in the source sequence.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the last element of.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The source sequence is empty.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
                    Returns the last element of a sequence that satisfies a specified condition.
                </summary>
      <returns>
                    The last element in the sequence that passes the test in the specified predicate function.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.
                </param>
      <param name="predicate">
                    A function to test each element for a condition.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    No element satisfies the condition in <paramref name="predicate" />.
                
                    -or-
                
                    The source sequence is empty.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
                    Returns the last element of a sequence, or a default value if the sequence contains no elements.
                </summary>
      <returns>default(<paramref name="TSource" />) if the source sequence is empty; otherwise, the last element in the <see cref="T:System.Collections.Generic.IEnumerable`1" />.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the last element of.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
                    Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.
                </summary>
      <returns>default(<paramref name="TSource" />) if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.
                </param>
      <param name="predicate">
                    A function to test each element for a condition.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
                    Returns an <see cref="T:System.Int64" /> that represents the total number of elements in a sequence.
                </summary>
      <returns>
                    The number of elements in the source sequence.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements to be counted.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
      <exception cref="T:System.OverflowException">
                    The number of elements exceeds <see cref="F:System.Int64.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
                    Returns an <see cref="T:System.Int64" /> that represents how many elements in a sequence satisfy a condition.
                </summary>
      <returns>
                    A number that represents how many elements in the sequence satisfy the condition in the predicate function.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements to be counted.
                </param>
      <param name="predicate">
                    A function to test each element for a condition.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.
                </exception>
      <exception cref="T:System.OverflowException">
                    The number of matching elements exceeds <see cref="F:System.Int64.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
                    Returns the maximum value in a sequence of <see cref="T:System.Decimal" /> values.
                </summary>
      <returns>
                    The maximum value in the sequence.
                </returns>
      <param name="source">
                    A sequence of <see cref="T:System.Decimal" /> values to determine the maximum value of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
                    Returns the maximum value in a sequence of <see cref="T:System.Double" /> values.
                </summary>
      <returns>
                    The maximum value in the sequence.
                </returns>
      <param name="source">
                    A sequence of <see cref="T:System.Double" /> values to determine the maximum value of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
                    Returns the maximum value in a sequence of <see cref="T:System.Int32" /> values.
                </summary>
      <returns>
                    The maximum value in the sequence.
                </returns>
      <param name="source">
                    A sequence of <see cref="T:System.Int32" /> values to determine the maximum value of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
                    Returns the maximum value in a sequence of <see cref="T:System.Int64" /> values.
                </summary>
      <returns>
                    The maximum value in the sequence.
                </returns>
      <param name="source">
                    A sequence of <see cref="T:System.Int64" /> values to determine the maximum value of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>
                    Returns the maximum value in a sequence of nullable <see cref="T:System.Decimal" /> values.
                </summary>
      <returns>
                    A value of type Nullable&lt;Decimal&gt; in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the maximum value in the sequence. 
                </returns>
      <param name="source">
                    A sequence of nullable <see cref="T:System.Decimal" /> values to determine the maximum value of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>
                    Returns the maximum value in a sequence of nullable <see cref="T:System.Double" /> values.
                </summary>
      <returns>
                    A value of type Nullable&lt;Double&gt; in C# or Nullable(Of Double) in Visual Basic that corresponds to the maximum value in the sequence.
                </returns>
      <param name="source">
                    A sequence of nullable <see cref="T:System.Double" /> values to determine the maximum value of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>
                    Returns the maximum value in a sequence of nullable <see cref="T:System.Int32" /> values.
                </summary>
      <returns>
                    A value of type Nullable&lt;Int32&gt; in C# or Nullable(Of Int32) in Visual Basic that corresponds to the maximum value in the sequence. 
                </returns>
      <param name="source">
                    A sequence of nullable <see cref="T:System.Int32" /> values to determine the maximum value of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>
                    Returns the maximum value in a sequence of nullable <see cref="T:System.Int64" /> values.
                </summary>
      <returns>
                    A value of type Nullable&lt;Int64&gt; in C# or Nullable(Of Int64) in Visual Basic that corresponds to the maximum value in the sequence. 
                </returns>
      <param name="source">
                    A sequence of nullable <see cref="T:System.Int64" /> values to determine the maximum value of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>
                    Returns the maximum value in a sequence of nullable <see cref="T:System.Single" /> values.
                </summary>
      <returns>
                    A value of type Nullable&lt;Single&gt; in C# or Nullable(Of Single) in Visual Basic that corresponds to the maximum value in the sequence.
                </returns>
      <param name="source">
                    A sequence of nullable <see cref="T:System.Single" /> values to determine the maximum value of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>
                    Returns the maximum value in a sequence of <see cref="T:System.Single" /> values.
                </summary>
      <returns>
                    The maximum value in the sequence.
                </returns>
      <param name="source">
                    A sequence of <see cref="T:System.Single" /> values to determine the maximum value of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
                    Returns the maximum value in a generic sequence.
                </summary>
      <returns>
                    The maximum value in the sequence.
                </returns>
      <param name="source">
                    A sequence of values to determine the maximum value of.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>
                    Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Decimal" /> value.
                </summary>
      <returns>
                    The maximum value in the sequence.
                </returns>
      <param name="source">
                    A sequence of values to determine the maximum value of.
                </param>
      <param name="selector">
                    A transform function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>
                    Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Double" /> value.
                </summary>
      <returns>
                    The maximum value in the sequence.
                </returns>
      <param name="source">
                    A sequence of values to determine the maximum value of.
                </param>
      <param name="selector">
                    A transform function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>
                    Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Int32" /> value.
                </summary>
      <returns>
                    The maximum value in the sequence.
                </returns>
      <param name="source">
                    A sequence of values to determine the maximum value of.
                </param>
      <param name="selector">
                    A transform function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>
                    Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Int64" /> value.
                </summary>
      <returns>
                    The maximum value in the sequence.
                </returns>
      <param name="source">
                    A sequence of values to determine the maximum value of.
                </param>
      <param name="selector">
                    A transform function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>
                    Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Decimal" /> value.
                </summary>
      <returns>
                    The value of type Nullable&lt;Decimal&gt; in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the maximum value in the sequence.
                </returns>
      <param name="source">
                    A sequence of values to determine the maximum value of.
                </param>
      <param name="selector">
                    A transform function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>
                    Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Double" /> value.
                </summary>
      <returns>
                    The value of type Nullable&lt;Double&gt; in C# or Nullable(Of Double) in Visual Basic that corresponds to the maximum value in the sequence.
                </returns>
      <param name="source">
                    A sequence of values to determine the maximum value of.
                </param>
      <param name="selector">
                    A transform function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>
                    Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Int32" /> value.
                </summary>
      <returns>
                    The value of type Nullable&lt;Int32&gt; in C# or Nullable(Of Int32) in Visual Basic that corresponds to the maximum value in the sequence.
                </returns>
      <param name="source">
                    A sequence of values to determine the maximum value of.
                </param>
      <param name="selector">
                    A transform function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>
                    Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Int64" /> value.
                </summary>
      <returns>
                    The value of type Nullable&lt;Int64&gt; in C# or Nullable(Of Int64) in Visual Basic that corresponds to the maximum value in the sequence.
                </returns>
      <param name="source">
                    A sequence of values to determine the maximum value of.
                </param>
      <param name="selector">
                    A transform function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>
                    Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Single" /> value.
                </summary>
      <returns>
                    The value of type Nullable&lt;Single&gt; in C# or Nullable(Of Single) in Visual Basic that corresponds to the maximum value in the sequence.
                </returns>
      <param name="source">
                    A sequence of values to determine the maximum value of.
                </param>
      <param name="selector">
                    A transform function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>
                    Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Single" /> value.
                </summary>
      <returns>
                    The maximum value in the sequence.
                </returns>
      <param name="source">
                    A sequence of values to determine the maximum value of.
                </param>
      <param name="selector">
                    A transform function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
                    Invokes a transform function on each element of a generic sequence and returns the maximum resulting value.
                </summary>
      <returns>
                    The maximum value in the sequence.
                </returns>
      <param name="source">
                    A sequence of values to determine the maximum value of.
                </param>
      <param name="selector">
                    A transform function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TResult">
                    The type of the value returned by <paramref name="selector" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
                    Returns the minimum value in a sequence of <see cref="T:System.Decimal" /> values.
                </summary>
      <returns>
                    The minimum value in the sequence.
                </returns>
      <param name="source">
                    A sequence of <see cref="T:System.Decimal" /> values to determine the minimum value of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
                    Returns the minimum value in a sequence of <see cref="T:System.Double" /> values.
                </summary>
      <returns>
                    The minimum value in the sequence.
                </returns>
      <param name="source">
                    A sequence of <see cref="T:System.Double" /> values to determine the minimum value of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
                    Returns the minimum value in a sequence of <see cref="T:System.Int32" /> values.
                </summary>
      <returns>
                    The minimum value in the sequence.
                </returns>
      <param name="source">
                    A sequence of <see cref="T:System.Int32" /> values to determine the minimum value of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
                    Returns the minimum value in a sequence of <see cref="T:System.Int64" /> values.
                </summary>
      <returns>
                    The minimum value in the sequence.
                </returns>
      <param name="source">
                    A sequence of <see cref="T:System.Int64" /> values to determine the minimum value of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>
                    Returns the minimum value in a sequence of nullable <see cref="T:System.Decimal" /> values.
                </summary>
      <returns>
                    A value of type Nullable&lt;Decimal&gt; in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the minimum value in the sequence.
                </returns>
      <param name="source">
                    A sequence of nullable <see cref="T:System.Decimal" /> values to determine the minimum value of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>
                    Returns the minimum value in a sequence of nullable <see cref="T:System.Double" /> values.
                </summary>
      <returns>
                    A value of type Nullable&lt;Double&gt; in C# or Nullable(Of Double) in Visual Basic that corresponds to the minimum value in the sequence.
                </returns>
      <param name="source">
                    A sequence of nullable <see cref="T:System.Double" /> values to determine the minimum value of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>
                    Returns the minimum value in a sequence of nullable <see cref="T:System.Int32" /> values.
                </summary>
      <returns>
                    A value of type Nullable&lt;Int32&gt; in C# or Nullable(Of Int32) in Visual Basic that corresponds to the minimum value in the sequence.
                </returns>
      <param name="source">
                    A sequence of nullable <see cref="T:System.Int32" /> values to determine the minimum value of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>
                    Returns the minimum value in a sequence of nullable <see cref="T:System.Int64" /> values.
                </summary>
      <returns>
                    A value of type Nullable&lt;Int64&gt; in C# or Nullable(Of Int64) in Visual Basic that corresponds to the minimum value in the sequence.
                </returns>
      <param name="source">
                    A sequence of nullable <see cref="T:System.Int64" /> values to determine the minimum value of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>
                    Returns the minimum value in a sequence of nullable <see cref="T:System.Single" /> values.
                </summary>
      <returns>
                    A value of type Nullable&lt;Single&gt; in C# or Nullable(Of Single) in Visual Basic that corresponds to the minimum value in the sequence.
                </returns>
      <param name="source">
                    A sequence of nullable <see cref="T:System.Single" /> values to determine the minimum value of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>
                    Returns the minimum value in a sequence of <see cref="T:System.Single" /> values.
                </summary>
      <returns>
                    The minimum value in the sequence.
                </returns>
      <param name="source">
                    A sequence of <see cref="T:System.Single" /> values to determine the minimum value of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
                    Returns the minimum value in a generic sequence.
                </summary>
      <returns>
                    The minimum value in the sequence.
                </returns>
      <param name="source">
                    A sequence of values to determine the minimum value of.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>
                    Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Decimal" /> value.
                </summary>
      <returns>
                    The minimum value in the sequence.
                </returns>
      <param name="source">
                    A sequence of values to determine the minimum value of.
                </param>
      <param name="selector">
                    A transform function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>
                    Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Double" /> value.
                </summary>
      <returns>
                    The minimum value in the sequence.
                </returns>
      <param name="source">
                    A sequence of values to determine the minimum value of.
                </param>
      <param name="selector">
                    A transform function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>
                    Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Int32" /> value.
                </summary>
      <returns>
                    The minimum value in the sequence.
                </returns>
      <param name="source">
                    A sequence of values to determine the minimum value of.
                </param>
      <param name="selector">
                    A transform function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>
                    Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Int64" /> value.
                </summary>
      <returns>
                    The minimum value in the sequence.
                </returns>
      <param name="source">
                    A sequence of values to determine the minimum value of.
                </param>
      <param name="selector">
                    A transform function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>
                    Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Decimal" /> value.
                </summary>
      <returns>
                    The value of type Nullable&lt;Decimal&gt; in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the minimum value in the sequence.
                </returns>
      <param name="source">
                    A sequence of values to determine the minimum value of.
                </param>
      <param name="selector">
                    A transform function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>
                    Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Double" /> value.
                </summary>
      <returns>
                    The value of type Nullable&lt;Double&gt; in C# or Nullable(Of Double) in Visual Basic that corresponds to the minimum value in the sequence.
                </returns>
      <param name="source">
                    A sequence of values to determine the minimum value of.
                </param>
      <param name="selector">
                    A transform function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>
                    Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Int32" /> value.
                </summary>
      <returns>
                    The value of type Nullable&lt;Int32&gt; in C# or Nullable(Of Int32) in Visual Basic that corresponds to the minimum value in the sequence.
                </returns>
      <param name="source">
                    A sequence of values to determine the minimum value of.
                </param>
      <param name="selector">
                    A transform function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>
                    Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Int64" /> value.
                </summary>
      <returns>
                    The value of type Nullable&lt;Int64&gt; in C# or Nullable(Of Int64) in Visual Basic that corresponds to the minimum value in the sequence.
                </returns>
      <param name="source">
                    A sequence of values to determine the minimum value of.
                </param>
      <param name="selector">
                    A transform function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>
                    Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Single" /> value.
                </summary>
      <returns>
                    The value of type Nullable&lt;Single&gt; in C# or Nullable(Of Single) in Visual Basic that corresponds to the minimum value in the sequence.
                </returns>
      <param name="source">
                    A sequence of values to determine the minimum value of.
                </param>
      <param name="selector">
                    A transform function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>
                    Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Single" /> value.
                </summary>
      <returns>
                    The minimum value in the sequence.
                </returns>
      <param name="source">
                    A sequence of values to determine the minimum value of.
                </param>
      <param name="selector">
                    A transform function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
                    Invokes a transform function on each element of a generic sequence and returns the minimum resulting value.
                </summary>
      <returns>
                    The minimum value in the sequence.
                </returns>
      <param name="source">
                    A sequence of values to determine the minimum value of.
                </param>
      <param name="selector">
                    A transform function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TResult">
                    The type of the value returned by <paramref name="selector" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
      <summary>
                    Filters the elements of an <see cref="T:System.Collections.IEnumerable" /> based on a specified type.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence of type <paramref name="TResult" />.
                </returns>
      <param name="source">
                    The <see cref="T:System.Collections.IEnumerable" /> whose elements to filter.
                </param>
      <typeparam name="TResult">
                    The type to filter the elements of the sequence on.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
                    Sorts the elements of a sequence in ascending order according to a key.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.
                </returns>
      <param name="source">
                    A sequence of values to order.
                </param>
      <param name="keySelector">
                    A function to extract a key from an element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TKey">
                    The type of the key returned by <paramref name="keySelector" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
                    Sorts the elements of a sequence in ascending order by using a specified comparer.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.
                </returns>
      <param name="source">
                    A sequence of values to order.
                </param>
      <param name="keySelector">
                    A function to extract a key from an element.
                </param>
      <param name="comparer">
                    An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TKey">
                    The type of the key returned by <paramref name="keySelector" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
                    Sorts the elements of a sequence in descending order according to a key.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.
                </returns>
      <param name="source">
                    A sequence of values to order.
                </param>
      <param name="keySelector">
                    A function to extract a key from an element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TKey">
                    The type of the key returned by <paramref name="keySelector" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
                    Sorts the elements of a sequence in descending order by using a specified comparer.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.
                </returns>
      <param name="source">
                    A sequence of values to order.
                </param>
      <param name="keySelector">
                    A function to extract a key from an element.
                </param>
      <param name="comparer">
                    An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TKey">
                    The type of the key returned by <paramref name="keySelector" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
      <summary>
                    Generates a sequence of integral numbers within a specified range.
                </summary>
      <returns>
                    An IEnumerable&lt;Int32&gt; in C# or IEnumerable(Of Int32) in Visual Basic that contains a range of sequential integral numbers.
                </returns>
      <param name="start">
                    The value of the first integer in the sequence.
                </param>
      <param name="count">
                    The number of sequential integers to generate.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than 0.
                
                    -or-
                <paramref name="start" /> + <paramref name="count" /> -1 is larger than <see cref="F:System.Int32.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
      <summary>
                    Generates a sequence that contains one repeated value.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains a repeated value.
                </returns>
      <param name="element">
                    The value to be repeated.
                </param>
      <param name="count">
                    The number of times to repeat the value in the generated sequence.
                </param>
      <typeparam name="TResult">
                    The type of the value to be repeated in the result sequence.
                </typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than 0.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
                    Inverts the order of the elements in a sequence.
                </summary>
      <returns>
                    A sequence whose elements correspond to those of the input sequence in reverse order.
                </returns>
      <param name="source">
                    A sequence of values to reverse.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
                    Projects each element of a sequence into a new form.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the transform function on each element of <paramref name="source" />.
                </returns>
      <param name="source">
                    A sequence of values to invoke a transform function on.
                </param>
      <param name="selector">
                    A transform function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TResult">
                    The type of the value returned by <paramref name="selector" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
      <summary>
                    Projects each element of a sequence into a new form by incorporating the element's index.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the transform function on each element of <paramref name="source" />.
                </returns>
      <param name="source">
                    A sequence of values to invoke a transform function on.
                </param>
      <param name="selector">
                    A transform function to apply to each source element; the second parameter of the function represents the index of the source element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TResult">
                    The type of the value returned by <paramref name="selector" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>
                    Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" />, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function <paramref name="collectionSelector" /> on each element of <paramref name="source" /> and then mapping each of those sequence elements and their corresponding source element to a result element.
                </returns>
      <param name="source">
                    A sequence of values to project.
                </param>
      <param name="collectionSelector">
                    A transform function to apply to each element of the input sequence.
                </param>
      <param name="resultSelector">
                    A transform function to apply to each element of the intermediate sequence.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TCollection">
                    The type of the intermediate elements collected by <paramref name="collectionSelector" />.
                </typeparam>
      <typeparam name="TResult">
                    The type of the elements of the resulting sequence.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="collectionSelector" /> or <paramref name="resultSelector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
      <summary>
                    Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" /> and flattens the resulting sequences into one sequence.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.
                </returns>
      <param name="source">
                    A sequence of values to project.
                </param>
      <param name="selector">
                    A transform function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TResult">
                    The type of the elements of the sequence returned by <paramref name="selector" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>
                    Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" />, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein. The index of each source element is used in the intermediate projected form of that element.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function <paramref name="collectionSelector" /> on each element of <paramref name="source" /> and then mapping each of those sequence elements and their corresponding source element to a result element.
                </returns>
      <param name="source">
                    A sequence of values to project.
                </param>
      <param name="collectionSelector">
                    A transform function to apply to each source element; the second parameter of the function represents the index of the source element.
                </param>
      <param name="resultSelector">
                    A transform function to apply to each element of the intermediate sequence.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TCollection">
                    The type of the intermediate elements collected by <paramref name="collectionSelector" />.
                </typeparam>
      <typeparam name="TResult">
                    The type of the elements of the resulting sequence.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="collectionSelector" /> or <paramref name="resultSelector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
      <summary>
                    Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" />, and flattens the resulting sequences into one sequence. The index of each source element is used in the projected form of that element.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function on each element of an input sequence.
                </returns>
      <param name="source">
                    A sequence of values to project.
                </param>
      <param name="selector">
                    A transform function to apply to each source element; the second parameter of the function represents the index of the source element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TResult">
                    The type of the elements of the sequence returned by <paramref name="selector" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
                    Determines whether two sequences are equal by comparing the elements by using the default equality comparer for their type.
                </summary>
      <returns>true if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, false.
                </returns>
      <param name="first">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to <paramref name="second" />.
                </param>
      <param name="second">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to the first sequence.
                </param>
      <typeparam name="TSource">
                    The type of the elements of the input sequences.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
                    Determines whether two sequences are equal by comparing their elements by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.
                </summary>
      <returns>true if the two source sequences are of equal length and their corresponding elements compare equal according to <paramref name="comparer" />; otherwise, false.
                </returns>
      <param name="first">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to <paramref name="second" />.
                </param>
      <param name="second">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to the first sequence.
                </param>
      <param name="comparer">
                    An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to use to compare elements.
                </param>
      <typeparam name="TSource">
                    The type of the elements of the input sequences.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
                    Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.
                </summary>
      <returns>
                    The single element of the input sequence.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the single element of.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The input sequence contains more than one element.
                
                    -or-
                
                    The input sequence is empty.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
                    Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.
                </summary>
      <returns>
                    The single element of the input sequence that satisfies a condition.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return a single element from.
                </param>
      <param name="predicate">
                    A function to test an element for a condition.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    No element satisfies the condition in <paramref name="predicate" />.
                
                    -or-
                
                    More than one element satisfies the condition in <paramref name="predicate" />.
                
                    -or-
                
                    The source sequence is empty.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
                    Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.
                </summary>
      <returns>
                    The single element of the input sequence, or default(<paramref name="TSource" />) if the sequence contains no elements.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the single element of.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The input sequence contains more than one element.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
                    Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.
                </summary>
      <returns>
                    The single element of the input sequence that satisfies the condition, or default(<paramref name="TSource" />) if no such element is found.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return a single element from.
                </param>
      <param name="predicate">
                    A function to test an element for a condition.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    More than one element satisfies the condition in <paramref name="predicate" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
                    Bypasses a specified number of elements in a sequence and then returns the remaining elements.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements that occur after the specified index in the input sequence.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return elements from.
                </param>
      <param name="count">
                    The number of elements to skip before returning the remaining elements.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
                    Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <paramref name="predicate" />.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return elements from.
                </param>
      <param name="predicate">
                    A function to test each element for a condition.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>
                    Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements. The element's index is used in the logic of the predicate function.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <paramref name="predicate" />.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return elements from.
                </param>
      <param name="predicate">
                    A function to test each source element for a condition; the second parameter of the function represents the index of the source element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
                    Computes the sum of a sequence of <see cref="T:System.Decimal" /> values.
                </summary>
      <returns>
                    The sum of the values in the sequence.
                </returns>
      <param name="source">
                    A sequence of <see cref="T:System.Decimal" /> values to calculate the sum of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
      <exception cref="T:System.OverflowException">
                    The sum is larger than <see cref="F:System.Decimal.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
                    Computes the sum of a sequence of <see cref="T:System.Double" /> values.
                </summary>
      <returns>
                    The sum of the values in the sequence.
                </returns>
      <param name="source">
                    A sequence of <see cref="T:System.Double" /> values to calculate the sum of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
                    Computes the sum of a sequence of <see cref="T:System.Int32" /> values.
                </summary>
      <returns>
                    The sum of the values in the sequence.
                </returns>
      <param name="source">
                    A sequence of <see cref="T:System.Int32" /> values to calculate the sum of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
      <exception cref="T:System.OverflowException">
                    The sum is larger than <see cref="F:System.Int32.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
                    Computes the sum of a sequence of <see cref="T:System.Int64" /> values.
                </summary>
      <returns>
                    The sum of the values in the sequence.
                </returns>
      <param name="source">
                    A sequence of <see cref="T:System.Int64" /> values to calculate the sum of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
      <exception cref="T:System.OverflowException">
                    The sum is larger than <see cref="F:System.Int64.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>
                    Computes the sum of a sequence of nullable <see cref="T:System.Decimal" /> values.
                </summary>
      <returns>
                    The sum of the values in the sequence.
                </returns>
      <param name="source">
                    A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the sum of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
      <exception cref="T:System.OverflowException">
                    The sum is larger than <see cref="F:System.Decimal.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>
                    Computes the sum of a sequence of nullable <see cref="T:System.Double" /> values.
                </summary>
      <returns>
                    The sum of the values in the sequence.
                </returns>
      <param name="source">
                    A sequence of nullable <see cref="T:System.Double" /> values to calculate the sum of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>
                    Computes the sum of a sequence of nullable <see cref="T:System.Int32" /> values.
                </summary>
      <returns>
                    The sum of the values in the sequence.
                </returns>
      <param name="source">
                    A sequence of nullable <see cref="T:System.Int32" /> values to calculate the sum of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
      <exception cref="T:System.OverflowException">
                    The sum is larger than <see cref="F:System.Int32.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>
                    Computes the sum of a sequence of nullable <see cref="T:System.Int64" /> values.
                </summary>
      <returns>
                    The sum of the values in the sequence.
                </returns>
      <param name="source">
                    A sequence of nullable <see cref="T:System.Int64" /> values to calculate the sum of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
      <exception cref="T:System.OverflowException">
                    The sum is larger than <see cref="F:System.Int64.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>
                    Computes the sum of a sequence of nullable <see cref="T:System.Single" /> values.
                </summary>
      <returns>
                    The sum of the values in the sequence.
                </returns>
      <param name="source">
                    A sequence of nullable <see cref="T:System.Single" /> values to calculate the sum of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>
                    Computes the sum of a sequence of <see cref="T:System.Single" /> values.
                </summary>
      <returns>
                    The sum of the values in the sequence.
                </returns>
      <param name="source">
                    A sequence of <see cref="T:System.Single" /> values to calculate the sum of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>
                    Computes the sum of the sequence of <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.
                </summary>
      <returns>
                    The sum of the projected values.
                </returns>
      <param name="source">
                    A sequence of values that are used to calculate a sum.
                </param>
      <param name="selector">
                    A transform function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
      <exception cref="T:System.OverflowException">
                    The sum is larger than <see cref="F:System.Decimal.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>
                    Computes the sum of the sequence of <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.
                </summary>
      <returns>
                    The sum of the projected values.
                </returns>
      <param name="source">
                    A sequence of values that are used to calculate a sum.
                </param>
      <param name="selector">
                    A transform function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>
                    Computes the sum of the sequence of <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.
                </summary>
      <returns>
                    The sum of the projected values.
                </returns>
      <param name="source">
                    A sequence of values that are used to calculate a sum.
                </param>
      <param name="selector">
                    A transform function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
      <exception cref="T:System.OverflowException">
                    The sum is larger than <see cref="F:System.Int32.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>
                    Computes the sum of the sequence of <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.
                </summary>
      <returns>
                    The sum of the projected values.
                </returns>
      <param name="source">
                    A sequence of values that are used to calculate a sum.
                </param>
      <param name="selector">
                    A transform function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
      <exception cref="T:System.OverflowException">
                    The sum is larger than <see cref="F:System.Int64.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>
                    Computes the sum of the sequence of nullable <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.
                </summary>
      <returns>
                    The sum of the projected values.
                </returns>
      <param name="source">
                    A sequence of values that are used to calculate a sum.
                </param>
      <param name="selector">
                    A transform function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
      <exception cref="T:System.OverflowException">
                    The sum is larger than <see cref="F:System.Decimal.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>
                    Computes the sum of the sequence of nullable <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.
                </summary>
      <returns>
                    The sum of the projected values.
                </returns>
      <param name="source">
                    A sequence of values that are used to calculate a sum.
                </param>
      <param name="selector">
                    A transform function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>
                    Computes the sum of the sequence of nullable <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.
                </summary>
      <returns>
                    The sum of the projected values.
                </returns>
      <param name="source">
                    A sequence of values that are used to calculate a sum.
                </param>
      <param name="selector">
                    A transform function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
      <exception cref="T:System.OverflowException">
                    The sum is larger than <see cref="F:System.Int32.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>
                    Computes the sum of the sequence of nullable <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.
                </summary>
      <returns>
                    The sum of the projected values.
                </returns>
      <param name="source">
                    A sequence of values that are used to calculate a sum.
                </param>
      <param name="selector">
                    A transform function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
      <exception cref="T:System.OverflowException">
                    The sum is larger than <see cref="F:System.Int64.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>
                    Computes the sum of the sequence of nullable <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.
                </summary>
      <returns>
                    The sum of the projected values.
                </returns>
      <param name="source">
                    A sequence of values that are used to calculate a sum.
                </param>
      <param name="selector">
                    A transform function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>
                    Computes the sum of the sequence of <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.
                </summary>
      <returns>
                    The sum of the projected values.
                </returns>
      <param name="source">
                    A sequence of values that are used to calculate a sum.
                </param>
      <param name="selector">
                    A transform function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
                    Returns a specified number of contiguous elements from the start of a sequence.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the specified number of elements from the start of the input sequence.
                </returns>
      <param name="source">
                    The sequence to return elements from.
                </param>
      <param name="count">
                    The number of elements to return.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
                    Returns elements from a sequence as long as a specified condition is true.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from the input sequence that occur before the element at which the test no longer passes.
                </returns>
      <param name="source">
                    A sequence to return elements from.
                </param>
      <param name="predicate">
                    A function to test each element for a condition.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>
                    Returns elements from a sequence as long as a specified condition is true. The element's index is used in the logic of the predicate function.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence that occur before the element at which the test no longer passes.
                </returns>
      <param name="source">
                    The sequence to return elements from.
                </param>
      <param name="predicate">
                    A function to test each source element for a condition; the second parameter of the function represents the index of the source element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
      <summary>
                    Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.
                </returns>
      <param name="source">
                    An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.
                </param>
      <param name="keySelector">
                    A function to extract a key from each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TKey">
                    The type of the key returned by <paramref name="keySelector" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
                    Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.
                </returns>
      <param name="source">
                    An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.
                </param>
      <param name="keySelector">
                    A function to extract a key from each element.
                </param>
      <param name="comparer">
                    An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TKey">
                    The type of the key returned by <paramref name="keySelector" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
      <summary>
                    Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.
                </returns>
      <param name="source">
                    An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.
                </param>
      <param name="keySelector">
                    A function to extract a key from each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TKey">
                    The type of the key returned by <paramref name="keySelector" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
                    Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.
                </returns>
      <param name="source">
                    An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.
                </param>
      <param name="keySelector">
                    A function to extract a key from each element.
                </param>
      <param name="comparer">
                    An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TKey">
                    The type of the key returned by <paramref name="keySelector" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
                    Creates an array from a <see cref="T:System.Collections.Generic.IEnumerable`1" />.
                </summary>
      <returns>
                    An array that contains the elements from the input sequence.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create an array from.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
                    Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains keys and values.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.
                </param>
      <param name="keySelector">
                    A function to extract a key from each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TKey">
                    The type of the key returned by <paramref name="keySelector" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.
                
                    -or-
                <paramref name="keySelector" /> produces a key that is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> produces duplicate keys for two elements.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
                    Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function and key comparer.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains keys and values.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.
                </param>
      <param name="keySelector">
                    A function to extract a key from each element.
                </param>
      <param name="comparer">
                    An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TKey">
                    The type of the keys returned by <paramref name="keySelector" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.
                
                    -or-
                <paramref name="keySelector" /> produces a key that is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> produces duplicate keys for two elements.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>
                    Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to specified key selector and element selector functions.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.
                </param>
      <param name="keySelector">
                    A function to extract a key from each element.
                </param>
      <param name="elementSelector">
                    A transform function to produce a result element value from each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TKey">
                    The type of the key returned by <paramref name="keySelector" />.
                </typeparam>
      <typeparam name="TElement">
                    The type of the value returned by <paramref name="elementSelector" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is null.
                
                    -or-
                <paramref name="keySelector" /> produces a key that is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> produces duplicate keys for two elements.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
                    Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function, a comparer, and an element selector function.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.
                </param>
      <param name="keySelector">
                    A function to extract a key from each element.
                </param>
      <param name="elementSelector">
                    A transform function to produce a result element value from each element.
                </param>
      <param name="comparer">
                    An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TKey">
                    The type of the key returned by <paramref name="keySelector" />.
                </typeparam>
      <typeparam name="TElement">
                    The type of the value returned by <paramref name="elementSelector" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is null.
                
                    -or-
                <paramref name="keySelector" /> produces a key that is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> produces duplicate keys for two elements.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
                    Creates a <see cref="T:System.Collections.Generic.List`1" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" />.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.Generic.List`1" /> that contains elements from the input sequence.
                </returns>
      <param name="source">
                    The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.List`1" /> from.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
                    Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Lookup`2" /> that contains keys and values.
                </returns>
      <param name="source">
                    The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.
                </param>
      <param name="keySelector">
                    A function to extract a key from each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TKey">
                    The type of the key returned by <paramref name="keySelector" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
                    Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function and key comparer.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Lookup`2" /> that contains keys and values.
                </returns>
      <param name="source">
                    The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.
                </param>
      <param name="keySelector">
                    A function to extract a key from each element.
                </param>
      <param name="comparer">
                    An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TKey">
                    The type of the key returned by <paramref name="keySelector" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>
                    Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to specified key selector and element selector functions.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Lookup`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.
                </returns>
      <param name="source">
                    The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.
                </param>
      <param name="keySelector">
                    A function to extract a key from each element.
                </param>
      <param name="elementSelector">
                    A transform function to produce a result element value from each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TKey">
                    The type of the key returned by <paramref name="keySelector" />.
                </typeparam>
      <typeparam name="TElement">
                    The type of the value returned by <paramref name="elementSelector" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
                    Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function, a comparer and an element selector function.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Lookup`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.
                </returns>
      <param name="source">
                    The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.
                </param>
      <param name="keySelector">
                    A function to extract a key from each element.
                </param>
      <param name="elementSelector">
                    A transform function to produce a result element value from each element.
                </param>
      <param name="comparer">
                    An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TKey">
                    The type of the key returned by <paramref name="keySelector" />.
                </typeparam>
      <typeparam name="TElement">
                    The type of the value returned by <paramref name="elementSelector" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
                    Produces the set union of two sequences by using the default equality comparer.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from both input sequences, excluding duplicates.
                </returns>
      <param name="first">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the first set for the union.
                </param>
      <param name="second">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the second set for the union.
                </param>
      <typeparam name="TSource">
                    The type of the elements of the input sequences.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
                    Produces the set union of two sequences by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from both input sequences, excluding duplicates.
                </returns>
      <param name="first">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the first set for the union.
                </param>
      <param name="second">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the second set for the union.
                </param>
      <param name="comparer">
                    The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.
                </param>
      <typeparam name="TSource">
                    The type of the elements of the input sequences.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
                    Filters a sequence of values based on a predicate.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence that satisfy the condition.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to filter.
                </param>
      <param name="predicate">
                    A function to test each element for a condition.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>
                    Filters a sequence of values based on a predicate. Each element's index is used in the logic of the predicate function.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence that satisfy the condition.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to filter.
                </param>
      <param name="predicate">
                    A function to test each source element for a condition; the second parameter of the function represents the index of the source element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.
                </exception>
    </member>
    <member name="T:System.Linq.EnumerableExecutor">
      <summary>
                    Represents an expression tree and provides functionality to execute the expression tree after rewriting it.
                </summary>
    </member>
    <member name="M:System.Linq.EnumerableExecutor.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Linq.EnumerableExecutor" /> class.
                </summary>
    </member>
    <member name="T:System.Linq.EnumerableExecutor`1">
      <summary>
                    Represents an expression tree and provides functionality to execute the expression tree after rewriting it.
                </summary>
      <typeparam name="T">
                    The data type of the value that results from executing the expression tree.
                </typeparam>
    </member>
    <member name="M:System.Linq.EnumerableExecutor`1.#ctor(System.Linq.Expressions.Expression)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Linq.EnumerableExecutor`1" /> class.
                </summary>
      <param name="expression">
                    An expression tree to associate with the new instance.
                </param>
    </member>
    <member name="T:System.Linq.EnumerableQuery">
      <summary>
                    Represents an <see cref="T:System.Collections.IEnumerable" /> as an <see cref="T:System.Linq.EnumerableQuery" /> data source. 
                </summary>
    </member>
    <member name="M:System.Linq.EnumerableQuery.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Linq.EnumerableQuery" /> class.
                </summary>
    </member>
    <member name="T:System.Linq.EnumerableQuery`1">
      <summary>
                    Represents an <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection as an <see cref="T:System.Linq.IQueryable`1" /> data source. 
                </summary>
      <typeparam name="T">
                    The type of the data in the collection.
                </typeparam>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Linq.EnumerableQuery`1" /> class and associates it with an <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection.
                </summary>
      <param name="enumerable">
                    A collection to associate with the new instance.
                </param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.#ctor(System.Linq.Expressions.Expression)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Linq.EnumerableQuery`1" /> class and associates the instance with an expression tree.
                </summary>
      <param name="expression">
                    An expression tree to associate with the new instance.
                </param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>
                    Returns an enumerator that can iterate through the associated <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection, or, if it is null, through the collection that results from rewriting the associated expression tree as a query on an <see cref="T:System.Collections.Generic.IEnumerable`1" /> data source and executing it.
                </summary>
      <returns>
                    An enumerator that can be used to iterate through the associated data source.
                </returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
                    Returns an enumerator that can iterate through the associated <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection, or, if it is null, through the collection that results from rewriting the associated expression tree as a query on an <see cref="T:System.Collections.Generic.IEnumerable`1" /> data source and executing it.
                </summary>
      <returns>
                    An enumerator that can be used to iterate through the associated data source.
                </returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#ElementType">
      <summary>
                    Gets the type of the data in the collection that this instance represents.
                </summary>
      <returns>
                    The type of the data in the collection that this instance represents.
                </returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#Expression">
      <summary>
                    Gets the expression tree that is associated with or that represents this instance.
                </summary>
      <returns>
                    The expression tree that is associated with or that represents this instance.
                </returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#Provider">
      <summary>
                    Gets the query provider that is associated with this instance.
                </summary>
      <returns>
                    The query provider that is associated with this instance.
                </returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>
                    Constructs a new EnumerableQuery&lt;S&gt; object and associates it with a specified expression tree that represents an IQueryable&lt;S&gt; collection of data.
                </summary>
      <returns>
                    An EnumerableQuery object that is associated with <paramref name="expression" />.
                </returns>
      <param name="expression">
                    An expression tree that represents an IQueryable&lt;S&gt; collection of data.
                </param>
      <typeparam name="S">
                    The type of the data in the collection that <paramref name="expression" /> represents.
                </typeparam>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)">
      <summary>
                    Constructs a new <see cref="T:System.Linq.EnumerableQuery`1" /> object and associates it with a specified expression tree that represents an <see cref="T:System.Linq.IQueryable" /> collection of data.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.EnumerableQuery`1" /> object that is associated with <paramref name="expression" />.
                </returns>
      <param name="expression">
                    An expression tree that represents an <see cref="T:System.Linq.IQueryable" /> collection of data.
                </param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
      <summary>
                    Executes an expression after rewriting it to call <see cref="T:System.Linq.Enumerable" /> methods instead of <see cref="T:System.Linq.Queryable" /> methods on any enumerable data sources that cannot be queried by <see cref="T:System.Linq.Queryable" /> methods.
                </summary>
      <returns>
                    The value that results from executing <paramref name="expression" />.
                </returns>
      <param name="expression">
                    An expression tree to execute.
                </param>
      <typeparam name="S">
                    The type of the data in the collection that <paramref name="expression" /> represents.
                </typeparam>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
      <summary>
                    Executes an expression after rewriting it to call <see cref="T:System.Linq.Enumerable" /> methods instead of <see cref="T:System.Linq.Queryable" /> methods on any enumerable data sources that cannot be queried by <see cref="T:System.Linq.Queryable" /> methods.
                </summary>
      <returns>
                    The value that results from executing <paramref name="expression" />.
                </returns>
      <param name="expression">
                    An expression tree to execute.
                </param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.ToString">
      <summary>
                    Returns a textual representation of the enumerable collection or, if it is null, of the expression tree that is associated with this instance.
                </summary>
      <returns>
                    A textual representation of the enumerable collection or, if it is null, of the expression tree that is associated with this instance.
                </returns>
    </member>
    <member name="T:System.Linq.IGrouping`2">
      <summary>
                    Represents a collection of objects that have a common key.
                </summary>
      <typeparam name="TKey">
                    The type of the key of the <see cref="T:System.Linq.IGrouping`2" />.
                </typeparam>
      <typeparam name="TElement">
                    The type of the values in the <see cref="T:System.Linq.IGrouping`2" />.
                </typeparam>
    </member>
    <member name="P:System.Linq.IGrouping`2.Key">
      <summary>
                    Gets the key of the <see cref="T:System.Linq.IGrouping`2" />.
                </summary>
      <returns>
                    The key of the <see cref="T:System.Linq.IGrouping`2" />.
                </returns>
    </member>
    <member name="T:System.Linq.ILookup`2">
      <summary>
                    Defines an indexer, size property, and Boolean search method for data structures that map keys to <see cref="T:System.Collections.Generic.IEnumerable`1" /> sequences of values.
                </summary>
      <typeparam name="TKey">
                    The type of the keys in the <see cref="T:System.Linq.ILookup`2" />.
                </typeparam>
      <typeparam name="TElement">
                    The type of the elements in the <see cref="T:System.Collections.Generic.IEnumerable`1" /> sequences that make up the values in the <see cref="T:System.Linq.ILookup`2" />.
                </typeparam>
    </member>
    <member name="M:System.Linq.ILookup`2.Contains(`0)">
      <summary>
                    Determines whether a specified key exists in the <see cref="T:System.Linq.ILookup`2" />.
                </summary>
      <returns>true if <paramref name="key" /> is in the <see cref="T:System.Linq.ILookup`2" />; otherwise, false.
                </returns>
      <param name="key">
                    The key to search for in the <see cref="T:System.Linq.ILookup`2" />.
                </param>
    </member>
    <member name="P:System.Linq.ILookup`2.Count">
      <summary>
                    Gets the number of key/value collection pairs in the <see cref="T:System.Linq.ILookup`2" />.
                </summary>
      <returns>
                    The number of key/value collection pairs in the <see cref="T:System.Linq.ILookup`2" />.
                </returns>
    </member>
    <member name="P:System.Linq.ILookup`2.Item(`0)">
      <summary>
                    Gets the <see cref="T:System.Collections.Generic.IEnumerable`1" /> sequence of values indexed by a specified key.
                </summary>
      <returns>
                    The <see cref="T:System.Collections.Generic.IEnumerable`1" /> sequence of values indexed by the specified key.
                </returns>
      <param name="key">
                    The key of the desired sequence of values.
                </param>
    </member>
    <member name="T:System.Linq.IOrderedEnumerable`1">
      <summary>
                    Represents a sorted sequence.
                </summary>
      <typeparam name="TElement">
                    The type of the elements of the sequence.
                </typeparam>
    </member>
    <member name="M:System.Linq.IOrderedEnumerable`1.CreateOrderedEnumerable``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0},System.Boolean)">
      <summary>
                    Performs a subsequent ordering on the elements of an <see cref="T:System.Linq.IOrderedEnumerable`1" /> according to a key.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.
                </returns>
      <param name="keySelector">
                    The <see cref="T:System.Func`2" /> used to extract the key for each element.
                </param>
      <param name="comparer">
                    The <see cref="T:System.Collections.Generic.IComparer`1" /> used to compare keys for placement in the returned sequence.
                </param>
      <param name="descending">true to sort the elements in descending order; false to sort the elements in ascending order.
                </param>
      <typeparam name="TKey">
                    The type of the key produced by <paramref name="keySelector" />.
                </typeparam>
    </member>
    <member name="T:System.Linq.IOrderedQueryable">
      <summary>
                    Represents the result of a sorting operation.
                </summary>
    </member>
    <member name="T:System.Linq.IOrderedQueryable`1">
      <summary>
                    Represents the result of a sorting operation.
                </summary>
      <typeparam name="T">
                    The type of the content of the data source.
                </typeparam>
    </member>
    <member name="T:System.Linq.IQueryable">
      <summary>
                    Provides functionality to evaluate queries against a specific data source wherein the type of the data is not specified.
                </summary>
    </member>
    <member name="P:System.Linq.IQueryable.ElementType">
      <summary>
                    Gets the type of the element(s) that are returned when the expression tree associated with this instance of <see cref="T:System.Linq.IQueryable" /> is executed.
                </summary>
      <returns>
                    A <see cref="T:System.Type" /> that represents the type of the element(s) that are returned when the expression tree associated with this object is executed.
                </returns>
    </member>
    <member name="P:System.Linq.IQueryable.Expression">
      <summary>
                    Gets the expression tree that is associated with the instance of <see cref="T:System.Linq.IQueryable" />.
                </summary>
      <returns>
                    The <see cref="T:System.Linq.Expressions.Expression" /> that is associated with this instance of <see cref="T:System.Linq.IQueryable" />.
                </returns>
    </member>
    <member name="P:System.Linq.IQueryable.Provider">
      <summary>
                    Gets the query provider that is associated with this data source.
                </summary>
      <returns>
                    The <see cref="T:System.Linq.IQueryProvider" /> that is associated with this data source.
                </returns>
    </member>
    <member name="T:System.Linq.IQueryable`1">
      <summary>
                    Provides functionality to evaluate queries against a specific data source wherein the type of the data is known.
                </summary>
      <typeparam name="T">
                    The type of the data in the data source.
                </typeparam>
    </member>
    <member name="T:System.Linq.IQueryProvider">
      <summary>
                    Defines methods to create and execute queries that are described by an <see cref="T:System.Linq.IQueryable" /> object.
                </summary>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>
                    Constructs an <see cref="T:System.Linq.IQueryable`1" /> object that can evaluate the query represented by a specified expression tree.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.IQueryable`1" /> that can evaluate the query represented by the specified expression tree.
                </returns>
      <param name="expression">
                    An expression tree that represents a LINQ query.
                </param>
      <typeparam name="TElement">
                    The type of the elements of the <see cref="T:System.Linq.IQueryable`1" /> that is returned.
                </typeparam>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)">
      <summary>
                    Constructs an <see cref="T:System.Linq.IQueryable" /> object that can evaluate the query represented by a specified expression tree.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.IQueryable" /> that can evaluate the query represented by the specified expression tree.
                </returns>
      <param name="expression">
                    An expression tree that represents a LINQ query.
                </param>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)">
      <summary>
                    Executes the strongly-typed query represented by a specified expression tree.
                </summary>
      <returns>
                    The value that results from executing the specified query.
                </returns>
      <param name="expression">
                    An expression tree that represents a LINQ query.
                </param>
      <typeparam name="TResult">
                    The type of the value that results from executing the query.
                </typeparam>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)">
      <summary>
                    Executes the query represented by a specified expression tree.
                </summary>
      <returns>
                    The value that results from executing the specified query.
                </returns>
      <param name="expression">
                    An expression tree that represents a LINQ query.
                </param>
    </member>
    <member name="T:System.Linq.Lookup`2">
      <summary>
                    Represents a collection of keys each mapped to one or more values.
                </summary>
      <typeparam name="TKey">
                    The type of the keys in the <see cref="T:System.Linq.Lookup`2" />.
                </typeparam>
      <typeparam name="TElement">
                    The type of the elements of each <see cref="T:System.Collections.Generic.IEnumerable`1" /> value in the <see cref="T:System.Linq.Lookup`2" />.
                </typeparam>
    </member>
    <member name="M:System.Linq.Lookup`2.ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})">
      <summary>
                    Applies a transform function to each key and its associated values and returns the results.
                </summary>
      <returns>
                    A collection that contains one value for each key/value collection pair in the <see cref="T:System.Linq.Lookup`2" />.
                </returns>
      <param name="resultSelector">
                    A function to project a result value from each key and its associated values.
                </param>
      <typeparam name="TResult">
                    The type of the result values produced by <paramref name="resultSelector" />.
                </typeparam>
    </member>
    <member name="M:System.Linq.Lookup`2.Contains(`0)">
      <summary>
                    Determines whether a specified key is in the <see cref="T:System.Linq.Lookup`2" />.
                </summary>
      <returns>true if <paramref name="key" /> is in the <see cref="T:System.Linq.Lookup`2" />; otherwise, false.
                </returns>
      <param name="key">
                    The key to find in the <see cref="T:System.Linq.Lookup`2" />.
                </param>
    </member>
    <member name="P:System.Linq.Lookup`2.Count">
      <summary>
                    Gets the number of key/value collection pairs in the <see cref="T:System.Linq.Lookup`2" />.
                </summary>
      <returns>
                    The number of key/value collection pairs in the <see cref="T:System.Linq.Lookup`2" />.
                </returns>
    </member>
    <member name="M:System.Linq.Lookup`2.GetEnumerator">
      <summary>
                    Returns a generic enumerator that iterates through the <see cref="T:System.Linq.Lookup`2" />.
                </summary>
      <returns>
                    An enumerator for the <see cref="T:System.Linq.Lookup`2" />.
                </returns>
    </member>
    <member name="P:System.Linq.Lookup`2.Item(`0)">
      <summary>
                    Gets the collection of values indexed by the specified key.
                </summary>
      <returns>
                    The collection of values indexed by the specified key.
                </returns>
      <param name="key">
                    The key of the desired collection of values.
                </param>
    </member>
    <member name="M:System.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through the <see cref="T:System.Linq.Lookup`2" />. This class cannot be inherited.
                </summary>
      <returns>
                    An enumerator for the <see cref="T:System.Linq.Lookup`2" />.
                </returns>
    </member>
    <member name="T:System.Linq.Queryable">
      <summary>
                    Provides a set of static (Shared in Visual Basic) methods for querying data structures that implement <see cref="T:System.Linq.IQueryable`1" />.
                </summary>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
      <summary>
                    Applies an accumulator function over a sequence.
                </summary>
      <returns>
                    The final accumulator value.
                </returns>
      <param name="source">
                    A sequence to aggregate over.
                </param>
      <param name="func">
                    An accumulator function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="func" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
      <summary>
                    Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.
                </summary>
      <returns>
                    The final accumulator value.
                </returns>
      <param name="source">
                    A sequence to aggregate over.
                </param>
      <param name="seed">
                    The initial accumulator value.
                </param>
      <param name="func">
                    An accumulator function to invoke on each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TAccumulate">
                    The type of the accumulator value.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="func" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
      <summary>
                    Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.
                </summary>
      <returns>
                    The transformed final accumulator value.
                </returns>
      <param name="source">
                    A sequence to aggregate over.
                </param>
      <param name="seed">
                    The initial accumulator value.
                </param>
      <param name="func">
                    An accumulator function to invoke on each element.
                </param>
      <param name="selector">
                    A function to transform the final accumulator value into the result value.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TAccumulate">
                    The type of the accumulator value.
                </typeparam>
      <typeparam name="TResult">
                    The type of the resulting value.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="func" /> or <paramref name="selector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>
                    Determines whether all the elements of a sequence satisfy a condition.
                </summary>
      <returns>true if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, false.
                </returns>
      <param name="source">
                    A sequence whose elements to test for a condition.
                </param>
      <param name="predicate">
                    A function to test each element for a condition.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})">
      <summary>
                    Determines whether a sequence contains any elements.
                </summary>
      <returns>true if the source sequence contains any elements; otherwise, false.
                </returns>
      <param name="source">
                    A sequence to check for being empty.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>
                    Determines whether any element of a sequence satisfies a condition.
                </summary>
      <returns>true if any elements in the source sequence pass the test in the specified predicate; otherwise, false.
                </returns>
      <param name="source">
                    A sequence whose elements to test for a condition.
                </param>
      <param name="predicate">
                    A function to test each element for a condition.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
                    Converts a generic <see cref="T:System.Collections.Generic.IEnumerable`1" /> to a generic <see cref="T:System.Linq.IQueryable`1" />.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.IQueryable`1" /> that represents the input sequence.
                </returns>
      <param name="source">
                    A sequence to convert.
                </param>
      <typeparam name="TElement">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)">
      <summary>
                    Converts an <see cref="T:System.Collections.IEnumerable" /> to an <see cref="T:System.Linq.IQueryable" />.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.IQueryable" /> that represents the input sequence.
                </returns>
      <param name="source">
                    A sequence to convert.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> does not implement <see cref="T:System.Collections.Generic.IEnumerable`1" /> for some <paramref name="T" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})">
      <summary>
                    Computes the average of a sequence of <see cref="T:System.Decimal" /> values.
                </summary>
      <returns>
                    The average of the sequence of values.
                </returns>
      <param name="source">
                    A sequence of <see cref="T:System.Decimal" /> values to calculate the average of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})">
      <summary>
                    Computes the average of a sequence of <see cref="T:System.Double" /> values.
                </summary>
      <returns>
                    The average of the sequence of values.
                </returns>
      <param name="source">
                    A sequence of <see cref="T:System.Double" /> values to calculate the average of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})">
      <summary>
                    Computes the average of a sequence of <see cref="T:System.Int32" /> values.
                </summary>
      <returns>
                    The average of the sequence of values.
                </returns>
      <param name="source">
                    A sequence of <see cref="T:System.Int32" /> values to calculate the average of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})">
      <summary>
                    Computes the average of a sequence of <see cref="T:System.Int64" /> values.
                </summary>
      <returns>
                    The average of the sequence of values.
                </returns>
      <param name="source">
                    A sequence of <see cref="T:System.Int64" /> values to calculate the average of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary>
                    Computes the average of a sequence of nullable <see cref="T:System.Decimal" /> values.
                </summary>
      <returns>
                    The average of the sequence of values, or null if the source sequence is empty or contains only null values.
                </returns>
      <param name="source">
                    A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the average of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary>
                    Computes the average of a sequence of nullable <see cref="T:System.Double" /> values.
                </summary>
      <returns>
                    The average of the sequence of values, or null if the source sequence is empty or contains only null values.
                </returns>
      <param name="source">
                    A sequence of nullable <see cref="T:System.Double" /> values to calculate the average of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary>
                    Computes the average of a sequence of nullable <see cref="T:System.Int32" /> values.
                </summary>
      <returns>
                    The average of the sequence of values, or null if the source sequence is empty or contains only null values.
                </returns>
      <param name="source">
                    A sequence of nullable <see cref="T:System.Int32" />values to calculate the average of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary>
                    Computes the average of a sequence of nullable <see cref="T:System.Int64" /> values.
                </summary>
      <returns>
                    The average of the sequence of values, or null if the source sequence is empty or contains only null values.
                </returns>
      <param name="source">
                    A sequence of nullable <see cref="T:System.Int64" /> values to calculate the average of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary>
                    Computes the average of a sequence of nullable <see cref="T:System.Single" /> values.
                </summary>
      <returns>
                    The average of the sequence of values, or null if the source sequence is empty or contains only null values.
                </returns>
      <param name="source">
                    A sequence of nullable <see cref="T:System.Single" /> values to calculate the average of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})">
      <summary>
                    Computes the average of a sequence of <see cref="T:System.Single" /> values.
                </summary>
      <returns>
                    The average of the sequence of values.
                </returns>
      <param name="source">
                    A sequence of <see cref="T:System.Single" /> values to calculate the average of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary>
                    Computes the average of a sequence of <see cref="T:System.Decimal" /> values that is obtained by invoking a projection function on each element of the input sequence.
                </summary>
      <returns>
                    The average of the sequence of values.
                </returns>
      <param name="source">
                    A sequence of values that are used to calculate an average.
                </param>
      <param name="selector">
                    A projection function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary>
                    Computes the average of a sequence of <see cref="T:System.Double" /> values that is obtained by invoking a projection function on each element of the input sequence.
                </summary>
      <returns>
                    The average of the sequence of values.
                </returns>
      <param name="source">
                    A sequence of values to calculate the average of.
                </param>
      <param name="selector">
                    A projection function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary>
                    Computes the average of a sequence of <see cref="T:System.Int32" /> values that is obtained by invoking a projection function on each element of the input sequence.
                </summary>
      <returns>
                    The average of the sequence of values.
                </returns>
      <param name="source">
                    A sequence of values to calculate the average of.
                </param>
      <param name="selector">
                    A projection function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary>
                    Computes the average of a sequence of <see cref="T:System.Int64" /> values that is obtained by invoking a projection function on each element of the input sequence.
                </summary>
      <returns>
                    The average of the sequence of values.
                </returns>
      <param name="source">
                    A sequence of values to calculate the average of.
                </param>
      <param name="selector">
                    A projection function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary>
                    Computes the average of a sequence of nullable <see cref="T:System.Decimal" /> values that is obtained by invoking a projection function on each element of the input sequence.
                </summary>
      <returns>
                    The average of the sequence of values, or null if the <paramref name="source" /> sequence is empty or contains only null values.
                </returns>
      <param name="source">
                    A sequence of values to calculate the average of.
                </param>
      <param name="selector">
                    A projection function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary>
                    Computes the average of a sequence of nullable <see cref="T:System.Double" /> values that is obtained by invoking a projection function on each element of the input sequence.
                </summary>
      <returns>
                    The average of the sequence of values, or null if the <paramref name="source" /> sequence is empty or contains only null values.
                </returns>
      <param name="source">
                    A sequence of values to calculate the average of.
                </param>
      <param name="selector">
                    A projection function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary>
                    Computes the average of a sequence of nullable <see cref="T:System.Int32" /> values that is obtained by invoking a projection function on each element of the input sequence.
                </summary>
      <returns>
                    The average of the sequence of values, or null if the <paramref name="source" /> sequence is empty or contains only null values.
                </returns>
      <param name="source">
                    A sequence of values to calculate the average of.
                </param>
      <param name="selector">
                    A projection function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary>
                    Computes the average of a sequence of nullable <see cref="T:System.Int64" /> values that is obtained by invoking a projection function on each element of the input sequence.
                </summary>
      <returns>
                    The average of the sequence of values, or null if the <paramref name="source" /> sequence is empty or contains only null values.
                </returns>
      <param name="source">
                    A sequence of values to calculate the average of.
                </param>
      <param name="selector">
                    A projection function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary>
                    Computes the average of a sequence of nullable <see cref="T:System.Single" /> values that is obtained by invoking a projection function on each element of the input sequence.
                </summary>
      <returns>
                    The average of the sequence of values, or null if the <paramref name="source" /> sequence is empty or contains only null values.
                </returns>
      <param name="source">
                    A sequence of values to calculate the average of.
                </param>
      <param name="selector">
                    A projection function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary>
                    Computes the average of a sequence of <see cref="T:System.Single" /> values that is obtained by invoking a projection function on each element of the input sequence.
                </summary>
      <returns>
                    The average of the sequence of values.
                </returns>
      <param name="source">
                    A sequence of values to calculate the average of.
                </param>
      <param name="selector">
                    A projection function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)">
      <summary>
                    Converts the elements of an <see cref="T:System.Linq.IQueryable" /> to the specified type.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.IQueryable`1" /> that contains each element of the source sequence converted to the specified type.
                </returns>
      <param name="source">
                    The <see cref="T:System.Linq.IQueryable" /> that contains the elements to be converted.
                </param>
      <typeparam name="TResult">
                    The type to convert the elements of <paramref name="source" /> to.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
                    Concatenates two sequences.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.IQueryable`1" /> that contains the concatenated elements of the two input sequences.
                </returns>
      <param name="source1">
                    The first sequence to concatenate.
                </param>
      <param name="source2">
                    The sequence to concatenate to the first sequence.
                </param>
      <typeparam name="TSource">
                    The type of the elements of the input sequences.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)">
      <summary>
                    Determines whether a sequence contains a specified element by using the default equality comparer.
                </summary>
      <returns>true if the input sequence contains an element that has the specified value; otherwise, false.
                </returns>
      <param name="source">
                    An <see cref="T:System.Linq.IQueryable`1" /> in which to locate <paramref name="item" />.
                </param>
      <param name="item">
                    The object to locate in the sequence.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
                    Determines whether a sequence contains a specified element by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.
                </summary>
      <returns>true if the input sequence contains an element that has the specified value; otherwise, false.
                </returns>
      <param name="source">
                    An <see cref="T:System.Linq.IQueryable`1" /> in which to locate <paramref name="item" />.
                </param>
      <param name="item">
                    The object to locate in the sequence.
                </param>
      <param name="comparer">
                    An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})">
      <summary>
                    Returns the number of elements in a sequence.
                </summary>
      <returns>
                    The number of elements in the input sequence.
                </returns>
      <param name="source">
                    The <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>
                    Returns the number of elements in the specified sequence that satisfies a condition.
                </summary>
      <returns>
                    The number of elements in the sequence that satisfies the condition in the predicate function.
                </returns>
      <param name="source">
                    An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.
                </param>
      <param name="predicate">
                    A function to test each element for a condition.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})">
      <summary>
                    Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.IQueryable`1" /> that contains default(<paramref name="TSource" />) if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.
                </returns>
      <param name="source">
                    The <see cref="T:System.Linq.IQueryable`1" /> to return a default value for if empty.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)">
      <summary>
                    Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.IQueryable`1" /> that contains <paramref name="defaultValue" /> if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.
                </returns>
      <param name="source">
                    The <see cref="T:System.Linq.IQueryable`1" /> to return the specified value for if empty.
                </param>
      <param name="defaultValue">
                    The value to return if the sequence is empty.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})">
      <summary>
                    Returns distinct elements from a sequence by using the default equality comparer to compare values.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.IQueryable`1" /> that contains distinct elements from <paramref name="source" />.
                </returns>
      <param name="source">
                    The <see cref="T:System.Linq.IQueryable`1" /> to remove duplicates from.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
                    Returns distinct elements from a sequence by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.IQueryable`1" /> that contains distinct elements from <paramref name="source" />.
                </returns>
      <param name="source">
                    The <see cref="T:System.Linq.IQueryable`1" /> to remove duplicates from.
                </param>
      <param name="comparer">
                    An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="comparer" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>
                    Returns the element at a specified index in a sequence.
                </summary>
      <returns>
                    The element at the specified position in <paramref name="source" />.
                </returns>
      <param name="source">
                    An <see cref="T:System.Linq.IQueryable`1" /> to return an element from.
                </param>
      <param name="index">
                    The zero-based index of the element to retrieve.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>
                    Returns the element at a specified index in a sequence or a default value if the index is out of range.
                </summary>
      <returns>default(<paramref name="TSource" />) if <paramref name="index" /> is outside the bounds of <paramref name="source" />; otherwise, the element at the specified position in <paramref name="source" />.
                </returns>
      <param name="source">
                    An <see cref="T:System.Linq.IQueryable`1" /> to return an element from.
                </param>
      <param name="index">
                    The zero-based index of the element to retrieve.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
                    Produces the set difference of two sequences by using the default equality comparer to compare values.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.IQueryable`1" /> that contains the set difference of the two sequences.
                </returns>
      <param name="source1">
                    An <see cref="T:System.Linq.IQueryable`1" /> whose elements that are not also in <paramref name="source2" /> will be returned.
                </param>
      <param name="source2">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that also occur in the first sequence will not appear in the returned sequence.
                </param>
      <typeparam name="TSource">
                    The type of the elements of the input sequences.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
                    Produces the set difference of two sequences by using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.IQueryable`1" /> that contains the set difference of the two sequences.
                </returns>
      <param name="source1">
                    An <see cref="T:System.Linq.IQueryable`1" /> whose elements that are not also in <paramref name="source2" /> will be returned.
                </param>
      <param name="source2">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that also occur in the first sequence will not appear in the returned sequence.
                </param>
      <param name="comparer">
                    An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.
                </param>
      <typeparam name="TSource">
                    The type of the elements of the input sequences.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})">
      <summary>
                    Returns the first element of a sequence.
                </summary>
      <returns>
                    The first element in <paramref name="source" />.
                </returns>
      <param name="source">
                    The <see cref="T:System.Linq.IQueryable`1" /> to return the first element of.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>
                    Returns the first element of a sequence that satisfies a specified condition.
                </summary>
      <returns>
                    The first element in <paramref name="source" /> that passes the test in <paramref name="predicate" />.
                </returns>
      <param name="source">
                    An <see cref="T:System.Linq.IQueryable`1" /> to return an element from.
                </param>
      <param name="predicate">
                    A function to test each element for a condition.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
      <summary>
                    Returns the first element of a sequence, or a default value if the sequence contains no elements.
                </summary>
      <returns>default(<paramref name="TSource" />) if <paramref name="source" /> is empty; otherwise, the first element in <paramref name="source" />.
                </returns>
      <param name="source">
                    The <see cref="T:System.Linq.IQueryable`1" /> to return the first element of.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>
                    Returns the first element of a sequence that satisfies a specified condition or a default value if no such element is found.
                </summary>
      <returns>default(<paramref name="TSource" />) if <paramref name="source" /> is empty or if no element passes the test specified by <paramref name="predicate" />; otherwise, the first element in <paramref name="source" /> that passes the test specified by <paramref name="predicate" />.
                </returns>
      <param name="source">
                    An <see cref="T:System.Linq.IQueryable`1" /> to return an element from.
                </param>
      <param name="predicate">
                    A function to test each element for a condition.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>
                    Groups the elements of a sequence according to a specified key selector function.
                </summary>
      <returns>
                    An IQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt; in C# or IQueryable(Of IGrouping(Of TKey, TSource)) in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a sequence of objects and a key.
                </returns>
      <param name="source">
                    An <see cref="T:System.Linq.IQueryable`1" /> whose elements to group.
                </param>
      <param name="keySelector">
                    A function to extract the key for each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TKey">
                    The type of the key returned by the function represented in <paramref name="keySelector" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
                    Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.
                </summary>
      <returns>
                    An IQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt; in C# or IQueryable(Of IGrouping(Of TKey, TSource)) in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> contains a sequence of objects and a key.
                </returns>
      <param name="source">
                    An <see cref="T:System.Linq.IQueryable`1" /> whose elements to group.
                </param>
      <param name="keySelector">
                    A function to extract the key for each element.
                </param>
      <param name="comparer">
                    An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TKey">
                    The type of the key returned by the function represented in <paramref name="keySelector" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="comparer" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
      <summary>
                    Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.
                </summary>
      <returns>
                    An IQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt; in C# or IQueryable(Of IGrouping(Of TKey, TElement)) in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> contains a sequence of objects of type <paramref name="TElement" /> and a key.
                </returns>
      <param name="source">
                    An <see cref="T:System.Linq.IQueryable`1" /> whose elements to group.
                </param>
      <param name="keySelector">
                    A function to extract the key for each element.
                </param>
      <param name="elementSelector">
                    A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TKey">
                    The type of the key returned by the function represented in <paramref name="keySelector" />.
                </typeparam>
      <typeparam name="TElement">
                    The type of the elements in each <see cref="T:System.Linq.IGrouping`2" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
                    Groups the elements of a sequence and projects the elements for each group by using a specified function. Key values are compared by using a specified comparer.
                </summary>
      <returns>
                    An IQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt; in C# or IQueryable(Of IGrouping(Of TKey, TElement)) in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> contains a sequence of objects of type <paramref name="TElement" /> and a key.
                </returns>
      <param name="source">
                    An <see cref="T:System.Linq.IQueryable`1" /> whose elements to group.
                </param>
      <param name="keySelector">
                    A function to extract the key for each element.
                </param>
      <param name="elementSelector">
                    A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.
                </param>
      <param name="comparer">
                    An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TKey">
                    The type of the key returned by the function represented in <paramref name="keySelector" />.
                </typeparam>
      <typeparam name="TElement">
                    The type of the elements in each <see cref="T:System.Linq.IGrouping`2" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> or <paramref name="comparer" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
      <summary>
                    Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.
                </summary>
      <returns>
                    An T:System.Linq.IQueryable`1 that has a type argument of <paramref name="TResult" /> and where each element represents a projection over a group and its key.
                </returns>
      <param name="source">
                    An <see cref="T:System.Linq.IQueryable`1" /> whose elements to group.
                </param>
      <param name="keySelector">
                    A function to extract the key for each element.
                </param>
      <param name="elementSelector">
                    A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.
                </param>
      <param name="resultSelector">
                    A function to create a result value from each group.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TKey">
                    The type of the key returned by the function represented in <paramref name="keySelector" />.
                </typeparam>
      <typeparam name="TElement">
                    The type of the elements in each <see cref="T:System.Linq.IGrouping`2" />.
                </typeparam>
      <typeparam name="TResult">
                    The type of the result value returned by <paramref name="resultSelector" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> or <paramref name="resultSelector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
                    Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Keys are compared by using a specified comparer and the elements of each group are projected by using a specified function.
                </summary>
      <returns>
                    An T:System.Linq.IQueryable`1 that has a type argument of <paramref name="TResult" /> and where each element represents a projection over a group and its key.
                </returns>
      <param name="source">
                    An <see cref="T:System.Linq.IQueryable`1" /> whose elements to group.
                </param>
      <param name="keySelector">
                    A function to extract the key for each element.
                </param>
      <param name="elementSelector">
                    A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.
                </param>
      <param name="resultSelector">
                    A function to create a result value from each group.
                </param>
      <param name="comparer">
                    An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TKey">
                    The type of the key returned by the function represented in <paramref name="keySelector" />.
                </typeparam>
      <typeparam name="TElement">
                    The type of the elements in each <see cref="T:System.Linq.IGrouping`2" />.
                </typeparam>
      <typeparam name="TResult">
                    The type of the result value returned by <paramref name="resultSelector" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> or <paramref name="resultSelector" /> or <paramref name="comparer" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
      <summary>
                    Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.
                </summary>
      <returns>
                    An T:System.Linq.IQueryable`1 that has a type argument of <paramref name="TResult" /> and where each element represents a projection over a group and its key.
                </returns>
      <param name="source">
                    An <see cref="T:System.Linq.IQueryable`1" /> whose elements to group.
                </param>
      <param name="keySelector">
                    A function to extract the key for each element.
                </param>
      <param name="resultSelector">
                    A function to create a result value from each group.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TKey">
                    The type of the key returned by the function represented in <paramref name="keySelector" />.
                </typeparam>
      <typeparam name="TResult">
                    The type of the result value returned by <paramref name="resultSelector" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="resultSelector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
                    Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Keys are compared by using a specified comparer.
                </summary>
      <returns>
                    An T:System.Linq.IQueryable`1 that has a type argument of <paramref name="TResult" /> and where each element represents a projection over a group and its key.
                </returns>
      <param name="source">
                    An <see cref="T:System.Linq.IQueryable`1" /> whose elements to group.
                </param>
      <param name="keySelector">
                    A function to extract the key for each element.
                </param>
      <param name="resultSelector">
                    A function to create a result value from each group.
                </param>
      <param name="comparer">
                    An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TKey">
                    The type of the key returned by the function represented in <paramref name="keySelector" />.
                </typeparam>
      <typeparam name="TResult">
                    The type of the result value returned by <paramref name="resultSelector" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="resultSelector" /> or <paramref name="comparer" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
      <summary>
                    Correlates the elements of two sequences based on key equality and groups the results. The default equality comparer is used to compare keys.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.IQueryable`1" /> that contains elements of type <paramref name="TResult" /> obtained by performing a grouped join on two sequences.
                </returns>
      <param name="outer">
                    The first sequence to join.
                </param>
      <param name="inner">
                    The sequence to join to the first sequence.
                </param>
      <param name="outerKeySelector">
                    A function to extract the join key from each element of the first sequence.
                </param>
      <param name="innerKeySelector">
                    A function to extract the join key from each element of the second sequence.
                </param>
      <param name="resultSelector">
                    A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.
                </param>
      <typeparam name="TOuter">
                    The type of the elements of the first sequence.
                </typeparam>
      <typeparam name="TInner">
                    The type of the elements of the second sequence.
                </typeparam>
      <typeparam name="TKey">
                    The type of the keys returned by the key selector functions.
                </typeparam>
      <typeparam name="TResult">
                    The type of the result elements.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>
                    Correlates the elements of two sequences based on key equality and groups the results. A specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> is used to compare keys.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.IQueryable`1" /> that contains elements of type <paramref name="TResult" /> obtained by performing a grouped join on two sequences.
                </returns>
      <param name="outer">
                    The first sequence to join.
                </param>
      <param name="inner">
                    The sequence to join to the first sequence.
                </param>
      <param name="outerKeySelector">
                    A function to extract the join key from each element of the first sequence.
                </param>
      <param name="innerKeySelector">
                    A function to extract the join key from each element of the second sequence.
                </param>
      <param name="resultSelector">
                    A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.
                </param>
      <param name="comparer">
                    A comparer to hash and compare keys.
                </param>
      <typeparam name="TOuter">
                    The type of the elements of the first sequence.
                </typeparam>
      <typeparam name="TInner">
                    The type of the elements of the second sequence.
                </typeparam>
      <typeparam name="TKey">
                    The type of the keys returned by the key selector functions.
                </typeparam>
      <typeparam name="TResult">
                    The type of the result elements.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
                    Produces the set intersection of two sequences by using the default equality comparer to compare values.
                </summary>
      <returns>
                    A sequence that contains the set intersection of the two sequences.
                </returns>
      <param name="source1">
                    A sequence whose distinct elements that also appear in <paramref name="source2" /> are returned.
                </param>
      <param name="source2">
                    A sequence whose distinct elements that also appear in the first sequence are returned.
                </param>
      <typeparam name="TSource">
                    The type of the elements of the input sequences.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
                    Produces the set intersection of two sequences by using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.IQueryable`1" /> that contains the set intersection of the two sequences.
                </returns>
      <param name="source1">
                    An <see cref="T:System.Linq.IQueryable`1" /> whose distinct elements that also appear in <paramref name="source2" /> are returned.
                </param>
      <param name="source2">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in the first sequence are returned.
                </param>
      <param name="comparer">
                    An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.
                </param>
      <typeparam name="TSource">
                    The type of the elements of the input sequences.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
      <summary>
                    Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.IQueryable`1" /> that has elements of type <paramref name="TResult" /> obtained by performing an inner join on two sequences.
                </returns>
      <param name="outer">
                    The first sequence to join.
                </param>
      <param name="inner">
                    The sequence to join to the first sequence.
                </param>
      <param name="outerKeySelector">
                    A function to extract the join key from each element of the first sequence.
                </param>
      <param name="innerKeySelector">
                    A function to extract the join key from each element of the second sequence.
                </param>
      <param name="resultSelector">
                    A function to create a result element from two matching elements.
                </param>
      <typeparam name="TOuter">
                    The type of the elements of the first sequence.
                </typeparam>
      <typeparam name="TInner">
                    The type of the elements of the second sequence.
                </typeparam>
      <typeparam name="TKey">
                    The type of the keys returned by the key selector functions.
                </typeparam>
      <typeparam name="TResult">
                    The type of the result elements.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>
                    Correlates the elements of two sequences based on matching keys. A specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> is used to compare keys.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.IQueryable`1" /> that has elements of type <paramref name="TResult" /> obtained by performing an inner join on two sequences.
                </returns>
      <param name="outer">
                    The first sequence to join.
                </param>
      <param name="inner">
                    The sequence to join to the first sequence.
                </param>
      <param name="outerKeySelector">
                    A function to extract the join key from each element of the first sequence.
                </param>
      <param name="innerKeySelector">
                    A function to extract the join key from each element of the second sequence.
                </param>
      <param name="resultSelector">
                    A function to create a result element from two matching elements.
                </param>
      <param name="comparer">
                    An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to hash and compare keys.
                </param>
      <typeparam name="TOuter">
                    The type of the elements of the first sequence.
                </typeparam>
      <typeparam name="TInner">
                    The type of the elements of the second sequence.
                </typeparam>
      <typeparam name="TKey">
                    The type of the keys returned by the key selector functions.
                </typeparam>
      <typeparam name="TResult">
                    The type of the result elements.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})">
      <summary>
                    Returns the last element in a sequence.
                </summary>
      <returns>
                    The value at the last position in <paramref name="source" />.
                </returns>
      <param name="source">
                    An <see cref="T:System.Linq.IQueryable`1" /> to return the last element of.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>
                    Returns the last element of a sequence that satisfies a specified condition.
                </summary>
      <returns>
                    The last element in <paramref name="source" /> that passes the test specified by <paramref name="predicate" />.
                </returns>
      <param name="source">
                    An <see cref="T:System.Linq.IQueryable`1" /> to return an element from.
                </param>
      <param name="predicate">
                    A function to test each element for a condition.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
      <summary>
                    Returns the last element in a sequence, or a default value if the sequence contains no elements.
                </summary>
      <returns>default(<paramref name="TSource" />) if <paramref name="source" /> is empty; otherwise, the last element in <paramref name="source" />.
                </returns>
      <param name="source">
                    An <see cref="T:System.Linq.IQueryable`1" /> to return the last element of.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>
                    Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.
                </summary>
      <returns>default(<paramref name="TSource" />) if <paramref name="source" /> is empty or if no elements pass the test in the predicate function; otherwise, the last element of <paramref name="source" /> that passes the test in the predicate function.
                </returns>
      <param name="source">
                    An <see cref="T:System.Linq.IQueryable`1" /> to return an element from.
                </param>
      <param name="predicate">
                    A function to test each element for a condition.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})">
      <summary>
                    Returns an <see cref="T:System.Int64" /> that represents the total number of elements in a sequence.
                </summary>
      <returns>
                    The number of elements in <paramref name="source" />.
                </returns>
      <param name="source">
                    An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>
                    Returns an <see cref="T:System.Int64" /> that represents the number of elements in a sequence that satisfy a condition.
                </summary>
      <returns>
                    The number of elements in <paramref name="source" /> that satisfy the condition in the predicate function.
                </returns>
      <param name="source">
                    An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.
                </param>
      <param name="predicate">
                    A function to test each element for a condition.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})">
      <summary>
                    Returns the maximum value in a generic <see cref="T:System.Linq.IQueryable`1" />.
                </summary>
      <returns>
                    The maximum value in the sequence.
                </returns>
      <param name="source">
                    A sequence of values to determine the maximum of.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>
                    Invokes a projection function on each element of a generic <see cref="T:System.Linq.IQueryable`1" /> and returns the maximum resulting value.
                </summary>
      <returns>
                    The maximum value in the sequence.
                </returns>
      <param name="source">
                    A sequence of values to determine the maximum of.
                </param>
      <param name="selector">
                    A projection function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TResult">
                    The type of the value returned by the function represented by <paramref name="selector" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})">
      <summary>
                    Returns the minimum value of a generic <see cref="T:System.Linq.IQueryable`1" />.
                </summary>
      <returns>
                    The minimum value in the sequence.
                </returns>
      <param name="source">
                    A sequence of values to determine the minimum of.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>
                    Invokes a projection function on each element of a generic <see cref="T:System.Linq.IQueryable`1" /> and returns the minimum resulting value.
                </summary>
      <returns>
                    The minimum value in the sequence.
                </returns>
      <param name="source">
                    A sequence of values to determine the minimum of.
                </param>
      <param name="selector">
                    A projection function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TResult">
                    The type of the value returned by the function represented by <paramref name="selector" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)">
      <summary>
                    Filters the elements of an <see cref="T:System.Linq.IQueryable" /> based on a specified type.
                </summary>
      <returns>
                    A collection that contains the elements from <paramref name="source" /> that have type <paramref name="TResult" />.
                </returns>
      <param name="source">
                    An <see cref="T:System.Linq.IQueryable" /> whose elements to filter.
                </param>
      <typeparam name="TResult">
                    The type to filter the elements of the sequence on.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>
                    Sorts the elements of a sequence in ascending order according to a key.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.IOrderedQueryable`1" /> whose elements are sorted according to a key.
                </returns>
      <param name="source">
                    A sequence of values to order.
                </param>
      <param name="keySelector">
                    A function to extract a key from an element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TKey">
                    The type of the key returned by the function that is represented by <paramref name="keySelector" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>
                    Sorts the elements of a sequence in ascending order by using a specified comparer.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.IOrderedQueryable`1" /> whose elements are sorted according to a key.
                </returns>
      <param name="source">
                    A sequence of values to order.
                </param>
      <param name="keySelector">
                    A function to extract a key from an element.
                </param>
      <param name="comparer">
                    An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TKey">
                    The type of the key returned by the function that is represented by <paramref name="keySelector" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="comparer" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>
                    Sorts the elements of a sequence in descending order according to a key.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.IOrderedQueryable`1" /> whose elements are sorted in descending order according to a key.
                </returns>
      <param name="source">
                    A sequence of values to order.
                </param>
      <param name="keySelector">
                    A function to extract a key from an element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TKey">
                    The type of the key returned by the function that is represented by <paramref name="keySelector" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>
                    Sorts the elements of a sequence in descending order by using a specified comparer.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.IOrderedQueryable`1" /> whose elements are sorted in descending order according to a key.
                </returns>
      <param name="source">
                    A sequence of values to order.
                </param>
      <param name="keySelector">
                    A function to extract a key from an element.
                </param>
      <param name="comparer">
                    An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TKey">
                    The type of the key returned by the function that is represented by <paramref name="keySelector" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="comparer" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})">
      <summary>
                    Inverts the order of the elements in a sequence.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.IQueryable`1" /> whose elements correspond to those of the input sequence in reverse order.
                </returns>
      <param name="source">
                    A sequence of values to reverse.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>
                    Projects each element of a sequence into a new form.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.IQueryable`1" /> whose elements are the result of invoking a projection function on each element of <paramref name="source" />.
                </returns>
      <param name="source">
                    A sequence of values to project.
                </param>
      <param name="selector">
                    A projection function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TResult">
                    The type of the value returned by the function represented by <paramref name="selector" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
      <summary>
                    Projects each element of a sequence into a new form by incorporating the element's index.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.IQueryable`1" /> whose elements are the result of invoking a projection function on each element of <paramref name="source" />.
                </returns>
      <param name="source">
                    A sequence of values to project.
                </param>
      <param name="selector">
                    A projection function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TResult">
                    The type of the value returned by the function represented by <paramref name="selector" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>
                    Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" /> and invokes a result selector function on each element therein. The resulting values from each intermediate sequence are combined into a single, one-dimensional sequence and returned.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.IQueryable`1" /> whose elements are the result of invoking the one-to-many projection function <paramref name="collectionSelector" /> on each element of <paramref name="source" /> and then mapping each of those sequence elements and their corresponding <paramref name="source" /> element to a result element.
                </returns>
      <param name="source">
                    A sequence of values to project.
                </param>
      <param name="collectionSelector">
                    A projection function to apply to each element of the input sequence.
                </param>
      <param name="resultSelector">
                    A projection function to apply to each element of each intermediate sequence.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TCollection">
                    The type of the intermediate elements collected by the function represented by <paramref name="collectionSelector" />.
                </typeparam>
      <typeparam name="TResult">
                    The type of the elements of the resulting sequence.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="collectionSelector" /> or <paramref name="resultSelector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
      <summary>
                    Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" /> and combines the resulting sequences into one sequence.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.IQueryable`1" /> whose elements are the result of invoking a one-to-many projection function on each element of the input sequence.
                </returns>
      <param name="source">
                    A sequence of values to project.
                </param>
      <param name="selector">
                    A projection function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TResult">
                    The type of the elements of the sequence returned by the function represented by <paramref name="selector" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>
                    Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" /> that incorporates the index of the source element that produced it. A result selector function is invoked on each element of each intermediate sequence, and the resulting values are combined into a single, one-dimensional sequence and returned.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.IQueryable`1" /> whose elements are the result of invoking the one-to-many projection function <paramref name="collectionSelector" /> on each element of <paramref name="source" /> and then mapping each of those sequence elements and their corresponding <paramref name="source" /> element to a result element.
                </returns>
      <param name="source">
                    A sequence of values to project.
                </param>
      <param name="collectionSelector">
                    A projection function to apply to each element of the input sequence; the second parameter of this function represents the index of the source element.
                </param>
      <param name="resultSelector">
                    A projection function to apply to each element of each intermediate sequence.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TCollection">
                    The type of the intermediate elements collected by the function represented by <paramref name="collectionSelector" />.
                </typeparam>
      <typeparam name="TResult">
                    The type of the elements of the resulting sequence.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="collectionSelector" /> or <paramref name="resultSelector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
      <summary>
                    Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" /> and combines the resulting sequences into one sequence. The index of each source element is used in the projected form of that element.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.IQueryable`1" /> whose elements are the result of invoking a one-to-many projection function on each element of the input sequence.
                </returns>
      <param name="source">
                    A sequence of values to project.
                </param>
      <param name="selector">
                    A projection function to apply to each element; the second parameter of this function represents the index of the source element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TResult">
                    The type of the elements of the sequence returned by the function represented by <paramref name="selector" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
                    Determines whether two sequences are equal by using the default equality comparer to compare elements.
                </summary>
      <returns>true if the two source sequences are of equal length and their corresponding elements compare equal; otherwise, false.
                </returns>
      <param name="source1">
                    An <see cref="T:System.Linq.IQueryable`1" /> whose elements to compare to those of <paramref name="source2" />.
                </param>
      <param name="source2">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to compare to those of the first sequence.
                </param>
      <typeparam name="TSource">
                    The type of the elements of the input sequences.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
                    Determines whether two sequences are equal by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare elements.
                </summary>
      <returns>true if the two source sequences are of equal length and their corresponding elements compare equal; otherwise, false.
                </returns>
      <param name="source1">
                    An <see cref="T:System.Linq.IQueryable`1" /> whose elements to compare to those of <paramref name="source2" />.
                </param>
      <param name="source2">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to compare to those of the first sequence.
                </param>
      <param name="comparer">
                    An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to use to compare elements.
                </param>
      <typeparam name="TSource">
                    The type of the elements of the input sequences.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})">
      <summary>
                    Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.
                </summary>
      <returns>
                    The single element of the input sequence.
                </returns>
      <param name="source">
                    An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>
                    Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.
                </summary>
      <returns>
                    The single element of the input sequence that satisfies the condition in <paramref name="predicate" />.
                </returns>
      <param name="source">
                    An <see cref="T:System.Linq.IQueryable`1" /> to return a single element from.
                </param>
      <param name="predicate">
                    A function to test an element for a condition.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
      <summary>
                    Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.
                </summary>
      <returns>
                    The single element of the input sequence, or default(<paramref name="TSource" />) if the sequence contains no elements.
                </returns>
      <param name="source">
                    An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>
                    Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.
                </summary>
      <returns>
                    The single element of the input sequence that satisfies the condition in <paramref name="predicate" />, or default(<paramref name="TSource" />) if no such element is found.
                </returns>
      <param name="source">
                    An <see cref="T:System.Linq.IQueryable`1" /> to return a single element from.
                </param>
      <param name="predicate">
                    A function to test an element for a condition.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>
                    Bypasses a specified number of elements in a sequence and then returns the remaining elements.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.IQueryable`1" /> that contains elements that occur after the specified index in the input sequence.
                </returns>
      <param name="source">
                    An <see cref="T:System.Linq.IQueryable`1" /> to return elements from.
                </param>
      <param name="count">
                    The number of elements to skip before returning the remaining elements.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>
                    Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.IQueryable`1" /> that contains elements from <paramref name="source" /> starting at the first element in the linear series that does not pass the test specified by <paramref name="predicate" />.
                </returns>
      <param name="source">
                    An <see cref="T:System.Linq.IQueryable`1" /> to return elements from.
                </param>
      <param name="predicate">
                    A function to test each element for a condition.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>
                    Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements. The element's index is used in the logic of the predicate function.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.IQueryable`1" /> that contains elements from <paramref name="source" /> starting at the first element in the linear series that does not pass the test specified by <paramref name="predicate" />.
                </returns>
      <param name="source">
                    An <see cref="T:System.Linq.IQueryable`1" /> to return elements from.
                </param>
      <param name="predicate">
                    A function to test each element for a condition; the second parameter of this function represents the index of the source element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})">
      <summary>
                    Computes the sum of a sequence of <see cref="T:System.Decimal" /> values.
                </summary>
      <returns>
                    The sum of the values in the sequence.
                </returns>
      <param name="source">
                    A sequence of <see cref="T:System.Decimal" /> values to calculate the sum of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})">
      <summary>
                    Computes the sum of a sequence of <see cref="T:System.Double" /> values.
                </summary>
      <returns>
                    The sum of the values in the sequence.
                </returns>
      <param name="source">
                    A sequence of <see cref="T:System.Double" /> values to calculate the sum of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})">
      <summary>
                    Computes the sum of a sequence of <see cref="T:System.Int32" /> values.
                </summary>
      <returns>
                    The sum of the values in the sequence.
                </returns>
      <param name="source">
                    A sequence of <see cref="T:System.Int32" /> values to calculate the sum of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})">
      <summary>
                    Computes the sum of a sequence of <see cref="T:System.Int64" /> values.
                </summary>
      <returns>
                    The sum of the values in the sequence.
                </returns>
      <param name="source">
                    A sequence of <see cref="T:System.Int64" /> values to calculate the sum of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary>
                    Computes the sum of a sequence of nullable <see cref="T:System.Decimal" /> values.
                </summary>
      <returns>
                    The sum of the values in the sequence.
                </returns>
      <param name="source">
                    A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the sum of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary>
                    Computes the sum of a sequence of nullable <see cref="T:System.Double" /> values.
                </summary>
      <returns>
                    The sum of the values in the sequence.
                </returns>
      <param name="source">
                    A sequence of nullable <see cref="T:System.Double" /> values to calculate the sum of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary>
                    Computes the sum of a sequence of nullable <see cref="T:System.Int32" /> values.
                </summary>
      <returns>
                    The sum of the values in the sequence.
                </returns>
      <param name="source">
                    A sequence of nullable <see cref="T:System.Int32" /> values to calculate the sum of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary>
                    Computes the sum of a sequence of nullable <see cref="T:System.Int64" /> values.
                </summary>
      <returns>
                    The sum of the values in the sequence.
                </returns>
      <param name="source">
                    A sequence of nullable <see cref="T:System.Int64" /> values to calculate the sum of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary>
                    Computes the sum of a sequence of nullable <see cref="T:System.Single" /> values.
                </summary>
      <returns>
                    The sum of the values in the sequence.
                </returns>
      <param name="source">
                    A sequence of nullable <see cref="T:System.Single" /> values to calculate the sum of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})">
      <summary>
                    Computes the sum of a sequence of <see cref="T:System.Single" /> values.
                </summary>
      <returns>
                    The sum of the values in the sequence.
                </returns>
      <param name="source">
                    A sequence of <see cref="T:System.Single" /> values to calculate the sum of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary>
                    Computes the sum of the sequence of <see cref="T:System.Decimal" /> values that is obtained by invoking a projection function on each element of the input sequence.
                </summary>
      <returns>
                    The sum of the projected values.
                </returns>
      <param name="source">
                    A sequence of values of type <paramref name="TSource" />.
                </param>
      <param name="selector">
                    A projection function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary>
                    Computes the sum of the sequence of <see cref="T:System.Double" /> values that is obtained by invoking a projection function on each element of the input sequence.
                </summary>
      <returns>
                    The sum of the projected values.
                </returns>
      <param name="source">
                    A sequence of values of type <paramref name="TSource" />.
                </param>
      <param name="selector">
                    A projection function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary>
                    Computes the sum of the sequence of <see cref="T:System.Int32" /> values that is obtained by invoking a projection function on each element of the input sequence.
                </summary>
      <returns>
                    The sum of the projected values.
                </returns>
      <param name="source">
                    A sequence of values of type <paramref name="TSource" />.
                </param>
      <param name="selector">
                    A projection function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary>
                    Computes the sum of the sequence of <see cref="T:System.Int64" /> values that is obtained by invoking a projection function on each element of the input sequence.
                </summary>
      <returns>
                    The sum of the projected values.
                </returns>
      <param name="source">
                    A sequence of values of type <paramref name="TSource" />.
                </param>
      <param name="selector">
                    A projection function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary>
                    Computes the sum of the sequence of nullable <see cref="T:System.Decimal" /> values that is obtained by invoking a projection function on each element of the input sequence.
                </summary>
      <returns>
                    The sum of the projected values.
                </returns>
      <param name="source">
                    A sequence of values of type <paramref name="TSource" />.
                </param>
      <param name="selector">
                    A projection function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary>
                    Computes the sum of the sequence of nullable <see cref="T:System.Double" /> values that is obtained by invoking a projection function on each element of the input sequence.
                </summary>
      <returns>
                    The sum of the projected values.
                </returns>
      <param name="source">
                    A sequence of values of type <paramref name="TSource" />.
                </param>
      <param name="selector">
                    A projection function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary>
                    Computes the sum of the sequence of nullable <see cref="T:System.Int32" /> values that is obtained by invoking a projection function on each element of the input sequence.
                </summary>
      <returns>
                    The sum of the projected values.
                </returns>
      <param name="source">
                    A sequence of values of type <paramref name="TSource" />.
                </param>
      <param name="selector">
                    A projection function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary>
                    Computes the sum of the sequence of nullable <see cref="T:System.Int64" /> values that is obtained by invoking a projection function on each element of the input sequence.
                </summary>
      <returns>
                    The sum of the projected values.
                </returns>
      <param name="source">
                    A sequence of values of type <paramref name="TSource" />.
                </param>
      <param name="selector">
                    A projection function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary>
                    Computes the sum of the sequence of nullable <see cref="T:System.Single" /> values that is obtained by invoking a projection function on each element of the input sequence.
                </summary>
      <returns>
                    The sum of the projected values.
                </returns>
      <param name="source">
                    A sequence of values of type <paramref name="TSource" />.
                </param>
      <param name="selector">
                    A projection function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary>
                    Computes the sum of the sequence of <see cref="T:System.Single" /> values that is obtained by invoking a projection function on each element of the input sequence.
                </summary>
      <returns>
                    The sum of the projected values.
                </returns>
      <param name="source">
                    A sequence of values of type <paramref name="TSource" />.
                </param>
      <param name="selector">
                    A projection function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>
                    Returns a specified number of contiguous elements from the start of a sequence.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.IQueryable`1" /> that contains the specified number of elements from the start of <paramref name="source" />.
                </returns>
      <param name="source">
                    The sequence to return elements from.
                </param>
      <param name="count">
                    The number of elements to return.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>
                    Returns elements from a sequence as long as a specified condition is true.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.IQueryable`1" /> that contains elements from the input sequence occurring before the element at which the test specified by <paramref name="predicate" /> no longer passes.
                </returns>
      <param name="source">
                    The sequence to return elements from.
                </param>
      <param name="predicate">
                    A function to test each element for a condition.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>
                    Returns elements from a sequence as long as a specified condition is true. The element's index is used in the logic of the predicate function.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.IQueryable`1" /> that contains elements from the input sequence occurring before the element at which the test specified by <paramref name="predicate" /> no longer passes.
                </returns>
      <param name="source">
                    The sequence to return elements from.
                </param>
      <param name="predicate">
                    A function to test each element for a condition; the second parameter of the function represents the index of the element in the source sequence.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>
                    Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.IOrderedQueryable`1" /> whose elements are sorted according to a key.
                </returns>
      <param name="source">
                    An <see cref="T:System.Linq.IOrderedQueryable`1" /> that contains elements to sort.
                </param>
      <param name="keySelector">
                    A function to extract a key from each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TKey">
                    The type of the key returned by the function represented by <paramref name="keySelector" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>
                    Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.IOrderedQueryable`1" /> whose elements are sorted according to a key.
                </returns>
      <param name="source">
                    An <see cref="T:System.Linq.IOrderedQueryable`1" /> that contains elements to sort.
                </param>
      <param name="keySelector">
                    A function to extract a key from each element.
                </param>
      <param name="comparer">
                    An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TKey">
                    The type of the key returned by the function represented by <paramref name="keySelector" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="comparer" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>
                    Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.IOrderedQueryable`1" /> whose elements are sorted in descending order according to a key.
                </returns>
      <param name="source">
                    An <see cref="T:System.Linq.IOrderedQueryable`1" /> that contains elements to sort.
                </param>
      <param name="keySelector">
                    A function to extract a key from each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TKey">
                    The type of the key returned by the function represented by <paramref name="keySelector" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>
                    Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.
                </summary>
      <returns>
                    A collection whose elements are sorted in descending order according to a key.
                </returns>
      <param name="source">
                    An <see cref="T:System.Linq.IOrderedQueryable`1" /> that contains elements to sort.
                </param>
      <param name="keySelector">
                    A function to extract a key from each element.
                </param>
      <param name="comparer">
                    An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TKey">
                    The type of the key that is returned by the <paramref name="keySelector" /> function.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="comparer" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
                    Produces the set union of two sequences by using the default equality comparer.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements from both input sequences, excluding duplicates.
                </returns>
      <param name="source1">
                    A sequence whose distinct elements form the first set for the union operation.
                </param>
      <param name="source2">
                    A sequence whose distinct elements form the second set for the union operation.
                </param>
      <typeparam name="TSource">
                    The type of the elements of the input sequences.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
                    Produces the set union of two sequences by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements from both input sequences, excluding duplicates.
                </returns>
      <param name="source1">
                    A sequence whose distinct elements form the first set for the union operation.
                </param>
      <param name="source2">
                    A sequence whose distinct elements form the second set for the union operation.
                </param>
      <param name="comparer">
                    An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.
                </param>
      <typeparam name="TSource">
                    The type of the elements of the input sequences.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>
                    Filters a sequence of values based on a predicate.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.IQueryable`1" /> that contains elements from the input sequence that satisfy the condition specified by <paramref name="predicate" />.
                </returns>
      <param name="source">
                    An <see cref="T:System.Linq.IQueryable`1" /> to filter.
                </param>
      <param name="predicate">
                    A function to test each element for a condition.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>
                    Filters a sequence of values based on a predicate. Each element's index is used in the logic of the predicate function.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.IQueryable`1" /> that contains elements from the input sequence that satisfy the condition specified by <paramref name="predicate" />.
                </returns>
      <param name="source">
                    An <see cref="T:System.Linq.IQueryable`1" /> to filter.
                </param>
      <param name="predicate">
                    A function to test each element for a condition; the second parameter of the function represents the index of the element in the source sequence.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.
                </exception>
    </member>
    <member name="T:System.Linq.Expressions.BinaryExpression">
      <summary>
                    Represents an expression that has a binary operator.
                </summary>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Conversion">
      <summary>
                    Gets the type conversion function that is used by a coalescing operation.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that represents a type conversion function.
                </returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLifted">
      <summary>
                    Gets a value that indicates whether the expression tree node represents a lifted call to an operator.
                </summary>
      <returns>true if the node represents a lifted call; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull">
      <summary>
                    Gets a value that indicates whether the expression tree node represents a lifted call to an operator whose return type is lifted to a nullable type.
                </summary>
      <returns>true if the operator's return type is lifted to a nullable type; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Left">
      <summary>
                    Gets the left operand of the binary operation.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.Expressions.Expression" /> that represents the left operand of the binary operation.
                </returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Method">
      <summary>
                    Gets the implementing method for the binary operation.
                </summary>
      <returns>
                    The <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.
                </returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Right">
      <summary>
                    Gets the right operand of the binary operation.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.Expressions.Expression" /> that represents the right operand of the binary operation.
                </returns>
    </member>
    <member name="T:System.Linq.Expressions.ConditionalExpression">
      <summary>
                    Represents an expression that has a conditional operator.
                </summary>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfFalse">
      <summary>
                    Gets the expression to execute if the test evaluates to false.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.Expressions.Expression" /> that represents the expression to execute if the test is false.
                </returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfTrue">
      <summary>
                    Gets the expression to execute if the test evaluates to true.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.Expressions.Expression" /> that represents the expression to execute if the test is true.
                </returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Test">
      <summary>
                    Gets the test of the conditional operation.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.Expressions.Expression" /> that represents the test of the conditional operation.
                </returns>
    </member>
    <member name="T:System.Linq.Expressions.ConstantExpression">
      <summary>
                    Represents an expression that has a constant value.
                </summary>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Value">
      <summary>
                    Gets the value of the constant expression.
                </summary>
      <returns>
                    An <see cref="T:System.Object" /> equal to the value of the represented expression.
                </returns>
    </member>
    <member name="T:System.Linq.Expressions.ElementInit">
      <summary>
                    Represents an initializer for a single element of an <see cref="T:System.Collections.IEnumerable" /> collection.
                </summary>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.AddMethod">
      <summary>
                    Gets the instance method that is used to add an element to an <see cref="T:System.Collections.IEnumerable" /> collection.
                </summary>
      <returns>
                    A <see cref="T:System.Reflection.MethodInfo" /> that represents an instance method that adds an element to a collection.
                </returns>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.Arguments">
      <summary>
                    Gets the collection of arguments that are passed to a method that adds an element to an <see cref="T:System.Collections.IEnumerable" /> collection.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Linq.Expressions.Expression" /> objects that represent the arguments for a method that adds an element to a collection.
                </returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.ToString">
      <summary>
                    Returns a textual representation of an <see cref="T:System.Linq.Expressions.ElementInit" /> object.
                </summary>
      <returns>
                    A textual representation of the <see cref="T:System.Linq.Expressions.ElementInit" /> object.
                </returns>
    </member>
    <member name="T:System.Linq.Expressions.Expression">
      <summary>
                    Provides the base class from which the classes that represent expression tree nodes are derived. It also contains  static (Shared in Visual Basic) factory methods to create the various node types. This is an abstract class.
                </summary>
    </member>
    <member name="M:System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Linq.Expressions.Expression" /> class.
                </summary>
      <param name="nodeType">
                    The <see cref="T:System.Linq.Expressions.ExpressionType" /> to set as the node type.
                </param>
      <param name="type">
                    The <see cref="T:System.Type" /> to set as the type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.
                </param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that does not have overflow checking.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Add" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.
                </returns>
      <param name="left">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.
                </param>
      <param name="right">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The addition operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that does not have overflow checking. The implementing method can bebe specified.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Add" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.
                </returns>
      <param name="left">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.
                </param>
      <param name="right">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.
                </param>
      <param name="method">
                    A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take not take exactly two arguments.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the addition operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that has overflow checking.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.
                </returns>
      <param name="left">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.
                </param>
      <param name="right">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The addition operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that has overflow checking. The implementing method can be specified.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.
                </returns>
      <param name="left">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.
                </param>
      <param name="right">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.
                </param>
      <param name="method">
                    A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take not take exactly two arguments.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the addition operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise AND operation.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.And" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.
                </returns>
      <param name="left">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.
                </param>
      <param name="right">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The bitwise AND operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise AND operation. The implementing method can be specified.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.And" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.
                </returns>
      <param name="left">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.
                </param>
      <param name="right">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.
                </param>
      <param name="method">
                    A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take not take exactly two arguments.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the bitwise AND operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional AND operation that evaluates the second operand only if it has to.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.
                </returns>
      <param name="left">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.
                </param>
      <param name="right">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The bitwise AND operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.
                
                    -or-
                <paramref name="left" />.Type and <paramref name="right" />.Type are not the same Boolean type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional AND operation that evaluates the second operand only if it has to. The implementing method can be specified.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.
                </returns>
      <param name="left">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.
                </param>
      <param name="right">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.
                </param>
      <param name="method">
                    A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take not take exactly two arguments.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the bitwise AND operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.
                
                    -or-
                <paramref name="method" /> is null and <paramref name="left" />.Type and <paramref name="right" />.Type are not the same Boolean type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents applying an array index operator to an array of rank more than one.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.
                </returns>
      <param name="array">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> property equal to.
                </param>
      <param name="indexes">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> or <paramref name="indexes" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type does not represent an array type.
                
                    -or-
                
                    The rank of <paramref name="array" />.Type does not match the number of elements in <paramref name="indexes" />.
                
                    -or-
                
                    The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="indexes" /> does not represent the <see cref="T:System.Int32" /> type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents applying an array index operator to an array of rank one.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ArrayIndex" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.
                </returns>
      <param name="array">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.
                </param>
      <param name="index">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> or <paramref name="index" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type does not represent an array type.
                
                    -or-
                <paramref name="array" />.Type represents an array type whose rank is not 1.
                
                    -or-
                <paramref name="index" />.Type does not represent the <see cref="T:System.Int32" /> type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents applying an array index operator to an array of rank more than one.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.
                </returns>
      <param name="array">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> property equal to.
                </param>
      <param name="indexes">
                    An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> or <paramref name="indexes" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type does not represent an array type.
                
                    -or-
                
                    The rank of <paramref name="array" />.Type does not match the number of elements in <paramref name="indexes" />.
                
                    -or-
                
                    The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="indexes" /> does not represent the <see cref="T:System.Int32" /> type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents getting the length of a one-dimensional array.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ArrayLength" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to <paramref name="array" />.
                </returns>
      <param name="array">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type does not represent an array type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.MemberAssignment" /> that represents the initialization of a field or property.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.MemberAssignment" /> that has <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> equal to <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> properties set to the specified values.
                </returns>
      <param name="member">
                    A <see cref="T:System.Reflection.MemberInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.
                </param>
      <param name="expression">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> or <paramref name="expression" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> does not represent a field or property.
                
                    -or-
                
                    The property represented by <paramref name="member" /> does not have a set accessor.
                
                    -or-
                <paramref name="expression" />.Type is not assignable to the type of the field or property that <paramref name="member" /> represents.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.MemberAssignment" /> that represents the initialization of a member by using a property accessor method.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.MemberAssignment" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and the <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> property set to <paramref name="expression" />.
                </returns>
      <param name="propertyAccessor">
                    A <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.
                </param>
      <param name="expression">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> or <paramref name="expression" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> does not represent a property accessor method.
                
                    -or-
                
                    The property accessed by <paramref name="propertyAccessor" /> does not have a set accessor.
                
                    -or-
                <paramref name="expression" />.Type is not assignable to the type of the field or property that <paramref name="member" /> represents.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes no arguments.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.
                </returns>
      <param name="instance">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> property equal to (pass null for a static (Shared in Visual Basic) method).
                </param>
      <param name="method">
                    A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null.
                
                    -or-
                <paramref name="instance" /> is null and <paramref name="method" /> represents an instanceinstance method.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type is not assignable to the declaring type of the method represented by <paramref name="method" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes arguments.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.
                </returns>
      <param name="instance">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> property equal to (pass null for a static (Shared in Visual Basic) method).
                </param>
      <param name="method">
                    A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.
                </param>
      <param name="arguments">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null.
                
                    -or-
                <paramref name="instance" /> is null and <paramref name="method" /> represents an instance method.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type is not assignable to the declaring type of the method represented by <paramref name="method" />.
                
                    -or-
                
                    The number of elements in <paramref name="arguments" /> does not equal the number of parameters for the method represented by <paramref name="method" />.
                
                    -or-
                
                    One or more of the elements of <paramref name="arguments" /> is not assignable to the corresponding parameter for the method represented by <paramref name="method" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes arguments.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.
                </returns>
      <param name="instance">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> property equal to (pass null for a static (Shared in Visual Basic) method).
                </param>
      <param name="method">
                    A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.
                </param>
      <param name="arguments">
                    An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null.
                
                    -or-
                <paramref name="instance" /> is null and <paramref name="method" /> represents an instance  method.
                
                    -or-
                <paramref name="arguments" /> is not null and one or more of its elements is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type is not assignable to the declaring type of the method represented by <paramref name="method" />.
                
                    -or-
                
                    The number of elements in <paramref name="arguments" /> does not equal the number of parameters for the method represented by <paramref name="method" />.
                
                    -or-
                
                    One or more of the elements of <paramref name="arguments" /> is not assignable to the corresponding parameter for the method represented by <paramref name="method" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to an instance method by calling the appropriate factory method.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> property equal to <paramref name="instance" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> set to the <see cref="T:System.Reflection.MethodInfo" /> that represents the specified instance method, and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> set to the specified arguments.
                </returns>
      <param name="instance">
                    An <see cref="T:System.Linq.Expressions.Expression" /> whose <see cref="P:System.Linq.Expressions.Expression.Type" /> property value will be searched for a specific method.
                </param>
      <param name="methodName">
                    The name of the method.
                </param>
      <param name="typeArguments">
                    An array of <see cref="T:System.Type" /> objects that specify the type parameters of the method.
                </param>
      <param name="arguments">
                    An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that represents the arguments to the method.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> or <paramref name="methodName" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    No method whose name is <paramref name="methodName" />, whose type parameters match <paramref name="typeArguments" />, and whose parameter types match <paramref name="arguments" /> is found in <paramref name="instance" />.Type or its base types.
                
                    -or-
                
                    More than one method whose name is <paramref name="methodName" />, whose type parameters match <paramref name="typeArguments" />, and whose parameter types match <paramref name="arguments" /> is found in <paramref name="instance" />.Type or its base types.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static (Shared in Visual Basic) method.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.
                </returns>
      <param name="method">
                    A <see cref="T:System.Reflection.MethodInfo" /> that represents a static (Shared in Visual Basic) method to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.
                </param>
      <param name="arguments">
                    An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
                    The number of elements in <paramref name="arguments" /> does not equal the number of parameters for the method represented by <paramref name="method" />.
                
                    -or-
                
                    One or more of the elements of <paramref name="arguments" /> is not assignable to the corresponding parameter for the method represented by <paramref name="method" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static (Shared in Visual Basic) method by calling the appropriate factory method.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property set to the <see cref="T:System.Reflection.MethodInfo" /> that represents the specified static (Shared in Visual Basic) method, and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> property set to the specified arguments.
                </returns>
      <param name="type">
                    The <see cref="T:System.Type" /> that specifies the type that contains the specified static (Shared in Visual Basic) method.
                </param>
      <param name="methodName">
                    The name of the method.
                </param>
      <param name="typeArguments">
                    An array of <see cref="T:System.Type" /> objects that specify the type parameters of the method.
                </param>
      <param name="arguments">
                    An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that represent the arguments to the method.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> or <paramref name="methodName" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    No method whose name is <paramref name="methodName" />, whose type parameters match <paramref name="typeArguments" />, and whose parameter types match <paramref name="arguments" /> is found in <paramref name="type" /> or its base types.
                
                    -or-
                
                    More than one method whose name is <paramref name="methodName" />, whose type parameters match <paramref name="typeArguments" />, and whose parameter types match <paramref name="arguments" /> is found in <paramref name="type" /> or its base types.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a coalescing operation.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.
                </returns>
      <param name="left">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.
                </param>
      <param name="right">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of <paramref name="left" /> does not represent a reference type or a nullable value type.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" />.Type and <paramref name="right" />.Type are not convertible to each other.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a coalescing operation, given a conversion function.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.
                </returns>
      <param name="left">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.
                </param>
      <param name="right">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.
                </param>
      <param name="conversion">
                    A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" />.Type and <paramref name="right" />.Type are not convertible to each other.
                
                    -or-
                <paramref name="conversion" /> is not null and <paramref name="conversion" />.Type is a delegate type that does not take exactly one argument.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of <paramref name="left" /> does not represent a reference type or a nullable value type.
                
                    -or-
                
                    The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of <paramref name="left" /> represents a type that is not assignable to the parameter type of the delegate type <paramref name="conversion" />.Type.
                
                    -or-
                
                    The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of <paramref name="right" /> is not equal to the return type of the delegate type <paramref name="conversion" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" />.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> and the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, and <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> properties set to the specified values.
                </returns>
      <param name="test">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> property equal to.
                </param>
      <param name="ifTrue">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> property equal to.
                </param>
      <param name="ifFalse">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="test" /> or <paramref name="ifTrue" /> or <paramref name="ifFalse" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="test" />.Type is not <see cref="T:System.Boolean" />.
                
                    -or-
                <paramref name="ifTrue" />.Type is not equal to <paramref name="ifFalse" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.ConstantExpression" /> that has the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> property set to the specified value.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.ConstantExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> and the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> property set to the specified value.
                </returns>
      <param name="value">
                    An <see cref="T:System.Object" /> to set the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> property equal to.
                </param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.ConstantExpression" /> that has the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.ConstantExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> and the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.
                </returns>
      <param name="value">
                    An <see cref="T:System.Object" /> to set the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> property equal to.
                </param>
      <param name="type">
                    A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not null and <paramref name="type" /> is not assignable from the dynamic type of <paramref name="value" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a conversion operation.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Convert" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.
                </returns>
      <param name="expression">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.
                </param>
      <param name="type">
                    A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> or <paramref name="type" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    No conversion operator is defined between <paramref name="expression" />.Type and <paramref name="type" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a conversion operation forfor which the implementing method is specified.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Convert" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, <see cref="P:System.Linq.Expressions.Expression.Type" />, and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.
                </returns>
      <param name="expression">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.
                </param>
      <param name="type">
                    A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.
                </param>
      <param name="method">
                    A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> or <paramref name="type" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly one argument.
                </exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">
                    More than one method that matches the <paramref name="method" /> description was found.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    No conversion operator is defined between <paramref name="expression" />.Type and <paramref name="type" />.
                
                    -or-
                <paramref name="expression" />.Type is not assignable to the argument type of the method represented by <paramref name="method" />.
                
                    -or-
                
                    The return type of the method represented by <paramref name="method" /> is not assignable to <paramref name="type" />.
                
                    -or-
                <paramref name="expression" />.Type or <paramref name="type" /> is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by <paramref name="method" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a conversion operation that throws an exception if the target type is overflowed.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.
                </returns>
      <param name="expression">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.
                </param>
      <param name="type">
                    A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> or <paramref name="type" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    No conversion operator is defined between <paramref name="expression" />.Type and <paramref name="type" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a conversion operation that throws an exception if the target type is overflowed and forfor which the implementing method is specified.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, <see cref="P:System.Linq.Expressions.Expression.Type" />, and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.
                </returns>
      <param name="expression">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.
                </param>
      <param name="type">
                    A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.
                </param>
      <param name="method">
                    A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> or <paramref name="type" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly one argument.
                </exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">
                    More than one method that matches the <paramref name="method" /> description was found.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    No conversion operator is defined between <paramref name="expression" />.Type and <paramref name="type" />.
                
                    -or-
                <paramref name="expression" />.Type is not assignable to the argument type of the method represented by <paramref name="method" />.
                
                    -or-
                
                    The return type of the method represented by <paramref name="method" /> is not assignable to <paramref name="type" />.
                
                    -or-
                <paramref name="expression" />.Type or <paramref name="type" /> is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by <paramref name="method" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic division operation.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Divide" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.
                </returns>
      <param name="left">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property to.
                </param>
      <param name="right">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The division operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic division operation. The implementing method can be specified.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Divide" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.
                </returns>
      <param name="left">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.
                </param>
      <param name="right">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.
                </param>
      <param name="method">
                    A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the division operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
                    Creates an <see cref="T:System.Linq.Expressions.ElementInit" />, given an <see cref="T:System.Collections.Generic.IEnumerable`1" /> as the second argument.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.Expressions.ElementInit" /> that has the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> and <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> properties set to the specified values.
                </returns>
      <param name="addMethod">
                    A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> property equal to.
                </param>
      <param name="arguments">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to set the <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addMethod" /> or <paramref name="arguments" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
                    The method that <paramref name="addMethod" /> represents is not named "Add" (case insensitive).
                
                    -or-
                
                    The method that <paramref name="addMethod" /> represents is not an instance method.
                
                    -or-
                <paramref name="arguments" /> does not contain the same number of elements as the number of parameters for the method that <paramref name="addMethod" /> represents.
                
                    -or-
                
                    The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the method that <paramref name="addMethod" /> represents.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>
                    Creates an <see cref="T:System.Linq.Expressions.ElementInit" />, given an array of values as the second argument.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.Expressions.ElementInit" /> that has the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> and <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> properties set to the specified values.
                </returns>
      <param name="addMethod">
                    A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> property equal to.
                </param>
      <param name="arguments">
                    An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to set the <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addMethod" /> or <paramref name="arguments" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
                    The method that addMethod represents is not named "Add" (case insensitive).
                
                    -or-
                
                    The method that addMethod represents is not an instance method.
                
                    -or-
                
                    arguments does not contain the same number of elements as the number of parameters for the method that addMethod represents.
                
                    -or-
                
                    The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the method that <paramref name="addMethod" /> represents.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an equality comparison.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.
                </returns>
      <param name="left">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.
                </param>
      <param name="right">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The equality operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an equality comparison. The implementing method can be specified.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.
                </returns>
      <param name="left">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.
                </param>
      <param name="right">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.
                </param>
      <param name="liftToNull">true to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to true; false to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to false.
                </param>
      <param name="method">
                    A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the equality operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise XOR operation.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.
                </returns>
      <param name="left">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.
                </param>
      <param name="right">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The XOR operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise XOR operation. The implementing method can be specified.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.
                </returns>
      <param name="left">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.
                </param>
      <param name="right">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.
                </param>
      <param name="method">
                    A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the XOR operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a field.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> and the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> and <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> properties set to the specified values.
                </returns>
      <param name="expression">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property equal to.
                </param>
      <param name="field">
                    The <see cref="T:System.Reflection.FieldInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="field" /> is null.
                
                    -or-
                
                    The field represented by <paramref name="field" /> is not static (Shared in Visual Basic) and <paramref name="expression" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type is not assignable to the declaring type of the field represented by <paramref name="field" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a field given the name of the field.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property set to <paramref name="expression" />, and the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property set to the <see cref="T:System.Reflection.FieldInfo" /> that represents the field denoted by <paramref name="fieldName" />.
                </returns>
      <param name="expression">
                    An <see cref="T:System.Linq.Expressions.Expression" /> whose <see cref="P:System.Linq.Expressions.Expression.Type" /> contains a field named <paramref name="fieldName" />.
                </param>
      <param name="fieldName">
                    The name of a field.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> or <paramref name="fieldName" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
                    No field named <paramref name="fieldName" /> is defined in <paramref name="expression" />.Type or its base types.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetActionType(System.Type[])">
      <summary>
                    Creates a <see cref="T:System.Type" /> object that represents a generic System.Action delegate type that has specific type arguments.
                </summary>
      <returns>
                    The type of a System.Action delegate that has the specified type arguments.
                </returns>
      <param name="typeArgs">
                    An array of zero to four <see cref="T:System.Type" /> objects that specify the type arguments for the System.Action delegate type.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArgs" /> contains more than four elements.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArgs" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])">
      <summary>
                    Creates a <see cref="T:System.Type" /> object that represents a generic System.System.Func delegate type that has specific type arguments.
                </summary>
      <returns>
                    The type of a System.System.Func delegate that has the specified type arguments.
                </returns>
      <param name="typeArgs">
                    An array of one to five <see cref="T:System.Type" /> objects that specify the type arguments for the System.System.Func delegate type.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArgs" /> contains less than one or more than five elements.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArgs" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than" numeric comparison.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.
                </returns>
      <param name="left">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.
                </param>
      <param name="right">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The "greater than" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than" numeric comparison. The implementing method can be specified.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.
                </returns>
      <param name="left">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.
                </param>
      <param name="right">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.
                </param>
      <param name="liftToNull">true to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to true; false to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to false.
                </param>
      <param name="method">
                    A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the "greater than" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than or equal" numeric comparison.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.
                </returns>
      <param name="left">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.
                </param>
      <param name="right">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The "greater than or equal" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than or equal" numeric comparison. The implementing method can be specified.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.
                </returns>
      <param name="left">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.
                </param>
      <param name="right">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.
                </param>
      <param name="liftToNull">true to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to true; false to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to false.
                </param>
      <param name="method">
                    A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the "greater than or equal" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
                    Creates an <see cref="T:System.Linq.Expressions.InvocationExpression" />.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.Expressions.InvocationExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Invoke" /> and the <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" /> and <see cref="P:System.Linq.Expressions.InvocationExpression.Arguments" /> properties set to the specified values.
                </returns>
      <param name="expression">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" /> property equal to.
                </param>
      <param name="arguments">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.InvocationExpression.Arguments" /> collection.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type does not represent a delegate type or an <see cref="T:System.Linq.Expressions.Expression`1" />.
                
                    -or-
                
                    The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the delegate represented by <paramref name="expression" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="arguments" /> does not contain the same number of elements as the list of parameters for the delegate represented by <paramref name="expression" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>
                    Creates an <see cref="T:System.Linq.Expressions.InvocationExpression" />.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.Expressions.InvocationExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Invoke" /> and the <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" /> and <see cref="P:System.Linq.Expressions.InvocationExpression.Arguments" /> properties set to the specified values.
                </returns>
      <param name="expression">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" /> property equal to.
                </param>
      <param name="arguments">
                    An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.InvocationExpression.Arguments" /> collection.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type does not represent a delegate type or an <see cref="T:System.Linq.Expressions.Expression`1" />.
                
                    -or-
                
                    The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the delegate represented by <paramref name="expression" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="arguments" /> does not contain the same number of elements as the list of parameters for the delegate represented by <paramref name="expression" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>
                    Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.
                </returns>
      <param name="body">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.
                </param>
      <param name="parameters">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.
                </param>
      <typeparam name="TDelegate">
                    A delegate type.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> is null.
                
                    -or-
                
                    One or more elements in <paramref name="parameters" /> are null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="TDelegate" /> is not a delegate type.
                
                    -or-
                <paramref name="body" />.Type represents a type that is not assignable to the return type of <paramref name="TDelegate" />.
                
                    -or-
                <paramref name="parameters" /> does not contain the same number of elements as the list of parameters for <paramref name="TDelegate" />.
                
                    -or-
                
                    The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="parameters" /> is not assignable from the type of the corresponding parameter type of <paramref name="TDelegate" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> by first constructing a delegate type.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.
                </returns>
      <param name="body">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.
                </param>
      <param name="parameters">
                    An array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> is null.
                
                    -or-
                
                    One or more elements of <paramref name="parameters" /> are null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameters" /> contains more than four elements.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>
                    Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.
                </returns>
      <param name="body">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.
                </param>
      <param name="parameters">
                    An array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.
                </param>
      <typeparam name="TDelegate">
                    A delegate type.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> is null.
                
                    -or-
                
                    One or more elements in <paramref name="parameters" /> are null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="TDelegate" /> is not a delegate type.
                
                    -or-
                <paramref name="body" />.Type represents a type that is not assignable to the return type of <paramref name="TDelegate" />.
                
                    -or-
                <paramref name="parameters" /> does not contain the same number of elements as the list of parameters for <paramref name="TDelegate" />.
                
                    -or-
                
                    The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="parameters" /> is not assignable from the type of the corresponding parameter type of <paramref name="TDelegate" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> and can be used when the delegate type is not known at compile time.
                </summary>
      <returns>
                    An object that represents a lambda expression whichwhich has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.
                </returns>
      <param name="delegateType">
                    A <see cref="T:System.Type" /> that represents a delegate type.
                </param>
      <param name="body">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.
                </param>
      <param name="parameters">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="delegateType" /> or <paramref name="body" /> is null.
                
                    -or-
                
                    One or more elements in <paramref name="parameters" /> are null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" /> does not represent a delegate type.
                
                    -or-
                <paramref name="body" />.Type represents a type that is not assignable to the return type of the delegate type represented by <paramref name="delegateType" />.
                
                    -or-
                <paramref name="parameters" /> does not contain the same number of elements as the list of parameters for the delegate type represented by <paramref name="delegateType" />.
                
                    -or-
                
                    The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="parameters" /> is not assignable from the type of the corresponding parameter type of the delegate type represented by <paramref name="delegateType" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> and can be used when the delegate type is not known at compile time.
                </summary>
      <returns>
                    An object that represents a lambda expression expressionwhich has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.
                </returns>
      <param name="delegateType">
                    A <see cref="T:System.Type" /> that represents a delegate type.
                </param>
      <param name="body">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.
                </param>
      <param name="parameters">
                    An array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="delegateType" /> or <paramref name="body" /> is null.
                
                    -or-
                
                    One or more elements in <paramref name="parameters" /> are null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" /> does not represent a delegate type.
                
                    -or-
                <paramref name="body" />.Type represents a type that is not assignable to the return type of the delegate type represented by <paramref name="delegateType" />.
                
                    -or-
                <paramref name="parameters" /> does not contain the same number of elements as the list of parameters for the delegate type represented by <paramref name="delegateType" />.
                
                    -or-
                
                    The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="parameters" /> is not assignable from the type of the corresponding parameter type of the delegate type represented by <paramref name="delegateType" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise leftleft-shift operation.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.
                </returns>
      <param name="left">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.
                </param>
      <param name="right">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The left-shift operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise leftleft-shift operation. The implementing method can be specified.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.
                </returns>
      <param name="left">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.
                </param>
      <param name="right">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.
                </param>
      <param name="method">
                    A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the left-shift operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "less than" numeric comparison.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.
                </returns>
      <param name="left">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.
                </param>
      <param name="right">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The "less than" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "less than" numeric comparison. The implementing method can be specified.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.
                </returns>
      <param name="left">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.
                </param>
      <param name="right">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.
                </param>
      <param name="liftToNull">true to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to true; false to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to false.
                </param>
      <param name="method">
                    A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the "less than" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a " less than or equal" numeric comparison.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.
                </returns>
      <param name="left">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.
                </param>
      <param name="right">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The "less than or equal" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a " less than or equal" numeric comparison. The implementing method can be specified.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.
                </returns>
      <param name="left">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.
                </param>
      <param name="right">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.
                </param>
      <param name="liftToNull">true to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to true; false to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to false.
                </param>
      <param name="method">
                    A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the "less than or equal" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> where the member is a field or property.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.MemberListBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberListBinding.InitializersInitializers" /> properties set to the specified values.
                </returns>
      <param name="member">
                    A <see cref="T:System.Reflection.MemberInfo" /> that represents a field or property to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.
                </param>
      <param name="initializers">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ElementInitElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.InitializersInitializers" /> collection.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> is null. 
                
                    -or-
                
                    One or more elements of <paramref name="initializers" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> does not represent a field or property.
                
                    -or-
                
                    The <see cref="P:System.Reflection.FieldInfo.FieldType" /> or <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> of the field or property that <paramref name="member" /> represents does not implement <see cref="T:System.Collections.IEnumerable" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> where the member is a field or property.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.MemberListBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberListBinding.InitializersInitializers" /> properties set to the specified values.
                </returns>
      <param name="member">
                    A <see cref="T:System.Reflection.MemberInfo" /> that represents a field or property to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.
                </param>
      <param name="initializers">
                    An array of <see cref="T:System.Linq.Expressions.ElementInitElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.InitializersInitializers" /> collection.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> is null. 
                
                    -or-
                
                    One or more elements of <paramref name="initializers" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> does not represent a field or property.
                
                    -or-
                
                    The <see cref="P:System.Reflection.FieldInfo.FieldType" /> or <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> of the field or property that <paramref name="member" /> represents does not implement <see cref="T:System.Collections.IEnumerable" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> based on a specified property accessor method.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.MemberListBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.MemberInfoMemberInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and <see cref="P:System.Linq.Expressions.MemberListBinding.InitializersInitializers" /> populated with the elements of <paramref name="initializers" />.
                </returns>
      <param name="propertyAccessor">
                    A <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.
                </param>
      <param name="initializers">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ElementInitElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.InitializersInitializers" /> collection.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> is null. 
                
                    -or-
                
                    One or more elements of <paramref name="initializers" /> are null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> does not represent a property accessor method.
                
                    -or-
                
                    The <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> of the property that the method represented by <paramref name="propertyAccessor" /> accesses does not implement <see cref="T:System.Collections.IEnumerable" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> object based on a specified property accessor method.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.MemberListBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.MemberInfoMemberInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and <see cref="P:System.Linq.Expressions.MemberListBinding.InitializersInitializers" /> populated with the elements of <paramref name="initializers" />.
                </returns>
      <param name="propertyAccessor">
                    A <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.
                </param>
      <param name="initializers">
                    An array of <see cref="T:System.Linq.Expressions.ElementInitElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.InitializersInitializers" /> collection.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> is null. 
                
                    -or-
                
                    One or more elements of <paramref name="initializers" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> does not represent a property accessor method.
                
                    -or-
                
                    The <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> of the property that the method represented by <paramref name="propertyAccessor" /> accesses does not implement <see cref="T:System.Collections.IEnumerable" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses specified <see cref="T:System.Linq.Expressions.ElementInit" /> objects to initialize a collection.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> and <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> properties set to the specified values.
                </returns>
      <param name="newExpression">
                    A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.
                </param>
      <param name="initializers">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> or <paramref name="initializers" /> is null.
                
                    -or-
                
                    One or more elements of <paramref name="initializers" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses a method named "Add" to add elements to a collection.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> propertyy set to the specified value.
                </returns>
      <param name="newExpression">
                    A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.
                </param>
      <param name="initializers">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.InitializersInitializers" /> collection.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> or <paramref name="initializers" /> is null.
                
                    -or-
                
                    One or more elements of <paramref name="initializers" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    There is no instance method named "Add" (case insensitive) declared in <paramref name="newExpression" />.Type or its base type.
                
                    -or-
                
                    The add method on <paramref name="newExpression" />.Type or its base type does not take exactly one argument.
                
                    -or-
                
                    The type represented by the <see cref="P:System.Linq.Expressions.Expression.Type" /> property of the first element of <paramref name="initializers" /> is not assignable to the argument type of the add method on <paramref name="newExpression" />.Type or its base type.
                
                    -or-
                
                    More than one argument-compatible method named "Add" (case-insensitive) exists on <paramref name="newExpression" />.Type and/or its base type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses specified <see cref="T:System.Linq.Expressions.ElementInit" /> objects to initialize a collection.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> and <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> properties set to the specified values.
                </returns>
      <param name="newExpression">
                    A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.
                </param>
      <param name="initializers">
                    An array of <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> or <paramref name="initializers" /> is null.
                
                    -or-
                
                    One or more elements of <paramref name="initializers" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses a method named "Add" to add elements to a collection.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> propertyy set to the specified value.
                </returns>
      <param name="newExpression">
                    A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.
                </param>
      <param name="initializers">
                    An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.InitializersInitializers" /> collection.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> or <paramref name="initializers" /> is null.
                
                    -or-
                
                    One or more elements of <paramref name="initializers" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    There is no instance method named "Add" (case insensitive) declared in <paramref name="newExpression" />.Type or its base type.
                
                    -or-
                
                    The add method on <paramref name="newExpression" />.Type or its base type does not take exactly one argument.
                
                    -or-
                
                    The type represented by the <see cref="P:System.Linq.Expressions.Expression.Type" /> property of the first element of <paramref name="initializers" /> is not assignable to the argument type of the add method on <paramref name="newExpression" />.Type or its base type.
                
                    -or-
                
                    More than one argument-compatible method named "Add" (case-insensitive) exists on <paramref name="newExpression" />.Type and/or its base type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses a specified method to add elements to a collection.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property set to the specified value.
                </returns>
      <param name="newExpression">
                    A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.
                </param>
      <param name="addMethod">
                    A <see cref="T:System.Reflection.MethodInfo" /> that represents an instance method named "Add" (case insensitive), that adds an element to a collection.
                </param>
      <param name="initializers">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> or <paramref name="initializers" /> is null.
                
                    -or-
                
                    One or more elements of <paramref name="initializers" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.
                
                    -or-
                <paramref name="addMethod" /> is not null and it does not represent an instance method named "Add" (case insensitive) that takes exactly one argument.
                
                    -or-
                <paramref name="addMethod" /> is not null and the type represented by the <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="initializers" /> is not assignable to the argument type of the method that <paramref name="addMethod" /> represents.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="addMethod" /> is null and no instance method named "Add" that takes one type-compatible argument exists on <paramref name="newExpression" />.Type or its base type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses a specified method to add elements to a collection.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property set to the specified value.
                </returns>
      <param name="newExpression">
                    A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.
                </param>
      <param name="addMethod">
                    A <see cref="T:System.Reflection.MethodInfo" /> that represents an instance method that takes one argument, that adds an element to a collection.
                </param>
      <param name="initializers">
                    An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> or <paramref name="initializers" /> is null.
                
                    -or-
                
                    One or more elements of <paramref name="initializers" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.
                
                    -or-
                <paramref name="addMethod" /> is not null and it does not represent an instance method named "Add" (case insensitive) that takes exactly one argument.
                
                    -or-
                <paramref name="addMethod" /> is not null and the type represented by the <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="initializers" /> is not assignable to the argument type of the method that <paramref name="addMethod" /> represents.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="addMethod" /> is null and no instance method named "Add" that takes one type-compatible argument exists on <paramref name="newExpression" />.Type or its base type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" />, given the left and right operands, by calling an appropriate factory method.
                </summary>
      <returns>
                    The <see cref="T:System.Linq.Expressions.BinaryExpression" /> that results from calling the appropriate factory method.
                </returns>
      <param name="binaryType">
                    The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of binary operation.
                </param>
      <param name="left">
                    An <see cref="T:System.Linq.Expressions.Expression" /> that represents the left operand.
                </param>
      <param name="right">
                    An <see cref="T:System.Linq.Expressions.Expression" /> that represents the right operand.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> does not correspond to a binary expression node.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" />, given the left operand, right operand and implementing method, by calling the appropriate factory method.
                </summary>
      <returns>
                    The <see cref="T:System.Linq.Expressions.BinaryExpression" /> that results from calling the appropriate factory method.
                </returns>
      <param name="binaryType">
                    The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of binary operation.
                </param>
      <param name="left">
                    An <see cref="T:System.Linq.Expressions.Expression" /> that represents the left operand.
                </param>
      <param name="right">
                    An <see cref="T:System.Linq.Expressions.Expression" /> that represents the right operand.
                </param>
      <param name="liftToNull">true to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to true; false to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to false.
                </param>
      <param name="method">
                    A <see cref="T:System.Reflection.MethodInfo" /> that specifies the implementing method.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> does not correspond to a binary expression node.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" />, given the left operand, right operand, implementing method and type conversion function, by calling the appropriate factory method.
                </summary>
      <returns>
                    The <see cref="T:System.Linq.Expressions.BinaryExpression" /> that results from calling the appropriate factory method.
                </returns>
      <param name="binaryType">
                    The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of binary operation.
                </param>
      <param name="left">
                    An <see cref="T:System.Linq.Expressions.Expression" /> that represents the left operand.
                </param>
      <param name="right">
                    An <see cref="T:System.Linq.Expressions.Expression" /> that represents the right operand.
                </param>
      <param name="liftToNull">true to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to true; false to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to false.
                </param>
      <param name="method">
                    A <see cref="T:System.Reflection.MethodInfo" /> that specifies the implementing method.
                </param>
      <param name="conversion">
                    A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that represents a type conversion function. This parameter is used only if <paramref name="binaryType" /> is <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" />.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> does not correspond to a binary expression node.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing either a field or a property.
                </summary>
      <returns>
                    The <see cref="T:System.Linq.Expressions.MemberExpression" /> that results from calling the appropriate factory method.
                </returns>
      <param name="expression">
                    An <see cref="T:System.Linq.Expressions.Expression" /> that represents the object that the member belongs to.
                </param>
      <param name="member">
                    The <see cref="T:System.Reflection.MemberInfo" /> that describes the field or property to be accessed.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> or <paramref name="member" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> does not represent a field or property.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" />, given an operand, by calling the appropriate factory method.
                </summary>
      <returns>
                    The <see cref="T:System.Linq.Expressions.UnaryExpression" /> that results from calling the appropriate factory method.
                </returns>
      <param name="unaryType">
                    The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of unary operation.
                </param>
      <param name="operand">
                    An <see cref="T:System.Linq.Expressions.Expression" /> that represents the operand.
                </param>
      <param name="type">
                    The <see cref="T:System.Type" /> that specifies the type to be converted to (pass null if not applicable).
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="unaryType" /> does not correspond to a unary expression node.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="operand" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" />, given an operand and implementing method, by calling the appropriate factory method.
                </summary>
      <returns>
                    The <see cref="T:System.Linq.Expressions.UnaryExpression" /> that results from calling the appropriate factory method.
                </returns>
      <param name="unaryType">
                    The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of unary operation.
                </param>
      <param name="operand">
                    An <see cref="T:System.Linq.Expressions.Expression" /> that represents the operand.
                </param>
      <param name="type">
                    The <see cref="T:System.Type" /> that specifies the type to be converted to (pass null if not applicable).
                </param>
      <param name="method">
                    The <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="unaryType" /> does not correspond to a unary expression node.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="operand" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a field or property.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> properties set to the specified values.
                </returns>
      <param name="member">
                    The <see cref="T:System.Reflection.MemberInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.
                </param>
      <param name="bindings">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> collection.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> or <paramref name="bindings" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> does not represent a field or property.
                
                    -or-
                
                    The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type of the field or property that <paramref name="member" /> represents.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a field or property.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> properties set to the specified values.
                </returns>
      <param name="member">
                    The <see cref="T:System.Reflection.MemberInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.
                </param>
      <param name="bindings">
                    An array of <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> collection.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> or <paramref name="bindings" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> does not represent a field or property.
                
                    -or-
                
                    The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type of the field or property that <paramref name="member" /> represents.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a member that is accessed by using a property accessor method.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> properties set to the specified values.
                </returns>
      <param name="propertyAccessor">
                    The <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.
                </param>
      <param name="bindings">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> collection.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> or <paramref name="bindings" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> does not represent a property accessor method.
                
                    -or-
                
                    The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type of the property accessed by the method that <paramref name="propertyAccessor" /> represents.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a member that is accessed by using a property accessor method.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> properties set to the specified values.
                </returns>
      <param name="propertyAccessor">
                    The <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.
                </param>
      <param name="bindings">
                    An array of <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> collection.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> or <paramref name="bindings" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> does not represent a property accessor method.
                
                    -or-
                
                    The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type of the property accessed by the method that <paramref name="propertyAccessor" /> represents.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.MemberInitExpression" />.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.MemberInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> and the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> and <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> properties set to the specified values.
                </returns>
      <param name="newExpression">
                    A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> property equal to.
                </param>
      <param name="bindings">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> collection.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> or <paramref name="bindings" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
                    The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type that <paramref name="newExpression" />.Type represents.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.MemberInitExpression" />.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.MemberInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> and the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> and <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> properties set to the specified values.
                </returns>
      <param name="newExpression">
                    A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> property equal to.
                </param>
      <param name="bindings">
                    An array of <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> collection.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> or <paramref name="bindings" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
                    The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type that <paramref name="newExpression" />.Type represents.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic remainder operation.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.
                </returns>
      <param name="left">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.
                </param>
      <param name="right">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The modulus operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic remainder operation. The implementing method can be specified.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.
                </returns>
      <param name="left">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.
                </param>
      <param name="right">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.
                </param>
      <param name="method">
                    A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the modulus operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that does not have overflow checking.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.
                </returns>
      <param name="left">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.
                </param>
      <param name="right">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The multiplication operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that does not have overflow checking and forfor which the implementing method is specified.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.
                </returns>
      <param name="left">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.
                </param>
      <param name="right">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.
                </param>
      <param name="method">
                    A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the multiplication operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that has overflow checking.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.
                </returns>
      <param name="left">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.
                </param>
      <param name="right">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The multiplication operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that has overflow checking. The implementing method can be specified.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.
                </returns>
      <param name="left">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.
                </param>
      <param name="right">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.
                </param>
      <param name="method">
                    A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the multiplication operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.
                </returns>
      <param name="expression">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The unary minus operator is not defined for <paramref name="expression" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation. The implementing method can be specified.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.
                </returns>
      <param name="expression">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.
                </param>
      <param name="method">
                    A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly one argument.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the unary minus operator is not defined for <paramref name="expression" />.Type.
                
                    -or-
                <paramref name="expression" />.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation that has overflow checking.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.
                </returns>
      <param name="expression">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The unary minus operator is not defined for <paramref name="expression" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation that has overflow checking.. The implementing method can be specified.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.
                </returns>
      <param name="expression">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.
                </param>
      <param name="method">
                    A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly one argument.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the unary minus operator is not defined for <paramref name="expression" />.Type.
                
                    -or-
                <paramref name="expression" />.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor that takes no arguments.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property set to the specified value.
                </returns>
      <param name="constructor">
                    The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
                    The constructor that <paramref name="constructor" /> represents has at least one parameter.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor with the specified arguments.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> and <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> properties set to the specified values.
                </returns>
      <param name="constructor">
                    The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.
                </param>
      <param name="arguments">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> collection.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> is null.
                
                    -or-
                
                    An element of <paramref name="arguments" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
                    The <paramref name="arguments" /> parameter does not contain the same number of elements as the number of parameters for the constructor that <paramref name="constructor" /> represents.
                
                    -or-
                
                    The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor" /> represents.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor with the specified arguments. The members that access the constructor initialized fields are specified.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> and <see cref="P:System.Linq.Expressions.NewExpression.Members" /> properties set to the specified values.
                </returns>
      <param name="constructor">
                    The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.
                </param>
      <param name="arguments">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> collection.
                </param>
      <param name="members">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Reflection.MemberInfo" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Members" /> collection.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> is null.
                
                    -or-
                
                    An element of <paramref name="arguments" /> is null.
                
                    -or-
                
                    An element of <paramref name="members" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
                    The <paramref name="arguments" /> parameter does not contain the same number of elements as the number of parameters for the constructor that <paramref name="constructor" /> represents.
                
                    -or-
                
                    The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor" /> represents.
                
                    -or-
                
                    The <paramref name="members" /> parameter does not have the same number of elements as <paramref name="arguments" />.
                
                    -or-
                
                    An element of <paramref name="arguments" /> has a <see cref="P:System.Linq.Expressions.Expression.Type" /> property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of <paramref name="members" />.
                
                    -or-
                
                    An element of members represents a property that does not have a get accessor.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor with the specified arguments. The members that access the constructor initialized fields are specified as an array.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> and <see cref="P:System.Linq.Expressions.NewExpression.Members" /> properties set to the specified values.
                </returns>
      <param name="constructor">
                    The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.
                </param>
      <param name="arguments">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> collection.
                </param>
      <param name="members">
                    An array of <see cref="T:System.Reflection.MemberInfo" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Members" /> collection.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> is null.
                
                    -or-
                
                    An element of <paramref name="arguments" /> is null.
                
                    -or-
                
                    An element of <paramref name="members" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
                    The <paramref name="arguments" /> parameter does not contain the same number of elements as the number of parameters for the constructor that <paramref name="constructor" /> represents.
                
                    -or-
                
                    The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor" /> represents.
                
                    -or-
                
                    The <paramref name="members" /> parameter does not have the same number of elements as <paramref name="arguments" />.
                
                    -or-
                
                    An element of <paramref name="arguments" /> has a <see cref="P:System.Linq.Expressions.Expression.Type" /> property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of <paramref name="members" />.
                
                    -or-
                
                    An element of <paramref name="members" /> represents a property that does not have a get accessor.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor with the specified arguments.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> and <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> properties set to the specified values.
                </returns>
      <param name="constructor">
                    The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.
                </param>
      <param name="arguments">
                    An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> collection.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> is null.
                
                    -or-
                
                    An element of <paramref name="arguments" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
                    The length of <paramref name="arguments" /> does match the number of parameters for the constructor that <paramref name="constructor" /> represents.
                
                    -or-
                
                    The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor" /> represents.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Type)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the parameterless constructor of the specified type.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property set to the <see cref="T:System.Reflection.ConstructorInfo" /> that represents the parameterless constructor of the specified type.
                </returns>
      <param name="type">
                    A <see cref="T:System.Type" /> that has a constructor that takes no arguments.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
                    The type that <paramref name="type" /> represents does not have a parameterless constructor.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating an array that has a specified rank.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property set to the specified value.
                </returns>
      <param name="type">
                    A <see cref="T:System.Type" /> that represents the element type of the array.
                </param>
      <param name="bounds">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> collection.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> or <paramref name="bounds" /> is null.
                
                    -or-
                
                    An element of <paramref name="bounds" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
                    The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="bounds" /> does not represent an integral type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating an array that has a specified rank.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property set to the specified value.
                </returns>
      <param name="type">
                    A <see cref="T:System.Type" /> that represents the element type of the array.
                </param>
      <param name="bounds">
                    An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> collection.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> or <paramref name="bounds" /> is null.
                
                    -or-
                
                    An element of <paramref name="bounds" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
                    The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="bounds" /> does not represent an integral type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating a one-dimensional array and initializing it from a list of elements.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property set to the specified value.
                </returns>
      <param name="type">
                    A <see cref="T:System.Type" /> that represents the element type of the array.
                </param>
      <param name="initializers">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> collection.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> or <paramref name="initializers" /> is null.
                
                    -or-
                
                    An element of <paramref name="initializers" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="initializers" /> represents a type that is not assignable to the type that <paramref name="type" /> represents.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating a one-dimensional array and initializing it from a list of elements.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property set to the specified value.
                </returns>
      <param name="type">
                    A <see cref="T:System.Type" /> that represents the element type of the array.
                </param>
      <param name="initializers">
                    An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> collection.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> or <paramref name="initializers" /> is null.
                
                    -or-
                
                    An element of <paramref name="initializers" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="initializers" /> represents a type that is not assignable to the type <paramref name="type" />.
                </exception>
    </member>
    <member name="P:System.Linq.Expressions.Expression.NodeType">
      <summary>
                    Gets the node type of this <see cref="T:System.Linq.Expressions.Expression" />.
                </summary>
      <returns>
                    One of the <see cref="T:System.Linq.Expressions.ExpressionType" /> values.
                </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a bitwise complement operation.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.
                </returns>
      <param name="expression">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The unary not operator is not defined for <paramref name="expression" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a bitwise complement operation. The implementing method can be specified.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.
                </returns>
      <param name="expression">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.
                </param>
      <param name="method">
                    A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly one argument.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the unary not operator is not defined for <paramref name="expression" />.Type.
                
                    -or-
                <paramref name="expression" />.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an inequality comparison.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.
                </returns>
      <param name="left">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.
                </param>
      <param name="right">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The inequality operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an inequality comparison. The implementing method can be specified.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.
                </returns>
      <param name="left">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.
                </param>
      <param name="right">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.
                </param>
      <param name="liftToNull">true to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to true; false to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to false.
                </param>
      <param name="method">
                    A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the inequality operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise OR operation.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Or" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.
                </returns>
      <param name="left">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.
                </param>
      <param name="right">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The bitwise OR operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise OR operation. The implementing method can be specified.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Or" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.
                </returns>
      <param name="left">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.
                </param>
      <param name="right">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.
                </param>
      <param name="method">
                    A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the bitwise OR operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional OR operation that evaluates the second operand only if it has to.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.
                </returns>
      <param name="left">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.
                </param>
      <param name="right">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The bitwise OR operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.
                
                    -or-
                <paramref name="left" />.Type and <paramref name="right" />.Type are not the same Boolean type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional OR operation that evaluates the second operand only if it has to. .The implementing method can be specified.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.
                </returns>
      <param name="left">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.
                </param>
      <param name="right">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.
                </param>
      <param name="method">
                    A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the bitwise OR operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.
                
                    -or-
                <paramref name="method" /> is null and <paramref name="left" />.Type and <paramref name="right" />.Type are not the same Boolean type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type,System.String)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" />.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.ParameterExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Parameter" /> and the <see cref="P:System.Linq.Expressions.Expression.Type" /> and <see cref="P:System.Linq.Expressions.ParameterExpression.Name" /> properties set to the specified values.
                </returns>
      <param name="type">
                    A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.
                </param>
      <param name="name">
                    The value to set the <see cref="P:System.Linq.Expressions.ParameterExpression.Name" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising a number to a power.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Power" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.
                </returns>
      <param name="left">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.
                </param>
      <param name="right">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The exponentiation operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.
                
                    -or-
                <paramref name="left" />.Type and/or <paramref name="right" />.Type are not <see cref="T:System.Double" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising a number to a power. The implementing method can be specified.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Power" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.
                </returns>
      <param name="left">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.
                </param>
      <param name="right">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.
                </param>
      <param name="method">
                    A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the exponentiation operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.
                
                    -or-
                <paramref name="method" /> is null and <paramref name="left" />.Type and/or <paramref name="right" />.Type are not <see cref="T:System.Double" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property by using a property accessor method.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property set to <paramref name="expression" /> and the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />.
                </returns>
      <param name="expression">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property equal to.
                </param>
      <param name="propertyAccessor">
                    The <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> is null.
                
                    -or-
                
                    The method that <paramref name="propertyAccessor" /> represents is not static (Shared in Visual Basic) and <paramref name="expression" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type is not assignable to the declaring type of the method represented by <paramref name="propertyAccessor" />.
                
                    -or-
                
                    The method that <paramref name="propertyAccessor" /> represents is not a property accessor method.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> and the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> and <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> properties set to the specified values.
                </returns>
      <param name="expression">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property equal to.
                </param>
      <param name="property">
                    The <see cref="T:System.Reflection.PropertyInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> is null.
                
                    -or-
                
                    The property that <paramref name="property" /> represents is not static (Shared in Visual Basic) and <paramref name="expression" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type is not assignable to the declaring type of the property that <paramref name="property" /> represents.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property given the name of the property.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property set to <paramref name="expression" />, and the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property denoted by <paramref name="propertyName" />.
                </returns>
      <param name="expression">
                    An <see cref="T:System.Linq.Expressions.Expression" /> whose <see cref="P:System.Linq.Expressions.Expression.Type" /> contains a property named <paramref name="propertyName" />.
                </param>
      <param name="propertyName">
                    The name of a property.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> or <paramref name="propertyName" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
                    No property named <paramref name="propertyName" /> is defined in <paramref name="expression" />.Type or its base types.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property or field given the name of the property or field.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property set to <paramref name="expression" />, and the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> or <see cref="T:System.Reflection.FieldInfo" /> that represents the property or field denoted by <paramref name="propertyOrFieldName" />.
                </returns>
      <param name="expression">
                    An <see cref="T:System.Linq.Expressions.Expression" /> whose <see cref="P:System.Linq.Expressions.Expression.Type" /> contains a property or field named <paramref name="propertyOrFieldName" />.
                </param>
      <param name="propertyOrFieldName">
                    The name of a property or field.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> or <paramref name="propertyOrFieldName" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
                    No property or field named <paramref name="propertyOrFieldName" /> is defined in <paramref name="expression" />.Type or its base types.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an expression that has a constant value of type <see cref="T:System.Linq.Expressions.Expression" />.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.
                </returns>
      <param name="expression">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise rightright-shift operation.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.
                </returns>
      <param name="left">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.
                </param>
      <param name="right">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The right-shift operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift operation. The implementing method can be specified.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.
                </returns>
      <param name="left">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.
                </param>
      <param name="right">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.
                </param>
      <param name="method">
                    A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the right-shift operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that does not have overflow checking.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.
                </returns>
      <param name="left">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.
                </param>
      <param name="right">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The subtraction operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that does not have overflow checkingchecking. The implementing method can be specified.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.
                </returns>
      <param name="left">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.
                </param>
      <param name="right">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.
                </param>
      <param name="method">
                    A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the subtraction operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that has overflow checking.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.
                </returns>
      <param name="left">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.
                </param>
      <param name="right">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The subtraction operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that has overflow checking. .The implementing method can be specified.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.
                </returns>
      <param name="left">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.
                </param>
      <param name="right">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.
                </param>
      <param name="method">
                    A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the subtraction operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ToString">
      <summary>
                    Returns a textual representation of the <see cref="T:System.Linq.Expressions.Expression" />.
                </summary>
      <returns>
                    A textual representation of the <see cref="T:System.Linq.Expressions.Expression" />.
                </returns>
    </member>
    <member name="P:System.Linq.Expressions.Expression.Type">
      <summary>
                    Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.
                </summary>
      <returns>
                    The <see cref="T:System.Type" /> that represents the static type of the expression.
                </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an explicit reference or boxing conversion where null is supplied if the conversion fails.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.TypeAs" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.
                </returns>
      <param name="expression">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.
                </param>
      <param name="type">
                    A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> or <paramref name="type" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> for which the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property is equal to <see cref="F:System.Linq.Expressions.ExpressionType.TypeIs" /> and for which the <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> and <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> properties are set to the specified values.
                </returns>
      <param name="expression">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> property equal to.
                </param>
      <param name="type">
                    A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> or <paramref name="type" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a unary plus operation.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.
                </returns>
      <param name="expression">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The unary plus operator is not defined for <paramref name="expression" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
                    Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a unary plus operation. The implementing method can be specified.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.
                </returns>
      <param name="expression">
                    An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.
                </param>
      <param name="method">
                    A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly one argument.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the unary plus operator is not defined for <paramref name="expression" />.Type.
                
                    -or-
                <paramref name="expression" />.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method" />.
                </exception>
    </member>
    <member name="T:System.Linq.Expressions.Expression`1">
      <summary>
                    Represents a strongly typed lambda expression as a data structure in the form of an expression tree. This class cannot be inherited.
                </summary>
      <typeparam name="TDelegate">
                    The type of the delegate that the <see cref="T:System.Linq.Expressions.Expression`1" /> represents.
                </typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile">
      <summary>
                    Compiles the lambda expression described by the expression tree into executable code.
                </summary>
      <returns>
                    A delegate of type <paramref name="TDelegate" /> that represents the lambda expression described by the <see cref="T:System.Linq.Expressions.Expression`1" />.
                </returns>
    </member>
    <member name="T:System.Linq.Expressions.ExpressionType">
      <summary>
                    Describes the node types for the nodes of an expression tree.
                </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Add">
      <summary>
                    A node that represents arithmetic addition without overflow checking.
                </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddChecked">
      <summary>
                    A node that represents arithmetic addition with overflow checking.
                </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.And">
      <summary>
                    A node that represents a bitwise AND operation.
                </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AndAlso">
      <summary>
                    A node that represents a short-circuiting conditional AND operation.
                </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayLength">
      <summary>
                    A node that represents getting the length of a one-dimensional array.
                </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayIndex">
      <summary>
                    A node that represents indexing into a one-dimensional array.
                </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Call">
      <summary>
                    A node that represents a method call.
                </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Coalesce">
      <summary>
                    A node that represents a null coalescing operation.
                </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Conditional">
      <summary>
                    A node that represents a conditional operation.
                </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Constant">
      <summary>
                    A node that represents an expression that has a constant value.
                </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Convert">
      <summary>
                    A node that represents a cast or conversion operation. If the operation is a numeric conversion, it overflows silently if the converted value does not fit the target type.
                </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ConvertChecked">
      <summary>
                    A node that represents a cast or conversion operation. If the operation is a numeric conversion, an exception is thrown if the converted value does not fit the target type.
                </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Divide">
      <summary>
                    A node that represents arithmetic division.
                </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Equal">
      <summary>
                    A node that represents an equality comparison.
                </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOr">
      <summary>
                    A node that represents a bitwise XOR operation.
                </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThan">
      <summary>
                    A node that represents a "greater than" numeric comparison.
                </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual">
      <summary>
                    A node that represents a "greater than or equal" numeric comparison.
                </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Invoke">
      <summary>
                    A node that represents applying a delegate or lambda expression to a list of argument expressions.
                </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Lambda">
      <summary>
                    A node that represents a lambda expression.
                </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LeftShift">
      <summary>
                    A node that represents a bitwise left-shift operation.
                </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThan">
      <summary>
                    A node that represents a "less than" numeric comparison.
                </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual">
      <summary>
                    A node that represents a "less than or equal" numeric comparison.
                </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ListInit">
      <summary>
                    A node that represents creating a new <see cref="T:System.Collections.IEnumerable" /> object and initializing it from a list of elements.
                </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberAccess">
      <summary>
                    A node that represents reading from a field or property.
                </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberInit">
      <summary>
                    A node that represents creating a new object and initializing one or more of its members.
                </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Modulo">
      <summary>
                    A node that represents an arithmetic remainder operation.
                </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Multiply">
      <summary>
                    A node that represents arithmetic multiplication without overflow checking.
                </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyChecked">
      <summary>
                    A node that represents arithmetic multiplication with overflow checking.
                </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Negate">
      <summary>
                    A node that represents an arithmetic negation operation.
                </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.UnaryPlus">
      <summary>
                    A node that represents a unary plus operation. The result of a predefined unary plus operation is simply the value of the operand, but user-defined implementations may have non-trivial results.
                </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NegateChecked">
      <summary>
                    A node that represents an arithmetic negation operation that has overflow checking.
                </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.New">
      <summary>
                    A node that represents calling a constructor to create a new object.
                </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayInit">
      <summary>
                    A node that represents creating a new one-dimensional array and initializing it from a list of elements.
                </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayBounds">
      <summary>
                    A node that represents creating a new array where the bounds for each dimension are specified.
                </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Not">
      <summary>
                    A node that represents a bitwise complement operation.
                </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NotEqual">
      <summary>
                    A node that represents an inequality comparison.
                </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Or">
      <summary>
                    A node that represents a bitwise OR operation.
                </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OrElse">
      <summary>
                    A node that represents a short-circuiting conditional OR operation.
                </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Parameter">
      <summary>
                    A node that represents a reference to a parameter defined in the context of the expression.
                </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Power">
      <summary>
                    A node that represents raising a number to a power.
                </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Quote">
      <summary>
                    A node that represents an expression that has a constant value of type <see cref="T:System.Linq.Expressions.Expression" />. A <see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> node can contain references to parameters defined in the context of the expression it represents.
                </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RightShift">
      <summary>
                    A node that represents a bitwise right-shift operation.
                </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Subtract">
      <summary>
                    A node that represents arithmetic subtraction without overflow checking.
                </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractChecked">
      <summary>
                    A node that represents arithmetic subtraction with overflow checking.
                </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeAs">
      <summary>
                    A node that represents an explicit reference or boxing conversion where null is supplied if the conversion fails.
                </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeIs">
      <summary>
                    A node that represents a type test.
                </summary>
    </member>
    <member name="T:System.Linq.Expressions.InvocationExpression">
      <summary>
                    Represents an expression that applies a delegate or lambda expression to a list of argument expressions.
                </summary>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Arguments">
      <summary>
                    Gets the arguments that the delegate is applied to.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Linq.Expressions.Expression" /> objects which represents the arguments that the delegate is applied to.
                </returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Expression">
      <summary>
                    Gets the delegate or lambda expression to be applied.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.Expressions.Expression" /> that represents the delegate to be applied.
                </returns>
    </member>
    <member name="T:System.Linq.Expressions.LambdaExpression">
      <summary>
                    Describes a lambda expression.
                </summary>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Body">
      <summary>
                    Gets the body of the lambda expression.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.Expressions.Expression" /> that represents the body of the lambda expression.
                </returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile">
      <summary>
                    Produces a delegate that represents the lambda expression.
                </summary>
      <returns>
                    A <see cref="T:System.Delegate" /> that, when it is executed, has the behavior described by the semantics of the <see cref="T:System.Linq.Expressions.LambdaExpression" />.
                </returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Parameters">
      <summary>
                    Gets the parameters of the lambda expression.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects that represent the parameters of the lambda expression.
                </returns>
    </member>
    <member name="T:System.Linq.Expressions.ListInitExpression">
      <summary>
                    Represents a constructor call that has a collection initializer.
                </summary>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.Initializers">
      <summary>
                    Gets the element initializers that are used to initialize a collection.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Linq.Expressions.ElementInit" /> objects which represent the elements that are used to initialize the collection.
                </returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.NewExpression">
      <summary>
                    Gets the expression that contains a call to the constructor of a collection type.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.NewExpression" /> that represents the call to the constructor of a collection type.
                </returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberAssignment">
      <summary>
                    Represents initializing a field or property of a newly created object.
                </summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberAssignment.Expression">
      <summary>
                    Gets the expression to assign to the field or property.
                </summary>
      <returns>
                    The <see cref="T:System.Linq.Expressions.Expression" /> that represents the value to assign to the field or property.
                </returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberBinding">
      <summary>
                    Provides the base class from which the classes that represent bindings that are used to initialize members of a newly created object derive.
                </summary>
    </member>
    <member name="M:System.Linq.Expressions.MemberBinding.#ctor(System.Linq.Expressions.MemberBindingType,System.Reflection.MemberInfo)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Linq.Expressions.MemberBinding" /> class.
                </summary>
      <param name="type">
                    The <see cref="T:System.Linq.Expressions.MemberBindingType" /> that discriminates the type of binding that is represented.
                </param>
      <param name="member">
                    The <see cref="T:System.Reflection.MemberInfo" /> that represents a field or property to be initialized.
                </param>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.BindingType">
      <summary>
                    Gets the type of binding that is represented.
                </summary>
      <returns>
                    One of the <see cref="T:System.Linq.Expressions.MemberBindingType" /> values.
                </returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.Member">
      <summary>
                    Gets the field or property to be initialized.
                </summary>
      <returns>
                    The <see cref="T:System.Reflection.MemberInfo" /> that represents the field or property to be initialized.
                </returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberBinding.ToString">
      <summary>
                    Returns a textual representation of the <see cref="T:System.Linq.Expressions.MemberBinding" />.
                </summary>
      <returns>
                    A textual representation of the <see cref="T:System.Linq.Expressions.MemberBinding" />.
                </returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberBindingType">
      <summary>
                    Describes the binding types that are used in <see cref="T:System.Linq.Expressions.MemberInitExpression" /> objects.
                </summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.Assignment">
      <summary>
                    A binding that represents initializing a member with the value of an expression.
                </summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.MemberBinding">
      <summary>
                    A binding that represents recursively initializing members of a member.
                </summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.ListBinding">
      <summary>
                    A binding that represents initializing a member of type <see cref="T:System.Collections.IList" /> or <see cref="T:System.Collections.Generic.ICollection`1" /> from a list of elements.
                </summary>
    </member>
    <member name="T:System.Linq.Expressions.MemberExpression">
      <summary>
                    Represents accessing a field or property.
                </summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Expression">
      <summary>
                    Gets the containing object of the field or property.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.Expressions.Expression" /> that represents the containing object of the field or property.
                </returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Member">
      <summary>
                    Gets the field or property to be accessed.
                </summary>
      <returns>
                    The <see cref="T:System.Reflection.MemberInfo" /> that represents the field or property to be accessed.
                </returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberInitExpression">
      <summary>
                    Represents calling a constructor and initializing one or more members of the new object.
                </summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.Bindings">
      <summary>
                    Gets the bindings that describe how to initialize the members of the newly created object.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Linq.Expressions.MemberBinding" /> objects which describe how to initialize the members.
                </returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.NewExpression">
      <summary>
                    Gets the expression that represents the constructor call.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.NewExpression" /> that represents the constructor call.
                </returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberListBinding">
      <summary>
                    Represents initializing the elements of a collection member of a newly created object.
                </summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberListBinding.Initializers">
      <summary>
                    Gets the element initializers for initializing a collection member of a newly created object.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Linq.Expressions.ElementInit" /> objects to initialize a collection member with.
                </returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberMemberBinding">
      <summary>
                    Represents initializing members of a member of a newly created object.
                </summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberMemberBinding.Bindings">
      <summary>
                    Gets the bindings that describe how to initialize the members of a member.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Linq.Expressions.MemberBinding" /> objects that describe how to initialize the members of the member.
                </returns>
    </member>
    <member name="T:System.Linq.Expressions.MethodCallExpression">
      <summary>
                    Represents calling a method.
                </summary>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Arguments">
      <summary>
                    Gets the arguments to the called method.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Linq.Expressions.Expression" /> objects which represent the arguments to the called method.
                </returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Method">
      <summary>
                    Gets the called method.
                </summary>
      <returns>
                    The <see cref="T:System.Reflection.MethodInfo" /> that represents the called method.
                </returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Object">
      <summary>
                    Gets the receiving object of the method.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.Expressions.Expression" /> that represents the receiving object of the method.
                </returns>
    </member>
    <member name="T:System.Linq.Expressions.NewArrayExpression">
      <summary>
                    Represents creating a new array and possibly initializing the elements of the new array.
                </summary>
    </member>
    <member name="P:System.Linq.Expressions.NewArrayExpression.Expressions">
      <summary>
                    Gets the bounds of the array if the value of the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property is <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" />, or the values to initialize the elements of the new array if the value of the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property is <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" />.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Linq.Expressions.Expression" /> objects which represent either the bounds of the array or the initializationation values.
                </returns>
    </member>
    <member name="T:System.Linq.Expressions.NewExpression">
      <summary>
                    Represents a constructor call.
                </summary>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Arguments">
      <summary>
                    Gets the arguments to the constructor.
                </summary>
      <returns>
                    A collection of <see cref="T:System.Linq.Expressions.Expression" /> objects that represent the arguments to the constructor.
                </returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Constructor">
      <summary>
                    Gets the called constructor.
                </summary>
      <returns>
                    The <see cref="T:System.Reflection.ConstructorInfo" /> that represents the called constructor.
                </returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Members">
      <summary>
                    Gets the members that can retrieve the values of the fields that were initialized with constructor arguments.
                </summary>
      <returns>
                    A collection of <see cref="T:System.Reflection.MemberInfo" /> objects that represent the members that can retrieve the values of the fields that were initialized with constructor arguments.
                </returns>
    </member>
    <member name="T:System.Linq.Expressions.ParameterExpression">
      <summary>
                    Represents a named parameter expression.
                </summary>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.Name">
      <summary>
                    Gets the name of the parameter.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that contains the name of the parameter.
                </returns>
    </member>
    <member name="T:System.Linq.Expressions.TypeBinaryExpression">
      <summary>
                    Represents an operation between an expression and a type.
                </summary>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.Expression">
      <summary>
                    Gets the expression operand of a type test operation.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.Expressions.Expression" /> that represents the expression operand of a type test operation.
                </returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand">
      <summary>
                    Gets the type operand of a type test operation.
                </summary>
      <returns>
                    A <see cref="T:System.Type" /> that represents the type operand of a type test operation.
                </returns>
    </member>
    <member name="T:System.Linq.Expressions.UnaryExpression">
      <summary>
                    Represents an expression that has a unary operator.
                </summary>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLifted">
      <summary>
                    Gets a value that indicates whether the expression tree node represents a lifted call to an operator.
                </summary>
      <returns>true if the node represents a lifted call; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLiftedToNull">
      <summary>
                    Gets a value that indicates whether the expression tree node represents a lifted call to an operator whose return type is lifted to a nullable type.
                </summary>
      <returns>true if the operator's return type is lifted to a nullable type; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Method">
      <summary>
                    Gets the implementing method for the unary operation.
                </summary>
      <returns>
                    The <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.
                </returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Operand">
      <summary>
                    Gets the operand of the unary operation.
                </summary>
      <returns>
                    An <see cref="T:System.Linq.Expressions.Expression" /> that represents the operand of the unary operation.
                </returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ExecutionScope">
      <summary>
                    Represents the runtime state of a dynamically generated method.
                </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExecutionScope.CreateDelegate(System.Int32,System.Object[])">
      <summary>
                    Creates a delegate that can be used to execute a dynamically generated method.
                </summary>
      <returns>
                    A <see cref="T:System.Delegate" /> that can execute a dynamically generated method.
                </returns>
      <param name="indexLambda">
                    The index of the object that stores information about associated lambda expression of the dynamic method.
                </param>
      <param name="locals">
                    An array that contains the hoisted local variables from the parent context.
                </param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExecutionScope.CreateHoistedLocals">
      <summary>
                    Creates an array to store the hoisted local variables.
                </summary>
      <returns>
                    An array to store hoisted local variables.
                </returns>
    </member>
    <member name="F:System.Runtime.CompilerServices.ExecutionScope.Globals">
      <summary>
                    Represents the non-trivial constants and locally executable expressions that are referenced by a dynamically generated method.
                </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExecutionScope.IsolateExpression(System.Linq.Expressions.Expression,System.Object[])">
      <summary>
                    Frees a specified expression tree of external parameter references by replacing the parameter with its current value.
                </summary>
      <returns>
                    An expression tree that does not contain external parameter references.
                </returns>
      <param name="expression">
                    An expression tree to free of external parameter references.
                </param>
      <param name="locals">
                    An array that contains the hoisted local variables.
                </param>
    </member>
    <member name="F:System.Runtime.CompilerServices.ExecutionScope.Locals">
      <summary>
                    Represents the hoisted local variables from the parent context.
                </summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.ExecutionScope.Parent">
      <summary>
                    Represents the execution scope of the calling delegate.
                </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ExtensionAttribute">
      <summary>
                    Indicates that a method is an extension method, or that a class or assembly contains extension methods.
                </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExtensionAttribute.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.ExtensionAttribute" /> class. 
                </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IStrongBox">
      <summary>
                    Defines a property for accessing the value that an object references.
                </summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IStrongBox.Value">
      <summary>
                    Gets or sets the value that an object references.
                </summary>
      <returns>
                    The value that the object references.
                </returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.StrongBox`1">
      <summary>
                    Holds a reference to a value.
                </summary>
      <typeparam name="T">
                    The type of the value that the <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> references.
                </typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.StrongBox`1.#ctor(`0)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> class by using the supplied value. 
                </summary>
      <param name="value">
                    A value that the <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> will reference.
                </param>
    </member>
    <member name="P:System.Runtime.CompilerServices.StrongBox`1.System#Runtime#CompilerServices#IStrongBox#Value">
      <summary>
                    Gets or sets the value that the <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> references.
                </summary>
      <returns>
                    The value that the <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> references.
                </returns>
    </member>
    <member name="F:System.Runtime.CompilerServices.StrongBox`1.Value">
      <summary>
                    Represents the value that the <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> references.
                </summary>
    </member>
    <member name="T:System.Security.Cryptography.Aes">
      <summary>
                    Represents the abstract base class from which all implementations of the Advanced Encryption Standard (AES) must inherit. 
                </summary>
    </member>
    <member name="M:System.Security.Cryptography.Aes.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Security.Cryptography.Aes" /> class. 
                </summary>
    </member>
    <member name="T:System.Security.Cryptography.AesManaged">
      <summary>
                    Provides a managed implementation of the Advanced Encryption Standard (AES) symmetric algorithm. 
                </summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Security.Cryptography.AesManaged" /> class.
                </summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateDecryptor">
      <summary>
                    Creates a symmetric decryptor object using the current key and initialization vector (IV).
                </summary>
      <returns>
                    A symmetric decryptor object.
                </returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>
                    Creates a symmetric decryptor object using the specified key and initialization vector (IV).
                </summary>
      <returns>
                    A symmetric decryptor object.
                </returns>
      <param name="key">
                    The secret key to use for the symmetric algorithm.
                </param>
      <param name="iv">
                    The initialization vector to use for the symmetric algorithm.
                </param>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateEncryptor">
      <summary>
                    Creates a symmetric encryptor object using the current key and initialization vector (IV).
                </summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>
                    Creates a symmetric encryptor object using the specified key and initialization vector (IV).
                </summary>
      <returns>
                    A symmetric encryptor object.
                </returns>
      <param name="key">
                    The secret key to use for the symmetric algorithm.
                </param>
      <param name="iv">
                    The initialization vector to use for the symmetric algorithm.
                </param>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.GenerateIV">
      <summary>
                    Generates a random initialization vector (IV) to use for the symmetric algorithm.
                </summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.GenerateKey">
      <summary>
                    Generates a random key to use for the symmetric algorithm.
                </summary>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.IV">
      <summary>
                    Gets or sets the initialization vector (IV) to use for the symmetric algorithm.
                </summary>
      <returns>
                    The initialization vector to use for the symmetric algorithm
                </returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Key">
      <summary>
                    Gets or sets the secret key used for the symmetric algorithm.
                </summary>
      <returns>
                    The key for the symmetric algorithm.
                </returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.KeySize">
      <summary>
                    Gets or sets the size, in bits, of the secret key used for the symmetric algorithm. 
                </summary>
      <returns>
                    The size, in bits, of the key used by the symmetric algorithm.
                </returns>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\2.0.31005.0\ReferenceAssemblies\system.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System</name>
  </assembly>
  <members>
    <member name="T:System.FileStyleUriParser">
      <summary>
                    A customizable parser based on the File scheme.
                </summary>
    </member>
    <member name="M:System.FileStyleUriParser.#ctor">
      <summary>
                    Creates a customizable parser based on the File scheme.
                </summary>
    </member>
    <member name="T:System.FtpStyleUriParser">
      <summary>
                    A customizable parser based on the File Transfer Protocol (FTP) scheme.
                </summary>
    </member>
    <member name="M:System.FtpStyleUriParser.#ctor">
      <summary>
                    Creates a customizable parser based on the File Transfer Protocol (FTP) scheme.
                </summary>
    </member>
    <member name="T:System.GenericUriParser">
      <summary>
                    A customizable parser for a hierarchical URI.
                </summary>
    </member>
    <member name="M:System.GenericUriParser.#ctor(System.GenericUriParserOptions)">
      <summary>
                    Create a customizable parser for a hierarchical URI.
                </summary>
      <param name="options">
                    Specify the options for this <see cref="T:System.GenericUriParser" />.
                </param>
    </member>
    <member name="T:System.GenericUriParserOptions">
      <summary>
                    Specifies options for a <see cref="T:System.UriParser" />.
                </summary>
    </member>
    <member name="F:System.GenericUriParserOptions.Default">
      <summary>
                    The parser:
                </summary>
    </member>
    <member name="F:System.GenericUriParserOptions.GenericAuthority">
      <summary>
                    The parser allows a registry-based authority.
                </summary>
    </member>
    <member name="F:System.GenericUriParserOptions.AllowEmptyAuthority">
      <summary>
                    The parser allows a URI with no authority.
                </summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoUserInfo">
      <summary>
                    The scheme does not define a user information part.
                </summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoPort">
      <summary>
                    The scheme does not define a port.
                </summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoQuery">
      <summary>
                    The scheme does not define a query part.
                </summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoFragment">
      <summary>
                    The scheme does not define a fragment part.
                </summary>
    </member>
    <member name="F:System.GenericUriParserOptions.DontConvertPathBackslashes">
      <summary>
                    The parser does not convert back slashes into forward slashes.
                </summary>
    </member>
    <member name="F:System.GenericUriParserOptions.DontCompressPath">
      <summary>
                    The parser does not canonicalize the URI.
                </summary>
    </member>
    <member name="F:System.GenericUriParserOptions.DontUnescapePathDotsAndSlashes">
      <summary>
                    The parser does not unescape path dots, forward slashes, or back slashes.
                </summary>
    </member>
    <member name="F:System.GenericUriParserOptions.Idn">
      <summary>
                    The parser supports Internationalized Domain Name (IDN) parsing (IDN) of host names. Whether IDN is used is dictated by configuration values. See the Remarks for more information.
                </summary>
    </member>
    <member name="F:System.GenericUriParserOptions.IriParsing">
      <summary>
                    The parser supports the parsing rules specified in RFC 3987 for International Resource Identifiers (IRI). Whether IRI is used is dictated by configuration values. See the Remarks for more information.
                </summary>
    </member>
    <member name="T:System.HttpStyleUriParser">
      <summary>
                    A customizable parser based on the HTTP scheme.
                </summary>
    </member>
    <member name="M:System.HttpStyleUriParser.#ctor">
      <summary>
                    Create a customizable parser based on the HTTP scheme.
                </summary>
    </member>
    <member name="T:System.Uri">
      <summary>
                    Provides an object representation of a uniform resource identifier (URI) and easy access to the parts of the URI.
                </summary>
    </member>
    <member name="M:System.Uri.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Uri" /> class with the specified URI.
                </summary>
      <param name="uriString">
                    A URI. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriString" /> is null. 
                </exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="uriString" /> is empty.
                
                    -or- 
                
                    The scheme specified in <paramref name="uriString" /> is not correctly formed. See <see cref="M:System.Uri.CheckSchemeName(System.String)" />.
                
                    -or- 
                <paramref name="uriString" /> contains too many slashes.
                
                    -or- 
                
                    The password specified in <paramref name="uriString" /> is not valid.
                
                    -or- 
                
                    The host name specified in <paramref name="uriString" /> is not valid.
                
                    -or- 
                
                    The file name specified in <paramref name="uriString" /> is not valid. 
                
                    -or- 
                
                    The user name specified in <paramref name="uriString" /> is not valid.
                
                    -or- 
                
                    The host or authority name specified in <paramref name="uriString" /> cannot be terminated by backslashes.
                
                    -or- 
                
                    The port number specified in <paramref name="uriString" /> is not valid or cannot be parsed.
                
                    -or- 
                
                    The length of <paramref name="uriString" /> exceeds 65534 characters.
                
                    -or- 
                
                    The length of the scheme specified in <paramref name="uriString" /> exceeds 1023 characters.
                
                    -or- 
                
                    There is an invalid character sequence in <paramref name="uriString" />.
                
                    -or- 
                
                    The MS-DOS path specified in <paramref name="uriString" /> must start with c:\\.
                </exception>
    </member>
    <member name="M:System.Uri.#ctor(System.String,System.UriKind)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Uri" /> class with the specified URI. This constructor allows you to specify if the URI string is a relative URI, absolute URI, or is indeterminate.
                </summary>
      <param name="uriString">
                    A string that identifies the resource to be represented by the <see cref="T:System.Uri" /> instance.
                </param>
      <param name="uriKind">
                    Specifies whether the URI string is a relative URI, absolute URI, or is indeterminate.
                </param>
      <exception cref="T:System.UriFormatException">
        <paramref name="uriString" /> contains a relative URI and <paramref name="uriKind" /> is <see cref="F:System.UriKind.Absolute" />.
                
                    or
                <paramref name="uriString" /> contains an absolute URI and <paramref name="uriKind" /> is <see cref="F:System.UriKind.Relative" />.
                </exception>
    </member>
    <member name="M:System.Uri.#ctor(System.Uri,System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Uri" /> class based on the specified base URI and relative URI string.
                </summary>
      <param name="baseUri">
                    The base URI. 
                </param>
      <param name="relativeUri">
                    The relative URI to add to the base URI. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriString" /> is null. 
                </exception>
      <exception cref="T:System.UriFormatException">
                    The URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is empty or contains only spaces.
                
                    -or- 
                
                    The scheme specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid.
                
                    -or- 
                
                    The URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> contains too many slashes.
                
                    -or- 
                
                    The password specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid.
                
                    -or- 
                
                    The host name specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid.
                
                    -or- 
                
                    The file name specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid. 
                
                    -or- 
                
                    The user name specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid.
                
                    -or- 
                
                    The host or authority name specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> cannot be terminated by backslashes.
                
                    -or- 
                
                    The port number specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid or cannot be parsed.
                
                    -or- 
                
                    The length of the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> exceeds 65534 characters.
                
                    -or- 
                
                    The length of the scheme specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> exceeds 1023 characters.
                
                    -or- 
                
                    There is an invalid character sequence in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" />.
                
                    -or- 
                
                    The MS-DOS path specified in <paramref name="uriString" /> must start with c:\\.
                </exception>
    </member>
    <member name="M:System.Uri.#ctor(System.Uri,System.Uri)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Uri" /> class based on the combination of a specified base <see cref="T:System.Uri" /> instance and a relative <see cref="T:System.Uri" /> instance.
                </summary>
      <param name="baseUri">
                    An absolute <see cref="T:System.Uri" /> that is the base for the new <see cref="T:System.Uri" /> instance. 
                </param>
      <param name="relativeUri">
                    A relative <see cref="T:System.Uri" /> instance that is combined with <paramref name="baseUri" />. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="baseUri" /> is null.
                
                    -or- 
                <paramref name="baseUri" /> is not an absolute <see cref="T:System.Uri" /> instance. 
                </exception>
      <exception cref="T:System.UriFormatException">
                    The URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is empty or contains only spaces.
                
                    -or- 
                
                    The scheme specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid.
                
                    -or- 
                
                    The URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> contains too many slashes.
                
                    -or- 
                
                    The password specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid.
                
                    -or- 
                
                    The host name specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid.
                
                    -or- 
                
                    The file name specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid. 
                
                    -or- 
                
                    The user name specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid.
                
                    -or- 
                
                    The host or authority name specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> cannot be terminated by backslashes.
                
                    -or- 
                
                    The port number specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid or cannot be parsed.
                
                    -or- 
                
                    The length of the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> exceeds 65534 characters.
                
                    -or- 
                
                    The length of the scheme specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> exceeds 1023 characters.
                
                    -or- 
                
                    There is an invalid character sequence in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" />.
                
                    -or- 
                
                    The MS-DOS path specified in <paramref name="uriString" /> must start with c:\\.
                </exception>
    </member>
    <member name="P:System.Uri.AbsolutePath">
      <summary>
                    Gets the absolute path of the URI.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> containing the absolute path to the resource.
                </returns>
    </member>
    <member name="P:System.Uri.AbsoluteUri">
      <summary>
                    Gets the absolute URI.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> containing the entire URI.
                </returns>
    </member>
    <member name="M:System.Uri.CheckSchemeName(System.String)">
      <summary>
                    Determines whether the specified scheme name is valid.
                </summary>
      <returns>
                    A <see cref="T:System.Boolean" /> value that is true if the scheme name is valid; otherwise, false.
                </returns>
      <param name="schemeName">
                    The scheme name to validate. 
                </param>
    </member>
    <member name="M:System.Uri.Compare(System.Uri,System.Uri,System.UriComponents,System.UriFormat,System.StringComparison)">
      <summary>
                    Compares the specified parts of two URIs using the specified comparison rules.
                </summary>
      <returns>
                    An <see cref="T:System.Int32" /> value that indicates the lexical relationship between the compared <see cref="T:System.Uri" /> components.
                
                    Value
                
                    Meaning
                
                    Less than zero
                <paramref name="uri1" /> is less than <paramref name="uri2" />.
                
                    Zero
                <paramref name="uri1" /> equals <paramref name="uri2" />.
                
                    Greater than zero
                <paramref name="uri1" /> is greater than <paramref name="uri2" />.
                </returns>
      <param name="uri1">
                    The first <see cref="T:System.Uri" />.
                </param>
      <param name="uri2">
                    The second <see cref="T:System.Uri" />.
                </param>
      <param name="partsToCompare">
                    A bitwise combination of the <see cref="T:System.UriComponents" /> values that specifies the parts of <paramref name="uri1" /> and <paramref name="uri2" /> to compare.
                </param>
      <param name="compareFormat">
                    One of the <see cref="T:System.UriFormat" /> values that specifies the character escaping used when the URI components are compared.
                </param>
      <param name="comparisonType">
                    One of the <see cref="T:System.StringComparison" /> values.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.
                </exception>
    </member>
    <member name="P:System.Uri.DnsSafeHost">
      <summary>
                    Gets an unescaped host name that is safe to use for DNS resolution.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that contains the unescaped host part of the URI that is suitable for DNS resolution; or the original unescaped host string, if it is already suitable for resolution.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    This instance represents a relative URI, and this property is valid only for absolute URIs. 
                </exception>
    </member>
    <member name="M:System.Uri.Equals(System.Object)">
      <summary>
                    Compares two <see cref="T:System.Uri" /> instances for equality.
                </summary>
      <returns>
                    A <see cref="T:System.Boolean" /> value that is true if the two instances represent the same URI; otherwise, false.
                </returns>
      <param name="comparand">
                    The <see cref="T:System.Uri" /> instance or a URI identifier to compare with the current instance. 
                </param>
    </member>
    <member name="M:System.Uri.EscapeDataString(System.String)">
      <summary>
                    Converts a string to its escaped representation.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that contains the escaped representation of <paramref name="stringToEscape" />.
                </returns>
      <param name="stringToEscape">
                    The string to escape.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringToEscape" /> is null. 
                </exception>
      <exception cref="T:System.UriFormatException">
                    The length of <paramref name="stringToEscape" /> exceeds 32766 characters.
                </exception>
    </member>
    <member name="M:System.Uri.EscapeUriString(System.String)">
      <summary>
                    Converts a URI string to its escaped representation.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that contains the escaped representation of <paramref name="stringToEscape" />.
                </returns>
      <param name="stringToEscape">
                    The string to escape.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringToEscape" /> is null. 
                </exception>
      <exception cref="T:System.UriFormatException">
                    The length of <paramref name="stringToEscape" /> exceeds 32766 characters.
                </exception>
    </member>
    <member name="P:System.Uri.Fragment">
      <summary>
                    Gets the escaped URI fragment.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that contains any URI fragment information.
                </returns>
    </member>
    <member name="M:System.Uri.FromHex(System.Char)">
      <summary>
                    Gets the decimal value of a hexadecimal digit.
                </summary>
      <returns>
                    An <see cref="T:System.Int32" /> value that contains a number from 0 to 15 that corresponds to the specified hexadecimal digit.
                </returns>
      <param name="digit">
                    The hexadecimal digit (0-9, a-f, A-F) to convert. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="digit" /> is not a valid hexadecimal digit (0-9, a-f, A-F). 
                </exception>
    </member>
    <member name="M:System.Uri.GetComponents(System.UriComponents,System.UriFormat)">
      <summary>
                    Gets the specified components of the current instance using the specified escaping for special characters.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that contains the components.
                </returns>
      <param name="components">
                    A bitwise combination of the <see cref="T:System.UriComponents" /> values that specifies which parts of the current instance to return to the caller.
                </param>
      <param name="format">
                    One of the <see cref="T:System.UriFormat" /> values that controls how special characters are escaped. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="uriComponents" /> is not a combination of valid <see cref="T:System.UriComponents" /> values.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The current <see cref="T:System.Uri" /> is not an absolute URI. Relative URIs cannot be used with this method.
                </exception>
    </member>
    <member name="M:System.Uri.GetHashCode">
      <summary>
                    Gets the hash code for the URI.
                </summary>
      <returns>
                    An <see cref="T:System.Int32" /> containing the hash value generated for this URI.
                </returns>
    </member>
    <member name="P:System.Uri.Host">
      <summary>
                    Gets the host component of this instance.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that contains the host name. This is usually the DNS host name or IP address of the server.
                </returns>
    </member>
    <member name="P:System.Uri.IsAbsoluteUri">
      <summary>
                    Gets whether the <see cref="T:System.Uri" /> instance is absolute.
                </summary>
      <returns>
                    A <see cref="T:System.Boolean" /> value that is true if the <see cref="T:System.Uri" /> instance is absolute; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Uri.IsBaseOf(System.Uri)">
      <summary>
                    Determines whether the current <see cref="T:System.Uri" /> instance is a base of the specified <see cref="T:System.Uri" /> instance.
                </summary>
      <returns>true if the current <see cref="T:System.Uri" /> instance is a base of <paramref name="uri" />; otherwise, false.
                </returns>
      <param name="uri">
                    The specified <see cref="T:System.Uri" /> instance to test. 
                </param>
    </member>
    <member name="M:System.Uri.IsHexDigit(System.Char)">
      <summary>
                    Determines whether a specified character is a valid hexadecimal digit.
                </summary>
      <returns>
                    A <see cref="T:System.Boolean" /> value that is true if the character is a valid hexadecimal digit; otherwise false.
                </returns>
      <param name="character">
                    The character to validate. 
                </param>
    </member>
    <member name="P:System.Uri.IsUnc">
      <summary>
                    Gets whether the specified <see cref="T:System.Uri" /> is a universal naming convention (UNC) path.
                </summary>
      <returns>
                    A <see cref="T:System.Boolean" /> value that is true if the <see cref="T:System.Uri" /> is a UNC path; otherwise, false.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    This instance represents a relative URI, and this property is valid only for absolute URIs. 
                </exception>
    </member>
    <member name="M:System.Uri.IsWellFormedUriString(System.String,System.UriKind)">
      <summary>
                    Indicates whether the string is well-formed by attempting to construct a URI with the string and ensures that the string does not require further escaping.
                </summary>
      <returns>
                    A <see cref="T:System.Boolean" /> value that is true if the string was well-formed in accordance with RFC 3986; else false.
                </returns>
      <param name="uriString">
                    A URI.
                </param>
      <param name="uriKind">
                    The type of the URI in <paramref name="uriString" />.
                </param>
    </member>
    <member name="P:System.Uri.LocalPath">
      <summary>
                    Gets a local operating-system representation of a file name.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that contains the local operating-system representation of a file name.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    This instance represents a relative URI, and this property is valid only for absolute URIs. 
                </exception>
    </member>
    <member name="M:System.Uri.MakeRelativeUri(System.Uri)">
      <summary>
                    Determines the difference between two <see cref="T:System.Uri" /> instances.
                </summary>
      <returns>
                    If the hostname and scheme of this URI instance and <paramref name="toUri" /> are the same, then this method returns a relative <see cref="T:System.Uri" /> that, when appended to the current URI instance, yields <paramref name="toUri" />.
                
                    If the hostname or scheme is different, then this method returns a <see cref="T:System.Uri" />  that represents the <paramref name="toUri" /> parameter.
                </returns>
      <param name="uri">
                    The URI to compare to the current URI.
                </param>
      <exception cref="T:System.InvalidOperationException">
                    This instance represents a relative URI, and this property is valid only for absolute URIs. 
                </exception>
    </member>
    <member name="M:System.Uri.op_Equality(System.Uri,System.Uri)">
      <summary>
                    Determines whether two <see cref="T:System.Uri" /> instances have the same value.
                </summary>
      <returns>
                    A <see cref="T:System.Boolean" /> value that is true if the <see cref="T:System.Uri" /> instances are equivalent; otherwise, false.
                </returns>
      <param name="uri1">
                    A <see cref="T:System.Uri" /> instance to compare with <paramref name="uri2" />. 
                </param>
      <param name="uri2">
                    A <see cref="T:System.Uri" /> instance to compare with <paramref name="uri1" />. 
                </param>
    </member>
    <member name="M:System.Uri.op_Inequality(System.Uri,System.Uri)">
      <summary>
                    Determines whether two <see cref="T:System.Uri" /> instances do not have the same value.
                </summary>
      <returns>
                    A <see cref="T:System.Boolean" /> value that is true if the two <see cref="T:System.Uri" /> instances are not equal; otherwise, false. If either parameter is null, this method returns true.
                </returns>
      <param name="uri1">
                    A <see cref="T:System.Uri" /> instance to compare with <paramref name="uri2" />. 
                </param>
      <param name="uri2">
                    A <see cref="T:System.Uri" /> instance to compare with <paramref name="uri1" />. 
                </param>
    </member>
    <member name="P:System.Uri.OriginalString">
      <summary>
                    Gets the original URI string that was passed to the <see cref="T:System.Uri" /> constructor.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> containing the exact URI specified when this instance was constructed; otherwise, <see cref="F:System.String.Empty" />.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    This instance represents a relative URI, and this property is valid only for absolute URIs. 
                </exception>
    </member>
    <member name="P:System.Uri.Port">
      <summary>
                    Gets the port number of this URI.
                </summary>
      <returns>
                    An <see cref="T:System.Int32" /> value that contains the port number for this URI.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    This instance represents a relative URI, and this property is valid only for absolute URIs. 
                </exception>
    </member>
    <member name="P:System.Uri.Query">
      <summary>
                    Gets any query information included in the specified URI.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that contains any query information included in the specified URI.
                </returns>
    </member>
    <member name="P:System.Uri.Scheme">
      <summary>
                    Gets the scheme name for this URI.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that contains the scheme for this URI, converted to lowercase.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    This instance represents a relative URI, and this property is valid only for absolute URIs. 
                </exception>
    </member>
    <member name="F:System.Uri.SchemeDelimiter">
      <summary>
                    Specifies the characters that separate the communication protocol scheme from the address portion of the URI. This field is read-only.
                </summary>
    </member>
    <member name="M:System.Uri.ToString">
      <summary>
                    Gets a canonical string representation for the specified <see cref="T:System.Uri" /> instance.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> instance that contains the unescaped canonical representation of the <see cref="T:System.Uri" /> instance. All characters are unescaped except #, ?, and %.
                </returns>
    </member>
    <member name="M:System.Uri.TryCreate(System.String,System.UriKind,System.Uri@)">
      <summary>
                    Creates a new <see cref="T:System.Uri" /> using the specified <see cref="T:System.String" /> instance and a <see cref="T:System.UriKind" />.
                </summary>
      <returns>
                    A <see cref="T:System.Boolean" /> value that is true if the <see cref="T:System.Uri" /> was successfully created; otherwise, false.
                </returns>
      <param name="uriString">
                    The <see cref="T:System.String" /> representing the <see cref="T:System.Uri" />.
                </param>
      <param name="uriKind">
                    The type of the Uri.
                </param>
      <param name="result">
                    When this method returns, contains the constructed <see cref="T:System.Uri" />.
                </param>
    </member>
    <member name="M:System.Uri.TryCreate(System.Uri,System.String,System.Uri@)">
      <summary>
                    Creates a new <see cref="T:System.Uri" /> using the specified base and relative <see cref="T:System.String" /> instances.
                </summary>
      <returns>
                    A <see cref="T:System.Boolean" /> value that is true if the <see cref="T:System.Uri" /> was successfully created; otherwise, false.
                </returns>
      <param name="baseUri">
                    The base <see cref="T:System.Uri" />.
                </param>
      <param name="relativeUri">
                    The relative <see cref="T:System.Uri" />, represented as a <see cref="T:System.String" />, to add to the base <see cref="T:System.Uri" />.
                </param>
      <param name="result">
                    When this method returns, contains a <see cref="T:System.Uri" /> constructed from <paramref name="baseUri" /> and <paramref name="relativeUri" />. This parameter is passed uninitialized.
                </param>
    </member>
    <member name="M:System.Uri.TryCreate(System.Uri,System.Uri,System.Uri@)">
      <summary>
                    Creates a new <see cref="T:System.Uri" /> using the specified base and relative <see cref="T:System.Uri" /> instances.
                </summary>
      <returns>
                    A <see cref="T:System.Boolean" /> value that is true if the <see cref="T:System.Uri" /> was successfully created; otherwise, false.
                </returns>
      <param name="baseUri">
                    The base <see cref="T:System.Uri" />. 
                </param>
      <param name="relativeUri">
                    The relative <see cref="T:System.Uri" /> to add to the base <see cref="T:System.Uri" />. 
                </param>
      <param name="result">
                    When this method returns, contains a <see cref="T:System.Uri" /> constructed from <paramref name="baseUri" /> and <paramref name="relativeUri" />. This parameter is passed uninitialized.
                </param>
    </member>
    <member name="M:System.Uri.UnescapeDataString(System.String)">
      <summary>
                    Converts a string to its unescaped representation.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that contains the unescaped representation of <paramref name="stringToUnescape" />. 
                </returns>
      <param name="stringToUnescape">
                    The string to unescape.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringToUnescape" /> is null. 
                </exception>
    </member>
    <member name="F:System.Uri.UriSchemeFile">
      <summary>
                    Specifies that the URI is a pointer to a file. This field is read-only.
                </summary>
    </member>
    <member name="F:System.Uri.UriSchemeFtp">
      <summary>
                    Specifies that the URI is accessed through the File Transfer Protocol (FTP). This field is read-only.
                </summary>
    </member>
    <member name="F:System.Uri.UriSchemeGopher">
      <summary>
                    Specifies that the URI is accessed through the Gopher protocol. This field is read-only.
                </summary>
    </member>
    <member name="F:System.Uri.UriSchemeHttp">
      <summary>
                    Specifies that the URI is accessed through the Hypertext Transfer Protocol (HTTP). This field is read-only.
                </summary>
    </member>
    <member name="F:System.Uri.UriSchemeHttps">
      <summary>
                    Specifies that the URI is accessed through the Secure Hypertext Transfer Protocol (HTTPS). This field is read-only.
                </summary>
    </member>
    <member name="F:System.Uri.UriSchemeMailto">
      <summary>
                    Specifies that the URI is an e-mail address and is accessed through the Simple Mail Transport Protocol (SMTP). This field is read-only.
                </summary>
    </member>
    <member name="F:System.Uri.UriSchemeNetPipe">
      <summary>
                    Specifies that the URI is accessed through the NetPipe scheme of the "Indigo" system. This field is read-only.
                </summary>
    </member>
    <member name="F:System.Uri.UriSchemeNetTcp">
      <summary>
                    Specifies that the URI is accessed through the NetTcp scheme of the "Indigo" system. This field is read-only.
                </summary>
    </member>
    <member name="F:System.Uri.UriSchemeNews">
      <summary>
                    Specifies that the URI is an Internet news group and is accessed through the Network News Transport Protocol (NNTP). This field is read-only.
                </summary>
    </member>
    <member name="F:System.Uri.UriSchemeNntp">
      <summary>
                    Specifies that the URI is an Internet news group and is accessed through the Network News Transport Protocol (NNTP). This field is read-only.
                </summary>
    </member>
    <member name="P:System.Uri.UserEscaped">
      <summary>
                    Indicates that the URI string was completely escaped before the <see cref="T:System.Uri" /> instance was created.
                </summary>
      <returns>
                    A <see cref="T:System.Boolean" /> value that is true if the <paramref name="dontEscape" /> parameter was set to true when the <see cref="T:System.Uri" /> instance was created; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Uri.UserInfo">
      <summary>
                    Gets the user name, password, or other user-specific information associated with the specified URI.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that contains the user information associated with the URI. The returned value does not include the '@' character reserved for delimiting the user information part of the URI.
                </returns>
    </member>
    <member name="T:System.UriBuilder">
      <summary>
                    Provides a custom constructor for uniform resource identifiers (URIs) and modifies URIs for the <see cref="T:System.Uri" /> class.
                </summary>
    </member>
    <member name="M:System.UriBuilder.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.UriBuilder" /> class.
                </summary>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.UriBuilder" /> class with the specified URI.
                </summary>
      <param name="uri">
                    A URI string. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> is null. 
                </exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="uri" /> is a zero length string or contains only spaces.
                
                    -or- 
                
                    The parsing routine detected a scheme in an invalid form.
                
                    -or- 
                
                    The parser detected more than two consecutive slashes in a URI that does not use the "file" scheme.
                
                    -or- 
                <paramref name="uri" /> is not a valid URI. 
                </exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.UriBuilder" /> class with the specified scheme and host.
                </summary>
      <param name="schemeName">
                    An Internet access protocol. 
                </param>
      <param name="hostName">
                    A DNS-style domain name or IP address. 
                </param>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.UriBuilder" /> class with the specified scheme, host, and port.
                </summary>
      <param name="scheme">
                    An Internet access protocol. 
                </param>
      <param name="host">
                    A DNS-style domain name or IP address. 
                </param>
      <param name="portNumber">
                    An IP port number for the service. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="portNumber" /> is less than 0. 
                </exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32,System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.UriBuilder" /> class with the specified scheme, host, port number, and path.
                </summary>
      <param name="scheme">
                    An Internet access protocol. 
                </param>
      <param name="host">
                    A DNS-style domain name or IP address. 
                </param>
      <param name="port">
                    An IP port number for the service. 
                </param>
      <param name="pathValue">
                    The path to the Internet resource. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> is less than 0. 
                </exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32,System.String,System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.UriBuilder" /> class with the specified scheme, host, port number, path and query string or fragment identifier.
                </summary>
      <param name="scheme">
                    An Internet access protocol. 
                </param>
      <param name="host">
                    A DNS-style domain name or IP address. 
                </param>
      <param name="port">
                    An IP port number for the service. 
                </param>
      <param name="path">
                    The path to the Internet resource. 
                </param>
      <param name="extraValue">
                    A query string or fragment identifier. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="extraValue" /> is neither null nor <see cref="F:System.String.Empty" />, nor does a valid fragment identifier begin with a number sign (#), nor a valid query string begin with a question mark (?). 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> is less than 0. 
                </exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.Uri)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.UriBuilder" /> class with the specified <see cref="T:System.Uri" /> instance.
                </summary>
      <param name="uri">
                    An instance of the <see cref="T:System.Uri" /> class. 
                </param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="uri" /> is null. 
                </exception>
    </member>
    <member name="M:System.UriBuilder.Equals(System.Object)">
      <summary>
                    Compares an existing <see cref="T:System.Uri" /> instance with the contents of the <see cref="T:System.UriBuilder" /> for equality.
                </summary>
      <returns>true if <paramref name="rparam" /> represents the same <see cref="T:System.Uri" /> as the <see cref="T:System.Uri" /> constructed by this <see cref="T:System.UriBuilder" /> instance; otherwise, false.
                </returns>
      <param name="rparam">
                    The object to compare with the current instance. 
                </param>
    </member>
    <member name="P:System.UriBuilder.Fragment">
      <summary>
                    Gets or sets the fragment portion of the URI.
                </summary>
      <returns>
                    The fragment portion of the URI. The fragment identifier ("#") is added to the beginning of the fragment.
                </returns>
    </member>
    <member name="M:System.UriBuilder.GetHashCode">
      <summary>
                    Returns the hash code for the URI.
                </summary>
      <returns>
                    The hash code generated for the URI.
                </returns>
    </member>
    <member name="P:System.UriBuilder.Host">
      <summary>
                    Gets or sets the Domain Name System (DNS) host name or IP address of a server.
                </summary>
      <returns>
                    The DNS host name or IP address of the server.
                </returns>
    </member>
    <member name="P:System.UriBuilder.Password">
      <summary>
                    Gets or sets the password associated with the user that accesses the URI.
                </summary>
      <returns>
                    The password of the user that accesses the URI.
                </returns>
    </member>
    <member name="P:System.UriBuilder.Path">
      <summary>
                    Gets or sets the path to the resource referenced by the URI.
                </summary>
      <returns>
                    The path to the resource referenced by the URI.
                </returns>
    </member>
    <member name="P:System.UriBuilder.Port">
      <summary>
                    Gets or sets the port number of the URI.
                </summary>
      <returns>
                    The port number of the URI.
                </returns>
    </member>
    <member name="P:System.UriBuilder.Query">
      <summary>
                    Gets or sets any query information included in the URI.
                </summary>
      <returns>
                    The query information included in the URI.
                </returns>
    </member>
    <member name="P:System.UriBuilder.Scheme">
      <summary>
                    Gets or sets the scheme name of the URI.
                </summary>
      <returns>
                    The scheme of the URI.
                </returns>
    </member>
    <member name="M:System.UriBuilder.ToString">
      <summary>
                    Returns the display string for the specified <see cref="T:System.UriBuilder" /> instance.
                </summary>
      <returns>
                    The string that contains the unescaped display string of the <see cref="T:System.UriBuilder" />.
                </returns>
    </member>
    <member name="P:System.UriBuilder.Uri">
      <summary>
                    Gets the <see cref="T:System.Uri" /> instance constructed by the specified <see cref="T:System.UriBuilder" /> instance.
                </summary>
      <returns>
                    A <see cref="T:System.Uri" /> that contains the URI constructed by the <see cref="T:System.UriBuilder" />.
                </returns>
      <exception cref="T:System.UriFormatException">
                    The URI constructed by the <see cref="T:System.UriBuilder" /> properties is invalid. 
                </exception>
    </member>
    <member name="P:System.UriBuilder.UserName">
      <summary>
                    The user name associated with the user that accesses the URI.
                </summary>
      <returns>
                    The user name of the user that accesses the URI.
                </returns>
    </member>
    <member name="T:System.UriComponents">
      <summary>
                    Specifies the parts of a <see cref="T:System.Uri" />.
                </summary>
    </member>
    <member name="F:System.UriComponents.Scheme">
      <summary>
                    The <see cref="P:System.Uri.Scheme" /> data.
                </summary>
    </member>
    <member name="F:System.UriComponents.UserInfo">
      <summary>
                    The <see cref="P:System.Uri.UserInfo" /> data.
                </summary>
    </member>
    <member name="F:System.UriComponents.Host">
      <summary>
                    The <see cref="P:System.Uri.Host" /> data.
                </summary>
    </member>
    <member name="F:System.UriComponents.Port">
      <summary>
                    The <see cref="P:System.Uri.Port" /> data.
                </summary>
    </member>
    <member name="F:System.UriComponents.Path">
      <summary>
                    The <see cref="P:System.Uri.LocalPath" /> data.
                </summary>
    </member>
    <member name="F:System.UriComponents.Query">
      <summary>
                    The <see cref="P:System.Uri.Query" /> data.
                </summary>
    </member>
    <member name="F:System.UriComponents.Fragment">
      <summary>
                    The <see cref="P:System.Uri.Fragment" /> data.
                </summary>
    </member>
    <member name="F:System.UriComponents.StrongPort">
      <summary>
                    The <see cref="P:System.Uri.Port" /> data. If no port data is in the <see cref="T:System.Uri" /> and a default port has been assigned to the <see cref="P:System.Uri.Scheme" />, the default port is returned. If there is no default port, -1 is returned.
                </summary>
    </member>
    <member name="F:System.UriComponents.KeepDelimiter">
      <summary>
                    Specifies that the delimiter should be included.
                </summary>
    </member>
    <member name="F:System.UriComponents.SerializationInfoString">
      <summary>
                    The complete <see cref="T:System.Uri" /> context that is needed for Uri Serializers. The context includes the IPv6 scope.
                </summary>
    </member>
    <member name="F:System.UriComponents.AbsoluteUri">
      <summary>
                    The <see cref="P:System.Uri.Scheme" />, <see cref="P:System.Uri.UserInfo" />, <see cref="P:System.Uri.Host" />, <see cref="P:System.Uri.Port" />, <see cref="P:System.Uri.LocalPath" />, <see cref="P:System.Uri.Query" />, and <see cref="P:System.Uri.Fragment" /> data.
                </summary>
    </member>
    <member name="F:System.UriComponents.HostAndPort">
      <summary>
                    The <see cref="P:System.Uri.Host" /> and <see cref="P:System.Uri.Port" /> data. If no port data is in the Uri and a default port has been assigned to the <see cref="P:System.Uri.Scheme" />, the default port is returned. If there is no default port, -1 is returned.
                </summary>
    </member>
    <member name="F:System.UriComponents.StrongAuthority">
      <summary>
                    The <see cref="P:System.Uri.UserInfo" />, <see cref="P:System.Uri.Host" />, and <see cref="P:System.Uri.Port" /> data. If no port data is in the <see cref="T:System.Uri" /> and a default port has been assigned to the <see cref="P:System.Uri.Scheme" />, the default port is returned. If there is no default port, -1 is returned.
                </summary>
    </member>
    <member name="F:System.UriComponents.SchemeAndServer">
      <summary>
                    The <see cref="P:System.Uri.Scheme" />, <see cref="P:System.Uri.Host" />, and <see cref="P:System.Uri.Port" /> data.
                </summary>
    </member>
    <member name="F:System.UriComponents.HttpRequestUrl">
      <summary>
                    The <see cref="P:System.Uri.Scheme" />, <see cref="P:System.Uri.Host" />, <see cref="P:System.Uri.Port" />, <see cref="P:System.Uri.LocalPath" />, and <see cref="P:System.Uri.Query" /> data.
                </summary>
    </member>
    <member name="F:System.UriComponents.PathAndQuery">
      <summary>
                    The <see cref="P:System.Uri.LocalPath" /> and <see cref="P:System.Uri.Query" /> data. 
                </summary>
    </member>
    <member name="T:System.UriFormat">
      <summary>
                    Controls how URI information is escaped.
                </summary>
    </member>
    <member name="F:System.UriFormat.UriEscaped">
      <summary>
                    Escaping is performed according to the rules in RFC 3986.
                </summary>
    </member>
    <member name="F:System.UriFormat.Unescaped">
      <summary>
                    No escaping is performed.
                </summary>
    </member>
    <member name="F:System.UriFormat.SafeUnescaped">
      <summary>
                    Characters that have a reserved meaning in the requested URI components remain escaped. All others are not escaped. See Remarks.
                </summary>
    </member>
    <member name="T:System.UriFormatException">
      <summary>
                    The exception that is thrown when an invalid Uniform Resource Identifier (URI) is detected.
                </summary>
    </member>
    <member name="M:System.UriFormatException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.UriFormatException" /> class.
                </summary>
    </member>
    <member name="M:System.UriFormatException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.UriFormatException" /> class with the specified message.
                </summary>
      <param name="textString">
                    The error message string. 
                </param>
    </member>
    <member name="M:System.UriFormatException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.UriFormatException" /> class with the specified message and a reference to the inner exception that is the cause of this exception.
                </summary>
      <param name="textString">
                    The error message string.
                </param>
      <param name="e">
                    The exception that is the cause of the current exception. If the <paramref name="e" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. 
                </param>
    </member>
    <member name="T:System.UriIdnScope">
      <summary>
                    Provides the possible values for the configuration setting Internationalized Domain Name parsing.
                </summary>
    </member>
    <member name="F:System.UriIdnScope.None">
      <summary>
                    This value will not convert any Unicode domain names to use Punycode. This is the default value which is consistent with the .NET Framework 2.0 behavior.
                </summary>
    </member>
    <member name="F:System.UriIdnScope.AllExceptIntranet">
      <summary>
                    This value will convert all external Unicode domain names to use the Punycode equivalents (IDN names). In this case to handle international names on the local Intranet, the DNS servers that are used for the Intranet should support Unicode names.
                </summary>
    </member>
    <member name="F:System.UriIdnScope.All">
      <summary>
                    This value will convert any Unicode domain names to their Punycode equivalents (IDN names).
                </summary>
    </member>
    <member name="T:System.UriKind">
      <summary>
                    Defines the kinds of <see cref="T:System.Uri" />s for several <see cref="Overload:System.Uri.#ctor" /> methods.
                </summary>
    </member>
    <member name="F:System.UriKind.RelativeOrAbsolute">
      <summary>
                    The kind of the Uri is indeterminate.
                </summary>
    </member>
    <member name="F:System.UriKind.Absolute">
      <summary>
                    The Uri is an absolute Uri.
                </summary>
    </member>
    <member name="F:System.UriKind.Relative">
      <summary>
                    The Uri is a relative Uri.
                </summary>
    </member>
    <member name="T:System.UriParser">
      <summary>
                    Parses a new URI scheme. This is an abstract class.
                </summary>
    </member>
    <member name="M:System.UriParser.#ctor">
      <summary>
                    Constructs a default URI parser.
                </summary>
    </member>
    <member name="M:System.UriParser.GetComponents(System.Uri,System.UriComponents,System.UriFormat)">
      <summary>
                    Gets the components from a URI.
                </summary>
      <returns>
                    A string that contains the components.
                </returns>
      <param name="uri">
                    The <see cref="T:System.Uri" /> to parse.
                </param>
      <param name="components">
                    The <see cref="T:System.UriComponents" /> to retrieve from <paramref name="uri" />.
                </param>
      <param name="format">
                    One of the <see cref="T:System.UriFormat" /> values that controls how special characters are escaped.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="format" /> is invalid
                
                    - or -
                <paramref name="components" /> is not a combination of valid <see cref="T:System.UriComponents" /> values. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="uri" /> requires user-driven parsing
                
                    - or -
                <paramref name="uri" /> is not an absolute URI. Relative URIs cannot be used with this method.
                </exception>
    </member>
    <member name="M:System.UriParser.InitializeAndValidate(System.Uri,System.UriFormatException@)">
      <summary>
                    Initialize the state of the parser and validate the URI.
                </summary>
      <param name="uri">
                    The <see cref="T:System.Uri" /> to validate.
                </param>
      <param name="parsingError">
                    Validation errors, if any.
                </param>
    </member>
    <member name="M:System.UriParser.IsBaseOf(System.Uri,System.Uri)">
      <summary>
                    Determines whether <paramref name="baseUri" /> is a base URI for <paramref name="relativeUri" />.
                </summary>
      <returns>true if <paramref name="baseUri" /> is a base URI for <paramref name="relativeUri" />; otherwise, false.
                </returns>
      <param name="baseUri">
                    The base URI.
                </param>
      <param name="relativeUri">
                    The URI to test.
                </param>
    </member>
    <member name="M:System.UriParser.IsKnownScheme(System.String)">
      <summary>
                    Indicates whether the parser for a scheme is registered.
                </summary>
      <returns>true if <paramref name="schemeName" /> has been registered; otherwise, false.
                </returns>
      <param name="schemeName">
                    The scheme name to check.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="schemeName" /> parameter is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The <paramref name="schemeName" /> parameter is not valid. 
                </exception>
    </member>
    <member name="M:System.UriParser.IsWellFormedOriginalString(System.Uri)">
      <summary>
                    Indicates whether a URI is well-formed.
                </summary>
      <returns>true if <paramref name="uri" /> is well-formed; otherwise, false.
                </returns>
      <param name="uri">
                    The URI to check.
                </param>
    </member>
    <member name="M:System.UriParser.OnNewUri">
      <summary>
                    Invoked by a <see cref="T:System.Uri" /> constructor to get a <see cref="T:System.UriParser" /> instance
                </summary>
      <returns>
                    A <see cref="T:System.UriParser" /> for the constructed <see cref="T:System.Uri" />.
                </returns>
    </member>
    <member name="M:System.UriParser.OnRegister(System.String,System.Int32)">
      <summary>
                    Invoked by the Framework when a <see cref="T:System.UriParser" /> method is registered.
                </summary>
      <param name="schemeName">
                    The scheme that is associated with this <see cref="T:System.UriParser" />.
                </param>
      <param name="defaultPort">
                    The port number of the scheme.
                </param>
    </member>
    <member name="M:System.UriParser.Register(System.UriParser,System.String,System.Int32)">
      <summary>
                    Associates a scheme and port number with a <see cref="T:System.UriParser" />.
                </summary>
      <param name="uriParser">
                    The <see cref="T:System.UriParser" /> to register.
                </param>
      <param name="schemeName">
                    The name of the scheme that is associated with this parser.
                </param>
      <param name="defaultPort">
                    The default port number for the specified scheme.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="uriParser" /> or <paramref name="schemeName" /> parameter is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The <paramref name="schemeName" /> or <paramref name="defaultPort" /> parameter is not valid. 
                </exception>
    </member>
    <member name="M:System.UriParser.Resolve(System.Uri,System.Uri,System.UriFormatException@)">
      <summary>
                    Called by <see cref="T:System.Uri" /> constructors and <see cref="Overload:System.Uri.TryCreate" /> to resolve a relative URI.
                </summary>
      <returns>
                    The string of the resolved relative <see cref="T:System.Uri" />.
                </returns>
      <param name="baseUri">
                    A base URI.
                </param>
      <param name="relativeUri">
                    A relative URI.
                </param>
      <param name="parsingError">
                    Errors during the resolve process, if any.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The <paramref name="baseUri" /> parameter is not an absolute <see cref="T:System.Uri" />.or the <paramref name="baseUri" /> requires user-driven parsing.
                </exception>
    </member>
    <member name="T:System.UriTypeConverter">
      <summary>
                    Converts instances of the <see cref="T:System.String" /> type to <see cref="T:System.Uri" /> instances.
                </summary>
    </member>
    <member name="M:System.UriTypeConverter.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.UriTypeConverter" /> class.
                </summary>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
                    Returns whether this converter can convert an object of the specified source type to an instance of the <see cref="T:System.Uri" /> type. 
                </summary>
      <returns>
                    A <see cref="T:System.Boolean" /> value that is true if the converter can convert the specified type to an instance of <see cref="T:System.Uri" />; otherwise, false.
                </returns>
      <param name="context">
                    An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.
                </param>
      <param name="sourceType">
                    A <see cref="T:System.Type" /> that represents the type that you want to convert from.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceType" /> is null (Nothing in Visual Basic).
                </exception>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
                    Returns whether this converter can convert the object to the specified type, using the specified context.
                </summary>
      <returns>
                    A <see cref="T:System.Boolean" /> value that is true if <paramref name="destinationType" /> is of type <see cref="T:System.String" />, or <see cref="T:System.Uri" />; otherwise, false.
                </returns>
      <param name="context">
                    An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />  that provides a format context.
                </param>
      <param name="destinationType">
                    A <see cref="T:System.Type" /> that represents the type that you want to convert to.
                </param>
    </member>
    <member name="M:System.UriTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
                    Converts the given object to the type of this converter, using the specified context and culture information. 
                </summary>
      <returns>
                    A <see cref="T:System.Uri" /> instance that represents the converted <see cref="T:System.Object" />. If the <paramref name="value" /> parameter is null; then null is returned.
                </returns>
      <param name="context">
                    An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.
                </param>
      <param name="culture">
                    The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.
                </param>
      <param name="value">
                    The <see cref="T:System.Object" /> to convert to an instance of <see cref="T:System.Uri" />.
                </param>
      <exception cref="T:System.NotSupportedException">
                    The conversion cannot be performed. This exception occurs if the <paramref name="value" /> is a type other than <see cref="T:System.String" /> or <see cref="T:System.Uri" />. or the <paramref name="context" /> or <paramref name="culture" /> parameters are not supported for the <paramref name="value" /> parameter.
                </exception>
    </member>
    <member name="M:System.UriTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
                    Converts a given value object to the specified type, using the specified context and culture information.
                </summary>
      <returns>
                    An <see cref="T:System.Object" /> that represents the converted value.
                </returns>
      <param name="context">
                    An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />  that provides a format context.
                </param>
      <param name="culture">
                    A <see cref="T:System.Globalization.CultureInfo" />. If null is passed, the current culture is assumed.
                </param>
      <param name="value">
                    The <see cref="T:System.Object" /> to convert.
                </param>
      <param name="destinationType">
                    The <see cref="T:System.Type" /> to convert the <paramref name="value" /> parameter to.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="destinationType" /> parameter is null.
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The conversion cannot be performed.
                </exception>
    </member>
    <member name="T:System.CodeDom.Compiler.GeneratedCodeAttribute">
      <summary>
                    Identifies code that is generated by a tool. This class cannot be inherited.
                </summary>
    </member>
    <member name="M:System.CodeDom.Compiler.GeneratedCodeAttribute.#ctor(System.String,System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.CodeDom.Compiler.GeneratedCodeAttribute" /> class. 
                </summary>
      <param name="tool">
                    The name of the tool that generated the code.
                </param>
      <param name="version">
                    The version of the tool that generated the code.
                </param>
    </member>
    <member name="P:System.CodeDom.Compiler.GeneratedCodeAttribute.Tool">
      <summary>
                    Gets the name of the tool that generated the code.
                </summary>
      <returns>
                    The name of the tool that generated the code.
                </returns>
    </member>
    <member name="P:System.CodeDom.Compiler.GeneratedCodeAttribute.Version">
      <summary>
                    Gets the version of the tool that generated the code.
                </summary>
      <returns>
                    The version of the tool that generated the code.
                </returns>
    </member>
    <member name="T:System.Collections.Generic.LinkedList`1">
      <summary>
                    Represents a doubly linked list.
                </summary>
      <typeparam name="T">
                    Specifies the element type of the linked list.
                </typeparam>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Collections.Generic.LinkedList`1" /> class that is empty.
                </summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Collections.Generic.LinkedList`1" /> class that contains elements copied from the specified <see cref="T:System.Collections.IEnumerable" /> and has sufficient capacity to accommodate the number of elements copied. 
                </summary>
      <param name="collection">
                    The <see cref="T:System.Collections.IEnumerable" /> whose elements are copied to the new <see cref="T:System.Collections.Generic.LinkedList`1" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> is null.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
      <summary>
                    Adds the specified new node after the specified existing node in the <see cref="T:System.Collections.Generic.LinkedList`1" />.
                </summary>
      <param name="node">
                    The <see cref="T:System.Collections.Generic.LinkedListNode`1" /> after which to insert <paramref name="newNode" />.
                </param>
      <param name="newNode">
                    The new <see cref="T:System.Collections.Generic.LinkedListNode`1" /> to add to the <see cref="T:System.Collections.Generic.LinkedList`1" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> is null.
                
                    -or-
                <paramref name="newNode" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> is not in the current <see cref="T:System.Collections.Generic.LinkedList`1" />.
                
                    -or-
                <paramref name="newNode" /> belongs to another <see cref="T:System.Collections.Generic.LinkedList`1" />.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)">
      <summary>
                    Adds a new node containing the specified value after the specified existing node in the <see cref="T:System.Collections.Generic.LinkedList`1" />.
                </summary>
      <returns>
                    The new <see cref="T:System.Collections.Generic.LinkedListNode`1" /> containing <paramref name="value" />.
                </returns>
      <param name="node">
                    The <see cref="T:System.Collections.Generic.LinkedListNode`1" /> after which to insert a new <see cref="T:System.Collections.Generic.LinkedListNode`1" /> containing <paramref name="value" />.
                </param>
      <param name="value">
                    The value to add to the <see cref="T:System.Collections.Generic.LinkedList`1" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> is not in the current <see cref="T:System.Collections.Generic.LinkedList`1" />.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
      <summary>
                    Adds the specified new node before the specified existing node in the <see cref="T:System.Collections.Generic.LinkedList`1" />.
                </summary>
      <param name="node">
                    The <see cref="T:System.Collections.Generic.LinkedListNode`1" /> before which to insert <paramref name="newNode" />.
                </param>
      <param name="newNode">
                    The new <see cref="T:System.Collections.Generic.LinkedListNode`1" /> to add to the <see cref="T:System.Collections.Generic.LinkedList`1" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> is null.
                
                    -or-
                <paramref name="newNode" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> is not in the current <see cref="T:System.Collections.Generic.LinkedList`1" />.
                
                    -or-
                <paramref name="newNode" /> belongs to another <see cref="T:System.Collections.Generic.LinkedList`1" />.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)">
      <summary>
                    Adds a new node containing the specified value before the specified existing node in the <see cref="T:System.Collections.Generic.LinkedList`1" />.
                </summary>
      <returns>
                    The new <see cref="T:System.Collections.Generic.LinkedListNode`1" /> containing <paramref name="value" />.
                </returns>
      <param name="node">
                    The <see cref="T:System.Collections.Generic.LinkedListNode`1" /> before which to insert a new <see cref="T:System.Collections.Generic.LinkedListNode`1" /> containing <paramref name="value" />.
                </param>
      <param name="value">
                    The value to add to the <see cref="T:System.Collections.Generic.LinkedList`1" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> is not in the current <see cref="T:System.Collections.Generic.LinkedList`1" />.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})">
      <summary>
                    Adds the specified new node at the start of the <see cref="T:System.Collections.Generic.LinkedList`1" />.
                </summary>
      <param name="node">
                    The new <see cref="T:System.Collections.Generic.LinkedListNode`1" /> to add at the start of the <see cref="T:System.Collections.Generic.LinkedList`1" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> belongs to another <see cref="T:System.Collections.Generic.LinkedList`1" />.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddFirst(`0)">
      <summary>
                    Adds a new node containing the specified value at the start of the <see cref="T:System.Collections.Generic.LinkedList`1" />.
                </summary>
      <returns>
                    The new <see cref="T:System.Collections.Generic.LinkedListNode`1" /> containing <paramref name="value" />.
                </returns>
      <param name="value">
                    The value to add at the start of the <see cref="T:System.Collections.Generic.LinkedList`1" />.
                </param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})">
      <summary>
                    Adds the specified new node at the end of the <see cref="T:System.Collections.Generic.LinkedList`1" />.
                </summary>
      <param name="node">
                    The new <see cref="T:System.Collections.Generic.LinkedListNode`1" /> to add at the end of the <see cref="T:System.Collections.Generic.LinkedList`1" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> belongs to another <see cref="T:System.Collections.Generic.LinkedList`1" />.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddLast(`0)">
      <summary>
                    Adds a new node containing the specified value at the end of the <see cref="T:System.Collections.Generic.LinkedList`1" />.
                </summary>
      <returns>
                    The new <see cref="T:System.Collections.Generic.LinkedListNode`1" /> containing <paramref name="value" />.
                </returns>
      <param name="value">
                    The value to add at the end of the <see cref="T:System.Collections.Generic.LinkedList`1" />.
                </param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Clear">
      <summary>
                    Removes all nodes from the <see cref="T:System.Collections.Generic.LinkedList`1" />.
                </summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Contains(`0)">
      <summary>
                    Determines whether a value is in the <see cref="T:System.Collections.Generic.LinkedList`1" />.
                </summary>
      <returns>true if <paramref name="value" /> is found in the <see cref="T:System.Collections.Generic.LinkedList`1" />; otherwise, false.
                </returns>
      <param name="value">
                    The value to locate in the <see cref="T:System.Collections.Generic.LinkedList`1" />. The value can be null for reference types.
                </param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)">
      <summary>
                    Copies the entire <see cref="T:System.Collections.Generic.LinkedList`1" /> to a compatible one-dimensional <see cref="T:System.Array" />, starting at the specified index of the target array.
                </summary>
      <param name="array">
                    The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.LinkedList`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.
                </param>
      <param name="index">
                    The zero-based index in <paramref name="array" /> at which copying begins.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is equal to or greater than the length of <paramref name="array" />.
                
                    -or-
                <paramref name="index" /> is less than zero.
                </exception>
      <exception cref="T:System.ArgumentException">
                    The number of elements in the source <see cref="T:System.Collections.Generic.LinkedList`1" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.
                </exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Count">
      <summary>
                    Gets the number of nodes actually contained in the <see cref="T:System.Collections.Generic.LinkedList`1" />.
                </summary>
      <returns>
                    The number of nodes actually contained in the <see cref="T:System.Collections.Generic.LinkedList`1" />.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Find(`0)">
      <summary>
                    Finds the first node that contains the specified value.
                </summary>
      <returns>
                    The first <see cref="T:System.Collections.Generic.LinkedListNode`1" /> that contains the specified value, if found; otherwise, null.
                </returns>
      <param name="value">
                    The value to locate in the <see cref="T:System.Collections.Generic.LinkedList`1" />.
                </param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.FindLast(`0)">
      <summary>
                    Finds the last node that contains the specified value.
                </summary>
      <returns>
                    The last <see cref="T:System.Collections.Generic.LinkedListNode`1" /> that contains the specified value, if found; otherwise, null.
                </returns>
      <param name="value">
                    The value to locate in the <see cref="T:System.Collections.Generic.LinkedList`1" />.
                </param>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.First">
      <summary>
                    Gets the first node of the <see cref="T:System.Collections.Generic.LinkedList`1" />.
                </summary>
      <returns>
                    The first <see cref="T:System.Collections.Generic.LinkedListNode`1" /> of the <see cref="T:System.Collections.Generic.LinkedList`1" />.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through the <see cref="T:System.Collections.Generic.LinkedList`1" />.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.LinkedList`1.Enumerator" /> for the <see cref="T:System.Collections.Generic.LinkedList`1" />.
                </returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Last">
      <summary>
                    Gets the last node of the <see cref="T:System.Collections.Generic.LinkedList`1" />.
                </summary>
      <returns>
                    The last <see cref="T:System.Collections.Generic.LinkedListNode`1" /> of the <see cref="T:System.Collections.Generic.LinkedList`1" />.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Remove(System.Collections.Generic.LinkedListNode{`0})">
      <summary>
                    Removes the specified node from the <see cref="T:System.Collections.Generic.LinkedList`1" />.
                </summary>
      <param name="node">
                    The <see cref="T:System.Collections.Generic.LinkedListNode`1" /> to remove from the <see cref="T:System.Collections.Generic.LinkedList`1" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> is not in the current <see cref="T:System.Collections.Generic.LinkedList`1" />.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Remove(`0)">
      <summary>
                    Removes the first occurrence of the specified value from the <see cref="T:System.Collections.Generic.LinkedList`1" />.
                </summary>
      <returns>true if the element containing <paramref name="value" /> is successfully removed; otherwise, false.  This method also returns false if <paramref name="value" /> was not found in the original <see cref="T:System.Collections.Generic.LinkedList`1" />.
                </returns>
      <param name="value">
                    The value to remove from the <see cref="T:System.Collections.Generic.LinkedList`1" />.
                </param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.RemoveFirst">
      <summary>
                    Removes the node at the start of the <see cref="T:System.Collections.Generic.LinkedList`1" />.
                </summary>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="T:System.Collections.Generic.LinkedList`1" /> is empty.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.RemoveLast">
      <summary>
                    Removes the node at the end of the <see cref="T:System.Collections.Generic.LinkedList`1" />.
                </summary>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="T:System.Collections.Generic.LinkedList`1" /> is empty.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>
                    Adds an item at the end of the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </summary>
      <param name="value">
                    The value to add at the end of the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </param>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
                </summary>
      <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.  In the default implementation of <see cref="T:System.Collections.Generic.LinkedList`1" />, this property always returns false.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through a collection.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
                    Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
                </summary>
      <param name="array">
                    The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.
                </param>
      <param name="index">
                    The zero-based index in <paramref name="array" /> at which copying begins.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.
                
                    -or-
                <paramref name="array" /> does not have zero-based indexing.
                
                    -or-
                <paramref name="index" /> is equal to or greater than the length of <paramref name="array" />.
                
                    -or-
                
                    The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.
                
                    -or-
                
                    The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.
                </exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#IsSynchronized">
      <summary>
                    Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).
                </summary>
      <returns>true if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, false.  In the default implementation of <see cref="T:System.Collections.Generic.LinkedList`1" />, this property always returns false.
                </returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot">
      <summary>
                    Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.
                </summary>
      <returns>
                    An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.  In the default implementation of <see cref="T:System.Collections.Generic.LinkedList`1" />, this property always returns the current instance.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through the linked list as a collection.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the linked list as a collection.
                </returns>
    </member>
    <member name="T:System.Collections.Generic.LinkedList`1.Enumerator">
      <summary>
                    Enumerates the elements of a <see cref="T:System.Collections.Generic.LinkedList`1" />.
                </summary>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Enumerator.Current">
      <summary>
                    Gets the element at the current position of the enumerator.
                </summary>
      <returns>
                    The element in the <see cref="T:System.Collections.Generic.LinkedList`1" /> at the current position of the enumerator.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.Dispose">
      <summary>
                    Releases all resources used by the <see cref="T:System.Collections.Generic.LinkedList`1.Enumerator" />.
                </summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.MoveNext">
      <summary>
                    Advances the enumerator to the next element of the <see cref="T:System.Collections.Generic.LinkedList`1" />.
                </summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The collection was modified after the enumerator was created. 
                </exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>
                    Gets the element at the current position of the enumerator.
                </summary>
      <returns>
                    The element in the collection at the current position of the enumerator.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The enumerator is positioned before the first element of the collection or after the last element. 
                </exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>
                    Sets the enumerator to its initial position, which is before the first element in the collection. This class cannot be inherited.
                </summary>
      <exception cref="T:System.InvalidOperationException">
                    The collection was modified after the enumerator was created. 
                </exception>
    </member>
    <member name="T:System.Collections.Generic.LinkedListNode`1">
      <summary>
                    Represents a node in a <see cref="T:System.Collections.Generic.LinkedList`1" />. This class cannot be inherited.
                </summary>
      <typeparam name="T">
                    Specifies the element type of the linked list.
                </typeparam>
    </member>
    <member name="M:System.Collections.Generic.LinkedListNode`1.#ctor(`0)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Collections.Generic.LinkedListNode`1" /> class, containing the specified value.
                </summary>
      <param name="value">
                    The value to contain in the <see cref="T:System.Collections.Generic.LinkedListNode`1" />.
                </param>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.List">
      <summary>
                    Gets the <see cref="T:System.Collections.Generic.LinkedList`1" /> that the <see cref="T:System.Collections.Generic.LinkedListNode`1" /> belongs to.
                </summary>
      <returns>
                    A reference to the <see cref="T:System.Collections.Generic.LinkedList`1" /> that the <see cref="T:System.Collections.Generic.LinkedListNode`1" /> belongs to, or null if the <see cref="T:System.Collections.Generic.LinkedListNode`1" /> is not linked.
                </returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Next">
      <summary>
                    Gets the next node in the <see cref="T:System.Collections.Generic.LinkedList`1" />.
                </summary>
      <returns>
                    A reference to the next node in the <see cref="T:System.Collections.Generic.LinkedList`1" />, or null if the current node is the last element (<see cref="P:System.Collections.Generic.LinkedList`1.Last" />) of the <see cref="T:System.Collections.Generic.LinkedList`1" />.
                </returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Previous">
      <summary>
                    Gets the previous node in the <see cref="T:System.Collections.Generic.LinkedList`1" />.
                </summary>
      <returns>
                    A reference to the previous node in the <see cref="T:System.Collections.Generic.LinkedList`1" />, or null if the current node is the first element (<see cref="P:System.Collections.Generic.LinkedList`1.First" />) of the <see cref="T:System.Collections.Generic.LinkedList`1" />.
                </returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Value">
      <summary>
                    Gets the value contained in the node.
                </summary>
      <returns>
                    The value contained in the node.
                </returns>
    </member>
    <member name="T:System.Collections.Generic.Queue`1">
      <summary>
                    Represents a first-in, first-out collection of objects.
                </summary>
      <typeparam name="T">
                    Specifies the type of elements in the queue.
                </typeparam>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Collections.Generic.Queue`1" /> class that is empty and has the default initial capacity.
                </summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Collections.Generic.Queue`1" /> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.
                </summary>
      <param name="collection">
                    The collection whose elements are copied to the new <see cref="T:System.Collections.Generic.Queue`1" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> is null.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor(System.Int32)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Collections.Generic.Queue`1" /> class that is empty and has the specified initial capacity.
                </summary>
      <param name="capacity">
                    The initial number of elements that the <see cref="T:System.Collections.Generic.Queue`1" /> can contain.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than zero.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Clear">
      <summary>
                    Removes all objects from the <see cref="T:System.Collections.Generic.Queue`1" />.
                </summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Contains(`0)">
      <summary>
                    Determines whether an element is in the <see cref="T:System.Collections.Generic.Queue`1" />.
                </summary>
      <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.Queue`1" />; otherwise, false.
                </returns>
      <param name="item">
                    The object to locate in the <see cref="T:System.Collections.Generic.Queue`1" />. The value can be null for reference types.
                </param>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)">
      <summary>
                    Copies the <see cref="T:System.Collections.Generic.Queue`1" /> elements to an existing one-dimensional <see cref="T:System.Array" />, starting at the specified array index.
                </summary>
      <param name="array">
                    The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.Queue`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.
                </param>
      <param name="arrayIndex">
                    The zero-based index in <paramref name="array" /> at which copying begins.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> is equal to or greater than the length of <paramref name="array" />.
                
                    -or-
                
                    The number of elements in the source <see cref="T:System.Collections.Generic.Queue`1" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.
                </exception>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Count">
      <summary>
                    Gets the number of elements contained in the <see cref="T:System.Collections.Generic.Queue`1" />.
                </summary>
      <returns>
                    The number of elements contained in the <see cref="T:System.Collections.Generic.Queue`1" />.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Dequeue">
      <summary>
                    Removes and returns the object at the beginning of the <see cref="T:System.Collections.Generic.Queue`1" />.
                </summary>
      <returns>
                    The object that is removed from the beginning of the <see cref="T:System.Collections.Generic.Queue`1" />.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="T:System.Collections.Generic.Queue`1" /> is empty.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enqueue(`0)">
      <summary>
                    Adds an object to the end of the <see cref="T:System.Collections.Generic.Queue`1" />.
                </summary>
      <param name="item">
                    The object to add to the <see cref="T:System.Collections.Generic.Queue`1" />. The value can be null for reference types.
                </param>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through the <see cref="T:System.Collections.Generic.Queue`1" />.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.Queue`1.Enumerator" /> for the <see cref="T:System.Collections.Generic.Queue`1" />.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Peek">
      <summary>
                    Returns the object at the beginning of the <see cref="T:System.Collections.Generic.Queue`1" /> without removing it.
                </summary>
      <returns>
                    The object at the beginning of the <see cref="T:System.Collections.Generic.Queue`1" />.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="T:System.Collections.Generic.Queue`1" /> is empty.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through a collection.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
                    Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
                </summary>
      <param name="array">
                    The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.
                </param>
      <param name="index">
                    The zero-based index in <paramref name="array" /> at which copying begins.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.
                
                    -or-
                <paramref name="array" /> does not have zero-based indexing.
                
                    -or-
                <paramref name="index" /> is equal to or greater than the length of <paramref name="array" />.
                
                    -or-
                
                    The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.
                
                    -or-
                
                    The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.
                </exception>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#IsSynchronized">
      <summary>
                    Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).
                </summary>
      <returns>true if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, false.  In the default implementation of <see cref="T:System.Collections.Generic.Queue`1" />, this property always returns false.
                </returns>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#SyncRoot">
      <summary>
                    Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.
                </summary>
      <returns>
                    An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.  In the default implementation of <see cref="T:System.Collections.Generic.Queue`1" />, this property always returns the current instance.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through a collection.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.ToArray">
      <summary>
                    Copies the <see cref="T:System.Collections.Generic.Queue`1" /> elements to a new array.
                </summary>
      <returns>
                    A new array containing elements copied from the <see cref="T:System.Collections.Generic.Queue`1" />.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.TrimExcess">
      <summary>
                    Sets the capacity to the actual number of elements in the <see cref="T:System.Collections.Generic.Queue`1" />, if that number is less than 90 percent of current capacity.
                </summary>
    </member>
    <member name="T:System.Collections.Generic.Queue`1.Enumerator">
      <summary>
                    Enumerates the elements of a <see cref="T:System.Collections.Generic.Queue`1" />.
                </summary>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Enumerator.Current">
      <summary>
                    Gets the element at the current position of the enumerator.
                </summary>
      <returns>
                    The element in the <see cref="T:System.Collections.Generic.Queue`1" /> at the current position of the enumerator.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The enumerator is positioned before the first element of the collection or after the last element. 
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.Dispose">
      <summary>
                    Releases all resources used by the <see cref="T:System.Collections.Generic.Queue`1.Enumerator" />.
                </summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.MoveNext">
      <summary>
                    Advances the enumerator to the next element of the <see cref="T:System.Collections.Generic.Queue`1" />.
                </summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The collection was modified after the enumerator was created. 
                </exception>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>
                    Gets the element at the current position of the enumerator.
                </summary>
      <returns>
                    The element in the collection at the current position of the enumerator.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The enumerator is positioned before the first element of the collection or after the last element. 
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>
                    Sets the enumerator to its initial position, which is before the first element in the collection.
                </summary>
      <exception cref="T:System.InvalidOperationException">
                    The collection was modified after the enumerator was created. 
                </exception>
    </member>
    <member name="T:System.Collections.Generic.Stack`1">
      <summary>
                    Represents a variable size last-in-first-out (LIFO) collection of instances of the same arbitrary type.
                </summary>
      <typeparam name="T">
                    Specifies the type of elements in the stack.
                </typeparam>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Collections.Generic.Stack`1" /> class that is empty and has the default initial capacity.
                </summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Collections.Generic.Stack`1" /> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.
                </summary>
      <param name="collection">
                    The collection to copy elements from.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> is null.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Collections.Generic.Stack`1" /> class that is empty and has the specified initial capacity or the default initial capacity, whichever is greater.
                </summary>
      <param name="capacity">
                    The initial number of elements that the <see cref="T:System.Collections.Generic.Stack`1" /> can contain.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than zero.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Clear">
      <summary>
                    Removes all objects from the <see cref="T:System.Collections.Generic.Stack`1" />.
                </summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Contains(`0)">
      <summary>
                    Determines whether an element is in the <see cref="T:System.Collections.Generic.Stack`1" />.
                </summary>
      <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.Stack`1" />; otherwise, false.
                </returns>
      <param name="item">
                    The object to locate in the <see cref="T:System.Collections.Generic.Stack`1" />. The value can be null for reference types.
                </param>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
      <summary>
                    Copies the <see cref="T:System.Collections.Generic.Stack`1" /> to an existing one-dimensional <see cref="T:System.Array" />, starting at the specified array index.
                </summary>
      <param name="array">
                    The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.Stack`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.
                </param>
      <param name="arrayIndex">
                    The zero-based index in <paramref name="array" /> at which copying begins.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than zero.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.
                
                    -or-
                
                    The number of elements in the source <see cref="T:System.Collections.Generic.Stack`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.
                </exception>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Count">
      <summary>
                    Gets the number of elements contained in the <see cref="T:System.Collections.Generic.Stack`1" />.
                </summary>
      <returns>
                    The number of elements contained in the <see cref="T:System.Collections.Generic.Stack`1" />.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.GetEnumerator">
      <summary>
                    Returns an enumerator for the <see cref="T:System.Collections.Generic.Stack`1" />.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.Stack`1.Enumerator" /> for the <see cref="T:System.Collections.Generic.Stack`1" />.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Peek">
      <summary>
                    Returns the object at the top of the <see cref="T:System.Collections.Generic.Stack`1" /> without removing it.
                </summary>
      <returns>
                    The object at the top of the <see cref="T:System.Collections.Generic.Stack`1" />.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="T:System.Collections.Generic.Stack`1" /> is empty.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Pop">
      <summary>
                    Removes and returns the object at the top of the <see cref="T:System.Collections.Generic.Stack`1" />.
                </summary>
      <returns>
                    The object removed from the top of the <see cref="T:System.Collections.Generic.Stack`1" />.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="T:System.Collections.Generic.Stack`1" /> is empty.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Push(`0)">
      <summary>
                    Inserts an object at the top of the <see cref="T:System.Collections.Generic.Stack`1" />.
                </summary>
      <param name="item">
                    The object to push onto the <see cref="T:System.Collections.Generic.Stack`1" />. The value can be null for reference types.
                </param>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through the collection.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
                    Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
                </summary>
      <param name="array">
                    The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.
                </param>
      <param name="arrayIndex">
                    The zero-based index in <paramref name="array" /> at which copying begins.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than zero.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.
                
                    -or-
                <paramref name="array" /> does not have zero-based indexing.
                
                    -or-
                <paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.
                
                    -or-
                
                    The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.
                
                    -or-
                
                    The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.
                </exception>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
      <summary>
                    Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).
                </summary>
      <returns>true if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, false.  In the default implementation of <see cref="T:System.Collections.Generic.Stack`1" />, this property always returns false.
                </returns>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
      <summary>
                    Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.
                </summary>
      <returns>
                    An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.  In the default implementation of <see cref="T:System.Collections.Generic.Stack`1" />, this property always returns the current instance.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through a collection.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.ToArray">
      <summary>
                    Copies the <see cref="T:System.Collections.Generic.Stack`1" /> to a new array.
                </summary>
      <returns>
                    A new array containing copies of the elements of the <see cref="T:System.Collections.Generic.Stack`1" />.
                </returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.TrimExcess">
      <summary>
                    Sets the capacity to the actual number of elements in the <see cref="T:System.Collections.Generic.Stack`1" />, if that number is less than 90 percent of current capacity.
                </summary>
    </member>
    <member name="T:System.Collections.Generic.Stack`1.Enumerator">
      <summary>
                    Enumerates the elements of a <see cref="T:System.Collections.Generic.Stack`1" />.
                </summary>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Enumerator.Current">
      <summary>
                    Gets the element at the current position of the enumerator.
                </summary>
      <returns>
                    The element in the <see cref="T:System.Collections.Generic.Stack`1" /> at the current position of the enumerator.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The enumerator is positioned before the first element of the collection or after the last element. 
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.Dispose">
      <summary>
                    Releases all resources used by the <see cref="T:System.Collections.Generic.Stack`1.Enumerator" />. 
                </summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.MoveNext">
      <summary>
                    Advances the enumerator to the next element of the <see cref="T:System.Collections.Generic.Stack`1" />.
                </summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The collection was modified after the enumerator was created. 
                </exception>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>
                    Gets the element at the current position of the enumerator.
                </summary>
      <returns>
                    The element in the collection at the current position of the enumerator.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The enumerator is positioned before the first element of the collection or after the last element. 
                </exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>
                    Sets the enumerator to its initial position, which is before the first element in the collection. This class cannot be inherited.
                </summary>
      <exception cref="T:System.InvalidOperationException">
                    The collection was modified after the enumerator was created. 
                </exception>
    </member>
    <member name="T:System.ComponentModel.AsyncCompletedEventArgs">
      <summary>
                    Provides data for the MethodNameCompleted event. 
                </summary>
    </member>
    <member name="M:System.ComponentModel.AsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> class.
                </summary>
      <param name="error">
                    Any error that occurred during the asynchronous operation.
                </param>
      <param name="cancelled">
                    A value that indicates whether the asynchronous operation was canceled.
                </param>
      <param name="userState">
                    The optional user-supplied state object that is used to identify the task that raised the MethodNameCompleted event.
                </param>
    </member>
    <member name="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled">
      <summary>
                    Gets a value that indicates whether an asynchronous operation has been canceled.
                </summary>
      <returns>true if the asynchronous operation has been canceled; otherwise, false. The default is false.
                </returns>
    </member>
    <member name="P:System.ComponentModel.AsyncCompletedEventArgs.Error">
      <summary>
                    Gets a value that indicates which error occurred during an asynchronous operation.
                </summary>
      <returns>
                    An <see cref="T:System.Exception" /> instance, if an error occurred during an asynchronous operation; otherwise null.
                </returns>
    </member>
    <member name="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary">
      <summary>
                    Raises a user-supplied exception if an asynchronous operation failed.
                </summary>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" /> property is true.
                </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">
                    The <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /> property has been set by the asynchronous operation.
                </exception>
    </member>
    <member name="P:System.ComponentModel.AsyncCompletedEventArgs.UserState">
      <summary>
                    Gets the unique identifier for the asynchronous task.
                </summary>
      <returns>
                    An object reference that uniquely identifies the asynchronous task; otherwise, null if no value has been set.
                </returns>
    </member>
    <member name="T:System.ComponentModel.AsyncCompletedEventHandler">
      <summary>
                    Represents the method that will handle the MethodNameCompleted event of an asynchronous operation. 
                </summary>
      <param name="sender">
                    The source of the event.
                </param>
      <param name="e">
                    An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> that contains the event data.
                </param>
    </member>
    <member name="T:System.ComponentModel.AsyncOperation">
      <summary>
                    Tracks the lifetime of an asynchronous operation. 
                </summary>
    </member>
    <member name="M:System.ComponentModel.AsyncOperation.OperationCompleted">
      <summary>
                    Ends the lifetime of an asynchronous operation.
                </summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> has been called previously for this task.
                </exception>
    </member>
    <member name="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
      <summary>
                    Invokes a delegate on the thread or context appropriate for the application model.
                </summary>
      <param name="d">
                    A <see cref="T:System.Threading.SendOrPostCallback" /> object that wraps the delegate to be called when the operation ends.
                </param>
      <param name="arg">
                    An argument for the delegate that is contained in the <paramref name="d" /> parameter.
                </param>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> method has been called previously for this task.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> is null.
                </exception>
    </member>
    <member name="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
      <summary>
                    Ends the lifetime of an asynchronous operation.
                </summary>
      <param name="d">
                    A <see cref="T:System.Threading.SendOrPostCallback" /> object that wraps the delegate to be called when the operation ends.
                </param>
      <param name="arg">
                    An argument for the delegate that is contained in the <paramref name="d" /> parameter.
                </param>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> method has been called previously for this task.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> is null.
                </exception>
    </member>
    <member name="P:System.ComponentModel.AsyncOperation.SynchronizationContext">
      <summary>
                    Gets the <see cref="T:System.Threading.SynchronizationContext" /> object that was passed to the constructor when the object was created by <see cref="T:System.ComponentModel.AsyncOperationManager" />.
                </summary>
      <returns>
                    The <see cref="T:System.Threading.SynchronizationContext" /> object that was passed to the constructor.
                </returns>
    </member>
    <member name="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
      <summary>
                    Gets an object that is used to uniquely identify an asynchronous operation.
                </summary>
      <returns>
                    The state object passed to the asynchronous method invocation.
                </returns>
    </member>
    <member name="T:System.ComponentModel.AsyncOperationManager">
      <summary>
                    Provides concurrency management for classes that support asynchronous method calls. This class cannot be inherited. 
                </summary>
    </member>
    <member name="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
      <summary>
                    Returns an <see cref="T:System.ComponentModel.AsyncOperation" /> for tracking the duration of a particular asynchronous operation.
                </summary>
      <returns>
                    An <see cref="T:System.ComponentModel.AsyncOperation" /> that you can use to track the duration of an asynchronous method invocation.
                </returns>
      <param name="userSuppliedState">
                    An object that is used to associate a piece of client state, such as a task ID, with a particular asynchronous operation.
                </param>
    </member>
    <member name="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext">
      <summary>
                    Gets or sets the <see cref="T:System.Threading.SynchronizationContext" /> for the asynchronous operation.
                </summary>
      <returns>
                    The <see cref="T:System.Threading.SynchronizationContext" /> for the asynchronous operation.
                </returns>
    </member>
    <member name="T:System.ComponentModel.BackgroundWorker">
      <summary>
                    Runs an operation on a separate thread.
                </summary>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ComponentModel.BackgroundWorker" /> class.
                </summary>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.CancelAsync">
      <summary>
                    Requests cancellation of a pending background operation.
                </summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation" /> is false. 
                </exception>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.CancellationPending">
      <summary>
                    Gets a value that indicates whether the application has requested cancellation of a background operation.
                </summary>
      <returns>true if the application has requested cancellation of a background operation; otherwise, false. The default is false.
                </returns>
    </member>
    <member name="E:System.ComponentModel.BackgroundWorker.DoWork">
      <summary>
                    Occurs when <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" /> is called.
                </summary>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.IsBusy">
      <summary>
                    Gets a value that indicates whether the <see cref="T:System.ComponentModel.BackgroundWorker" /> is running a background operation.
                </summary>
      <returns>true, if the <see cref="T:System.ComponentModel.BackgroundWorker" /> is running a background operation; otherwise, false.
                </returns>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.OnDoWork(System.ComponentModel.DoWorkEventArgs)">
      <summary>
                    Raises the <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> event.
                </summary>
      <param name="e">
                    A <see cref="T:System.ComponentModel.DoWorkEventArgs" /> that contains the event data.
                </param>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
      <summary>
                    Raises the <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> event.
                </summary>
      <param name="e">
                    A <see cref="T:System.ComponentModel.ProgressChangedEventArgs" /> that contains the event data.
                </param>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)">
      <summary>
                    Raises the <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" /> event.
                </summary>
      <param name="e">
                    A <see cref="T:System.ComponentModel.RunWorkerCompletedEventArgs" /> that contains the event data.
                </param>
    </member>
    <member name="E:System.ComponentModel.BackgroundWorker.ProgressChanged">
      <summary>
                    Occurs when <see cref="Overload:System.ComponentModel.BackgroundWorker.ReportProgress" /> is called.
                </summary>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
      <summary>
                    Raises the <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> event.
                </summary>
      <param name="percentProgress">
                    The percentage, from 0 to 100, of the background operation that is completed.
                </param>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /> property is set to false. 
                </exception>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
      <summary>
                    Raises the <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> event.
                </summary>
      <param name="percentProgress">
                    The percentage, from 0 to 100, of the background operation that is completed.
                </param>
      <param name="userState">
                    The state object passed to <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" />.
                </param>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /> property is set to false. 
                </exception>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync">
      <summary>
                    Starts running a background operation.
                </summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /> is true.
                </exception>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
      <summary>
                    Starts running a background operation and includes a parameter for use by the background operation.
                </summary>
      <param name="argument">
                    A parameter for use by the background operation in the <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> event handler.
                </param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /> is true.
                </exception>
    </member>
    <member name="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
      <summary>
                    Occurs when the background operation has completed, has been canceled, or has raised an exception.
                </summary>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress">
      <summary>
                    Gets or sets a value that indicates whether the <see cref="T:System.ComponentModel.BackgroundWorker" /> can report progress updates.
                </summary>
      <returns>true if the <see cref="T:System.ComponentModel.BackgroundWorker" /> supports progress updates; otherwise false. The default is false.
                </returns>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation">
      <summary>
                    Gets or sets a value that indicates whether the <see cref="T:System.ComponentModel.BackgroundWorker" /> supports asynchronous cancellation.
                </summary>
      <returns>true if the <see cref="T:System.ComponentModel.BackgroundWorker" /> supports cancellation; otherwise false. The default is false.
                </returns>
    </member>
    <member name="T:System.ComponentModel.CategoryAttribute">
      <summary>
                    Specifies the name of the category in which to group the property or event when displayed in a property grid control set to Categorized mode.
                </summary>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ComponentModel.CategoryAttribute" /> class using the category name Default.
                </summary>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ComponentModel.CategoryAttribute" /> class using the specified category name.
                </summary>
      <param name="category">
                    The name of the category. 
                </param>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Action">
      <summary>
                    Gets a <see cref="T:System.ComponentModel.CategoryAttribute" /> representing the Action category.
                </summary>
      <returns>
                    A <see cref="T:System.ComponentModel.CategoryAttribute" /> for the action category.
                </returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Appearance">
      <summary>
                    Gets a <see cref="T:System.ComponentModel.CategoryAttribute" /> representing the Appearance category.
                </summary>
      <returns>
                    A <see cref="T:System.ComponentModel.CategoryAttribute" /> for the appearance category.
                </returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Asynchronous">
      <summary>
                    Gets a <see cref="T:System.ComponentModel.CategoryAttribute" /> representing the Asynchronous category.
                </summary>
      <returns>
                    A <see cref="T:System.ComponentModel.CategoryAttribute" /> for the asynchronous category.
                </returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Behavior">
      <summary>
                    Gets a <see cref="T:System.ComponentModel.CategoryAttribute" /> representing the Behavior category.
                </summary>
      <returns>
                    A <see cref="T:System.ComponentModel.CategoryAttribute" /> for the behavior category.
                </returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Category">
      <summary>
                    Gets the name of the category for the property or event that this attribute is applied to.
                </summary>
      <returns>
                    The name of the category for the property or event that this attribute is applied to.
                </returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Data">
      <summary>
                    Gets a <see cref="T:System.ComponentModel.CategoryAttribute" /> representing the Data category.
                </summary>
      <returns>
                    A <see cref="T:System.ComponentModel.CategoryAttribute" /> for the data category.
                </returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Default">
      <summary>
                    Gets a <see cref="T:System.ComponentModel.CategoryAttribute" /> representing the Default category.
                </summary>
      <returns>
                    A <see cref="T:System.ComponentModel.CategoryAttribute" /> for the default category.
                </returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Design">
      <summary>
                    Gets a <see cref="T:System.ComponentModel.CategoryAttribute" /> representing the Design category.
                </summary>
      <returns>
                    A <see cref="T:System.ComponentModel.CategoryAttribute" /> for the design category.
                </returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.DragDrop">
      <summary>
                    Gets a <see cref="T:System.ComponentModel.CategoryAttribute" /> representing the DragDrop category.
                </summary>
      <returns>
                    A <see cref="T:System.ComponentModel.CategoryAttribute" /> for the drag-and-drop category.
                </returns>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.Equals(System.Object)">
      <summary>
                    Returns whether the value of the specified object is equal to the current <see cref="T:System.ComponentModel.CategoryAttribute" />.
                </summary>
      <returns>true if the value of the specified object is equal to the current <see cref="T:System.ComponentModel.CategoryAttribute" />; otherwise, false.
                </returns>
      <param name="obj">
                    The object to test the value equality of. 
                </param>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Focus">
      <summary>
                    Gets a <see cref="T:System.ComponentModel.CategoryAttribute" /> representing the Focus category.
                </summary>
      <returns>
                    A <see cref="T:System.ComponentModel.CategoryAttribute" /> for the focus category.
                </returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Format">
      <summary>
                    Gets a <see cref="T:System.ComponentModel.CategoryAttribute" /> representing the Format category.
                </summary>
      <returns>
                    A <see cref="T:System.ComponentModel.CategoryAttribute" /> for the format category.
                </returns>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.GetHashCode">
      <summary>
                    Returns the hash code for this attribute.
                </summary>
      <returns>
                    A 32-bit signed integer hash code.
                </returns>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.GetLocalizedString(System.String)">
      <summary>
                    Looks up the localized name of the specified category.
                </summary>
      <returns>
                    The localized name of the category, or null if a localized name does not exist.
                </returns>
      <param name="value">
                    The identifier for the category to look up. 
                </param>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Key">
      <summary>
                    Gets a <see cref="T:System.ComponentModel.CategoryAttribute" /> representing the Key category.
                </summary>
      <returns>
                    A <see cref="T:System.ComponentModel.CategoryAttribute" /> for the key category.
                </returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Layout">
      <summary>
                    Gets a <see cref="T:System.ComponentModel.CategoryAttribute" /> representing the Layout category.
                </summary>
      <returns>
                    A <see cref="T:System.ComponentModel.CategoryAttribute" /> for the layout category.
                </returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Mouse">
      <summary>
                    Gets a <see cref="T:System.ComponentModel.CategoryAttribute" /> representing the Mouse category.
                </summary>
      <returns>
                    A <see cref="T:System.ComponentModel.CategoryAttribute" /> for the mouse category.
                </returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.WindowStyle">
      <summary>
                    Gets a <see cref="T:System.ComponentModel.CategoryAttribute" /> representing the WindowStyle category.
                </summary>
      <returns>
                    A <see cref="T:System.ComponentModel.CategoryAttribute" /> for the window style category.
                </returns>
    </member>
    <member name="T:System.ComponentModel.ComponentCollection">
      <summary>
                    Gets a specific component in the container.
                </summary>
    </member>
    <member name="T:System.ComponentModel.DefaultValueAttribute">
      <summary>
                    Specifies the default value for a property.
                </summary>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Boolean)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultValueAttribute" /> class using a <see cref="T:System.Boolean" /> value.
                </summary>
      <param name="value">
                    A <see cref="T:System.Boolean" /> that is the default value. 
                </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Byte)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultValueAttribute" /> class using an 8-bit unsigned integer.
                </summary>
      <param name="value">
                    An 8-bit unsigned integer that is the default value. 
                </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Char)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultValueAttribute" /> class using a Unicode character.
                </summary>
      <param name="value">
                    A Unicode character that is the default value. 
                </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Double)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultValueAttribute" /> class using a double-precision floating point number.
                </summary>
      <param name="value">
                    A double-precision floating point number that is the default value. 
                </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int16)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultValueAttribute" /> class using a 16-bit signed integer.
                </summary>
      <param name="value">
                    A 16-bit signed integer that is the default value. 
                </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int32)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultValueAttribute" /> class using a 32-bit signed integer.
                </summary>
      <param name="value">
                    A 32-bit signed integer that is the default value. 
                </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int64)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultValueAttribute" /> class using a 64-bit signed integer.
                </summary>
      <param name="value">
                    A 64-bit signed integer that is the default value. 
                </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Object)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultValueAttribute" /> class.
                </summary>
      <param name="value">
                    An <see cref="T:System.Object" /> that represents the default value. 
                </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Single)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultValueAttribute" /> class using a single-precision floating point number.
                </summary>
      <param name="value">
                    A single-precision floating point number that is the default value. 
                </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultValueAttribute" /> class using a <see cref="T:System.String" />.
                </summary>
      <param name="value">
                    A <see cref="T:System.String" /> that is the default value. 
                </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Type,System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultValueAttribute" /> class, converting the specified value to the specified type, and using an invariant culture as the translation context.
                </summary>
      <param name="type">
                    A <see cref="T:System.Type" /> that represents the type to convert the value to. 
                </param>
      <param name="value">
                    A <see cref="T:System.String" /> that can be converted to the type using the <see cref="T:System.ComponentModel.TypeConverter" /> for the type and the U.S. English culture. 
                </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.Equals(System.Object)">
      <summary>
                    Returns whether the value of the given object is equal to the current <see cref="T:System.ComponentModel.DefaultValueAttribute" />.
                </summary>
      <returns>true if the value of the specified object is equal to that of the current; otherwise, false.
                </returns>
      <param name="obj">
                    The object to test the value equality of. 
                </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.GetHashCode"></member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.SetValue(System.Object)">
      <summary>
                    Sets the default value for the property to which this attribute is bound.
                </summary>
      <param name="value">
                    The default value.
                </param>
    </member>
    <member name="P:System.ComponentModel.DefaultValueAttribute.Value">
      <summary>
                    Gets the default value of the property this attribute is bound to.
                </summary>
      <returns>
                    An <see cref="T:System.Object" /> that represents the default value of the property this attribute is bound to.
                </returns>
    </member>
    <member name="T:System.ComponentModel.DescriptionAttribute">
      <summary>
                    Specifies a description for a property or event.
                </summary>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ComponentModel.DescriptionAttribute" /> class with no parameters.
                </summary>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ComponentModel.DescriptionAttribute" /> class with a description.
                </summary>
      <param name="description">
                    The description text. 
                </param>
    </member>
    <member name="F:System.ComponentModel.DescriptionAttribute.Default">
      <summary>
                    Specifies the default value for the <see cref="T:System.ComponentModel.DescriptionAttribute" />, which is an empty string (""). This static field is read-only.
                </summary>
    </member>
    <member name="P:System.ComponentModel.DescriptionAttribute.Description">
      <summary>
                    Gets the description stored in this attribute.
                </summary>
      <returns>
                    The description stored in this attribute.
                </returns>
    </member>
    <member name="P:System.ComponentModel.DescriptionAttribute.DescriptionValue">
      <summary>
                    Gets or sets the string stored as the description.
                </summary>
      <returns>
                    The string stored as the description. The default value is an empty string ("").
                </returns>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.Equals(System.Object)">
      <summary>
                    Returns whether the value of the specified object is equal to the current <see cref="T:System.ComponentModel.DescriptionAttribute" />.
                </summary>
      <returns>true if the value of the specified object is equal to the current <see cref="T:System.ComponentModel.DescriptionAttribute" />; otherwise, false.
                </returns>
      <param name="obj">
                    The object to test the value equality of. 
                </param>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.GetHashCode"></member>
    <member name="T:System.ComponentModel.DoWorkEventArgs">
      <summary>
                    Provides data for the <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> event.
                </summary>
    </member>
    <member name="M:System.ComponentModel.DoWorkEventArgs.#ctor(System.Object)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ComponentModel.DoWorkEventArgs" /> class.
                </summary>
      <param name="argument">
                    Specifies an argument for an asynchronous operation.
                </param>
    </member>
    <member name="P:System.ComponentModel.DoWorkEventArgs.Argument">
      <summary>
                    Gets a value that represents the argument of an asynchronous operation.
                </summary>
      <returns>
                    An <see cref="T:System.Object" /> that represents the argument of an asynchronous operation.
                </returns>
    </member>
    <member name="P:System.ComponentModel.DoWorkEventArgs.Cancel">
      <summary>
                    Gets or sets a value that indicates whether the asynchronous operation has been canceled.
                </summary>
      <returns>true if the operation has been canceled; otherwise, false. The default is false.
                </returns>
    </member>
    <member name="P:System.ComponentModel.DoWorkEventArgs.Result">
      <summary>
                    Gets or sets a value that represents the result of an asynchronous operation.
                </summary>
      <returns>
                    An <see cref="T:System.Object" /> that represents the result of an asynchronous operation.
                </returns>
    </member>
    <member name="T:System.ComponentModel.DoWorkEventHandler">
      <summary>
                    Represents the method that will handle the <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> event that is raised when the <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" /> method is called.
                </summary>
      <param name="sender">
                    The source of the event. 
                </param>
      <param name="e">
                    A <see cref="T:System.ComponentModel.DoWorkEventArgs" /> that contains the event data. 
                </param>
    </member>
    <member name="T:System.ComponentModel.EditorBrowsableAttribute">
      <summary>
                    Specifies that a property or method is viewable in an editor. This class cannot be inherited.
                </summary>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ComponentModel.EditorBrowsableAttribute" /> class with <see cref="P:System.ComponentModel.EditorBrowsableAttribute.State" /> set to the default state.
                </summary>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.#ctor(System.ComponentModel.EditorBrowsableState)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ComponentModel.EditorBrowsableAttribute" /> class with an <see cref="T:System.ComponentModel.EditorBrowsableState" />.
                </summary>
      <param name="state">
                    The <see cref="T:System.ComponentModel.EditorBrowsableState" /> to set <see cref="P:System.ComponentModel.EditorBrowsableAttribute.State" /> to. 
                </param>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.Equals(System.Object)">
      <summary>
                    Returns whether the value of the specified object is equal to the current <see cref="T:System.ComponentModel.EditorBrowsableAttribute" />.
                </summary>
      <returns>true if the value of the given object is equal to that of the current; otherwise, false.
                </returns>
      <param name="obj">
                    The object to test the value equality of. 
                </param>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.GetHashCode"></member>
    <member name="P:System.ComponentModel.EditorBrowsableAttribute.State">
      <summary>
                    Gets the browsable state of the property or method.
                </summary>
      <returns>
                    An <see cref="T:System.ComponentModel.EditorBrowsableState" /> that is the browsable state of the property or method.
                </returns>
    </member>
    <member name="T:System.ComponentModel.EditorBrowsableState">
      <summary>
                    Specifies the browsable state of a property or method from within an editor. 
                </summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Always">
      <summary>
                    The property or method is always browsable from within an editor.
                </summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Never">
      <summary>
                    The property or method is never browsable from within an editor.
                </summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Advanced">
      <summary>
                    The property or method is a feature that only advanced users should see. An editor can either show or hide such properties.
                </summary>
    </member>
    <member name="T:System.ComponentModel.IComponent">
      <summary>
                    When implemented by a class, gets or sets the <see cref="T:System.ComponentModel.ISite" /> associated with the component.
                </summary>
    </member>
    <member name="E:System.ComponentModel.IComponent.Disposed">
      <summary>
                    Adds an event handler to listen to the Disposed event on the component.
                </summary>
    </member>
    <member name="P:System.ComponentModel.IComponent.Site">
      <summary>
                    When implemented by a class, gets or sets the <see cref="T:System.ComponentModel.ISite" /> associated with the component.
                </summary>
      <returns>
                    The <see cref="T:System.ComponentModel.ISite" /> associated with the component.
                </returns>
    </member>
    <member name="T:System.ComponentModel.IContainer">
      <summary>
                    Provides functionality for containers. Containers are objects that logically contain zero or more components. 
                </summary>
    </member>
    <member name="M:System.ComponentModel.IContainer.Add(System.ComponentModel.IComponent)">
      <summary>
                    Adds a component to the container.
                </summary>
      <param name="component">
                    The component to add.
                </param>
    </member>
    <member name="M:System.ComponentModel.IContainer.Add(System.ComponentModel.IComponent,System.String)">
      <summary>
                    Adds a component to the container.
                </summary>
      <param name="component">
                    The component to add.
                </param>
      <param name="name">
                    Identifying name for the component.
                </param>
    </member>
    <member name="P:System.ComponentModel.IContainer.Components">
      <summary>
                    Gets all the components in the <see cref="T:System.ComponentModel.IContainer" />.
                </summary>
      <returns>
                    The collection of components in the <see cref="T:System.ComponentModel.IContainer" />.
                </returns>
    </member>
    <member name="M:System.ComponentModel.IContainer.Remove(System.ComponentModel.IComponent)">
      <summary>
                    Removes a component from the container.
                </summary>
      <param name="component">
                    The component to remove.
                </param>
    </member>
    <member name="T:System.ComponentModel.IEditableObject">
      <summary>
                    Represents an object that has an editing mode and the ability to commit or revert changes. 
                </summary>
    </member>
    <member name="M:System.ComponentModel.IEditableObject.BeginEdit">
      <summary>
                    Causes the object to enter editing mode.
                </summary>
    </member>
    <member name="M:System.ComponentModel.IEditableObject.CancelEdit">
      <summary>
                    Causes the object to leave editing mode and revert to the previous, unedited value.
                </summary>
    </member>
    <member name="M:System.ComponentModel.IEditableObject.EndEdit">
      <summary>
                    Causes the object to leave editing mode and commit the edited value.
                </summary>
    </member>
    <member name="T:System.ComponentModel.INotifyPropertyChanged">
      <summary>
                    Notifies clients that a property value has changed.
                </summary>
    </member>
    <member name="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged">
      <summary>
                    Occurs when a property value changes.
                </summary>
    </member>
    <member name="T:System.ComponentModel.ISite">
      <summary>
                    Provides functionality required by sites. Sites bind a component to a container and enable communication between them, as well as provide a way for the container to manage its components. 
                </summary>
    </member>
    <member name="P:System.ComponentModel.ISite.Component">
      <summary>
                    When implemented by a class, gets the component associated with the <see cref="T:System.ComponentModel.ISite" />.
                </summary>
      <returns>
                    The component associated with the <see cref="T:System.ComponentModel.ISite" />.
                </returns>
    </member>
    <member name="P:System.ComponentModel.ISite.Container">
      <summary>
                    When implemented by a class, gets the container associated with the <see cref="T:System.ComponentModel.ISite" />.
                </summary>
      <returns>
                    The container associated with the <see cref="T:System.ComponentModel.ISite" />.
                </returns>
    </member>
    <member name="P:System.ComponentModel.ISite.DesignMode">
      <summary>
                    When implemented by a class, determines whether the component is in design mode.
                </summary>
      <returns>true if in design mode; otherwise, false.
                </returns>
    </member>
    <member name="P:System.ComponentModel.ISite.Name">
      <summary>
                    When implemented by a class, gets or sets the name of the component associated with the <see cref="T:System.ComponentModel.ISite" />.
                </summary>
      <returns>
                    The name of the component.
                </returns>
    </member>
    <member name="T:System.ComponentModel.ITypeDescriptorContext">
      <summary>
                    Provides information about a context to a type converter or a value editor, so that the type converter or editor can perform a conversion.
                </summary>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Container">
      <summary>
                    Gets the container with the set of objects for this formatter.
                </summary>
      <returns>
                    The container with the set of objects for this formatter.
                </returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Instance">
      <summary>
                    Gets the instance that is invoking the method on the formatter object.
                </summary>
      <returns>
                    The instance that is invoking the method on the formatter object.
                </returns>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanged">
      <summary>
                    Raises the <see cref="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanged" /> event.
                </summary>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanging">
      <summary>
                    Gets a value indicating whether this object can be changed.
                </summary>
      <returns>true if this object can be changed; otherwise, false.
                </returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor">
      <summary>
                    Gets the <see cref="T:System.ComponentModel.PropertyDescriptor" /> that is surfacing the given context item.
                </summary>
      <returns>
                    The <see cref="T:System.ComponentModel.PropertyDescriptor" /> that is surfacing the given context item.
                </returns>
    </member>
    <member name="T:System.ComponentModel.ProgressChangedEventArgs">
      <summary>
                    Provides data for the <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> event.
                </summary>
    </member>
    <member name="M:System.ComponentModel.ProgressChangedEventArgs.#ctor(System.Int32,System.Object)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ComponentModel.ProgressChangedEventArgs" /> class.
                </summary>
      <param name="progressPercentage">
                    The percentage of an asynchronous operation that has been completed.
                </param>
      <param name="userState">
                    A unique user state.
                </param>
    </member>
    <member name="P:System.ComponentModel.ProgressChangedEventArgs.ProgressPercentage">
      <summary>
                    Gets the percentage of an asynchronous operation that has been completed.
                </summary>
      <returns>
                    A percentage value that indicates the asynchronous operation progress.
                </returns>
    </member>
    <member name="P:System.ComponentModel.ProgressChangedEventArgs.UserState">
      <summary>
                    Gets a unique user state.
                </summary>
      <returns>
                    A unique <see cref="T:System.Object" /> that indicates the user state.
                </returns>
    </member>
    <member name="T:System.ComponentModel.ProgressChangedEventHandler">
      <summary>
                    Represents the method that will handle the <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> event that is raised when progress is reported by a <see cref="T:System.ComponentModel.BackgroundWorker" />.
                </summary>
      <param name="sender">
                    The source of the event. 
                </param>
      <param name="e">
                    A <see cref="T:System.ComponentModel.ProgressChangedEventArgs" /> that contains the event data. 
                </param>
    </member>
    <member name="T:System.ComponentModel.PropertyChangedEventArgs">
      <summary>
                    Provides data for the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event.
                </summary>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventArgs.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ComponentModel.PropertyChangedEventArgs" /> class.
                </summary>
      <param name="propertyName">
                    The name of the property that changed. 
                </param>
    </member>
    <member name="P:System.ComponentModel.PropertyChangedEventArgs.PropertyName">
      <summary>
                    Gets the name of the property that changed.
                </summary>
      <returns>
                    The name of the property that changed; <see cref="F:System.String.Empty" /> or null if all of the properties have changed.
                </returns>
    </member>
    <member name="T:System.ComponentModel.PropertyChangedEventHandler">
      <summary>
                    Represents the method that will handle the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event.
                </summary>
      <param name="sender">
                    The source of the event. 
                </param>
      <param name="e">
                    A <see cref="T:System.ComponentModel.PropertyChangedEventArgs" /> that contains the event data. 
                </param>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptor">
      <summary>
                    Provides a description of a property.
                </summary>
    </member>
    <member name="T:System.ComponentModel.RunWorkerCompletedEventArgs">
      <summary>
                    Provides data for the <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" /> event.
                </summary>
    </member>
    <member name="M:System.ComponentModel.RunWorkerCompletedEventArgs.#ctor(System.Object,System.Exception,System.Boolean)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ComponentModel.RunWorkerCompletedEventArgs" /> class.
                </summary>
      <param name="result">
                    The result of the asynchronous operation.
                </param>
      <param name="error">
                    Any error that occurred during the asynchronous operation.
                </param>
      <param name="cancelled">
                    A value that indicates whether the asynchronous operation was canceled.
                </param>
    </member>
    <member name="P:System.ComponentModel.RunWorkerCompletedEventArgs.Result">
      <summary>
                    Gets a value that represents the result of an asynchronous operation.
                </summary>
      <returns>
                    An <see cref="T:System.Object" /> that represents the result of an asynchronous operation.
                </returns>
    </member>
    <member name="T:System.ComponentModel.RunWorkerCompletedEventHandler">
      <summary>
                    Represents the method that will handle the <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" /> event that is raised when the operation performed by a <see cref="T:System.ComponentModel.BackgroundWorker" /> has completed, has been canceled, or has raised an exception.
                </summary>
      <param name="sender">
                    The source of the event. 
                </param>
      <param name="e">
                    A <see cref="T:System.ComponentModel.RunWorkerCompletedEventArgs" /> that contains the event data. 
                </param>
    </member>
    <member name="T:System.ComponentModel.TypeConverter">
      <summary>
                    Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
                </summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ComponentModel.TypeConverter" /> class. 
                </summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
                    Returns whether the type converter can convert an object from the specified type to the type of this converter.
                </summary>
      <returns>true if this converter can perform the conversion; otherwise, false.
                </returns>
      <param name="context">
                    An object that provides a format context.
                </param>
      <param name="sourceType">
                    The type you want to convert from.
                </param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)">
      <summary>
                    Returns whether the type converter can convert an object from the specified type to the type of this converter.
                </summary>
      <returns>true if this converter can perform the conversion; otherwise, false.
                </returns>
      <param name="sourceType">
                    The type you want to convert from.
                </param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
                    Returns whether the type converter can convert an object to the specified type. 
                </summary>
      <returns>true if this converter can perform the conversion; otherwise, false.
                </returns>
      <param name="context">
                    An object that provides a format context.
                </param>
      <param name="destinationType">
                    The type you want to convert to.
                </param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)">
      <summary>
                    Returns whether the type converter can convert an object to the specified type. 
                </summary>
      <returns>true if this converter can perform the conversion; otherwise, false.
                </returns>
      <param name="destinationType">
                    The type you want to convert to.
                </param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
                    Converts from the specified value to the type of this converter.
                </summary>
      <returns>
                    The converted value.
                </returns>
      <param name="context">
                    An object that provides a format context. 
                </param>
      <param name="culture">
                    The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture. 
                </param>
      <param name="value">
                    The value to convert to the type of this converter.
                </param>
      <exception cref="T:System.NotSupportedException">
                    The conversion cannot be performed. 
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)">
      <summary>
                    Converts from the specified value to the type of this converter.
                </summary>
      <returns>
                    The converted value.
                </returns>
      <param name="value">
                    The value to convert to the type of this converter.
                </param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)">
      <summary>
                    Converts the specified text to an object.
                </summary>
      <returns>
                    An object that represents the converted text.
                </returns>
      <param name="text">
                    The text representation of the object to convert.
                </param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
                    Converts the specified value object to the specified type.
                </summary>
      <returns>
                    The converted object.
                </returns>
      <param name="context">
                    An object that provides a format context. 
                </param>
      <param name="culture">
                    The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture. 
                </param>
      <param name="value">
                    The object to convert.
                </param>
      <param name="destinationType">
                    The type to convert the object to.
                </param>
      <exception cref="T:System.NotSupportedException">
                    The conversion cannot be performed.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> is null.
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)">
      <summary>
                    Converts the specified value object to the specified type.
                </summary>
      <returns>
                    The converted object.
                </returns>
      <param name="value">
                    The object to convert.
                </param>
      <param name="destinationType">
                    The type to convert the object to.
                </param>
      <exception cref="T:System.NotSupportedException">
                    The conversion cannot be performed.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> is null.
                </exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.Object)">
      <summary>
                    Converts the specified object to a string representation.
                </summary>
      <returns>
                    An object that represents the converted value.
                </returns>
      <param name="value">
                    The object to convert
                </param>
    </member>
    <member name="T:System.ComponentModel.TypeConverterAttribute">
      <summary>
                    Specifies the class to use as a type converter for the type or property that this attribute is bound to.
                </summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ComponentModel.TypeConverterAttribute" /> class. 
                </summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ComponentModel.TypeConverterAttribute" /> class, using the specified type name as the data converter for the object this attribute is bound to.
                </summary>
      <param name="typeName">
                    The fully qualified name of the class to use for data conversion for the object this attribute is bound to.
                </param>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.Type)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ComponentModel.TypeConverterAttribute" /> class, using the specified type as the data converter for the object this attribute is bound to.
                </summary>
      <param name="type">
                    The type of the converter class to use for data conversion for the object this attribute is bound to.
                </param>
    </member>
    <member name="P:System.ComponentModel.TypeConverterAttribute.ConverterTypeName">
      <summary>
                    Gets the fully qualified type name of the type to use as a converter for the object this attribute is bound to.
                </summary>
      <returns>
                    Gets the fully qualified type name of the type to use as a converter for the object this attribute is bound to, or an empty string ("") if none exists. The default is empty string ("").
                </returns>
    </member>
    <member name="T:System.Diagnostics.Debug">
      <summary>
                    Provides a set of methods and properties that help debug your code. This class cannot be inherited.
                </summary>
    </member>
    <member name="M:System.Diagnostics.Debug.Assert(System.Boolean)">
      <summary>
                    Checks for a condition and outputs the call stack if the condition is false.
                </summary>
      <param name="condition">true to prevent the call stack from being displayed; otherwise, false. 
                </param>
    </member>
    <member name="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String)">
      <summary>
                    Checks for a condition and displays a specified message if the condition is false.
                </summary>
      <param name="condition">true to prevent the specified message from being displayed; otherwise, false. 
                </param>
      <param name="message">
                    A message to display. 
                </param>
    </member>
    <member name="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String)">
      <summary>
                    Checks for a condition and displays two specified messages if the condition is false.
                </summary>
      <param name="condition">true to prevent the specified messages from being displayed; otherwise, false. 
                </param>
      <param name="message">
                    A message to display. 
                </param>
      <param name="detailMessage">
                    A detailed message to display. 
                </param>
    </member>
    <member name="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String,System.Object[])">
      <summary>
                    Checks for a condition and outputs the message and the call stack if the condition is false. 
                </summary>
      <param name="condition">true to prevent the specified message and the call stack from being displayed; otherwise, false.
                </param>
      <param name="message">
                    A message to display.
                </param>
      <param name="detailMessageFormat">
                    A composite format string that contains text intermixed with zero or more format items, which correspond to objects in the <paramref name="args" /> array.
                </param>
      <param name="args">
                    An object array that contains zero or more objects to format.
                </param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLine(System.Object)">
      <summary>
                    Writes the value of a specified object's <see cref="M:System.Object.ToString" /> method to the debugger by using the OutputDebugString function.
                </summary>
      <param name="value">
                    An object whose name is sent to the debugger by using the OutputDebugString function.
                </param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLine(System.String)">
      <summary>
                    Writes a specified message followed by a line terminator to the debugger by using the OutputDebugString function.
                </summary>
      <param name="message">
                    The message to write to the debugger. 
                </param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLine(System.String,System.Object[])">
      <summary>
                    Writes a formatted string followed by a line terminator to the debugger by using the OutputDebugString function.
                </summary>
      <param name="format">
                    A composite format string that contains text intermixed with zero or more format items, which correspond to objects in the <paramref name="args" /> array.
                </param>
      <param name="args">
                    An object array containing zero or more objects to format. 
                </param>
    </member>
    <member name="T:System.Text.RegularExpressions.Capture">
      <summary>
                    Represents the results from a single subexpression capture. <see cref="T:System.Text.RegularExpressions.Capture" /> represents one substring for a single successful capture.
                </summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Index">
      <summary>
                    The position in the original string where the first character of the captured substring was found.
                </summary>
      <returns>
                    The zero-based starting position in the original string where the captured substring was found.
                </returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Length">
      <summary>
                    The length of the captured substring.
                </summary>
      <returns>
                    The length of the captured substring.
                </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Capture.ToString">
      <summary>
                    Gets the captured substring from the input string.
                </summary>
      <returns>
                    The actual substring that was captured by the match.
                </returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Value">
      <summary>
                    Gets the captured substring from the input string.
                </summary>
      <returns>
                    The actual substring that was captured by the match.
                </returns>
    </member>
    <member name="T:System.Text.RegularExpressions.CaptureCollection">
      <summary>
                    Represents a sequence of capture substrings. CaptureCollection returns the set of captures done by a single capturing group.
                </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.CopyTo(System.Array,System.Int32)">
      <summary>
                    Copies all the elements of the collection to the given array beginning at the given index.
                </summary>
      <param name="array">
                    The array the collection is to be copied into. 
                </param>
      <param name="arrayIndex">
                    The position in the destination array where copying is to begin. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.Count">
      <summary>
                    Gets the number of substrings captured by the group.
                </summary>
      <returns>
                    The number of items in the <see cref="T:System.Text.RegularExpressions.CaptureCollection" />.
                </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.GetEnumerator">
      <summary>
                    Provides an enumerator in the same order as Item[i].
                </summary>
      <returns>
                    A <see cref="T:System.Collections.IEnumerator" /> object that contains all <see cref="T:System.Text.RegularExpressions.Capture" /> objects within the <see cref="T:System.Text.RegularExpressions.CaptureCollection" />.
                </returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.IsReadOnly">
      <summary>
                    Gets a value that indicates whether the collection is read only.
                </summary>
      <returns>
                    The value of this property is always true.
                </returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.IsSynchronized">
      <summary>
                    Gets a value indicating whether access to the collection is synchronized (thread-safe).
                </summary>
      <returns>
                    The value of this property is always false.
                </returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.Item(System.Int32)">
      <summary>
                    Gets an individual member of the collection.
                </summary>
      <returns>
                    The captured substring at position <paramref name="i" /> in the collection.
                </returns>
      <param name="i">
                    Index into the capture collection. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> is less than 0 or greater than <see cref="P:System.Text.RegularExpressions.CaptureCollection.Count" />. 
                </exception>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.SyncRoot">
      <summary>
                    Gets an object that can be used to synchronize access to the collection.
                </summary>
      <returns>
                    An object that can be used to synchronize access to the collection.
                </returns>
    </member>
    <member name="T:System.Text.RegularExpressions.Group">
      <summary>
        <see cref="T:System.Text.RegularExpressions.Group" /> represents the results from a single capturing group. A capturing group can capture zero, one, or more strings in a single match because of quantifiers, so <see cref="T:System.Text.RegularExpressions.Group" /> supplies a collection of <see cref="T:System.Text.RegularExpressions.Capture" /> objects.
                </summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Group.Captures">
      <summary>
                    Gets a collection of all the captures matched by the capturing group, in innermost-leftmost-first order (or innermost-rightmost-first order if the regular expression is modified with the <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft" /> option). The collection may have zero or more items.
                </summary>
      <returns>
                    The collection of substrings matched by the group.
                </returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Group.Success">
      <summary>
                    Gets a value indicating whether the match is successful.
                </summary>
      <returns>true if the match is successful; otherwise, false.
                </returns>
    </member>
    <member name="T:System.Text.RegularExpressions.GroupCollection">
      <summary>
                    Represents a collection of captured groups. <see cref="T:System.Text.RegularExpressions.GroupCollection" /> returns the set of captured groups in a single match.
                </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.CopyTo(System.Array,System.Int32)">
      <summary>
                    Copies all the elements of the collection to the given array beginning at the given index.
                </summary>
      <param name="array">
                    The array the collection is to be copied into. 
                </param>
      <param name="arrayIndex">
                    The position in the destination array where the copying is to begin. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Count">
      <summary>
                    Returns the number of groups in the collection.
                </summary>
      <returns>
                    The number of groups in the collection.
                </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.GetEnumerator">
      <summary>
                    Returns an enumerator that can iterate through the collection.
                </summary>
      <returns>
                    An IEnumerator object that contains all <see cref="T:System.Text.RegularExpressions.Group" /> objects in the <see cref="T:System.Text.RegularExpressions.GroupCollection" />.
                </returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.IsReadOnly">
      <summary>
                    Gets a value indicating whether the collection is read-only.
                </summary>
      <returns>true in all cases.
                </returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.IsSynchronized">
      <summary>
                    Gets a value indicating whether access to the <see cref="T:System.Text.RegularExpressions.GroupCollection" /> is synchronized (thread-safe).
                </summary>
      <returns>false in all cases.
                </returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Item(System.Int32)">
      <summary>
                    Enables access to a member of the collection by integer index.
                </summary>
      <returns>
                    The member of the collection specified by <paramref name="groupnum" />.
                </returns>
      <param name="groupnum">
                    Index of the collection member to be retrieved. 
                </param>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Item(System.String)">
      <summary>
                    Enables access to a member of the collection by string index.
                </summary>
      <returns>
                    The member of the collection specified by <paramref name="groupname" />.
                </returns>
      <param name="groupname">
                    Key of the collection member to be retrieved. 
                </param>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.SyncRoot">
      <summary>
                    Gets an object that can be used to synchronize access to the <see cref="T:System.Text.RegularExpressions.GroupCollection" />.
                </summary>
      <returns>
                    A copy of the <see cref="T:System.Text.RegularExpressions.Match" /> object to synchronize.
                </returns>
    </member>
    <member name="T:System.Text.RegularExpressions.Match">
      <summary>
                    Represents the results from a single regular expression match.
                </summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Match.Empty">
      <summary>
                    Gets the empty group. All failed matches return this empty match.
                </summary>
      <returns>
                    An empty <see cref="T:System.Text.RegularExpressions.Match" />.
                </returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Match.Groups">
      <summary>
                    Gets a collection of groups matched by the regular expression.
                </summary>
      <returns>
                    The character groups matched by the pattern.
                </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Match.NextMatch">
      <summary>
                    Returns a new <see cref="T:System.Text.RegularExpressions.Match" /> with the results for the next match, starting at the position at which the last match ended (at the character beyond the last matched character).
                </summary>
      <returns>
                    The next regular expression <see cref="T:System.Text.RegularExpressions.Match" /> object.
                </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Match.Result(System.String)">
      <summary>
                    Returns the expansion of the specified replacement pattern. 
                </summary>
      <returns>
                    The expanded version of the <paramref name="replacement" /> parameter.
                </returns>
      <param name="replacement">
                    The replacement pattern to use. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="replacement" /> is null.
                </exception>
      <exception cref="T:System.NotSupportedException">
                    Expansion is not allowed for this pattern.
                </exception>
    </member>
    <member name="T:System.Text.RegularExpressions.MatchCollection">
      <summary>
                    Represents the set of successful matches found by iteratively applying a regular expression pattern to the input string.
                </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)">
      <summary>
                    Copies all the elements of the collection to the given array starting at the given index.
                </summary>
      <param name="array">
                    The array the collection is to be copied into. 
                </param>
      <param name="arrayIndex">
                    The position in the array where copying is to begin. 
                </param>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.Count">
      <summary>
                    Gets the number of matches.
                </summary>
      <returns>
                    The number of matches.
                </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.GetEnumerator">
      <summary>
                    Provides an enumerator in the same order as <see cref="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)" />.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.IEnumerator" /> object that contains all Match objects within the MatchCollection.
                </returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.IsReadOnly">
      <summary>
                    Gets a value that indicates whether the collection is read only.
                </summary>
      <returns>
                    This value of this property is always true.
                </returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.IsSynchronized">
      <summary>
                    Gets a value indicating whether access to the collection is synchronized (thread-safe).
                </summary>
      <returns>
                    The value of this property is always false.
                </returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)">
      <summary>
                    Gets an individual member of the collection.
                </summary>
      <returns>
                    The captured substring at position <paramref name="i" /> in the collection.
                </returns>
      <param name="i">
                    Index into the Match collection. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> is less than 0 or greater than or equal to <see cref="P:System.Text.RegularExpressions.MatchCollection.Count" />. 
                </exception>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.SyncRoot">
      <summary>
                    Gets an object that can be used to synchronize access to the collection.
                </summary>
      <returns>
                    An object that can be used to synchronize access to the collection. This property always returns the object itself.
                </returns>
    </member>
    <member name="T:System.Text.RegularExpressions.MatchEvaluator">
      <summary>
                    Represents the method that is called each time a regular expression match is found during a <see cref="Overload:System.Text.RegularExpressions.Regex.Replace" /> method operation.
                </summary>
      <returns>
                    A string returned by the method that is represented by the <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> delegate.
                </returns>
      <param name="match">
                    The <see cref="T:System.Text.RegularExpressions.Match" /> object that represents a single regular expression match during a <see cref="Overload:System.Text.RegularExpressions.Regex.Replace" /> method operation. 
                </param>
    </member>
    <member name="T:System.Text.RegularExpressions.Regex">
      <summary>
                    Represents an immutable regular expression.
                </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.Regex" /> class.
                </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String)">
      <summary>
                    Initializes and compiles a new instance of the <see cref="T:System.Text.RegularExpressions.Regex" /> class for the specified regular expression.
                </summary>
      <param name="pattern">
                    The regular expression pattern to match. 
                </param>
      <exception cref="T:System.ArgumentException">
                    Regular expression parsing error.
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>
                    Initializes and compiles a new instance of the <see cref="T:System.Text.RegularExpressions.Regex" /> class for the specified regular expression, with options that modify the pattern.
                </summary>
      <param name="pattern">
                    The regular expression pattern to match. 
                </param>
      <param name="options">
                    A bitwise OR combination of <see cref="T:System.Text.RegularExpressions.RegexOptions" /> enumeration values. 
                </param>
      <exception cref="T:System.ArgumentException">
                    Regular expression parsing error. 
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> contains an invalid flag.
                </exception>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.CacheSize">
      <summary>
                    Gets or sets the maximum number of entries in the current static cache of compiled regular expressions.
                </summary>
      <returns>
                    The maximum number of entries in the static cache.
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The value in a set operation is less than zero.
                </exception>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.capsize">
      <summary>
                    Used internally by the regular expression engine. 
                </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.capslist">
      <summary>
                    Used internally by the regular expression engine. 
                </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Escape(System.String)">
      <summary>
                    Escapes a minimal set of metacharacters (\, *, +, ?, |, {, [, (,), ^, $,., #, and white space) by replacing them with their escape codes.
                </summary>
      <returns>
                    A string of characters with any metacharacters converted to their escaped form.
                </returns>
      <param name="str">
                    The input string containing the text to convert. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> is null.
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GetGroupNames">
      <summary>
                    Returns an array of capturing group names for the regular expression.
                </summary>
      <returns>
                    A string array of group names.
                </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GetGroupNumbers">
      <summary>
                    Returns an array of capturing group numbers that correspond to group names in an array.
                </summary>
      <returns>
                    An integer array of group numbers.
                </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GroupNameFromNumber(System.Int32)">
      <summary>
                    Gets the group name that corresponds to the specified group number.
                </summary>
      <returns>
                    The string containing the group name associated with the specified group number.
                </returns>
      <param name="i">
                    The group number to convert to the corresponding group name. 
                </param>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GroupNumberFromName(System.String)">
      <summary>
                    Returns the group number that corresponds to the specified group name.
                </summary>
      <returns>
                    The group number that corresponds to the specified group name.
                </returns>
      <param name="name">
                    The group name to convert to the corresponding group number. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.InitializeReferences">
      <summary>
                    Used internally by the regular expression engine. 
                </summary>
      <exception cref="T:System.NotSupportedException">
                    References have already been initialized. 
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String)">
      <summary>
                    Indicates whether the regular expression specified in the <see cref="T:System.Text.RegularExpressions.Regex" /> constructor finds a match in the input string.
                </summary>
      <returns>true if the regular expression finds a match; otherwise, false.
                </returns>
      <param name="input">
                    The string to search for a match. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null.
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.Int32)">
      <summary>
                    Indicates whether the regular expression specified in the <see cref="T:System.Text.RegularExpressions.Regex" /> constructor finds a match in the input string beginning at the specified starting position in the string.
                </summary>
      <returns>true if the regular expression finds a match; otherwise, false.
                </returns>
      <param name="input">
                    The string to search for a match. 
                </param>
      <param name="startat">
                    The character position at which to start the search. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> cannot be less than zero or greater than the length of <paramref name="input" />.
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)">
      <summary>
                    Indicates whether the regular expression finds a match in the input string using the regular expression specified in the <paramref name="pattern" /> parameter.
                </summary>
      <returns>true if the regular expression finds a match; otherwise, false.
                </returns>
      <param name="input">
                    The string to search for a match. 
                </param>
      <param name="pattern">
                    The regular expression pattern to match. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null.
                
                    -or-
                <paramref name="pattern" /> is null.
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>
                    Indicates whether the regular expression finds a match in the input string, using the regular expression specified in the <paramref name="pattern" /> parameter and the matching options supplied in the <paramref name="options" /> parameter.
                </summary>
      <returns>true if the regular expression finds a match; otherwise, false.
                </returns>
      <param name="input">
                    The string to search for a match. 
                </param>
      <param name="pattern">
                    The regular expression pattern to match. 
                </param>
      <param name="options">
                    A bitwise OR combination of <see cref="T:System.Text.RegularExpressions.RegexOptions" />  enumeration values. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null.
                
                    -or-
                <paramref name="pattern" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> is not a valid <see cref="T:System.Text.RegularExpressions.RegexOptions" />  value.
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String)">
      <summary>
                    Searches the specified input string for an occurrence of the regular expression specified in the <see cref="T:System.Text.RegularExpressions.Regex" /> constructor.
                </summary>
      <returns>
                    A regular expression <see cref="T:System.Text.RegularExpressions.Match" /> object.
                </returns>
      <param name="input">
                    The string to search for a match. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null.
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32)">
      <summary>
                    Searches the input string for an occurrence of a regular expression with a specified input string starting position.
                </summary>
      <returns>
                    A Regular Expression <see cref="T:System.Text.RegularExpressions.Match" /> object.
                </returns>
      <param name="input">
                    The string to search for a match. 
                </param>
      <param name="startat">
                    The zero-based character position at which to start the search. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null.
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32,System.Int32)">
      <summary>
                    Searches the input string for an occurrence of a regular expression with a specified input string starting position and input string length.
                </summary>
      <returns>
                    A regular expression <see cref="T:System.Text.RegularExpressions.Match" /> object.
                </returns>
      <param name="input">
                    The string to be tested for a match. 
                </param>
      <param name="beginning">
                    The zero-based character position in the input string at which to begin the search. 
                </param>
      <param name="length">
                    The number of characters in the substring to include in the search. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null.
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)">
      <summary>
                    Searches the specified input string for an occurrence of the regular expression supplied in the <paramref name="pattern" /> parameter.
                </summary>
      <returns>
                    A regular expression <see cref="T:System.Text.RegularExpressions.Match" /> object.
                </returns>
      <param name="input">
                    The string to search for a match. 
                </param>
      <param name="pattern">
                    The regular expression pattern to match. 
                </param>
      <exception cref="T:System.ArgumentException">
                    Regular expression parsing error.
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>
                    Searches the input string for an occurrence of the regular expression supplied in a <paramref name="pattern" /> parameter with matching options supplied in an <paramref name="options" /> parameter.
                </summary>
      <returns>
                    A regular expression <see cref="T:System.Text.RegularExpressions.Match" /> object.
                </returns>
      <param name="input">
                    The string to be tested for a match. 
                </param>
      <param name="pattern">
                    The regular expression pattern to match. 
                </param>
      <param name="options">
                    A bitwise OR combination of RegexOption enumeration values. 
                </param>
      <exception cref="T:System.ArgumentException">
                    Regular expression parsing error.
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String)">
      <summary>
                    Searches the specified input string for all occurrences of a regular expression.
                </summary>
      <returns>
                    A <see cref="T:System.Text.RegularExpressions.MatchCollection" /> of the <see cref="T:System.Text.RegularExpressions.Match" /> objects found by the search.
                </returns>
      <param name="input">
                    The string to search for a match. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null.
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.Int32)">
      <summary>
                    Searches the specified input string for all occurrences of a regular expression, beginning at the specified starting position in the string.
                </summary>
      <returns>
                    A <see cref="T:System.Text.RegularExpressions.MatchCollection" /> of the <see cref="T:System.Text.RegularExpressions.Match" /> objects found by the search.
                </returns>
      <param name="input">
                    The string to search for a match. 
                </param>
      <param name="startat">
                    The character position in the input string at which to start the search. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null.
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String)">
      <summary>
                    Searches the specified input string for all occurrences of the regular expression specified in the <paramref name="pattern" /> parameter.
                </summary>
      <returns>
                    The <see cref="T:System.Text.RegularExpressions.MatchCollection" /> of <see cref="T:System.Text.RegularExpressions.Match" /> objects found by the search.
                </returns>
      <param name="input">
                    The string to search for a match. 
                </param>
      <param name="pattern">
                    The regular expression pattern to match. 
                </param>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>
                    Searches the specified input string for all occurrences of the regular expression supplied in a <paramref name="pattern" /> parameter with matching options supplied in an <paramref name="options" /> parameter.
                </summary>
      <returns>
                    The <see cref="T:System.Text.RegularExpressions.MatchCollection" /> of <see cref="T:System.Text.RegularExpressions.Match" /> objects found by the search.
                </returns>
      <param name="input">
                    The string to search for a match. 
                </param>
      <param name="pattern">
                    The regular expression pattern to match. 
                </param>
      <param name="options">
                    A bitwise OR combination of RegexOption enumeration values. 
                </param>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.Options">
      <summary>
                    Returns the options passed into the <see cref="T:System.Text.RegularExpressions.Regex" /> constructor.
                </summary>
      <returns>
                    The <paramref name="options" /> parameter that was passed into the Regex constructor.
                </returns>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.pattern">
      <summary>
                    Used internally by the regular expression engine. 
                </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)">
      <summary>
                    Within a specified input string, replaces all strings that match a regular expression pattern with a specified replacement string. 
                </summary>
      <returns>
                    A new string that is identical to the input string, except that a replacement string takes the place of each matched string.
                </returns>
      <param name="input">
                    The string to search for a match. 
                </param>
      <param name="replacement">
                    The replacement string. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null.
                
                    -or-
                <paramref name="replacement" /> is null.
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32)">
      <summary>
                    Within a specified input string, replaces a specified maximum number of strings that match a regular expression pattern with a specified replacement string. 
                </summary>
      <returns>
                    A new string that is identical to the input string, except that a replacement string takes the place of each matched string.
                </returns>
      <param name="input">
                    The string to search for a match. 
                </param>
      <param name="replacement">
                    The replacement string. 
                </param>
      <param name="count">
                    The maximum number of times the replacement can occur. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null.
                
                    -or-
                <paramref name="replacement" /> is null.
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32,System.Int32)">
      <summary>
                    Within a specified input substring, replaces a specified maximum number of strings that match a regular expression pattern with a specified replacement string. 
                </summary>
      <returns>
                    A new string that is identical to the input string, except that a replacement string takes the place of each matched string.
                </returns>
      <param name="input">
                    The string to search for a match. 
                </param>
      <param name="replacement">
                    The replacement string. 
                </param>
      <param name="count">
                    Maximum number of times the replacement can occur. 
                </param>
      <param name="startat">
                    The character position in the input string where the search begins. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null.
                
                    -or-
                <paramref name="replacement" /> is null.
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)">
      <summary>
                    Within a specified input string, replaces all strings that match a specified regular expression with a specified replacement string. 
                </summary>
      <returns>
                    A new string that is identical to the input string, except that a replacement string takes the place of each matched string.
                </returns>
      <param name="input">
                    The string to search for a match. 
                </param>
      <param name="pattern">
                    The regular expression pattern to match. 
                </param>
      <param name="replacement">
                    The replacement string. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null.
                
                    -or-
                <paramref name="pattern" /> is null.
                
                    -or-
                <paramref name="replacement" /> is null.
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>
                    Within a specified input string, replaces all strings that match a specified regular expression with a specified replacement string. Specified options modify the matching operation. 
                </summary>
      <returns>
                    A new string that is identical to the input string, except that a replacement string takes the place of each matched string.
                </returns>
      <param name="input">
                    The string to search for a match. 
                </param>
      <param name="pattern">
                    The regular expression pattern to match. 
                </param>
      <param name="replacement">
                    The replacement string. 
                </param>
      <param name="options">
                    A bitwise OR combination of <see cref="T:System.Text.RegularExpressions.RegexOptions" /> enumeration values. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null.
                
                    -or-
                <paramref name="pattern" /> is null.
                
                    -or-
                <paramref name="replacement" /> is null.
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)">
      <summary>
                    Within a specified input string, replaces all strings that match a specified regular expression with a string returned by a <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> delegate.
                </summary>
      <returns>
                    A new string that is identical to the input string, except that a replacement string takes the place of each matched string.
                </returns>
      <param name="input">
                    The string to search for a match. 
                </param>
      <param name="pattern">
                    The regular expression pattern to match. 
                </param>
      <param name="evaluator">
                    A custom method that examines each match and returns either the original matched string or a replacement string.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null.
                
                    -or-
                <paramref name="pattern" /> is null.
                
                    -or-
                <paramref name="evaluator" /> is null.
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)">
      <summary>
                    Within a specified input string, replaces all strings that match a specified regular expression with a string returned by a <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> delegate. Specified options modify the matching operation.
                </summary>
      <returns>
                    A new string that is identical to the input string, except that a replacement string takes the place of each matched string.
                </returns>
      <param name="input">
                    The string to search for a match. 
                </param>
      <param name="pattern">
                    The regular expression pattern to match. 
                </param>
      <param name="evaluator">
                    A custom method that examines each match and returns either the original matched string or a replacement string. 
                </param>
      <param name="options">
                    A bitwise OR combination of <see cref="T:System.Text.RegularExpressions.RegexOptions" /> enumeration values. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null.
                
                    -or-
                <paramref name="pattern" /> is null.
                
                    -or-
                <paramref name="evaluator" /> is null.
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator)">
      <summary>
                    Within a specified input string, replaces all strings that match a specified regular expression with a string returned by a <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> delegate.
                </summary>
      <returns>
                    A new string that is identical to the input string, except that a replacement string takes the place of each matched string.
                </returns>
      <param name="input">
                    The string to search for a match. 
                </param>
      <param name="evaluator">
                    A custom method that examines each match and returns either the original matched string or a replacement string.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null.
                
                    -or-
                <paramref name="evaluator" /> is null.
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32)">
      <summary>
                    Within a specified input string, replaces a specified maximum number of strings that match a regular expression pattern with a string returned by a <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> delegate.
                </summary>
      <returns>
                    A new string that is identical to the input string, except that a replacement string takes the place of each matched string.
                </returns>
      <param name="input">
                    The string to search for a match. 
                </param>
      <param name="evaluator">
                    A custom method that examines each match and returns either the original matched string or a replacement string.
                </param>
      <param name="count">
                    The maximum number of times the replacement will occur. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null.
                
                    -or-
                <paramref name="evaluator" /> is null.
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32,System.Int32)">
      <summary>
                    Within a specified input substring, replaces a specified maximum number of strings that match a regular expression pattern with a string returned by a <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> delegate.
                </summary>
      <returns>
                    A new string that is identical to the input string, except that a replacement string takes the place of each matched string.
                </returns>
      <param name="input">
                    The string to search for a match. 
                </param>
      <param name="evaluator">
                    A custom method that examines each match and returns either the original matched string or a replacement string.
                </param>
      <param name="count">
                    The maximum number of times the replacement will occur. 
                </param>
      <param name="startat">
                    The character position in the input string where the search begins. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null.
                
                    -or-
                <paramref name="evaluator" /> is null.
                </exception>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.RightToLeft">
      <summary>
                    Gets a value indicating whether the regular expression searches from right to left.
                </summary>
      <returns>true if the regular expression searches from right to left; otherwise false.
                </returns>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.roptions">
      <summary>
                    Used internally by the regular expression engine. 
                </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String)">
      <summary>
                    Splits the specified input string at the positions defined by a regular expression pattern specified in the <see cref="T:System.Text.RegularExpressions.Regex" /> constructor.
                </summary>
      <returns>
                    An array of strings.
                </returns>
      <param name="input">
                    The string to split. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null.
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32)">
      <summary>
                    Splits the specified input string a specified maximum number of times at the positions defined by a regular expression specified in the <see cref="T:System.Text.RegularExpressions.Regex" /> constructor.
                </summary>
      <returns>
                    An array of strings.
                </returns>
      <param name="input">
                    The string to be split. 
                </param>
      <param name="count">
                    The maximum number of times the split can occur. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null.
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32,System.Int32)">
      <summary>
                    Splits the specified input string a specified maximum number of times at the positions defined by a regular expression specified in the <see cref="T:System.Text.RegularExpressions.Regex" /> constructor. The search for the regular expression pattern starts at a specified character position in the input string.
                </summary>
      <returns>
                    An array of strings.
                </returns>
      <param name="input">
                    The string to be split. 
                </param>
      <param name="count">
                    The maximum number of times the split can occur. 
                </param>
      <param name="startat">
                    The character position in the input string where the search will begin. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null.
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String)">
      <summary>
                    Splits the input string at the positions defined by a regular expression pattern.
                </summary>
      <returns>
                    An array of strings.
                </returns>
      <param name="input">
                    The string to split. 
                </param>
      <param name="pattern">
                    The regular expression pattern to match. 
                </param>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>
                    Splits the input string at the positions defined by a specified regular expression pattern. Specified options modify the matching operation.
                </summary>
      <returns>
                    An array of strings.
                </returns>
      <param name="input">
                    The string to split. 
                </param>
      <param name="pattern">
                    The regular expression pattern to match. 
                </param>
      <param name="options">
                    A bitwise OR combination of <see cref="T:System.Text.RegularExpressions.RegexOptions" /> enumeration values. 
                </param>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.ToString">
      <summary>
                    Returns the regular expression pattern that was passed into the Regex constructor.
                </summary>
      <returns>
                    The <paramref name="pattern" /> parameter that was passed into the Regex constructor.
                </returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Unescape(System.String)">
      <summary>
                    Unescapes any escaped characters in the input string.
                </summary>
      <returns>
                    A string of characters with any escaped characters converted to their unescaped form.
                </returns>
      <param name="str">
                    The input string containing the text to convert. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> is null.
                </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.UseOptionR">
      <summary>
                    Used internally by the regular expression engine.
                </summary>
      <returns>true if the <see cref="P:System.Text.RegularExpressions.Regex.Options" /> property contains the <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft" /> option; otherwise, false.
                </returns>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexOptions">
      <summary>
                    Provides enumerated values to use to set regular expression options.
                </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.None">
      <summary>
                    Specifies that no options are set.
                </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase">
      <summary>
                    Specifies case-insensitive matching.
                </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Multiline">
      <summary>
                    Multiline mode. Changes the meaning of ^ and $ so they match at the beginning and end, respectively, of any line, and not just the beginning and end of the entire string.
                </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.ExplicitCapture">
      <summary>
                    Specifies that the only valid captures are explicitly named or numbered groups of the form (?&lt;name&gt;…). This allows unnamed parentheses to act as noncapturing groups without the syntactic clumsiness of the expression (?:…).
                </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Singleline">
      <summary>
                    Specifies single-line mode. Changes the meaning of the dot (.) so it matches every character (instead of every character except \n).
                </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace">
      <summary>
                    Eliminates unescaped white space from the pattern and enables comments marked with #. However, the <see cref="F:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace" /> value does not affect or eliminate white space in character classes 
                </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.RightToLeft">
      <summary>
                    Specifies that the search will be from right to left instead of from left to right.
                </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.ECMAScript">
      <summary>
                    Enables ECMAScript-compliant behavior for the expression. This value can be used only in conjunction with the <see cref="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase" /> and <see cref="F:System.Text.RegularExpressions.RegexOptions.Multiline" /> values. The use of this value with any other values results in an exception.
                </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.CultureInvariant">
      <summary>
                    Specifies that cultural differences in language are ignored. Ordinarily, the regular expression engine performs string comparisons based on the conventions of the current culture. If the <see cref="F:System.Text.RegularExpressions.RegexOptions.CultureInvariant" /> option is specified, it uses the conventions of the invariant culture.
                </summary>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\2.0.31005.0\ReferenceAssemblies\System.Xml.Xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Xml</name>
  </assembly>
  <members>
    <member name="T:System.Xml.ConformanceLevel">
      <summary>
                    Specifies the amount of input or output checking that the created <see cref="T:System.Xml.XmlReader" /> and <see cref="T:System.Xml.XmlWriter" /> objects perform.
                </summary>
    </member>
    <member name="F:System.Xml.ConformanceLevel.Auto">
      <summary>
                    The <see cref="T:System.Xml.XmlReader" /> or <see cref="T:System.Xml.XmlWriter" /> object automatically detects whether document or fragment checking should be performed, and does the appropriate checking. In the case where you are wrapping another <see cref="T:System.Xml.XmlReader" /> or <see cref="T:System.Xml.XmlWriter" /> object, the outer object does not do any additional conformance checking. Conformance checking is left up to the underlying object.
                </summary>
    </member>
    <member name="F:System.Xml.ConformanceLevel.Fragment">
      <summary>
                    The XML data is a well-formed XML fragment.
                </summary>
    </member>
    <member name="F:System.Xml.ConformanceLevel.Document">
      <summary>
                    The XML data is in conformance to the rules for a well-formed XML 1.0 document.
                </summary>
    </member>
    <member name="T:System.Xml.DtdProcessing">
      <summary>
                    Specifies the options for processing DTDs. The <see cref="T:System.Xml.DtdProcessing" /> enumeration is used by <see cref="T:System.Xml.XmlReaderSettings" />.  
                </summary>
    </member>
    <member name="F:System.Xml.DtdProcessing.Prohibit">
      <summary>
                    Specifies that when a DTD is encountered, an <see cref="T:System.Xml.XmlException" /> is thrown with a message that states that DTDs are prohibited. This is the default behavior.
                </summary>
    </member>
    <member name="F:System.Xml.DtdProcessing.Ignore">
      <summary>
                    Causes the DOCTYPE element to be ignored. No DTD processing occurs. Warning: The DTD/DOCTYPE will be lost on output.
                </summary>
    </member>
    <member name="F:System.Xml.DtdProcessing.Parse">
      <summary>
                    Is used for parsing DTDs.
                </summary>
    </member>
    <member name="T:System.Xml.IXmlLineInfo">
      <summary>
                    Provides an interface to enable a class to return line and position information.
                </summary>
    </member>
    <member name="M:System.Xml.IXmlLineInfo.HasLineInfo">
      <summary>
                    Gets a value indicating whether the class can return line information.
                </summary>
      <returns>true if <see cref="P:System.Xml.IXmlLineInfo.LineNumber" /> and <see cref="P:System.Xml.IXmlLineInfo.LinePosition" /> can be provided; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Xml.IXmlLineInfo.LineNumber">
      <summary>
                    Gets the current line number.
                </summary>
      <returns>
                    The current line number or 0 if no line information is available (for example, <see cref="M:System.Xml.IXmlLineInfo.HasLineInfo" /> returns false).
                </returns>
    </member>
    <member name="P:System.Xml.IXmlLineInfo.LinePosition">
      <summary>
                    Gets the current line position.
                </summary>
      <returns>
                    The current line position or 0 if no line information is available (for example, <see cref="M:System.Xml.IXmlLineInfo.HasLineInfo" /> returns false).
                </returns>
    </member>
    <member name="T:System.Xml.IXmlNamespaceResolver">
      <summary>
                    Provides read-only access to a set of prefix and namespace mappings. 
                </summary>
    </member>
    <member name="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>
                    Gets a collection of defined prefix-namespace mappings that are currently in scope.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.IDictionary" /> that contains the current in-scope namespaces.
                </returns>
      <param name="scope">
                    An <see cref="T:System.Xml.XmlNamespaceScope" /> value that specifies the type of namespace nodes to return.
                </param>
    </member>
    <member name="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)">
      <summary>
                    Gets the namespace URI mapped to the specified prefix.
                </summary>
      <returns>
                    The namespace URI that is mapped to the prefix; null if the prefix is not mapped to a namespace URI.
                </returns>
      <param name="prefix">
                    The prefix whose namespace URI you wish to find.
                </param>
    </member>
    <member name="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)">
      <summary>
                    Gets the prefix that is mapped to the specified namespace URI.
                </summary>
      <returns>
                    The prefix that is mapped to the namespace URI; null if the namespace URI is not mapped to a prefix.
                </returns>
      <param name="namespaceName">
                    The namespace URI whose prefix you wish to find.
                </param>
    </member>
    <member name="T:System.Xml.NamespaceHandling">
      <summary>
                    Specifies whether to remove duplicate namespace declarations in the <see cref="T:System.Xml.XmlWriter" />.
                </summary>
    </member>
    <member name="F:System.Xml.NamespaceHandling.Default">
      <summary>
                    The default behavior does not remove duplicate namespace declarations. 
                </summary>
    </member>
    <member name="F:System.Xml.NamespaceHandling.OmitDuplicates">
      <summary>
                    Remove duplicate namespace declarations. For the duplicate namespace to be removed, the prefix and the namespace have to match.
                </summary>
    </member>
    <member name="T:System.Xml.NameTable">
      <summary>
                    Implements a single-threaded <see cref="T:System.Xml.XmlNameTable" />.
                </summary>
    </member>
    <member name="M:System.Xml.NameTable.#ctor">
      <summary>
                    Initializes a new instance of the NameTable class.
                </summary>
    </member>
    <member name="M:System.Xml.NameTable.Add(System.Char[],System.Int32,System.Int32)">
      <summary>
                    Atomizes the specified string and adds it to the NameTable.
                </summary>
      <returns>
                    The atomized string or the existing string if one already exists in the NameTable. If <paramref name="len" /> is zero, String.Empty is returned.
                </returns>
      <param name="key">
                    The character array containing the string to add. 
                </param>
      <param name="start">
                    The zero-based index into the array specifying the first character of the string. 
                </param>
      <param name="len">
                    The number of characters in the string. 
                </param>
      <exception cref="T:System.IndexOutOfRangeException">
                    0 &gt; <paramref name="start" />
                    -or- 
                <paramref name="start" /> &gt;= <paramref name="key" />.Length 
                
                    -or- 
                <paramref name="len" /> &gt;= <paramref name="key" />.Length 
                
                    The above conditions do not cause an exception to be thrown if <paramref name="len" /> =0. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="len" /> &lt; 0. 
                </exception>
    </member>
    <member name="M:System.Xml.NameTable.Add(System.String)">
      <summary>
                    Atomizes the specified string and adds it to the NameTable.
                </summary>
      <returns>
                    The atomized string or the existing string if it already exists in the NameTable.
                </returns>
      <param name="key">
                    The string to add. 
                </param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="key" /> is null. 
                </exception>
    </member>
    <member name="M:System.Xml.NameTable.Get(System.Char[],System.Int32,System.Int32)">
      <summary>
                    Gets the atomized string containing the same characters as the specified range of characters in the given array.
                </summary>
      <returns>
                    The atomized string or null if the string has not already been atomized. If <paramref name="len" /> is zero, String.Empty is returned.
                </returns>
      <param name="key">
                    The character array containing the name to find. 
                </param>
      <param name="start">
                    The zero-based index into the array specifying the first character of the name. 
                </param>
      <param name="len">
                    The number of characters in the name. 
                </param>
      <exception cref="T:System.IndexOutOfRangeException">
                    0 &gt; <paramref name="start" />
                    -or- 
                <paramref name="start" /> &gt;= <paramref name="key" />.Length 
                
                    -or- 
                <paramref name="len" /> &gt;= <paramref name="key" />.Length 
                
                    The above conditions do not cause an exception to be thrown if <paramref name="len" /> =0. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="len" /> &lt; 0. 
                </exception>
    </member>
    <member name="M:System.Xml.NameTable.Get(System.String)">
      <summary>
                    Gets the atomized string with the specified value.
                </summary>
      <returns>
                    The atomized string object or null if the string has not already been atomized.
                </returns>
      <param name="value">
                    The name to find. 
                </param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="value" /> is null. 
                </exception>
    </member>
    <member name="T:System.Xml.NewLineHandling">
      <summary>
                    Specifies how to handle line breaks.
                </summary>
    </member>
    <member name="F:System.Xml.NewLineHandling.Replace">
      <summary>
                    New line characters are replaced to match the character specified in the <see cref="P:System.Xml.XmlWriterSettings.NewLineChars" /> property.
                </summary>
    </member>
    <member name="F:System.Xml.NewLineHandling.Entitize">
      <summary>
                    New line characters are entitized. This setting preserves all characters when the output is read by a normalizing <see cref="T:System.Xml.XmlReader" />.
                </summary>
    </member>
    <member name="F:System.Xml.NewLineHandling.None">
      <summary>
                    The new line characters are unchanged. The output is the same as the input.
                </summary>
    </member>
    <member name="T:System.Xml.ReadState">
      <summary>
                    Specifies the state of the reader.
                </summary>
    </member>
    <member name="F:System.Xml.ReadState.Initial">
      <summary>
                    The Read method has not been called.
                </summary>
    </member>
    <member name="F:System.Xml.ReadState.Interactive">
      <summary>
                    The Read method has been called. Additional methods may be called on the reader.
                </summary>
    </member>
    <member name="F:System.Xml.ReadState.Error">
      <summary>
                    An error occurred that prevents the read operation from continuing.
                </summary>
    </member>
    <member name="F:System.Xml.ReadState.EndOfFile">
      <summary>
                    The end of the file has been reached successfully.
                </summary>
    </member>
    <member name="F:System.Xml.ReadState.Closed">
      <summary>
                    The <see cref="M:System.Xml.XmlReader.Close" /> method has been called.
                </summary>
    </member>
    <member name="T:System.Xml.WriteState">
      <summary>
                    Specifies the state of the <see cref="T:System.Xml.XmlWriter" />.
                </summary>
    </member>
    <member name="F:System.Xml.WriteState.Start">
      <summary>
                    A Write method has not been called.
                </summary>
    </member>
    <member name="F:System.Xml.WriteState.Prolog">
      <summary>
                    The prolog is being written.
                </summary>
    </member>
    <member name="F:System.Xml.WriteState.Element">
      <summary>
                    An element start tag is being written.
                </summary>
    </member>
    <member name="F:System.Xml.WriteState.Attribute">
      <summary>
                    An attribute value is being written.
                </summary>
    </member>
    <member name="F:System.Xml.WriteState.Content">
      <summary>
                    The element content is being written.
                </summary>
    </member>
    <member name="F:System.Xml.WriteState.Closed">
      <summary>
                    The <see cref="M:System.Xml.XmlWriter.Close" /> method has been called.
                </summary>
    </member>
    <member name="F:System.Xml.WriteState.Error">
      <summary>
                    An exception has been thrown, which has left the <see cref="T:System.Xml.XmlWriter" /> in an invalid state. You can call the <see cref="M:System.Xml.XmlWriter.Close" /> method to put the <see cref="T:System.Xml.XmlWriter" /> in the <see cref="F:System.Xml.WriteState.Closed" /> state. Any other <see cref="T:System.Xml.XmlWriter" /> method call will result in an <see cref="T:System.InvalidOperationException" />.
                </summary>
    </member>
    <member name="T:System.Xml.XmlConvert">
      <summary>
                    Encodes and decodes XML names and provides methods for converting between common language runtime types. When converting data types the values returned are locale independent.
                </summary>
    </member>
    <member name="M:System.Xml.XmlConvert.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Xml.XmlConvert" /> class. 
                </summary>
    </member>
    <member name="M:System.Xml.XmlConvert.DecodeName(System.String)">
      <summary>
                    Decodes a name. This method does the reverse of the <see cref="M:System.Xml.XmlConvert.EncodeName(System.String)" /> and <see cref="M:System.Xml.XmlConvert.EncodeLocalName(System.String)" /> methods.
                </summary>
      <returns>
                    The decoded name.
                </returns>
      <param name="name">
                    The name to be transformed. 
                </param>
    </member>
    <member name="M:System.Xml.XmlConvert.EncodeLocalName(System.String)">
      <summary>
                    Converts the name to a valid XML local name.
                </summary>
      <returns>
                    The encoded name.
                </returns>
      <param name="name">
                    The name to be encoded. 
                </param>
    </member>
    <member name="M:System.Xml.XmlConvert.EncodeName(System.String)">
      <summary>
                    Converts the name to a valid XML name.
                </summary>
      <returns>
                    Returns the name with any invalid characters replaced by an escape string.
                </returns>
      <param name="name">
                    A name to be translated. 
                </param>
    </member>
    <member name="M:System.Xml.XmlConvert.EncodeNmToken(System.String)">
      <summary>
                    Verifies the name is valid according to the XML specification.
                </summary>
      <returns>
                    The encoded name.
                </returns>
      <param name="name">
                    The name to be encoded. 
                </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToBoolean(System.String)">
      <summary>
                    Converts the <see cref="T:System.String" /> to a <see cref="T:System.Boolean" /> equivalent.
                </summary>
      <returns>
                    A Boolean value, that is, true or false.
                </returns>
      <param name="s">
                    The string to convert. 
                </param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a Boolean value. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToByte(System.String)">
      <summary>
                    Converts the <see cref="T:System.String" /> to a <see cref="T:System.Byte" /> equivalent.
                </summary>
      <returns>
                    A Byte equivalent of the string.
                </returns>
      <param name="s">
                    The string to convert. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToChar(System.String)">
      <summary>
                    Converts the <see cref="T:System.String" /> to a <see cref="T:System.Char" /> equivalent.
                </summary>
      <returns>
                    A Char representing the single character.
                </returns>
      <param name="s">
                    The string containing a single character to convert. 
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The value of the <paramref name="s" /> parameter is null. 
                </exception>
      <exception cref="T:System.FormatException">
                    The <paramref name="s" /> parameter contains more than one character. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTime(System.String,System.String)">
      <summary>
                    Converts the <see cref="T:System.String" /> to a <see cref="T:System.DateTime" /> equivalent.
                </summary>
      <returns>
                    A DateTime equivalent of the string.
                </returns>
      <param name="s">
                    The string to convert. 
                </param>
      <param name="format">
                    The format structure to apply to the converted DateTime. Valid formats include "yyyy-MM-ddTHH:mm:sszzzzzz" and its subsets. The string is validated against this format. 
                </param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> or <paramref name="format" /> is String.Empty 
                
                    -or- 
                <paramref name="s" /> does not contain a date and time that corresponds to <paramref name="format" />. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTime(System.String,System.String[])">
      <summary>
                    Converts the <see cref="T:System.String" /> to a <see cref="T:System.DateTime" /> equivalent.
                </summary>
      <returns>
                    A DateTime equivalent of the string.
                </returns>
      <param name="s">
                    The string to convert. 
                </param>
      <param name="formats">
                    An array containing the format structures to apply to the converted DateTime. Valid formats include "yyyy-MM-ddTHH:mm:sszzzzzz" and its subsets. 
                </param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> or an element of <paramref name="formats" /> is String.Empty 
                
                    -or- 
                <paramref name="s" /> does not contain a date and time that corresponds to any of the elements of <paramref name="formats" />. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTime(System.String,System.Xml.XmlDateTimeSerializationMode)">
      <summary>
                    Converts the <see cref="T:System.String" /> to a <see cref="T:System.DateTime" /> using the <see cref="T:System.Xml.XmlDateTimeSerializationMode" /> specified
                </summary>
      <returns>
                    A <see cref="T:System.DateTime" /> equivalent of the <see cref="T:System.String" />.
                </returns>
      <param name="s">
                    The <see cref="T:System.String" /> value to convert.
                </param>
      <param name="dateTimeOption">
                    One of the <see cref="T:System.Xml.XmlDateTimeSerializationMode" /> values that specify whether the date should be converted to local time or preserved as Coordinated Universal Time (UTC), if it is a UTC date.
                </param>
      <exception cref="T:System.NullReferenceException">
                    The <paramref name="dateTimeOption" /> value is null.
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is an empty string or is not in a valid format.
                </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTimeOffset(System.String)">
      <summary>
                    Converts the supplied <see cref="T:System.String" /> to a <see cref="T:System.DateTimeOffset" /> equivalent.
                </summary>
      <returns>
                    The <see cref="T:System.DateTimeOffset" /> equivalent of the supplied string.
                </returns>
      <param name="s">
                    The string to convert.
                Note:
					The string must conform to a subset of the W3C Recommendation for the XML dateTime type. For more information see 
								
								http://www.w3.org/TR/xmlschema-2/#dateTime.
							</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The argument passed to this method is outside the range of allowable values. For information about allowable values, see <see cref="T:System.DateTimeOffset" />.
                </exception>
      <exception cref="T:System.FormatException">
                    The argument passed to this method does not conform to a subset of the W3C Recommendations for the XML dateTime type. For more information see http://www.w3.org/TR/xmlschema-2/#dateTime.
                </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTimeOffset(System.String,System.String)">
      <summary>
                    Converts the supplied <see cref="T:System.String" /> to a <see cref="T:System.DateTimeOffset" /> equivalent.
                </summary>
      <returns>
                    The <see cref="T:System.DateTimeOffset" /> equivalent of the supplied string.
                </returns>
      <param name="s">
                    The string to convert.
                </param>
      <param name="format">
                    The format from which <paramref name="s" /> is converted. The format parameter can be any subset of the W3C Recommendation for the XML dateTime type. (For more information see http://www.w3.org/TR/xmlschema-2/#dateTime.) The string <paramref name="s" /> is validated against this format.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> or <paramref name="format" /> is an empty string or is not in the specified format.
                </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTimeOffset(System.String,System.String[])">
      <summary>
                    Converts the supplied <see cref="T:System.String" /> to a <see cref="T:System.DateTimeOffset" /> equivalent.
                </summary>
      <returns>
                    The <see cref="T:System.DateTimeOffset" /> equivalent of the supplied string.
                </returns>
      <param name="s">
                    The string to convert.
                </param>
      <param name="formats">
                    An array of formats from which <paramref name="s" /> can be converted. Each format in <paramref name="formats" /> can be any subset of the W3C Recommendation for the XML dateTime type. (For more information see http://www.w3.org/TR/xmlschema-2/#dateTime.) The string <paramref name="s" /> is validated against one of these formats.
                </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDecimal(System.String)">
      <summary>
                    Converts the <see cref="T:System.String" /> to a <see cref="T:System.Decimal" /> equivalent.
                </summary>
      <returns>
                    A Decimal equivalent of the string.
                </returns>
      <param name="s">
                    The string to convert. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDouble(System.String)">
      <summary>
                    Converts the <see cref="T:System.String" /> to a <see cref="T:System.Double" /> equivalent.
                </summary>
      <returns>
                    A Double equivalent of the string.
                </returns>
      <param name="s">
                    The string to convert. 
                </param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToGuid(System.String)">
      <summary>
                    Converts the <see cref="T:System.String" /> to a <see cref="T:System.Guid" /> equivalent.
                </summary>
      <returns>
                    A Guid equivalent of the string.
                </returns>
      <param name="s">
                    The string to convert. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToInt16(System.String)">
      <summary>
                    Converts the <see cref="T:System.String" /> to a <see cref="T:System.Int16" /> equivalent.
                </summary>
      <returns>
                    An Int16 equivalent of the string.
                </returns>
      <param name="s">
                    The string to convert. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToInt32(System.String)">
      <summary>
                    Converts the <see cref="T:System.String" /> to a <see cref="T:System.Int32" /> equivalent.
                </summary>
      <returns>
                    An Int32 equivalent of the string.
                </returns>
      <param name="s">
                    The string to convert. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToInt64(System.String)">
      <summary>
                    Converts the <see cref="T:System.String" /> to a <see cref="T:System.Int64" /> equivalent.
                </summary>
      <returns>
                    An Int64 equivalent of the string.
                </returns>
      <param name="s">
                    The string to convert. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToSByte(System.String)">
      <summary>
                    Converts the <see cref="T:System.String" /> to a <see cref="T:System.SByte" /> equivalent.
                </summary>
      <returns>
                    An SByte equivalent of the string.
                </returns>
      <param name="s">
                    The string to convert. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToSingle(System.String)">
      <summary>
                    Converts the <see cref="T:System.String" /> to a <see cref="T:System.Single" /> equivalent.
                </summary>
      <returns>
                    A Single equivalent of the string.
                </returns>
      <param name="s">
                    The string to convert. 
                </param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Boolean)">
      <summary>
                    Converts the <see cref="T:System.Boolean" /> to a <see cref="T:System.String" />.
                </summary>
      <returns>
                    A string representation of the Boolean, that is, "true" or "false".
                </returns>
      <param name="value">
                    The value to convert. 
                </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Char)">
      <summary>
                    Converts the <see cref="T:System.Char" /> to a <see cref="T:System.String" />.
                </summary>
      <returns>
                    A string representation of the Char.
                </returns>
      <param name="value">
                    The value to convert. 
                </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTime,System.Xml.XmlDateTimeSerializationMode)">
      <summary>
                    Converts the <see cref="T:System.DateTime" /> to a <see cref="T:System.String" /> using the <see cref="T:System.Xml.XmlDateTimeSerializationMode" /> specified.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> equivalent of the <see cref="T:System.DateTime" />.
                </returns>
      <param name="value">
                    The <see cref="T:System.DateTime" /> value to convert.
                </param>
      <param name="dateTimeOption">
                    One of the <see cref="T:System.Xml.XmlDateTimeSerializationMode" /> values that specify how to treat the <see cref="T:System.DateTime" /> value.
                </param>
      <exception cref="T:System.ArgumentException">
                    The <paramref name="dateTimeOption" /> value is not valid.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="value" /> or <paramref name="dateTimeOption" /> value is null.
                </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTimeOffset)">
      <summary>
                    Converts the supplied <see cref="T:System.DateTimeOffset" /> to a <see cref="T:System.String" />.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> representation of the supplied <see cref="T:System.DateTimeOffset" />.
                </returns>
      <param name="value">
                    The <see cref="T:System.DateTimeOffset" /> to be converted.
                </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTimeOffset,System.String)">
      <summary>
                    Converts the supplied <see cref="T:System.DateTimeOffset" /> to a <see cref="T:System.String" /> in the specified format.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> representation in the specified format of the supplied <see cref="T:System.DateTimeOffset" />.
                </returns>
      <param name="value">
                    The <see cref="T:System.DateTimeOffset" /> to be converted.
                </param>
      <param name="format">
                    The format to which <paramref name="s" /> is converted. The format parameter can be any subset of the W3C Recommendation for the XML dateTime type. (For more information see http://www.w3.org/TR/xmlschema-2/#dateTime.)
                </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Decimal)">
      <summary>
                    Converts the <see cref="T:System.Decimal" /> to a <see cref="T:System.String" />.
                </summary>
      <returns>
                    A string representation of the Decimal.
                </returns>
      <param name="value">
                    The value to convert. 
                </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Double)">
      <summary>
                    Converts the <see cref="T:System.Double" /> to a <see cref="T:System.String" />.
                </summary>
      <returns>
                    A string representation of the Double.
                </returns>
      <param name="value">
                    The value to convert. 
                </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Guid)">
      <summary>
                    Converts the <see cref="T:System.Guid" /> to a <see cref="T:System.String" />.
                </summary>
      <returns>
                    A string representation of the Guid.
                </returns>
      <param name="value">
                    The value to convert. 
                </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Int16)">
      <summary>
                    Converts the <see cref="T:System.Int16" /> to a <see cref="T:System.String" />.
                </summary>
      <returns>
                    A string representation of the Int16.
                </returns>
      <param name="value">
                    The value to convert. 
                </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Int32)">
      <summary>
                    Converts the <see cref="T:System.Int32" /> to a <see cref="T:System.String" />.
                </summary>
      <returns>
                    A string representation of the Int32.
                </returns>
      <param name="value">
                    The value to convert. 
                </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Int64)">
      <summary>
                    Converts the <see cref="T:System.Int64" /> to a <see cref="T:System.String" />.
                </summary>
      <returns>
                    A string representation of the Int64.
                </returns>
      <param name="value">
                    The value to convert. 
                </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.SByte)">
      <summary>
                    Converts the <see cref="T:System.SByte" /> to a <see cref="T:System.String" />.
                </summary>
      <returns>
                    A string representation of the SByte.
                </returns>
      <param name="value">
                    The value to convert. 
                </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Single)">
      <summary>
                    Converts the <see cref="T:System.Single" /> to a <see cref="T:System.String" />.
                </summary>
      <returns>
                    A string representation of the Single.
                </returns>
      <param name="value">
                    The value to convert. 
                </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.TimeSpan)">
      <summary>
                    Converts the <see cref="T:System.TimeSpan" /> to a <see cref="T:System.String" />.
                </summary>
      <returns>
                    A string representation of the TimeSpan.
                </returns>
      <param name="value">
                    The value to convert. 
                </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.UInt32)">
      <summary>
                    Converts the <see cref="T:System.UInt32" /> to a <see cref="T:System.String" />.
                </summary>
      <returns>
                    A string representation of the UInt32.
                </returns>
      <param name="value">
                    The value to convert. 
                </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.UInt64)">
      <summary>
                    Converts the <see cref="T:System.UInt64" /> to a <see cref="T:System.String" />.
                </summary>
      <returns>
                    A string representation of the UInt64.
                </returns>
      <param name="value">
                    The value to convert. 
                </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToTimeSpan(System.String)">
      <summary>
                    Converts the <see cref="T:System.String" /> to a <see cref="T:System.TimeSpan" /> equivalent.
                </summary>
      <returns>
                    A TimeSpan equivalent of the string.
                </returns>
      <param name="s">
                    The string to convert. The string format must conform to the W3C XML Schema Part 2: Datatypes recommendation for duration.
                </param>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in correct format to represent a TimeSpan value. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToUInt16(System.String)">
      <summary>
                    Converts the <see cref="T:System.String" /> to a <see cref="T:System.UInt16" /> equivalent.
                </summary>
      <returns>
                    A UInt16 equivalent of the string.
                </returns>
      <param name="s">
                    The string to convert. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToUInt32(System.String)">
      <summary>
                    Converts the <see cref="T:System.String" /> to a <see cref="T:System.UInt32" /> equivalent.
                </summary>
      <returns>
                    A UInt32 equivalent of the string.
                </returns>
      <param name="s">
                    The string to convert. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToUInt64(System.String)">
      <summary>
                    Converts the <see cref="T:System.String" /> to a <see cref="T:System.UInt64" /> equivalent.
                </summary>
      <returns>
                    A UInt64 equivalent of the string.
                </returns>
      <param name="s">
                    The string to convert. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. 
                </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyName(System.String)">
      <summary>
                    Verifies that the name is a valid name according to the W3C Extended Markup Language recommendation.
                </summary>
      <returns>
                    The name, if it is a valid XML name.
                </returns>
      <param name="name">
                    The name to verify. 
                </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="name" /> is not a valid XML name. 
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null or String.Empty. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyNCName(System.String)">
      <summary>
                    Verifies that the name is a valid NCName according to the W3C Extended Markup Language recommendation.
                </summary>
      <returns>
                    The name, if it is a valid NCName.
                </returns>
      <param name="name">
                    The name to verify. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null or String.Empty. 
                </exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="name" /> is not a valid NCName. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyNMTOKEN(System.String)">
      <summary>
                    Verifies that the string is a valid NMTOKEN according to the W3C XML Schema Part2: Datatypes recommendation
                </summary>
      <returns>
                    The name token, if it is a valid NMTOKEN.
                </returns>
      <param name="name">
                    The string you wish to verify.
                </param>
      <exception cref="T:System.Xml.XmlException">
                    The string is not a valid name token.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.
                </exception>
    </member>
    <member name="T:System.Xml.XmlDateTimeSerializationMode">
      <summary>
                    Specifies how to treat the time value when converting between string and <see cref="T:System.DateTime" />.
                </summary>
    </member>
    <member name="F:System.Xml.XmlDateTimeSerializationMode.Local">
      <summary>
                    Treat as local time. If the <see cref="T:System.DateTime" /> object represents a Coordinated Universal Time (UTC), it is converted to the local time.
                </summary>
    </member>
    <member name="F:System.Xml.XmlDateTimeSerializationMode.Utc">
      <summary>
                    Treat as a UTC. If the <see cref="T:System.DateTime" /> object represents a local time, it is converted to a UTC.
                </summary>
    </member>
    <member name="F:System.Xml.XmlDateTimeSerializationMode.Unspecified">
      <summary>
                    Treat as a local time if a <see cref="T:System.DateTime" /> is being converted to a string.
                </summary>
    </member>
    <member name="F:System.Xml.XmlDateTimeSerializationMode.RoundtripKind">
      <summary>
                    Time zone information should be preserved when converting.
                </summary>
    </member>
    <member name="T:System.Xml.XmlException">
      <summary>
                    Returns detailed information about the last exception. 
                </summary>
    </member>
    <member name="M:System.Xml.XmlException.#ctor">
      <summary>
                    Initializes a new instance of the XmlException class.
                </summary>
    </member>
    <member name="M:System.Xml.XmlException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the XmlException class with a specified error message.
                </summary>
      <param name="message">
                    The error description. 
                </param>
    </member>
    <member name="M:System.Xml.XmlException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the XmlException class.
                </summary>
      <param name="message">
                    The description of the error condition. 
                </param>
      <param name="innerException">
                    The <see cref="T:System.Exception" /> that threw the XmlException, if any. This value can be null. 
                </param>
    </member>
    <member name="M:System.Xml.XmlException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary>
                    Initializes a new instance of the XmlException class with the specified message, inner exception, line number, and line position.
                </summary>
      <param name="message">
                    The error description. 
                </param>
      <param name="innerException">
                    The exception that is the cause of the current exception. This value can be null. 
                </param>
      <param name="lineNumber">
                    The line number indicating where the error occurred. 
                </param>
      <param name="linePosition">
                    The line position indicating where the error occurred. 
                </param>
    </member>
    <member name="P:System.Xml.XmlException.LineNumber">
      <summary>
                    Gets the line number indicating where the error occurred.
                </summary>
      <returns>
                    The line number indicating where the error occurred.
                </returns>
    </member>
    <member name="P:System.Xml.XmlException.LinePosition">
      <summary>
                    Gets the line position indicating where the error occurred.
                </summary>
      <returns>
                    The line position indicating where the error occurred.
                </returns>
    </member>
    <member name="P:System.Xml.XmlException.Message">
      <summary>
                    Gets a message describing the current exception.
                </summary>
      <returns>
                    The error message that explains the reason for the exception.
                </returns>
    </member>
    <member name="P:System.Xml.XmlException.SourceUri">
      <summary>
                    Gets the location of the XML file.
                </summary>
      <returns>
                    The source URI for the XML data. If there is no source URI, this property returns null.
                </returns>
    </member>
    <member name="T:System.Xml.XmlNamespaceManager">
      <summary>
                    Resolves, adds, and removes namespaces to a collection and provides scope management for these namespaces. 
                </summary>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.#ctor(System.Xml.XmlNameTable)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Xml.XmlNamespaceManager" /> class with the specified <see cref="T:System.Xml.XmlNameTable" />.
                </summary>
      <param name="nameTable">
                    The <see cref="T:System.Xml.XmlNameTable" /> to use. 
                </param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="nameTable" /> is null. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.AddNamespace(System.String,System.String)">
      <summary>
                    Adds the given namespace to the collection.
                </summary>
      <param name="prefix">
                    The prefix to associate with the namespace being added. Use String.Empty to add a default namespace.
                </param>
      <param name="uri">
                    The namespace to add. 
                </param>
      <exception cref="T:System.ArgumentException">
                    The value for <paramref name="prefix" /> is "xml" or "xmlns". 
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The value for <paramref name="prefix" /> or <paramref name="uri" /> is null. 
                </exception>
    </member>
    <member name="P:System.Xml.XmlNamespaceManager.DefaultNamespace">
      <summary>
                    Gets the namespace URI for the default namespace.
                </summary>
      <returns>
                    Returns the namespace URI for the default namespace, or String.Empty if there is no default namespace.
                </returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.GetEnumerator">
      <summary>
                    Returns an enumerator to use to iterate through the namespaces in the <see cref="T:System.Xml.XmlNamespaceManager" />.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.IEnumerator" /> containing the prefixes stored by the <see cref="T:System.Xml.XmlNamespaceManager" />.
                </returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>
                    Gets a collection of namespace names keyed by prefix which can be used to enumerate the namespaces currently in scope.
                </summary>
      <returns>
                    A collection of namespace names keyed by prefix which can be used to enumerate the namespaces currently in scope.
                </returns>
      <param name="scope">
                    An <see cref="T:System.Xml.XmlNamespaceScope" /> value that specifies the type of namespace nodes to return.
                </param>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.HasNamespace(System.String)">
      <summary>
                    Gets a value indicating whether the supplied prefix has a namespace defined for the current pushed scope.
                </summary>
      <returns>true if there is a namespace defined; otherwise, false.
                </returns>
      <param name="prefix">
                    The prefix of the namespace you want to find. 
                </param>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.LookupNamespace(System.String)">
      <summary>
                    Gets the namespace URI for the specified prefix.
                </summary>
      <returns>
                    Returns the namespace URI for <paramref name="prefix" /> or null if there is no mapped namespace. The returned string is atomized.
                
                    For more information on atomized strings, see <see cref="T:System.Xml.XmlNameTable" />.
                </returns>
      <param name="prefix">
                    The prefix whose namespace URI you want to resolve. To match the default namespace, pass String.Empty. 
                </param>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.LookupPrefix(System.String)">
      <summary>
                    Finds the prefix declared for the given namespace URI.
                </summary>
      <returns>
                    The matching prefix. If there is no mapped prefix, the method returns String.Empty. If a null value is supplied, then null is returned.
                </returns>
      <param name="uri">
                    The namespace to resolve for the prefix. 
                </param>
    </member>
    <member name="P:System.Xml.XmlNamespaceManager.NameTable">
      <summary>
                    Gets the <see cref="T:System.Xml.XmlNameTable" /> associated with this object.
                </summary>
      <returns>
                    The <see cref="T:System.Xml.XmlNameTable" /> used by this object.
                </returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.PopScope">
      <summary>
                    Pops a namespace scope off the stack.
                </summary>
      <returns>true if there are namespace scopes left on the stack; false if there are no more namespaces to pop.
                </returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.PushScope">
      <summary>
                    Pushes a namespace scope onto the stack.
                </summary>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.RemoveNamespace(System.String,System.String)">
      <summary>
                    Removes the given namespace for the given prefix.
                </summary>
      <param name="prefix">
                    The prefix for the namespace 
                </param>
      <param name="uri">
                    The namespace to remove for the given prefix. The namespace removed is from the current namespace scope. Namespaces outside the current scope are ignored. 
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The value of <paramref name="prefix" /> or <paramref name="uri" /> is null. 
                </exception>
    </member>
    <member name="T:System.Xml.XmlNamespaceScope">
      <summary>
                    Defines the namespace scope.
                </summary>
    </member>
    <member name="F:System.Xml.XmlNamespaceScope.All">
      <summary>
                    All namespaces that are defined in the scope of the current node. This includes the xmlns:xml namespace, which is always declared implicitly. The order of the namespaces returned is not defined.
                </summary>
    </member>
    <member name="F:System.Xml.XmlNamespaceScope.ExcludeXml">
      <summary>
                    All namespaces that are defined in the scope of the current node, except for the xmlns:xml namespace, which is always declared implicitly. The order of the namespaces returned is not defined.
                </summary>
    </member>
    <member name="F:System.Xml.XmlNamespaceScope.Local">
      <summary>
                    All namespaces that are defined locally at the current node.
                </summary>
    </member>
    <member name="T:System.Xml.XmlNameTable">
      <summary>
                    Table of atomized string objects.
                </summary>
    </member>
    <member name="M:System.Xml.XmlNameTable.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Xml.XmlNameTable" /> class. 
                </summary>
    </member>
    <member name="M:System.Xml.XmlNameTable.Add(System.Char[],System.Int32,System.Int32)">
      <summary>
                    When overridden in a derived class, atomizes the specified string and adds it to the XmlNameTable.
                </summary>
      <returns>
                    The new atomized string or the existing one if it already exists. If length is zero, String.Empty is returned.
                </returns>
      <param name="array">
                    The character array containing the name to add. 
                </param>
      <param name="offset">
                    Zero-based index into the array specifying the first character of the name. 
                </param>
      <param name="length">
                    The number of characters in the name. 
                </param>
      <exception cref="T:System.IndexOutOfRangeException">
                    0 &gt; <paramref name="offset" />
                    -or- 
                <paramref name="offset" /> &gt;= <paramref name="array" />.Length 
                
                    -or- 
                <paramref name="length" /> &gt; <paramref name="array" />.Length 
                
                    The above conditions do not cause an exception to be thrown if <paramref name="length" /> =0. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> &lt; 0. 
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlNameTable.Add(System.String)">
      <summary>
                    When overridden in a derived class, atomizes the specified string and adds it to the XmlNameTable.
                </summary>
      <returns>
                    The new atomized string or the existing one if it already exists.
                </returns>
      <param name="array">
                    The name to add. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlNameTable.Get(System.Char[],System.Int32,System.Int32)">
      <summary>
                    When overridden in a derived class, gets the atomized string containing the same characters as the specified range of characters in the given array.
                </summary>
      <returns>
                    The atomized string or null if the string has not already been atomized. If <paramref name="length" /> is zero, String.Empty is returned.
                </returns>
      <param name="array">
                    The character array containing the name to look up. 
                </param>
      <param name="offset">
                    The zero-based index into the array specifying the first character of the name. 
                </param>
      <param name="length">
                    The number of characters in the name. 
                </param>
      <exception cref="T:System.IndexOutOfRangeException">
                    0 &gt; <paramref name="offset" />
                    -or- 
                <paramref name="offset" /> &gt;= <paramref name="array" />.Length 
                
                    -or- 
                <paramref name="length" /> &gt; <paramref name="array" />.Length 
                
                    The above conditions do not cause an exception to be thrown if <paramref name="length" /> =0. 
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlNameTable.Get(System.String)">
      <summary>
                    When overridden in a derived class, gets the atomized string containing the same value as the specified string.
                </summary>
      <returns>
                    The atomized string or null if the string has not already been atomized.
                </returns>
      <param name="array">
                    The name to look up. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. 
                </exception>
    </member>
    <member name="T:System.Xml.XmlNodeType">
      <summary>
                    Specifies the type of node.
                </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.None">
      <summary>
                    This is returned by the <see cref="T:System.Xml.XmlReader" /> if a Read method has not been called.
                </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Element">
      <summary>
                    An element (for example, &lt;item&gt;).
                </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Attribute">
      <summary>
                    An attribute (for example, id='123').
                </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Text">
      <summary>
                    The text content of a node.
                </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.CDATA">
      <summary>
                    A CDATA section (for example, &lt;![CDATA[my escaped text]]&gt;).
                </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.EntityReference">
      <summary>
                    A reference to an entity (for example, &amp;num;).
                </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Entity">
      <summary>
                    An entity declaration (for example, &lt;!ENTITY...&gt;).
                </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.ProcessingInstruction">
      <summary>
                    A processing instruction (for example, &lt;?pi test?&gt;).
                </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Comment">
      <summary>
                    A comment (for example, &lt;!-- my comment --&gt;).
                </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Document">
      <summary>
                    A document object that, as the root of the document tree, provides access to the whole XML document.
                </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.DocumentType">
      <summary>
                    The document type declaration, indicated by the following tag (for example, &lt;!DOCTYPE...&gt;).
                </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.DocumentFragment">
      <summary>
                    A document fragment.
                </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Notation">
      <summary>
                    A notation in the document type declaration (for example, &lt;!NOTATION...&gt;).
                </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Whitespace">
      <summary>
                    White space between markup.
                </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.SignificantWhitespace">
      <summary>
                    White space between markup in a mixed content model or white space within the xml:space="preserve" scope.
                </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.EndElement">
      <summary>
                    An end element tag (for example, &lt;/item&gt;).
                </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.EndEntity">
      <summary>
                    Returned when XmlReader reaches the end of the entity replacement as a result of a call to <see cref="M:System.Xml.XmlReader.ResolveEntity" />.
                </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.XmlDeclaration">
      <summary>
                    The XML declaration (for example, &lt;?xml version='1.0'?&gt;).
                </summary>
    </member>
    <member name="T:System.Xml.XmlParserContext">
      <summary>
                    Provides all the context information required by the <see cref="T:System.Xml.XmlReader" /> to parse an XML fragment.
                </summary>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.String,System.String,System.String,System.String,System.String,System.Xml.XmlSpace)">
      <summary>
                    Initializes a new instance of the XmlParserContext class with the specified <see cref="T:System.Xml.XmlNameTable" />, <see cref="T:System.Xml.XmlNamespaceManager" />, base URI, xml:lang, xml:space, and document type values.
                </summary>
      <param name="nt">
                    The <see cref="T:System.Xml.XmlNameTable" /> to use to atomize strings. If this is null, the name table used to construct the <paramref name="nsMgr" /> is used instead. For more information about atomized strings, see <see cref="T:System.Xml.XmlNameTable" />. 
                </param>
      <param name="nsMgr">
                    The <see cref="T:System.Xml.XmlNamespaceManager" /> to use for looking up namespace information, or null. 
                </param>
      <param name="docTypeName">
                    The name of the document type declaration. 
                </param>
      <param name="pubId">
                    The public identifier. 
                </param>
      <param name="sysId">
                    The system identifier. 
                </param>
      <param name="internalSubset">
                    The internal DTD subset. 
                </param>
      <param name="baseURI">
                    The base URI for the XML fragment (the location from which the fragment was loaded). 
                </param>
      <param name="xmlLang">
                    The xml:lang scope. 
                </param>
      <param name="xmlSpace">
                    An <see cref="T:System.Xml.XmlSpace" /> value indicating the xml:space scope. 
                </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="nt" /> is not the same XmlNameTable used to construct <paramref name="nsMgr" />. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.String,System.String,System.String,System.String,System.String,System.Xml.XmlSpace,System.Text.Encoding)">
      <summary>
                    Initializes a new instance of the XmlParserContext class with the specified <see cref="T:System.Xml.XmlNameTable" />, <see cref="T:System.Xml.XmlNamespaceManager" />, base URI, xml:lang, xml:space, encoding, and document type values.
                </summary>
      <param name="nt">
                    The <see cref="T:System.Xml.XmlNameTable" /> to use to atomize strings. If this is null, the name table used to construct the <paramref name="nsMgr" /> is used instead. For more information about atomized strings, see <see cref="T:System.Xml.XmlNameTable" />. 
                </param>
      <param name="nsMgr">
                    The <see cref="T:System.Xml.XmlNamespaceManager" /> to use for looking up namespace information, or null. 
                </param>
      <param name="docTypeName">
                    The name of the document type declaration. 
                </param>
      <param name="pubId">
                    The public identifier. 
                </param>
      <param name="sysId">
                    The system identifier. 
                </param>
      <param name="internalSubset">
                    The internal DTD subset. 
                </param>
      <param name="baseURI">
                    The base URI for the XML fragment (the location from which the fragment was loaded). 
                </param>
      <param name="xmlLang">
                    The xml:lang scope. 
                </param>
      <param name="xmlSpace">
                    An <see cref="T:System.Xml.XmlSpace" /> value indicating the xml:space scope. 
                </param>
      <param name="enc">
                    An <see cref="T:System.Text.Encoding" /> object indicating the encoding setting. 
                </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="nt" /> is not the same XmlNameTable used to construct <paramref name="nsMgr" />. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.Xml.XmlSpace)">
      <summary>
                    Initializes a new instance of the XmlParserContext class with the specified <see cref="T:System.Xml.XmlNameTable" />, <see cref="T:System.Xml.XmlNamespaceManager" />, xml:lang, and xml:space values.
                </summary>
      <param name="nt">
                    The <see cref="T:System.Xml.XmlNameTable" /> to use to atomize strings. If this is null, the name table used to construct the <paramref name="nsMgr" /> is used instead. For more information about atomized strings, see <see cref="T:System.Xml.XmlNameTable" />. 
                </param>
      <param name="nsMgr">
                    The <see cref="T:System.Xml.XmlNamespaceManager" /> to use for looking up namespace information, or null. 
                </param>
      <param name="xmlLang">
                    The xml:lang scope. 
                </param>
      <param name="xmlSpace">
                    An <see cref="T:System.Xml.XmlSpace" /> value indicating the xml:space scope. 
                </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="nt" /> is not the same XmlNameTable used to construct <paramref name="nsMgr" />. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.Xml.XmlSpace,System.Text.Encoding)">
      <summary>
                    Initializes a new instance of the XmlParserContext class with the specified <see cref="T:System.Xml.XmlNameTable" />, <see cref="T:System.Xml.XmlNamespaceManager" />, xml:lang, xml:space, and encoding.
                </summary>
      <param name="nt">
                    The <see cref="T:System.Xml.XmlNameTable" /> to use to atomize strings. If this is null, the name table used to construct the <paramref name="nsMgr" /> is used instead. For more information on atomized strings, see <see cref="T:System.Xml.XmlNameTable" />. 
                </param>
      <param name="nsMgr">
                    The <see cref="T:System.Xml.XmlNamespaceManager" /> to use for looking up namespace information, or null. 
                </param>
      <param name="xmlLang">
                    The xml:lang scope. 
                </param>
      <param name="xmlSpace">
                    An <see cref="T:System.Xml.XmlSpace" /> value indicating the xml:space scope. 
                </param>
      <param name="enc">
                    An <see cref="T:System.Text.Encoding" /> object indicating the encoding setting. 
                </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="nt" /> is not the same XmlNameTable used to construct <paramref name="nsMgr" />. 
                </exception>
    </member>
    <member name="P:System.Xml.XmlParserContext.BaseURI">
      <summary>
                    Gets or sets the base URI.
                </summary>
      <returns>
                    The base URI to use to resolve the DTD file.
                </returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.DocTypeName">
      <summary>
                    Gets or sets the name of the document type declaration.
                </summary>
      <returns>
                    The name of the document type declaration.
                </returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.Encoding">
      <summary>
                    Gets or sets the encoding type.
                </summary>
      <returns>
                    An <see cref="T:System.Text.Encoding" /> object indicating the encoding type.
                </returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.InternalSubset">
      <summary>
                    Gets or sets the internal DTD subset.
                </summary>
      <returns>
                    The internal DTD subset. For example, this property returns everything between the square brackets &lt;!DOCTYPE doc [...]&gt;.
                </returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.NamespaceManager">
      <summary>
                    Gets or sets the <see cref="T:System.Xml.XmlNamespaceManager" />.
                </summary>
      <returns>
                    The XmlNamespaceManager.
                </returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.NameTable">
      <summary>
                    Gets the <see cref="T:System.Xml.XmlNameTable" /> used to atomize strings. For more information on atomized strings, see <see cref="T:System.Xml.XmlNameTable" />.
                </summary>
      <returns>
                    The XmlNameTable.
                </returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.PublicId">
      <summary>
                    Gets or sets the public identifier.
                </summary>
      <returns>
                    The public identifier.
                </returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.SystemId">
      <summary>
                    Gets or sets the system identifier.
                </summary>
      <returns>
                    The system identifier.
                </returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.XmlLang">
      <summary>
                    Gets or sets the current xml:lang scope.
                </summary>
      <returns>
                    The current xml:lang scope. If there is no xml:lang in scope, String.Empty is returned.
                </returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.XmlSpace">
      <summary>
                    Gets or sets the current xml:space scope.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.XmlSpace" /> value indicating the xml:space scope.
                </returns>
    </member>
    <member name="T:System.Xml.XmlQualifiedName">
      <summary>
                    Represents an XML qualified name.
                </summary>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Xml.XmlQualifiedName" /> class.
                </summary>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Xml.XmlQualifiedName" /> class with the specified name.
                </summary>
      <param name="name">
                    The local name to use as the name of the <see cref="T:System.Xml.XmlQualifiedName" /> object. 
                </param>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.#ctor(System.String,System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Xml.XmlQualifiedName" /> class with the specified name and namespace.
                </summary>
      <param name="name">
                    The local name to use as the name of the <see cref="T:System.Xml.XmlQualifiedName" /> object. 
                </param>
      <param name="ns">
                    The namespace for the <see cref="T:System.Xml.XmlQualifiedName" /> object. 
                </param>
    </member>
    <member name="F:System.Xml.XmlQualifiedName.Empty">
      <summary>
                    Provides an empty <see cref="T:System.Xml.XmlQualifiedName" />.
                </summary>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.Equals(System.Object)">
      <summary>
                    Determines whether the specified <see cref="T:System.Xml.XmlQualifiedName" /> object is equal to the current <see cref="T:System.Xml.XmlQualifiedName" /> object. 
                </summary>
      <returns>true if the two are the same instance object; otherwise, false.
                </returns>
      <param name="other">
                    The <see cref="T:System.Xml.XmlQualifiedName" /> to compare. 
                </param>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.GetHashCode">
      <summary>
                    Returns the hash code for the <see cref="T:System.Xml.XmlQualifiedName" />.
                </summary>
      <returns>
                    A hash code for this object.
                </returns>
    </member>
    <member name="P:System.Xml.XmlQualifiedName.IsEmpty">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Xml.XmlQualifiedName" /> is empty.
                </summary>
      <returns>true if name and namespace are empty strings; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Xml.XmlQualifiedName.Name">
      <summary>
                    Gets a string representation of the qualified name of the <see cref="T:System.Xml.XmlQualifiedName" />.
                </summary>
      <returns>
                    A string representation of the qualified name or String.Empty if a name is not defined for the object.
                </returns>
    </member>
    <member name="P:System.Xml.XmlQualifiedName.Namespace">
      <summary>
                    Gets a string representation of the namespace of the <see cref="T:System.Xml.XmlQualifiedName" />.
                </summary>
      <returns>
                    A string representation of the namespace or String.Empty if a namespace is not defined for the object.
                </returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.op_Equality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
      <summary>
                    Compares two <see cref="T:System.Xml.XmlQualifiedName" /> objects.
                </summary>
      <returns>true if the two objects have the same name and namespace values; otherwise, false.
                </returns>
      <param name="a">
                    An <see cref="T:System.Xml.XmlQualifiedName" /> to compare. 
                </param>
      <param name="b">
                    An <see cref="T:System.Xml.XmlQualifiedName" /> to compare. 
                </param>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.op_Inequality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
      <summary>
                    Compares two <see cref="T:System.Xml.XmlQualifiedName" /> objects.
                </summary>
      <returns>true if the name and namespace values for the two objects differ; otherwise, false.
                </returns>
      <param name="a">
                    An <see cref="T:System.Xml.XmlQualifiedName" /> to compare. 
                </param>
      <param name="b">
                    An <see cref="T:System.Xml.XmlQualifiedName" /> to compare. 
                </param>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.ToString">
      <summary>
                    Returns the string value of the <see cref="T:System.Xml.XmlQualifiedName" />.
                </summary>
      <returns>
                    The string value of the <see cref="T:System.Xml.XmlQualifiedName" /> in the format of namespace:localname. If the object does not have a namespace defined, this method returns just the local name.
                </returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.ToString(System.String,System.String)">
      <summary>
                    Returns the string value of the <see cref="T:System.Xml.XmlQualifiedName" />.
                </summary>
      <returns>
                    The string value of the <see cref="T:System.Xml.XmlQualifiedName" /> in the format of namespace:localname. If the object does not have a namespace defined, this method returns just the local name.
                </returns>
      <param name="name">
                    The name of the object. 
                </param>
      <param name="ns">
                    The namespace of the object. 
                </param>
    </member>
    <member name="T:System.Xml.XmlReader">
      <summary>
                    Represents a reader that provides fast, non-cached, forward-only access to XML data.
                </summary>
    </member>
    <member name="M:System.Xml.XmlReader.#ctor">
      <summary>
                    Initializes a new instance of the XmlReader class.
                </summary>
    </member>
    <member name="P:System.Xml.XmlReader.AttributeCount">
      <summary>
                    When overridden in a derived class, gets the number of attributes on the current node.
                </summary>
      <returns>
                    The number of attributes on the current node.
                </returns>
    </member>
    <member name="P:System.Xml.XmlReader.BaseURI">
      <summary>
                    When overridden in a derived class, gets the base URI of the current node.
                </summary>
      <returns>
                    The base URI of the current node.
                </returns>
    </member>
    <member name="P:System.Xml.XmlReader.CanReadBinaryContent">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Xml.XmlReader" /> implements the binary content read methods.
                </summary>
      <returns>true if the binary content read methods are implemented; otherwise false.
                </returns>
    </member>
    <member name="P:System.Xml.XmlReader.CanReadValueChunk">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Xml.XmlReader" /> implements the <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> method. 
                </summary>
      <returns>true if the <see cref="T:System.Xml.XmlReader" /> implements the <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> method; otherwise false.
                </returns>
    </member>
    <member name="P:System.Xml.XmlReader.CanResolveEntity">
      <summary>
                    Gets a value indicating whether this reader can parse and resolve entities.
                </summary>
      <returns>true if the reader can parse and resolve entities; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Xml.XmlReader.Close">
      <summary>
                    When overridden in a derived class, changes the <see cref="P:System.Xml.XmlReader.ReadState" /> to Closed.
                </summary>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.Stream)">
      <summary>
                    Creates a new <see cref="T:System.Xml.XmlReader" /> instance using the specified stream.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.XmlReader" /> object used to read the data contained in the stream. 
                </returns>
      <param name="input">
                    The stream containing the XML data. 
                
                    The <see cref="T:System.Xml.XmlReader" /> scans the first bytes of the stream looking for a byte order mark or other sign of encoding. When encoding is determined, the encoding is used to continue reading the stream, and processing continues parsing the input as a stream of (Unicode) characters.
                </param>
      <exception cref="T:System.NullReferenceException">
                    The <paramref name="input" /> value is null.
                </exception>
      <exception cref="T:System.Security.SecurityException">
                    The <see cref="T:System.Xml.XmlReader" /> does not have sufficient permissions to access the location of the XML data.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings)">
      <summary>
                    Creates a new <see cref="T:System.Xml.XmlReader" /> instance with the specified stream and <see cref="T:System.Xml.XmlReaderSettings" /> object.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.XmlReader" /> object to read the XML data.
                </returns>
      <param name="input">
                    The stream containing the XML data. 
                
                    The <see cref="T:System.Xml.XmlReader" /> scans the first bytes of the stream looking for a byte order mark or other sign of encoding. When encoding is determined, the encoding is used to continue reading the stream, and processing continues parsing the input as a stream of (Unicode) characters.
                </param>
      <param name="settings">
                    The <see cref="T:System.Xml.XmlReaderSettings" /> object used to configure the new <see cref="T:System.Xml.XmlReader" /> instance. This value can be null.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="input" /> value is null.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings,System.String)">
      <summary>
                    Creates a new <see cref="T:System.Xml.XmlReader" /> instance using the specified stream, base URI, and <see cref="T:System.Xml.XmlReaderSettings" /> object.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.XmlReader" /> object to read XML data.
                </returns>
      <param name="input">
                    The stream containing the XML data. 
                
                    The <see cref="T:System.Xml.XmlReader" /> scans the first bytes of the stream looking for a byte order mark or other sign of encoding. When encoding is determined, the encoding is used to continue reading the stream, and processing continues parsing the input as a stream of (Unicode) characters.
                </param>
      <param name="settings">
                    The <see cref="T:System.Xml.XmlReaderSettings" /> object used to configure the new <see cref="T:System.Xml.XmlReader" /> instance. This value can be null.
                </param>
      <param name="baseUri">
                    The base URI for the entity or document being read. This value can be null.
                Security Note:
					The base URI is used to resolve the relative URI of the XML document. Do not use a base URI from an untrusted source.
								
								
							</param>
      <exception cref="T:System.NullReferenceException">
                    The <paramref name="input" /> value is null.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)">
      <summary>
                    Creates a new <see cref="T:System.Xml.XmlReader" /> instance using the specified stream, <see cref="T:System.Xml.XmlReaderSettings" />, and <see cref="T:System.Xml.XmlParserContext" /> objects.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.XmlReader" /> object to read XML data.
                </returns>
      <param name="input">
                    The stream containing the XML data. 
                
                    The <see cref="T:System.Xml.XmlReader" /> scans the first bytes of the stream looking for a byte order mark or other sign of encoding. When encoding is determined, the encoding is used to continue reading the stream, and processing continues parsing the input as a stream of (Unicode) characters.
                </param>
      <param name="settings">
                    The <see cref="T:System.Xml.XmlReaderSettings" /> object used to configure the new <see cref="T:System.Xml.XmlReader" /> instance. This value can be null.
                </param>
      <param name="inputContext">
                    The <see cref="T:System.Xml.XmlParserContext" /> object that provides the context information required to parse the XML fragment. The context information can include the <see cref="T:System.Xml.XmlNameTable" /> to use, encoding, namespace scope, the current xml:lang and xml:space scope, base URI, and document type definition. 
                
                    This value can be null.
                </param>
      <exception cref="T:System.NullReferenceException">
                    The <paramref name="input" /> value is null.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.TextReader)">
      <summary>
                    Creates a new <see cref="T:System.Xml.XmlReader" /> instance with the specified <see cref="T:System.IO.TextReader" />.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.XmlReader" /> object to read the XML data.
                </returns>
      <param name="input">
                    The <see cref="T:System.IO.TextReader" /> from which to read the XML data. Because a <see cref="T:System.IO.TextReader" /> returns a stream of Unicode characters, the encoding specified in the XML declaration is not used by the <see cref="T:System.Xml.XmlReader" /> to decode the data stream.
                </param>
      <exception cref="T:System.NullReferenceException">
                    The <paramref name="input" /> value is null.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings)">
      <summary>
                    Creates a new <see cref="T:System.Xml.XmlReader" /> instance using the specified <see cref="T:System.IO.TextReader" /> and <see cref="T:System.Xml.XmlReaderSettings" /> objects.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.XmlReader" /> object to read XML data.
                </returns>
      <param name="input">
                    The <see cref="T:System.IO.TextReader" /> from which to read the XML data. Because a <see cref="T:System.IO.TextReader" /> returns a stream of Unicode characters, the encoding specified in the XML declaration is not used by the <see cref="T:System.Xml.XmlReader" /> to decode the data stream
                </param>
      <param name="settings">
                    The <see cref="T:System.Xml.XmlReaderSettings" /> object used to configure the new <see cref="T:System.Xml.XmlReader" />. This value can be null.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="input" /> value is null.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings,System.String)">
      <summary>
                    Creates a new <see cref="T:System.Xml.XmlReader" /> instance using the specified <see cref="T:System.IO.TextReader" />, <see cref="T:System.Xml.XmlReaderSettings" />, and base URI.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.XmlReader" /> object to read XML data.
                </returns>
      <param name="input">
                    The <see cref="T:System.IO.TextReader" /> from which to read the XML data. Because a <see cref="T:System.IO.TextReader" /> returns a stream of Unicode characters, the encoding specified in the XML declaration is not used by the <see cref="T:System.Xml.XmlReader" /> to decode the data stream.
                </param>
      <param name="settings">
                    The <see cref="T:System.Xml.XmlReaderSettings" /> object used to configure the new <see cref="T:System.Xml.XmlReader" /> instance. This value can be null.
                </param>
      <param name="baseUri">
                    The base URI for the entity or document being read. This value can be null.
                Security Note:
					The base URI is used to resolve the relative URI of the XML document. Do not use a base URI from an untrusted source.
								
								
							</param>
      <exception cref="T:System.NullReferenceException">
                    The <paramref name="input" /> value is null.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)">
      <summary>
                    Creates a new <see cref="T:System.Xml.XmlReader" /> instance using the specified <see cref="T:System.IO.TextReader" />, <see cref="T:System.Xml.XmlReaderSettings" />, and <see cref="T:System.Xml.XmlParserContext" /> objects.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.XmlReader" /> object to read XML data.
                </returns>
      <param name="input">
                    The <see cref="T:System.IO.TextReader" /> from which to read the XML data. Because a <see cref="T:System.IO.TextReader" /> returns a stream of Unicode characters, the encoding specified in the XML declaration is not used by the <see cref="T:System.Xml.XmlReader" /> to decode the data stream.
                </param>
      <param name="settings">
                    The <see cref="T:System.Xml.XmlReaderSettings" /> object used to configure the new <see cref="T:System.Xml.XmlReader" /> instance. This value can be null.
                </param>
      <param name="inputContext">
                    The <see cref="T:System.Xml.XmlParserContext" /> object that provides the context information required to parse the XML fragment. The context information can include the <see cref="T:System.Xml.XmlNameTable" /> to use, encoding, namespace scope, the current xml:lang and xml:space scope, base URI, and document type definition. 
                
                    This value can be null.
                </param>
      <exception cref="T:System.NullReferenceException">
                    The <paramref name="input" /> value is null.
                </exception>
      <exception cref="T:System.ArgumentException">
                    The <see cref="P:System.Xml.XmlReaderSettings.NameTable" />  and <see cref="P:System.Xml.XmlParserContext.NameTable" /> properties both contain values. (Only one of these NameTable properties can be set and used).
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.String)">
      <summary>
                    Creates a new <see cref="T:System.Xml.XmlReader" /> instance with specified URI.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.XmlReader" /> object to read the XML data. 
                </returns>
      <param name="inputUri">
                    The URI for the file containing the XML data. The <see cref="T:System.Xml.XmlXapResolver" /> class is used to convert the path to a canonical data representation. For more information, see the Remarks section below.
                </param>
      <exception cref="T:System.NullReferenceException">
                    The <paramref name="inputUri" /> value is null.
                </exception>
      <exception cref="T:System.Security.SecurityException">
                    The <see cref="T:System.Xml.XmlReader" /> does not have sufficient permissions to access the location of the XML data.
                </exception>
      <exception cref="T:System.IO.FileNotFoundException">
                    The file identified by the URI does not exist.
                </exception>
      <exception cref="T:System.UriFormatException">
                    The URI format is not correct.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.String,System.Xml.XmlReaderSettings)">
      <summary>
                    Creates a new instance with the specified URI and <see cref="T:System.Xml.XmlReaderSettings" />.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.XmlReader" /> object to read XML data.
                </returns>
      <param name="inputUri">
                    The URI for the file containing the XML data. The <see cref="T:System.Xml.XmlResolver" /> object on the <see cref="T:System.Xml.XmlReaderSettings" /> object is used to convert the path to a canonical data representation. If <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> is null, a new <see cref="T:System.Xml.XmlXapResolver" /> object is used. For more information, see the Remarks section below.
                </param>
      <param name="settings">
                    The <see cref="T:System.Xml.XmlReaderSettings" /> object used to configure the new <see cref="T:System.Xml.XmlReader" /> instance. This value can be null.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="inputUri" /> value is null.
                </exception>
      <exception cref="T:System.IO.FileNotFoundException">
                    The file specified by the URI cannot be found.
                </exception>
      <exception cref="T:System.UriFormatException">
                    The URI format is not correct.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.String,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)">
      <summary>
                    Creates a new <see cref="T:System.Xml.XmlReader" /> instance using the specified URI, <see cref="T:System.Xml.XmlReaderSettings" />, and <see cref="T:System.Xml.XmlParserContext" /> objects.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.XmlReader" /> object to read XML data.
                </returns>
      <param name="inputUri">
                    The URI for the file containing the XML data. The <see cref="T:System.Xml.XmlResolver" /> object on the <see cref="T:System.Xml.XmlReaderSettings" /> object is used to convert the path to a canonical data representation. If <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> is null, a new <see cref="T:System.Xml.XmlXapResolver" /> object is used. For more information, see the Remarks section below.
                </param>
      <param name="settings">
                    The <see cref="T:System.Xml.XmlReaderSettings" /> object used to configure the new <see cref="T:System.Xml.XmlReader" /> instance. This value can be null.
                </param>
      <param name="inputContext">
                    The <see cref="T:System.Xml.XmlParserContext" /> object that provides the context information required to parse the XML fragment. The context information can include the <see cref="T:System.Xml.XmlNameTable" /> to use, encoding, namespace scope, the current xml:lang and xml:space scope, base URI, and document type definition. 
                
                    This value can be null.
                </param>
      <exception cref="T:System.NullReferenceException">
                    The inputUri value is null.
                </exception>
      <exception cref="T:System.Security.SecurityException">
                    The <see cref="T:System.Xml.XmlReader" /> does not have sufficient permissions to access the location of the XML data.
                </exception>
      <exception cref="T:System.ArgumentException">
                    The <see cref="P:System.Xml.XmlReaderSettings.NameTable" />  and <see cref="P:System.Xml.XmlParserContext.NameTable" /> properties both contain values. (Only one of these NameTable properties can be set and used).
                </exception>
      <exception cref="T:System.IO.FileNotFoundException">
                    The file specified by the URI cannot be found.
                </exception>
      <exception cref="T:System.UriFormatException">
                    The URI format is not correct.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.Xml.XmlReader,System.Xml.XmlReaderSettings)">
      <summary>
                    Creates a new <see cref="T:System.Xml.XmlReader" /> instance with the specified <see cref="T:System.Xml.XmlReader" /> and <see cref="T:System.Xml.XmlReaderSettings" /> objects.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.XmlReader" /> object that is wrapped around the specified <see cref="T:System.Xml.XmlReader" /> object.
                </returns>
      <param name="reader">
                    The <see cref="T:System.Xml.XmlReader" /> object that you wish to use as the underlying reader.
                </param>
      <param name="settings">
                    The <see cref="T:System.Xml.XmlReaderSettings" /> object used to configure the new <see cref="T:System.Xml.XmlReader" /> instance.
                
                    The conformance level of the <see cref="T:System.Xml.XmlReaderSettings" /> object must either match the conformance level of the underlying reader, or it must be set to <see cref="F:System.Xml.ConformanceLevel.Auto" />.
                </param>
      <exception cref="T:System.NullReferenceException">
                    The <paramref name="reader" /> value is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    If the <see cref="T:System.Xml.XmlReaderSettings" /> object specifies a conformance level that is not consistent with conformance level of the underlying reader.
                
                    -or-
                
                    The underlying <see cref="T:System.Xml.XmlReader" /> is in an <see cref="F:System.Xml.ReadState.Error" /> or <see cref="F:System.Xml.ReadState.Closed" /> state.
                </exception>
    </member>
    <member name="P:System.Xml.XmlReader.Depth">
      <summary>
                    When overridden in a derived class, gets the depth of the current node in the XML document.
                </summary>
      <returns>
                    The depth of the current node in the XML document.
                </returns>
    </member>
    <member name="M:System.Xml.XmlReader.Dispose(System.Boolean)">
      <summary>
                    Releases the unmanaged resources used by the <see cref="T:System.Xml.XmlReader" /> and optionally releases the managed resources. 
                </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.
                </param>
    </member>
    <member name="P:System.Xml.XmlReader.EOF">
      <summary>
                    When overridden in a derived class, gets a value indicating whether the reader is positioned at the end of the stream.
                </summary>
      <returns>true if the reader is positioned at the end of the stream; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Xml.XmlReader.GetAttribute(System.Int32)">
      <summary>
                    When overridden in a derived class, gets the value of the attribute with the specified index.
                </summary>
      <returns>
                    The value of the specified attribute. This method does not move the reader.
                </returns>
      <param name="i">
                    The index of the attribute. The index is zero-based. (The first attribute has index 0.) 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> is out of range. Must be non-negative and less than the size of the attribute collection.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.GetAttribute(System.String)">
      <summary>
                    When overridden in a derived class, gets the value of the attribute with the specified <see cref="P:System.Xml.XmlReader.Name" />.
                </summary>
      <returns>
                    The value of the specified attribute. If the attribute is not found or the value is String.Empty, null is returned.
                </returns>
      <param name="name">
                    The qualified name of the attribute. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.GetAttribute(System.String,System.String)">
      <summary>
                    When overridden in a derived class, gets the value of the attribute with the specified <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" />.
                </summary>
      <returns>
                    The value of the specified attribute. If the attribute is not found or the value is String.Empty, null is returned. This method does not move the reader.
                </returns>
      <param name="name">
                    The local name of the attribute. 
                </param>
      <param name="namespaceURI">
                    The namespace URI of the attribute. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.
                </exception>
    </member>
    <member name="P:System.Xml.XmlReader.HasAttributes">
      <summary>
                    Gets a value indicating whether the current node has any attributes.
                </summary>
      <returns>true if the current node has attributes; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Xml.XmlReader.HasValue">
      <summary>
                    When overridden in a derived class, gets a value indicating whether the current node can have a <see cref="P:System.Xml.XmlReader.Value" />.
                </summary>
      <returns>true if the node on which the reader is currently positioned can have a Value; otherwise, false. If false, the node has a value of String.Empty.
                </returns>
    </member>
    <member name="P:System.Xml.XmlReader.IsDefault">
      <summary>
                    When overridden in a derived class, gets a value indicating whether the current node is an attribute that was generated from the default value defined in the DTD.
                </summary>
      <returns>true if the current node is an attribute whose value was generated from the default value defined in the DTD; false if the attribute value was explicitly set.
                </returns>
    </member>
    <member name="P:System.Xml.XmlReader.IsEmptyElement">
      <summary>
                    When overridden in a derived class, gets a value indicating whether the current node is an empty element (for example, &lt;MyElement/&gt;).
                </summary>
      <returns>true if the current node is an element (<see cref="P:System.Xml.XmlReader.NodeType" /> equals XmlNodeType.Element) that ends with /&gt;; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Xml.XmlReader.IsName(System.String)">
      <summary>
                    Gets a value indicating whether the string argument is a valid XML name.
                </summary>
      <returns>true if the name is valid; otherwise, false.
                </returns>
      <param name="str">
                    The name to validate. 
                </param>
      <exception cref="T:System.NullReferenceException">
                    The <paramref name="str" /> value is null.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.IsNameToken(System.String)">
      <summary>
                    Gets a value indicating whether or not the string argument is a valid XML name token.
                </summary>
      <returns>true if it is a valid name token; otherwise false.
                </returns>
      <param name="str">
                    The name token to validate. 
                </param>
      <exception cref="T:System.NullReferenceException">
                    The <paramref name="str" /> value is null.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.IsStartElement">
      <summary>
                    Calls <see cref="M:System.Xml.XmlReader.MoveToContent" /> and tests if the current content node is a start tag or empty element tag.
                </summary>
      <returns>true if <see cref="M:System.Xml.XmlReader.MoveToContent" /> finds a start tag or empty element tag; false if a node type other than XmlNodeType.Element was found.
                </returns>
      <exception cref="T:System.Xml.XmlException">
                    Incorrect XML is encountered in the input stream. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.IsStartElement(System.String)">
      <summary>
                    Calls <see cref="M:System.Xml.XmlReader.MoveToContent" /> and tests if the current content node is a start tag or empty element tag and if the <see cref="P:System.Xml.XmlReader.Name" /> property of the element found matches the given argument.
                </summary>
      <returns>true if the resulting node is an element and the Name property matches the specified string. false if a node type other than XmlNodeType.Element was found or if the element Name property does not match the specified string.
                </returns>
      <param name="name">
                    The string matched against the Name property of the element found. 
                </param>
      <exception cref="T:System.Xml.XmlException">
                    Incorrect XML is encountered in the input stream. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.IsStartElement(System.String,System.String)">
      <summary>
                    Calls <see cref="M:System.Xml.XmlReader.MoveToContent" /> and tests if the current content node is a start tag or empty element tag and if the <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" /> properties of the element found match the given strings.
                </summary>
      <returns>true if the resulting node is an element. false if a node type other than XmlNodeType.Element was found or if the LocalName and NamespaceURI properties of the element do not match the specified strings.
                </returns>
      <param name="localname">
                    The string to match against the LocalName property of the element found. 
                </param>
      <param name="ns">
                    The string to match against the NamespaceURI property of the element found. 
                </param>
      <exception cref="T:System.Xml.XmlException">
                    Incorrect XML is encountered in the input stream. 
                </exception>
    </member>
    <member name="P:System.Xml.XmlReader.Item(System.Int32)">
      <summary>
                    When overridden in a derived class, gets the value of the attribute with the specified index.
                </summary>
      <returns>
                    The value of the specified attribute.
                </returns>
      <param name="i">
                    The index of the attribute. 
                </param>
    </member>
    <member name="P:System.Xml.XmlReader.Item(System.String)">
      <summary>
                    When overridden in a derived class, gets the value of the attribute with the specified <see cref="P:System.Xml.XmlReader.Name" />.
                </summary>
      <returns>
                    The value of the specified attribute. If the attribute is not found, null is returned.
                </returns>
      <param name="name">
                    The qualified name of the attribute. 
                </param>
    </member>
    <member name="P:System.Xml.XmlReader.Item(System.String,System.String)">
      <summary>
                    When overridden in a derived class, gets the value of the attribute with the specified <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" />.
                </summary>
      <returns>
                    The value of the specified attribute. If the attribute is not found, null is returned.
                </returns>
      <param name="name">
                    The local name of the attribute. 
                </param>
      <param name="namespaceURI">
                    The namespace URI of the attribute. 
                </param>
    </member>
    <member name="P:System.Xml.XmlReader.LocalName">
      <summary>
                    When overridden in a derived class, gets the local name of the current node.
                </summary>
      <returns>
                    The name of the current node with the prefix removed. For example, LocalName is book for the element &lt;bk:book&gt;.
                
                    For node types that do not have a name (like Text, Comment, and so on), this property returns String.Empty.
                </returns>
    </member>
    <member name="M:System.Xml.XmlReader.LookupNamespace(System.String)">
      <summary>
                    When overridden in a derived class, resolves a namespace prefix in the current element's scope.
                </summary>
      <returns>
                    The namespace URI to which the prefix maps or null if no matching prefix is found.
                </returns>
      <param name="prefix">
                    The prefix whose namespace URI you want to resolve. To match the default namespace, pass an empty string. 
                </param>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToAttribute(System.Int32)">
      <summary>
                    When overridden in a derived class, moves to the attribute with the specified index.
                </summary>
      <param name="i">
                    The index of the attribute. 
                </param>
      <exception cref="T:System.NullReferenceException">
                    The <paramref name="i" /> value is null.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToAttribute(System.String)">
      <summary>
                    When overridden in a derived class, moves to the attribute with the specified <see cref="P:System.Xml.XmlReader.Name" />.
                </summary>
      <returns>true if the attribute is found; otherwise, false. If false, the reader's position does not change.
                </returns>
      <param name="name">
                    The qualified name of the attribute. 
                </param>
      <exception cref="T:System.NullReferenceException">
                    The <paramref name="name" /> value is null.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToAttribute(System.String,System.String)">
      <summary>
                    When overridden in a derived class, moves to the attribute with the specified <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" />.
                </summary>
      <returns>true if the attribute is found; otherwise, false. If false, the reader's position does not change.
                </returns>
      <param name="name">
                    The local name of the attribute. 
                </param>
      <param name="ns">
                    The namespace URI of the attribute. 
                </param>
      <exception cref="T:System.NullReferenceException">
                    The <paramref name="name" /> value is null.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToContent">
      <summary>
                    Checks whether the current node is a content (non-white space text, CDATA, Element, EndElement, EntityReference, or EndEntity) node. If the node is not a content node, the reader skips ahead to the next content node or end of file. It skips over nodes of the following type: ProcessingInstruction, DocumentType, Comment, Whitespace, or SignificantWhitespace.
                </summary>
      <returns>
                    The <see cref="P:System.Xml.XmlReader.NodeType" /> of the current node found by the method or XmlNodeType.None if the reader has reached the end of the input stream.
                </returns>
      <exception cref="T:System.Xml.XmlException">
                    Incorrect XML encountered in the input stream. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToElement">
      <summary>
                    When overridden in a derived class, moves to the element that contains the current attribute node.
                </summary>
      <returns>true if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); false if the reader is not positioned on an attribute (the position of the reader does not change).
                </returns>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToFirstAttribute">
      <summary>
                    When overridden in a derived class, moves to the first attribute.
                </summary>
      <returns>true if an attribute exists (the reader moves to the first attribute); otherwise, false (the position of the reader does not change).
                </returns>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToNextAttribute">
      <summary>
                    When overridden in a derived class, moves to the next attribute.
                </summary>
      <returns>true if there is a next attribute; false if there are no more attributes.
                </returns>
    </member>
    <member name="P:System.Xml.XmlReader.Name">
      <summary>
                    When overridden in a derived class, gets the qualified name of the current node.
                </summary>
      <returns>
                    The qualified name of the current node. For example, Name is bk:book for the element &lt;bk:book&gt;.
                
                    The name returned is dependent on the <see cref="P:System.Xml.XmlReader.NodeType" /> of the node. The following node types return the listed values. All other node types return an empty string.
                
                    Node type 
                
                    Name 
                Attribute
                    The name of the attribute. 
                DocumentType
                    The document type name. 
                Element
                    The tag name. 
                EntityReference
                    The name of the entity referenced. 
                ProcessingInstruction
                    The target of the processing instruction. 
                XmlDeclaration
                    The literal string xml. 
                </returns>
    </member>
    <member name="P:System.Xml.XmlReader.NamespaceURI">
      <summary>
                    When overridden in a derived class, gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.
                </summary>
      <returns>
                    The namespace URI of the current node; otherwise an empty string.
                </returns>
    </member>
    <member name="P:System.Xml.XmlReader.NameTable">
      <summary>
                    When overridden in a derived class, gets the <see cref="T:System.Xml.XmlNameTable" /> associated with this implementation.
                </summary>
      <returns>
                    The XmlNameTable enabling you to get the atomized version of a string within the node.
                </returns>
    </member>
    <member name="P:System.Xml.XmlReader.NodeType">
      <summary>
                    When overridden in a derived class, gets the type of the current node.
                </summary>
      <returns>
                    One of the <see cref="T:System.Xml.XmlNodeType" /> values representing the type of the current node.
                </returns>
    </member>
    <member name="P:System.Xml.XmlReader.Prefix">
      <summary>
                    When overridden in a derived class, gets the namespace prefix associated with the current node.
                </summary>
      <returns>
                    The namespace prefix associated with the current node.
                </returns>
    </member>
    <member name="M:System.Xml.XmlReader.Read">
      <summary>
                    When overridden in a derived class, reads the next node from the stream.
                </summary>
      <returns>true if the next node was read successfully; false if there are no more nodes to read.
                </returns>
      <exception cref="T:System.Xml.XmlException">
                    An error occurred while parsing the XML. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadAttributeValue">
      <summary>
                    When overridden in a derived class, parses the attribute value into one or more Text, EntityReference, or EndEntity nodes.
                </summary>
      <returns>true if there are nodes to return.
                false if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.
                
                    An empty attribute, such as, misc="", returns true with a single node with a value of String.Empty.
                </returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>
                    Reads the content as an object of the type specified.
                </summary>
      <returns>
                    The concatenated text content or attribute value converted to the requested type.
                </returns>
      <param name="returnType">
                    The type of the value to be returned.
                Note:
					With the release of the .NET Framework 3.5, the value of the 
								
								<paramref name="returnType" /> parameter can now be the <see cref="T:System.DateTimeOffset" /> type.
							</param>
      <param name="namespaceResolver">
                    An <see cref="T:System.Xml.IXmlNamespaceResolver" /> object that is used to resolve any namespace prefixes related to type conversion. For example, this can be used when converting an <see cref="T:System.Xml.XmlQualifiedName" /> object to an xs:string.
                
                    This value can be null.
                </param>
      <exception cref="T:System.FormatException">
                    The content is not in the correct format for the target type.
                </exception>
      <exception cref="T:System.InvalidCastException">
                    The attempted cast is not valid.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="returnType" /> value is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The current node is not a supported node type. See the table below for details.
                </exception>
      <exception cref="T:System.OverflowException">
                    Read Decimal.MaxValue.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>
                    Reads the content and returns the Base64 decoded binary bytes.
                </summary>
      <returns>
                    The number of bytes written to the buffer.
                </returns>
      <param name="buffer">
                    The buffer into which to copy the resulting text. This value cannot be null.
                </param>
      <param name="index">
                    The offset into the buffer where to start copying the result.
                </param>
      <param name="count">
                    The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="buffer" /> value is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />  is not supported on the current node.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The index into the buffer or index + count is larger than the allocated buffer size.
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Xml.XmlReader" /> implementation does not support this method.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>
                    Reads the content and returns the BinHex decoded binary bytes.
                </summary>
      <returns>
                    The number of bytes written to the buffer.
                </returns>
      <param name="buffer">
                    The buffer into which to copy the resulting text. This value cannot be null.
                </param>
      <param name="index">
                    The offset into the buffer where to start copying the result.
                </param>
      <param name="count">
                    The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="buffer" /> value is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" /> is not supported on the current node.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The index into the buffer or index + count is larger than the allocated buffer size.
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Xml.XmlReader" /> implementation does not support this method.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBoolean">
      <summary>
                    Reads the text content at the current position as a Boolean.
                </summary>
      <returns>
                    The text content as a <see cref="T:System.Boolean" /> object.
                </returns>
      <exception cref="T:System.InvalidCastException">
                    The attempted cast is not valid.
                </exception>
      <exception cref="T:System.FormatException">
                    The string format is not valid.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsDateTime">
      <summary>
                    Reads the text content at the current position as a <see cref="T:System.DateTime" /> object.
                </summary>
      <returns>
                    The text content as a <see cref="T:System.DateTime" /> object.
                </returns>
      <exception cref="T:System.InvalidCastException">
                    The attempted cast is not valid.
                </exception>
      <exception cref="T:System.FormatException">
                    The string format is not valid.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsDecimal">
      <summary>
                    Reads the text content at the current position as a <see cref="T:System.Decimal" /> object.
                </summary>
      <returns>
                    The text content at the current position as a <see cref="T:System.Decimal" /> object.
                </returns>
      <exception cref="T:System.InvalidCastException">
                    The attempted cast is not valid.
                </exception>
      <exception cref="T:System.FormatException">
                    The string format is not valid.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsDouble">
      <summary>
                    Reads the text content at the current position as a double-precision floating-point number.
                </summary>
      <returns>
                    The text content as a double-precision floating-point number.
                </returns>
      <exception cref="T:System.InvalidCastException">
                    The attempted cast is not valid.
                </exception>
      <exception cref="T:System.FormatException">
                    The string format is not valid.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsFloat">
      <summary>
                    Reads the text content at the current position as a single-precision floating point number.
                </summary>
      <returns>
                    The text content at the current position as a single-precision floating point number.
                </returns>
      <exception cref="T:System.InvalidCastException">
                    The attempted cast is not valid.
                </exception>
      <exception cref="T:System.FormatException">
                    The string format is not valid.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsInt">
      <summary>
                    Reads the text content at the current position as a 32-bit signed integer.
                </summary>
      <returns>
                    The text content as a 32-bit signed integer.
                </returns>
      <exception cref="T:System.InvalidCastException">
                    The attempted cast is not valid.
                </exception>
      <exception cref="T:System.FormatException">
                    The string format is not valid.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsLong">
      <summary>
                    Reads the text content at the current position as a 64-bit signed integer.
                </summary>
      <returns>
                    The text content as a 64-bit signed integer.
                </returns>
      <exception cref="T:System.InvalidCastException">
                    The attempted cast is not valid.
                </exception>
      <exception cref="T:System.FormatException">
                    The string format is not valid.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsObject">
      <summary>
                    Reads the text content at the current position as an <see cref="T:System.Object" />.
                </summary>
      <returns>
                    The text content as the most appropriate common language runtime (CLR) object.
                </returns>
      <exception cref="T:System.InvalidCastException">
                    The attempted cast is not valid.
                </exception>
      <exception cref="T:System.FormatException">
                    The string format is not valid.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsString">
      <summary>
                    Reads the text content at the current position as a <see cref="T:System.String" /> object.
                </summary>
      <returns>
                    The text content as a <see cref="T:System.String" /> object.
                </returns>
      <exception cref="T:System.InvalidCastException">
                    The attempted cast is not valid.
                </exception>
      <exception cref="T:System.FormatException">
                    The string format is not valid.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>
                    Reads the element content as the requested type.
                </summary>
      <returns>
                    The element content converted to the requested typed object.
                </returns>
      <param name="returnType">
                    The type of the value to be returned.
                Note:
					With the release of the .NET Framework 3.5, the value of the 
								
								<paramref name="returnType" /> parameter can now be the <see cref="T:System.DateTimeOffset" /> type.
							</param>
      <param name="namespaceResolver">
                    An <see cref="T:System.Xml.IXmlNamespaceResolver" /> object that is used to resolve any namespace prefixes related to type conversion.
                </param>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.
                </exception>
      <exception cref="T:System.Xml.XmlException">
                    The current element contains child elements.
                
                    -or-
                
                    The element content cannot be converted to the requested type.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The method is called with null arguments.
                </exception>
      <exception cref="T:System.OverflowException">
                    Read Decimal.MaxValue.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver,System.String,System.String)">
      <summary>
                    Checks that the specified local name and namespace URI matches that of the current element, then reads the element content as the requested type.
                </summary>
      <returns>
                    The element content converted to the requested typed object.
                </returns>
      <param name="returnType">
                    The type of the value to be returned.
                Note:
					With the release of the .NET Framework 3.5, the value of the 
								
								<paramref name="returnType" /> parameter can now be the <see cref="T:System.DateTimeOffset" /> type.
							</param>
      <param name="namespaceResolver">
                    An <see cref="T:System.Xml.IXmlNamespaceResolver" /> object that is used to resolve any namespace prefixes related to type conversion.
                </param>
      <param name="localName">
                    The local name of the element.
                </param>
      <param name="namespaceURI">
                    The namespace URI of the element.
                </param>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.
                </exception>
      <exception cref="T:System.Xml.XmlException">
                    The current element contains child elements.
                
                    -or-
                
                    The element content cannot be converted to the requested type.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The method is called with null arguments.
                </exception>
      <exception cref="T:System.ArgumentException">
                    The specified local name and namespace URI do not match that of the current element being read.
                </exception>
      <exception cref="T:System.OverflowException">
                    Read Decimal.MaxValue.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>
                    Reads the element and decodes the Base64 content.
                </summary>
      <returns>
                    The number of bytes written to the buffer.
                </returns>
      <param name="buffer">
                    The buffer into which to copy the resulting text. This value cannot be null.
                </param>
      <param name="index">
                    The offset into the buffer where to start copying the result.
                </param>
      <param name="count">
                    The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="buffer" /> value is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The current node is not an element node.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The index into the buffer or index + count is larger than the allocated buffer size.
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Xml.XmlReader" /> implementation does not support this method.
                </exception>
      <exception cref="T:System.Xml.XmlException">
                    The element contains mixed-content.
                </exception>
      <exception cref="T:System.FormatException">
                    The content cannot be converted to the requested type.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>
                    Reads the element and decodes the BinHex content.
                </summary>
      <returns>
                    The number of bytes written to the buffer.
                </returns>
      <param name="buffer">
                    The buffer into which to copy the resulting text. This value cannot be null.
                </param>
      <param name="index">
                    The offset into the buffer where to start copying the result.
                </param>
      <param name="count">
                    The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="buffer" /> value is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The current node is not an element node.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The index into the buffer or index + count is larger than the allocated buffer size.
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Xml.XmlReader" /> implementation does not support this method.
                </exception>
      <exception cref="T:System.Xml.XmlException">
                    The element contains mixed-content.
                </exception>
      <exception cref="T:System.FormatException">
                    The content cannot be converted to the requested type.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBoolean">
      <summary>
                    Reads the current element and returns the contents as a <see cref="T:System.Boolean" /> object.
                </summary>
      <returns>
                    The element content as a <see cref="T:System.Boolean" /> object.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.
                </exception>
      <exception cref="T:System.Xml.XmlException">
                    The current element contains child elements.
                
                    -or-
                
                    The element content cannot be converted to a <see cref="T:System.Boolean" /> object.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The method is called with null arguments.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBoolean(System.String,System.String)">
      <summary>
                    Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a <see cref="T:System.Boolean" /> object.
                </summary>
      <returns>
                    The element content as a <see cref="T:System.Boolean" /> object.
                </returns>
      <param name="localName">
                    The local name of the element.
                </param>
      <param name="namespaceURI">
                    The namespace URI of the element.
                </param>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.
                </exception>
      <exception cref="T:System.Xml.XmlException">
                    The current element contains child elements.
                
                    -or-
                
                    The element content cannot be converted to the requested type.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The method is called with null arguments.
                </exception>
      <exception cref="T:System.ArgumentException">
                    The specified local name and namespace URI do not match that of the current element being read.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDateTime">
      <summary>
                    Reads the current element and returns the contents as a <see cref="T:System.DateTime" /> object.
                </summary>
      <returns>
                    The element content as a <see cref="T:System.DateTime" /> object.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.
                </exception>
      <exception cref="T:System.Xml.XmlException">
                    The current element contains child elements.
                
                    -or-
                
                    The element content cannot be converted to a <see cref="T:System.DateTime" /> object.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The method is called with null arguments.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDateTime(System.String,System.String)">
      <summary>
                    Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a <see cref="T:System.DateTime" /> object.
                </summary>
      <returns>
                    The element contents as a <see cref="T:System.DateTime" /> object.
                </returns>
      <param name="localName">
                    The local name of the element.
                </param>
      <param name="namespaceURI">
                    The namespace URI of the element.
                </param>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.
                </exception>
      <exception cref="T:System.Xml.XmlException">
                    The current element contains child elements.
                
                    -or-
                
                    The element content cannot be converted to the requested type.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The method is called with null arguments.
                </exception>
      <exception cref="T:System.ArgumentException">
                    The specified local name and namespace URI do not match that of the current element being read.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDecimal">
      <summary>
                    Reads the current element and returns the contents as a <see cref="T:System.Decimal" /> object.
                </summary>
      <returns>
                    The element content as a <see cref="T:System.Decimal" /> object.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.
                </exception>
      <exception cref="T:System.Xml.XmlException">
                    The current element contains child elements.
                
                    -or-
                
                    The element content cannot be converted to a <see cref="T:System.Decimal" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The method is called with null arguments.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDecimal(System.String,System.String)">
      <summary>
                    Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a <see cref="T:System.Decimal" /> object.
                </summary>
      <returns>
                    The element content as a <see cref="T:System.Decimal" /> object.
                </returns>
      <param name="localName">
                    The local name of the element.
                </param>
      <param name="namespaceURI">
                    The namespace URI of the element.
                </param>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.
                </exception>
      <exception cref="T:System.Xml.XmlException">
                    The current element contains child elements.
                
                    -or-
                
                    The element content cannot be converted to a <see cref="T:System.Decimal" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The method is called with null arguments.
                </exception>
      <exception cref="T:System.ArgumentException">
                    The specified local name and namespace URI do not match that of the current element being read.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDouble">
      <summary>
                    Reads the current element and returns the contents as a double-precision floating-point number.
                </summary>
      <returns>
                    The element content as a double-precision floating-point number.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.
                </exception>
      <exception cref="T:System.Xml.XmlException">
                    The current element contains child elements.
                
                    -or-
                
                    The element content cannot be converted to a double-precision floating-point number.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The method is called with null arguments.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDouble(System.String,System.String)">
      <summary>
                    Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a double-precision floating-point number.
                </summary>
      <returns>
                    The element content as a double-precision floating-point number.
                </returns>
      <param name="localName">
                    The local name of the element.
                </param>
      <param name="namespaceURI">
                    The namespace URI of the element.
                </param>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.
                </exception>
      <exception cref="T:System.Xml.XmlException">
                    The current element contains child elements.
                
                    -or-
                
                    The element content cannot be converted to the requested type.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The method is called with null arguments.
                </exception>
      <exception cref="T:System.ArgumentException">
                    The specified local name and namespace URI do not match that of the current element being read.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsFloat">
      <summary>
                    Reads the current element and returns the contents as single-precision floating-point number.
                </summary>
      <returns>
                    The element content as a single-precision floating point number.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.
                </exception>
      <exception cref="T:System.Xml.XmlException">
                    The current element contains child elements.
                
                    -or-
                
                    The element content cannot be converted to a single-precision floating-point number.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The method is called with null arguments.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsFloat(System.String,System.String)">
      <summary>
                    Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a single-precision floating-point number.
                </summary>
      <returns>
                    The element content as a single-precision floating point number.
                </returns>
      <param name="localName">
                    The local name of the element.
                </param>
      <param name="namespaceURI">
                    The namespace URI of the element.
                </param>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.
                </exception>
      <exception cref="T:System.Xml.XmlException">
                    The current element contains child elements.
                
                    -or-
                
                    The element content cannot be converted to a single-precision floating-point number.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The method is called with null arguments.
                </exception>
      <exception cref="T:System.ArgumentException">
                    The specified local name and namespace URI do not match that of the current element being read.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsInt">
      <summary>
                    Reads the current element and returns the contents as a 32-bit signed integer.
                </summary>
      <returns>
                    The element content as a 32-bit signed integer.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.
                </exception>
      <exception cref="T:System.Xml.XmlException">
                    The current element contains child elements.
                
                    -or-
                
                    The element content cannot be converted to a 32-bit signed integer.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The method is called with null arguments.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsInt(System.String,System.String)">
      <summary>
                    Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a 32-bit signed integer.
                </summary>
      <returns>
                    The element content as a 32-bit signed integer.
                </returns>
      <param name="localName">
                    The local name of the element.
                </param>
      <param name="namespaceURI">
                    The namespace URI of the element.
                </param>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.
                </exception>
      <exception cref="T:System.Xml.XmlException">
                    The current element contains child elements.
                
                    -or-
                
                    The element content cannot be converted to a 32-bit signed integer.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The method is called with null arguments.
                </exception>
      <exception cref="T:System.ArgumentException">
                    The specified local name and namespace URI do not match that of the current element being read.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsLong">
      <summary>
                    Reads the current element and returns the contents as a 64-bit signed integer.
                </summary>
      <returns>
                    The element content as a 64-bit signed integer.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.
                </exception>
      <exception cref="T:System.Xml.XmlException">
                    The current element contains child elements.
                
                    -or-
                
                    The element content cannot be converted to a 64-bit signed integer.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The method is called with null arguments.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsLong(System.String,System.String)">
      <summary>
                    Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a 64-bit signed integer.
                </summary>
      <returns>
                    The element content as a 64-bit signed integer.
                </returns>
      <param name="localName">
                    The local name of the element.
                </param>
      <param name="namespaceURI">
                    The namespace URI of the element.
                </param>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.
                </exception>
      <exception cref="T:System.Xml.XmlException">
                    The current element contains child elements.
                
                    -or-
                
                    The element content cannot be converted to a 64-bit signed integer.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The method is called with null arguments.
                </exception>
      <exception cref="T:System.ArgumentException">
                    The specified local name and namespace URI do not match that of the current element being read.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsObject">
      <summary>
                    Reads the current element and returns the contents as an <see cref="T:System.Object" />.
                </summary>
      <returns>
                    A boxed common language runtime (CLR) object of the most appropriate type. The <see cref="P:System.Xml.XmlReader.ValueType" /> property determines the appropriate CLR type. If the content is typed as a list type, this method returns an array of boxed objects of the appropriate type.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.
                </exception>
      <exception cref="T:System.Xml.XmlException">
                    The current element contains child elements.
                
                    -or-
                
                    The element content cannot be converted to the requested type
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The method is called with null arguments.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsObject(System.String,System.String)">
      <summary>
                    Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as an <see cref="T:System.Object" />.
                </summary>
      <returns>
                    A boxed common language runtime (CLR) object of the most appropriate type. The <see cref="P:System.Xml.XmlReader.ValueType" /> property determines the appropriate CLR type. If the content is typed as a list type, this method returns an array of boxed objects of the appropriate type.
                </returns>
      <param name="localName">
                    The local name of the element.
                </param>
      <param name="namespaceURI">
                    The namespace URI of the element.
                </param>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.
                </exception>
      <exception cref="T:System.Xml.XmlException">
                    The current element contains child elements.
                
                    -or-
                
                    The element content cannot be converted to the requested type.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The method is called with null arguments.
                </exception>
      <exception cref="T:System.ArgumentException">
                    The specified local name and namespace URI do not match that of the current element being read.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsString">
      <summary>
                    Reads the current element and returns the contents as a <see cref="T:System.String" /> object.
                </summary>
      <returns>
                    The element content as a <see cref="T:System.String" /> object.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.
                </exception>
      <exception cref="T:System.Xml.XmlException">
                    The current element contains child elements.
                
                    -or-
                
                    The element content cannot be converted to a <see cref="T:System.String" /> object.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The method is called with null arguments.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsString(System.String,System.String)">
      <summary>
                    Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a <see cref="T:System.String" /> object.
                </summary>
      <returns>
                    The element content as a <see cref="T:System.String" /> object.
                </returns>
      <param name="localName">
                    The local name of the element.
                </param>
      <param name="namespaceURI">
                    The namespace URI of the element.
                </param>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.
                </exception>
      <exception cref="T:System.Xml.XmlException">
                    The current element contains child elements.
                
                    -or-
                
                    The element content cannot be converted to a <see cref="T:System.String" /> object.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The method is called with null arguments.
                </exception>
      <exception cref="T:System.ArgumentException">
                    The specified local name and namespace URI do not match that of the current element being read.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadEndElement">
      <summary>
                    Checks that the current content node is an end tag and advances the reader to the next node.
                </summary>
      <exception cref="T:System.Xml.XmlException">
                    The current node is not an end tag or if incorrect XML is encountered in the input stream. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadInnerXml">
      <summary>
                    When overridden in a derived class, reads all the content, including markup, as a string.
                </summary>
      <returns>
                    All the XML content, including markup, in the current node. If the current node has no children, an empty string is returned.
                
                    If the current node is neither an element nor attribute, an empty string is returned.
                </returns>
      <exception cref="T:System.Xml.XmlException">
                    The XML was not well-formed, or an error occurred while parsing the XML. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadOuterXml">
      <summary>
                    When overridden in a derived class, reads the content, including markup, representing this node and all its children.
                </summary>
      <returns>
                    If the reader is positioned on an element or an attribute node, this method returns all the XML content, including markup, of the current node and all its children; otherwise, it returns an empty string.
                </returns>
      <exception cref="T:System.Xml.XmlException">
                    The XML was not well-formed, or an error occurred while parsing the XML. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadStartElement">
      <summary>
                    Checks that the current node is an element and advances the reader to the next node.
                </summary>
      <exception cref="T:System.Xml.XmlException">
        <see cref="M:System.Xml.XmlReader.IsStartElement" /> returns false. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadStartElement(System.String)">
      <summary>
                    Checks that the current content node is an element with the given <see cref="P:System.Xml.XmlReader.Name" /> and advances the reader to the next node.
                </summary>
      <param name="name">
                    The qualified name of the element. 
                </param>
      <exception cref="T:System.Xml.XmlException">
        <see cref="M:System.Xml.XmlReader.IsStartElement" /> returns false or if the <see cref="P:System.Xml.XmlReader.Name" /> of the element does not match the given <paramref name="name" />. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadStartElement(System.String,System.String)">
      <summary>
                    Checks that the current content node is an element with the given <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" /> and advances the reader to the next node.
                </summary>
      <param name="localname">
                    The local name of the element. 
                </param>
      <param name="ns">
                    The namespace URI of the element. 
                </param>
      <exception cref="T:System.Xml.XmlException">
        <see cref="M:System.Xml.XmlReader.IsStartElement" /> returns false, or the <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" /> properties of the element found do not match the given arguments. 
                </exception>
    </member>
    <member name="P:System.Xml.XmlReader.ReadState">
      <summary>
                    When overridden in a derived class, gets the state of the reader.
                </summary>
      <returns>
                    One of the <see cref="T:System.Xml.ReadState" /> values.
                </returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadSubtree">
      <summary>
                    Returns a new XmlReader instance that can be used to read the current node, and all its descendants.
                </summary>
      <returns>
                    A new XmlReader instance set to ReadState.Initial. A call to the <see cref="M:System.Xml.XmlReader.Read" /> method positions the new XmlReader on the node that was current before the call to ReadSubtree method.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The XmlReader is not positioned on an element when this method is called.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToDescendant(System.String)">
      <summary>
                    Advances the <see cref="T:System.Xml.XmlReader" /> to the next descendant element with the specified qualified name.
                </summary>
      <returns>true if a matching descendant element is found; otherwise false. If a matching child element is not found, the <see cref="T:System.Xml.XmlReader" /> is positioned on the end tag (<see cref="P:System.Xml.XmlReader.NodeType" /> is XmlNodeType.EndElement) of the element.
                
                    If the <see cref="T:System.Xml.XmlReader" /> is not positioned on an element when <see cref="M:System.Xml.XmlReader.ReadToDescendant(System.String)" /> was called, this method returns false and the position of the <see cref="T:System.Xml.XmlReader" /> is not changed.
                </returns>
      <param name="name">
                    The qualified name of the element you wish to move to.
                </param>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToDescendant(System.String,System.String)">
      <summary>
                    Advances the <see cref="T:System.Xml.XmlReader" /> to the next descendant element with the specified local name and namespace URI.
                </summary>
      <returns>true if a matching descendant element is found; otherwise false. If a matching child element is not found, the <see cref="T:System.Xml.XmlReader" /> is positioned on the end tag (<see cref="P:System.Xml.XmlReader.NodeType" /> is XmlNodeType.EndElement) of the element.
                
                    If the <see cref="T:System.Xml.XmlReader" /> is not positioned on an element when <see cref="M:System.Xml.XmlReader.ReadToDescendant(System.String,System.String)" /> was called, this method returns false and the position of the <see cref="T:System.Xml.XmlReader" /> is not changed.
                </returns>
      <param name="localName">
                    The local name of the element you wish to move to.
                </param>
      <param name="namespaceURI">
                    The namespace URI of the element you wish to move to.
                </param>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToFollowing(System.String)">
      <summary>
                    Reads until an element with the specified qualified name is found.
                </summary>
      <returns>true if a matching element is found; otherwise false and the <see cref="T:System.Xml.XmlReader" /> is in an end of file state.
                </returns>
      <param name="name">
                    The qualified name of the element.
                </param>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToFollowing(System.String,System.String)">
      <summary>
                    Reads until an element with the specified local name and namespace URI is found.
                </summary>
      <returns>true if a matching element is found; otherwise false and the <see cref="T:System.Xml.XmlReader" /> is in an end of file state.
                </returns>
      <param name="localName">
                    The local name of the element.
                </param>
      <param name="namespaceURI">
                    The namespace URI of the element.
                </param>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToNextSibling(System.String)">
      <summary>
                    Advances the XmlReader to the next sibling element with the specified qualified name.
                </summary>
      <returns>true if a matching sibling element is found; otherwise false. If a matching sibling element is not found, the XmlReader is positioned on the end tag (<see cref="P:System.Xml.XmlReader.NodeType" /> is XmlNodeType.EndElement) of the parent element.
                </returns>
      <param name="name">
                    The qualified name of the sibling element you wish to move to.
                </param>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToNextSibling(System.String,System.String)">
      <summary>
                    Advances the XmlReader to the next sibling element with the specified local name and namespace URI.
                </summary>
      <returns>true if a matching sibling element is found; otherwise false. If a matching sibling element is not found, the XmlReader is positioned on the end tag (<see cref="P:System.Xml.XmlReader.NodeType" /> is XmlNodeType.EndElement) of the parent element.
                </returns>
      <param name="localName">
                    The local name of the sibling element you wish to move to.
                </param>
      <param name="namespaceURI">
                    The namespace URI of the sibling element you wish to move to
                </param>
    </member>
    <member name="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)">
      <summary>
                    Reads large streams of text embedded in an XML document.
                </summary>
      <returns>
                    The number of characters read into the buffer. The value zero is returned when there is no more text content.
                </returns>
      <param name="buffer">
                    The array of characters that serves as the buffer to which the text contents are written. This value cannot be null.
                </param>
      <param name="index">
                    The offset within the buffer where the <see cref="T:System.Xml.XmlReader" /> can start to copy the results.
                </param>
      <param name="count">
                    The maximum number of characters to copy into the buffer. The actual number of characters copied is returned from this method.
                </param>
      <exception cref="T:System.InvalidOperationException">
                    The current node does not have a value (<see cref="P:System.Xml.XmlReader.HasValue" /> is false).
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="buffer" /> value is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The index into the buffer, or index + count is larger than the allocated buffer size.
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Xml.XmlReader" /> implementation does not support this method.
                </exception>
      <exception cref="T:System.Xml.XmlException">
                    The XML data is not well-formed.
                </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ResolveEntity">
      <summary>
                    When overridden in a derived class, resolves the entity reference for EntityReference nodes.
                </summary>
      <exception cref="T:System.InvalidOperationException">
                    The reader is not positioned on an EntityReference node; this implementation of the reader cannot resolve entities (<see cref="P:System.Xml.XmlReader.CanResolveEntity" /> returns false). 
                </exception>
    </member>
    <member name="P:System.Xml.XmlReader.Settings">
      <summary>
                    Gets the <see cref="T:System.Xml.XmlReaderSettings" /> object used to create this <see cref="T:System.Xml.XmlReader" /> instance.
                </summary>
      <returns>
                    The <see cref="T:System.Xml.XmlReaderSettings" /> object used to create this reader instance. If this reader was not created using the <see cref="Overload:System.Xml.XmlReader.Create" /> method, this property returns null.
                </returns>
    </member>
    <member name="M:System.Xml.XmlReader.Skip">
      <summary>
                    Skips the children of the current node.
                </summary>
    </member>
    <member name="M:System.Xml.XmlReader.System#IDisposable#Dispose">
      <summary>
                    For a description of this member, see <see cref="M:System.IDisposable.Dispose" />.
                </summary>
    </member>
    <member name="P:System.Xml.XmlReader.Value">
      <summary>
                    When overridden in a derived class, gets the text value of the current node.
                </summary>
      <returns>
                    The value returned depends on the <see cref="P:System.Xml.XmlReader.NodeType" /> of the node. The following table lists node types that have a value to return. All other node types return String.Empty.
                
                    Node type 
                
                    Value 
                Attribute
                    The value of the attribute. 
                CDATA
                    The content of the CDATA section. 
                Comment
                    The content of the comment. 
                DocumentType
                    The internal subset. 
                ProcessingInstruction
                    The entire content, excluding the target. 
                SignificantWhitespace
                    The white space between markup in a mixed content model. 
                Text
                    The content of the text node. 
                Whitespace
                    The white space between markup. 
                XmlDeclaration
                    The content of the declaration. 
                </returns>
    </member>
    <member name="P:System.Xml.XmlReader.ValueType">
      <summary>
                    Gets The Common Language Runtime (CLR) type for the current node.
                </summary>
      <returns>
                    The CLR type that corresponds to the typed value of the node. The default is System.String.
                </returns>
    </member>
    <member name="P:System.Xml.XmlReader.XmlLang">
      <summary>
                    When overridden in a derived class, gets the current xml:lang scope.
                </summary>
      <returns>
                    The current xml:lang scope.
                </returns>
    </member>
    <member name="P:System.Xml.XmlReader.XmlSpace">
      <summary>
                    When overridden in a derived class, gets the current xml:space scope.
                </summary>
      <returns>
                    One of the <see cref="T:System.Xml.XmlSpace" /> values. If no xml:space scope exists, this property defaults to XmlSpace.None.
                </returns>
    </member>
    <member name="T:System.Xml.XmlReaderSettings">
      <summary>
                    Specifies a set of features to support on the <see cref="T:System.Xml.XmlReader" /> object created by the <see cref="Overload:System.Xml.XmlReader.Create" /> method.
                </summary>
    </member>
    <member name="M:System.Xml.XmlReaderSettings.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Xml.XmlReaderSettings" /> class.
                </summary>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.CheckCharacters">
      <summary>
                    Gets or sets a value indicating whether to do character checking.
                </summary>
      <returns>true to do character checking; otherwise false. The default is true.
                Note:
					If the 
								
								<see cref="T:System.Xml.XmlReader" /> is processing text data, it always checks that the XML names and text content are valid, regardless of the property setting. Setting <see cref="P:System.Xml.XmlReaderSettings.CheckCharacters" /> to false turns off character checking for character entity references.
							</returns>
    </member>
    <member name="M:System.Xml.XmlReaderSettings.Clone">
      <summary>
                    Creates a copy of the <see cref="T:System.Xml.XmlReaderSettings" /> instance.
                </summary>
      <returns>
                    The cloned <see cref="T:System.Xml.XmlReaderSettings" /> object.
                </returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.CloseInput">
      <summary>
                    Gets or sets a value indicating whether the underlying stream or <see cref="T:System.IO.TextReader" /> should be closed when the reader is closed.
                </summary>
      <returns>true to close the underlying stream or <see cref="T:System.IO.TextReader" /> when the reader is closed; otherwise false. The default is false.
                </returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.ConformanceLevel">
      <summary>
                    Gets or sets the level of conformance which the <see cref="T:System.Xml.XmlReader" /> will comply.
                </summary>
      <returns>
                    One of the <see cref="T:System.Xml.ConformanceLevel" /> values. The default is ConformanceLevel.Document.
                </returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.DtdProcessing">
      <summary>
                    Gets or sets the <see cref="T:System.Xml.DtdProcessing" /> enumeration.
                </summary>
      <returns>
                    The <see cref="T:System.Xml.DtdProcessing" /> enumeration contains the <see cref="F:System.Xml.DtdProcessing.Prohibit" />, <see cref="F:System.Xml.DtdProcessing.Ignore" />, and <see cref="F:System.Xml.DtdProcessing.Parse" /> enumerators. <see cref="F:System.Xml.DtdProcessing.Prohibit" /> is the default behavior. This enumeration is set on the <see cref="P:System.Xml.XmlReaderSettings.DtdProcessing" /> property. In the .NET Framework for Silverlight, the <see cref="P:System.Xml.XmlReaderSettings.DtdProcessing" /> property replaces the ProhibitDTD property and adds the ability to ignore the DOCTYPE element.
                Important Note:
					If the 
								
								<see cref="P:System.Xml.XmlReaderSettings.DtdProcessing" /> property is set to <see cref="F:System.Xml.DtdProcessing.Ignore" />, the <see cref="T:System.Xml.XmlReader" /> will not report the DTDs. This means that the DTD/DOCTYPE will be lost on output. 
							</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.IgnoreComments">
      <summary>
                    Gets or sets a value indicating whether to ignore comments.
                </summary>
      <returns>true to ignore comments; otherwise false. The default is false.
                </returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.IgnoreProcessingInstructions">
      <summary>
                    Gets or sets a value indicating whether to ignore processing instructions.
                </summary>
      <returns>true to ignore processing instructions; otherwise false. The default is false.
                </returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.IgnoreWhitespace">
      <summary>
                    Gets or sets a value indicating whether to ignore insignificant white space.
                </summary>
      <returns>true to ignore white space; otherwise false. The default is false.
                </returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.LineNumberOffset">
      <summary>
                    Gets or sets line number offset of the <see cref="T:System.Xml.XmlReader" /> object.
                </summary>
      <returns>
                    The line number offset. The default is 0.
                </returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.LinePositionOffset">
      <summary>
                    Gets or sets line position offset of the <see cref="T:System.Xml.XmlReader" /> object.
                </summary>
      <returns>
                    The line number offset. The default is 0.
                </returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.MaxCharactersFromEntities">
      <summary>
                    Gets or sets a value indicating the maximum allowable number of characters in a document that result from expanding entities.
                </summary>
      <returns>
                    The maximum allowable number of characters from expanded entities. The default is 0.
                </returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.MaxCharactersInDocument">
      <summary>
                    Gets or sets a value indicating the maximum allowable number of characters XML document. A zero (0) value means no limits on the size of the XML document. A non-zero value specifies the maximum size, in characters.
                </summary>
      <returns>
                    The maximum allowable number of characters in an XML document. The default is 0.
                </returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.NameTable">
      <summary>
                    Gets or sets the <see cref="T:System.Xml.XmlNameTable" /> used for atomized string comparisons.
                </summary>
      <returns>
                    The <see cref="T:System.Xml.XmlNameTable" /> that stores all the atomized strings used by all <see cref="T:System.Xml.XmlReader" /> instances created using this <see cref="T:System.Xml.XmlReaderSettings" /> object.
                
                    The default is null. The created <see cref="T:System.Xml.XmlReader" /> instance will use a new empty <see cref="T:System.Xml.NameTable" /> if this value is null.
                </returns>
    </member>
    <member name="M:System.Xml.XmlReaderSettings.Reset">
      <summary>
                    Resets the members of the settings class to their default values.
                </summary>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.XmlResolver">
      <summary>
                    Sets the <see cref="T:System.Xml.XmlResolver" /> used to access external documents.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.XmlResolver" /> used to access external documents. If set to null, an <see cref="T:System.Xml.XmlException" /> is thrown when the <see cref="T:System.Xml.XmlReader" /> tries to access an external resource. 
                </returns>
    </member>
    <member name="T:System.Xml.XmlResolver">
      <summary>
                    Resolves external XML resources named by a Uniform Resource Identifier (URI). 
                </summary>
    </member>
    <member name="M:System.Xml.XmlResolver.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Xml.XmlResolver" /> class.
                </summary>
    </member>
    <member name="M:System.Xml.XmlResolver.GetEntity(System.Uri,System.String,System.Type)">
      <summary>
                    When overridden in a derived class, maps a URI to an object containing the actual resource.
                </summary>
      <returns>
                    A <see cref="T:System.IO.Stream" /> object or null if a type other than stream is specified.
                </returns>
      <param name="absoluteUri">
                    The URI returned from <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" />. 
                </param>
      <param name="role">
                    The current version does not use this parameter when resolving URIs. This is provided for future extensibility purposes. For example, this can be mapped to the xlink:role and used as an implementation specific argument in other scenarios. 
                </param>
      <param name="ofObjectToReturn">
                    The type of object to return. The current version only returns <see cref="T:System.IO.Stream" /> objects. 
                </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="ofObjectToReturn" /> is not a Stream type. 
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="absoluteUri" /> is null. 
                </exception>
      <exception cref="T:System.Exception">
                    There is a runtime error (for example, an interrupted server connection). 
                </exception>
    </member>
    <member name="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)">
      <summary>
                    When overridden in a derived class, resolves the absolute URI from the base and relative URIs.
                </summary>
      <returns>
                    A <see cref="T:System.Uri" /> representing the absolute URI or null if the relative URI cannot be resolved.
                </returns>
      <param name="baseUri">
                    The base URI used to resolve the relative URI 
                </param>
      <param name="relativeUri">
                    The URI to resolve. The URI can be absolute or relative. If absolute, this value effectively replaces the <paramref name="baseUri" /> value. If relative, it combines with the <paramref name="baseUri" /> to make an absolute URI. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="relativeUri" /> is null</exception>
    </member>
    <member name="M:System.Xml.XmlResolver.SupportsType(System.Uri,System.Type)">
      <summary>
                    This method adds the ability for the resolver to return other types than just <see cref="T:System.IO.Stream" />.
                </summary>
      <returns>true if the type parameter is a <see cref="T:System.IO.Stream" />, otherwise false.
                </returns>
      <param name="absoluteUri"></param>
      <param name="type">
                    The type to return.
                </param>
    </member>
    <member name="T:System.Xml.XmlSpace">
      <summary>
                    Specifies the current xml:space scope.
                </summary>
    </member>
    <member name="F:System.Xml.XmlSpace.None">
      <summary>
                    No xml:space scope.
                </summary>
    </member>
    <member name="F:System.Xml.XmlSpace.Default">
      <summary>
                    The xml:space scope equals default.
                </summary>
    </member>
    <member name="F:System.Xml.XmlSpace.Preserve">
      <summary>
                    The xml:space scope equals preserve.
                </summary>
    </member>
    <member name="T:System.Xml.XmlTokenizedType">
      <summary>
                    Represents the XML type for the string. This allows the string to be read as a particular XML type, for example a CDATA section type.
                </summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.CDATA">
      <summary>
                    CDATA type.
                </summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ID">
      <summary>
                    ID type.
                </summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.IDREF">
      <summary>
                    IDREF type.
                </summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.IDREFS">
      <summary>
                    IDREFS type.
                </summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ENTITY">
      <summary>
                    ENTITY type.
                </summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ENTITIES">
      <summary>
                    ENTITIES type.
                </summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NMTOKEN">
      <summary>
                    NMTOKEN type.
                </summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NMTOKENS">
      <summary>
                    NMTOKENS type.
                </summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NOTATION">
      <summary>
                    NOTATION type.
                </summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ENUMERATION">
      <summary>
                    ENUMERATION type.
                </summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.QName">
      <summary>
                    QName type.
                </summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NCName">
      <summary>
                    NCName type.
                </summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.None">
      <summary>
                    No type.
                </summary>
    </member>
    <member name="T:System.Xml.XmlWriter">
      <summary>
                    Represents a writer that provides a fast, non-cached, forward-only means of generating streams or files containing XML data.
                </summary>
    </member>
    <member name="M:System.Xml.XmlWriter.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Xml.XmlWriter" /> class.
                </summary>
    </member>
    <member name="M:System.Xml.XmlWriter.Close">
      <summary>
                    When overridden in a derived class, closes this stream and the underlying stream.
                </summary>
      <exception cref="T:System.InvalidOperationException">
                    A call is made to write more output after Close has been called or the result of this call is an invalid XML document. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.IO.Stream)">
      <summary>
                    Creates a new <see cref="T:System.Xml.XmlWriter" /> instance using the specified stream.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.XmlWriter" /> object.
                </returns>
      <param name="output">
                    The stream to which you want to write. The <see cref="T:System.Xml.XmlWriter" /> writes XML 1.0 text syntax and appends it to the specified stream.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="stream" /> value is null.
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.IO.Stream,System.Xml.XmlWriterSettings)">
      <summary>
                    Creates a new <see cref="T:System.Xml.XmlWriter" /> instance using the stream and <see cref="T:System.Xml.XmlWriterSettings" /> object.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.XmlWriter" /> object.
                </returns>
      <param name="output">
                    The stream to which you want to write. The <see cref="T:System.Xml.XmlWriter" /> writes XML 1.0 text syntax and appends it to the specified stream
                </param>
      <param name="settings">
                    The <see cref="T:System.Xml.XmlWriterSettings" /> object used to configure the new <see cref="T:System.Xml.XmlWriter" /> instance. If this is null, a <see cref="T:System.Xml.XmlWriterSettings" /> with default settings is used.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="stream" /> value is null.
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.IO.TextWriter)">
      <summary>
                    Creates a new <see cref="T:System.Xml.XmlWriter" /> instance using the specified <see cref="T:System.IO.TextWriter" />.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.XmlWriter" /> object.
                </returns>
      <param name="output">
                    The <see cref="T:System.IO.TextWriter" /> to which you want to write. The <see cref="T:System.Xml.XmlWriter" /> writes XML 1.0 text syntax and appends it to the specified <see cref="T:System.IO.TextWriter" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="text" /> value is null.
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.IO.TextWriter,System.Xml.XmlWriterSettings)">
      <summary>
                    Creates a new <see cref="T:System.Xml.XmlWriter" /> instance using the <see cref="T:System.IO.TextWriter" /> and <see cref="T:System.Xml.XmlWriterSettings" /> objects.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.XmlWriter" /> object.
                </returns>
      <param name="output">
                    The <see cref="T:System.IO.TextWriter" /> to which you want to write. The <see cref="T:System.Xml.XmlWriter" /> writes XML 1.0 text syntax and appends it to the specified <see cref="T:System.IO.TextWriter" />.
                </param>
      <param name="settings">
                    The <see cref="T:System.Xml.XmlWriterSettings" /> object used to configure the new <see cref="T:System.Xml.XmlWriter" /> instance. If this is null, a <see cref="T:System.Xml.XmlWriterSettings" /> with default settings is used.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="text" /> value is null.
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.Text.StringBuilder)">
      <summary>
                    Creates a new <see cref="T:System.Xml.XmlWriter" /> instance using the specified <see cref="T:System.Text.StringBuilder" />.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.XmlWriter" /> object.
                </returns>
      <param name="output">
                    The <see cref="T:System.Text.StringBuilder" /> to which to write to. Content written by the <see cref="T:System.Xml.XmlWriter" /> is appended to the <see cref="T:System.Text.StringBuilder" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="builder" /> value is null.
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.Text.StringBuilder,System.Xml.XmlWriterSettings)">
      <summary>
                    Creates a new <see cref="T:System.Xml.XmlWriter" /> instance using the <see cref="T:System.Text.StringBuilder" /> and <see cref="T:System.Xml.XmlWriterSettings" /> objects.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.XmlWriter" /> object.
                </returns>
      <param name="output">
                    The <see cref="T:System.Text.StringBuilder" /> to which to write to. Content written by the <see cref="T:System.Xml.XmlWriter" /> is appended to the <see cref="T:System.Text.StringBuilder" />.
                </param>
      <param name="settings">
                    The <see cref="T:System.Xml.XmlWriterSettings" /> object used to configure the new <see cref="T:System.Xml.XmlWriter" /> instance. If this is null, a <see cref="T:System.Xml.XmlWriterSettings" /> with default settings is used.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="builder" /> value is null.
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.Xml.XmlWriter)">
      <summary>
                    Creates a new <see cref="T:System.Xml.XmlWriter" /> instance using the specified <see cref="T:System.Xml.XmlWriter" /> object.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.XmlWriter" /> object that is wrapped around the specified <see cref="T:System.Xml.XmlWriter" /> object.
                </returns>
      <param name="output">
                    The <see cref="T:System.Xml.XmlWriter" /> object that you want to use as the underlying writer.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="writer" /> value is null.
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.Xml.XmlWriter,System.Xml.XmlWriterSettings)">
      <summary>
                    Creates a new <see cref="T:System.Xml.XmlWriter" /> instance using the specified <see cref="T:System.Xml.XmlWriter" /> and <see cref="T:System.Xml.XmlWriterSettings" /> objects.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.XmlWriter" /> object that is wrapped around the specified <see cref="T:System.Xml.XmlWriter" /> object.
                </returns>
      <param name="output">
                    The <see cref="T:System.Xml.XmlWriter" /> object that you want to use as the underlying writer.
                </param>
      <param name="settings">
                    The <see cref="T:System.Xml.XmlWriterSettings" /> object used to configure the new <see cref="T:System.Xml.XmlWriter" /> instance. If this is null, a <see cref="T:System.Xml.XmlWriterSettings" /> with default settings is used.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="writer" /> value is null.
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Dispose(System.Boolean)">
      <summary>
                    Releases the unmanaged resources used by the <see cref="T:System.Xml.XmlWriter" /> and optionally releases the managed resources.
                </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.
                </param>
    </member>
    <member name="M:System.Xml.XmlWriter.Flush">
      <summary>
                    When overridden in a derived class, flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
                </summary>
    </member>
    <member name="M:System.Xml.XmlWriter.LookupPrefix(System.String)">
      <summary>
                    When overridden in a derived class, returns the closest prefix defined in the current namespace scope for the namespace URI.
                </summary>
      <returns>
                    The matching prefix or null if no matching namespace URI is found in the current scope.
                </returns>
      <param name="ns">
                    The namespace URI whose prefix you want to find. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="ns" /> is either null or String.Empty. 
                </exception>
    </member>
    <member name="P:System.Xml.XmlWriter.Settings">
      <summary>
                    Gets the <see cref="T:System.Xml.XmlWriterSettings" /> object used to create this <see cref="T:System.Xml.XmlWriter" /> instance.
                </summary>
      <returns>
                    The <see cref="T:System.Xml.XmlWriterSettings" /> object used to create this writer instance. If this writer was not created using the <see cref="Overload:System.Xml.XmlWriter.Create" /> method, this property returns null.
                </returns>
    </member>
    <member name="M:System.Xml.XmlWriter.System#IDisposable#Dispose">
      <summary>
                    For a description of this member, see <see cref="M:System.IDisposable.Dispose" />.
                </summary>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributes(System.Xml.XmlReader,System.Boolean)">
      <summary>
                    When overridden in a derived class, writes out all the attributes found at the current position in the <see cref="T:System.Xml.XmlReader" />.
                </summary>
      <param name="reader">
                    The XmlReader from which to copy the attributes. 
                </param>
      <param name="defattr">true to copy the default attributes from the XmlReader; otherwise, false. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null. 
                </exception>
      <exception cref="T:System.Xml.XmlException">
                    The reader is not positioned on an element, attribute or XmlDeclaration node. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String)">
      <summary>
                    When overridden in a derived class, writes out the attribute with the specified local name and value.
                </summary>
      <param name="localName">
                    The local name of the attribute. 
                </param>
      <param name="value">
                    The value of the attribute. 
                </param>
      <exception cref="T:System.InvalidOperationException">
                    The state of writer is not WriteState.Element or writer is closed. 
                </exception>
      <exception cref="T:System.ArgumentException">
                    The xml:space or xml:lang attribute value is invalid. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String)">
      <summary>
                    When overridden in a derived class, writes an attribute with the specified local name, namespace URI, and value.
                </summary>
      <param name="localName">
                    The local name of the attribute. 
                </param>
      <param name="ns">
                    The namespace URI to associate with the attribute. 
                </param>
      <param name="value">
                    The value of the attribute. 
                </param>
      <exception cref="T:System.InvalidOperationException">
                    The state of writer is not WriteState.Element or writer is closed. 
                </exception>
      <exception cref="T:System.ArgumentException">
                    The xml:space or xml:lang attribute value is invalid. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String,System.String)">
      <summary>
                    When overridden in a derived class, writes out the attribute with the specified prefix, local name, namespace URI, and value.
                </summary>
      <param name="prefix">
                    The namespace prefix of the attribute. 
                </param>
      <param name="localName">
                    The local name of the attribute. 
                </param>
      <param name="ns">
                    The namespace URI of the attribute. 
                </param>
      <param name="value">
                    The value of the attribute. 
                </param>
      <exception cref="T:System.InvalidOperationException">
                    The state of writer is not WriteState.Element or writer is closed. 
                </exception>
      <exception cref="T:System.ArgumentException">
                    The xml:space or xml:lang attribute value is invalid. 
                </exception>
      <exception cref="T:System.Xml.XmlException">
                    The <paramref name="localName" /> or <paramref name="ns" /> is null. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>
                    When overridden in a derived class, encodes the specified binary bytes as Base64 and writes out the resulting text.
                </summary>
      <param name="buffer">
                    Byte array to encode. 
                </param>
      <param name="index">
                    The position in the buffer indicating the start of the bytes to write. 
                </param>
      <param name="count">
                    The number of bytes to write. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
                    The buffer length minus <paramref name="index" /> is less than <paramref name="count" />. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>
                    When overridden in a derived class, encodes the specified binary bytes as BinHex and writes out the resulting text.
                </summary>
      <param name="buffer">
                    Byte array to encode. 
                </param>
      <param name="index">
                    The position in the buffer indicating the start of the bytes to write. 
                </param>
      <param name="count">
                    The number of bytes to write. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentException">
                    The buffer length minus <paramref name="index" /> is less than <paramref name="count" />. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The writer is closed or in error state.
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCData(System.String)">
      <summary>
                    When overridden in a derived class, writes out a &lt;![CDATA[...]]&gt; block containing the specified text.
                </summary>
      <param name="text">
                    The text to place inside the CDATA block. 
                </param>
      <exception cref="T:System.ArgumentException">
                    The text would result in a non-well formed XML document. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCharEntity(System.Char)">
      <summary>
                    When overridden in a derived class, forces the generation of a character entity for the specified Unicode character value.
                </summary>
      <param name="ch">
                    The Unicode character for which to generate a character entity. 
                </param>
      <exception cref="T:System.ArgumentException">
                    The character is in the surrogate pair character range, 0xd800 - 0xdfff. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
      <summary>
                    When overridden in a derived class, writes text one buffer at a time.
                </summary>
      <param name="buffer">
                    Character array containing the text to write. 
                </param>
      <param name="index">
                    The position in the buffer indicating the start of the text to write. 
                </param>
      <param name="count">
                    The number of characters to write. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero. 
                
                    -or-
                
                    The buffer length minus <paramref name="index" /> is less than <paramref name="count" />; the call results in surrogate pair characters being split or an invalid surrogate pair being written.
                </exception>
      <exception cref="T:System.ArgumentException">
                    The <paramref name="buffer" /> parameter value is not valid.
                </exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is outside the bounds of the <paramref name="buffer" />.
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteComment(System.String)">
      <summary>
                    When overridden in a derived class, writes out a comment &lt;!--...--&gt; containing the specified text.
                </summary>
      <param name="text">
                    Text to place inside the comment. 
                </param>
      <exception cref="T:System.ArgumentException">
                    The text would result in a non-well formed XML document. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteDocType(System.String,System.String,System.String,System.String)">
      <summary>
                    When overridden in a derived class, writes the DOCTYPE declaration with the specified name and optional attributes.
                </summary>
      <param name="name">
                    The name of the DOCTYPE. This must be non-empty. 
                </param>
      <param name="pubid">
                    If non-null it also writes PUBLIC "pubid" "sysid" where <paramref name="pubid" /> and <paramref name="sysid" /> are replaced with the value of the given arguments. 
                </param>
      <param name="sysid">
                    If <paramref name="pubid" /> is null and <paramref name="sysid" /> is non-null it writes SYSTEM "sysid" where <paramref name="sysid" /> is replaced with the value of this argument. 
                </param>
      <param name="subset">
                    If non-null it writes [subset] where subset is replaced with the value of this argument. 
                </param>
      <exception cref="T:System.InvalidOperationException">
                    This method was called outside the prolog (after the root element). 
                </exception>
      <exception cref="T:System.ArgumentException">
                    The value for <paramref name="name" /> would result in invalid XML. 
                </exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="name" /> is not valid. 
                </exception>
      <exception cref="T:System.NullReferenceException">
                    The<paramref name=" name" />,<paramref name=" pubid" />,<paramref name=" sysid" />, or <paramref name="subset" /> parameter is null.
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String)">
      <summary>
                    When overridden in a derived class, writes an element with the specified local name and value.
                </summary>
      <param name="localName">
                    The local name of the element. 
                </param>
      <param name="value">
                    The value of the element. 
                </param>
      <exception cref="T:System.ArgumentException">
                    The <paramref name="localName" /> value is null or an empty string.
                
                    -or-
                
                    The parameter values are not valid.
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String)">
      <summary>
                    When overridden in a derived class, writes an element with the specified local name, namespace URI, and value.
                </summary>
      <param name="localName">
                    The local name of the element. 
                </param>
      <param name="ns">
                    The namespace URI to associate with the element. 
                </param>
      <param name="value">
                    The value of the element. 
                </param>
      <exception cref="T:System.ArgumentException">
                    The <paramref name="localName" /> value is null or an empty string.
                
                    -or-
                
                    The parameter values are not valid. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String,System.String)">
      <summary>
                    Writes an element with the specified local name, namespace URI, and value.
                </summary>
      <param name="prefix">
                    The prefix of the element.
                </param>
      <param name="localName">
                    The local name of the element.
                </param>
      <param name="ns">
                    The namespace URI of the element.
                </param>
      <param name="value">
                    The value of the element.
                </param>
      <exception cref="T:System.ArgumentException">
                    The <paramref name="localName" /> value is null or an empty string.
                
                    -or-
                
                    The parameter values are not valid.
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndAttribute">
      <summary>
                    When overridden in a derived class, closes the previous <see cref="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)" /> call.
                </summary>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndDocument">
      <summary>
                    When overridden in a derived class, closes any open elements or attributes and puts the writer back in the Start state.
                </summary>
      <exception cref="T:System.ArgumentException">
                    The XML document is invalid. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndElement">
      <summary>
                    When overridden in a derived class, closes one element and pops the corresponding namespace scope.
                </summary>
      <exception cref="T:System.InvalidOperationException">
                    This results in an invalid XML document. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEntityRef(System.String)">
      <summary>
                    When overridden in a derived class, writes out an entity reference as &amp;name;.
                </summary>
      <param name="name">
                    The name of the entity reference. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is either null or String.Empty. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteFullEndElement">
      <summary>
                    When overridden in a derived class, closes one element and pops the corresponding namespace scope.
                </summary>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteName(System.String)">
      <summary>
                    When overridden in a derived class, writes out the specified name, ensuring it is a valid name according to the W3C XML 1.0 recommendation (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).
                </summary>
      <param name="name">
                    The name to write. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is not a valid XML name; or <paramref name="name" /> is either null or String.Empty. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNmToken(System.String)">
      <summary>
                    When overridden in a derived class, writes out the specified name, ensuring it is a valid NmToken according to the W3C XML 1.0 recommendation (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).
                </summary>
      <param name="name">
                    The name to write. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is not a valid NmToken; or <paramref name="name" /> is either null or String.Empty. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNode(System.Xml.XmlReader,System.Boolean)">
      <summary>
                    When overridden in a derived class, copies everything from the reader to the writer and moves the reader to the start of the next sibling.
                </summary>
      <param name="reader">
                    The <see cref="T:System.Xml.XmlReader" /> to read from. 
                </param>
      <param name="defattr">true to copy the default attributes from the XmlReader; otherwise, false. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="reader" /> contains invalid characters. 
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteProcessingInstruction(System.String,System.String)">
      <summary>
                    When overridden in a derived class, writes out a processing instruction with a space between the name and text as follows: &lt;?name text?&gt;.
                </summary>
      <param name="name">
                    The name of the processing instruction. 
                </param>
      <param name="text">
                    The text to include in the processing instruction. 
                </param>
      <exception cref="T:System.ArgumentException">
                    The text would result in a non-well formed XML document.
                <paramref name="name" /> is either null or String.Empty.
                
                    This method is being used to create an XML declaration after <see cref="M:System.Xml.XmlWriter.WriteStartDocument" /> has already been called. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteQualifiedName(System.String,System.String)">
      <summary>
                    When overridden in a derived class, writes out the namespace-qualified name. This method looks up the prefix that is in scope for the given namespace.
                </summary>
      <param name="localName">
                    The local name to write. 
                </param>
      <param name="ns">
                    The namespace URI for the name. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="localName" /> is String.Empty or not a valid name. 
                </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="localName" /> or <paramref name="ns" /> is null.
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
      <summary>
                    When overridden in a derived class, writes raw markup manually from a character buffer.
                </summary>
      <param name="buffer">
                    Character array containing the text to write. 
                </param>
      <param name="index">
                    The position within the buffer indicating the start of the text to write. 
                </param>
      <param name="count">
                    The number of characters to write. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero. 
                
                    -or-
                
                    The buffer length minus <paramref name="index" /> is less than <paramref name="count" />.
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteRaw(System.String)">
      <summary>
                    When overridden in a derived class, writes raw markup manually from a string.
                </summary>
      <param name="data">
                    String containing the text to write. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="data" /> is either null or String.Empty. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartAttribute(System.String)">
      <summary>
                    Writes the start of an attribute with the specified local name.
                </summary>
      <param name="localName">
                    The local name of the attribute.
                </param>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)">
      <summary>
                    Writes the start of an attribute with the specified local name and namespace URI.
                </summary>
      <param name="localName">
                    The local name of the attribute. 
                </param>
      <param name="ns">
                    The namespace URI of the attribute. 
                </param>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String,System.String)">
      <summary>
                    When overridden in a derived class, writes the start of an attribute with the specified prefix, local name, and namespace URI.
                </summary>
      <param name="prefix">
                    The namespace prefix of the attribute. 
                </param>
      <param name="localName">
                    The local name of the attribute. 
                </param>
      <param name="ns">
                    The namespace URI for the attribute. 
                </param>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartDocument">
      <summary>
                    When overridden in a derived class, writes the XML declaration with the version "1.0".
                </summary>
      <exception cref="T:System.InvalidOperationException">
                    This is not the first write method called after the constructor. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartDocument(System.Boolean)">
      <summary>
                    When overridden in a derived class, writes the XML declaration with the version "1.0" and the standalone attribute.
                </summary>
      <param name="standalone">
                    If true, it writes "standalone=yes"; if false, it writes "standalone=no". 
                </param>
      <exception cref="T:System.InvalidOperationException">
                    This is not the first write method called after the constructor. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartElement(System.String)">
      <summary>
                    When overridden in a derived class, writes out a start tag with the specified local name.
                </summary>
      <param name="localName">
                    The local name of the element. 
                </param>
      <exception cref="T:System.InvalidOperationException">
                    The writer is closed. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String)">
      <summary>
                    When overridden in a derived class, writes the specified start tag and associates it with the given namespace.
                </summary>
      <param name="localName">
                    The local name of the element. 
                </param>
      <param name="ns">
                    The namespace URI to associate with the element. If this namespace is already in scope and has an associated prefix, the writer automatically writes that prefix also. 
                </param>
      <exception cref="T:System.InvalidOperationException">
                    The writer is closed. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String,System.String)">
      <summary>
                    When overridden in a derived class, writes the specified start tag and associates it with the given namespace and prefix.
                </summary>
      <param name="prefix">
                    The namespace prefix of the element. 
                </param>
      <param name="localName">
                    The local name of the element. 
                </param>
      <param name="ns">
                    The namespace URI to associate with the element. 
                </param>
      <exception cref="T:System.InvalidOperationException">
                    The writer is closed. 
                </exception>
    </member>
    <member name="P:System.Xml.XmlWriter.WriteState">
      <summary>
                    When overridden in a derived class, gets the state of the writer.
                </summary>
      <returns>
                    One of the <see cref="T:System.Xml.WriteState" /> values.
                </returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteString(System.String)">
      <summary>
                    When overridden in a derived class, writes the given text content.
                </summary>
      <param name="text">
                    The text to write. 
                </param>
      <exception cref="T:System.ArgumentException">
                    The text string contains an invalid surrogate pair. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
      <summary>
                    When overridden in a derived class, generates and writes the surrogate character entity for the surrogate character pair.
                </summary>
      <param name="lowChar">
                    The low surrogate. This must be a value between 0xDC00 and 0xDFFF. 
                </param>
      <param name="highChar">
                    The high surrogate. This must be a value between 0xD800 and 0xDBFF. 
                </param>
      <exception cref="T:System.ArgumentException">
                    An invalid surrogate character pair was passed. 
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Boolean)">
      <summary>
                    Writes a <see cref="T:System.Boolean" /> value.
                </summary>
      <param name="value">
                    The <see cref="T:System.Boolean" /> value to write.
                </param>
      <exception cref="T:System.ArgumentException">
                    An invalid value was specified.
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.DateTime)">
      <summary>
                    Writes a <see cref="T:System.DateTime" /> value.
                </summary>
      <param name="value">
                    The <see cref="T:System.DateTime" /> value to write.
                </param>
      <exception cref="T:System.ArgumentException">
                    An invalid value was specified.
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Decimal)">
      <summary>
                    Writes a <see cref="T:System.Decimal" /> value.
                </summary>
      <param name="value">
                    The <see cref="T:System.Decimal" /> value to write.
                </param>
      <exception cref="T:System.ArgumentException">
                    An invalid value was specified.
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Double)">
      <summary>
                    Writes a <see cref="T:System.Double" /> value.
                </summary>
      <param name="value">
                    The <see cref="T:System.Double" /> value to write.
                </param>
      <exception cref="T:System.ArgumentException">
                    An invalid value was specified.
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Int32)">
      <summary>
                    Writes a <see cref="T:System.Int32" /> value.
                </summary>
      <param name="value">
                    The <see cref="T:System.Int32" /> value to write.
                </param>
      <exception cref="T:System.ArgumentException">
                    An invalid value was specified.
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Int64)">
      <summary>
                    Writes a <see cref="T:System.Int64" /> value.
                </summary>
      <param name="value">
                    The <see cref="T:System.Int64" /> value to write.
                </param>
      <exception cref="T:System.ArgumentException">
                    An invalid value was specified.
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Object)">
      <summary>
                    Writes the object value.
                </summary>
      <param name="value">
                    The object value to write. 
                Note:
					With the release of the .NET Framework 3.5, this method accepts 
								
								<see cref="T:System.DateTimeOffset" /> as a parameter.
							</param>
      <exception cref="T:System.ArgumentException">
                    An invalid value was specified.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="value" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The writer is closed or in error state.
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Single)">
      <summary>
                    Writes a single-precision floating-point number.
                </summary>
      <param name="value">
                    The single-precision floating-point number to write.
                </param>
      <exception cref="T:System.ArgumentException">
                    An invalid value was specified.
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.String)">
      <summary>
                    Writes a <see cref="T:System.String" /> value.
                </summary>
      <param name="value">
                    The <see cref="T:System.String" /> value to write.
                </param>
      <exception cref="T:System.ArgumentException">
                    An invalid value was specified.
                </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteWhitespace(System.String)">
      <summary>
                    When overridden in a derived class, writes out the given white space.
                </summary>
      <param name="ws">
                    The string of white space characters. 
                </param>
      <exception cref="T:System.ArgumentException">
                    The string contains non-white space characters. 
                </exception>
    </member>
    <member name="P:System.Xml.XmlWriter.XmlLang">
      <summary>
                    When overridden in a derived class, gets the current xml:lang scope.
                </summary>
      <returns>
                    The current xml:lang scope.
                </returns>
    </member>
    <member name="P:System.Xml.XmlWriter.XmlSpace">
      <summary>
                    When overridden in a derived class, gets an <see cref="T:System.Xml.XmlSpace" /> representing the current xml:space scope.
                </summary>
      <returns>
                    An XmlSpace representing the current xml:space scope.
                
                    Value 
                
                    Meaning 
                None
                    This is the default if no xml:space scope exists. 
                Default
                    The current scope is xml:space="default". 
                Preserve
                    The current scope is xml:space="preserve". 
                </returns>
    </member>
    <member name="T:System.Xml.XmlWriterSettings">
      <summary>
                    Specifies a set of features to support on the <see cref="T:System.Xml.XmlWriter" /> object created by the <see cref="Overload:System.Xml.XmlWriter.Create" /> method.
                </summary>
    </member>
    <member name="M:System.Xml.XmlWriterSettings.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Xml.XmlWriterSettings" /> class.
                </summary>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.CheckCharacters">
      <summary>
                    Gets or sets a value indicating whether to do character checking.
                </summary>
      <returns>true to do character checking; otherwise false. The default is true.
                </returns>
    </member>
    <member name="M:System.Xml.XmlWriterSettings.Clone">
      <summary>
                    Creates a copy of the <see cref="T:System.Xml.XmlWriterSettings" /> instance.
                </summary>
      <returns>
                    The cloned <see cref="T:System.Xml.XmlWriterSettings" /> object.
                </returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.CloseOutput">
      <summary>
                    Gets or sets a value indicating whether the <see cref="T:System.Xml.XmlWriter" /> should also close the underlying stream or <see cref="T:System.IO.TextWriter" /> when the <see cref="M:System.Xml.XmlWriter.Close" /> method is called.
                </summary>
      <returns>true to also close the underlying stream or <see cref="T:System.IO.TextWriter" />; otherwise false. The default is false.
                </returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.ConformanceLevel">
      <summary>
                    Gets or sets the level of conformance which the <see cref="T:System.Xml.XmlWriter" /> complies with.
                </summary>
      <returns>
                    One of the <see cref="T:System.Xml.ConformanceLevel" /> values. The default is ConformanceLevel.Document.
                </returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.Encoding">
      <summary>
                    Gets or sets the text encoding to use.
                </summary>
      <returns>
                    The text encoding to use. The default is Encoding.UTF8.
                </returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.Indent">
      <summary>
                    Gets or sets a value indicating whether to indent elements.
                </summary>
      <returns>true to write individual elements on new lines and indent; otherwise false. The default is false.
                </returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.IndentChars">
      <summary>
                    Gets or sets the character string to use when indenting. This setting is used when the <see cref="P:System.Xml.XmlWriterSettings.Indent" /> property is set to true.
                </summary>
      <returns>
                    The character string to use when indenting. This can be set to any string value. However, to ensure valid XML, you should specify only valid white space characters, such as space characters, tabs, carriage returns, or line feeds. The default is two spaces.
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    The value assigned to the <see cref="P:System.Xml.XmlWriterSettings.IndentChars" /> is null. 
                </exception>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.NamespaceHandling">
      <summary>
                    Gets or sets the <see cref="T:System.Xml.NamespaceHandling" /> enumeration used to specify whether to remove duplicate namespace declarations in the <see cref="T:System.Xml.XmlWriter" />. For the duplicate namespace to be removed, the prefix and the namespace have to match. 
                </summary>
      <returns>
                    The <see cref="T:System.Xml.NamespaceHandling" /> enumeration used to specify whether to remove duplicate namespace declarations in the <see cref="T:System.Xml.XmlWriter" />.
                </returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.NewLineChars">
      <summary>
                    Gets or sets the character string to use for line breaks. 
                </summary>
      <returns>
                    The character string to use for line breaks. This can be set to any string value. However, to ensure valid XML, you should specify only valid white space characters, such as space characters, tabs, carriage returns, or line feeds. The default is \r\n (carriage return, new line).
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    The value assigned to the <see cref="P:System.Xml.XmlWriterSettings.NewLineChars" /> is null. 
                </exception>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.NewLineHandling">
      <summary>
                    Gets or sets a value indicating whether to normalize line breaks in the output.
                </summary>
      <returns>
                    One of the <see cref="T:System.Xml.NewLineHandling" /> values. The default is <see cref="F:System.Xml.NewLineHandling.Replace" />.
                </returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.NewLineOnAttributes">
      <summary>
                    Gets or sets a value indicating whether to write attributes on a new line.
                </summary>
      <returns>true to write attributes on individual lines; otherwise false. The default is false.
                Note:
					This setting has no effect when the 
								
								<see cref="P:System.Xml.XmlWriterSettings.Indent" /> property value is false.
							
                    When <see cref="P:System.Xml.XmlWriterSettings.NewLineOnAttributes" /> is set to true, each attribute is pre-pended with a new line and one extra level of indentation.
                </returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.OmitXmlDeclaration">
      <summary>
                    Gets or sets a value indicating whether to write an XML declaration.
                </summary>
      <returns>true to omit the XML declaration; otherwise false. The default is false, an XML declaration is written.
                </returns>
    </member>
    <member name="M:System.Xml.XmlWriterSettings.Reset">
      <summary>
                    Resets the members of the settings class to their default values.
                </summary>
    </member>
    <member name="T:System.Xml.XmlXapResolver">
      <summary>
                    The <see cref="T:System.Xml.XmlXapResolver" /> type is used to resolve resources in the Silverlight application’s XAP package. 
                </summary>
    </member>
    <member name="M:System.Xml.XmlXapResolver.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Xml.XmlXapResolver" /> class. 
                </summary>
    </member>
    <member name="M:System.Xml.XmlXapResolver.GetEntity(System.Uri,System.String,System.Type)">
      <summary>
                    Maps a URI to an object that contains the actual resource.
                </summary>
      <returns>
                    A System.IO.Stream object. If the stream is not found, an exception is thrown.
                </returns>
      <param name="absoluteUri">
                    The URI returned from <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" />.
                </param>
      <param name="role">
                    The current version of the .NET Framework for Silverlight does not use this parameter when resolving URIs. This is provided for future extensibility purposes. For example, this can be mapped to the xlink:role and used as an implementation specific argument in other scenarios.
                </param>
      <param name="ofObjectToReturn">
                    The type of object to return. The current version only returns System.IO.Stream objects. 
                </param>
    </member>
    <member name="T:System.Xml.Schema.XmlSchema">
      <summary>
                    This class is provided for interface compatibility. It is not intended to be used from your Silverlight code.
                </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaForm">
      <summary>
                    Indicates if attributes or elements need to be qualified with a namespace prefix.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaForm.None">
      <summary>
                    Element and attribute form is not specified in the schema.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaForm.Qualified">
      <summary>
                    Elements and attributes must be qualified with a namespace prefix.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaForm.Unqualified">
      <summary>
                    Elements and attributes are not required to be qualified with a namespace prefix.
                </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaObject">
      <summary>
                    This class is provided for interface compatibility. It is not intended to be used from your Silverlight code.
                </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObject.#ctor">
      <summary>
                    This class is provided for interface compatibility. It is not intended to be used from your Silverlight code.
                </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSet">
      <summary>
                    This class is provided for interface compatibility. It is not intended to be used from your Silverlight code.
                </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSeverityType">
      <summary>
                    Represents the severity of the validation event.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSeverityType.Error">
      <summary>
                    Indicates that a validation error occurred when validating the instance document. This applies to document type definitions (DTDs) and XML Schema definition language (XSD) schemas. The World Wide Web Consortium (W3C) validity constraints are considered errors. If no validation event handler has been created, errors throw an exception.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSeverityType.Warning">
      <summary>
                    Indicates that a validation event occurred that is not an error. A warning is typically issued when there is no DTD or XML Schema to validate a particular element or attribute against. Unlike errors, warnings do not throw an exception if there is no validation event handler.
                </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlTypeCode">
      <summary>
                    Represents the W3C XML Schema Definition Language (XSD) schema types.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.None">
      <summary>
                    No type information.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Item">
      <summary>
                    An item such as a node or atomic value.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Node">
      <summary>
                    This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Document">
      <summary>
                    This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Element">
      <summary>
                    This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Attribute">
      <summary>
                    This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Namespace">
      <summary>
                    This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.ProcessingInstruction">
      <summary>
                    This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Comment">
      <summary>
                    This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Text">
      <summary>
                    This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.AnyAtomicType">
      <summary>
                    Any atomic value of a union.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UntypedAtomic">
      <summary>
                    An untyped atomic value.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.String">
      <summary>
                    A W3C XML Schema xs:string type.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Boolean">
      <summary>
                    A W3C XML Schema xs:boolean type.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Decimal">
      <summary>
                    A W3C XML Schema xs:decimal type.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Float">
      <summary>
                    A W3C XML Schema xs:float type.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Double">
      <summary>
                    A W3C XML Schema xs:double type.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Duration">
      <summary>
                    A W3C XML Schema xs:Duration type.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.DateTime">
      <summary>
                    A W3C XML Schema xs:dateTime type.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Time">
      <summary>
                    A W3C XML Schema xs:time type.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Date">
      <summary>
                    A W3C XML Schema xs:date type.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GYearMonth">
      <summary>
                    A W3C XML Schema xs:gYearMonth type.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GYear">
      <summary>
                    A W3C XML Schema xs:gYear type.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GMonthDay">
      <summary>
                    A W3C XML Schema xs:gMonthDay type.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GDay">
      <summary>
                    A W3C XML Schema xs:gDay type.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GMonth">
      <summary>
                    A W3C XML Schema xs:gMonth type.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.HexBinary">
      <summary>
                    A W3C XML Schema xs:hexBinary type.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Base64Binary">
      <summary>
                    A W3C XML Schema xs:base64Binary type.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.AnyUri">
      <summary>
                    A W3C XML Schema xs:anyURI type.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.QName">
      <summary>
                    A W3C XML Schema xs:QName type.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Notation">
      <summary>
                    A W3C XML Schema xs:NOTATION type.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NormalizedString">
      <summary>
                    A W3C XML Schema xs:normalizedString type.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Token">
      <summary>
                    A W3C XML Schema xs:token type.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Language">
      <summary>
                    A W3C XML Schema xs:language type.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NmToken">
      <summary>
                    A W3C XML Schema xs:NMTOKEN type.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Name">
      <summary>
                    A W3C XML Schema xs:Name type.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NCName">
      <summary>
                    A W3C XML Schema xs:NCName type.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Id">
      <summary>
                    A W3C XML Schema xs:ID type.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Idref">
      <summary>
                    A W3C XML Schema xs:IDREF type.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Entity">
      <summary>
                    A W3C XML Schema xs:ENTITY type.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Integer">
      <summary>
                    A W3C XML Schema xs:integer type.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NonPositiveInteger">
      <summary>
                    A W3C XML Schema xs:nonPositiveInteger type.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NegativeInteger">
      <summary>
                    A W3C XML Schema xs:negativeInteger type.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Long">
      <summary>
                    A W3C XML Schema xs:long type.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Int">
      <summary>
                    A W3C XML Schema xs:int type.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Short">
      <summary>
                    A W3C XML Schema xs:short type.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Byte">
      <summary>
                    A W3C XML Schema xs:byte type.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NonNegativeInteger">
      <summary>
                    A W3C XML Schema xs:nonNegativeInteger type.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UnsignedLong">
      <summary>
                    A W3C XML Schema xs:unsignedLong type.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UnsignedInt">
      <summary>
                    A W3C XML Schema xs:unsignedInt type.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UnsignedShort">
      <summary>
                    A W3C XML Schema xs:unsignedShort type.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UnsignedByte">
      <summary>
                    A W3C XML Schema xs:unsignedByte type.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.PositiveInteger">
      <summary>
                    A W3C XML Schema xs:positiveInteger type.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.YearMonthDuration">
      <summary>
                    This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.
                </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.DayTimeDuration">
      <summary>
                    This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.
                </summary>
    </member>
    <member name="T:System.Xml.Serialization.IXmlSerializable">
      <summary>Provides custom formatting for XML serialization and deserialization to control how your object is serialized or deserialized by the <see cref="T:System.Xml.XmlSerializer" />.</summary>
    </member>
    <member name="M:System.Xml.Serialization.IXmlSerializable.GetSchema">
      <summary>This method is reserved and should not be used. When implementing the <see cref="T:System.Xml.Serialization.IXmlSerializable" /> interface, you should return a null reference (Nothing in Visual Basic) from this method.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchema" /> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml" /> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml" /> method.</returns>
    </member>
    <member name="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)">
      <summary>Generates an object from its XML representation.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> stream from which the object is deserialized.</param>
    </member>
    <member name="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)">
      <summary>Converts an object into its XML representation.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> stream to which the object is serialized.</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlAnyElementAttribute">
      <summary>Specifies that the member (a field that returns an array of <see cref="T:System.Xml.Linq.XElement" /> or <see cref="T:System.Xml.Linq.XNode" /> objects) contains objects that represent an XML element that has no corresponding member in the object being serialized or deserialized.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> class and specifies the XML element name generated in the XML document.</summary>
      <param name="name">The name of the XML element that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> class and specifies the XML element name generated in the XML document and its XML namespace.</summary>
      <param name="name">The name of the XML element that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates. </param>
      <param name="ns">The XML namespace of the XML element. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttribute.Name">
      <summary>Gets or sets the XML element name.</summary>
      <returns>The name of the XML element.</returns>
      <exception cref="T:System.InvalidOperationException">The element name of an array member does not match the element name specified by the <see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Name" /> property. </exception>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttribute.Namespace">
      <summary>Gets or sets the XML namespace generated in the XML document.</summary>
      <returns>An XML namespace.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttribute.Order">
      <summary>Gets or sets the explicit order in which the elements are serialized or deserialized.</summary>
      <returns>The order of the code generation.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlArrayAttribute">
      <summary>Specifies that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> must serialize a particular class member as an array of XML elements.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlArrayAttribute" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlArrayAttribute" /> class and specifies the XML element name generated in the XML document instance.</summary>
      <param name="elementName">The name of the XML element that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayAttribute.ElementName">
      <summary>Gets or sets the XML element name given to the serialized array.</summary>
      <returns>The XML element name of the serialized array. The default is the name of the member to which the <see cref="T:System.Xml.Serialization.XmlArrayAttribute" /> is assigned.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayAttribute.Form">
      <summary>Gets or sets a value that indicates whether the XML element name generated by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> is qualified or unqualified.</summary>
      <returns>One of the <see cref="T:System.Xml.Schema.XmlSchemaForm" /> values. The default is XmlSchemaForm.None.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayAttribute.IsNullable">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Xml.Serialization.XmlSerializer" /> must serialize a member as an empty XML element with the xsi:nil attribute set to true.</summary>
      <returns>true if the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates the xsi:nil attribute; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayAttribute.Namespace">
      <summary>Gets or sets the namespace of the XML element.</summary>
      <returns>The namespace of the XML element.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayAttribute.Order">
      <summary>Gets or sets the explicit order in which the elements are serialized or deserialized.</summary>
      <returns>The order of the code generation.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlArrayItemAttribute">
      <summary>Specifies the derived types that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> can place in a serialized array.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> class and specifies the name of the XML element generated in the XML document.</summary>
      <param name="elementName">The name of the XML element. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> class and specifies the name of the XML element generated in the XML document and the <see cref="T:System.Type" /> that can be inserted into the generated XML document.</summary>
      <param name="elementName">The name of the XML element. </param>
      <param name="type">The <see cref="T:System.Type" /> of the object to serialize. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> class and specifies the <see cref="T:System.Type" /> that can be inserted into the serialized array.</summary>
      <param name="type">The <see cref="T:System.Type" /> of the object to serialize. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.DataType">
      <summary>Gets or sets the XML data type of the generated XML element.</summary>
      <returns>An XML Schema definition (XSD) data type, as defined by the World Wide Web Consortium (www.w3.org) document, XML Schema Part 2: Datatypes.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.ElementName">
      <summary>Gets or sets the name of the generated XML element.</summary>
      <returns>The name of the generated XML element. The default is the member identifier.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.Form">
      <summary>Gets or sets a value that indicates whether the name of the generated XML element is qualified.</summary>
      <returns>One of the <see cref="T:System.Xml.Schema.XmlSchemaForm" /> values. The default is XmlSchemaForm.None.</returns>
      <exception cref="T:System.Exception">The <see cref="P:System.Xml.Serialization.XmlArrayItemAttribute.Form" /> property is set to XmlSchemaForm.Unqualified and a <see cref="P:System.Xml.Serialization.XmlArrayItemAttribute.Namespace" /> value is specified. </exception>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.IsNullable">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Xml.Serialization.XmlSerializer" /> must serialize a member as an empty XML tag with the xsi:nil attribute set to true.</summary>
      <returns>true if the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates the xsi:nil attribute; otherwise, false and no instance is generated. The default is true.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.Namespace">
      <summary>Gets or sets the namespace of the generated XML element.</summary>
      <returns>The namespace of the generated XML element.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.NestingLevel">
      <summary>Gets or sets the level in a hierarchy of XML elements that the <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> affects.</summary>
      <returns>The zero-based index of a set of indexes in an array of arrays.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.Type">
      <summary>Gets or sets the type allowed in an array.</summary>
      <returns>A <see cref="T:System.Type" /> that is allowed in the array.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlAttributeAttribute">
      <summary>Specifies that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> must serialize the class member as an XML attribute.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> class and specifies the name of the generated XML attribute.</summary>
      <param name="attributeName">The name of the XML attribute that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> class.</summary>
      <param name="attributeName">The name of the XML attribute that is generated. </param>
      <param name="type">The <see cref="T:System.Type" /> used to store the attribute. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> class.</summary>
      <param name="type">The <see cref="T:System.Type" /> used to store the attribute. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.AttributeName">
      <summary>Gets or sets the name of the XML attribute.</summary>
      <returns>The name of the XML attribute. The default is the member name.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.DataType">
      <summary>Gets or sets the XSD data type of the XML attribute generated by the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</summary>
      <returns>An XSD (XML Schema Document) data type, as defined by the World Wide Web Consortium (www.w3.org) document, XML Schema Part 2: Datatypes.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.Form">
      <summary>Gets or sets a value that indicates whether the XML attribute name generated by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> is qualified.</summary>
      <returns>One of the <see cref="T:System.Xml.Schema.XmlSchemaForm" /> values. The default is XmlForm.None.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.Namespace">
      <summary>Gets or sets the XML namespace of the XML attribute.</summary>
      <returns>The XML namespace of the XML attribute.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.Type">
      <summary>Gets or sets the complex type of the XML attribute.</summary>
      <returns>The type of the XML attribute.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute">
      <summary>Specifies that the member can be further detected by using an enumeration.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlChoiceIdentifierAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlChoiceIdentifierAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute" /> class that specifies the name of the member that returns the enumeration used to detect a choice.</summary>
      <param name="name">The member name that returns the enumeration used to detect a choice. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlChoiceIdentifierAttribute.MemberName">
      <summary>Gets or sets the name of the field that returns the enumeration to use when detecting types.</summary>
      <returns>The name of a field that returns an enumeration.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlElementAttribute">
      <summary>Indicates that a public field or property represents an XML element when the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes or deserializes the object that contains it.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> class and specifies the name of the XML element.</summary>
      <param name="elementName">The XML element name of the serialized member. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> and specifies the name of the XML element and a derived type for the member to which the <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> is applied. This member type is used when the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes the object that contains it.</summary>
      <param name="elementName">The XML element name of the serialized member. </param>
      <param name="type">The <see cref="T:System.Type" /> of an object derived from the member's type. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> class and specifies a type for the member to which the <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> is applied. This type is used by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> when serializing or deserializing object that contains it.</summary>
      <param name="type">The <see cref="T:System.Type" /> of an object derived from the member's type. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.DataType">
      <summary>Gets or sets the XML Schema definition (XSD) data type of the XML element generated by the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</summary>
      <returns>An XML Schema data type, as defined by the World Wide Web Consortium (www.w3.org) document, XML Schema Part 2: Datatypes.</returns>
      <exception cref="T:System.Exception">The XML Schema data type you have specified cannot be mapped to the.NET data type. </exception>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.ElementName">
      <summary>Gets or sets the name of the generated XML element.</summary>
      <returns>The name of the generated XML element. The default is the member identifier.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Form">
      <summary>Gets or sets a value that indicates whether the element is qualified.</summary>
      <returns>One of the <see cref="T:System.Xml.Schema.XmlSchemaForm" /> values. The default is <see cref="F:System.Xml.Schema.XmlSchemaForm.None" />.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.IsNullable">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Xml.Serialization.XmlSerializer" /> must serialize a member that is set to null as an empty tag with the xsi:nil attribute set to true.</summary>
      <returns>true if the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates the xsi:nil attribute; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Namespace">
      <summary>Gets or sets the namespace assigned to the XML element that results when the class is serialized.</summary>
      <returns>The namespace of the XML element.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Order">
      <summary>Gets or sets the explicit order in which the elements are serialized or deserialized.</summary>
      <returns>The order of the code generation.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Type">
      <summary>Gets or sets the object type used to represent the XML element.</summary>
      <returns>The <see cref="T:System.Type" /> of the member.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlEnumAttribute">
      <summary>Controls how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes an enumeration member.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlEnumAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlEnumAttribute" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlEnumAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlEnumAttribute" /> class, and specifies the XML value that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates or recognizes (when it serializes or deserializes the enumeration, respectively).</summary>
      <param name="name">The overriding name of the enumeration member. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlEnumAttribute.Name">
      <summary>Gets or sets the value generated in an XML-document instance when the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes an enumeration, or the value recognized when it deserializes the enumeration member.</summary>
      <returns>The value generated in an XML-document instance when the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes the enumeration, or the value recognized when it deserializes the enumeration member.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlIgnoreAttribute">
      <summary>Instructs the <see cref="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)" /> method of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class not to serialize the public field or public read/write property value.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlIgnoreAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlIgnoreAttribute" /> class.</summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlIncludeAttribute">
      <summary>Allows the <see cref="T:System.Xml.Serialization.XmlSerializer" /> to recognize a type when it serializes or deserializes an object.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlIncludeAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlIncludeAttribute" /> class.</summary>
      <param name="type">The <see cref="T:System.Type" /> of the object to include. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlIncludeAttribute.Type">
      <summary>Gets or sets the type of the object to include.</summary>
      <returns>The <see cref="T:System.Type" /> of the object to include.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlNamespaceDeclarationsAttribute">
      <summary>Specifies that the target property, parameter, return value, or class member contains prefixes associated with namespaces that are used within an XML document.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlNamespaceDeclarationsAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlNamespaceDeclarationsAttribute" /> class.</summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlRootAttribute">
      <summary>Controls XML serialization of the attribute target as an XML root element.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlRootAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlRootAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> class and specifies the name of the XML root element.</summary>
      <param name="elementName">The name of the XML root element. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.DataType">
      <summary>Gets or sets the XSD data type of the XML root element.</summary>
      <returns>An XSD (XML Schema Document) data type, as defined by the World Wide Web Consortium (www.w3.org) document, XML Schema Part 2: Datatypes.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.ElementName">
      <summary>Gets or sets the name of the XML element that is generated and recognized by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class's <see cref="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)" /> and <see cref="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)" /> methods, respectively.</summary>
      <returns>The name of the XML root element that is generated and recognized in an XML-document instance. The default is the name of the serialized class.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.IsNullable">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Xml.Serialization.XmlSerializer" /> must serialize a member that is set to null into the xsi:nil attribute set to true.</summary>
      <returns>true if the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates the xsi:nil attribute; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.Namespace">
      <summary>Gets or sets the namespace for the XML root element.</summary>
      <returns>The namespace for the XML element.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlSchemaProviderAttribute">
      <summary>When applied to a type that implements the <see cref="T:System.Xml.Serialization.IXmlSerializable" /> interface, stores the name of a static method of the type that returns an XML schema and a <see cref="T:System.Xml.XmlQualifiedName" /> (or <see cref="T:System.Xml.Schema.XmlSchemaType" /> for anonymous types) that controls the serialization of the type.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaProviderAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /> class for a specified static method in the target type.</summary>
      <param name="methodName">The name of the static method that must be implemented.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSchemaProviderAttribute.IsAny">
      <summary>Gets or sets a value that determines whether the target class is a wildcard, or that the schema for the class contains only an xs:any element.</summary>
      <returns>true if the class is a wildcard or if the schema contains only the xs:any element; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSchemaProviderAttribute.MethodName">
      <summary>Gets the name of the static method that supplies the type's XML schema and the name of its XML Schema data type.</summary>
      <returns>The name of the static method that is invoked by the XML infrastructure to return an XML schema.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlTextAttribute">
      <summary>Indicates to the <see cref="T:System.Xml.Serialization.XmlSerializer" /> that the member must be treated as XML text when the class that contains it is serialized or deserialized.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlTextAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlTextAttribute" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlTextAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlTextAttribute" /> class.</summary>
      <param name="type">The <see cref="T:System.Type" /> of the member to be serialized. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlTextAttribute.DataType">
      <summary>Gets or sets the XML Schema definition (XSD) language data type of the text generated by the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</summary>
      <returns>An XML Schema (XSD) data type, as defined by the World Wide Web Consortium (www.w3.org) document, XML Schema Part 2: Datatypes.</returns>
      <exception cref="T:System.Exception">The XML Schema data type you have specified cannot be mapped to the .NET data type. </exception>
      <exception cref="T:System.InvalidOperationException">The XML Schema data type you have specified is invalid for the property and cannot be converted to the member type. </exception>
    </member>
    <member name="P:System.Xml.Serialization.XmlTextAttribute.Type">
      <summary>Gets or sets the type of the member.</summary>
      <returns>The <see cref="T:System.Type" /> of the member.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlTypeAttribute">
      <summary>Controls the XML schema that is generated when the attribute target is serialized by the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlTypeAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlTypeAttribute" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlTypeAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlTypeAttribute" /> class and specifies the name of the XML type.</summary>
      <param name="typeName">The name of the XML type that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates when it serializes the class instance (and recognizes when it deserializes the class instance). </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeAttribute.AnonymousType">
      <summary>Gets or sets a value that determines whether the resulting schema type is an XSD anonymous type.</summary>
      <returns>true if the resulting schema type is an XSD anonymous type; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeAttribute.IncludeInSchema">
      <summary>Gets or sets a value that indicates whether to include the type in XML schema documents.</summary>
      <returns>true to include the type in XML schema documents; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeAttribute.Namespace">
      <summary>Gets or sets the namespace of the XML type.</summary>
      <returns>The namespace of the XML type.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeAttribute.TypeName">
      <summary>Gets or sets the name of the XML type.</summary>
      <returns>The name of the XML type.</returns>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\3.0\Libraries\Client\System.ComponentModel.DataAnnotations.extmap.xml ===
<?xml version="1.0"?>
<manifest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <assembly>
    <name>System.ComponentModel.DataAnnotations</name>
    <version>2.0.5.0</version>
    <publickeytoken>ddd0da4d3e678217</publickeytoken>
    <relpath>System.ComponentModel.DataAnnotations.dll</relpath>
    <extension downloadUri="System.ComponentModel.DataAnnotations.zip" />
  </assembly>

</manifest>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\3.0\Libraries\Client\System.Data.Services.Client.extmap.xml ===
<?xml version="1.0"?>
<manifest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
          xmlns:xsd="http://www.w3.org/2001/XMLSchema">

  <assembly>
    <name>System.Data.Services.Client</name>
    <version>2.0.5.0</version>
    <publickeytoken>31bf3856ad364e35</publickeytoken>
    <relpath>System.Data.Services.Client.dll</relpath>
    <extension downloadUri="System.Data.Services.Client.zip" />
  </assembly>


</manifest>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\3.0\Libraries\Client\System.Json.extmap.xml ===
<?xml version="1.0"?>
<manifest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
          xmlns:xsd="http://www.w3.org/2001/XMLSchema">

  <assembly>
    <name>System.Json</name>
    <version>2.0.5.0</version>
    <publickeytoken>31bf3856ad364e35</publickeytoken>
    <relpath>System.Json.dll</relpath>
    <extension downloadUri="System.Json.zip" />
  </assembly>


</manifest>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\2.0.31005.0\ReferenceAssemblies\system.windows.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Windows</name>
  </assembly>
  <members>
    <member name="T:Microsoft.Internal.IManagedFrameworkInternalHelper">
      <summary>
                    This type is not intended to be used or implemented by your code. 
                </summary>
    </member>
    <member name="M:Microsoft.Internal.IManagedFrameworkInternalHelper.SetContextEx(System.IntPtr)">
      <summary>[SECURITY CRITICAL] 
                    This method is not intended to be used or implemented by your code. 
                </summary>
      <param name="context">
                     
                </param>
    </member>
    <member name="T:System.Collections.ObjectModel.ObservableCollection`1">
      <summary>
                    Represents a dynamic data collection that provides notifications when items get added, removed, or when the entire list is refreshed.
                </summary>
      <typeparam name="T">
                    The type of elements in the collection.
                </typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> class.
                </summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.ClearItems">
      <summary>
                    Removes all items from the collection.
                </summary>
    </member>
    <member name="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged">
      <summary>
                    Occurs when an item in the collection changes, or the entire collection changes.
                </summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.InsertItem(System.Int32,`0)">
      <summary>
                    Inserts an item into the collection at the specified index.
                </summary>
      <param name="index">
                    The zero-based index at which <paramref name="item" /> should be inserted.
                </param>
      <param name="item">
                    The object to insert.
                </param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>
                    Raises the <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" /> event with the provided event data.
                </summary>
      <param name="e">
                    The event data to report in the event.
                </param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
                    Raises the <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged" /> event with the provided arguments.
                </summary>
      <param name="e">
                    The event data to report in the event.
                </param>
    </member>
    <member name="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged">
      <summary>
                    Occurs when a property on an individual item in the collection changes.
                </summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.RemoveItem(System.Int32)">
      <summary>
                    Removes the item at the specified index of the collection.
                </summary>
      <param name="index">
                    The zero-based index of the element to remove.
                </param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.SetItem(System.Int32,`0)">
      <summary>
                    Replaces the element at the specified index.
                </summary>
      <param name="index">
                    The zero-based index of the element to replace.
                </param>
      <param name="item">
                    The new value for the element at the specified index.
                </param>
    </member>
    <member name="E:System.Collections.ObjectModel.ObservableCollection`1.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>
                    Occurs when a property value changes.
                </summary>
    </member>
    <member name="T:System.Collections.Specialized.INotifyCollectionChanged">
      <summary>
                    Notifies listeners of dynamic changes to a collection, such as when items are added and removed, or the entire collection object is reset.
                </summary>
    </member>
    <member name="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged">
      <summary>
                    Occurs when the items list of the collection has changed, or the collection is reset.
                </summary>
    </member>
    <member name="T:System.Collections.Specialized.NotifyCollectionChangedAction">
      <summary>
                    Describes the action that caused a <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> event. 
                </summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add">
      <summary>
                    One or more items were added to the collection.
                </summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove">
      <summary>
                    One or more items were removed from the collection.
                </summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace">
      <summary>
                    One or more items were replaced in the collection.
                </summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset">
      <summary>
                    The content of the collection changed dramatically.
                </summary>
    </member>
    <member name="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs">
      <summary>
                    Provides event data for the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> event.
                </summary>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> class, specifying the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedAction" /> value.
                </summary>
      <param name="action">
                    The action value, as a value of the enumeration. This should always be <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />; see Remarks.
                </param>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> class that describes an <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> or <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" /> change.
                </summary>
      <param name="action">
                    The action value, as a value of the enumeration. This should be <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> or <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />; see Remarks.
                </param>
      <param name="changedItem">
                    The item that is affected by the change.
                </param>
      <param name="index">
                    The index where the change occurred.
                </param>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object,System.Int32)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> class that describes a <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> change.
                </summary>
      <param name="action">
                    The action value, as a value of the enumeration. This should be <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />; see Remarks.
                </param>
      <param name="newItem">
                    The new item that is replacing the original item.
                </param>
      <param name="oldItem">
                    The original item that is replaced.
                </param>
      <param name="index">
                    The index of the item being replaced.
                </param>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.Action">
      <summary>
                    Gets the description of the action that caused the event. 
                </summary>
      <returns>
                    The description of the action that caused the event, as a value of the enumeration.
                </returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewItems">
      <summary>
                    Gets the items affected by an action.
                </summary>
      <returns>
                    The list of items affected by an action. The default is null.
                </returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewStartingIndex">
      <summary>
                    Gets the index at which the change occurred.
                </summary>
      <returns>
                    The index at which the change occurred.
                </returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldItems">
      <summary>
                    Gets the item affected by a <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> or <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" /> action.
                </summary>
      <returns>
                    The list of items affected by a <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> or <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" /> action.
                </returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldStartingIndex">
      <summary>
                    Gets the index at which the change occurred for a <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> or <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" /> action.
                </summary>
      <returns>
                    The index at which the change occurred for a <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> or <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" /> action.
                </returns>
    </member>
    <member name="T:System.Collections.Specialized.NotifyCollectionChangedEventHandler">
      <summary>
                    Represents the method that handles events that implement the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> event.
                </summary>
      <param name="sender">
                    The object that raised the event.
                </param>
      <param name="e">
                    The event data.
                </param>
    </member>
    <member name="T:System.ComponentModel.DesignerProperties">
      <summary>
                    Provides attached properties used to communicate with a designer.
                </summary>
    </member>
    <member name="M:System.ComponentModel.DesignerProperties.GetIsInDesignMode(System.Windows.DependencyObject)">
      <summary>
                    Gets the value of the <see cref="P:System.ComponentModel.DesignerProperties.IsInDesignMode" /> attached property for the specified <see cref="T:System.Windows.UIElement" />.
                </summary>
      <returns>
                    The <see cref="P:System.ComponentModel.DesignerProperties.IsInDesignMode" /> property value for the element.
                </returns>
      <param name="element">
                    The element from which the property value is read.
                </param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="element" /> is null.
                </exception>
    </member>
    <member name="P:System.ComponentModel.DesignerProperties.IsInDesignMode">
      <summary>
                    Gets or sets whether a <see cref="T:System.Windows.DependencyObject" /> is running in the context of a designer.
                </summary>
      <returns>
                    A <see cref="T:System.Boolean" /> that indicates whether a <see cref="T:System.Windows.DependencyObject" /> is running in the context of a designer.
                </returns>
    </member>
    <member name="F:System.ComponentModel.DesignerProperties.IsInDesignModeProperty">
      <summary>
                    Identifies the <see cref="P:System.ComponentModel.DesignerProperties.IsInDesignMode" /> attached property.
                </summary>
    </member>
    <member name="M:System.ComponentModel.DesignerProperties.SetIsInDesignMode(System.Windows.DependencyObject,System.Boolean)">
      <summary>
                    Sets the value of the <see cref="P:System.ComponentModel.DesignerProperties.IsInDesignMode" /> attached property to a specified element. 
                </summary>
      <param name="element">
                    The element to which the attached property is written.
                </param>
      <param name="value">
                    The needed <see cref="T:System.Boolean" /> value.
                </param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="element" /> is null.
                </exception>
    </member>
    <member name="T:System.IO.IsolatedStorage.IsolatedStorageSettings">
      <summary>
                    Provides a <see cref="T:System.Collections.Generic.Dictionary`2" /> that stores key-value pairs in isolated storage. 
                </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null. This exception is thrown when you attempt to reference an instance of the class by using an indexer and the variable you pass in for the key value is null.
                </exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.Add(System.String,System.Object)">
      <summary>
                    Adds an entry to the dictionary for the key-value pair.
                </summary>
      <param name="key">
                    The key for the entry to be stored.
                </param>
      <param name="value">
                    The value to be stored.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> already exists in the dictionary.
                </exception>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageSettings.ApplicationSettings">
      <summary>
                    Gets an instance of <see cref="T:System.IO.IsolatedStorage.IsolatedStorageSettings" /> that contains the contents of the application's <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" />, scoped at the application level, or creates a new instance of <see cref="T:System.IO.IsolatedStorage.IsolatedStorageSettings" /> if one does not exist.
                </summary>
      <returns>
                    An <see cref="T:System.IO.IsolatedStorage.IsolatedStorageSettings" /> object that contains the contents of the application's <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" />, scoped at the application level. If an instance does not already exist, a new instance is created.
                </returns>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.Clear">
      <summary>
                    Resets the count of items stored in <see cref="T:System.IO.IsolatedStorage.IsolatedStorageSettings" /> to zero and releases all references to elements in the collection.
                </summary>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.Contains(System.String)">
      <summary>
                    Determines if the application settings dictionary contains the specified key.
                </summary>
      <returns>true if the dictionary contains the specified key; otherwise, false.
                </returns>
      <param name="key">
                    The key for the entry to be located.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.
                </exception>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageSettings.Count">
      <summary>
                    Gets the number of key-value pairs that are stored in the dictionary.
                </summary>
      <returns>
                    The number of key-value pairs that are stored in the dictionary.
                </returns>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageSettings.Item(System.String)">
      <summary>
                    Gets or sets the value associated with the specified key.
                </summary>
      <returns>
                    The value associated with the specified key. If the specified key is not found, a get operation throws a <see cref="T:System.Collections.Generic.KeyNotFoundException" />, and a set operation creates a new element that has the specified key.
                </returns>
      <param name="key">
                    The key of the item to get or set.
                </param>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageSettings.Keys">
      <summary>
                    Gets a collection that contains the keys in the dictionary.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> that contains the keys in the <see cref="T:System.Collections.Generic.Dictionary`2" />.
                </returns>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.Remove(System.String)">
      <summary>
                    Removes the entry with the specified key.
                </summary>
      <returns>true if the specified key was removed; otherwise, false.
                </returns>
      <param name="key">
                    The key for the entry to be deleted.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.
                </exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.Save">
      <summary>
                    Saves data written to the current <see cref="T:System.IO.IsolatedStorage.IsolatedStorageSettings" /> object.
                </summary>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">
                    The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> does not have enough available free space.
                </exception>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageSettings.SiteSettings">
      <summary>
                    Gets an instance of <see cref="T:System.IO.IsolatedStorage.IsolatedStorageSettings" /> that contains the contents of the application's <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" />, scoped at the domain level, or creates a new instance of <see cref="T:System.IO.IsolatedStorage.IsolatedStorageSettings" /> if one does not exist.
                </summary>
      <returns>
                    An <see cref="T:System.IO.IsolatedStorage.IsolatedStorageSettings" /> object that contains the contents of the application's <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" />, scoped at the domain level. If an instance does not already exist, a new instance is created.
                </returns>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>
                    For a description of this member, see <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)" />.
                </summary>
      <param name="item">
                    The <see cref="T:System.Collections.Generic.KeyValuePair`2" /> to be added.
                </param>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#Generic#ICollection{T}#Clear">
      <summary>
                    For a description of this member, see <see cref="M:System.Collections.Generic.ICollection`1.Clear" />.
                </summary>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>
                    For a description of this member, see <see cref="M:System.Collections.Generic.ICollection`1.Contains(`0)" />.
                </summary>
      <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
                </returns>
      <param name="item">
                    The key-value pair for the entry to be located.
                </param>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#Generic#ICollection{T}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>
                    For a description of this member, see <see cref="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)" />.
                </summary>
      <param name="array">
                    The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The array must have zero-based indexing.
                </param>
      <param name="arrayIndex">
                    The zero-based index in <paramref name="array" /> at which copying begins.
                </param>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#Generic#ICollection{T}#IsReadOnly"></member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>
                    For a description of this member, see <see cref="M:System.Collections.Generic.ICollection`1.Remove(`0)" />.
                </summary>
      <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
                </returns>
      <param name="item">
                    The key for the entry to be deleted.
                </param>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#Generic#IDictionary{TKey@TValue}#ContainsKey(System.String)">
      <summary>
                    For a description of this member, see <see cref="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)" />.
                </summary>
      <returns>true if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified <paramref name="key" />; otherwise, false.
                </returns>
      <param name="key">
                    The key for the entry to be located.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.
                </exception>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#Generic#IDictionary{TKey@TValue}#Keys"></member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#Generic#IDictionary{TKey@TValue}#TryGetValue(System.String,System.Object@)">
      <summary>
                    For a description of this member, see <see cref="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)" />.
                </summary>
      <returns>true if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified <paramref name="key" />; otherwise, false.
                </returns>
      <param name="key">
                    The key of the value to get.
                </param>
      <param name="value">
                    When this method returns, the value associated with the specified key if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.
                </exception>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#Generic#IDictionary{TKey@TValue}#Values"></member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>
                    For a description of this member, see <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.
                </returns>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
                    For a description of this member, see <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />.
                </summary>
      <param name="array">
                    The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The array must have zero-based indexing.
                </param>
      <param name="index">
                    The zero-based index in <paramref name="array" /> at which copying begins.
                </param>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#ICollection#Count">
      <summary>
                    For a description of this member, see <see cref="P:System.Collections.ICollection.Count" />.
                </summary>
      <returns>
                    The number of elements that are contained in the <see cref="T:System.Collections.ICollection" />.
                </returns>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#ICollection#IsSynchronized">
      <summary>
                    For a description of this member, see <see cref="P:System.Collections.ICollection.IsSynchronized" />.
                </summary>
      <returns>true if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, false. In the default implementation of <see cref="T:System.Collections.Generic.Dictionary`2" />, this property always returns false.
                </returns>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#ICollection#SyncRoot">
      <summary>
                    For a description of this member, see <see cref="P:System.Collections.ICollection.SyncRoot" />.
                </summary>
      <returns>
                    An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.
                </returns>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>
                    For a description of this member, see <see cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" />.
                </summary>
      <param name="key">
                    The object to use as the key of the element to add.
                </param>
      <param name="value">
                    The object to use as the value of the element to add.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.
                </exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#IDictionary#Clear">
      <summary>
                    For a description of this member, see <see cref="M:System.Collections.IDictionary.Clear" />.
                </summary>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#IDictionary#Contains(System.Object)">
      <summary>
                    For a description of this member, see <see cref="M:System.Collections.IDictionary.Contains(System.Object)" />.
                </summary>
      <returns>true if the <see cref="T:System.Collections.IDictionary" /> contains an element with the specified <paramref name="key" />; otherwise, false. 
                </returns>
      <param name="key">
                    The key to locate in the <see cref="T:System.Collections.IDictionary" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.
                </exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#IDictionary#GetEnumerator">
      <summary>
                    For a description of this member, see <see cref="M:System.Collections.IDictionary.GetEnumerator" />.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.
                </returns>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#IDictionary#IsFixedSize">
      <summary>
                    For a description of this member, see <see cref="P:System.Collections.IDictionary.IsFixedSize" />.
                </summary>
      <returns>true if the <see cref="T:System.Collections.IDictionary" /> has a fixed size; otherwise, false. In the default implementation of <see cref="T:System.Collections.IDictionary" />, this property always returns false.
                </returns>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#IDictionary#IsReadOnly">
      <summary>
                    For a description of this member, see <see cref="P:System.Collections.IDictionary.IsReadOnly" />.
                </summary>
      <returns>true if the <see cref="T:System.Collections.IDictionary" /> is read-only; otherwise, false. In the default implementation of <see cref="T:System.Collections.IDictionary" />, this property always returns false.
                </returns>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#IDictionary#Item(System.Object)">
      <summary>
                    For a description of this member, see <see cref="P:System.Collections.IDictionary.Item(System.Object)" />.
                </summary>
      <returns>
                    The value associated with the specified <paramref name="key" />.
                </returns>
      <param name="key">
                    The key of the value to get or set.
                </param>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#IDictionary#Remove(System.Object)">
      <summary>
                    For a description of this member, see <see cref="M:System.Collections.IDictionary.Remove(System.Object)" />.
                </summary>
      <param name="key">
                    The key for the entry to be deleted.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.
                </exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#IEnumerable#GetEnumerator">
      <summary>
                    For a description of this member, see <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.
                </returns>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.TryGetValue``1(System.String,``0@)">
      <summary>
                    Gets a value for the specified key.
                </summary>
      <returns>true if the specified key is found; otherwise, false.
                </returns>
      <param name="key">
                    The key of the value to get.
                </param>
      <param name="value">
                    When this method returns, the value associated with the specified key if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.
                </param>
      <typeparam name="T">
                    The <see cref="T:System.Type" /> of the <paramref name="value" /> parameter.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.
                </exception>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageSettings.Values">
      <summary>
                    Gets a collection that contains the values in the dictionary.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> that contains the values in the <see cref="T:System.Collections.Generic.Dictionary`2" />.
                </returns>
    </member>
    <member name="T:System.Windows.Application">
      <summary>
                    Encapsulates a Silverlight application.
                </summary>
    </member>
    <member name="M:System.Windows.Application.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Application" /> class.
                </summary>
    </member>
    <member name="P:System.Windows.Application.Current">
      <summary>
                    Gets the <see cref="T:System.Windows.Application" /> object for the current application.
                </summary>
      <returns>
                    The <see cref="T:System.Windows.Application" /> object for the current application.
                </returns>
    </member>
    <member name="E:System.Windows.Application.Exit">
      <summary>
                    Occurs just before an application shuts down and cannot be canceled.
                </summary>
    </member>
    <member name="M:System.Windows.Application.GetResourceStream(System.Uri)">
      <summary>
                    Returns a resource file from a location in the application package.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Resources.StreamResourceInfo" /> that contains the stream for the desired resource file.
                </returns>
      <param name="uriResource">
                    A relative URI that identifies the resource file to be loaded. The URI is relative to the application package and does not need a leading forward slash. 
                </param>
      <exception cref="T:System.ArgumentException">
                    The application class is not initialized.
                </exception>
    </member>
    <member name="M:System.Windows.Application.GetResourceStream(System.Windows.Resources.StreamResourceInfo,System.Uri)">
      <summary>
                    Returns a resource file from a location in the specified zip package.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Resources.StreamResourceInfo" /> that contains the stream for the desired resource file.
                </returns>
      <param name="zipPackageStreamResourceInfo">
                    A <see cref="T:System.Windows.Resources.StreamResourceInfo" /> that contains the zip package stream with the desired resource file.
                </param>
      <param name="uriResource">
                    A relative URI that identifies the resource file to be extracted from the zip package. The URI is relative to the application package and does not need a leading forward slash. 
                </param>
      <exception cref="T:System.ArgumentException">
                    The application class is not initialized.
                </exception>
    </member>
    <member name="P:System.Windows.Application.Host">
      <summary>
                    Gets various details about the Silverlight application's host.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Interop.SilverlightHost" /> that provides various details about the Silverlight host application.
                </returns>
    </member>
    <member name="M:System.Windows.Application.LoadComponent(System.Object,System.Uri)">
      <summary>
                    Loads a XAML file that is located at the specified Uniform Resource Identifier (URI) and converts it to an instance of the object that is specified by the root element of the XAML file.
                </summary>
      <param name="component">
                    An object of the same type as the root element of the XAML file to be loaded.
                </param>
      <param name="resourceLocator">
                    A relative URI that identifies the XAML file to be loaded.
                </param>
      <exception cref="T:System.ArgumentException">
                    c<paramref name="omponent" /> is not a <see cref="T:System.Windows.DependencyObject" />.
                </exception>
    </member>
    <member name="P:System.Windows.Application.Resources">
      <summary>
                    Gets a collection of application-scoped resources, such as styles, templates, and brushes.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.ResourceDictionary" /> object that contains zero or more application-scoped resources.
                </returns>
    </member>
    <member name="P:System.Windows.Application.RootVisual">
      <summary>
                    Gets or sets the main application UI.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.DependencyObject" /> that is the main application UI.
                </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Application.RootVisual" /> is not set with an instance of a class that derives directly or indirectly from <see cref="T:System.Windows.UIElement" />.
                </exception>
    </member>
    <member name="E:System.Windows.Application.Startup">
      <summary>
                    Occurs when an application is started.
                </summary>
    </member>
    <member name="E:System.Windows.Application.UnhandledException">
      <summary>
                    Occurs when an exception that is raised by Silverlight is not handled.
                </summary>
    </member>
    <member name="T:System.Windows.ApplicationUnhandledExceptionEventArgs">
      <summary>
                    Provides data for the <see cref="E:System.Windows.Application.UnhandledException" /> event.
                </summary>
    </member>
    <member name="M:System.Windows.ApplicationUnhandledExceptionEventArgs.#ctor(System.Exception,System.Boolean)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.ApplicationUnhandledExceptionEventArgs" /> class.
                </summary>
      <param name="ex">
                    The exception that is being thrown as unhandled.
                </param>
      <param name="handled">
                    A value that indicates whether the exception has been handled and should not be processed further.
                </param>
    </member>
    <member name="P:System.Windows.ApplicationUnhandledExceptionEventArgs.ExceptionObject">
      <summary>
                    Gets or sets the unhandled exception.
                </summary>
      <returns>
                    The unhandled exception.
                </returns>
    </member>
    <member name="P:System.Windows.ApplicationUnhandledExceptionEventArgs.Handled">
      <summary>
                    Gets or sets a value that indicates whether the exception is handled.
                </summary>
      <returns>true to mark the exception as handled, which indicates that Silverlight should not process it further; otherwise, false.
                </returns>
    </member>
    <member name="T:System.Windows.AssemblyPart">
      <summary>
                    An assembly part is an assembly that is to be included in a Silverlight-based application package (.xap).
                </summary>
    </member>
    <member name="M:System.Windows.AssemblyPart.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.AssemblyPart" /> class.
                </summary>
    </member>
    <member name="M:System.Windows.AssemblyPart.Load(System.IO.Stream)">
      <summary>
                    Converts a <see cref="T:System.IO.Stream" /> to an <see cref="T:System.Reflection.Assembly" /> that is subsequently loaded into the current application domain.
                </summary>
      <returns>
                    The <see cref="T:System.Reflection.Assembly" /> that is subsequently loaded into the current application domain.
                </returns>
      <param name="assemblyStream">
                    The <see cref="T:System.IO.Stream" /> to load into the current application domain.
                </param>
    </member>
    <member name="P:System.Windows.AssemblyPart.Source">
      <summary>
                    Gets the <see cref="T:System.Uri" /> that identifies an assembly as an assembly part.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that is the assembly, which is identified as an assembly part.
                </returns>
    </member>
    <member name="F:System.Windows.AssemblyPart.SourceProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.AssemblyPart.Source" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.AssemblyPart.Source" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.AssemblyPartCollection">
      <summary>
                    Stores a collection of <see cref="T:System.Windows.AssemblyPart" /> objects. Provides collection support for the <see cref="P:System.Windows.Deployment.Parts" /> property.
                </summary>
    </member>
    <member name="M:System.Windows.AssemblyPartCollection.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.AssemblyPartCollection" /> class.
                </summary>
    </member>
    <member name="T:System.Windows.CornerRadius">
      <summary>
                    Describes the characteristics of a rounded corner, such as can be applied to a <see cref="T:System.Windows.Controls.Border" />.
                </summary>
    </member>
    <member name="M:System.Windows.CornerRadius.#ctor(System.Double)">
      <summary>
                    Initializes a new <see cref="T:System.Windows.CornerRadius" /> structure, applying the same uniform radius to all its corners.
                </summary>
      <param name="uniformRadius">
                    A uniform radius applied to all four <see cref="T:System.Windows.CornerRadius" /> properties (<see cref="P:System.Windows.CornerRadius.TopLeft" />, <see cref="P:System.Windows.CornerRadius.TopRight" />, <see cref="P:System.Windows.CornerRadius.BottomRight" />, <see cref="P:System.Windows.CornerRadius.BottomLeft" />).
                </param>
    </member>
    <member name="M:System.Windows.CornerRadius.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.CornerRadius" /> structure, applying specific radius values to its corners.
                </summary>
      <param name="topLeft">
                    Sets the initial <see cref="P:System.Windows.CornerRadius.TopLeft" />.
                </param>
      <param name="topRight">
                    Sets the initial <see cref="P:System.Windows.CornerRadius.TopRight" />.
                </param>
      <param name="bottomRight">
                    Sets the initial <see cref="P:System.Windows.CornerRadius.BottomLeft" />.
                </param>
      <param name="bottomLeft">
                    Sets the initial <see cref="P:System.Windows.CornerRadius.BottomRight" />.
                </param>
    </member>
    <member name="P:System.Windows.CornerRadius.BottomLeft">
      <summary>
                    Gets or sets the radius of rounding, in pixels, of the bottom left corner of the object where a <see cref="T:System.Windows.CornerRadius" /> is applied.
                </summary>
      <returns>
                    A <see cref="T:System.Double" /> that represents the radius of rounding, in pixels, of the bottom left corner of the object where a <see cref="T:System.Windows.CornerRadius" /> is applied. The default is 0.
                </returns>
    </member>
    <member name="P:System.Windows.CornerRadius.BottomRight">
      <summary>
                    Gets or sets the radius of rounding, in pixels, of the bottom right corner of the object where a <see cref="T:System.Windows.CornerRadius" /> is applied.
                </summary>
      <returns>
                    A <see cref="T:System.Double" /> that represents the radius of rounding, in pixels, of the bottom right corner of the object where a <see cref="T:System.Windows.CornerRadius" /> is applied. The default is 0.
                </returns>
    </member>
    <member name="M:System.Windows.CornerRadius.Equals(System.Object)">
      <summary>
                    Compares this <see cref="T:System.Windows.CornerRadius" /> structure to another object for equality.
                </summary>
      <returns>true if the two objects are equal; otherwise, false.
                </returns>
      <param name="obj">
                    The object to compare.
                </param>
    </member>
    <member name="M:System.Windows.CornerRadius.Equals(System.Windows.CornerRadius)">
      <summary>
                    Compares this <see cref="T:System.Windows.CornerRadius" /> structure to another <see cref="T:System.Windows.CornerRadius" /> structure for equality.
                </summary>
      <returns>true if the two instances of <see cref="T:System.Windows.CornerRadius" />  are equal; otherwise, false.
                </returns>
      <param name="cornerRadius">
                    An instance of <see cref="T:System.Windows.CornerRadius" /> to compare for equality.
                </param>
    </member>
    <member name="M:System.Windows.CornerRadius.GetHashCode">
      <summary>
                    Returns the hash code of the structure.
                </summary>
      <returns>
                    A hash code for this <see cref="T:System.Windows.CornerRadius" />.
                </returns>
    </member>
    <member name="M:System.Windows.CornerRadius.op_Equality(System.Windows.CornerRadius,System.Windows.CornerRadius)">
      <summary>
                    Compares the value of two <see cref="T:System.Windows.CornerRadius" /> structures for equality.
                </summary>
      <returns>true if the two instances of <see cref="T:System.Windows.CornerRadius" /> are equal; otherwise, false.
                </returns>
      <param name="cr1">
                    The first structure to compare.
                </param>
      <param name="cr2">
                    The other structure to compare.
                </param>
    </member>
    <member name="M:System.Windows.CornerRadius.op_Inequality(System.Windows.CornerRadius,System.Windows.CornerRadius)">
      <summary>
                    Compares two <see cref="T:System.Windows.CornerRadius" /> structures for inequality. 
                </summary>
      <returns>true if the two instances of <see cref="T:System.Windows.CornerRadius" /> are not equal; otherwise, false.
                </returns>
      <param name="cr1">
                    The first structure to compare.
                </param>
      <param name="cr2">
                    The other structure to compare.
                </param>
    </member>
    <member name="P:System.Windows.CornerRadius.TopLeft">
      <summary>
                    Gets or sets the radius of rounding, in pixels, of the top left corner of the object where a <see cref="T:System.Windows.CornerRadius" /> is applied.
                </summary>
      <returns>
                    A <see cref="T:System.Double" /> that represents the radius of rounding, in pixels, of the top left corner of the object where a <see cref="T:System.Windows.CornerRadius" /> is applied. The default is 0.
                </returns>
    </member>
    <member name="P:System.Windows.CornerRadius.TopRight">
      <summary>
                    Gets or sets the radius of rounding, in pixels, of the top right corner of the object where a <see cref="T:System.Windows.CornerRadius" /> is applied.
                </summary>
      <returns>
                    A <see cref="T:System.Double" /> that represents the radius of rounding, in pixels, of the top right corner of the object where a <see cref="T:System.Windows.CornerRadius" /> is applied. The default is 0.
                </returns>
    </member>
    <member name="M:System.Windows.CornerRadius.ToString">
      <summary>
                    Returns the string representation of the <see cref="T:System.Windows.CornerRadius" /> structure.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that represents the <see cref="T:System.Windows.CornerRadius" /> value.
                </returns>
    </member>
    <member name="T:System.Windows.CrossDomainAccess">
      <summary>
                    Defines values that specify the access that cross-domain callers have to a Silverlight-based application.
                </summary>
    </member>
    <member name="F:System.Windows.CrossDomainAccess.NoAccess">
      <summary>
                    Cross-domain callers have no access to the Silverlight application.
                </summary>
    </member>
    <member name="F:System.Windows.CrossDomainAccess.ScriptableOnly">
      <summary>
                    Cross-domain callers have script access to the Silverlight application.
                </summary>
    </member>
    <member name="T:System.Windows.DataTemplate">
      <summary>
                    Describes the visual structure of a data object.
                </summary>
    </member>
    <member name="M:System.Windows.DataTemplate.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.DataTemplate" /> class.
                </summary>
    </member>
    <member name="M:System.Windows.DataTemplate.LoadContent">
      <summary>
                    Creates the <see cref="T:System.Windows.UIElement" /> objects in the <see cref="T:System.Windows.DataTemplate" />. 
                </summary>
      <returns>
                    The root <see cref="T:System.Windows.UIElement" /> of the <see cref="T:System.Windows.DataTemplate" />.
                </returns>
    </member>
    <member name="T:System.Windows.DependencyObject">
      <summary>
                    Represents an object that participates in the Silverlight dependency property system.
                </summary>
    </member>
    <member name="M:System.Windows.DependencyObject.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.DependencyObject" /> class.
                </summary>
    </member>
    <member name="M:System.Windows.DependencyObject.CheckAccess">
      <summary>
                    Determines whether the calling thread has access to this object.
                </summary>
      <returns>true if the calling thread has access to this object; otherwise, false. 
                </returns>
    </member>
    <member name="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)">
      <summary>
                    Clears the local value of a property. 
                </summary>
      <param name="dp">
                    The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to clear the value for.
                </param>
    </member>
    <member name="P:System.Windows.DependencyObject.Dispatcher">
      <summary>
                    Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> this object is associated with. 
                </summary>
      <returns>
                    The <see cref="T:System.Windows.Threading.Dispatcher" /> this object is associated with. 
                </returns>
    </member>
    <member name="M:System.Windows.DependencyObject.GetAnimationBaseValue(System.Windows.DependencyProperty)">
      <summary>
                    Returns any base value established for a Silverlight dependency property, which would apply in cases where an animation is not active.
                </summary>
      <returns>
                    The returned base value.
                </returns>
      <param name="dp">
                    The identifier for the desired dependency property.
                </param>
    </member>
    <member name="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)">
      <summary>
                    Returns the current effective value of a dependency property from a <see cref="T:System.Windows.DependencyObject" />. 
                </summary>
      <returns>
                    Returns the current effective value.
                </returns>
      <param name="dp">
                    The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to retrieve the value for.
                </param>
      <exception cref="T:System.InvalidOperationException">
                    The specified <paramref name="dp" /> or its value was invalid, or the specified <paramref name="dp" /> does not exist.
                </exception>
    </member>
    <member name="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)">
      <summary>
                    Returns the local value of a dependency property, if a local value is set. 
                </summary>
      <returns>
                    Returns the local value, or returns the sentinel value <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> if no local value is set.
                </returns>
      <param name="dp">
                    The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to retrieve the local value for.
                </param>
    </member>
    <member name="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)">
      <summary>
                    Sets the local value of a dependency property on a <see cref="T:System.Windows.DependencyObject" />. 
                </summary>
      <param name="dp">
                    The identifier of the dependency property to set.
                </param>
      <param name="value">
                    The new local value.
                </param>
      <exception cref="T:System.InvalidOperationException">
                    Attempted to modify a read-only or private dependency property, or a property on a sealed <see cref="T:System.Windows.DependencyObject" />.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> was not the correct type as registered for the <paramref name="dp" /> property.
                </exception>
    </member>
    <member name="T:System.Windows.DependencyProperty">
      <summary>
                    Represents a dependency property that is registered with the Silverlight dependency property system. Dependency properties provide support for value expressions, data binding, animation, and property change notification.
                </summary>
    </member>
    <member name="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
      <summary>
                    Registers a dependency property with the specified property name, property type, owner type, and property metadata for the property. 
                </summary>
      <returns>
                    A dependency property identifier that should be used to set the value of a public static readonly field in your class. The identifier is then used both by your own code and any third-party user code to reference the dependency property later, for operations such as setting its value programmatically, or attaching a <see cref="T:System.Windows.Data.Binding" /> in code.
                </returns>
      <param name="name">
                    The name of the dependency property to register.
                </param>
      <param name="propertyType">
                    The type of the property.
                </param>
      <param name="ownerType">
                    The owner type that is registering the dependency property.
                </param>
      <param name="typeMetadata">
                    A property metadata instance. This can contain a <see cref="T:System.Windows.PropertyChangedCallback" /> implementation reference.
                </param>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
      <summary>
                    Registers an attached dependency property with the specified property name, property type, owner type, and property metadata for the property. 
                </summary>
      <returns>
                    A dependency property identifier that should be used to set the value of a public static readonly field in your class. That identifier is then used to reference the attached property later, for operations such as setting its value programmatically, or attaching a  <see cref="T:System.Windows.Data.Binding" />.
                </returns>
      <param name="name">
                    The name of the dependency property to register.
                </param>
      <param name="propertyType">
                    The type of the property.
                </param>
      <param name="ownerType">
                    The owner type that is registering the dependency property.
                </param>
      <param name="defaultMetadata">
                    A property metadata instance. This can contain a <see cref="T:System.Windows.PropertyChangedCallback" /> implementation reference.
                </param>
    </member>
    <member name="F:System.Windows.DependencyProperty.UnsetValue">
      <summary>
                    Specifies a static value that is used by the property system rather than null to indicate that the property exists, but does not have its value set by the property system.
                </summary>
      <returns>
                    The sentinel value for an unset value.
                </returns>
    </member>
    <member name="T:System.Windows.DependencyPropertyChangedEventArgs">
      <summary>
                    Provides data for a <see cref="T:System.Windows.PropertyChangedCallback" /> implementation.
                </summary>
    </member>
    <member name="P:System.Windows.DependencyPropertyChangedEventArgs.NewValue">
      <summary>
                    Gets the value of the property after the change.
                </summary>
      <returns>
                    The property value after the change.
                </returns>
    </member>
    <member name="P:System.Windows.DependencyPropertyChangedEventArgs.OldValue">
      <summary>
                    Gets the value of the property before the change.
                </summary>
      <returns>
                    The property value before the change.
                </returns>
    </member>
    <member name="P:System.Windows.DependencyPropertyChangedEventArgs.Property">
      <summary>
                    Gets the identifier for the dependency property where the value change occurred.
                </summary>
      <returns>
                    The identifier field of the dependency property where the value change occurred.
                </returns>
    </member>
    <member name="T:System.Windows.DependencyPropertyChangedEventHandler">
      <summary>
                    Represents the method that will handle events raised when a <see cref="T:System.Windows.DependencyProperty" /> is changed on a particular <see cref="T:System.Windows.DependencyObject" /> implementation. 
                </summary>
      <param name="sender">
                    The source of the event.
                </param>
      <param name="e">
                    The event data.
                </param>
    </member>
    <member name="T:System.Windows.Deployment">
      <summary>
                    Provides application part and localization information in the application manifest when deploying a Silverlight-based application.
                </summary>
    </member>
    <member name="M:System.Windows.Deployment.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Deployment" /> class.
                </summary>
    </member>
    <member name="P:System.Windows.Deployment.Current">
      <summary>
                    Gets the current <see cref="T:System.Windows.Deployment" /> object. 
                </summary>
      <returns>
                    The current <see cref="T:System.Windows.Deployment" /> object.
                </returns>
    </member>
    <member name="P:System.Windows.Deployment.EntryPointAssembly">
      <summary>
                    Gets a string name that identifies which part in the <see cref="T:System.Windows.Deployment" /> is the entry point assembly.
                </summary>
      <returns>
                    A string that names the assembly that should be used as the entry point assembly. This is expected to be the name of one of the assemblies you specified as an <see cref="T:System.Windows.AssemblyPart" />.
                </returns>
    </member>
    <member name="F:System.Windows.Deployment.EntryPointAssemblyProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Deployment.EntryPointAssembly" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Deployment.EntryPointAssembly" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Deployment.EntryPointType">
      <summary>
                    Gets a string that identifies the namespace and type name of the class that contains the <see cref="T:System.Windows.Application" /> entry point for your application.
                </summary>
      <returns>
                    The namespace and type name of the class that contains the <see cref="T:System.Windows.Application" /> entry point.
                </returns>
    </member>
    <member name="F:System.Windows.Deployment.EntryPointTypeProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Deployment.EntryPointType" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Deployment.EntryPointType" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Deployment.ExternalCallersFromCrossDomain">
      <summary>
                    Gets a value that indicates the level of access that cross-domain callers have to the Silverlight-based application in this deployment.
                </summary>
      <returns>
                    A value that indicates the access level of cross-domain callers.
                </returns>
    </member>
    <member name="F:System.Windows.Deployment.ExternalCallersFromCrossDomainProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Deployment.ExternalCallersFromCrossDomain" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Deployment.ExternalCallersFromCrossDomain" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Deployment.Parts">
      <summary>
                    Gets a collection of assembly parts that are included in the deployment.
                </summary>
      <returns>
                    The collection of assembly parts. The default is an empty collection.
                </returns>
    </member>
    <member name="F:System.Windows.Deployment.PartsProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Deployment.Parts" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Deployment.Parts" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.Deployment.RegisterAssembly(System.Reflection.Assembly)">
      <summary>[SECURITY CRITICAL] 
                    Enables a native Silverlight host, such as Expression Blend or Visual Studio, to instruct Silverlight to register an assembly that the Silverlight host has separately loaded into the host-managed application domain in which a Silverlight application is running.
                </summary>
      <param name="assembly">
                    The assembly that the Silverlight host has separately loaded.
                </param>
    </member>
    <member name="P:System.Windows.Deployment.RuntimeVersion">
      <summary>
                    Gets the Silverlight runtime version that this deployment supports.
                </summary>
      <returns>
                    The Silverlight runtime version that this deployment supports.
                </returns>
    </member>
    <member name="F:System.Windows.Deployment.RuntimeVersionProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Deployment.RuntimeVersion" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Deployment.RuntimeVersion" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.Deployment.SetCurrentApplication(System.Windows.Application)">
      <summary>[SECURITY CRITICAL] 
                    Allows a native host of the Silverlight plug-in to specify the current <see cref="T:System.Windows.Application" /> object of the running Silverlight application.
                </summary>
      <param name="application">
                    The <see cref="T:System.Windows.Application" /> object that the native host is setting as the current <see cref="T:System.Windows.Application" />.
                </param>
    </member>
    <member name="T:System.Windows.Duration">
      <summary>
                    Represents the duration of time that a <see cref="T:System.Windows.Media.Animation.Timeline" /> is active.
                </summary>
    </member>
    <member name="M:System.Windows.Duration.#ctor(System.TimeSpan)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Duration" /> structure with the supplied <see cref="T:System.TimeSpan" /> value.
                </summary>
      <param name="timeSpan">
                    Represents the initial time interval of this duration.
                </param>
    </member>
    <member name="M:System.Windows.Duration.Add(System.Windows.Duration)">
      <summary>
                    Adds the value of the specified <see cref="T:System.Windows.Duration" /> to this <see cref="T:System.Windows.Duration" />.
                </summary>
      <returns>
                    If each involved <see cref="T:System.Windows.Duration" /> has values, a <see cref="T:System.Windows.Duration" /> that represents the combined values. Otherwise this method returns null.
                </returns>
      <param name="duration">
                    An instance of <see cref="T:System.Windows.Duration" /> that represents the value of the current instance plus <paramref name="duration" />.
                </param>
    </member>
    <member name="P:System.Windows.Duration.Automatic">
      <summary>
                    Gets a <see cref="T:System.Windows.Duration" /> value that is automatically determined.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Duration" /> initialized to an automatic value.
                </returns>
    </member>
    <member name="M:System.Windows.Duration.Compare(System.Windows.Duration,System.Windows.Duration)">
      <summary>
                    Compares one <see cref="T:System.Windows.Duration" /> value to another.
                </summary>
      <returns>
                    If <paramref name="t1" /> is less than <paramref name="t2" />, a negative value that represents the difference. If <paramref name="t1" /> is equal to <paramref name="t2" />, a value of 0. If <paramref name="t1" /> is greater than <paramref name="t2" />, a positive value that represents the difference.
                </returns>
      <param name="t1">
                    The first instance of <see cref="T:System.Windows.Duration" /> to compare.
                </param>
      <param name="t2">
                    The second instance of <see cref="T:System.Windows.Duration" /> to compare.
                </param>
    </member>
    <member name="M:System.Windows.Duration.Equals(System.Object)">
      <summary>
                    Determines whether a specified object is equal to a <see cref="T:System.Windows.Duration" />.
                </summary>
      <returns>true if value is equal to this <see cref="T:System.Windows.Duration" />; otherwise, false.
                </returns>
      <param name="value">
                    Object to check for equality.
                </param>
    </member>
    <member name="M:System.Windows.Duration.Equals(System.Windows.Duration)">
      <summary>
                    Determines whether a specified <see cref="T:System.Windows.Duration" /> is equal to this <see cref="T:System.Windows.Duration" />.
                </summary>
      <returns>true if <paramref name="duration" /> is equal to this <see cref="T:System.Windows.Duration" />; otherwise, false.
                </returns>
      <param name="duration">
                    The <see cref="T:System.Windows.Duration" /> to check for equality.
                </param>
    </member>
    <member name="M:System.Windows.Duration.Equals(System.Windows.Duration,System.Windows.Duration)">
      <summary>
                    Determines whether two <see cref="T:System.Windows.Duration" /> values are equal.
                </summary>
      <returns>true if <paramref name="t1" /> is equal to <paramref name="t2" />; otherwise, false.
                </returns>
      <param name="t1">
                    First <see cref="T:System.Windows.Duration" /> to compare.
                </param>
      <param name="t2">
                    Second <see cref="T:System.Windows.Duration" /> to compare.
                </param>
    </member>
    <member name="P:System.Windows.Duration.Forever">
      <summary>
                    Gets a <see cref="T:System.Windows.Duration" /> value that represents an infinite interval.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Duration" /> initialized to a forever value.
                </returns>
    </member>
    <member name="M:System.Windows.Duration.GetHashCode">
      <summary>
                    Gets a hash code for this object.
                </summary>
      <returns>
                    The hash code identifier.
                </returns>
    </member>
    <member name="P:System.Windows.Duration.HasTimeSpan">
      <summary>
                    Gets a value that indicates if this <see cref="T:System.Windows.Duration" /> represents a <see cref="T:System.TimeSpan" /> value.
                </summary>
      <returns>true if this <see cref="T:System.Windows.Duration" /> is a <see cref="T:System.TimeSpan" /> value; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Windows.Duration.op_Addition(System.Windows.Duration,System.Windows.Duration)">
      <summary>
                    Adds two <see cref="T:System.Windows.Duration" /> values together.
                </summary>
      <returns>
                    If both <see cref="T:System.Windows.Duration" /> values have <see cref="T:System.TimeSpan" /> values, this method returns the sum of those two values. If either value is set to <see cref="P:System.Windows.Duration.Automatic" />, the method returns <see cref="P:System.Windows.Duration.Automatic" />. If either value is set to <see cref="P:System.Windows.Duration.Forever" />, the method returns <see cref="P:System.Windows.Duration.Forever" />.
                
                    If either <paramref name="t1" /> or <paramref name="t2" /> has no value, this method returns null.
                </returns>
      <param name="t1">
                    The first <see cref="T:System.Windows.Duration" /> to add.
                </param>
      <param name="t2">
                    The second <see cref="T:System.Windows.Duration" /> to add.
                </param>
    </member>
    <member name="M:System.Windows.Duration.op_Equality(System.Windows.Duration,System.Windows.Duration)">
      <summary>
                    Determines whether two <see cref="T:System.Windows.Duration" /> cases are equal.
                </summary>
      <returns>true if both <see cref="T:System.Windows.Duration" /> values have equal property values, or if all <see cref="T:System.Windows.Duration" /> values are null. Otherwise, this method returns false.
                </returns>
      <param name="t1">
                    The first <see cref="T:System.Windows.Duration" /> to compare.
                </param>
      <param name="t2">
                    The second <see cref="T:System.Windows.Duration" /> to compare.
                </param>
    </member>
    <member name="M:System.Windows.Duration.op_GreaterThan(System.Windows.Duration,System.Windows.Duration)">
      <summary>
                    Determines if one <see cref="T:System.Windows.Duration" /> is greater than another.
                </summary>
      <returns>true if both <paramref name="t1" /> and <paramref name="t2" /> have values and <paramref name="t1" /> is greater than <paramref name="t2" />; otherwise, false.
                </returns>
      <param name="t1">
                    The <see cref="T:System.Windows.Duration" /> value to compare.
                </param>
      <param name="t2">
                    The second <see cref="T:System.Windows.Duration" /> value to compare.
                </param>
    </member>
    <member name="M:System.Windows.Duration.op_GreaterThanOrEqual(System.Windows.Duration,System.Windows.Duration)">
      <summary>
                    Determines whether a <see cref="T:System.Windows.Duration" /> is greater than or equal to another.
                </summary>
      <returns>true if both <paramref name="t1" /> and <paramref name="t2" /> have values and <paramref name="t1" /> is greater than or equal to <paramref name="t2" />; otherwise, false.
                </returns>
      <param name="t1">
                    The first instance of <see cref="T:System.Windows.Duration" /> to compare.
                </param>
      <param name="t2">
                    The second instance of <see cref="T:System.Windows.Duration" /> to compare.
                </param>
    </member>
    <member name="M:System.Windows.Duration.op_Implicit(System.TimeSpan)~System.Windows.Duration">
      <summary>
                    Implicitly creates a <see cref="T:System.Windows.Duration" /> from a given <see cref="T:System.TimeSpan" />.
                </summary>
      <returns>
                    A created <see cref="T:System.Windows.Duration" />.
                </returns>
      <param name="timeSpan">
        <see cref="T:System.TimeSpan" /> from which a <see cref="T:System.Windows.Duration" /> is implicitly created.
                </param>
    </member>
    <member name="M:System.Windows.Duration.op_Inequality(System.Windows.Duration,System.Windows.Duration)">
      <summary>
                    Determines if two <see cref="T:System.Windows.Duration" /> cases are not equal.
                </summary>
      <returns>true if exactly one of <paramref name="t1" /> or <paramref name="t2" /> represent a value, or if they both represent values that are not equal; otherwise, false.
                </returns>
      <param name="t1">
                    The first <see cref="T:System.Windows.Duration" /> to compare.
                </param>
      <param name="t2">
                    The second <see cref="T:System.Windows.Duration" /> to compare.
                </param>
    </member>
    <member name="M:System.Windows.Duration.op_LessThan(System.Windows.Duration,System.Windows.Duration)">
      <summary>
                    Determines if a <see cref="T:System.Windows.Duration" /> is less than the value of another instance.
                </summary>
      <returns>true if both <paramref name="t1" /> and <paramref name="t2" /> have values and <paramref name="t1" /> is less than <paramref name="t2" />; otherwise, false.
                </returns>
      <param name="t1">
                    The first <see cref="T:System.Windows.Duration" /> to compare.
                </param>
      <param name="t2">
                    The second <see cref="T:System.Windows.Duration" /> to compare.
                </param>
    </member>
    <member name="M:System.Windows.Duration.op_LessThanOrEqual(System.Windows.Duration,System.Windows.Duration)">
      <summary>
                    Determines if a <see cref="T:System.Windows.Duration" /> is less than or equal to another.
                </summary>
      <returns>true if both <paramref name="t1" /> and <paramref name="t2" /> have values and <paramref name="t1" /> is less than or equal to <paramref name="t2" />; otherwise, false.
                </returns>
      <param name="t1">
                    The <see cref="T:System.Windows.Duration" /> to compare.
                </param>
      <param name="t2">
                    The <see cref="T:System.Windows.Duration" /> to compare.
                </param>
    </member>
    <member name="M:System.Windows.Duration.op_Subtraction(System.Windows.Duration,System.Windows.Duration)">
      <summary>
                    Subtracts the value of one <see cref="T:System.Windows.Duration" /> from another.
                </summary>
      <returns>
                    If each <see cref="T:System.Windows.Duration" /> has values, a <see cref="T:System.Windows.Duration" /> that represents the value of <paramref name="t1" /> minus <paramref name="t2" />. If <paramref name="t1" /> has a value of <see cref="P:System.Windows.Duration.Forever" /> and <paramref name="t2" /> has a value of <see cref="P:System.Windows.Duration.TimeSpan" />, this method returns <see cref="P:System.Windows.Duration.Forever" />. Otherwise this method returns null.
                </returns>
      <param name="t1">
                    The first <see cref="T:System.Windows.Duration" />.
                </param>
      <param name="t2">
                    The <see cref="T:System.Windows.Duration" /> to subtract.
                </param>
    </member>
    <member name="M:System.Windows.Duration.op_UnaryPlus(System.Windows.Duration)">
      <summary>
                    Returns the specified <see cref="T:System.Windows.Duration" />.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Duration" />.
                </returns>
      <param name="duration">
                    The <see cref="T:System.Windows.Duration" /> to get.
                </param>
    </member>
    <member name="M:System.Windows.Duration.Plus(System.Windows.Duration)">
      <summary>
                    Adds one <see cref="T:System.Windows.Duration" /> to this <see cref="T:System.Windows.Duration" />.
                </summary>
      <returns>
                    The summed <see cref="T:System.Windows.Duration" />.
                </returns>
      <param name="duration">
                    The <see cref="T:System.Windows.Duration" /> to add.
                </param>
    </member>
    <member name="M:System.Windows.Duration.Subtract(System.Windows.Duration)">
      <summary>
                    Subtracts the specified <see cref="T:System.Windows.Duration" /> from this <see cref="T:System.Windows.Duration" />.
                </summary>
      <returns>
                    The subtracted <see cref="T:System.Windows.Duration" />.
                </returns>
      <param name="duration">
                    The <see cref="T:System.Windows.Duration" /> to subtract from this <see cref="T:System.Windows.Duration" />.
                </param>
    </member>
    <member name="P:System.Windows.Duration.TimeSpan">
      <summary>
                    Gets the <see cref="T:System.TimeSpan" /> value that this <see cref="T:System.Windows.Duration" /> represents.
                </summary>
      <returns>
                    The <see cref="T:System.TimeSpan" /> value that this <see cref="T:System.Windows.Duration" /> represents.
                </returns>
    </member>
    <member name="M:System.Windows.Duration.ToString">
      <summary>
                    Converts a <see cref="T:System.Windows.Duration" /> to a <see cref="T:System.String" /> representation.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> representation of this <see cref="T:System.Windows.Duration" />.
                </returns>
    </member>
    <member name="T:System.Windows.DurationConverter">
      <summary>
                    Provides type conversion support for the <see cref="T:System.Windows.Duration" /> structure. 
                </summary>
    </member>
    <member name="M:System.Windows.DurationConverter.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.DurationConverter" /> class.
                </summary>
    </member>
    <member name="M:System.Windows.DurationConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
                    Returns whether this converter can convert an object of one type to the <see cref="T:System.Windows.Duration" /> type.
                </summary>
      <returns>true if this converter can perform the conversion; otherwise, false.
                </returns>
      <param name="context">
                    An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
                </param>
      <param name="sourceType">
                    A <see cref="T:System.Type" /> that represents the type you want to convert from. 
                </param>
    </member>
    <member name="M:System.Windows.DurationConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
                    Converts the given value to the <see cref="T:System.Windows.Duration" /> type.
                </summary>
      <returns>
                    The returned <see cref="T:System.Windows.Duration" />.
                </returns>
      <param name="context">
                    An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
                </param>
      <param name="culture">
                    The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture. 
                </param>
      <param name="value">
                    The object to convert.
                </param>
    </member>
    <member name="T:System.Windows.EventTrigger">
      <summary>
                    Represents a trigger that applies a set of actions (animation storyboards) in response to an event.
                </summary>
    </member>
    <member name="M:System.Windows.EventTrigger.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.EventTrigger" /> class.
                </summary>
    </member>
    <member name="P:System.Windows.EventTrigger.Actions">
      <summary>
                    Gets the collection of <see cref="T:System.Windows.Media.Animation.BeginStoryboard" /> objects that this <see cref="T:System.Windows.EventTrigger" /> maintains.
                </summary>
      <returns>
                    The existing <see cref="T:System.Windows.TriggerActionCollection" />.
                </returns>
    </member>
    <member name="P:System.Windows.EventTrigger.RoutedEvent">
      <summary>
                    Gets or sets the name of the event that initiates the trigger.
                </summary>
      <returns>
                    The name of the event. The only supported value is Loaded.
                </returns>
    </member>
    <member name="T:System.Windows.ExceptionRoutedEventArgs">
      <summary>
                    Provides event data for exceptions that are raised as events by asynchronous operations, such as <see cref="E:System.Windows.Controls.MediaElement.MediaFailed" /> or <see cref="E:System.Windows.Controls.MultiScaleImage.ImageFailed" />.
                </summary>
    </member>
    <member name="P:System.Windows.ExceptionRoutedEventArgs.ErrorException">
      <summary>
                    Gets the underlying exception reported by the event.
                </summary>
      <returns>
                    The exception being reported.
                </returns>
    </member>
    <member name="T:System.Windows.ExceptionRoutedEventHandler">
      <summary>
                    Represents the method that will handle certain events that report exceptions. These exceptions generally come from asynchronous operations where holding up the UI thread for exception checking is not an option.
                </summary>
      <param name="sender">
                    The object where the handler is attached.
                </param>
      <param name="e">
                    The event data.
                </param>
    </member>
    <member name="T:System.Windows.Expression">
      <summary>
                    This type is not intended to be used from your code or to be derived from.
                </summary>
    </member>
    <member name="T:System.Windows.FontStretch">
      <summary>
                    Describes the degree to which a font has been stretched, compared to the normal aspect ratio of that font.
                </summary>
    </member>
    <member name="M:System.Windows.FontStretch.Equals(System.Object)">
      <summary>
                    Compares an object with the current <see cref="T:System.Windows.FontStretch" /> object.
                </summary>
      <returns>true if two instances are equal; otherwise, false.
                </returns>
      <param name="obj">
                    The instance of the object to compare for equality.
                </param>
    </member>
    <member name="M:System.Windows.FontStretch.GetHashCode">
      <summary>
                    Retrieves the hash code for this object.
                </summary>
      <returns>
                    An integer hash value.
                </returns>
    </member>
    <member name="M:System.Windows.FontStretch.op_Equality(System.Windows.FontStretch,System.Windows.FontStretch)">
      <summary>
                    Compares two instances of <see cref="T:System.Windows.FontStretch" /> for equality.
                </summary>
      <returns>true when the specified <see cref="T:System.Windows.FontStretch" /> objects are equal; otherwise, false.
                </returns>
      <param name="left">
                    First instance of <see cref="T:System.Windows.FontStretch" /> to compare.
                </param>
      <param name="right">
                    Second instance of <see cref="T:System.Windows.FontStretch" /> to compare.
                </param>
    </member>
    <member name="M:System.Windows.FontStretch.op_Inequality(System.Windows.FontStretch,System.Windows.FontStretch)">
      <summary>
                    Evaluates two instances of <see cref="T:System.Windows.FontStretch" /> to determine inequality.
                </summary>
      <returns>false if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, true.
                </returns>
      <param name="left">
                    The first instance of <see cref="T:System.Windows.FontStretch" /> to compare.
                </param>
      <param name="right">
                    The second instance of <see cref="T:System.Windows.FontStretch" /> to compare.
                </param>
    </member>
    <member name="M:System.Windows.FontStretch.ToString">
      <summary>
                    Creates a <see cref="T:System.String" /> representation of the current <see cref="T:System.Windows.FontStretch" /> object.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> value representation of the object.
                </returns>
    </member>
    <member name="T:System.Windows.FontStretches">
      <summary>
                    Provides a set of predefined font stretches as static property values.
                </summary>
    </member>
    <member name="P:System.Windows.FontStretches.Condensed">
      <summary>
                    Specifies a condensed font stretch.
                </summary>
      <returns>
                    A value that represents a condensed font stretch.
                </returns>
    </member>
    <member name="P:System.Windows.FontStretches.Expanded">
      <summary>
                    Specifies an expanded font stretch.
                </summary>
      <returns>
                    A value that represents an expanded font stretch.
                </returns>
    </member>
    <member name="P:System.Windows.FontStretches.ExtraCondensed">
      <summary>
                    Specifies an extra-condensed font stretch.
                </summary>
      <returns>
                    A value that represents an extra-condensed font stretch.
                </returns>
    </member>
    <member name="P:System.Windows.FontStretches.ExtraExpanded">
      <summary>
                    Specifies an extra-expanded font stretch.
                </summary>
      <returns>
                    A value that represents an extra-expanded font stretch.
                </returns>
    </member>
    <member name="P:System.Windows.FontStretches.Normal">
      <summary>
                    Specifies a normal font stretch.
                </summary>
      <returns>
                    A value that represents a normal font stretch.
                </returns>
    </member>
    <member name="P:System.Windows.FontStretches.SemiCondensed">
      <summary>
                    Specifies a semi-condensed font stretch.
                </summary>
      <returns>
                    A value that represents a semi-condensed font stretch.
                </returns>
    </member>
    <member name="P:System.Windows.FontStretches.SemiExpanded">
      <summary>
                    Specifies a semi-expanded font stretch.
                </summary>
      <returns>
                    A value that represents a semi-expanded font stretch.
                </returns>
    </member>
    <member name="P:System.Windows.FontStretches.UltraCondensed">
      <summary>
                    Specifies an ultra-condensed font stretch.
                </summary>
      <returns>
                    A value that represents an ultra-condensed font stretch.
                </returns>
    </member>
    <member name="P:System.Windows.FontStretches.UltraExpanded">
      <summary>
                    Specifies an ultra-expanded font stretch.
                </summary>
      <returns>
                    A value that represents an ultra-expanded font stretch.
                </returns>
    </member>
    <member name="T:System.Windows.FontStyle">
      <summary>
                    Represents the style of a font face (for instance, as normal or italic).
                </summary>
    </member>
    <member name="M:System.Windows.FontStyle.Equals(System.Object)">
      <summary>
                    Compares an object with the current <see cref="T:System.Windows.FontStyle" /> instance for equality.
                </summary>
      <returns>true to show the two instances are equal; otherwise, false.
                </returns>
      <param name="obj">
                    An object that represents the <see cref="T:System.Windows.FontStyle" /> to compare for equality.
                </param>
    </member>
    <member name="M:System.Windows.FontStyle.GetHashCode">
      <summary>
                    Retrieves the hash code for this object. 
                </summary>
      <returns>
                    An integer hash value.
                </returns>
    </member>
    <member name="M:System.Windows.FontStyle.op_Equality(System.Windows.FontStyle,System.Windows.FontStyle)">
      <summary>
                    Compares two instances of <see cref="T:System.Windows.FontStyle" /> for equality.
                </summary>
      <returns>true if the specified <see cref="T:System.Windows.FontStyle" /> objects are equal; otherwise, false.
                </returns>
      <param name="left">
                    The first instance of <see cref="T:System.Windows.FontStyle" /> to compare.
                </param>
      <param name="right">
                    The second instance of <see cref="T:System.Windows.FontStyle" /> to compare.
                </param>
    </member>
    <member name="M:System.Windows.FontStyle.op_Inequality(System.Windows.FontStyle,System.Windows.FontStyle)">
      <summary>
                    Evaluates two instances of <see cref="T:System.Windows.FontStyle" /> to determine inequality.
                </summary>
      <returns>false to show <paramref name="left" /> is equal to <paramref name="right" />; otherwise, true.
                </returns>
      <param name="left">
                    The first instance of <see cref="T:System.Windows.FontStyle" /> to compare.
                </param>
      <param name="right">
                    The second instance of <see cref="T:System.Windows.FontStyle" /> to compare.
                </param>
    </member>
    <member name="M:System.Windows.FontStyle.ToString">
      <summary>
                    Creates a string that represents the current <see cref="T:System.Windows.FontStyle" /> object.
                </summary>
      <returns>
                    A string that represents the value of the <see cref="T:System.Windows.FontStyle" /> object.
                </returns>
    </member>
    <member name="T:System.Windows.FontStyles">
      <summary>
                    Provides a set of predefined font styles as static property values.
                </summary>
    </member>
    <member name="P:System.Windows.FontStyles.Italic">
      <summary>
                    Specifies an italic font style.
                </summary>
      <returns>
                    A font style that represents an italic font style.
                </returns>
    </member>
    <member name="P:System.Windows.FontStyles.Normal">
      <summary>
                    Specifies a normal, or roman, font style.
                </summary>
      <returns>
                    A font style that represents a normal, or roman, font style.
                </returns>
    </member>
    <member name="T:System.Windows.FontWeight">
      <summary>
                    Refers to the density of a typeface, in terms of the lightness or heaviness of the strokes.
                </summary>
    </member>
    <member name="M:System.Windows.FontWeight.Equals(System.Object)">
      <summary>
                    Determines whether the current <see cref="T:System.Windows.FontWeight" /> object is equal to a specified object.
                </summary>
      <returns>true if the two instances are equal; otherwise, false.
                </returns>
      <param name="obj">
                    The object to compare for equality.
                </param>
    </member>
    <member name="M:System.Windows.FontWeight.GetHashCode">
      <summary>
                    Retrieves the hash code for this object.
                </summary>
      <returns>
                    An integer hash value.
                </returns>
    </member>
    <member name="M:System.Windows.FontWeight.op_Equality(System.Windows.FontWeight,System.Windows.FontWeight)">
      <summary>
                    Compares two instances of <see cref="T:System.Windows.FontWeight" /> for equality.
                </summary>
      <returns>true if the instances of <see cref="T:System.Windows.FontWeight" /> are equal; otherwise, false.
                </returns>
      <param name="left">
                    The first instance of <see cref="T:System.Windows.FontWeight" /> to compare.
                </param>
      <param name="right">
                    The second instance of <see cref="T:System.Windows.FontWeight" /> to compare.
                </param>
    </member>
    <member name="M:System.Windows.FontWeight.op_Inequality(System.Windows.FontWeight,System.Windows.FontWeight)">
      <summary>
                    Evaluates two instances of <see cref="T:System.Windows.FontWeight" /> to determine inequality.
                </summary>
      <returns>false if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, true.
                </returns>
      <param name="left">
                    The first instance of <see cref="T:System.Windows.FontWeight" /> to compare.
                </param>
      <param name="right">
                    The second instance of <see cref="T:System.Windows.FontWeight" /> to compare.
                </param>
    </member>
    <member name="M:System.Windows.FontWeight.ToString">
      <summary>
                    Returns a text string that represents the value of the <see cref="T:System.Windows.FontWeight" /> object.
                </summary>
      <returns>
                    A string that represents the value of the <see cref="T:System.Windows.FontWeight" /> object, such as "Light" or "Normal".
                </returns>
    </member>
    <member name="T:System.Windows.FontWeights">
      <summary>
                    Provides a set of predefined font weights as static property values.
                </summary>
    </member>
    <member name="P:System.Windows.FontWeights.Black">
      <summary>
                    Specifies a "Black" font weight.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.FontWeight" /> value that represents a "Black" font weight.
                </returns>
    </member>
    <member name="P:System.Windows.FontWeights.Bold">
      <summary>
                    Specifies a "Bold" font weight.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.FontWeight" /> value that represents a "Bold" font weight.
                </returns>
    </member>
    <member name="P:System.Windows.FontWeights.ExtraBlack">
      <summary>
                    Specifies an "ExtraBlack" font weight.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.FontWeight" /> value that represents an "ExtraBlack" font weight.
                </returns>
    </member>
    <member name="P:System.Windows.FontWeights.ExtraBold">
      <summary>
                    Specifies an "ExtraBold" font weight.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.FontWeight" /> value that represents an "ExtraBlack" font weight.
                </returns>
    </member>
    <member name="P:System.Windows.FontWeights.ExtraLight">
      <summary>
                    Specifies an "ExtraLight" font weight.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.FontWeight" /> value that represents an "ExtraLight" font weight.
                </returns>
    </member>
    <member name="P:System.Windows.FontWeights.Light">
      <summary>
                    Specifies a "Light" font weight.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.FontWeight" /> value that represents a "Light" font weight.
                </returns>
    </member>
    <member name="P:System.Windows.FontWeights.Medium">
      <summary>
                    Specifies a "Medium" font weight.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.FontWeight" /> value that represents a "Medium" font weight.
                </returns>
    </member>
    <member name="P:System.Windows.FontWeights.Normal">
      <summary>
                    Specifies a "Normal" font weight.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.FontWeight" /> value that represents a "Normal" font weight.
                </returns>
    </member>
    <member name="P:System.Windows.FontWeights.SemiBold">
      <summary>
                    Specifies a "SemiBold" font weight.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.FontWeight" /> value that represents a "SemiBold" font weight.
                </returns>
    </member>
    <member name="P:System.Windows.FontWeights.Thin">
      <summary>
                    Specifies a "Thin" font weight.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.FontWeight" /> value that represents a "Thin" font weight.
                </returns>
    </member>
    <member name="T:System.Windows.FrameworkElement">
      <summary>
                    Provides a framework of common APIs for objects that participate in Silverlight layout. Also defines APIs related to data binding, object tree, and object lifetime feature areas in Silverlight.
                </summary>
    </member>
    <member name="M:System.Windows.FrameworkElement.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.FrameworkElement" /> class.
                </summary>
    </member>
    <member name="P:System.Windows.FrameworkElement.ActualHeight">
      <summary>
                    Gets the rendered height of a <see cref="T:System.Windows.FrameworkElement" />.
                </summary>
      <returns>
                    The object's height, in pixels. The default is 0.
                </returns>
    </member>
    <member name="F:System.Windows.FrameworkElement.ActualHeightProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.FrameworkElement.ActualHeight" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.FrameworkElement.ActualHeight" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.FrameworkElement.ActualWidth">
      <summary>
                    Gets the rendered width of a <see cref="T:System.Windows.FrameworkElement" />.
                </summary>
      <returns>
                    The object's width, in pixels. The default is 0.
                </returns>
    </member>
    <member name="F:System.Windows.FrameworkElement.ActualWidthProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.FrameworkElement.ActualWidth" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.FrameworkElement.ActualWidth" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)">
      <summary>
                    Provides the behavior for the "Arrange" pass of Silverlight layout. Classes can override this method to define their own arrange pass behavior.
                </summary>
      <returns>
                    The actual size used.
                </returns>
      <param name="finalSize">
                    The final area within the parent that this object should use to arrange itself and its children.
                </param>
    </member>
    <member name="E:System.Windows.FrameworkElement.BindingValidationError">
      <summary>
                    Occurs when a data validation error is reported by a binding source.
                </summary>
    </member>
    <member name="P:System.Windows.FrameworkElement.Cursor">
      <summary>
                    Gets or sets the cursor that displays while the mouse pointer is over a <see cref="T:System.Windows.FrameworkElement" />.
                </summary>
      <returns>
                    The cursor to display. The default is defined as null for code access. However, the practical default at run time will come from a variety of factors.
                </returns>
    </member>
    <member name="P:System.Windows.FrameworkElement.DataContext">
      <summary>
                    Gets or sets the data context for a <see cref="T:System.Windows.FrameworkElement" /> when it participates in data binding.
                </summary>
      <returns>
                    The object to use as data context.
                </returns>
    </member>
    <member name="F:System.Windows.FrameworkElement.DataContextProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.FrameworkElement.DataContext" /> dependency property. 
                </summary>
      <returns>
                    The <see cref="P:System.Windows.FrameworkElement.DataContext" /> dependency property identifier.
                </returns>
    </member>
    <member name="M:System.Windows.FrameworkElement.FindName(System.String)">
      <summary>
                    Retrieves an object that has the provided identifier name. 
                </summary>
      <returns>
                    The requested object. This can be null if no matching object was found in the XAML namescope.
                </returns>
      <param name="name">
                    The name of the requested object.
                </param>
    </member>
    <member name="P:System.Windows.FrameworkElement.Height">
      <summary>
                    Gets or sets the suggested height of a <see cref="T:System.Windows.FrameworkElement" />.
                </summary>
      <returns>
                    The height of the object, in pixels. The default is <see cref="F:System.Double.NaN" />. Excepting the special <see cref="F:System.Double.NaN" /> value, this value must be equal to or greater than 0. See Remarks for upper bound information.
                </returns>
    </member>
    <member name="F:System.Windows.FrameworkElement.HeightProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.FrameworkElement.Height" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.FrameworkElement.Height" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.FrameworkElement.HorizontalAlignment">
      <summary>
                    Gets or sets the horizontal alignment characteristics applied to a <see cref="T:System.Windows.FrameworkElement" /> when it is composed within a layout parent, such as a panel or items control.
                </summary>
      <returns>
                    A horizontal alignment setting, as a value of the enumeration. The default is <see cref="F:System.Windows.HorizontalAlignment.Stretch" />.
                </returns>
    </member>
    <member name="F:System.Windows.FrameworkElement.HorizontalAlignmentProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.FrameworkElement.HorizontalAlignment" /> dependency property. 
                </summary>
      <returns>
                    The <see cref="P:System.Windows.FrameworkElement.HorizontalAlignment" /> dependency property identifier.
                </returns>
    </member>
    <member name="P:System.Windows.FrameworkElement.Language">
      <summary>
                    Gets or sets localization/globalization language information that applies to a <see cref="T:System.Windows.FrameworkElement" />. 
                </summary>
      <returns>
                    The language information for this object. The default is an <see cref="T:System.Windows.Markup.XmlLanguage" /> object with its <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> value set to the string "en-US".
                </returns>
    </member>
    <member name="F:System.Windows.FrameworkElement.LanguageProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.FrameworkElement.Language" /> dependency property. 
                </summary>
      <returns>
                    The <see cref="P:System.Windows.FrameworkElement.Language" /> dependency property identifier.
                </returns>
    </member>
    <member name="E:System.Windows.FrameworkElement.LayoutUpdated">
      <summary>
                    Occurs when the layout of the various child objects associated with the current Silverlight plug-in instance changes. 
                </summary>
    </member>
    <member name="E:System.Windows.FrameworkElement.Loaded">
      <summary>
                    Occurs when a <see cref="T:System.Windows.FrameworkElement" /> has completed layout passes, has rendered, and is ready for interaction. 
                </summary>
    </member>
    <member name="F:System.Windows.FrameworkElement.LoadedEvent">
      <summary>
                    Identifies the <see cref="E:System.Windows.FrameworkElement.Loaded" /> routed event.
                </summary>
      <returns>
                    The identifier for the <see cref="E:System.Windows.FrameworkElement.Loaded" /> routed event.
                </returns>
    </member>
    <member name="P:System.Windows.FrameworkElement.Margin">
      <summary>
                    Gets or sets the outer margin of a <see cref="T:System.Windows.FrameworkElement" />.
                </summary>
      <returns>
                    Provides margin values for the object. The default value is a default <see cref="T:System.Windows.Thickness" /> with all properties (dimensions) equal to 0.
                </returns>
    </member>
    <member name="F:System.Windows.FrameworkElement.MarginProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.FrameworkElement.Margin" /> dependency property. 
                </summary>
      <returns>
                    The <see cref="P:System.Windows.FrameworkElement.Margin" /> dependency property identifier.
                </returns>
    </member>
    <member name="P:System.Windows.FrameworkElement.MaxHeight">
      <summary>
                    Gets or sets the maximum height constraint of a <see cref="T:System.Windows.FrameworkElement" />. 
                </summary>
      <returns>
                    The maximum height of the object, in pixels. The default value is <see cref="F:System.Double.PositiveInfinity" />. This value can be any value equal to or greater than 0. <see cref="F:System.Double.PositiveInfinity" /> is also valid.
                </returns>
    </member>
    <member name="F:System.Windows.FrameworkElement.MaxHeightProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.FrameworkElement.MaxHeight" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.FrameworkElement.MaxHeight" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.FrameworkElement.MaxWidth">
      <summary>
                    Gets or sets the maximum width constraint of a <see cref="T:System.Windows.FrameworkElement" />.
                </summary>
      <returns>
                    The maximum width of the object, in pixels. The default is <see cref="F:System.Double.PositiveInfinity" />. This value can be any value equal to or greater than 0. <see cref="F:System.Double.PositiveInfinity" /> is also valid.
                </returns>
    </member>
    <member name="F:System.Windows.FrameworkElement.MaxWidthProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.FrameworkElement.MaxWidth" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.FrameworkElement.MaxWidth" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)">
      <summary>
                    Provides the behavior for the "measure" pass of Silverlight layout. Classes can override this method to define their own measure pass behavior.
                </summary>
      <returns>
                    The size that this object determines it needs during layout, based on its calculations of child object allotted sizes.
                </returns>
      <param name="availableSize">
                    The available size that this object can give to child objects. Infinity can be specified as a value to indicate that the object will size to whatever content is available.
                </param>
    </member>
    <member name="P:System.Windows.FrameworkElement.MinHeight">
      <summary>
                    Gets or sets the minimum height constraint of a <see cref="T:System.Windows.FrameworkElement" />.
                </summary>
      <returns>
                    The minimum height of the object, in pixels. The default is 0. This value can be any value equal to or greater than 0. However, <see cref="F:System.Double.PositiveInfinity" /> is not valid.
                </returns>
    </member>
    <member name="F:System.Windows.FrameworkElement.MinHeightProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.FrameworkElement.MinHeight" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.FrameworkElement.MinHeight" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.FrameworkElement.MinWidth">
      <summary>
                    Gets or sets the minimum width constraint of a <see cref="T:System.Windows.FrameworkElement" />.
                </summary>
      <returns>
                    The minimum width of the object, in pixels. The default is 0. This value can be any value equal to or greater than 0. However, <see cref="F:System.Double.PositiveInfinity" /> is not valid.
                </returns>
    </member>
    <member name="F:System.Windows.FrameworkElement.MinWidthProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.FrameworkElement.MinWidth" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.FrameworkElement.MinWidth" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.FrameworkElement.Name">
      <summary>
                    Gets (or sets, but ONLY as a XAML attribute) the identifying name of the object. The name provides a reference that is initially markup-compiled. After a XAML processor creates the object tree from markup, run-time code  can refer to a markup element by this name.
                </summary>
      <returns>
                    The name of the object, which must be a string that is valid in the XamlName Grammar. The default is an empty string.
                </returns>
    </member>
    <member name="F:System.Windows.FrameworkElement.NameProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.FrameworkElement.Name" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.FrameworkElement.Name" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.FrameworkElement.OnApplyTemplate">
      <summary>
                    When overridden in a derived class, is invoked whenever application code or internal processes (such as a rebuilding layout pass) call <see cref="M:System.Windows.Controls.Control.ApplyTemplate" />. 
                </summary>
    </member>
    <member name="P:System.Windows.FrameworkElement.Parent">
      <summary>
                    Gets the parent object of this <see cref="T:System.Windows.FrameworkElement" /> in the object tree. 
                </summary>
      <returns>
                    This object's parent in the object tree.
                </returns>
    </member>
    <member name="P:System.Windows.FrameworkElement.Resources">
      <summary>
                    Gets the locally defined resource dictionary. In XAML, you can establish resource items as child object elements of the &lt;object.Resources&gt; property element, through XAML implicit collection syntax.
                </summary>
      <returns>
                    The current locally defined dictionary of resources, where each resource can be accessed by its key.
                </returns>
    </member>
    <member name="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.Windows.Data.Binding)">
      <summary>
                    Attaches a binding to a <see cref="T:System.Windows.FrameworkElement" />, using the provided binding object. 
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Data.BindingExpressionBase" /> object.  See Remarks.
                </returns>
      <param name="dp">
                    The dependency property identifier of the property that is data bound.
                </param>
      <param name="binding">
                    The binding to use for the property.
                </param>
    </member>
    <member name="E:System.Windows.FrameworkElement.SizeChanged">
      <summary>
                    Occurs when either the <see cref="P:System.Windows.FrameworkElement.ActualHeight" /> or the <see cref="P:System.Windows.FrameworkElement.ActualWidth" /> properties change value on a <see cref="T:System.Windows.FrameworkElement" />. 
                </summary>
    </member>
    <member name="P:System.Windows.FrameworkElement.Style">
      <summary>
                    Gets or sets an instance <see cref="T:System.Windows.Style" /> that is applied for this object during rendering.
                </summary>
      <returns>
                    The applied style for the object, if present. Otherwise, null. The default for a default-constructed <see cref="T:System.Windows.FrameworkElement" /> is null.
                </returns>
    </member>
    <member name="F:System.Windows.FrameworkElement.StyleProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.FrameworkElement.Style" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.FrameworkElement.Style" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.FrameworkElement.Tag">
      <summary>
                    Gets or sets an arbitrary object value that can be used to store custom information about this object.
                </summary>
      <returns>
                    The intended value. This property has no default value.
                </returns>
    </member>
    <member name="F:System.Windows.FrameworkElement.TagProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.FrameworkElement.Tag" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.FrameworkElement.Tag" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.FrameworkElement.Triggers">
      <summary>
                    Gets the collection of triggers for animations that are defined for a <see cref="T:System.Windows.FrameworkElement" />.
                </summary>
      <returns>
                    The collection of triggers for animations that are defined for this object.
                </returns>
    </member>
    <member name="P:System.Windows.FrameworkElement.VerticalAlignment">
      <summary>
                    Gets or sets the vertical alignment characteristics applied to a <see cref="T:System.Windows.FrameworkElement" /> when it is composed within a parent object such as a panel or items control.
                </summary>
      <returns>
                    A vertical alignment setting. The default is <see cref="F:System.Windows.VerticalAlignment.Stretch" />.
                </returns>
    </member>
    <member name="F:System.Windows.FrameworkElement.VerticalAlignmentProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.FrameworkElement.VerticalAlignment" /> dependency property. 
                </summary>
      <returns>
                    The <see cref="P:System.Windows.FrameworkElement.VerticalAlignment" /> dependency property identifier.
                </returns>
    </member>
    <member name="P:System.Windows.FrameworkElement.Width">
      <summary>
                    Gets or sets the width of a <see cref="T:System.Windows.FrameworkElement" />.
                </summary>
      <returns>
                    The width of the object, in pixels. The default is <see cref="F:System.Double.NaN" />. Excepting the special <see cref="F:System.Double.NaN" /> value, this value must be equal to or greater than 0. See Remarks for upper bound information.
                </returns>
    </member>
    <member name="F:System.Windows.FrameworkElement.WidthProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.FrameworkElement.Width" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.FrameworkElement.Width" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.FrameworkTemplate">
      <summary>
                    Creates an element tree of elements.
                </summary>
    </member>
    <member name="M:System.Windows.FrameworkTemplate.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.FrameworkTemplate" /> class.
                </summary>
    </member>
    <member name="T:System.Windows.GridLength">
      <summary>
                    Represents the length of elements that explicitly support <see cref="F:System.Windows.GridUnitType.Star" /> unit types. 
                </summary>
    </member>
    <member name="M:System.Windows.GridLength.#ctor(System.Double)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.GridLength" /> structure using the specified absolute value in pixels. 
                </summary>
      <param name="pixels">
                    The absolute count of pixels to establish as the value.
                </param>
    </member>
    <member name="M:System.Windows.GridLength.#ctor(System.Double,System.Windows.GridUnitType)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.GridLength" /> structure and specifies what kind of value it holds. 
                </summary>
      <param name="value">
                    The initial value of this instance of <see cref="T:System.Windows.GridLength" />.
                </param>
      <param name="type">
                    The <see cref="T:System.Windows.GridUnitType" /> held by this instance of <see cref="T:System.Windows.GridLength" />.
                </param>
    </member>
    <member name="P:System.Windows.GridLength.Auto">
      <summary>
                    Gets an instance of <see cref="T:System.Windows.GridLength" /> that holds a value whose size is determined by the size properties of the content object.
                </summary>
      <returns>
                    A instance of <see cref="T:System.Windows.GridLength" /> whose <see cref="P:System.Windows.GridLength.GridUnitType" /> property is set to <see cref="F:System.Windows.GridUnitType.Auto" />. 
                </returns>
    </member>
    <member name="M:System.Windows.GridLength.Equals(System.Object)">
      <summary>
                    Determines whether the specified object is equal to the current <see cref="T:System.Windows.GridLength" /> instance. 
                </summary>
      <returns>true if the specified object has the same value and <see cref="T:System.Windows.GridUnitType" /> as the current instance; otherwise, false.
                </returns>
      <param name="oCompare">
                    The object to compare with the current instance.
                </param>
    </member>
    <member name="M:System.Windows.GridLength.Equals(System.Windows.GridLength)">
      <summary>
                    Determines whether the specified <see cref="T:System.Windows.GridLength" /> is equal to the current <see cref="T:System.Windows.GridLength" />.
                </summary>
      <returns>true if the specified <see cref="T:System.Windows.GridLength" /> has the same value and <see cref="P:System.Windows.GridLength.GridUnitType" /> as the current instance; otherwise, false.
                </returns>
      <param name="gridLength">
                    The <see cref="T:System.Windows.GridLength" /> structure to compare with the current instance.
                </param>
    </member>
    <member name="M:System.Windows.GridLength.GetHashCode">
      <summary>
                    Gets a hash code for the <see cref="T:System.Windows.GridLength" />. 
                </summary>
      <returns>
                    A hash code for the <see cref="T:System.Windows.GridLength" />. 
                </returns>
    </member>
    <member name="P:System.Windows.GridLength.GridUnitType">
      <summary>
                    Gets the associated <see cref="T:System.Windows.GridUnitType" /> for the <see cref="T:System.Windows.GridLength" />. 
                </summary>
      <returns>
                    One of the <see cref="T:System.Windows.GridUnitType" /> values. The default is <see cref="F:System.Windows.GridUnitType.Auto" />.
                </returns>
    </member>
    <member name="P:System.Windows.GridLength.IsAbsolute">
      <summary>
                    Gets a value that indicates whether the <see cref="T:System.Windows.GridLength" /> holds a value that is expressed in pixels. 
                </summary>
      <returns>true if the <see cref="P:System.Windows.GridLength.GridUnitType" /> property is <see cref="F:System.Windows.GridUnitType.Pixel" />; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Windows.GridLength.IsAuto">
      <summary>
                    Gets a value that indicates whether the <see cref="T:System.Windows.GridLength" /> holds a value whose size is determined by the size properties of the content object. 
                </summary>
      <returns>true if the <see cref="P:System.Windows.GridLength.GridUnitType" /> property is <see cref="F:System.Windows.GridUnitType.Auto" />; otherwise, false. 
                </returns>
    </member>
    <member name="P:System.Windows.GridLength.IsStar">
      <summary>
                    Gets a value that indicates whether the <see cref="T:System.Windows.GridLength" /> holds a value that is expressed as a weighted proportion of available space. 
                </summary>
      <returns>true if the <see cref="P:System.Windows.GridLength.GridUnitType" /> property is <see cref="F:System.Windows.GridUnitType.Star" />; otherwise, false. 
                </returns>
    </member>
    <member name="M:System.Windows.GridLength.op_Equality(System.Windows.GridLength,System.Windows.GridLength)">
      <summary>
                    Compares two <see cref="T:System.Windows.GridLength" /> structures for equality.
                </summary>
      <returns>true if the two instances of <see cref="T:System.Windows.GridLength" /> have the same value and <see cref="T:System.Windows.GridUnitType" />; otherwise, false.
                </returns>
      <param name="gl1">
                    The first instance of <see cref="T:System.Windows.GridLength" /> to compare.
                </param>
      <param name="gl2">
                    The second instance of <see cref="T:System.Windows.GridLength" /> to compare.
                </param>
    </member>
    <member name="M:System.Windows.GridLength.op_Inequality(System.Windows.GridLength,System.Windows.GridLength)">
      <summary>
                    Compares two <see cref="T:System.Windows.GridLength" /> structures to determine if they are not equal.
                </summary>
      <returns>true if the two instances of <see cref="T:System.Windows.GridLength" /> do not have the same value and <see cref="T:System.Windows.GridUnitType" />; otherwise, false.
                </returns>
      <param name="gl1">
                    The first instance of <see cref="T:System.Windows.GridLength" /> to compare.
                </param>
      <param name="gl2">
                    The second instance of <see cref="T:System.Windows.GridLength" /> to compare.
                </param>
    </member>
    <member name="M:System.Windows.GridLength.ToString">
      <summary>
                    Returns a <see cref="T:System.String" /> representation of the <see cref="T:System.Windows.GridLength" />.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> representation of the current <see cref="T:System.Windows.GridLength" /> structure.
                </returns>
    </member>
    <member name="P:System.Windows.GridLength.Value">
      <summary>
                    Gets a <see cref="T:System.Double" /> that represents the value of the <see cref="T:System.Windows.GridLength" />.
                </summary>
      <returns>
                    A <see cref="T:System.Double" /> that represents the value of the current instance. 
                </returns>
    </member>
    <member name="T:System.Windows.GridUnitType">
      <summary>
                    Describes the kind of value that a <see cref="T:System.Windows.GridLength" /> object is holding. 
                </summary>
    </member>
    <member name="F:System.Windows.GridUnitType.Auto">
      <summary>
                    The size is determined by the size properties of the content object. 
                </summary>
    </member>
    <member name="F:System.Windows.GridUnitType.Pixel">
      <summary>
                    The value is expressed in pixels. 
                </summary>
    </member>
    <member name="F:System.Windows.GridUnitType.Star">
      <summary>
                    The value is expressed as a weighted proportion of available space. 
                </summary>
    </member>
    <member name="T:System.Windows.HorizontalAlignment">
      <summary>
                    Indicates where an element should be displayed on the horizontal axis relative to the allocated layout slot of the parent element. 
                </summary>
    </member>
    <member name="F:System.Windows.HorizontalAlignment.Left">
      <summary>
                    An element aligned to the left of the layout slot for the parent element. 
                </summary>
    </member>
    <member name="F:System.Windows.HorizontalAlignment.Center">
      <summary>
                    An element aligned to the center of the layout slot for the parent element. 
                </summary>
    </member>
    <member name="F:System.Windows.HorizontalAlignment.Right">
      <summary>
                    An element aligned to the right of the layout slot for the parent element.
                </summary>
    </member>
    <member name="F:System.Windows.HorizontalAlignment.Stretch">
      <summary>
                    An element stretched to fill the entire layout slot of the parent element.
                </summary>
    </member>
    <member name="T:System.Windows.LineStackingStrategy">
      <summary>
                    Describes the mechanism by which a line box is determined for each line. 
                </summary>
    </member>
    <member name="F:System.Windows.LineStackingStrategy.MaxHeight">
      <summary>
                    The stack height is the smallest value that contains the extended block progression dimension of all the inline elements on that line when those elements are properly aligned.
                </summary>
    </member>
    <member name="F:System.Windows.LineStackingStrategy.BlockLineHeight">
      <summary>
                    The stack height is determined by the block element line-height property value.
                </summary>
    </member>
    <member name="T:System.Windows.MessageBox">
      <summary>
                    Displays a message to the user and optionally prompts for a response. 
                </summary>
    </member>
    <member name="M:System.Windows.MessageBox.Show(System.String)">
      <summary>
                    Displays a message box that contains the specified text and an OK button.
                </summary>
      <returns>
        <see cref="F:System.Windows.MessageBoxResult.OK" /> in all cases.
                </returns>
      <param name="messageBoxText">
                    The message to display.
                </param>
    </member>
    <member name="M:System.Windows.MessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton)">
      <summary>
                    Displays a message box that contains the specified text, title bar caption, and response buttons. 
                </summary>
      <returns>
                    A value that indicates the user's response to the message. 
                </returns>
      <param name="messageBoxText">
                    The message to display.
                </param>
      <param name="caption">
                    The title of the message box. 
                </param>
      <param name="button">
                    A value that indicates the button or buttons to display. 
                </param>
    </member>
    <member name="T:System.Windows.MessageBoxButton">
      <summary>
                    Specifies the buttons to include when you display a message box.
                </summary>
    </member>
    <member name="F:System.Windows.MessageBoxButton.OK">
      <summary>
                    Displays only the OK button.
                </summary>
    </member>
    <member name="F:System.Windows.MessageBoxButton.OKCancel">
      <summary>
                    Displays both the OK and Cancel buttons.
                </summary>
    </member>
    <member name="T:System.Windows.MessageBoxResult">
      <summary>
                    Represents a user's response to a message box.
                </summary>
    </member>
    <member name="F:System.Windows.MessageBoxResult.None">
      <summary>
                    This value is not currently used. 
                </summary>
    </member>
    <member name="F:System.Windows.MessageBoxResult.OK">
      <summary>
                    The user clicked the OK button. 
                </summary>
    </member>
    <member name="F:System.Windows.MessageBoxResult.Cancel">
      <summary>
                    The user clicked the Cancel button or pressed ESC.
                </summary>
    </member>
    <member name="F:System.Windows.MessageBoxResult.Yes">
      <summary>
                    This value is not currently used. 
                </summary>
    </member>
    <member name="F:System.Windows.MessageBoxResult.No">
      <summary>
                    This value is not currently used. 
                </summary>
    </member>
    <member name="T:System.Windows.NullableBoolConverter">
      <summary>
                    Converts <see cref="T:System.Nullable`1" /> types (using the <see cref="T:System.Boolean" /> type constraint on the generic)  from strings.
                </summary>
    </member>
    <member name="M:System.Windows.NullableBoolConverter.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.NullableBoolConverter" /> class.
                </summary>
    </member>
    <member name="M:System.Windows.NullableBoolConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
                    Determines whether this converter can convert an object of the specified type to the <see cref="T:System.Nullable`1" /> type (using the <see cref="T:System.Boolean" /> type constraint on the generic).
                </summary>
      <returns>true if <paramref name="sourceType" /> is a <see cref="T:System.String" />, <see cref="T:System.Boolean" />, or a <see cref="T:System.Nullable`1" /> type (using the <see cref="T:System.Boolean" /> type constraint on the generic) that can be assigned from <paramref name="sourceType" />; otherwise, false.
                </returns>
      <param name="context">
                    An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
                </param>
      <param name="sourceType">
                    The type that you want to convert from.
                </param>
    </member>
    <member name="M:System.Windows.NullableBoolConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
                    Converts the specified object to a <see cref="T:System.Nullable`1" /> type (using the <see cref="T:System.Boolean" /> type constraint on the generic).
                </summary>
      <returns>
                    A <see cref="T:System.Nullable`1" /> type (using the <see cref="T:System.Boolean" /> type constraint on the generic) that represents the converted object.
                </returns>
      <param name="context">
                    An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
                </param>
      <param name="culture">
                    The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture. 
                </param>
      <param name="value">
                    The object to convert to a <see cref="T:System.Nullable`1" /> type (using the <see cref="T:System.Boolean" /> type constraint on the generic).
                </param>
      <exception cref="T:System.NotSupportedException">
                    The conversion attempt failed. <paramref name="value" /> is not a <see cref="T:System.String" />, <see cref="T:System.Boolean" />, or <see cref="T:System.Nullable`1" /> (using the <see cref="T:System.Boolean" /> type constraint on the generic) type.
                </exception>
    </member>
    <member name="T:System.Windows.Point">
      <summary>
                    Represents an x- and y-coordinate pair in two-dimensional space. Can also represent a logical point for certain property usages.
                </summary>
    </member>
    <member name="M:System.Windows.Point.#ctor(System.Double,System.Double)">
      <summary>
                    Initializes a <see cref="T:System.Windows.Point" /> structure that contains the specified values. 
                </summary>
      <param name="x">
                    The x-coordinate value of the <see cref="T:System.Windows.Point" /> structure. 
                </param>
      <param name="y">
                    The y-coordinate value of the <see cref="T:System.Windows.Point" /> structure. 
                </param>
    </member>
    <member name="M:System.Windows.Point.Equals(System.Object)">
      <summary>
                    Determines whether the specified object is a <see cref="T:System.Windows.Point" /> and whether it contains the same values as this <see cref="T:System.Windows.Point" />. 
                </summary>
      <returns>true if <paramref name="obj" /> is a <see cref="T:System.Windows.Point" /> and contains the same <see cref="P:System.Windows.Point.X" /> and <see cref="P:System.Windows.Point.Y" /> values as this <see cref="T:System.Windows.Point" />; otherwise, false.
                </returns>
      <param name="o">
                    The object to compare.
                </param>
    </member>
    <member name="M:System.Windows.Point.Equals(System.Windows.Point)">
      <summary>
                    Compares two <see cref="T:System.Windows.Point" /> structures for equality.
                </summary>
      <returns>true if both <see cref="T:System.Windows.Point" /> structures contain the same <see cref="P:System.Windows.Point.X" /> and <see cref="P:System.Windows.Point.Y" /> values; otherwise, false.
                </returns>
      <param name="value">
                    The point to compare to this instance.
                </param>
    </member>
    <member name="M:System.Windows.Point.GetHashCode">
      <summary>
                    Returns the hash code for this <see cref="T:System.Windows.Point" />.
                </summary>
      <returns>
                    The hash code for this <see cref="T:System.Windows.Point" /> structure.
                </returns>
    </member>
    <member name="M:System.Windows.Point.op_Equality(System.Windows.Point,System.Windows.Point)">
      <summary>
                    Compares two <see cref="T:System.Windows.Point" /> structures for equality.
                </summary>
      <returns>true if both the <see cref="P:System.Windows.Point.X" /> and <see cref="P:System.Windows.Point.Y" /> values of <paramref name="point1" /> and <paramref name="point2" /> are equal; otherwise, false.
                </returns>
      <param name="point1">
                    The first <see cref="T:System.Windows.Point" /> structure to compare.
                </param>
      <param name="point2">
                    The second <see cref="T:System.Windows.Point" /> structure to compare.
                </param>
    </member>
    <member name="M:System.Windows.Point.op_Inequality(System.Windows.Point,System.Windows.Point)">
      <summary>
                    Compares two <see cref="T:System.Windows.Point" /> structures for inequality
                </summary>
      <returns>true if <paramref name="point1" /> and <paramref name="point2" /> have different <see cref="P:System.Windows.Point.X" /> or <see cref="P:System.Windows.Point.Y" /> values; false if <paramref name="point1" /> and <paramref name="point2" /> have the same <see cref="P:System.Windows.Point.X" /> and <see cref="P:System.Windows.Point.Y" /> values.
                </returns>
      <param name="point1">
                    The first point to compare.
                </param>
      <param name="point2">
                    The second point to compare.
                </param>
    </member>
    <member name="M:System.Windows.Point.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>
                     
                </summary>
      <returns>
                     
                </returns>
      <param name="format">
                     
                </param>
      <param name="provider">
                     
                </param>
    </member>
    <member name="M:System.Windows.Point.ToString">
      <summary>
                    Creates a <see cref="T:System.String" /> representation of this <see cref="T:System.Windows.Point" />. 
                </summary>
      <returns>
                    A <see cref="T:System.String" /> containing the <see cref="P:System.Windows.Point.X" /> and <see cref="P:System.Windows.Point.Y" /> values of this <see cref="T:System.Windows.Point" /> structure.
                </returns>
    </member>
    <member name="M:System.Windows.Point.ToString(System.IFormatProvider)">
      <summary>
                    Creates a <see cref="T:System.String" /> representation of this <see cref="T:System.Windows.Point" />. 
                </summary>
      <returns>
                    A <see cref="T:System.String" /> containing the <see cref="P:System.Windows.Point.X" /> and <see cref="P:System.Windows.Point.Y" /> values of this <see cref="T:System.Windows.Point" /> structure.
                </returns>
      <param name="provider">
                    Culture-specific formatting information.
                </param>
    </member>
    <member name="P:System.Windows.Point.X">
      <summary>
                    Gets or sets the <see cref="P:System.Windows.Point.X" />-coordinate value of this <see cref="T:System.Windows.Point" /> structure. 
                </summary>
      <returns>
                    The <see cref="P:System.Windows.Point.X" />-coordinate value of this <see cref="T:System.Windows.Point" /> structure. The default value is 0.
                </returns>
    </member>
    <member name="P:System.Windows.Point.Y">
      <summary>
                    Gets or sets the <see cref="P:System.Windows.Point.Y" />-coordinate value of this <see cref="T:System.Windows.Point" />. 
                </summary>
      <returns>
                    The <see cref="P:System.Windows.Point.Y" />-coordinate value of this <see cref="T:System.Windows.Point" /> structure.  The default value is 0.
                </returns>
    </member>
    <member name="T:System.Windows.PresentationFrameworkCollection`1">
      <summary>
                    Provides a common collection class for Silverlight collections.
                </summary>
      <typeparam name="T">
                    Type constraint for type safety of the constrained collection implementation.
                </typeparam>
    </member>
    <member name="M:System.Windows.PresentationFrameworkCollection`1.Add(`0)">
      <summary>
                    Adds an item to the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />.
                </summary>
      <param name="value">
                    The object to add.
                </param>
    </member>
    <member name="M:System.Windows.PresentationFrameworkCollection`1.Clear">
      <summary>
                    Removes all items from the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />.
                </summary>
    </member>
    <member name="M:System.Windows.PresentationFrameworkCollection`1.Contains(`0)">
      <summary>
                    Determines whether the <see cref="T:System.Windows.PresentationFrameworkCollection`1" /> contains a specific value.
                </summary>
      <returns>true if the object is found in the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />; otherwise, false.
                </returns>
      <param name="value">
                    The object to locate in the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />.
                </param>
    </member>
    <member name="M:System.Windows.PresentationFrameworkCollection`1.CopyTo(System.Array,System.Int32)">
      <summary>
                    Copies the elements of the <see cref="T:System.Windows.PresentationFrameworkCollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
                </summary>
      <param name="array">
                    The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing. 
                </param>
      <param name="index">
                    The zero-based index in <paramref name="array" /> at which copying begins. 
                </param>
    </member>
    <member name="M:System.Windows.PresentationFrameworkCollection`1.CopyTo(`0[],System.Int32)">
      <summary>
                    Copies the elements of the <see cref="T:System.Windows.PresentationFrameworkCollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
                </summary>
      <param name="array">
                    The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing. 
                </param>
      <param name="index">
                    The zero-based index in <paramref name="array" /> at which copying begins. 
                </param>
    </member>
    <member name="P:System.Windows.PresentationFrameworkCollection`1.Count">
      <summary>
                    Gets the number of elements contained in the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />.
                </summary>
      <returns>
                    The number of elements contained in the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />.
                </returns>
    </member>
    <member name="F:System.Windows.PresentationFrameworkCollection`1.CountProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.PresentationFrameworkCollection`1.Count" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.PresentationFrameworkCollection`1.Count" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.PresentationFrameworkCollection`1.GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through a collection.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
                </returns>
    </member>
    <member name="M:System.Windows.PresentationFrameworkCollection`1.IndexOf(`0)">
      <summary>
                    Determines the index of a specific item in the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />.
                </summary>
      <returns>
                    The index of <paramref name="value" /> if found in the list; otherwise, -1.
                </returns>
      <param name="value">
                    The object to locate in the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />. 
                </param>
    </member>
    <member name="M:System.Windows.PresentationFrameworkCollection`1.Insert(System.Int32,`0)">
      <summary>
                    Inserts an item to the <see cref="T:System.Windows.PresentationFrameworkCollection`1" /> at the specified index.
                </summary>
      <param name="index">
                    The zero-based index at which <paramref name="value" /> should be inserted. 
                </param>
      <param name="value">
                    The object to insert into the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />. 
                </param>
    </member>
    <member name="P:System.Windows.PresentationFrameworkCollection`1.IsFixedSize">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Windows.PresentationFrameworkCollection`1" /> has a fixed size.
                </summary>
      <returns>true if the <see cref="T:System.Windows.PresentationFrameworkCollection`1" /> has a fixed size; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Windows.PresentationFrameworkCollection`1.IsReadOnly">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Windows.PresentationFrameworkCollection`1" /> is read-only.
                </summary>
      <returns>true if the <see cref="T:System.Windows.PresentationFrameworkCollection`1" /> is read-only; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Windows.PresentationFrameworkCollection`1.IsSynchronized">
      <summary>
                    Gets a value indicating whether access to the <see cref="T:System.Windows.PresentationFrameworkCollection`1" /> is synchronized (thread safe).
                </summary>
      <returns>true if access to the <see cref="T:System.Windows.PresentationFrameworkCollection`1" /> is synchronized (thread safe); otherwise, false.
                </returns>
    </member>
    <member name="P:System.Windows.PresentationFrameworkCollection`1.Item(System.Int32)">
      <summary>
                    Gets or sets the element at the specified index.
                </summary>
      <returns>
                    The element at the specified index.
                </returns>
      <param name="index">
                    The zero-based index of the element to get or set. 
                </param>
    </member>
    <member name="M:System.Windows.PresentationFrameworkCollection`1.Remove(`0)">
      <summary>
                    Removes the first occurrence of a specific object from the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />.
                </summary>
      <param name="value">
                    The object to remove from the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />.
                </param>
    </member>
    <member name="M:System.Windows.PresentationFrameworkCollection`1.RemoveAt(System.Int32)">
      <summary>
                    Removes the item at the specified index.
                </summary>
      <param name="index">
                    The zero-based index of the item to remove. 
                </param>
    </member>
    <member name="P:System.Windows.PresentationFrameworkCollection`1.SyncRoot">
      <summary>
                    Gets an object that can be used to synchronize access to the <see cref="T:System.Windows.PresentationFrameworkCollection`1" /> .
                </summary>
      <returns>
                    An object that can be used to synchronize access to the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />.
                </returns>
    </member>
    <member name="M:System.Windows.PresentationFrameworkCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through a collection.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
                </returns>
    </member>
    <member name="M:System.Windows.PresentationFrameworkCollection`1.System#Collections#IList#Add(System.Object)">
      <summary>
                    Adds an item to the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />.
                </summary>
      <returns>
                    The position into which the new element was inserted. 
                </returns>
      <param name="value">
                    The object to add.
                </param>
    </member>
    <member name="M:System.Windows.PresentationFrameworkCollection`1.System#Collections#IList#Contains(System.Object)">
      <summary>
                    Determines whether the <see cref="T:System.Windows.PresentationFrameworkCollection`1" /> contains a specific value.
                </summary>
      <returns>true if the object is found in the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />; otherwise, false.
                </returns>
      <param name="value">
                    The object to locate in the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />.
                </param>
    </member>
    <member name="M:System.Windows.PresentationFrameworkCollection`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>
                    Determines the index of a specific item in the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />.
                </summary>
      <returns>
                    The index of <paramref name="value" /> if found in the list; otherwise, -1.
                </returns>
      <param name="value">
                    The object to locate in the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />. 
                </param>
    </member>
    <member name="M:System.Windows.PresentationFrameworkCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>
                    Inserts an item to the <see cref="T:System.Windows.PresentationFrameworkCollection`1" /> at the specified index.
                </summary>
      <param name="index">
                    The zero-based index at which <paramref name="value" /> should be inserted. 
                </param>
      <param name="value">
                    The object to insert into the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />. 
                </param>
    </member>
    <member name="P:System.Windows.PresentationFrameworkCollection`1.System#Collections#IList#Item(System.Int32)">
      <summary>
                    Gets or sets the element at the specified index.
                </summary>
      <returns>
                    The element at the specified index.
                </returns>
      <param name="index">
                    The zero-based index of the element to get or set. 
                </param>
    </member>
    <member name="M:System.Windows.PresentationFrameworkCollection`1.System#Collections#IList#Remove(System.Object)">
      <summary>
                    Removes the first occurrence of a specific object from the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />.
                </summary>
      <param name="value">
                    The object to remove from the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />.
                </param>
    </member>
    <member name="T:System.Windows.PropertyChangedCallback">
      <summary>
                    Represents the callback that is invoked when the effective property value of a dependency property changes.
                </summary>
      <param name="d">
                    The <see cref="T:System.Windows.DependencyObject" /> on which the property has changed value.
                </param>
      <param name="e">
                    Event data that is issued by any event that tracks changes to the effective value of this property.
                </param>
    </member>
    <member name="T:System.Windows.PropertyMetadata">
      <summary>
                    Defines certain behavior aspects of a dependency property, including conditions it was registered with. 
                </summary>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Object)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.PropertyMetadata" /> class, using a provided property default value.
                </summary>
      <param name="defaultValue">
                    A default value for the property where this <see cref="T:System.Windows.PropertyMetadata" /> is applied.
                </param>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.PropertyMetadata" /> class, using a provided property default value and property changed callback reference.
                </summary>
      <param name="defaultValue">
                    A default value for the property where this <see cref="T:System.Windows.PropertyMetadata" /> is applied.
                </param>
      <param name="propertyChangedCallback">
                    A reference to the callback to call for property changed behavior.
                </param>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.PropertyMetadata" /> class, using the supplied property changed callback reference.
                </summary>
      <param name="propertyChangedCallback">
                    A reference to the callback to call for property changed behavior.
                </param>
    </member>
    <member name="T:System.Windows.PropertyPath">
      <summary>
                    Implements a data structure for describing a property as a path below another property, or below an owning type. Property paths are used in data binding to objects, and in storyboards and timelines for animations.
                </summary>
    </member>
    <member name="M:System.Windows.PropertyPath.#ctor(System.Object)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.PropertyPath" /> class.
                </summary>
      <param name="parameter">
                    A dependency property identifier, or a property path string.
                </param>
    </member>
    <member name="M:System.Windows.PropertyPath.#ctor(System.String,System.Object[])">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.PropertyPath" /> class.
                </summary>
      <param name="path">
                    The path string for this <see cref="T:System.Windows.PropertyPath" />.
                </param>
      <param name="pathParameters">
                    Do not use. See Remarks.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    Provided an array of length greater than zero for <paramref name="pathParameters" />.
                </exception>
    </member>
    <member name="P:System.Windows.PropertyPath.Path">
      <summary>
                    Gets the path value held by this <see cref="T:System.Windows.PropertyPath" />.
                </summary>
      <returns>
                    The path value held by this <see cref="T:System.Windows.PropertyPath" />.
                </returns>
    </member>
    <member name="T:System.Windows.PropertyPathConverter">
      <summary>
                    Provides type conversion support for the <see cref="T:System.Windows.PropertyPath" /> type. 
                </summary>
    </member>
    <member name="M:System.Windows.PropertyPathConverter.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.PropertyPathConverter" /> class.
                </summary>
    </member>
    <member name="M:System.Windows.PropertyPathConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
                    Returns whether this converter can convert an object of one type to the <see cref="T:System.Windows.PropertyPath" /> type.
                </summary>
      <returns>true if this converter can perform the conversion; otherwise, false.
                </returns>
      <param name="context">
                    An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
                </param>
      <param name="sourceType">
                    A <see cref="T:System.Type" /> that represents the type you want to convert from. 
                </param>
    </member>
    <member name="M:System.Windows.PropertyPathConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
                    Converts the given value to the <see cref="T:System.Windows.PropertyPath" /> type.
                </summary>
      <returns>
                    The returned <see cref="T:System.Windows.PropertyPath" />.
                </returns>
      <param name="context">
                    An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
                </param>
      <param name="culture">
                    The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture. 
                </param>
      <param name="value">
                    The object to convert.
                </param>
    </member>
    <member name="T:System.Windows.Rect">
      <summary>
                    Describes the width, height, and point origin of a rectangle. 
                </summary>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
                    Initializes a <see cref="T:System.Windows.Rect" /> structure that has the specified x-coordinate, y-coordinate, width, and height. 
                </summary>
      <param name="x">
                    The x-coordinate of the top-left corner of the rectangle.
                </param>
      <param name="y">
                    The y-coordinate of the top-left corner of the rectangle.
                </param>
      <param name="width">
                    The width of the rectangle.
                </param>
      <param name="height">
                    The height of the rectangle.
                </param>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Point)">
      <summary>
                    Initializes a <see cref="T:System.Windows.Rect" /> structure that is exactly large enough to contain the two specified points. 
                </summary>
      <param name="point1">
                    The first point that the new rectangle must contain.
                </param>
      <param name="point2">
                    The second point that the new rectangle must contain.
                </param>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Size)">
      <summary>
                    Initializes a <see cref="T:System.Windows.Rect" /> structure based on an origin and size. 
                </summary>
      <param name="location">
                    The origin of the new <see cref="T:System.Windows.Rect" />.
                </param>
      <param name="size">
                    The size of the new <see cref="T:System.Windows.Rect" />.
                </param>
    </member>
    <member name="P:System.Windows.Rect.Bottom">
      <summary>
                    Gets the y-axis value of the bottom of the rectangle. 
                </summary>
      <returns>
                    The y-axis value of the bottom of the rectangle. If the rectangle is empty, the value is <see cref="F:System.Double.NegativeInfinity" /> .
                </returns>
    </member>
    <member name="M:System.Windows.Rect.Contains(System.Windows.Point)">
      <summary>
                    Indicates whether the rectangle described by the <see cref="T:System.Windows.Rect" /> contains the specified point.
                </summary>
      <returns>true if the rectangle described by the <see cref="T:System.Windows.Rect" /> contains the specified point; otherwise, false.
                </returns>
      <param name="point">
                    The point to check.
                </param>
    </member>
    <member name="P:System.Windows.Rect.Empty">
      <summary>
                    Gets a special value that represents a rectangle with no position or area. 
                </summary>
      <returns>
                    The empty rectangle, which has <see cref="P:System.Windows.Rect.X" /> and <see cref="P:System.Windows.Rect.Y" /> property values of <see cref="F:System.Double.PositiveInfinity" />, and has <see cref="P:System.Windows.Rect.Width" /> and <see cref="P:System.Windows.Rect.Height" /> property values of <see cref="F:System.Double.NegativeInfinity" />.
                </returns>
    </member>
    <member name="M:System.Windows.Rect.Equals(System.Object)">
      <summary>
                    Indicates whether the specified object is equal to the current <see cref="T:System.Windows.Rect" />.
                </summary>
      <returns>true if <paramref name="o" /> is a <see cref="T:System.Windows.Rect" /> and has the same x,y,width,height values as the current <see cref="T:System.Windows.Rect" />; otherwise, false.
                </returns>
      <param name="o">
                    The object to compare to the current rectangle.
                </param>
    </member>
    <member name="M:System.Windows.Rect.Equals(System.Windows.Rect)">
      <summary>
                    Indicates whether the specified <see cref="T:System.Windows.Rect" /> is equal to the current <see cref="T:System.Windows.Rect" />. 
                </summary>
      <returns>true if the specified <see cref="T:System.Windows.Rect" /> has the same x,y,width,height property values as the current <see cref="T:System.Windows.Rect" />; otherwise, false.
                </returns>
      <param name="value">
                    The rectangle to compare to the current rectangle.
                </param>
    </member>
    <member name="M:System.Windows.Rect.GetHashCode">
      <summary>
                    Creates a hash code for the <see cref="T:System.Windows.Rect" />. 
                </summary>
      <returns>
                    A hash code for the current <see cref="T:System.Windows.Rect" /> structure.
                </returns>
    </member>
    <member name="P:System.Windows.Rect.Height">
      <summary>
                    Gets or sets the height of the rectangle. 
                </summary>
      <returns>
                    A value that represents the height of the rectangle. The default is 0.
                </returns>
    </member>
    <member name="M:System.Windows.Rect.Intersect(System.Windows.Rect)">
      <summary>
                    Finds the intersection of the rectangle represented by the current <see cref="T:System.Windows.Rect" /> and the rectangle represented by the specified <see cref="T:System.Windows.Rect" />, and stores the result as the current <see cref="T:System.Windows.Rect" />. 
                </summary>
      <param name="rect">
                    The rectangle to intersect with the current rectangle.
                </param>
    </member>
    <member name="P:System.Windows.Rect.IsEmpty">
      <summary>
                    Gets a value that indicates whether the rectangle is the <see cref="P:System.Windows.Rect.Empty" /> rectangle.
                </summary>
      <returns>true if the rectangle is the <see cref="P:System.Windows.Rect.Empty" /> rectangle; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Windows.Rect.Left">
      <summary>
                    Gets the x-axis value of the left side of the rectangle. 
                </summary>
      <returns>
                    The x-axis value of the left side of the rectangle.
                </returns>
    </member>
    <member name="M:System.Windows.Rect.op_Equality(System.Windows.Rect,System.Windows.Rect)">
      <summary>
                    Compares two <see cref="T:System.Windows.Rect" /> structures for equality.
                </summary>
      <returns>true if the <see cref="T:System.Windows.Rect" /> structures have the same x,y,width,height property values; otherwise, false.
                </returns>
      <param name="rect1">
                    The first rectangle to compare.
                </param>
      <param name="rect2">
                    The second rectangle to compare.
                </param>
    </member>
    <member name="M:System.Windows.Rect.op_Inequality(System.Windows.Rect,System.Windows.Rect)">
      <summary>
                    Compares two <see cref="T:System.Windows.Rect" /> structures for inequality.  
                </summary>
      <returns>true if the <see cref="T:System.Windows.Rect" /> structures do not have the same x,y,width,height property values; otherwise, false.
                </returns>
      <param name="rect1">
                    The first rectangle to compare.
                </param>
      <param name="rect2">
                    The second rectangle to compare.
                </param>
    </member>
    <member name="P:System.Windows.Rect.Right">
      <summary>
                    Gets the x-axis value of the right side of the rectangle.  
                </summary>
      <returns>
                    The x-axis value of the right side of the rectangle.
                </returns>
    </member>
    <member name="M:System.Windows.Rect.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>
                     
                </summary>
      <returns>
                     
                </returns>
      <param name="format">
                     
                </param>
      <param name="provider">
                     
                </param>
    </member>
    <member name="P:System.Windows.Rect.Top">
      <summary>
                    Gets the y-axis position of the top of the rectangle. 
                </summary>
      <returns>
                    The y-axis position of the top of the rectangle.
                </returns>
    </member>
    <member name="M:System.Windows.Rect.ToString">
      <summary>
                    Returns a string representation of the <see cref="T:System.Windows.Rect" /> structure. 
                </summary>
      <returns>
                    A string representation of the current <see cref="T:System.Windows.Rect" /> structure. The string has the following form: "<see cref="P:System.Windows.Rect.X" />,<see cref="P:System.Windows.Rect.Y" />,<see cref="P:System.Windows.Rect.Width" />,<see cref="P:System.Windows.Rect.Height" />".
                </returns>
    </member>
    <member name="M:System.Windows.Rect.ToString(System.IFormatProvider)">
      <summary>
                    Returns a string representation of the rectangle by using the specified format provider. 
                </summary>
      <returns>
                    A string representation of the current rectangle that is determined by the specified format provider.
                </returns>
      <param name="provider">
                    Culture-specific formatting information.
                </param>
    </member>
    <member name="M:System.Windows.Rect.Union(System.Windows.Point)">
      <summary>
                    Expands the rectangle represented by the current <see cref="T:System.Windows.Rect" /> exactly enough to contain the specified point. 
                </summary>
      <param name="point">
                    The point to include.
                </param>
    </member>
    <member name="M:System.Windows.Rect.Union(System.Windows.Rect)">
      <summary>
                    Expands the rectangle represented by the current <see cref="T:System.Windows.Rect" /> exactly enough to contain the specified rectangle. 
                </summary>
      <param name="rect">
                    The rectangle to include.
                </param>
    </member>
    <member name="P:System.Windows.Rect.Width">
      <summary>
                    Gets or sets the width of the rectangle.  
                </summary>
      <returns>
                    A value that represents the width of the rectangle in pixels. The default is 0.
                </returns>
    </member>
    <member name="P:System.Windows.Rect.X">
      <summary>
                    Gets or sets the x-axis value of the left side of the rectangle. 
                </summary>
      <returns>
                    The x-axis value of the left side of the rectangle. This value is interpreted as pixels within the coordinate space.
                </returns>
    </member>
    <member name="P:System.Windows.Rect.Y">
      <summary>
                    Gets or sets the y-axis value of the top side of the rectangle. 
                </summary>
      <returns>
                    The y-axis value of the top side of the rectangle. This value is interpreted as pixels within the coordinate space..
                </returns>
    </member>
    <member name="T:System.Windows.ResourceDictionary">
      <summary>
                    Provides a dictionary that contains keyed resources used by components of a Silverlight-based application. 
                </summary>
    </member>
    <member name="M:System.Windows.ResourceDictionary.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.ResourceDictionary" /> class. 
                </summary>
    </member>
    <member name="M:System.Windows.ResourceDictionary.Add(System.String,System.Object)">
      <summary>
                    Adds an item to the <see cref="T:System.Windows.ResourceDictionary" />.
                </summary>
      <param name="key">
                    The string key of the item to add.
                </param>
      <param name="value">
                    The item value to add. 
                </param>
      <exception cref="T:System.NotSupportedException">
                    Attempted to add null as a value.
                </exception>
      <exception cref="T:System.ArgumentException">
                    Attempted to add an item with a <paramref name="key" /> that already exists in this <see cref="T:System.Windows.ResourceDictionary" />.
                </exception>
    </member>
    <member name="M:System.Windows.ResourceDictionary.Clear">
      <summary>
                    Removes all items from this <see cref="T:System.Windows.ResourceDictionary" />.
                </summary>
    </member>
    <member name="M:System.Windows.ResourceDictionary.Contains(System.Object)">
      <summary>
                    Returns a value that indicates whether a specified key exists in the <see cref="T:System.Windows.ResourceDictionary" />.
                </summary>
      <returns>true if an item with that key exists in the <see cref="T:System.Windows.ResourceDictionary" />; otherwise, false.
                </returns>
      <param name="key">
                    The key to check for in the <see cref="T:System.Windows.ResourceDictionary" />.
                </param>
    </member>
    <member name="P:System.Windows.ResourceDictionary.Count">
      <summary>
                    Gets the number of elements contained in the collection.
                </summary>
      <returns>
                    The number of elements contained in the collection.
                </returns>
    </member>
    <member name="P:System.Windows.ResourceDictionary.IsReadOnly">
      <summary>
                    Gets a value indicating whether the collection is read-only.
                </summary>
      <returns>true if the collection is read-only; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Windows.ResourceDictionary.Item(System.Object)">
      <summary>
                    Gets the element at the specified index.
                </summary>
      <returns>
                    The object if it exists; otherwise, null.
                </returns>
      <param name="key">
                    The key of the element to get. 
                </param>
      <exception cref="T:System.NotSupportedException">
                    Attempted to set a value using the indexer. 
                </exception>
    </member>
    <member name="M:System.Windows.ResourceDictionary.Remove(System.String)">
      <summary>
                    Removes a specific item from the <see cref="T:System.Windows.ResourceDictionary" />.
                </summary>
      <param name="key">
                    The string key of the item to remove.
                </param>
    </member>
    <member name="M:System.Windows.ResourceDictionary.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{System.Object,System.Object})"></member>
    <member name="M:System.Windows.ResourceDictionary.System#Collections#Generic#ICollection{T}#Clear"></member>
    <member name="M:System.Windows.ResourceDictionary.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{System.Object,System.Object})"></member>
    <member name="M:System.Windows.ResourceDictionary.System#Collections#Generic#ICollection{T}#CopyTo(System.Collections.Generic.KeyValuePair{System.Object,System.Object}[],System.Int32)"></member>
    <member name="P:System.Windows.ResourceDictionary.System#Collections#Generic#ICollection{T}#Count"></member>
    <member name="P:System.Windows.ResourceDictionary.System#Collections#Generic#ICollection{T}#IsReadOnly"></member>
    <member name="M:System.Windows.ResourceDictionary.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{System.Object,System.Object})"></member>
    <member name="M:System.Windows.ResourceDictionary.System#Collections#Generic#IDictionary{TKey@TValue}#Add(System.Object,System.Object)"></member>
    <member name="M:System.Windows.ResourceDictionary.System#Collections#Generic#IDictionary{TKey@TValue}#ContainsKey(System.Object)"></member>
    <member name="P:System.Windows.ResourceDictionary.System#Collections#Generic#IDictionary{TKey@TValue}#Item(System.Object)"></member>
    <member name="P:System.Windows.ResourceDictionary.System#Collections#Generic#IDictionary{TKey@TValue}#Keys"></member>
    <member name="M:System.Windows.ResourceDictionary.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(System.Object)"></member>
    <member name="M:System.Windows.ResourceDictionary.System#Collections#Generic#IDictionary{TKey@TValue}#TryGetValue(System.Object,System.Object@)"></member>
    <member name="P:System.Windows.ResourceDictionary.System#Collections#Generic#IDictionary{TKey@TValue}#Values"></member>
    <member name="M:System.Windows.ResourceDictionary.System#Collections#Generic#IEnumerable{T}#GetEnumerator"></member>
    <member name="M:System.Windows.ResourceDictionary.System#Collections#IEnumerable#GetEnumerator">
      <exception cref="T:System.NotImplementedException">
                    Returned in all cases.
                </exception>
    </member>
    <member name="T:System.Windows.RoutedEvent">
      <summary>
                    Represents a routed event to the Silverlight event system.
                </summary>
    </member>
    <member name="M:System.Windows.RoutedEvent.ToString">
      <summary>
                    Returns the string representation of the routed event.
                </summary>
      <returns>
                    The name of the routed event.
                </returns>
    </member>
    <member name="T:System.Windows.RoutedEventArgs">
      <summary>
                    Contains state information and event data associated with a routed event. 
                </summary>
    </member>
    <member name="M:System.Windows.RoutedEventArgs.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.RoutedEventArgs" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.RoutedEventArgs.OriginalSource">
      <summary>
                    Gets a reference to the object that raised the event. 
                </summary>
      <returns>
                    The object that raised the event.
                </returns>
    </member>
    <member name="T:System.Windows.RoutedEventHandler">
      <summary>
                    Represents the method that will handle routed events.
                </summary>
      <param name="sender">
                    The object where the event handler is attached.
                </param>
      <param name="e">
                    The event data. 
                </param>
    </member>
    <member name="T:System.Windows.RoutedPropertyChangedEventArgs`1">
      <summary>
                    Provides data about a change in value to a dependency property as reported by particular routed events, including the previous and current value of the property that changed. 
                </summary>
      <typeparam name="T">
                    The type of the dependency property that has changed.
                </typeparam>
    </member>
    <member name="M:System.Windows.RoutedPropertyChangedEventArgs`1.#ctor(`0,`0)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.RoutedPropertyChangedEventArgs`1" /> class, with provided old and new values.
                </summary>
      <param name="oldValue">
                    The previous value of the property, before the event was raised.
                </param>
      <param name="newValue">
                    The current value of the property at the time of the event.
                </param>
    </member>
    <member name="P:System.Windows.RoutedPropertyChangedEventArgs`1.NewValue">
      <summary>
                    Gets the new value of a property as reported by a property-changed event. 
                </summary>
      <returns>
                    The generic value. In a practical implementation of the <see cref="T:System.Windows.RoutedPropertyChangedEventArgs`1" />, the generic type of this property is replaced with the constrained type of the implementation.
                </returns>
    </member>
    <member name="P:System.Windows.RoutedPropertyChangedEventArgs`1.OldValue">
      <summary>
                    Gets the previous value of the property as reported by a property-changed event. 
                </summary>
      <returns>
                    The generic value. In a practical implementation of the <see cref="T:System.Windows.RoutedPropertyChangedEventArgs`1" />, the generic type of this property is replaced with the constrained type of the implementation.
                </returns>
    </member>
    <member name="T:System.Windows.RoutedPropertyChangedEventHandler`1">
      <summary>
                    Represents methods that will handle various routed events that track property value changes.
                </summary>
      <param name="sender">
                    The object where the event handler is attached.
                </param>
      <param name="e">
                    The event data. Specific event definitions will constrain <see cref="T:System.Windows.RoutedPropertyChangedEventArgs`1" /> to a type, with the type parameter of the constraint matching the type parameter constraint of a delegate implementation.
                </param>
      <typeparam name="T">
                    The type of the property value where changes in value are reported.
                </typeparam>
    </member>
    <member name="T:System.Windows.Setter">
      <summary>
                    Applies a value to a property in a <see cref="T:System.Windows.Style" />.
                </summary>
    </member>
    <member name="M:System.Windows.Setter.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Setter" /> class. 
                </summary>
    </member>
    <member name="M:System.Windows.Setter.#ctor(System.Windows.DependencyProperty,System.Object)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Setter" /> class with the specified property and value.
                </summary>
      <param name="property">
                    The dependency property to apply the value to.
                </param>
      <param name="value">
                    The value to apply to the property.
                </param>
    </member>
    <member name="P:System.Windows.Setter.Property">
      <summary>
                    Gets or sets the property to apply the <see cref="P:System.Windows.Setter.Value" /> to.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.DependencyProperty" /> to which the <see cref="P:System.Windows.Setter.Value" /> will be applied. The default is null.
                </returns>
    </member>
    <member name="P:System.Windows.Setter.Value">
      <summary>
                    Gets or sets the value to apply to the property that is specified by the <see cref="T:System.Windows.Setter" />.
                </summary>
      <returns>
                    The value to apply to the property that is specified by the <see cref="T:System.Windows.Setter" />.
                </returns>
    </member>
    <member name="T:System.Windows.SetterBase">
      <summary>
                    Represents the base class for value setters. 
                </summary>
    </member>
    <member name="P:System.Windows.SetterBase.IsSealed">
      <summary>
                    Gets a value that indicates whether this object is in an immutable state.
                </summary>
      <returns>true if this object is in an immutable state; otherwise, false.
                </returns>
    </member>
    <member name="T:System.Windows.SetterBaseCollection">
      <summary>
                    Represents a collection of objects that inherit from <see cref="T:System.Windows.SetterBase" />.
                </summary>
    </member>
    <member name="M:System.Windows.SetterBaseCollection.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.SetterBaseCollection" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.SetterBaseCollection.IsSealed">
      <summary>
                    Gets a value that indicates whether the collection is in a read-only state.
                </summary>
      <returns>true if this object is in a read-only state and cannot be changed; otherwise, false.
                </returns>
    </member>
    <member name="T:System.Windows.Size">
      <summary>
                    Describes the width and height of an object. 
                </summary>
    </member>
    <member name="M:System.Windows.Size.#ctor(System.Double,System.Double)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Size" /> structure and assigns it an initial <paramref name="width" /> and <paramref name="height" />.
                </summary>
      <param name="width">
                    The initial width of the instance of <see cref="T:System.Windows.Size" />.
                </param>
      <param name="height">
                    The initial height of the instance of <see cref="T:System.Windows.Size" />.
                </param>
    </member>
    <member name="P:System.Windows.Size.Empty">
      <summary>
                    Gets a value that represents a static empty <see cref="T:System.Windows.Size" />. 
                </summary>
      <returns>
                    An empty instance of <see cref="T:System.Windows.Size" />.
                </returns>
    </member>
    <member name="M:System.Windows.Size.Equals(System.Object)">
      <summary>
                    Compares an object to an instance of <see cref="T:System.Windows.Size" /> for equality. 
                </summary>
      <returns>true if the sizes are equal; otherwise, false.
                </returns>
      <param name="o">
                    The <see cref="T:System.Object" /> to compare.
                </param>
    </member>
    <member name="M:System.Windows.Size.Equals(System.Windows.Size)">
      <summary>
                    Compares a value to an instance of <see cref="T:System.Windows.Size" /> for equality. 
                </summary>
      <returns>true if the instances of <see cref="T:System.Windows.Size" /> are equal; otherwise, false.
                </returns>
      <param name="value">
                    The size to compare to this current instance of <see cref="T:System.Windows.Size" />.
                </param>
    </member>
    <member name="M:System.Windows.Size.GetHashCode">
      <summary>
                    Gets the hash code for this instance of <see cref="T:System.Windows.Size" />. 
                </summary>
      <returns>
                    The hash code for this instance of <see cref="T:System.Windows.Size" />.
                </returns>
    </member>
    <member name="P:System.Windows.Size.Height">
      <summary>
                    Gets or sets the <see cref="P:System.Windows.Size.Height" /> of this instance of <see cref="T:System.Windows.Size" />. 
                </summary>
      <returns>
                    The <see cref="P:System.Windows.Size.Height" /> of this instance of <see cref="T:System.Windows.Size" />. The default is 0. The value cannot be negative.
                </returns>
    </member>
    <member name="P:System.Windows.Size.IsEmpty">
      <summary>
                    Gets a value that indicates whether this instance of <see cref="T:System.Windows.Size" /> is <see cref="P:System.Windows.Size.Empty" />. 
                </summary>
      <returns>true if this instance of size is <see cref="P:System.Windows.Size.Empty" />; otherwise false.
                </returns>
    </member>
    <member name="M:System.Windows.Size.op_Equality(System.Windows.Size,System.Windows.Size)">
      <summary>
                    Compares two instances of <see cref="T:System.Windows.Size" /> for equality. 
                </summary>
      <returns>true if the two instances of <see cref="T:System.Windows.Size" /> are equal; otherwise false.
                </returns>
      <param name="size1">
                    The first instance of <see cref="T:System.Windows.Size" /> to compare.
                </param>
      <param name="size2">
                    The second instance of <see cref="T:System.Windows.Size" /> to compare.
                </param>
    </member>
    <member name="M:System.Windows.Size.op_Inequality(System.Windows.Size,System.Windows.Size)">
      <summary>
                    Compares two instances of <see cref="T:System.Windows.Size" /> for inequality. 
                </summary>
      <returns>true if the instances of <see cref="T:System.Windows.Size" /> are not equal; otherwise false.
                </returns>
      <param name="size1">
                    The first instance of <see cref="T:System.Windows.Size" /> to compare.
                </param>
      <param name="size2">
                    The second instance of <see cref="T:System.Windows.Size" /> to compare.
                </param>
    </member>
    <member name="M:System.Windows.Size.ToString">
      <summary>
                    Returns a string representation of this <see cref="T:System.Windows.Size" />.
                </summary>
      <returns>
                    A string representation of this <see cref="T:System.Windows.Size" />.
                </returns>
    </member>
    <member name="P:System.Windows.Size.Width">
      <summary>
                    Gets or sets the <see cref="P:System.Windows.Size.Width" /> of this instance of <see cref="T:System.Windows.Size" />. 
                </summary>
      <returns>
                    The <see cref="P:System.Windows.Size.Width" /> of this instance of <see cref="T:System.Windows.Size" />. The default value is 0. The value cannot be negative.
                </returns>
    </member>
    <member name="T:System.Windows.SizeChangedEventArgs">
      <summary>
                    Provides data related to the <see cref="E:System.Windows.FrameworkElement.SizeChanged" /> event. 
                </summary>
    </member>
    <member name="P:System.Windows.SizeChangedEventArgs.NewSize">
      <summary>
                    Gets the new size of the object reporting the size change.
                </summary>
      <returns>
                    The new size. The <see cref="T:System.Windows.Size" /> structure contains the new height and width.
                </returns>
    </member>
    <member name="P:System.Windows.SizeChangedEventArgs.PreviousSize">
      <summary>
                    Gets the previous size of the object reporting the size change.
                </summary>
      <returns>
                    The previous size. 
                </returns>
    </member>
    <member name="T:System.Windows.SizeChangedEventHandler">
      <summary>
                    Represents the method that will handle the <see cref="E:System.Windows.FrameworkElement.SizeChanged" /> event.
                </summary>
      <param name="sender">
                    The object where the event handler is attached.
                </param>
      <param name="e">
                    The event data.
                </param>
    </member>
    <member name="T:System.Windows.StartupEventArgs">
      <summary>
                    Contains the event data for the <see cref="E:System.Windows.Application.Startup" /> event.
                </summary>
    </member>
    <member name="P:System.Windows.StartupEventArgs.InitParams">
      <summary>
                    Gets the initialization parameters that were passed as part of HTML and JavaScript initialization of a Silverlight plug-in.
                </summary>
      <returns>
                    The set of initialization parameters, as a dictionary with key strings and value strings.
                </returns>
    </member>
    <member name="T:System.Windows.StartupEventHandler">
      <summary>
                    Represents the method that will handle the <see cref="E:System.Windows.Application.Startup" /> event. 
                </summary>
      <param name="sender">
                    The object that raised the event.
                </param>
      <param name="e">
                    The event data.
                </param>
    </member>
    <member name="T:System.Windows.Style">
      <summary>
                    Contains property setters that can be shared between instances of a type.
                </summary>
    </member>
    <member name="M:System.Windows.Style.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Style" /> class. 
                </summary>
    </member>
    <member name="M:System.Windows.Style.#ctor(System.Type)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Style" /> class to use on the specified <see cref="T:System.Type" />. 
                </summary>
      <param name="targetType">
                    The type to which the style will apply.
                </param>
    </member>
    <member name="P:System.Windows.Style.IsSealed">
      <summary>
                    Gets a value that indicates whether the style is read-only and cannot be changed.
                </summary>
      <returns>true if the style is read-only; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Windows.Style.Seal">
      <summary>
                    Locks the style so that the <see cref="P:System.Windows.Style.TargetType" /> property or any <see cref="T:System.Windows.Setter" /> in the <see cref="P:System.Windows.Style.Setters" /> collection cannot be changed.
                </summary>
    </member>
    <member name="P:System.Windows.Style.Setters">
      <summary>
                    Gets a collection of <see cref="T:System.Windows.Setter" /> objects.
                </summary>
      <returns>
                    A collection of <see cref="T:System.Windows.Setter" /> objects. The default is an empty collection.
                </returns>
    </member>
    <member name="P:System.Windows.Style.TargetType">
      <summary>
                    Gets or sets the type for which the style is intended.
                </summary>
      <returns>
                    The type of object to which the style is applied.
                </returns>
    </member>
    <member name="T:System.Windows.StyleTypedPropertyAttribute">
      <summary>
                    Represents an attribute that is applied to the class definition and determines the <see cref="P:System.Windows.Style.TargetType" /> of the properties that are of type <see cref="T:System.Windows.Style" />.
                </summary>
    </member>
    <member name="M:System.Windows.StyleTypedPropertyAttribute.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.StyleTypedPropertyAttribute" /> class.
                </summary>
    </member>
    <member name="P:System.Windows.StyleTypedPropertyAttribute.Property">
      <summary>
                    Gets or sets the name of the property that is of type <see cref="T:System.Windows.Style" />.
                </summary>
      <returns>
                    The name of the property.
                </returns>
    </member>
    <member name="P:System.Windows.StyleTypedPropertyAttribute.StyleTargetType">
      <summary>
                    Gets or sets the <see cref="P:System.Windows.Style.TargetType" /> of the <see cref="P:System.Windows.StyleTypedPropertyAttribute.Property" /> this attribute is specifying. 
                </summary>
      <returns>
                    The <see cref="P:System.Windows.Style.TargetType" /> of the <see cref="P:System.Windows.StyleTypedPropertyAttribute.Property" /> this attribute is specifying.
                </returns>
    </member>
    <member name="T:System.Windows.SystemParameters">
      <summary>
                    Contains properties that you can use to query system settings.
                </summary>
    </member>
    <member name="P:System.Windows.SystemParameters.HighContrast">
      <summary>
                    Gets a value that indicates whether the client computer is in high-contrast mode.
                </summary>
      <returns>true if the client computer is in high-contrast mode; otherwise, false.
                </returns>
    </member>
    <member name="T:System.Windows.TemplateBindingExpression"></member>
    <member name="T:System.Windows.TemplatePartAttribute">
      <summary>
                    Represents an attribute that is applied to the class definition to identify the types of the named parts that are used for control templating.
                </summary>
    </member>
    <member name="M:System.Windows.TemplatePartAttribute.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.TemplatePartAttribute" /> class
                </summary>
    </member>
    <member name="P:System.Windows.TemplatePartAttribute.Name">
      <summary>
                    Gets or sets a string that reports the object model name of a template part.
                </summary>
      <returns>
                    A string that should be used as the name of a template part in a template.
                </returns>
    </member>
    <member name="P:System.Windows.TemplatePartAttribute.Type">
      <summary>
                    Gets or sets a string that reports the <see cref="T:System.Type" /> of a template part.
                </summary>
      <returns>
                    A <see cref="T:System.Type" /> object that reports the type of a template part.
                </returns>
    </member>
    <member name="T:System.Windows.TemplateVisualStateAttribute">
      <summary>
                    Specifies that a control can be in a certain state and that a <see cref="T:System.Windows.VisualState" /> is expected in the control's <see cref="T:System.Windows.Controls.ControlTemplate" />.
                </summary>
    </member>
    <member name="M:System.Windows.TemplateVisualStateAttribute.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.TemplateVisualStateAttribute" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.TemplateVisualStateAttribute.GroupName">
      <summary>
                    Gets or sets the name of the group that the state belongs to.
                </summary>
      <returns>
                    The name of the group that the state belongs to.
                </returns>
    </member>
    <member name="P:System.Windows.TemplateVisualStateAttribute.Name">
      <summary>
                    Gets or sets the name of the state that the control can be in.
                </summary>
      <returns>
                    The name of the state that the control can be in.
                </returns>
    </member>
    <member name="T:System.Windows.TextAlignment">
      <summary>
                    Specifies whether text is centered, left-aligned, or right-aligned.
                </summary>
    </member>
    <member name="F:System.Windows.TextAlignment.Center">
      <summary>
                    Text is centered.
                </summary>
    </member>
    <member name="F:System.Windows.TextAlignment.Left">
      <summary>
                    Text is aligned to the left.
                </summary>
    </member>
    <member name="F:System.Windows.TextAlignment.Right">
      <summary>
                    Text is aligned to the right.
                </summary>
    </member>
    <member name="T:System.Windows.TextDecorationCollection">
      <summary>
                    Provides the value for the <see cref="P:System.Windows.Controls.TextBlock.TextDecorations" /> and <see cref="P:System.Windows.Documents.Inline.TextDecorations" /> properties.
                </summary>
    </member>
    <member name="T:System.Windows.TextDecorations">
      <summary>
                    Implements a set of predefined text decorations.
                </summary>
    </member>
    <member name="P:System.Windows.TextDecorations.Underline">
      <summary>
                    Specifies an underlined text decoration.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.TextDecorationCollection" /> that represents an underlined text decoration.
                </returns>
    </member>
    <member name="T:System.Windows.TextWrapping">
      <summary>
                    Specifies whether text wraps when it reaches the edge of its container.
                </summary>
    </member>
    <member name="F:System.Windows.TextWrapping.Wrap">
      <summary>
                    Line breaking occurs if a line of text overflows beyond the available width of its container. Line breaking occurs even if the standard line-breaking algorithm cannot determine any line break opportunity, such as when a line of text includes a long word that is constrained by a fixed-width container without scrolling.
                </summary>
    </member>
    <member name="F:System.Windows.TextWrapping.NoWrap">
      <summary>
                    No line wrapping is performed.
                </summary>
    </member>
    <member name="T:System.Windows.Thickness">
      <summary>
                    Describes the thickness of a frame around a rectangle. Four <see cref="T:System.Double" /> values describe the <see cref="P:System.Windows.Thickness.Left" />, <see cref="P:System.Windows.Thickness.Top" />, <see cref="P:System.Windows.Thickness.Right" />, and <see cref="P:System.Windows.Thickness.Bottom" /> sides of the rectangle, respectively. 
                </summary>
    </member>
    <member name="M:System.Windows.Thickness.#ctor(System.Double)">
      <summary>
                    Initializes a <see cref="T:System.Windows.Thickness" /> structure that has the specified uniform length on each side. 
                </summary>
      <param name="uniformLength">
                    The uniform length applied to all four sides of the bounding rectangle.
                </param>
    </member>
    <member name="M:System.Windows.Thickness.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
                    Initializes a <see cref="T:System.Windows.Thickness" /> structure that has specific lengths (supplied as a <see cref="T:System.Double" />) applied to each side of the rectangle. 
                </summary>
      <param name="left">
                    The thickness for the left side of the rectangle.
                </param>
      <param name="top">
                    The thickness for the upper side of the rectangle.
                </param>
      <param name="right">
                    The thickness for the right side of the rectangle
                </param>
      <param name="bottom">
                    The thickness for the lower side of the rectangle.
                </param>
    </member>
    <member name="P:System.Windows.Thickness.Bottom">
      <summary>
                    Gets or sets the width, in pixels, of the lower side of the bounding rectangle.
                </summary>
      <returns>
                    A <see cref="T:System.Double" /> that represents the width, in pixels, of the lower side of the bounding rectangle for this instance of <see cref="T:System.Windows.Thickness" />. The default is 0.
                </returns>
    </member>
    <member name="M:System.Windows.Thickness.Equals(System.Object)">
      <summary>
                    Compares this <see cref="T:System.Windows.Thickness" /> structure to another <see cref="T:System.Object" /> for equality.
                </summary>
      <returns>true if the two objects are equal; otherwise, false.
                </returns>
      <param name="obj">
                    The object to compare.
                </param>
    </member>
    <member name="M:System.Windows.Thickness.Equals(System.Windows.Thickness)">
      <summary>
                    Compares this <see cref="T:System.Windows.Thickness" /> structure to another <see cref="T:System.Windows.Thickness" /> structure for equality.
                </summary>
      <returns>true if the two instances of <see cref="T:System.Windows.Thickness" /> are equal; otherwise, false.
                </returns>
      <param name="thickness">
                    An instance of <see cref="T:System.Windows.Thickness" /> to compare for equality.
                </param>
    </member>
    <member name="M:System.Windows.Thickness.GetHashCode">
      <summary>
                    Returns the hash code of the structure.
                </summary>
      <returns>
                    A hash code for this instance of <see cref="T:System.Windows.Thickness" />.
                </returns>
    </member>
    <member name="P:System.Windows.Thickness.Left">
      <summary>
                    Gets or sets the width, in pixels, of the left side of the bounding rectangle. 
                </summary>
      <returns>
                    A <see cref="T:System.Double" /> that represents the width, in pixels, of the left side of the bounding rectangle for this instance of <see cref="T:System.Windows.Thickness" />. The default is 0.
                </returns>
    </member>
    <member name="M:System.Windows.Thickness.op_Equality(System.Windows.Thickness,System.Windows.Thickness)">
      <summary>
                    Compares the value of two <see cref="T:System.Windows.Thickness" /> structures for equality.
                </summary>
      <returns>true if the two instances of <see cref="T:System.Windows.Thickness" /> are equal; otherwise, false.
                </returns>
      <param name="t1">
                    The first structure to compare.
                </param>
      <param name="t2">
                    The other structure to compare.
                </param>
    </member>
    <member name="M:System.Windows.Thickness.op_Inequality(System.Windows.Thickness,System.Windows.Thickness)">
      <summary>
                    Compares two <see cref="T:System.Windows.Thickness" /> structures for inequality. 
                </summary>
      <returns>true if the two instances of <see cref="T:System.Windows.Thickness" /> are not equal; otherwise, false.
                </returns>
      <param name="t1">
                    The first structure to compare.
                </param>
      <param name="t2">
                    The other structure to compare.
                </param>
    </member>
    <member name="P:System.Windows.Thickness.Right">
      <summary>
                    Gets or sets the width, in pixels, of the right side of the bounding rectangle. 
                </summary>
      <returns>
                    A <see cref="T:System.Double" /> that represents the width, in pixels, of the right side of the bounding rectangle for this instance of <see cref="T:System.Windows.Thickness" />. The default is 0.
                </returns>
    </member>
    <member name="P:System.Windows.Thickness.Top">
      <summary>
                    Gets or sets the width, in pixels, of the upper side of the bounding rectangle.
                </summary>
      <returns>
                    A <see cref="T:System.Double" /> that represents the width, in pixels, of the upper side of the bounding rectangle for this instance of <see cref="T:System.Windows.Thickness" />. The default is 0.
                </returns>
    </member>
    <member name="M:System.Windows.Thickness.ToString">
      <summary>
                    Returns the string representation of the <see cref="T:System.Windows.Thickness" /> structure.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that represents the <see cref="T:System.Windows.Thickness" /> value.
                </returns>
    </member>
    <member name="T:System.Windows.TriggerAction">
      <summary>
                    Serves as the base class for <see cref="T:System.Windows.Media.Animation.BeginStoryboard" />.
                </summary>
    </member>
    <member name="T:System.Windows.TriggerActionCollection">
      <summary>
                    Represents a collection of <see cref="T:System.Windows.Media.Animation.BeginStoryboard" /> objects.
                </summary>
    </member>
    <member name="M:System.Windows.TriggerActionCollection.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.TriggerActionCollection" /> class.
                </summary>
    </member>
    <member name="T:System.Windows.TriggerBase">
      <summary>
                    Serves as the base class for <see cref="T:System.Windows.EventTrigger" />.
                </summary>
    </member>
    <member name="T:System.Windows.TriggerCollection">
      <summary>
                    Represents a collection of <see cref="T:System.Windows.EventTrigger" /> objects. 
                </summary>
    </member>
    <member name="T:System.Windows.UIElement">
      <summary>
        <see cref="T:System.Windows.UIElement" /> is a base class for most of the objects that have visual appearance and can process basic input in Silverlight. 
                </summary>
    </member>
    <member name="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
      <summary>
                    Positions child objects and determines a size for a <see cref="T:System.Windows.UIElement" />. Parent objects that implement custom layout call this method from their layout override implementations to form a recursive layout update.
                </summary>
      <param name="finalRect">
                    The final size that the parent computes for the child in layout, provided as a <see cref="T:System.Windows.Rect" /> value.
                </param>
    </member>
    <member name="M:System.Windows.UIElement.CaptureMouse">
      <summary>
                    Sets mouse capture to a <see cref="T:System.Windows.UIElement" />.
                </summary>
      <returns>
                    Returns true if the object has mouse capture; otherwise, returns false.
                </returns>
    </member>
    <member name="P:System.Windows.UIElement.Clip">
      <summary>
                    Gets or sets the <see cref="T:System.Windows.Media.Geometry" /> used to define the outline of the contents of a <see cref="T:System.Windows.UIElement" />.
                </summary>
      <returns>
                    The geometry to be used for clipping area sizing. The default value is null.
                </returns>
    </member>
    <member name="F:System.Windows.UIElement.ClipProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.UIElement.Clip" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.UIElement.Clip" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.UIElement.DesiredSize">
      <summary>
                    Gets the size that this <see cref="T:System.Windows.UIElement" /> computed during the measure pass of the layout process. 
                </summary>
      <returns>
                    The size that this <see cref="T:System.Windows.UIElement" /> computed during the measure pass of the layout process.
                </returns>
    </member>
    <member name="E:System.Windows.UIElement.GotFocus">
      <summary>
                    Occurs when a <see cref="T:System.Windows.UIElement" /> receives focus.
                </summary>
    </member>
    <member name="M:System.Windows.UIElement.InvalidateArrange">
      <summary>
                    Invalidates the arrange state (layout) for a <see cref="T:System.Windows.UIElement" />. After the invalidation, the <see cref="T:System.Windows.UIElement" /> will have its layout updated, which will occur asynchronously. 
                </summary>
    </member>
    <member name="M:System.Windows.UIElement.InvalidateMeasure">
      <summary>
                    Invalidates the measurement state (layout) for a <see cref="T:System.Windows.UIElement" />. 
                </summary>
    </member>
    <member name="P:System.Windows.UIElement.IsHitTestVisible">
      <summary>
                    Gets or sets whether the contained area of this <see cref="T:System.Windows.UIElement" /> can return true values for hit testing. 
                </summary>
      <returns>true if the contained area of this <see cref="T:System.Windows.UIElement" /> can be used for hit-testing; otherwise, false. The default is true.
                </returns>
    </member>
    <member name="F:System.Windows.UIElement.IsHitTestVisibleProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> dependency property.
                </returns>
    </member>
    <member name="E:System.Windows.UIElement.KeyDown">
      <summary>
                    Occurs when a keyboard key is pressed while the <see cref="T:System.Windows.UIElement" /> has focus.
                </summary>
    </member>
    <member name="E:System.Windows.UIElement.KeyUp">
      <summary>
                    Occurs when a keyboard key is released while the <see cref="T:System.Windows.UIElement" />  has focus.
                </summary>
    </member>
    <member name="E:System.Windows.UIElement.LostFocus">
      <summary>
                    Occurs when a <see cref="T:System.Windows.UIElement" /> loses focus.
                </summary>
    </member>
    <member name="E:System.Windows.UIElement.LostMouseCapture">
      <summary>
                    Occurs when the object loses mouse (or stylus) capture.
                </summary>
    </member>
    <member name="M:System.Windows.UIElement.Measure(System.Windows.Size)">
      <summary>
                    Updates the <see cref="P:System.Windows.UIElement.DesiredSize" /> of a <see cref="T:System.Windows.UIElement" />. Typically, objects that implement custom layout for their layout children call this method from their own <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" /> implementations to form a recursive layout update.
                </summary>
      <param name="availableSize">
                    The available space that a parent can allocate a child object. A child object can request a larger space than what is available; the provided size might be accommodated if scrolling or other resize logic is possible.
                </param>
    </member>
    <member name="E:System.Windows.UIElement.MouseEnter">
      <summary>
                    Occurs when the mouse (or a stylus) enters the bounding area of a <see cref="T:System.Windows.UIElement" />.
                </summary>
    </member>
    <member name="E:System.Windows.UIElement.MouseLeave">
      <summary>
                    Occurs when the mouse (or the stylus) leaves the bounding area of a <see cref="T:System.Windows.UIElement" />.
                </summary>
    </member>
    <member name="E:System.Windows.UIElement.MouseLeftButtonDown">
      <summary>
                    Occurs when the left mouse button is pressed (or when the tip of the stylus touches the tablet PC) while the mouse pointer is over a <see cref="T:System.Windows.UIElement" />.
                </summary>
    </member>
    <member name="E:System.Windows.UIElement.MouseLeftButtonUp">
      <summary>
                    Occurs when the left mouse button is released (or the tip of the stylus is removed from the tablet PC) while the mouse (or the stylus) is over a <see cref="T:System.Windows.UIElement" /> (or while a <see cref="T:System.Windows.UIElement" /> holds mouse capture).
                </summary>
    </member>
    <member name="E:System.Windows.UIElement.MouseMove">
      <summary>
                    Occurs when the coordinate position of the mouse (or stylus) changes while over a <see cref="T:System.Windows.UIElement" /> (or while a <see cref="T:System.Windows.UIElement" /> holds mouse capture).
                </summary>
    </member>
    <member name="M:System.Windows.UIElement.OnCreateAutomationPeer">
      <summary>
                    When implemented in a derived class, returns class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementations for the Silverlight automation infrastructure.
                </summary>
      <returns>
                    The class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> subclass to return.
                </returns>
    </member>
    <member name="P:System.Windows.UIElement.Opacity">
      <summary>
                    Gets or sets the degree of the object's opacity.
                </summary>
      <returns>
                    A value between 0 and 1.0 that declares the opacity factor, with 1.0 meaning full opacity and 0 meaning transparent. The default value is 1.0.
                </returns>
    </member>
    <member name="P:System.Windows.UIElement.OpacityMask">
      <summary>
                    Gets or sets the brush used to alter the opacity of regions of this object.
                </summary>
      <returns>
                    A brush that describes the opacity applied to this object. The default is null.
                </returns>
    </member>
    <member name="F:System.Windows.UIElement.OpacityMaskProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.UIElement.Clip" /> dependency property.
                </returns>
    </member>
    <member name="F:System.Windows.UIElement.OpacityProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.UIElement.ReleaseMouseCapture">
      <summary>
                    Removes mouse capture from a <see cref="T:System.Windows.UIElement" />. After this call, typically no object holds mouse capture.
                </summary>
    </member>
    <member name="P:System.Windows.UIElement.RenderSize">
      <summary>
                    Gets the final render size of a <see cref="T:System.Windows.UIElement" />.
                </summary>
      <returns>
                    The rendered size for this object. There is no default value.
                </returns>
    </member>
    <member name="P:System.Windows.UIElement.RenderTransform">
      <summary>
                    Gets or sets transform information that affects the rendering position of a <see cref="T:System.Windows.UIElement" />.
                </summary>
      <returns>
                    Describes the specifics of the desired render transform. The default value is null.
                </returns>
    </member>
    <member name="P:System.Windows.UIElement.RenderTransformOrigin">
      <summary>
                    Gets or sets the origin point of any possible render transform declared by <see cref="P:System.Windows.UIElement.RenderTransform" />, relative to the bounds of the <see cref="T:System.Windows.UIElement" />.
                </summary>
      <returns>
                    The origin point of the render transform. The default value is a point with value 0,0.
                </returns>
    </member>
    <member name="F:System.Windows.UIElement.RenderTransformOriginProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.UIElement.RenderTransformOrigin" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.UIElement.RenderTransformOrigin" /> dependency property.
                </returns>
    </member>
    <member name="F:System.Windows.UIElement.RenderTransformProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.UIElement.RenderTransform" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.UIElement.RenderTransform" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.UIElement.TransformToVisual(System.Windows.UIElement)">
      <summary>
                    Returns a transform object that can be used to transform coordinates from the <see cref="T:System.Windows.UIElement" /> to the specified object.
                </summary>
      <returns>
                    The transform information as an object. Call <see cref="M:System.Windows.Media.GeneralTransform.Transform(System.Windows.Point)" /> on this object to get a practical transform.
                </returns>
      <param name="visual">
                    The object to compare to the current object for purposes of obtaining the transform.
                </param>
    </member>
    <member name="M:System.Windows.UIElement.UpdateLayout">
      <summary>
                    Ensures that all positions of child objects of a <see cref="T:System.Windows.UIElement" /> are properly updated for layout. 
                </summary>
    </member>
    <member name="P:System.Windows.UIElement.UseLayoutRounding">
      <summary>
                    Gets or sets a value that determines whether rendering for the object and its subtree should use rounding behavior that aligns rendering to whole pixels.
                </summary>
      <returns>true if rendering and layout should use rounding to whole pixels; otherwise, false. The default is true.
                </returns>
    </member>
    <member name="F:System.Windows.UIElement.UseLayoutRoundingProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.UIElement.UseLayoutRounding" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.UIElement.UseLayoutRounding" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.UIElement.Visibility">
      <summary>
                    Gets or sets the visibility of a <see cref="T:System.Windows.UIElement" />. A <see cref="T:System.Windows.UIElement" /> that is not visible does not render and does not communicate its desired size to layout.
                </summary>
      <returns>
                    A value of the enumeration. The default value is <see cref="F:System.Windows.Visibility.Visible" />.
                </returns>
    </member>
    <member name="F:System.Windows.UIElement.VisibilityProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.UIElement.Visibility" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.UIElement.Visibility" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.VerticalAlignment">
      <summary>
                    Describes how a child element is vertically positioned or stretched within a parent's layout slot. 
                </summary>
    </member>
    <member name="F:System.Windows.VerticalAlignment.Top">
      <summary>
                    The element is aligned to the top of the parent's layout slot.
                </summary>
    </member>
    <member name="F:System.Windows.VerticalAlignment.Center">
      <summary>
                    The element is aligned to the center of the parent's layout slot.
                </summary>
    </member>
    <member name="F:System.Windows.VerticalAlignment.Bottom">
      <summary>
                    The element is aligned to the bottom of the parent's layout slot. 
                </summary>
    </member>
    <member name="F:System.Windows.VerticalAlignment.Stretch">
      <summary>
                    The element is stretched to fill the entire layout slot of the parent element.
                </summary>
    </member>
    <member name="T:System.Windows.Visibility">
      <summary>
                    Specifies the display state of an element. 
                </summary>
    </member>
    <member name="F:System.Windows.Visibility.Visible">
      <summary>
                    Display the element.
                </summary>
    </member>
    <member name="F:System.Windows.Visibility.Collapsed">
      <summary>
                    Do not display the element, and do not reserve space for it in layout.
                </summary>
    </member>
    <member name="T:System.Windows.VisualState">
      <summary>
                    Represents the visual appearance of the control when it is in a specific state.
                </summary>
    </member>
    <member name="M:System.Windows.VisualState.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.VisualState" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.VisualState.Name">
      <summary>
                    Gets the name of the <see cref="T:System.Windows.VisualState" />.
                </summary>
      <returns>
                    The name of the <see cref="T:System.Windows.VisualState" />.
                </returns>
    </member>
    <member name="P:System.Windows.VisualState.Storyboard">
      <summary>
                    Gets or sets a <see cref="T:System.Windows.Media.Animation.Storyboard" /> that defines the appearance of the control when it is the state that is represented by the <see cref="T:System.Windows.VisualState" />. 
                </summary>
      <returns>
                    A Storyboard that defines the appearance of the control when it is the state that is represented by the <see cref="T:System.Windows.VisualState" />.
                </returns>
    </member>
    <member name="T:System.Windows.VisualStateChangedEventArgs">
      <summary>
                    Provides data for the <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" /> and <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanged" /> events. 
                </summary>
    </member>
    <member name="P:System.Windows.VisualStateChangedEventArgs.Control">
      <summary>
                    Gets the <see cref="T:System.Windows.Controls.Control" /> that is transitioning states.
                </summary>
      <returns>
                    The <see cref="T:System.Windows.Controls.Control" /> that is transitioning states.
                </returns>
    </member>
    <member name="P:System.Windows.VisualStateChangedEventArgs.NewState">
      <summary>
                    Gets the state the <see cref="T:System.Windows.Controls.Control" /> is transitioning to or has transitioned to.
                </summary>
      <returns>
                    The state the <see cref="T:System.Windows.Controls.Control" /> is transitioning to or has transitioned to.
                </returns>
    </member>
    <member name="P:System.Windows.VisualStateChangedEventArgs.OldState">
      <summary>
                    Gets the state the <see cref="T:System.Windows.Controls.Control" /> is transitioning from or has transitioned from.
                </summary>
      <returns>
                    The state the <see cref="T:System.Windows.Controls.Control" /> is transitioning from or has transitioned from.
                </returns>
    </member>
    <member name="T:System.Windows.VisualStateGroup">
      <summary>
                    Contains mutually exclusive <see cref="T:System.Windows.VisualState" /> objects and <see cref="T:System.Windows.VisualTransition" /> objects that are used to go from one state to another.
                </summary>
    </member>
    <member name="M:System.Windows.VisualStateGroup.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.VisualStateGroup" /> class. 
                </summary>
    </member>
    <member name="E:System.Windows.VisualStateGroup.CurrentStateChanged">
      <summary>
                    Occurs after a control transitions into a different state.
                </summary>
    </member>
    <member name="E:System.Windows.VisualStateGroup.CurrentStateChanging">
      <summary>
                    Occurs when a control begins transitioning into a different state.
                </summary>
    </member>
    <member name="P:System.Windows.VisualStateGroup.Name">
      <summary>
                    Gets the name of the <see cref="T:System.Windows.VisualStateGroup" />.
                </summary>
      <returns>
                    The name of the <see cref="T:System.Windows.VisualStateGroup" />.
                </returns>
    </member>
    <member name="P:System.Windows.VisualStateGroup.States">
      <summary>
                    Gets the collection of mutually exclusive <see cref="T:System.Windows.VisualState" /> objects.
                </summary>
      <returns>
                    The collection of mutually exclusive <see cref="T:System.Windows.VisualState" /> objects.
                </returns>
    </member>
    <member name="P:System.Windows.VisualStateGroup.Transitions">
      <summary>
                    Gets the collection of <see cref="T:System.Windows.VisualTransition" /> objects.
                </summary>
      <returns>
                    The collection of <see cref="T:System.Windows.VisualTransition" /> objects.
                </returns>
    </member>
    <member name="T:System.Windows.VisualStateManager">
      <summary>
                    Manages states and the logic for transitioning between states for controls.
                </summary>
    </member>
    <member name="M:System.Windows.VisualStateManager.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.VisualStateManager" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.VisualStateManager.CustomVisualStateManager">
      <summary>
                    Gets or sets the <see cref="T:System.Windows.VisualStateManager" /> that transitions between the states of a control. 
                </summary>
      <returns>
                    The <see cref="T:System.Windows.VisualStateManager" /> that transitions between the states of a control. The default is null.
                </returns>
    </member>
    <member name="F:System.Windows.VisualStateManager.CustomVisualStateManagerProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.VisualStateManager.GetCustomVisualStateManager(System.Windows.FrameworkElement)">
      <summary>
                    Gets the <see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" /> attached property.
                </summary>
      <returns>
                    The <see cref="T:System.Windows.VisualStateManager" /> that transitions between the states of a control. 
                </returns>
      <param name="obj">
                    The element from which to get the <see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" />.
                </param>
    </member>
    <member name="M:System.Windows.VisualStateManager.GetVisualStateGroups(System.Windows.FrameworkElement)">
      <summary>
                    Gets the <see cref="P:System.Windows.VisualStateManager.VisualStateGroups" /> attached property.
                </summary>
      <returns>
                    The collection of <see cref="T:System.Windows.VisualStateGroup" /> objects that is associated with the specified object.
                </returns>
      <param name="obj">
                    The element from which to get the <see cref="P:System.Windows.VisualStateManager.VisualStateGroups" />.
                </param>
    </member>
    <member name="M:System.Windows.VisualStateManager.GoToState(System.Windows.Controls.Control,System.String,System.Boolean)">
      <summary>
                    Transitions the control between two states.
                </summary>
      <returns>true if the control successfully transitioned to the new state; otherwise, false.
                </returns>
      <param name="control">
                    The control to transition between states. 
                </param>
      <param name="stateName">
                    The state to transition to.
                </param>
      <param name="useTransitions">true to use a <see cref="T:System.Windows.VisualTransition" /> to transition between states; otherwise, false.
                </param>
    </member>
    <member name="M:System.Windows.VisualStateManager.GoToStateCore(System.Windows.Controls.Control,System.Windows.FrameworkElement,System.String,System.Windows.VisualStateGroup,System.Windows.VisualState,System.Boolean)">
      <summary>
                    Transitions a control between states.
                </summary>
      <returns>true if the control successfully transitioned to the new state; otherwise, false.
                </returns>
      <param name="control">
                    The control to transition between states. 
                </param>
      <param name="templateRoot">
                    The root element of the control's <see cref="T:System.Windows.Controls.ControlTemplate" />.
                </param>
      <param name="stateName">
                    The name of the state to transition to.
                </param>
      <param name="group">
                    The <see cref="T:System.Windows.VisualStateGroup" /> that the state belongs to.
                </param>
      <param name="state">
                    The representation of the state to transition to.
                </param>
      <param name="useTransitions">true to use a <see cref="T:System.Windows.VisualTransition" /> to transition between states; otherwise, false.
                </param>
    </member>
    <member name="M:System.Windows.VisualStateManager.RaiseCurrentStateChanged(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.Controls.Control)">
      <summary>
                    Raises the <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanged" /> event on the specified <see cref="T:System.Windows.VisualStateGroup" />.
                </summary>
      <param name="stateGroup">
                    The object on which the <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" /> event
                </param>
      <param name="oldState">
                    The state that the control transitioned from.
                </param>
      <param name="newState">
                    The state that the control transitioned to.
                </param>
      <param name="control">
                    The control that transitioned states.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateGroup" /> is null.
                
                    -or-
                <paramref name="newState" /> is null.
                
                    -or-
                <paramref name="control" /> is null.
                </exception>
    </member>
    <member name="M:System.Windows.VisualStateManager.RaiseCurrentStateChanging(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.Controls.Control)">
      <summary>
                    Raises the <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" /> event on the specified <see cref="T:System.Windows.VisualStateGroup" />.
                </summary>
      <param name="stateGroup">
                    The object on which the <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" /> event
                </param>
      <param name="oldState">
                    The state that the control is transitioning from.
                </param>
      <param name="newState">
                    The state that the control is transitioning to.
                </param>
      <param name="control">
                    The control that is transitioning states.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateGroup" /> is null.
                
                    -or-
                <paramref name="newState" /> is null.
                
                    -or-
                <paramref name="control" /> is null.
                </exception>
    </member>
    <member name="M:System.Windows.VisualStateManager.SetCustomVisualStateManager(System.Windows.FrameworkElement,System.Windows.VisualStateManager)">
      <summary>
                    Sets the <see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" /> attached property.
                </summary>
      <param name="obj">
                    The object on which to set the property.
                </param>
      <param name="value">
                    The <see cref="T:System.Windows.VisualStateManager" /> that transitions between the states of a control.
                </param>
    </member>
    <member name="T:System.Windows.VisualTransition">
      <summary>
                    Represents the visual behavior that occurs when the control transitions from one state to another.
                </summary>
    </member>
    <member name="M:System.Windows.VisualTransition.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.VisualTransition" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.VisualTransition.From">
      <summary>
                    Gets or sets the name of the <see cref="T:System.Windows.VisualState" /> to transition from.
                </summary>
      <returns>
                    The name of the <see cref="T:System.Windows.VisualState" /> to transition from.
                </returns>
    </member>
    <member name="P:System.Windows.VisualTransition.GeneratedDuration">
      <summary>
                    Gets or sets the amount of time it takes to move from one state to another.
                </summary>
      <returns>
                    The amount of time it takes to move from one state to another.
                </returns>
    </member>
    <member name="P:System.Windows.VisualTransition.Storyboard">
      <summary>
                    Gets or sets the <see cref="T:System.Windows.Media.Animation.Storyboard" /> that occurs when the transition occurs.
                </summary>
      <returns>
                    The <see cref="T:System.Windows.Media.Animation.Storyboard" /> that occurs when the transition occurs.
                </returns>
    </member>
    <member name="P:System.Windows.VisualTransition.To">
      <summary>
                    Gets or sets the name of the <see cref="T:System.Windows.VisualState" /> to transition to.
                </summary>
      <returns>
                    The name of the <see cref="T:System.Windows.VisualState" /> to transition to.
                </returns>
    </member>
    <member name="T:System.Windows.Automation.AutomationElementIdentifiers">
      <summary>
                    Contains values used as identifiers by UI Automation providers.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.AcceleratorKeyProperty">
      <summary>
                    Identifies the accelerator key. The accelerator key value is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAcceleratorKey" /> method.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.AccessKeyProperty">
      <summary>
                    Identifies the access key. The access key value is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAccessKey" /> method.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.AutomationIdProperty">
      <summary>
                    Identifies the automation element identifier. The automation element identifier is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationId" /> method.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.BoundingRectangleProperty">
      <summary>
                    Identifies the bounding rectangle. The bounding rectangle value is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetBoundingRectangle" /> method.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.ClassNameProperty">
      <summary>
                    Identifies the class name. The class name value is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" /> method. 
                </summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.ClickablePointProperty">
      <summary>
                    Identifies a clickable point. A valid clickable point value is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClickablePoint" /> method.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.ControlTypeProperty">
      <summary>
                    Identifies the control type. The control type value is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" /> method. 
                </summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.HasKeyboardFocusProperty">
      <summary>
                    Identifies whether the control has the keyboard focus. The keyboard focus state is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.HasKeyboardFocus" /> method.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.HelpTextProperty">
      <summary>
                    Identifies the help text. The help text value is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetHelpText" /> method.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsContentElementProperty">
      <summary>
                    Identifies the content element status. The content element status indicates whether the element contains content that is valuable to the end user. The current status is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsContentElement" /> method.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsControlElementProperty">
      <summary>
                    Identifies the control element status. The control element status indicates whether the element contains user interface components that can be manipulated. The current status is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsControlElement" /> method.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsEnabledProperty">
      <summary>
                    Identifies the enabled status. The enabled status indicates whether the item referenced by the automation peer is enabled. The current status is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsEnabled" /> method.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsKeyboardFocusableProperty">
      <summary>
                    Identifies whether the control is focusable from the keyboard. The keyboard focusable status is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsKeyboardFocusable" /> method.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsOffscreenProperty">
      <summary>
                    Identifies the offscreen status. The offscreen status indicates whether the item referenced by the automation peer is off the screen. The current status is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsOffscreen" /> method. 
                </summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsPasswordProperty">
      <summary>
                    Identifies the password status. The password status indicates whether the item referenced by the automation peer contains a password. The current status is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsPassword" /> method.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsRequiredForFormProperty">
      <summary>
                    Identifies the form requirement status. The form requirement status indicates whether the element must be completed on a form. The current status is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsRequiredForForm" /> method.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.ItemStatusProperty">
      <summary>
                    Identifies the item status. The current item status is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetItemStatus" /> method.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.ItemTypeProperty">
      <summary>
                    Identifies the item type. The item type value is returned by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetItemType" /> method.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.LabeledByProperty">
      <summary>
                    Identifies the labeled-by peer. The current label peer is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetLabeledBy" /> method.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.LocalizedControlTypeProperty">
      <summary>
                    Identifies the localized control type. The current localized control type is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetLocalizedControlTypeCore" /> method.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.NameProperty">
      <summary>
                    Identifies the name of the element associated with an automation peer. The current name is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName" /> method.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.OrientationProperty">
      <summary>
                    Identifies the orientation. The current orientation value is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetOrientation" /> method.
                </summary>
    </member>
    <member name="T:System.Windows.Automation.AutomationProperties">
      <summary>
                    Provides a means of getting or setting the value of the associated properties of the instance of the <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> element. 
                </summary>
    </member>
    <member name="P:System.Windows.Automation.AutomationProperties.AcceleratorKey">
      <summary>
                    Gets or sets the accelerator key for the element.
                </summary>
      <returns>
                    The accelerator key for the element.
                </returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationProperties.AcceleratorKeyProperty">
      <summary>
                    Identifies the attached property of the <see cref="P:System.Windows.Automation.AutomationProperties.AcceleratorKey" /> property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Automation.AutomationProperties.AcceleratorKey" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationProperties.AccessKey">
      <summary>
                    Gets or sets the access key for the element.
                </summary>
      <returns>
                    The access key for the element.
                </returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationProperties.AccessKeyProperty">
      <summary>
                    Identifies the attached property of the <see cref="P:System.Windows.Automation.AutomationProperties.AccessKey" /> property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Automation.AutomationProperties.AccessKey" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationProperties.AutomationId">
      <summary>
                    Gets or set the string that uniquely identifies the element to UI Automation.
                </summary>
      <returns>
                    The string that uniquely identifies the element to UI Automation.
                </returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationProperties.AutomationIdProperty">
      <summary>
                    Identifies the attached property of the <see cref="P:System.Windows.Automation.AutomationProperties.AutomationId" /> property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Automation.AutomationProperties.AutomationId" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.GetAcceleratorKey(System.Windows.DependencyObject)">
      <summary>
                    Gets the value of the attached property of the <see cref="P:System.Windows.Automation.AutomationProperties.AcceleratorKey" /> property for the specified <see cref="T:System.Windows.DependencyObject" />.
                </summary>
      <returns>
                    The accelerator key.
                </returns>
      <param name="element"></param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.GetAccessKey(System.Windows.DependencyObject)">
      <summary>
                    Gets the value of the attached property of the <see cref="P:System.Windows.Automation.AutomationProperties.AccessKey" /> property for the specified <see cref="T:System.Windows.DependencyObject" />.
                </summary>
      <returns>
                    The access key for the specified element.
                </returns>
      <param name="element"></param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.GetAutomationId(System.Windows.DependencyObject)">
      <summary>
                    Gets the value of the attached property of the <see cref="P:System.Windows.Automation.AutomationProperties.AutomationId" /> property for the specified <see cref="T:System.Windows.DependencyObject" />.
                </summary>
      <returns>
                    The UI Automation identifier for the specified element.
                </returns>
      <param name="element">
                    The <see cref="T:System.Windows.DependencyObject" /> to check.
                </param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.GetHelpText(System.Windows.DependencyObject)">
      <summary>
                    Gets the value of the attached property of the <see cref="P:System.Windows.Automation.AutomationProperties.HelpText" /> property for the specified <see cref="T:System.Windows.DependencyObject" />.
                </summary>
      <returns>
                    The help text for the specified element.
                </returns>
      <param name="element">
                    The <see cref="T:System.Windows.DependencyObject" /> to check.
                </param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.GetIsRequiredForForm(System.Windows.DependencyObject)">
      <summary>
                    Gets the value of the attached property of <see cref="P:System.Windows.Automation.AutomationProperties.IsRequiredForForm" /> property for the specified <see cref="T:System.Windows.DependencyObject" />.
                </summary>
      <returns>true if the specified element is required for completion of a form; otherwise, false.
                </returns>
      <param name="element">
                    The <see cref="T:System.Windows.DependencyObject" /> to check.
                </param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.GetItemStatus(System.Windows.DependencyObject)">
      <summary>
                    Gets the value of the attached property of the <see cref="P:System.Windows.Automation.AutomationProperties.ItemStatus" /> property for the specified <see cref="T:System.Windows.DependencyObject" />.
                </summary>
      <returns>
                    The item status of the element.
                </returns>
      <param name="element">
                    The <see cref="T:System.Windows.DependencyObject" /> to check.
                </param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.GetItemType(System.Windows.DependencyObject)">
      <summary>
                    Gets the value of the attached property of the <see cref="P:System.Windows.Automation.AutomationProperties.ItemType" /> property for the specified <see cref="T:System.Windows.DependencyObject" />.
                </summary>
      <returns>
                    The item type of the element.
                </returns>
      <param name="element">
                    The <see cref="T:System.Windows.DependencyObject" /> to check.
                </param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.GetLabeledBy(System.Windows.DependencyObject)">
      <summary>
                    Gets the value of the attached property of the <see cref="P:System.Windows.Automation.AutomationProperties.LabeledBy" /> property for the specified <see cref="T:System.Windows.DependencyObject" />.
                </summary>
      <returns>
                    The element that is targeted by the label. 
                </returns>
      <param name="element"></param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.GetName(System.Windows.DependencyObject)">
      <summary>
                    Gets the value of the attached property of the <see cref="P:System.Windows.Automation.AutomationProperties.Name" /> property for the specified <see cref="T:System.Windows.DependencyObject" />.
                </summary>
      <returns>
                    The name of the specified element.
                </returns>
      <param name="element">
                    The <see cref="T:System.Windows.DependencyObject" /> to check.
                </param>
    </member>
    <member name="P:System.Windows.Automation.AutomationProperties.HelpText">
      <summary>
                    Gets or sets the help text for the element.
                </summary>
      <returns>
                    The help text for the specified element.
                </returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationProperties.HelpTextProperty">
      <summary>
                    Identifies the attached property for the <see cref="P:System.Windows.Automation.AutomationProperties.HelpText" /> property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Automation.AutomationProperties.HelpText" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationProperties.IsRequiredForForm">
      <summary>
                    Gets or sets a value that indicates whether the element is required to be filled out on a form.
                </summary>
      <returns>true if the element is required to be filled out on a form; otherwise, false.
                </returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationProperties.IsRequiredForFormProperty">
      <summary>
                    Identifies the attached property of the <see cref="P:System.Windows.Automation.AutomationProperties.IsRequiredForForm" /> property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Automation.AutomationProperties.IsRequiredForForm" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationProperties.ItemStatus">
      <summary>
                    Gets or sets a description of the status of an item in an element.
                </summary>
      <returns>
                    The status of an item in an element.
                </returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationProperties.ItemStatusProperty">
      <summary>
                    Identifies the attached property of the <see cref="P:System.Windows.Automation.AutomationProperties.ItemStatus" /> property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Automation.AutomationProperties.ItemStatus" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationProperties.ItemType">
      <summary>
                    Gets or sets a description of the type of the specified element.
                </summary>
      <returns>
                    The type of the specified element.
                </returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationProperties.ItemTypeProperty">
      <summary>
                    Identifies the attached property of the <see cref="P:System.Windows.Automation.AutomationProperties.ItemType" /> property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Automation.AutomationProperties.ItemType" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationProperties.LabeledBy">
      <summary>
                    Gets or sets the element that contains the text label for the element.
                </summary>
      <returns>
                    The element that contains the text label for the element.
                </returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationProperties.LabeledByProperty">
      <summary>
                    Identifies the attached property of the <see cref="P:System.Windows.Automation.AutomationProperties.LabeledBy" /> property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Automation.AutomationProperties.LabeledBy" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationProperties.Name">
      <summary>
                    Gets or sets the automation name of the element.
                </summary>
      <returns>
                    The name of the element.
                </returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationProperties.NameProperty">
      <summary>
                    Identifies the attached property of the <see cref="P:System.Windows.Automation.AutomationProperties.Name" /> property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Automation.AutomationProperties.Name" /> attached property. 
                </returns>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.SetAcceleratorKey(System.Windows.DependencyObject,System.String)">
      <summary>
                    Sets the value of the attached property of the <see cref="P:System.Windows.Automation.AutomationProperties.AcceleratorKey" /> property for the specified <see cref="T:System.Windows.DependencyObject" />.
                </summary>
      <param name="element"></param>
      <param name="value"></param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.SetAccessKey(System.Windows.DependencyObject,System.String)">
      <summary>
                    Sets the value of the attached property of the <see cref="P:System.Windows.Automation.AutomationProperties.AccessKey" /> property for the specified <see cref="T:System.Windows.DependencyObject" />.
                </summary>
      <param name="element"></param>
      <param name="value"></param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.SetAutomationId(System.Windows.DependencyObject,System.String)">
      <summary>
                    Sets the value of the attached property of the <see cref="P:System.Windows.Automation.AutomationProperties.AutomationId" /> property for the specified <see cref="T:System.Windows.DependencyObject" />.
                </summary>
      <param name="element">
                    The <see cref="T:System.Windows.DependencyObject" /> for which to set the property.
                </param>
      <param name="value">
                    The UI Automation identifier value to set.
                </param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.SetHelpText(System.Windows.DependencyObject,System.String)">
      <summary>
                    Sets the value of the attached property of the <see cref="P:System.Windows.Automation.AutomationProperties.HelpText" /> property for the specified <see cref="T:System.Windows.DependencyObject" />.
                </summary>
      <param name="element">
                    The <see cref="T:System.Windows.DependencyObject" /> for which to set the property.
                </param>
      <param name="value">
                    The help text.
                </param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.SetIsRequiredForForm(System.Windows.DependencyObject,System.Boolean)">
      <summary>
                    Sets the value of the attached property of the <see cref="P:System.Windows.Automation.AutomationProperties.IsRequiredForForm" /> property for the specified <see cref="T:System.Windows.DependencyObject" />.
                </summary>
      <param name="element">
                    The <see cref="T:System.Windows.DependencyObject" /> for which to set the property.
                </param>
      <param name="value">true to specify that the element is required to be filled out on a form; otherwise, false.
                </param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.SetItemStatus(System.Windows.DependencyObject,System.String)">
      <summary>
                    Sets the value of the attached property of the <see cref="P:System.Windows.Automation.AutomationProperties.ItemStatus" /> property for the specified <see cref="T:System.Windows.DependencyObject" />.
                </summary>
      <param name="element">
                    The <see cref="T:System.Windows.DependencyObject" /> for which to set the property.
                </param>
      <param name="value">
                    The item status.
                </param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.SetItemType(System.Windows.DependencyObject,System.String)">
      <summary>
                    Sets the value of the attached property of the <see cref="P:System.Windows.Automation.AutomationProperties.ItemType" /> property for the specified <see cref="T:System.Windows.DependencyObject" />.
                </summary>
      <param name="element">
                    The <see cref="T:System.Windows.DependencyObject" /> for which to set the property.
                </param>
      <param name="value">
                    The item type.
                </param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.SetLabeledBy(System.Windows.DependencyObject,System.Windows.UIElement)">
      <summary>
                    Sets the value of the attached property of the <see cref="P:System.Windows.Automation.AutomationProperties.LabeledBy" /> property for the specified <see cref="T:System.Windows.DependencyObject" />.
                </summary>
      <param name="element">
                    The <see cref="T:System.Windows.DependencyObject" /> for which to set the property.
                </param>
      <param name="value">
                    The labeled by value to set.
                </param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.SetName(System.Windows.DependencyObject,System.String)">
      <summary>
                    Sets the value of the attached property of the <see cref="P:System.Windows.Automation.AutomationProperties.Name" /> property for the specified <see cref="T:System.Windows.DependencyObject" />.
                </summary>
      <param name="element">
                    The <see cref="T:System.Windows.DependencyObject" /> for which to set the property.
                </param>
      <param name="value">
                    The name.
                </param>
    </member>
    <member name="T:System.Windows.Automation.AutomationProperty">
      <summary>
                    Identifies a property of <see cref="T:System.Windows.Automation.AutomationElementIdentifiers" />. 
                </summary>
    </member>
    <member name="T:System.Windows.Automation.DockPatternIdentifiers">
      <summary>
                    Contains values that are used as identifiers for <see cref="T:System.Windows.Automation.Provider.IDockProvider" />. 
                </summary>
    </member>
    <member name="F:System.Windows.Automation.DockPatternIdentifiers.DockPositionProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Automation.Provider.IDockProvider.DockPosition" /> property.
                </summary>
    </member>
    <member name="T:System.Windows.Automation.DockPosition">
      <summary>
                    Contains values that specify the dock position of an object within a docking container.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.DockPosition.Top">
      <summary>
                    Indicates that the UI Automation element is docked along the top edge of the docking container. 
                </summary>
    </member>
    <member name="F:System.Windows.Automation.DockPosition.Left">
      <summary>
                    Indicates that the UI Automation element is docked along the left edge of the docking container. 
                </summary>
    </member>
    <member name="F:System.Windows.Automation.DockPosition.Bottom">
      <summary>
                    Indicates that the UI Automation element is docked along the bottom edge of the docking container. 
                </summary>
    </member>
    <member name="F:System.Windows.Automation.DockPosition.Right">
      <summary>
                    Indicates that the UI Automation element is docked along the right edge of the docking container. 
                </summary>
    </member>
    <member name="F:System.Windows.Automation.DockPosition.Fill">
      <summary>
                    Indicates that the UI Automation element is docked along all edges of the docking container and that is fills all available space within the container. 
                </summary>
    </member>
    <member name="F:System.Windows.Automation.DockPosition.None">
      <summary>
                    Indicates that the UI Automation element is not docked to any edge of the docking container. 
                </summary>
    </member>
    <member name="T:System.Windows.Automation.ElementNotAvailableException">
      <summary>
                    The exception that is thrown when an attempt is made to access an UI Automation element corresponding to a part of the user interface that is no longer available.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.ElementNotAvailableException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Automation.ElementNotAvailableException" /> class. 
                </summary>
    </member>
    <member name="T:System.Windows.Automation.ElementNotEnabledException">
      <summary>
                    The exception that is thrown when an attempt is made to manipulate a control that is not enabled. 
                </summary>
    </member>
    <member name="M:System.Windows.Automation.ElementNotEnabledException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Automation.ElementNotEnabledException" /> class. 
                </summary>
    </member>
    <member name="T:System.Windows.Automation.ExpandCollapsePatternIdentifiers">
      <summary>
                    Contains values that are used as identifiers by <see cref="T:System.Windows.Automation.Provider.IExpandCollapseProvider" />. 
                </summary>
    </member>
    <member name="F:System.Windows.Automation.ExpandCollapsePatternIdentifiers.ExpandCollapseStateProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Automation.Provider.IExpandCollapseProvider.ExpandCollapseState" /> property.
                </summary>
    </member>
    <member name="T:System.Windows.Automation.ExpandCollapseState">
      <summary>
                    Contains values that specify the <see cref="T:System.Windows.Automation.ExpandCollapseState" /> of a UI Automation element.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.ExpandCollapseState.Collapsed">
      <summary>
                    No child nodes, controls, or content of the UI Automation element are displayed. 
                </summary>
    </member>
    <member name="F:System.Windows.Automation.ExpandCollapseState.Expanded">
      <summary>
                    All child nodes, controls or content of the UI Automation element are displayed. 
                </summary>
    </member>
    <member name="F:System.Windows.Automation.ExpandCollapseState.PartiallyExpanded">
      <summary>
                    Some, but not all, child nodes, controls, or content of the UI Automation element are displayed. 
                </summary>
    </member>
    <member name="F:System.Windows.Automation.ExpandCollapseState.LeafNode">
      <summary>
                    The UI Automation element has no child nodes, controls, or content to display. 
                </summary>
    </member>
    <member name="T:System.Windows.Automation.GridItemPatternIdentifiers">
      <summary>
                    Contains values that are used as identifiers by <see cref="T:System.Windows.Automation.Provider.IGridItemProvider" />.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.GridItemPatternIdentifiers.ColumnProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Automation.Provider.IGridItemProvider.Column" /> property.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.GridItemPatternIdentifiers.ColumnSpanProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Automation.Provider.IGridItemProvider.ColumnSpan" /> property.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.GridItemPatternIdentifiers.ContainingGridProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Automation.Provider.IGridItemProvider.ContainingGrid" /> property.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.GridItemPatternIdentifiers.RowProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Automation.Provider.IGridItemProvider.Row" /> property.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.GridItemPatternIdentifiers.RowSpanProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Automation.Provider.IGridItemProvider.RowSpan" /> property.
                </summary>
    </member>
    <member name="T:System.Windows.Automation.GridPatternIdentifiers">
      <summary>
                    Contains values used as identifiers by <see cref="T:System.Windows.Automation.Provider.IGridProvider" />.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.GridPatternIdentifiers.ColumnCountProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Automation.Provider.IGridProvider.ColumnCount" /> property.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.GridPatternIdentifiers.RowCountProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Automation.Provider.IGridProvider.RowCount" /> property.
                </summary>
    </member>
    <member name="T:System.Windows.Automation.MultipleViewPatternIdentifiers">
      <summary>
                    Contains values that are used as identifiers by <see cref="T:System.Windows.Automation.Provider.IMultipleViewProvider" />.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.MultipleViewPatternIdentifiers.CurrentViewProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Automation.Provider.IMultipleViewProvider.CurrentView" /> property.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.MultipleViewPatternIdentifiers.SupportedViewsProperty">
      <summary>
                    Identifies the property that gets the control-specific collection of views.
                </summary>
    </member>
    <member name="T:System.Windows.Automation.RangeValuePatternIdentifiers">
      <summary>
                    Contains values that are used as identifiers for <see cref="T:System.Windows.Automation.Provider.IRangeValueProvider" />.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.RangeValuePatternIdentifiers.IsReadOnlyProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.IsReadOnly" /> property.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.RangeValuePatternIdentifiers.LargeChangeProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.LargeChange" /> property.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.RangeValuePatternIdentifiers.MaximumProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Maximum" /> property.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.RangeValuePatternIdentifiers.MinimumProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Minimum" /> property.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.RangeValuePatternIdentifiers.SmallChangeProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.SmallChange" /> property.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.RangeValuePatternIdentifiers.ValueProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Value" /> property.
                </summary>
    </member>
    <member name="T:System.Windows.Automation.RowOrColumnMajor">
      <summary>
                    Specifies whether data in a table should be read primarily by row or by column.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.RowOrColumnMajor.RowMajor">
      <summary>
                    Data in the table should be read row by row. 
                </summary>
    </member>
    <member name="F:System.Windows.Automation.RowOrColumnMajor.ColumnMajor">
      <summary>
                    Data in the table should be read column by column. 
                </summary>
    </member>
    <member name="F:System.Windows.Automation.RowOrColumnMajor.Indeterminate">
      <summary>
                    The best way to present the data is indeterminate.
                </summary>
    </member>
    <member name="T:System.Windows.Automation.ScrollAmount">
      <summary>
                    Contains values that are used by the ScrollPattern control pattern to indicate the direction and distance to scroll.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollAmount.LargeDecrement">
      <summary>
                    Specifies that scrolling is performed in large decrements, which is equivalent to pressing the PAGE UP key or to clicking a blank part of a scrollbar. If the distance represented by the PAGE UP key is not a relevant amount for the control, or if no scrollbar exists, the value represents an amount equal to the size of the currently visible window.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollAmount.SmallDecrement">
      <summary>
                    Specifies that scrolling is performed in small decrements, which is equivalent to pressing an arrow key or to clicking the arrow button on a scrollbar. 
                </summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollAmount.NoAmount">
      <summary>
                    Specifies that scrolling should not be performed.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollAmount.LargeIncrement">
      <summary>
                    Specifies that scrolling is performed in large increments, which is equivalent to pressing the PAGE DOWN key or to clicking a blank part of a scrollbar. If the distance represented by the PAGE DOWN key is not a relevant amount for the control, or if no scrollbar exists, the value represents an amount equal to the size of the currently visible region.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollAmount.SmallIncrement">
      <summary>
                    Specifies that scrolling is performed in small increments, which equivalent to pressing an arrow key or to clicking the arrow button on a scrollbar. 
                </summary>
    </member>
    <member name="T:System.Windows.Automation.ScrollPatternIdentifiers">
      <summary>
                    Contains values that are used as identifiers for <see cref="T:System.Windows.Automation.Provider.IScrollProvider" />.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollPatternIdentifiers.HorizontallyScrollableProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Automation.Provider.IScrollProvider.HorizontallyScrollable" /> property.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollPatternIdentifiers.HorizontalScrollPercentProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Automation.Provider.IScrollProvider.HorizontalScrollPercent" /> property.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollPatternIdentifiers.HorizontalViewSizeProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Automation.Provider.IScrollProvider.HorizontalViewSize" /> property.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollPatternIdentifiers.NoScroll">
      <summary>
                    Specifies that scrolling should not be performed.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollPatternIdentifiers.VerticallyScrollableProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Automation.Provider.IScrollProvider.VerticallyScrollable" /> property.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollPatternIdentifiers.VerticalScrollPercentProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Automation.Provider.IScrollProvider.VerticalScrollPercent" /> property.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollPatternIdentifiers.VerticalViewSizeProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Automation.Provider.IScrollProvider.VerticalViewSize" /> property.
                </summary>
    </member>
    <member name="T:System.Windows.Automation.SelectionItemPatternIdentifiers">
      <summary>
                    Contains values that are used as identifiers by <see cref="T:System.Windows.Automation.Provider.ISelectionItemProvider" />.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.SelectionItemPatternIdentifiers.IsSelectedProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Automation.Provider.ISelectionItemProvider.IsSelected" /> property.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.SelectionItemPatternIdentifiers.SelectionContainerProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Automation.Provider.ISelectionItemProvider.SelectionContainer" /> property.
                </summary>
    </member>
    <member name="T:System.Windows.Automation.SelectionPatternIdentifiers">
      <summary>
                    Contains values that are used as identifiers for <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" />.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.SelectionPatternIdentifiers.CanSelectMultipleProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Automation.Provider.ISelectionProvider.CanSelectMultiple" /> property.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.SelectionPatternIdentifiers.IsSelectionRequiredProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Automation.Provider.ISelectionProvider.IsSelectionRequired" /> property.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.SelectionPatternIdentifiers.SelectionProperty">
      <summary>
                    Identifies the property that gets the selected items in a container.
                </summary>
    </member>
    <member name="T:System.Windows.Automation.TableItemPatternIdentifiers">
      <summary>
                    Contains values used as identifiers for <see cref="T:System.Windows.Automation.Provider.ITableProvider" />.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.TableItemPatternIdentifiers.ColumnHeaderItemsProperty">
      <summary>
                    Identifies the property that retrieves all the column headers associated with a table item or cell.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.TableItemPatternIdentifiers.RowHeaderItemsProperty">
      <summary>
                    Identifies the property that retrieves all the row headers associated with a table item or cell.
                </summary>
    </member>
    <member name="T:System.Windows.Automation.TablePatternIdentifiers">
      <summary>
                    Contains values used as identifiers for <see cref="T:System.Windows.Automation.Provider.ITableProvider" />.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.TablePatternIdentifiers.ColumnHeadersProperty">
      <summary>
                    Identifies the property that calls the <see cref="M:System.Windows.Automation.Provider.ITableProvider.GetColumnHeaders" /> method.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.TablePatternIdentifiers.RowHeadersProperty">
      <summary>
                    Identifies the property that calls the <see cref="M:System.Windows.Automation.Provider.ITableProvider.GetRowHeaders" /> method.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.TablePatternIdentifiers.RowOrColumnMajorProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Automation.Provider.ITableProvider.RowOrColumnMajor" /> property.
                </summary>
    </member>
    <member name="T:System.Windows.Automation.TogglePatternIdentifiers">
      <summary>
                    Contains values used as identifiers by <see cref="T:System.Windows.Automation.Provider.IToggleProvider" />. 
                </summary>
    </member>
    <member name="F:System.Windows.Automation.TogglePatternIdentifiers.ToggleStateProperty">
      <summary>
                    Identifies the <see cref="T:System.Windows.Automation.ToggleState" /> of the UI Automation element.
                </summary>
    </member>
    <member name="T:System.Windows.Automation.ToggleState">
      <summary>
                    Contains values that specify the <see cref="T:System.Windows.Automation.ToggleState" /> of a UI Automation element.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.ToggleState.Off">
      <summary>
                    The UI Automation element is not selected, checked, marked, or otherwise activated.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.ToggleState.On">
      <summary>
                    The UI Automation element is selected, checked, marked, or otherwise activated.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.ToggleState.Indeterminate">
      <summary>
                    The UI Automation element is in an indeterminate state.
                </summary>
    </member>
    <member name="T:System.Windows.Automation.TransformPatternIdentifiers">
      <summary>
                    Contains values used as identifiers for <see cref="T:System.Windows.Automation.Provider.ITransformProvider" />.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.TransformPatternIdentifiers.CanMoveProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Automation.Provider.ITransformProvider.CanMove" /> property.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.TransformPatternIdentifiers.CanResizeProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Automation.Provider.ITransformProvider.CanResize" /> property.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.TransformPatternIdentifiers.CanRotateProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Automation.Provider.ITransformProvider.CanRotate" /> property.
                </summary>
    </member>
    <member name="T:System.Windows.Automation.ValuePatternIdentifiers">
      <summary>
                    Contains values used as identifiers for <see cref="T:System.Windows.Automation.Provider.IValueProvider" />.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.ValuePatternIdentifiers.IsReadOnlyProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Automation.Provider.IValueProvider.IsReadOnly" /> property.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.ValuePatternIdentifiers.ValueProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Automation.Provider.IValueProvider.Value" /> property.
                </summary>
    </member>
    <member name="T:System.Windows.Automation.WindowInteractionState">
      <summary>
                    Defines values that specify the current state of the window for purposes of user or programmatic interaction.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.WindowInteractionState.Running">
      <summary>
                    The window is running. This does not guarantee that the window is responding or ready for user interaction.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.WindowInteractionState.Closing">
      <summary>
                    The window is closing. 
                </summary>
    </member>
    <member name="F:System.Windows.Automation.WindowInteractionState.ReadyForUserInteraction">
      <summary>
                    The window is ready for user interaction.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.WindowInteractionState.BlockedByModalWindow">
      <summary>
                    The window is blocked by a modal window. 
                </summary>
    </member>
    <member name="F:System.Windows.Automation.WindowInteractionState.NotResponding">
      <summary>
                    The window is not responding. 
                </summary>
    </member>
    <member name="T:System.Windows.Automation.WindowPatternIdentifiers">
      <summary>
                    Contains values that are used as identifiers by <see cref="T:System.Windows.Automation.Provider.IWindowProvider" />. 
                </summary>
    </member>
    <member name="F:System.Windows.Automation.WindowPatternIdentifiers.CanMaximizeProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Automation.Provider.IWindowProvider.Maximizable" /> property.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.WindowPatternIdentifiers.CanMinimizeProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Automation.Provider.IWindowProvider.Minimizable" /> property.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.WindowPatternIdentifiers.IsModalProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Automation.Provider.IWindowProvider.IsModal" /> property.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.WindowPatternIdentifiers.IsTopmostProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Automation.Provider.IWindowProvider.IsTopmost" /> property.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.WindowPatternIdentifiers.WindowInteractionStateProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Automation.Provider.IWindowProvider.InteractionState" /> property.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.WindowPatternIdentifiers.WindowVisualStateProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Automation.Provider.IWindowProvider.VisualState" /> property.
                </summary>
    </member>
    <member name="T:System.Windows.Automation.WindowVisualState">
      <summary>
                    Contains values that specify the visual state of a window.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.WindowVisualState.Normal">
      <summary>
                    Specifies that the window is normal (restored). 
                </summary>
    </member>
    <member name="F:System.Windows.Automation.WindowVisualState.Maximized">
      <summary>
                    Specifies that the window is maximized. 
                </summary>
    </member>
    <member name="F:System.Windows.Automation.WindowVisualState.Minimized">
      <summary>
                    Specifies that the window is minimized.
                </summary>
    </member>
    <member name="T:System.Windows.Automation.Peers.AutomationControlType">
      <summary>
                    Specifies the control type that is exposed to the UI Automation client.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Button">
      <summary>
                    A button control.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Calendar">
      <summary>
                    A calendar control, such as a date picker.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.CheckBox">
      <summary>
                    A check box control.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.ComboBox">
      <summary>
                    A combo box control.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Edit">
      <summary>
                    An edit control, such as a text box.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Hyperlink">
      <summary>
                    A hyperlink control.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Image">
      <summary>
                    An image control.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.ListItem">
      <summary>
                    A list item control, which is a child item of a list control.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.List">
      <summary>
                    A list control, such as a list box.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Menu">
      <summary>
                    A menu control, such as a top-level menu in an application window.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.MenuBar">
      <summary>
                    A menu bar control, which generally contains a set of top-level menus.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.MenuItem">
      <summary>
                    A menu item control.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.ProgressBar">
      <summary>
                    A progress bar control, which visually indicates the progress of a lengthy operation.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.RadioButton">
      <summary>
                    A radio button control, which is a selection mechanism allowing exactly one selected item in a group.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.ScrollBar">
      <summary>
                    A scroll bar control, such as a scroll bar in an application window.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Slider">
      <summary>
                    A slider control.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Spinner">
      <summary>
                    A spinner control.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.StatusBar">
      <summary>
                    A status bar control.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Tab">
      <summary>
                    A tab control.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.TabItem">
      <summary>
                    A tab item control, which represents a page of a tab control.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Text">
      <summary>
                    An edit control, such as a text box or rich text box.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.ToolBar">
      <summary>
                    A toolbar, such as the control that contains a set of command buttons in an application window.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.ToolTip">
      <summary>
                    A tooltip control, an informational window that appears as a result of moving the pointer over a control or sometimes when tabbing to a control using the keyboard.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Tree">
      <summary>
                    A tree control.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.TreeItem">
      <summary>
                    A node in a tree control.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Custom">
      <summary>
                    A control that is not one of the defined control types.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Group">
      <summary>
                    A group control, which acts as a container for other controls.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Thumb">
      <summary>
                    The control in a scrollbar that can be dragged to a different position.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.DataGrid">
      <summary>
                    A data grid control.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.DataItem">
      <summary>
                    A data item control.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Document">
      <summary>
                    A document control.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.SplitButton">
      <summary>
                    A split button, which is a button that performs a default action and can also expand to a list of other possible actions.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Window">
      <summary>
                    A window frame, which contains child objects.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Pane">
      <summary>
                    A pane control.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Header">
      <summary>
                    A header control, which is a container for the labels of rows and columns of information.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.HeaderItem">
      <summary>
                    A header item, which is the label for a row or column of information.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Table">
      <summary>
                    A table.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.TitleBar">
      <summary>
                    The caption bar on a window.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Separator">
      <summary>
                    A separator, which creates a visual division in controls such as menus and toolbars.
                </summary>
    </member>
    <member name="T:System.Windows.Automation.Peers.AutomationEvents">
      <summary>
                    Specifies the event that is raised by the element through the associated <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.ToolTipOpened">
      <summary>
                    The event that is raised when a tooltip is opened.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.ToolTipClosed">
      <summary>
                    The event that is raised when a tooltip is closed.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.MenuOpened">
      <summary>
                    The event that is raised when a menu is opened.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.MenuClosed">
      <summary>
                    The event that is raised when a menu is closed.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.AutomationFocusChanged">
      <summary>
                    The event that is raised when the focus has changed.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.InvokePatternOnInvoked">
      <summary>
                    The event that is raised when a control is activated.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.SelectionItemPatternOnElementAddedToSelection">
      <summary>
                    The event that is raised when an item is added to a collection of selected items.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.SelectionItemPatternOnElementRemovedFromSelection">
      <summary>
                    The event that is raised when an item is removed from a collection of selected items.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.SelectionItemPatternOnElementSelected">
      <summary>
                    The event that is raised when a single item is selected (which clears any previous selection).
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.SelectionPatternOnInvalidated">
      <summary>
                    The event that is raised when a selection in a container has changed significantly and requires sending more than twenty addition and removal events.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.TextPatternOnTextSelectionChanged">
      <summary>
                    The event that is raised when the text selection is modified.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.TextPatternOnTextChanged">
      <summary>
                    The event that is raised when textual content is modified.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.AsyncContentLoaded">
      <summary>
                    The event that is raised when content is loaded asynchronously.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.PropertyChanged">
      <summary>
                    The event that is raised when a property has changed.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.StructureChanged">
      <summary>
                    The event that is raised when the UI Automation tree structure is changed.
                </summary>
    </member>
    <member name="T:System.Windows.Automation.Peers.AutomationOrientation">
      <summary>
                    Specifies the direction in which a control can be laid out. 
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationOrientation.None">
      <summary>
                    The control does not have an orientation. An example of a control that has no orientation is a <see cref="T:System.Windows.Controls.Button" /> control.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationOrientation.Horizontal">
      <summary>
                    The control is laid out horizontally.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationOrientation.Vertical">
      <summary>
                    The control is laid out horizontally.
                </summary>
    </member>
    <member name="T:System.Windows.Automation.Peers.AutomationPeer">
      <summary>
                    Provides a base class that exposes an element to UI Automation. 
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.#ctor">
      <summary>
                    Provides initialization for base class values when they are called by the constructor of a derived class.
                </summary>
    </member>
    <member name="P:System.Windows.Automation.Peers.AutomationPeer.EventsSource">
      <summary>
                    Gets or sets an <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> that is reported to the automation client as a source for all the events that come from this <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />.
                </summary>
      <returns>
                    The <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> that is the source of events.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetAcceleratorKey">
      <summary>
                    Gets the accelerator key combinations for the element that is associated with the UI Automation peer. 
                </summary>
      <returns>
                    The accelerator key.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetAcceleratorKeyCore">
      <summary>
                    When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAcceleratorKey" />.
                </summary>
      <returns>
                    The accelerator key.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetAccessKey">
      <summary>
                    Gets the access key for the element that is associated with the automation peer.
                </summary>
      <returns>
                    The access key.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetAccessKeyCore">
      <summary>
                    When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAccessKey" />.
                </summary>
      <returns>
                    The access key.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType">
      <summary>
                    Gets the control type for the element that is associated with the UI Automation peer.
                </summary>
      <returns>
                    The control type.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlTypeCore">
      <summary>
                    When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.
                </summary>
      <returns>
                    The control type.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationId">
      <summary>
                    Gets the <see cref="P:System.Windows.Automation.AutomationProperties.AutomationId" /> of the element that is associated with the automation peer.
                </summary>
      <returns>
                    The identifier.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationIdCore">
      <summary>
                    When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationId" />.
                </summary>
      <returns>
                    The identifier.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetBoundingRectangle">
      <summary>
                    Gets the <see cref="T:System.Windows.Rect" /> object that represents the screen coordinates of the element that is associated with the automation peer.
                </summary>
      <returns>
                    The bounding rectangle.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetBoundingRectangleCore">
      <summary>
                    When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetBoundingRectangle" />.
                </summary>
      <returns>
                    The bounding rectangle.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetChildren">
      <summary>
                    Gets the collection of <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetChildren" /> elements that are represented in the UI Automation tree as immediate child elements of the automation peer.
                </summary>
      <returns>
                    The collection of child elements.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetChildrenCore">
      <summary>
                    When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetChildren" />.
                </summary>
      <returns>
                    The collection of child elements.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName">
      <summary>
                    Gets a name that is used with <see cref="T:System.Windows.Automation.Peers.AutomationControlType" />, to differentiate the control that is represented by this <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />. 
                </summary>
      <returns>
                    The class name. 
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetClassNameCore">
      <summary>
                    When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.
                </summary>
      <returns>
                    The class name.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetClickablePoint">
      <summary>
                    Gets a <see cref="T:System.Windows.Point" /> on the element that is associated with the automation peer that responds to a mouse click. 
                </summary>
      <returns>
                    A point in the clickable area of the element.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetClickablePointCore">
      <summary>
                    When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClickablePoint" />.
                </summary>
      <returns>
                    A point within the clickable area of the element.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetHelpText">
      <summary>
                    Gets text that describes the functionality of the control that is associated with the automation peer. 
                </summary>
      <returns>
                    The help text.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetHelpTextCore">
      <summary>
                    When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetHelpText" />.
                </summary>
      <returns>
                    The help text.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetItemStatus">
      <summary>
                    Gets text that conveys the visual status of the element that is associated with this automation peer. 
                </summary>
      <returns>
                    The status.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetItemStatusCore">
      <summary>
                    When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetItemStatus" />.
                </summary>
      <returns>
                    The status.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetItemType">
      <summary>
                    Gets a string that describes what kind of item an object represents. 
                </summary>
      <returns>
                    The kind of item.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetItemTypeCore">
      <summary>
                    When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetItemType" />.
                </summary>
      <returns>
                    The kind of item.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetLabeledBy">
      <summary>
                    Gets the <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> for the <see cref="T:System.Windows.UIElement" /> that is targeted to the element. 
                </summary>
      <returns>
                    The <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> for the element that is targeted by the <see cref="T:System.Windows.UIElement" />.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetLabeledByCore">
      <summary>
                    When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetLabeledBy" />.
                </summary>
      <returns>
                    The <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> for the element that is targeted by the <see cref="T:System.Windows.UIElement" />.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetLocalizedControlType">
      <summary>
                    Gets a localized string that represents the <see cref="T:System.Windows.Automation.Peers.AutomationControlType" /> value for the control that is associated with this automation peer.
                </summary>
      <returns>
                    The type of the control.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetLocalizedControlTypeCore">
      <summary>
                    When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetLocalizedControlType" />.
                </summary>
      <returns>
                    The type of the control.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetName">
      <summary>
                    Gets text that describes the element that is associated with this automation peer.
                </summary>
      <returns>
                    The name.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetNameCore">
      <summary>
                    When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName" />.
                </summary>
      <returns>
                    The name.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetOrientation">
      <summary>
                    Gets a value that indicates the explicit control orientation, if any.
                </summary>
      <returns>
                    The orientation of the control.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetOrientationCore">
      <summary>
                    When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetOrientation" />.
                </summary>
      <returns>
                    The orientation of the control.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetParent">
      <summary>
                    Gets the <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> that is the parent of this <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />.
                </summary>
      <returns>
                    The parent automation peer.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>
                    When overridden in a derived class, gets the control pattern that is associated with the specified <see cref="T:System.Windows.Automation.Peers.PatternInterface" />.
                </summary>
      <returns>
                    The object that implements the pattern interface; null if this peer does not support this interface.
                </returns>
      <param name="patternInterface">
                    A value from the <see cref="T:System.Windows.Automation.Peers.PatternInterface" /> enumeration.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.HasKeyboardFocus">
      <summary>
                    Gets a value that indicates whether the element that is associated with this automation peer currently has keyboard focus.
                </summary>
      <returns>true if the element has keyboard focus; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.HasKeyboardFocusCore">
      <summary>
                    When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.HasKeyboardFocus" />.
                </summary>
      <returns>true if the element has keyboard focus; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.InvalidatePeer">
      <summary>
                    Triggers recalculation of the main properties of the <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> and raises the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> notification to the automation client if the properties have changed. 
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsContentElement">
      <summary>
                    Gets a value that indicates whether the element that is associated with this automation peer contains data that is presented to the user.
                </summary>
      <returns>true if the element is a content element; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsContentElementCore">
      <summary>
                    When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsContentElement" />.
                </summary>
      <returns>true if the element is a content element; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsControlElement">
      <summary>
                    Gets a value that indicates whether the element is understood by the user as interactive or as contributing to the logical structure of the control in the GUI.
                </summary>
      <returns>true if the element is a control; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsControlElementCore">
      <summary>
                    When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsControlElement" />.
                </summary>
      <returns>true if the element is a control; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsEnabled">
      <summary>
                    Gets a value that indicates whether the element associated with this automation peer supports interaction.
                </summary>
      <returns>true if the element supports interaction; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsEnabledCore">
      <summary>
                    When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsEnabled" />.
                </summary>
      <returns>true if the automation peer can receive and send events; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsKeyboardFocusable">
      <summary>
                    Gets a value that indicates whether the element can accept keyboard focus.
                </summary>
      <returns>true if the element can accept keyboard focus; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsKeyboardFocusableCore">
      <summary>
                    When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsKeyboardFocusable" />.
                </summary>
      <returns>true if the element can accept keyboard focus; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsOffscreen">
      <summary>
                    Gets a value that indicates whether an element is off the screen.
                </summary>
      <returns>true if the element is not on the screen; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsOffscreenCore">
      <summary>
                    When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsOffscreen" />.
                </summary>
      <returns>true if the element is not on the screen; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsPassword">
      <summary>
                    Gets a value that indicates whether the element contains sensitive content.
                </summary>
      <returns>true if the element contains sensitive content such as a password; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsPasswordCore">
      <summary>
                    When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsPassword" />.
                </summary>
      <returns>true if the element contains sensitive content; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsRequiredForForm">
      <summary>
                    Gets a value that indicates whether the element that is associated with this peer must be completed on a form.
                </summary>
      <returns>true if the element must be completed; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsRequiredForFormCore">
      <summary>
                    When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsRequiredForForm" />.
                </summary>
      <returns>true if the element must be completed; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.ListenerExists(System.Windows.Automation.Peers.AutomationEvents)">
      <summary>
                    Gets a value that indicates whether UI Automation is listening for the specified event. 
                </summary>
      <returns>true if UI Automation is listening for the event; otherwise, false.
                </returns>
      <param name="eventId">
                    One of the enumeration values.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.PeerFromProvider(System.Windows.Automation.Provider.IRawElementProviderSimple)">
      <summary>
                    Gets an <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> for the specified <see cref="T:System.Windows.Automation.Provider.IRawElementProviderSimple" /> proxy.
                </summary>
      <returns>
                    The <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />.
                </returns>
      <param name="provider">
                    The class that implements <see cref="T:System.Windows.Automation.Provider.IRawElementProviderSimple" />.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.ProviderFromPeer(System.Windows.Automation.Peers.AutomationPeer)">
      <summary>
                    Gets the <see cref="T:System.Windows.Automation.Provider.IRawElementProviderSimple" /> proxy for the specified <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />.
                </summary>
      <returns>
                    The proxy.
                </returns>
      <param name="peer">
                    The automation peer.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.RaiseAutomationEvent(System.Windows.Automation.Peers.AutomationEvents)">
      <summary>
                    Raises an automation event.
                </summary>
      <param name="eventId">
                    The event identifier.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.RaisePropertyChangedEvent(System.Windows.Automation.AutomationProperty,System.Object,System.Object)">
      <summary>
                    Raises an event to notify the automation client of a changed property value.
                </summary>
      <param name="property">
                    The property that changed.
                </param>
      <param name="oldValue">
                    The previous value of the property.
                </param>
      <param name="newValue">
                    The new value of the property.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.SetFocus">
      <summary>
                    Sets the keyboard focus on the element that is associated with this automation peer.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.SetFocusCore">
      <summary>
                    When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.SetFocus" />.
                </summary>
    </member>
    <member name="T:System.Windows.Automation.Peers.ButtonAutomationPeer">
      <summary>
                    Exposes <see cref="T:System.Windows.Controls.Button" /> types to UI Automation.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.ButtonAutomationPeer.#ctor(System.Windows.Controls.Button)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.ButtonAutomationPeer" /> class.
                </summary>
      <param name="owner">
                    The element associated with this automation peer.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ButtonAutomationPeer.GetAutomationControlTypeCore">
      <summary>
                    Gets the control type for the <see cref="T:System.Windows.Controls.Button" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ButtonAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.
                </summary>
      <returns>
                    The <see cref="F:System.Windows.Automation.Peers.AutomationControlType.Button" /> enumeration value.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ButtonAutomationPeer.GetClassNameCore">
      <summary>
                    Gets the name of the control that is associated with this UI Automation peer.
                </summary>
      <returns>
                    A string that contains "Button".
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ButtonAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>
                    Gets the object that supports the specified control pattern of the element that is associated with this automation peer.
                </summary>
      <returns>
                    The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.
                </returns>
      <param name="patternInterface">
                    One of the enumeration values.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ButtonAutomationPeer.System#Windows#Automation#Provider#IInvokeProvider#Invoke">
      <summary>
                    For a description of this member, see <see cref="M:System.Windows.Automation.Provider.IInvokeProvider.Invoke" />.
                </summary>
    </member>
    <member name="T:System.Windows.Automation.Peers.ButtonBaseAutomationPeer">
      <summary>
                    Represents a base class for exposing elements derived from <see cref="T:System.Windows.Controls.Primitives.ButtonBase" /> to UI Automation.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.ButtonBaseAutomationPeer.#ctor(System.Windows.Controls.Primitives.ButtonBase)">
      <summary>
                    Provides initialization for base class values when called by the constructor of a derived class.
                </summary>
      <param name="owner">
                    The <see cref="T:System.Windows.Controls.Primitives.ButtonBase" /> to associate with this peer.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ButtonBaseAutomationPeer.GetNameCore">
      <summary>
                    Gets the name of the class of the element associated with this <see cref="T:System.Windows.Automation.Peers.ButtonBaseAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName" />.
                </summary>
      <returns>
                    A string that contains the class name, minus the accelerator key.
                </returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.CheckBoxAutomationPeer">
      <summary>
                    Exposes <see cref="T:System.Windows.Controls.CheckBox" /> types to UI Automation.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.CheckBoxAutomationPeer.#ctor(System.Windows.Controls.CheckBox)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.CheckBoxAutomationPeer" /> class.
                </summary>
      <param name="owner">
                    The <see cref="T:System.Windows.Controls.CheckBox" /> to associate with this <see cref="T:System.Windows.Automation.Peers.CheckBoxAutomationPeer" />.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.CheckBoxAutomationPeer.GetAutomationControlTypeCore">
      <summary>
                    Gets the <see cref="T:System.Windows.Automation.Peers.AutomationControlType" /> for the element associated with this <see cref="T:System.Windows.Automation.Peers.CheckBoxAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.
                </summary>
      <returns>
                    The <see cref="F:System.Windows.Automation.Peers.AutomationControlType.CheckBox" /> enumeration value.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.CheckBoxAutomationPeer.GetClassNameCore">
      <summary>
                    Gets the name of the element associated with this <see cref="T:System.Windows.Automation.Peers.CheckBoxAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.
                </summary>
      <returns>
                    A string that contains "CheckBox".
                </returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.ComboBoxAutomationPeer">
      <summary>
                    Exposes <see cref="T:System.Windows.Controls.ComboBox" /> types to UI Automation.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.ComboBoxAutomationPeer.#ctor(System.Windows.Controls.ComboBox)">
      <param name="owner"></param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ComboBoxAutomationPeer.GetAutomationControlTypeCore"></member>
    <member name="M:System.Windows.Automation.Peers.ComboBoxAutomationPeer.GetClassNameCore"></member>
    <member name="M:System.Windows.Automation.Peers.ComboBoxAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <param name="pattern"></param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ComboBoxAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#Collapse">
      <summary>
                    Hides all nodes, controls, or content that are descendants of the control.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.ComboBoxAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#Expand">
      <summary>
                    Displays all child nodes, controls, or content of the control.
                </summary>
    </member>
    <member name="P:System.Windows.Automation.Peers.ComboBoxAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#ExpandCollapseState">
      <summary>
                    Gets the state of the control (expanded or collapsed).
                </summary>
      <returns>
                    The state of the control.
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.ComboBoxAutomationPeer.System#Windows#Automation#Provider#IValueProvider#IsReadOnly">
      <summary>
                    Gets a value that indiates whether the value of the control is read-only.
                </summary>
      <returns>true if the control is read-only; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ComboBoxAutomationPeer.System#Windows#Automation#Provider#IValueProvider#SetValue(System.String)">
      <summary>
                    Sets the value of the control.
                </summary>
      <param name="value">
                    The value of the control.
                </param>
    </member>
    <member name="P:System.Windows.Automation.Peers.ComboBoxAutomationPeer.System#Windows#Automation#Provider#IValueProvider#Value">
      <summary>
                    Gets the value of the control.
                </summary>
      <returns>
                    The value of the control.
                </returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer">
      <summary>
                    Exposes <see cref="T:System.Windows.FrameworkElement" /> types to UI Automation.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.#ctor(System.Windows.FrameworkElement)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" /> class.
                </summary>
      <param name="owner">
                    The <see cref="T:System.Windows.FrameworkElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.CreatePeerForElement(System.Windows.UIElement)">
      <summary>
                    Creates a <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" /> for the specified <see cref="T:System.Windows.UIElement" />.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />.
                </returns>
      <param name="element">
                    The <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.FromElement(System.Windows.UIElement)">
      <summary>
                    Returns the <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" /> for the specified <see cref="T:System.Windows.UIElement" />.
                </summary>
      <returns>
                    The <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />, or null if the <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" /> was not created by the <see cref="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.CreatePeerForElement(System.Windows.UIElement)" /> method.
                </returns>
      <param name="element">
                    The <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetAcceleratorKeyCore">
      <summary>
                    Returns the accelerator key for the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAcceleratorKey" />.
                </summary>
      <returns>
                    The <see cref="P:System.Windows.Automation.AutomationProperties.AcceleratorKey" /> that is returned by <see cref="M:System.Windows.Automation.AutomationProperties.GetAcceleratorKey(System.Windows.DependencyObject)" />.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetAccessKeyCore">
      <summary>
                    Returns the access key for the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAccessKey" />.
                </summary>
      <returns>
                    The access key for the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetAutomationControlTypeCore">
      <summary>
                    Returns the control type for the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.
                </summary>
      <returns>
                    The <see cref="F:System.Windows.Automation.Peers.AutomationControlType.Custom" /> enumeration value.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetAutomationIdCore">
      <summary>
                    Gets the string that uniquely identifies the <see cref="T:System.Windows.FrameworkElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationId" />.
                </summary>
      <returns>
                    The automation identifier for the element associated with the <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />, or <see cref="F:System.String.Empty" /> if there is no automation identifier.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetBoundingRectangleCore">
      <summary>
                    Returns the <see cref="T:System.Windows.Rect" /> that represents the bounding rectangle of the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetBoundingRectangle" />.
                </summary>
      <returns>
                    The <see cref="T:System.Windows.Rect" /> that contains the coordinates of the element.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetChildrenCore">
      <summary>
                    Returns the collection of child elements of the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetChildren" />.
                </summary>
      <returns>
                    A list of child <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> elements.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetClassNameCore">
      <summary>
                    Returns the name of the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.
                </summary>
      <returns>
                    An <see cref="F:System.String.Empty" /> string.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetClickablePointCore">
      <summary>
                    Returns a <see cref="T:System.Windows.Point" /> that represents the clickable space that is on the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClickablePoint" />.
                </summary>
      <returns>
                    The <see cref="T:System.Windows.Point" /> on the element that allows a click.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetHelpTextCore">
      <summary>
                    Returns the string that describes the functionality of the <see cref="T:System.Windows.FrameworkElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetHelpText" />.
                </summary>
      <returns>
                    The help text, or <see cref="F:System.String.Empty" /> if there is no help text.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetItemStatusCore">
      <summary>
                    Returns a string that communicates the visual status of the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetItemStatus" />.
                </summary>
      <returns>
                    The string that contains the <see cref="P:System.Windows.Automation.AutomationProperties.ItemStatus" /> that is returned by <see cref="M:System.Windows.Automation.AutomationProperties.GetItemStatus(System.Windows.DependencyObject)" />.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetItemTypeCore">
      <summary>
                    Returns a human-readable string that contains the item type that the <see cref="T:System.Windows.UIElement" /> for this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" /> represents. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetItemType" />.
                </summary>
      <returns>
                    The string that contains the <see cref="P:System.Windows.Automation.AutomationProperties.ItemType" /> that is returned by <see cref="M:System.Windows.Automation.AutomationProperties.GetItemType(System.Windows.DependencyObject)" />. 
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetLabeledByCore">
      <summary>
                    Returns the <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> for the <see cref="T:System.Windows.UIElement" /> that targets the <see cref="T:System.Windows.FrameworkElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />.
                </summary>
      <returns>
                    The <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> for the element that is targeted by the <see cref="T:System.Windows.UIElement" />.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetLocalizedControlTypeCore">
      <summary>
                    Returns the localized version of the control type for the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />.
                </summary>
      <returns>
                    The string that contains the type of control.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetNameCore">
      <summary>
                    Returns the text label of the <see cref="T:System.Windows.FrameworkElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName" />.
                </summary>
      <returns>
                    The text label of the element that is associated with this automation peer.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetOrientationCore">
      <summary>
                    Returns a value that indicates whether the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" /> is laid out in a specific direction. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetOrientation" />.
                </summary>
      <returns>
                    The <see cref="F:System.Windows.Automation.Peers.AutomationOrientation.None" /> enumeration value.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>
                    Returns the control pattern for the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />.
                </summary>
      <returns>
                    Returns null in all cases.
                </returns>
      <param name="patternInterface">
                    One of the enumeration values.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.HasKeyboardFocusCore">
      <summary>
                    Returns a value that indicates whether the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" /> currently has keyboard input focus. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.HasKeyboardFocus" />.
                </summary>
      <returns>true if the element has keyboard input focus; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.IsContentElementCore">
      <summary>
                    Returns a value that indicates whether the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" /> is an element that contains data that is presented to the user. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsContentElement" />.
                </summary>
      <returns>true if the element contains data for the user to read; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.IsControlElementCore">
      <summary>
                    Returns a value that indicates whether the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" /> is understood by the end user as interactive. Optionally, the user might understand the <see cref="T:System.Windows.UIElement" /> as contributing to the logical structure of the control in the GUI. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsControlElement" />.
                </summary>
      <returns>true if the element is interactive; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.IsEnabledCore">
      <summary>
                    Returns a value that indicates whether the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" /> is enabled. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsEnabled" />.
                </summary>
      <returns>true if the element is enabled; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.IsKeyboardFocusableCore">
      <summary>
                    Returns a value that indicates whether the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" /> can accept keyboard focus. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsKeyboardFocusable" />.
                </summary>
      <returns>true if the element is focusable by the keyboard; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.IsOffscreenCore">
      <summary>
                    Returns a value that indicates whether the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" /> is off the screen. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsOffscreen" />.
                </summary>
      <returns>true if the element is not on the screen; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.IsPasswordCore">
      <summary>
                    Returns a value that indicates whether the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" /> contains protected content. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsPassword" />.
                </summary>
      <returns>false in all cases.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.IsRequiredForFormCore">
      <summary>
                    Returns a value that indicates whether the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" /> is required to be completed on a form. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsRequiredForForm" />.
                </summary>
      <returns>
                    The value that is returned by <see cref="M:System.Windows.Automation.AutomationProperties.GetIsRequiredForForm(System.Windows.DependencyObject)" />, if the value is set; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.Owner">
      <summary>
                    Gets the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />.
                </summary>
      <returns>
                    The <see cref="T:System.Windows.UIElement" />.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.SetFocusCore">
      <summary>
                    Sets the keyboard input focus on the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.SetFocus" />.
                </summary>
    </member>
    <member name="T:System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer">
      <summary>
                    Exposes <see cref="T:System.Windows.Controls.HyperlinkButton" /> types to UI Automation.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer.#ctor(System.Windows.Controls.HyperlinkButton)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer" /> class.
                </summary>
      <param name="owner">
                    The <see cref="T:System.Windows.Controls.HyperlinkButton" /> to associate with the <see cref="T:System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer" />.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer.GetAutomationControlTypeCore">
      <summary>
                    Gets the control type for the <see cref="T:System.Windows.Controls.HyperlinkButton" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.
                </summary>
      <returns>
                    The <see cref="F:System.Windows.Automation.Peers.AutomationControlType.Hyperlink" /> enumeration value.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer.GetClassNameCore">
      <summary>
                    Gets the name of the <see cref="T:System.Windows.Controls.HyperlinkButton" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.
                </summary>
      <returns>
                    A string that contains "Hyperlink".
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>
                    Gets the control pattern for the <see cref="T:System.Windows.Controls.HyperlinkButton" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer" />.
                </summary>
      <returns>
                    The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.
                </returns>
      <param name="patternInterface">
                    One of the enumeration values.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer.IsControlElementCore">
      <summary>
                    Gets a value that indicates whether the element that is associated with this automation peer is an element that contains data that is presented to the user.
                </summary>
      <returns>
                    Returns true.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer.System#Windows#Automation#Provider#IInvokeProvider#Invoke">
      <summary>
                    Sends a request to activate a control and initiate its single, unambiguous action.
                </summary>
    </member>
    <member name="T:System.Windows.Automation.Peers.ImageAutomationPeer">
      <summary>
                    Exposes <see cref="T:System.Windows.Controls.Image" /> types to UI Automation.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.ImageAutomationPeer.#ctor(System.Windows.Controls.Image)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.ImageAutomationPeer" /> class.
                </summary>
      <param name="owner">
                    The <see cref="T:System.Windows.Controls.Image" /> to associate with this <see cref="T:System.Windows.Automation.Peers.ImageAutomationPeer" />.
                </param>
    </member>
    <member name="T:System.Windows.Automation.Peers.ItemAutomationPeer">
      <summary>
                    Exposes a data item in an <see cref="P:System.Windows.Controls.ItemsControl.Items" /> collection to UI Automation. 
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.#ctor(System.Windows.UIElement)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" /> class.
                </summary>
      <param name="item">
                    The data item in the <see cref="P:System.Windows.Controls.ItemsControl.Items" /> collection that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" />.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.GetItemTypeCore">
      <summary>
                    Gets a human-readable string that contains the type of item that the specified <see cref="T:System.Windows.UIElement" /> represents. 
                </summary>
      <returns>
                    The item type. Examples are "Mail Message" and "Contact".
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.GetNameCore">
      <summary>
                    Gets the text label of the <see cref="T:System.Windows.UIElement" /> that corresponds to the data item in the <see cref="P:System.Windows.Controls.ItemsControl.Items" /> collection that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" />. 
                </summary>
      <returns>
                    The text label.
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.ItemAutomationPeer.Item">
      <summary>
                    Gets the data item in the <see cref="P:System.Windows.Controls.ItemsControl.Items" /> collection that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" />.
                </summary>
      <returns>
                    The data item.
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.ItemAutomationPeer.ItemsControlAutomationPeer">
      <summary>
                    Gets the <see cref="T:System.Windows.Automation.Peers.ItemsControlAutomationPeer" /> that is associated with the <see cref="T:System.Windows.Controls.ItemsControl" /> that holds the <see cref="P:System.Windows.Controls.ItemsControl.Items" /> collection.
                </summary>
      <returns>
                    The <see cref="T:System.Windows.Automation.Peers.ItemsControlAutomationPeer" />.
                </returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.ItemsControlAutomationPeer">
      <summary>
                    Exposes <see cref="T:System.Windows.Controls.ItemsControl" /> types to UI Automation. 
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemsControlAutomationPeer.#ctor(System.Windows.Controls.ItemsControl)">
      <summary>
                    Provides initialization for base class values when called by the constructor of a derived class.
                </summary>
      <param name="owner">
                    The <see cref="T:System.Windows.Controls.ItemsControl" /> to associate with this <see cref="T:System.Windows.Automation.Peers.ItemsControlAutomationPeer" />.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemsControlAutomationPeer.GetChildrenCore">
      <summary>
                    Gets the collection of child elements of the <see cref="T:System.Windows.Controls.ItemsControl" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemsControlAutomationPeer" />. 
                </summary>
      <returns>
                    The collection of child elements.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemsControlAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>
                    Gets a control pattern for the <see cref="T:System.Windows.Controls.ItemsControl" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemsControlAutomationPeer" />.
                </summary>
      <returns>
                    The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.
                </returns>
      <param name="patternInterface">
                    One of the enumeration values that indicates the control pattern.
                </param>
    </member>
    <member name="T:System.Windows.Automation.Peers.ListBoxAutomationPeer">
      <summary>
                    Exposes <see cref="T:System.Windows.Controls.ListBox" /> types to UI Automation.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.ListBoxAutomationPeer.#ctor(System.Windows.Controls.ListBox)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.ListBoxAutomationPeer" /> class.
                </summary>
      <param name="owner">
                    The <see cref="T:System.Windows.Controls.ListBox" /> to associate with the <see cref="T:System.Windows.Automation.Peers.ListBoxAutomationPeer" />.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ListBoxAutomationPeer.GetAutomationControlTypeCore">
      <summary>
                    Gets the control type for the <see cref="T:System.Windows.Controls.ListBox" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ListBoxAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.
                </summary>
      <returns>
                    The <see cref="F:System.Windows.Automation.Peers.AutomationControlType.List" /> enumeration value.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ListBoxAutomationPeer.GetClassNameCore">
      <summary>
                    Gets the name of the <see cref="T:System.Windows.Controls.ListBox" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ListBoxAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.
                </summary>
      <returns>
                    A string that contains "ListBox".
                </returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.ListBoxItemAutomationPeer">
      <summary>
                    Exposes the items in the <see cref="P:System.Windows.Controls.ItemsControl.Items" /> collection of a <see cref="T:System.Windows.Controls.ListBox" /> to UI Automation.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.ListBoxItemAutomationPeer.#ctor(System.Windows.Controls.ListBoxItem)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.ListBoxItemAutomationPeer" /> class.
                </summary>
      <param name="owner">
                    The <see cref="T:System.Windows.Controls.ListBoxItem" /> to associate with this <see cref="T:System.Windows.Automation.Peers.ListBoxItemAutomationPeer" />.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ListBoxItemAutomationPeer.GetAutomationControlTypeCore">
      <summary>
                    Gets the control type for the <see cref="T:System.Windows.Controls.ListBoxItem" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ListBoxItemAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.
                </summary>
      <returns>
                    The <see cref="F:System.Windows.Automation.Peers.AutomationControlType.ListItem" /> enumeration value.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ListBoxItemAutomationPeer.GetClassNameCore">
      <summary>
                    Gets the name of the <see cref="T:System.Windows.Controls.ListBoxItem" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ListBoxItemAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.
                </summary>
      <returns>
                    A string that contains "ListBoxItem".
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ListBoxItemAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>
                    Gets the control pattern for the <see cref="T:System.Windows.Controls.ListBoxItem" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ListBoxItemAutomationPeer" />.
                </summary>
      <returns>
                    The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.
                </returns>
      <param name="patternInterface">
                    One of the enumeration values.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ListBoxItemAutomationPeer.System#Windows#Automation#Provider#IScrollItemProvider#ScrollIntoView">
      <summary>
                    Scrolls the content area of a container object in order to display the control within the visible region (viewport) of the container.
                </summary>
    </member>
    <member name="T:System.Windows.Automation.Peers.MediaElementAutomationPeer">
      <summary>
                    Exposes <see cref="T:System.Windows.Controls.MediaElement" /> types to UI Automation.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.MediaElementAutomationPeer.#ctor(System.Windows.Controls.MediaElement)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.MediaElementAutomationPeer" /> class.
                </summary>
      <param name="owner">
                    The <see cref="T:System.Windows.Controls.MediaElement" /> to associate with the <see cref="T:System.Windows.Automation.Peers.MediaElementAutomationPeer" />.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.MediaElementAutomationPeer.GetAutomationControlTypeCore">
      <summary>
                    Gets the control type for the <see cref="T:System.Windows.Controls.MediaElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.MediaElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.
                </summary>
      <returns>
                    The <see cref="F:System.Windows.Automation.Peers.AutomationControlType.Custom" /> enumeration value.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.MediaElementAutomationPeer.GetClassNameCore">
      <summary>
                    Gets the name of the <see cref="T:System.Windows.Controls.MediaElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.MediaElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.
                </summary>
      <returns>
                    A string that contains "MediaElement".
                </returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.MultiScaleImageAutomationPeer">
      <summary>
                    Exposes <see cref="T:System.Windows.Controls.MultiScaleImage" /> types to UI Automation.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.MultiScaleImageAutomationPeer.#ctor(System.Windows.Controls.MultiScaleImage)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.MultiScaleImageAutomationPeer" /> class. 
                </summary>
      <param name="owner">
                    The <see cref="T:System.Windows.Controls.MultiScaleImage" /> to associate with the <see cref="T:System.Windows.Automation.Peers.MultiScaleImageAutomationPeer" />.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.MultiScaleImageAutomationPeer.GetAutomationControlTypeCore">
      <summary>
                    Gets the control type for the <see cref="T:System.Windows.Controls.MultiScaleImage" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.MultiScaleImageAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.
                </summary>
      <returns>
                    The <see cref="F:System.Windows.Automation.Peers.AutomationControlType.Custom" /> enumeration value.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.MultiScaleImageAutomationPeer.GetClassNameCore">
      <summary>
                    Gets the name of the <see cref="T:System.Windows.Controls.MultiScaleImage" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.MultiScaleImageAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.
                </summary>
      <returns>
                    A string that contains "MultiScaleImage".
                </returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.PasswordBoxAutomationPeer">
      <summary>
                    Exposes <see cref="T:System.Windows.Controls.PasswordBox" /> types to UI Automation.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.PasswordBoxAutomationPeer.#ctor(System.Windows.Controls.PasswordBox)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.PasswordBoxAutomationPeer" /> class.
                </summary>
      <param name="owner">
                    The <see cref="T:System.Windows.Controls.PasswordBox" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.PasswordBoxAutomationPeer" />.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.PasswordBoxAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>
                    Gets the control pattern for the <see cref="T:System.Windows.Controls.PasswordBox" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.PasswordBoxAutomationPeer" />.
                </summary>
      <returns>
                    The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.
                </returns>
      <param name="patternInterface">
                    One of the enumeration values.
                </param>
    </member>
    <member name="P:System.Windows.Automation.Peers.PasswordBoxAutomationPeer.System#Windows#Automation#Provider#IValueProvider#IsReadOnly">
      <summary>
                    Gets a value that specifies whether the value of a control is read-only.
                </summary>
      <returns>true if the value is read-only; false if it can be modified. 
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.PasswordBoxAutomationPeer.System#Windows#Automation#Provider#IValueProvider#SetValue(System.String)">
      <summary>
                    Sets the value of the control.
                </summary>
      <param name="value">
                    The value to set.
                </param>
    </member>
    <member name="P:System.Windows.Automation.Peers.PasswordBoxAutomationPeer.System#Windows#Automation#Provider#IValueProvider#Value">
      <summary>
                    Gets the value of the control. 
                </summary>
      <returns>
                    The value of the control as a string.
                </returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.PatternInterface">
      <summary>
                    Specifies the control pattern that the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)" /> method returns.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Invoke">
      <summary>
                    The <see cref="T:System.Windows.Automation.Provider.IInvokeProvider" /> control pattern interface.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Selection">
      <summary>
                    The <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" /> control pattern interface.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Value">
      <summary>
                    The <see cref="T:System.Windows.Automation.Provider.IValueProvider" /> control pattern interface.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.RangeValue">
      <summary>
                    The <see cref="T:System.Windows.Automation.Provider.IRangeValueProvider" /> control pattern interface.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Scroll">
      <summary>
                    The <see cref="T:System.Windows.Automation.Provider.IScrollProvider" /> control pattern interface.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.ScrollItem">
      <summary>
                    The <see cref="T:System.Windows.Automation.Provider.IScrollItemProvider" /> control pattern interface.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.ExpandCollapse">
      <summary>
                    The <see cref="T:System.Windows.Automation.Provider.IExpandCollapseProvider" /> control pattern interface.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Grid">
      <summary>
                    The <see cref="T:System.Windows.Automation.Provider.IGridProvider" /> control pattern interface.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.GridItem">
      <summary>
                    The <see cref="T:System.Windows.Automation.Provider.IGridItemProvider" /> control pattern interface.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.MultipleView">
      <summary>
                    The <see cref="T:System.Windows.Automation.Provider.IMultipleViewProvider" /> control pattern interface.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Window">
      <summary>
                    The <see cref="T:System.Windows.Automation.Provider.IWindowProvider" /> control pattern interface.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.SelectionItem">
      <summary>
                    The <see cref="T:System.Windows.Automation.Provider.ISelectionItemProvider" /> control pattern interface.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Dock">
      <summary>
                    The <see cref="T:System.Windows.Automation.Provider.IDockProvider" /> control pattern interface.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Table">
      <summary>
                    The <see cref="T:System.Windows.Automation.Provider.ITableProvider" /> control pattern interface.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.TableItem">
      <summary>
                    The <see cref="T:System.Windows.Automation.Provider.ITableItemProvider" /> control pattern interface.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Toggle">
      <summary>
                    The <see cref="T:System.Windows.Automation.Provider.IToggleProvider" /> control pattern interface.
                </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Transform">
      <summary>
                    The <see cref="T:System.Windows.Automation.Provider.ITransformProvider" /> control pattern interface.
                </summary>
    </member>
    <member name="T:System.Windows.Automation.Peers.ProgressBarAutomationPeer">
      <summary>
                    Exposes <see cref="T:System.Windows.Controls.ProgressBar" /> types to UI Automation.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.ProgressBarAutomationPeer.#ctor(System.Windows.Controls.ProgressBar)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.ProgressBarAutomationPeer" /> class.
                </summary>
      <param name="owner">
                    The <see cref="T:System.Windows.Controls.ProgressBar" /> to associate with the <see cref="T:System.Windows.Automation.Peers.ProgressBarAutomationPeer" />.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ProgressBarAutomationPeer.GetAutomationControlTypeCore">
      <summary>
                    Gets the control type for the <see cref="T:System.Windows.Controls.ProgressBar" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ProgressBarAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.
                </summary>
      <returns>
                    The <see cref="F:System.Windows.Automation.Peers.AutomationControlType.ProgressBar" /> enumeration value.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ProgressBarAutomationPeer.GetClassNameCore">
      <summary>
                    Gets the name of the <see cref="T:System.Windows.Controls.ProgressBar" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ProgressBarAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.
                </summary>
      <returns>
                    A string that contains "ProgressBar".
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ProgressBarAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>
                    Gets the control pattern for the <see cref="T:System.Windows.Controls.ProgressBar" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ProgressBarAutomationPeer" />.
                </summary>
      <returns>
                    The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.
                </returns>
      <param name="patternInterface">
                    One of the enumeration values.
                </param>
    </member>
    <member name="P:System.Windows.Automation.Peers.ProgressBarAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#IsReadOnly">
      <summary>
                    Gets a value that specifies whether the value of a control is read-only.
                </summary>
      <returns>true if the value is read-only; false if it can be modified. 
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.ProgressBarAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#LargeChange">
      <summary>
                    Gets the value that is added to or subtracted from the value property when a large change is made, such as with the PAGE DOWN key.
                </summary>
      <returns>
                    The large-change value supported by the control, or <see cref="F:System.Double.NaN" /> if this option is not supported. 
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ProgressBarAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#SetValue(System.Double)">
      <summary>
                    Sets the value of the control.
                </summary>
      <param name="val">
                    The value to set. 
                </param>
    </member>
    <member name="P:System.Windows.Automation.Peers.ProgressBarAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#SmallChange">
      <summary>
                    Gets the value that is added to or subtracted from the value property when a small change is made, such as with an arrow key.
                </summary>
      <returns>
                    The small-change value supported by the control, or <see cref="F:System.Double.NaN" /> if this option is not supported. 
                </returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.RadioButtonAutomationPeer">
      <summary>
                    Exposes <see cref="T:System.Windows.Controls.RadioButton" /> types to UI Automation.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.RadioButtonAutomationPeer.#ctor(System.Windows.Controls.RadioButton)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.RadioButtonAutomationPeer" /> class.
                </summary>
      <param name="owner">
                    The <see cref="T:System.Windows.Controls.RadioButton" /> to associate with the <see cref="T:System.Windows.Automation.Peers.RadioButtonAutomationPeer" />.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.RadioButtonAutomationPeer.GetAutomationControlTypeCore">
      <summary>
                    Gets the control type for the <see cref="T:System.Windows.Controls.RadioButton" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.RadioButtonAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.
                </summary>
      <returns>
                    The <see cref="F:System.Windows.Automation.Peers.AutomationControlType.RadioButton" /> enumeration value.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.RadioButtonAutomationPeer.GetClassNameCore">
      <summary>
                    Gets the name of the <see cref="T:System.Windows.Controls.RadioButton" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.RadioButtonAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.
                </summary>
      <returns>
                    A string that contains "RadioButton".
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.RadioButtonAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>
                    Gets the control pattern for the <see cref="T:System.Windows.Controls.RadioButton" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.RadioButtonAutomationPeer" />.
                </summary>
      <returns>
                    The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.
                </returns>
      <param name="patternInterface">
                    One of the enumeration values.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.RadioButtonAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#AddToSelection">
      <summary>
                    Adds the current element to the collection of selected items.
                </summary>
    </member>
    <member name="P:System.Windows.Automation.Peers.RadioButtonAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#IsSelected">
      <summary>
                    Gets a value that indicates whether an item is selected.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.RadioButtonAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#RemoveFromSelection">
      <summary>
                    Removes the current element from the collection of selected items.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.RadioButtonAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#Select">
      <summary>
                    Deselects any selected items and then selects the current element.
                </summary>
    </member>
    <member name="P:System.Windows.Automation.Peers.RadioButtonAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#SelectionContainer">
      <summary>
                    Gets the UI Automation provider that implements <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" /> and acts as the container for the calling object.
                </summary>
      <returns>
                    The provider that supports <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" />. 
                </returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.RangeBaseAutomationPeer">
      <summary>
                    Exposes <see cref="T:System.Windows.Controls.Primitives.RangeBase" /> types to UI Automation.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.RangeBaseAutomationPeer.#ctor(System.Windows.Controls.Primitives.RangeBase)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.RangeBaseAutomationPeer" /> class.
                </summary>
      <param name="owner">
                    The <see cref="T:System.Windows.Controls.Primitives.RangeBase" /> to associate with the <see cref="T:System.Windows.Automation.Peers.RangeBaseAutomationPeer" />.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.RangeBaseAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>
                    Gets the control pattern for the <see cref="T:System.Windows.Controls.Primitives.RangeBase" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.RangeBaseAutomationPeer" />.
                </summary>
      <returns>
                    The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.
                </returns>
      <param name="patternInterface">
                    One of the enumeration values.
                </param>
    </member>
    <member name="P:System.Windows.Automation.Peers.RangeBaseAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#IsReadOnly">
      <summary>
                    Gets a value that specifies whether the value of a control is read-only.
                </summary>
      <returns>true if the value is read-only; false if it can be modified. 
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.RangeBaseAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#LargeChange">
      <summary>
                    Gets the value that is added to or subtracted from the value when a large change is made, such as with the PAGE DOWN key.
                </summary>
      <returns>
                    The large-change value supported by the control.
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.RangeBaseAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#Maximum">
      <summary>
                    Gets the maximum range value supported by the control.
                </summary>
      <returns>
                    The maximum value supported by the control.
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.RangeBaseAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#Minimum">
      <summary>
                    Gets the minimum range value supported by the control.
                </summary>
      <returns>
                    The minimum value supported by the control.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.RangeBaseAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#SetValue(System.Double)">
      <summary>
                    Sets the value of the control.
                </summary>
      <param name="val">
                    The value to set. 
                </param>
    </member>
    <member name="P:System.Windows.Automation.Peers.RangeBaseAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#SmallChange">
      <summary>
                    Gets the value that is added to or subtracted from the value when a small change is made, such as with an arrow key.
                </summary>
      <returns>
                    The small-change value supported by the control.
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.RangeBaseAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#Value">
      <summary>
                    Gets the value of the control.
                </summary>
      <returns>
                    The value of the control.
                </returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.RepeatButtonAutomationPeer">
      <summary>
                    Exposes <see cref="T:System.Windows.Controls.Primitives.RepeatButton" /> types to UI Automation.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.RepeatButtonAutomationPeer.#ctor(System.Windows.Controls.Primitives.RepeatButton)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.RepeatButtonAutomationPeer" /> class.
                </summary>
      <param name="owner">
                    The <see cref="T:System.Windows.Controls.Primitives.RepeatButton" /> to associate with the <see cref="T:System.Windows.Automation.Peers.RepeatButtonAutomationPeer" />.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.RepeatButtonAutomationPeer.GetAutomationControlTypeCore">
      <summary>
                    Gets the control type for the <see cref="T:System.Windows.Controls.Primitives.RepeatButton" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.RepeatButtonAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.
                </summary>
      <returns>
                    The <see cref="F:System.Windows.Automation.Peers.AutomationControlType.Button" /> enumeration value.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.RepeatButtonAutomationPeer.GetClassNameCore">
      <summary>
                    Gets the name of the <see cref="T:System.Windows.Controls.Primitives.RepeatButton" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.RepeatButtonAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.
                </summary>
      <returns>
                    A string that contains "RepeatButton".
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.RepeatButtonAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>
                    Gets the control pattern for the <see cref="T:System.Windows.Controls.Primitives.RepeatButton" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.RepeatButtonAutomationPeer" />.
                </summary>
      <returns>
                    The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.
                </returns>
      <param name="patternInterface">
                    One of the enumeration values.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.RepeatButtonAutomationPeer.System#Windows#Automation#Provider#IInvokeProvider#Invoke">
      <summary>
                    Sends a request to activate a control and initiate its single, unambiguous action.
                </summary>
    </member>
    <member name="T:System.Windows.Automation.Peers.ScrollBarAutomationPeer">
      <summary>
                    Exposes <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> types to UI Automation.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.ScrollBarAutomationPeer.#ctor(System.Windows.Controls.Primitives.ScrollBar)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.ScrollBarAutomationPeer" /> class.
                </summary>
      <param name="owner">
                    The <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> to associate with the <see cref="T:System.Windows.Automation.Peers.ScrollBarAutomationPeer" />.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ScrollBarAutomationPeer.GetAutomationControlTypeCore">
      <summary>
                    Gets the control type for the <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ScrollBarAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.
                </summary>
      <returns>
                    The <see cref="F:System.Windows.Automation.Peers.AutomationControlType.ScrollBar" /> enumeration value.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ScrollBarAutomationPeer.GetClassNameCore">
      <summary>
                    Gets the name of the <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ScrollBarAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.
                </summary>
      <returns>
                    A string that contains "ScrollBar".
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ScrollBarAutomationPeer.GetClickablePointCore">
      <summary>
                    Gets a clickable point for this control.
                </summary>
      <returns>
                    A point that is clickable within the control, or a point with <see cref="F:System.Double.NaN" /> coordinates, if no point is clickable within the control.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ScrollBarAutomationPeer.GetOrientationCore">
      <summary>
                    Gets the orientation of the <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> control associated with this peer.
                </summary>
      <returns>
                    Orientation of the scroll bar.
                </returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.ScrollViewerAutomationPeer">
      <summary>
                    Exposes <see cref="T:System.Windows.Controls.ScrollViewer" /> types to UI Automation.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.ScrollViewerAutomationPeer.#ctor(System.Windows.Controls.ScrollViewer)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.ScrollViewerAutomationPeer" /> class.
                </summary>
      <param name="owner">
                    The <see cref="T:System.Windows.Controls.ScrollViewer" /> object that is associated with this <see cref="T:System.Windows.Automation.Peers.ScrollViewerAutomationPeer" />. instance.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ScrollViewerAutomationPeer.GetAutomationControlTypeCore">
      <summary>
                    Gets the control type for the <see cref="T:System.Windows.Controls.ScrollViewer" /> object that is associated with this <see cref="T:System.Windows.Automation.Peers.ScrollViewerAutomationPeer" /> instance. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.
                </summary>
      <returns>
                    The <see cref="F:System.Windows.Automation.Peers.AutomationControlType.Pane" /> enumeration value.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ScrollViewerAutomationPeer.GetClassNameCore">
      <summary>
                    Gets the text name of the <see cref="T:System.Windows.Controls.ScrollViewer" /> object that is associated with this <see cref="T:System.Windows.Automation.Peers.ScrollViewerAutomationPeer" /> instance. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.
                </summary>
      <returns>
                    The string "ScrollViewer".
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ScrollViewerAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>
                    Gets the object that supports the specified control pattern of the element that is associated with this automation peer.
                </summary>
      <returns>
                    The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.
                </returns>
      <param name="patternInterface">
                    One of the enumeration values.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ScrollViewerAutomationPeer.IsControlElementCore">
      <summary>
                    Gets a value that indicates whether the <see cref="T:System.Windows.Controls.ScrollViewer" /> object associated with this peer is understood by the user as interactive or as contributing to the logical structure of the control in the GUI.
                </summary>
      <returns>
                    A true value to indicate that the <see cref="T:System.Windows.Controls.ScrollViewer" /> is interactive.
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.ScrollViewerAutomationPeer.System#Windows#Automation#Provider#IScrollProvider#HorizontallyScrollable">
      <summary>
                    Gets a value that indicates whether the control can scroll horizontally.
                </summary>
      <returns>true if the control can scroll horizontally; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.ScrollViewerAutomationPeer.System#Windows#Automation#Provider#IScrollProvider#HorizontalScrollPercent">
      <summary>
                    Gets the current horizontal scroll position.
                </summary>
      <returns>
                    The horizontal scroll position as a percentage of the total content area in the control.
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.ScrollViewerAutomationPeer.System#Windows#Automation#Provider#IScrollProvider#HorizontalViewSize">
      <summary>
                    Gets the current horizontal view size.
                </summary>
      <returns>
                    The horizontal size of the viewable region as a percentage of the total content area in the control.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ScrollViewerAutomationPeer.System#Windows#Automation#Provider#IScrollProvider#Scroll(System.Windows.Automation.ScrollAmount,System.Windows.Automation.ScrollAmount)">
      <summary>
                    Scrolls the visible region of the content area horizontally and vertically.
                </summary>
      <param name="horizontalAmount">
                    The horizontal increment specific to the control.
                </param>
      <param name="verticalAmount">
                    The vertical increment specific to the control.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ScrollViewerAutomationPeer.System#Windows#Automation#Provider#IScrollProvider#SetScrollPercent(System.Double,System.Double)">
      <summary>
                    Sets the horizontal and vertical scroll position as a percentage of the total content area in the control.
                </summary>
      <param name="horizontalPercent">
                    The horizontal position as a percentage of the content area's total range.
                </param>
      <param name="verticalPercent">
                    The vertical position as a percentage of the content area's total range.
                </param>
    </member>
    <member name="P:System.Windows.Automation.Peers.ScrollViewerAutomationPeer.System#Windows#Automation#Provider#IScrollProvider#VerticallyScrollable">
      <summary>
                    Gets a value that indicates whether the control can scroll vertically.
                </summary>
      <returns>true if the control can scroll vertically; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.ScrollViewerAutomationPeer.System#Windows#Automation#Provider#IScrollProvider#VerticalScrollPercent">
      <summary>
                    Gets the current vertical scroll position.
                </summary>
      <returns>
                    The vertical scroll position as a percentage of the total content area in the control.
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.ScrollViewerAutomationPeer.System#Windows#Automation#Provider#IScrollProvider#VerticalViewSize">
      <summary>
                    Gets the vertical view size.
                </summary>
      <returns>
                    The vertical size of the viewable region as a percentage of the total content area in the control.
                </returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.SelectorAutomationPeer">
      <summary>
                    Exposes <see cref="T:System.Windows.Controls.Primitives.Selector" /> types to UI Automation.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.SelectorAutomationPeer.#ctor(System.Windows.Controls.Primitives.Selector)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.SelectorAutomationPeer" /> class.
                </summary>
      <param name="owner">
                    The <see cref="T:System.Windows.Controls.Primitives.Selector" /> instance that is associated with this <see cref="T:System.Windows.Automation.Peers.SelectorAutomationPeer" />.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.SelectorAutomationPeer.GetAutomationControlTypeCore">
      <summary>
                    Gets the control type for the <see cref="T:System.Windows.Controls.Primitives.Selector" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.SelectorAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.
                </summary>
      <returns>
                    The enumeration value.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.SelectorAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>
                    Gets the control pattern for the <see cref="T:System.Windows.Controls.Primitives.Selector" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.SelectorAutomationPeer" />.
                </summary>
      <returns>
                    The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.
                </returns>
      <param name="patternInterface">
                    One of the enumeration values.
                </param>
    </member>
    <member name="P:System.Windows.Automation.Peers.SelectorAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#CanSelectMultiple">
      <summary>
                    Gets a value that indicates whether the UI Automation provider allows more than one child element to be selected at the same time.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.SelectorAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#GetSelection">
      <summary>
                    Retrieves a UI Automation provider for each child element that is selected.
                </summary>
    </member>
    <member name="P:System.Windows.Automation.Peers.SelectorAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#IsSelectionRequired">
      <summary>
                    Gets a value that indicates whether the UI Automation provider requires at least one child element to be selected.
                </summary>
    </member>
    <member name="T:System.Windows.Automation.Peers.SelectorItemAutomationPeer">
      <summary>
                    Exposes the items in <see cref="T:System.Windows.Controls.Primitives.Selector" /> types to UI Automation.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.SelectorItemAutomationPeer.#ctor(System.Windows.UIElement)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.SelectorItemAutomationPeer" /> class.
                </summary>
      <param name="owner">
                    The <see cref="T:System.Windows.UIElement" /> instance to associate with this <see cref="T:System.Windows.Automation.Peers.SelectorItemAutomationPeer" />.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.SelectorItemAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>
                    Gets the control pattern for the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.SelectorItemAutomationPeer" />.
                </summary>
      <returns>
                    The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.
                </returns>
      <param name="patternInterface">
                    One of the enumeration values.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.SelectorItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#AddToSelection">
      <summary>
                    Adds the current element to the collection of selected items.
                </summary>
    </member>
    <member name="P:System.Windows.Automation.Peers.SelectorItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#IsSelected">
      <summary>
                    Gets a value that indicates whether an item is selected. 
                </summary>
      <returns>true if an item is selected; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.SelectorItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#RemoveFromSelection">
      <summary>
                    Removes the current element from the collection of selected items.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.SelectorItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#Select">
      <summary>
                    Clears any selection and then selects the current element. 
                </summary>
    </member>
    <member name="P:System.Windows.Automation.Peers.SelectorItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#SelectionContainer">
      <summary>
                    Gets the UI Automation provider that implements <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" /> and acts as the container for the calling object.
                </summary>
      <returns>
                    The UI Automation provider.
                </returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.SliderAutomationPeer">
      <summary>
                    Exposes <see cref="T:System.Windows.Controls.Slider" /> types to UI Automation.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.SliderAutomationPeer.#ctor(System.Windows.Controls.Slider)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.SliderAutomationPeer" /> class.
                </summary>
      <param name="owner">
                    The <see cref="T:System.Windows.Controls.Slider" /> to associate with the <see cref="T:System.Windows.Automation.Peers.SliderAutomationPeer" />.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.SliderAutomationPeer.GetAutomationControlTypeCore">
      <summary>
                    Gets the control type for the <see cref="T:System.Windows.Controls.Slider" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.SliderAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.
                </summary>
      <returns>
                    The <see cref="F:System.Windows.Automation.Peers.AutomationControlType.Slider" /> enumeration value.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.SliderAutomationPeer.GetClassNameCore">
      <summary>
                    Gets the name of the <see cref="T:System.Windows.Controls.Slider" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.SliderAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.
                </summary>
      <returns>
                    A string that contains "Slider".
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.SliderAutomationPeer.GetClickablePointCore">
      <summary>
                    Gets a clickable point on the control.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Point" /> structure containing a point on the control that is clickable. 
                </returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.TextBlockAutomationPeer">
      <summary>
                    Exposes <see cref="T:System.Windows.Controls.TextBlock" /> types to UI Automation.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.TextBlockAutomationPeer.#ctor(System.Windows.Controls.TextBlock)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.TextBlockAutomationPeer" /> class.
                </summary>
      <param name="owner">
                    The <see cref="T:System.Windows.Controls.TextBlock" /> to associate with the <see cref="T:System.Windows.Automation.Peers.TextBlockAutomationPeer" />.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.TextBlockAutomationPeer.GetAutomationControlTypeCore">
      <summary>
                    Gets the control type for the <see cref="T:System.Windows.Controls.TextBlock" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.TextBlockAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.
                </summary>
      <returns>
                    The <see cref="F:System.Windows.Automation.Peers.AutomationControlType.Text" /> enumeration value.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.TextBlockAutomationPeer.GetClassNameCore">
      <summary>
                    Gets the name of the <see cref="T:System.Windows.Controls.TextBlock" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.TextBlockAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.
                </summary>
      <returns>
                    The string "TextBlock".
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.TextBlockAutomationPeer.GetNameCore">
      <summary>
                    Gets the label of the <see cref="T:System.Windows.Controls.TextBlock" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.TextBlockAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName" />.
                </summary>
      <returns>
                    The label of the element that is associated with this automation peer. 
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.TextBlockAutomationPeer.IsControlElementCore">
      <summary>
                    Gets a value that indicates whether the <see cref="T:System.Windows.Controls.TextBlock" /> associated with this peer is understood by the user as interactive or as contributing to the logical structure of the control in the GUI.
                </summary>
      <returns>
                    Always true.
                </returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.TextBoxAutomationPeer">
      <summary>
                    Exposes <see cref="T:System.Windows.Controls.TextBox" /> types to UI Automation.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.TextBoxAutomationPeer.#ctor(System.Windows.Controls.TextBox)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.TextBoxAutomationPeer" /> class.
                </summary>
      <param name="owner">
                    The <see cref="T:System.Windows.Controls.TextBox" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.TextBoxAutomationPeer" />.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.TextBoxAutomationPeer.GetNameCore">
      <summary>
                    Gets the text label of the <see cref="T:System.Windows.Controls.TextBox" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.TextBoxAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName" />.
                </summary>
      <returns>
                    The text label of the element that is associated with this automation peer.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.TextBoxAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>
                    Gets the control pattern for the <see cref="T:System.Windows.Controls.TextBox" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.TextBoxAutomationPeer" />.
                </summary>
      <returns>
                    The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.
                </returns>
      <param name="patternInterface">
                    One of the enumeration values.
                </param>
    </member>
    <member name="P:System.Windows.Automation.Peers.TextBoxAutomationPeer.System#Windows#Automation#Provider#IValueProvider#IsReadOnly">
      <summary>
                    Gets a value that specifies whether the value of a control is read-only.
                </summary>
      <returns>true if the value is read-only; false if it can be modified. 
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.TextBoxAutomationPeer.System#Windows#Automation#Provider#IValueProvider#SetValue(System.String)">
      <summary>
                    Sets the value of a control.
                </summary>
      <param name="value">
                    New control value.
                </param>
    </member>
    <member name="P:System.Windows.Automation.Peers.TextBoxAutomationPeer.System#Windows#Automation#Provider#IValueProvider#Value">
      <summary>
                    Gets the value of the control.
                </summary>
      <returns>
                    The value of the control as a string. 
                </returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.ThumbAutomationPeer">
      <summary>
                    Exposes <see cref="T:System.Windows.Controls.Primitives.Thumb" /> types to UI Automation.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.ThumbAutomationPeer.#ctor(System.Windows.Controls.Primitives.Thumb)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.ThumbAutomationPeer" /> class.
                </summary>
      <param name="owner">
                    The <see cref="T:System.Windows.Controls.Primitives.Thumb" /> to associate with the <see cref="T:System.Windows.Automation.Peers.ThumbAutomationPeer" />.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ThumbAutomationPeer.GetAutomationControlTypeCore">
      <summary>
                    Gets the control type for the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ThumbAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.
                </summary>
      <returns>
                    The <see cref="F:System.Windows.Automation.Peers.AutomationControlType.Thumb" /> enumeration value.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ThumbAutomationPeer.GetClassNameCore">
      <summary>
                    Gets the name of the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ThumbAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.
                </summary>
      <returns>
                    A string that contains "Thumb".
                </returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.ToggleButtonAutomationPeer">
      <summary>
                    Exposes <see cref="T:System.Windows.Controls.Primitives.ToggleButton" /> types to UI Automation.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.ToggleButtonAutomationPeer.#ctor(System.Windows.Controls.Primitives.ToggleButton)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.ToggleButtonAutomationPeer" /> class.
                </summary>
      <param name="owner">
                    The <see cref="T:System.Windows.Controls.Primitives.ToggleButton" /> to associate with this <see cref="T:System.Windows.Automation.Peers.ToggleButtonAutomationPeer" />.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ToggleButtonAutomationPeer.GetAutomationControlTypeCore">
      <summary>
                    Gets the control type for the <see cref="T:System.Windows.Controls.Primitives.ToggleButton" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ToggleButtonAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.
                </summary>
      <returns>
                    The <see cref="F:System.Windows.Automation.Peers.AutomationControlType.Button" /> enumeration value.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ToggleButtonAutomationPeer.GetClassNameCore">
      <summary>
                    Gets the text name of the <see cref="T:System.Windows.Controls.Primitives.ToggleButton" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ToggleButtonAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.
                </summary>
      <returns>
                    A string that contains "Button".
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ToggleButtonAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>
                    Gets the control pattern implementation for this <see cref="T:System.Windows.Automation.Peers.ToggleButtonAutomationPeer" />.
                </summary>
      <returns>
                    The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.
                </returns>
      <param name="patternInterface">
                    One of the enumeration values that indicates the control pattern.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ToggleButtonAutomationPeer.System#Windows#Automation#Provider#IToggleProvider#Toggle">
      <summary>
                    Cycles through the toggle states of a control.
                </summary>
    </member>
    <member name="P:System.Windows.Automation.Peers.ToggleButtonAutomationPeer.System#Windows#Automation#Provider#IToggleProvider#ToggleState">
      <summary>
                    Gets the toggle state of the control.
                </summary>
      <returns>
                    The toggle state of the control.
                </returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.IDockProvider">
      <summary>
                    Exposes methods and properties to support access by a UI Automation client to controls that expose their dock properties in a docking container. 
                </summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.IDockProvider.DockPosition">
      <summary>
                    Gets the current <see cref="T:System.Windows.Automation.DockPosition" /> of the control in a docking container.
                </summary>
      <returns>
                    The <see cref="T:System.Windows.Automation.DockPosition" /> of the control, relative to the boundaries of the docking container and to other elements in the container.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.IDockProvider.SetDockPosition(System.Windows.Automation.DockPosition)">
      <summary>
                    Docks the control in a docking container.
                </summary>
      <param name="dockPosition">
                    The dock position, relative to the boundaries of the docking container and to other elements in the container.
                </param>
    </member>
    <member name="T:System.Windows.Automation.Provider.IExpandCollapseProvider">
      <summary>
                    Exposes methods and properties to support access by a UI Automation client to controls that visually expand to display content and that collapse to hide content.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.IExpandCollapseProvider.Collapse">
      <summary>
                    Hides all nodes, controls, or content that are descendants of the control.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.IExpandCollapseProvider.Expand">
      <summary>
                    Displays all child nodes, controls, or content of the control.
                </summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.IExpandCollapseProvider.ExpandCollapseState">
      <summary>
                    Gets the state (expanded or collapsed) of the control.
                </summary>
      <returns>
                    The state (expanded or collapsed) of the control.
                </returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.IGridItemProvider">
      <summary>
                    Exposes methods and properties to support access by a UI Automation client to individual child controls of containers that implement <see cref="T:System.Windows.Automation.Provider.IGridProvider" />. 
                </summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.IGridItemProvider.Column">
      <summary>
                    Gets the ordinal number of the column that contains the cell or item.
                </summary>
      <returns>
                    A zero-based ordinal number that identifies the column that contains the cell or item.
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IGridItemProvider.ColumnSpan">
      <summary>
                    Gets the number of columns that are spanned by a cell or item.
                </summary>
      <returns>
                    The number of columns. 
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IGridItemProvider.ContainingGrid">
      <summary>
                    Gets a UI Automation provider that implements <see cref="T:System.Windows.Automation.Provider.IGridProvider" /> and that represents the container of the cell or item.
                </summary>
      <returns>
                    A UI Automation provider that implements the GridPattern control pattern and that represents the cell or item container. 
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IGridItemProvider.Row">
      <summary>
                    Gets the ordinal number of the row that contains the cell or item.
                </summary>
      <returns>
                    A zero-based ordinal number that identifies the row that contains the cell or item. 
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IGridItemProvider.RowSpan">
      <summary>
                    Gets the number of rows spanned by a cell or item.
                </summary>
      <returns>
                    The number of rows. 
                </returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.IGridProvider">
      <summary>
                    Exposes methods and properties to support access by a UI Automation client to controls that act as containers for a collection of child elements. 
                </summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.IGridProvider.ColumnCount">
      <summary>
                    Gets the total number of columns in a grid.
                </summary>
      <returns>
                    The total number of columns in a grid.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.IGridProvider.GetItem(System.Int32,System.Int32)">
      <summary>
                    Retrieves the UI Automation provider for the specified cell.
                </summary>
      <returns>
                    The UI Automation provider for the specified cell.
                </returns>
      <param name="row">
                    The ordinal number of the row that contains the cell.
                </param>
      <param name="column">
                    The ordinal number of the column that contains the cell.
                </param>
    </member>
    <member name="P:System.Windows.Automation.Provider.IGridProvider.RowCount">
      <summary>
                    Gets the total number of rows in a grid.
                </summary>
      <returns>
                    The total number of rows in a grid.
                </returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.IInvokeProvider">
      <summary>
                    Exposes a method to support UI Automation access to controls that initiate or perform a single, unambiguous action and do not maintain state when activated. 
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.IInvokeProvider.Invoke">
      <summary>
                    Sends a request to activate a control and initiate its single, unambiguous action.
                </summary>
      <exception cref="T:System.Windows.Automation.ElementNotEnabledException">
                    The control is not enabled.
                </exception>
    </member>
    <member name="T:System.Windows.Automation.Provider.IMultipleViewProvider">
      <summary>
                    Exposes methods and properties to support UI Automation client access to controls that provide, and are able to switch between, multiple representations of the same set of information or child controls.
                </summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.IMultipleViewProvider.CurrentView">
      <summary>
                    Gets the current control-specific view.
                </summary>
      <returns>
                    The value for the current view of the UI Automation element. 
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.IMultipleViewProvider.GetSupportedViews">
      <summary>
                    Retrieves a collection of control-specific view identifiers.
                </summary>
      <returns>
                    A collection of values that identifies the views available for a UI Automation element. 
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.IMultipleViewProvider.GetViewName(System.Int32)">
      <summary>
                    Retrieves the name of a control-specific view.
                </summary>
      <returns>
                    A localized name for the view.
                </returns>
      <param name="viewId">
                    The view identifier.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="viewId" /> is not a member of the supported views collection.
                </exception>
    </member>
    <member name="M:System.Windows.Automation.Provider.IMultipleViewProvider.SetCurrentView(System.Int32)">
      <summary>
                    Sets the current control-specific view. 
                </summary>
      <param name="viewId">
                    A view identifier.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="viewId" /> is not a member of the supported views collection.
                </exception>
    </member>
    <member name="T:System.Windows.Automation.Provider.IRangeValueProvider">
      <summary>
                    Exposes methods and properties to support access by a UI Automation client to controls that can be set to a value within a range.
                </summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.IRangeValueProvider.IsReadOnly">
      <summary>
                    Gets a value that indicates whether the value of a control is read-only. 
                </summary>
      <returns>true if the value is read-only; false if it can be modified. 
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IRangeValueProvider.LargeChange">
      <summary>
                    Gets the value that is added to or subtracted from the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Value" /> property when a large change is made, such as with the PAGE DOWN key.
                </summary>
      <returns>
                    The large-change value that is supported by the control, or null if the control does not support <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.LargeChange" />. 
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IRangeValueProvider.Maximum">
      <summary>
                    Gets the maximum range value that is supported by the control.
                </summary>
      <returns>
                    The maximum value that is supported by the control, or null if the control does not support <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Maximum" />. 
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IRangeValueProvider.Minimum">
      <summary>
                    Gets the minimum range value that is supported by the control.
                </summary>
      <returns>
                    The minimum value that is supported by the control, or null if the control does not support <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Minimum" />. 
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.IRangeValueProvider.SetValue(System.Double)">
      <summary>
                    Sets the value of the control.
                </summary>
      <param name="value">
                    The value to set.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than the minimum or greater than the maximum value of the control.
                </exception>
    </member>
    <member name="P:System.Windows.Automation.Provider.IRangeValueProvider.SmallChange">
      <summary>
                    Gets the value that is added to or subtracted from the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Value" /> property when a small change is made, such as with an arrow key.
                </summary>
      <returns>
                    The small-change value supported by the control, or null if the control does not support <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.SmallChange" />. 
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IRangeValueProvider.Value">
      <summary>
                    Gets the value of the control.
                </summary>
      <returns>
                    The value of the control, or null if the control does not support <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Value" />.
                </returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.IRawElementProviderSimple">
      <summary>
                    This class is the return type of some automation provider interface methods.
                </summary>
    </member>
    <member name="T:System.Windows.Automation.Provider.IScrollItemProvider">
      <summary>
                    Exposes methods and properties to support access by UI Automation client to individual child controls of containers that implement <see cref="T:System.Windows.Automation.Provider.IScrollProvider" />.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.IScrollItemProvider.ScrollIntoView">
      <summary>
                    Scrolls the content area of a container object in order to display the control within the visible region (viewport) of the container.
                </summary>
      <exception cref="T:System.InvalidOperationException">
                    The item cannot be scrolled into view.
                </exception>
    </member>
    <member name="T:System.Windows.Automation.Provider.IScrollProvider">
      <summary>
                    Exposes methods and properties to support access by a UI Automation client to a control that acts as a scrollable container for a collection of child objects. The children of this control must implement <see cref="T:System.Windows.Automation.Provider.IScrollItemProvider" />.
                </summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.IScrollProvider.HorizontallyScrollable">
      <summary>
                    Gets a value that indicates whether the control can scroll horizontally.
                </summary>
      <returns>true if the control can scroll horizontally; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IScrollProvider.HorizontalScrollPercent">
      <summary>
                    Gets the current horizontal scroll position.
                </summary>
      <returns>
                    The horizontal scroll position as a percentage of the total content area within the control.
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IScrollProvider.HorizontalViewSize">
      <summary>
                    Gets the current horizontal view size.
                </summary>
      <returns>
                    The horizontal size of the viewable region as a percentage of the total content area within the control. 
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.IScrollProvider.Scroll(System.Windows.Automation.ScrollAmount,System.Windows.Automation.ScrollAmount)">
      <summary>
                    Scrolls the visible region of the content area horizontally and vertically.
                </summary>
      <param name="horizontalAmount">
                    The horizontal increment that is specific to the control. Pass <see cref="F:System.Windows.Automation.ScrollPatternIdentifiers.NoScroll" /> if the control cannot be scrolled in this direction.
                </param>
      <param name="verticalAmount">
                    The vertical increment that is specific to the control. Pass <see cref="F:System.Windows.Automation.ScrollPatternIdentifiers.NoScroll" /> if the control cannot be scrolled in this direction.
                </param>
      <exception cref="T:System.ArgumentException">
                    The control supports <see cref="F:System.Windows.Automation.ScrollAmount.SmallIncrement" /> values exclusively for horizontal or vertical scrolling, but a <see cref="F:System.Windows.Automation.ScrollAmount.LargeIncrement" /> value was passed in.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    An attempt was made to scroll in an unsupported direction.
                </exception>
    </member>
    <member name="M:System.Windows.Automation.Provider.IScrollProvider.SetScrollPercent(System.Double,System.Double)">
      <summary>
                    Sets the horizontal and vertical scroll position as a percentage of the total content area within the control.
                </summary>
      <param name="horizontalPercent">
                    The horizontal position as a percentage of the content area's total range. Pass <see cref="F:System.Windows.Automation.ScrollPatternIdentifiers.NoScroll" /> if the control cannot be scrolled in this direction.
                </param>
      <param name="verticalPercent">
                    The vertical position as a percentage of the content area's total range. Pass <see cref="F:System.Windows.Automation.ScrollPatternIdentifiers.NoScroll" /> if the control cannot be scrolled in this direction.
                </param>
      <exception cref="T:System.ArgumentException">
                    A value was passed that cannot be converted to a double.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    A value greater than 100 or less than 0 was passed in (except -1, which is equivalent to <see cref="F:System.Windows.Automation.ScrollPatternIdentifiers.NoScroll" />). The <see cref="P:System.Windows.Automation.Provider.IScrollProvider.HorizontalScrollPercent" /> and <see cref="P:System.Windows.Automation.Provider.IScrollProvider.VerticalScrollPercent" /> values are normalized to either 100 percent or 0 percent. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    An attempt was made to scroll in an unsupported direction.
                </exception>
    </member>
    <member name="P:System.Windows.Automation.Provider.IScrollProvider.VerticallyScrollable">
      <summary>
                    Gets a value that indicates whether the control can scroll vertically.
                </summary>
      <returns>true if the control can scroll vertically; otherwise, false. 
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IScrollProvider.VerticalScrollPercent">
      <summary>
                    Gets the current vertical scroll position.
                </summary>
      <returns>
                    The vertical scroll position as a percentage of the total content area within the control. 
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IScrollProvider.VerticalViewSize">
      <summary>
                    Gets the vertical view size.
                </summary>
      <returns>
                    The vertical size of the viewable region as a percentage of the total content area within the control. 
                </returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.ISelectionItemProvider">
      <summary>
                    Exposes methods and properties to support access by a UI Automation client to individual, selectable child controls of containers that implement <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" />.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.ISelectionItemProvider.AddToSelection">
      <summary>
                    Adds the current element to the collection of selected items.
                </summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.ISelectionItemProvider.IsSelected">
      <summary>
                    Gets a value that indicates whether an item is selected. 
                </summary>
      <returns>true if the element is selected; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.ISelectionItemProvider.RemoveFromSelection">
      <summary>
                    Removes the current element from the collection of selected items.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.ISelectionItemProvider.Select">
      <summary>
                    Clears any existing selection and then selects the current element.
                </summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.ISelectionItemProvider.SelectionContainer">
      <summary>
                    Gets the UI Automation provider that implements <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" /> and acts as the container for the calling object.
                </summary>
      <returns>
                    The UI Automation provider.
                </returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.ISelectionProvider">
      <summary>
                    Exposes methods and properties to support access by a UI Automation client to controls that act as containers for a collection of individual, selectable child items. The children of this control must implement <see cref="T:System.Windows.Automation.Provider.ISelectionItemProvider" />.
                </summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.ISelectionProvider.CanSelectMultiple">
      <summary>
                    Gets a value that indicates whether the UI Automation provider allows more than one child element to be selected concurrently.
                </summary>
      <returns>true if multiple selection is allowed; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.ISelectionProvider.GetSelection">
      <summary>
                    Retrieves a UI Automation provider for each child element that is selected.
                </summary>
      <returns>
                    An array of UI Automation providers. 
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.ISelectionProvider.IsSelectionRequired">
      <summary>
                    Gets a value that indicates whether the UI Automation provider requires at least one child element to be selected.
                </summary>
      <returns>true if selection is required; otherwise, false.
                </returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.ITableItemProvider">
      <summary>
                    Exposes methods and properties to support UI Automation client access to child controls of containers that implement <see cref="T:System.Windows.Automation.Provider.ITableProvider" />. 
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITableItemProvider.GetColumnHeaderItems">
      <summary>
                    Retrieves a collection of UI Automation providers representing all the column headers associated with a table item or cell.
                </summary>
      <returns>
                    A collection of UI Automation providers. 
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITableItemProvider.GetRowHeaderItems">
      <summary>
                    Retrieves a collection of UI Automation providers representing all the row headers associated with a table item or cell.
                </summary>
      <returns>
                    A collection of UI Automation providers. 
                </returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.ITableProvider">
      <summary>
                    Exposes methods and properties to support access by a UI Automation client to controls that act as containers for a collection of child elements. The children of this element must implement <see cref="T:System.Windows.Automation.Provider.ITableItemProvider" /> and be organized in a two-dimensional logical coordinate system that can be traversed (that is, a UI Automation client can move to adjacent controls) by using the keyboard.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITableProvider.GetColumnHeaders">
      <summary>
                    Returns a collection of UI Automation providers that represents all the column headers in a table.
                </summary>
      <returns>
                    A collection of UI Automation providers. 
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITableProvider.GetRowHeaders">
      <summary>
                    Returns a collection of UI Automation providers that represents all row headers in the table.
                </summary>
      <returns>
                    A collection of UI Automation providers.
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.ITableProvider.RowOrColumnMajor">
      <summary>
                    Gets the primary direction of traversal for the table.
                </summary>
      <returns>
                    The primary direction of traversal. 
                </returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.IToggleProvider">
      <summary>
                    Exposes methods and properties to support UI Automation client access to controls that can cycle through a set of states and maintain a particular state.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.IToggleProvider.Toggle">
      <summary>
                    Cycles through the toggle states of a control.
                </summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.IToggleProvider.ToggleState">
      <summary>
                    Gets the toggle state of the control.
                </summary>
      <returns>
                    The <see cref="T:System.Windows.Automation.ToggleState" /> of the control. 
                </returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.ITransformProvider">
      <summary>
                    Exposes methods and properties to support access by a UI Automation client to controls that can be moved, resized, or rotated within a two-dimensional space.
                </summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.ITransformProvider.CanMove">
      <summary>
                    Gets a value that indicates whether the control can be moved.
                </summary>
      <returns>true if the element can be moved; otherwise, false. 
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.ITransformProvider.CanResize">
      <summary>
                    Gets a value that indicates whether the UI Automation element can be resized.
                </summary>
      <returns>true if the element can be resized; otherwise, false. 
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.ITransformProvider.CanRotate">
      <summary>
                    Gets a value that indicates whether the control can be rotated.
                </summary>
      <returns>true if the element can be rotated; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITransformProvider.Move(System.Double,System.Double)">
      <summary>
                    Moves the control.
                </summary>
      <param name="x">
                    The absolute screen coordinates of the left side of the control.
                </param>
      <param name="y">
                    The absolute screen coordinates of the top of the control.
                </param>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="P:System.Windows.Automation.Provider.ITransformProvider.CanMove" /> property is false.
                </exception>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITransformProvider.Resize(System.Double,System.Double)">
      <summary>
                    Resizes the control. 
                </summary>
      <param name="width">
                    The new width of the window, in pixels.
                </param>
      <param name="height">
                    The new height of the window, in pixels.
                </param>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="P:System.Windows.Automation.Provider.ITransformProvider.CanResize" /> property is false.
                </exception>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITransformProvider.Rotate(System.Double)">
      <summary>
                    Rotates the control.
                </summary>
      <param name="degrees">
                    The number of degrees to rotate the control. A positive number rotates the control clockwise. A negative number rotates the control counterclockwise.
                </param>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="P:System.Windows.Automation.Provider.ITransformProvider.CanRotate" /> property is false.
                </exception>
    </member>
    <member name="T:System.Windows.Automation.Provider.IValueProvider">
      <summary>
                    Exposes methods and properties to support access by a UI Automation client to controls that have an intrinsic value that does not span a range and that can be represented as a string. 
                </summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.IValueProvider.IsReadOnly">
      <summary>
                    Gets a value that indicates whether the value of a control is read-only. 
                </summary>
      <returns>true if the value is read-only; false if it can be modified. 
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.IValueProvider.SetValue(System.String)">
      <summary>
                    Sets the value of a control.
                </summary>
      <param name="value">
                    The value to set. The provider is responsible for converting the value to the appropriate data type.
                </param>
      <exception cref="T:System.InvalidOperationException">
                    Locale-specific information was passed to a control in an incorrect format, such as an incorrectly formatted date. 
                </exception>
      <exception cref="T:System.ArgumentException">
                    The new value cannot be converted from a string to a format the control recognizes.
                </exception>
      <exception cref="T:System.Windows.Automation.ElementNotEnabledException">
                    An attempt was made to manipulate a control that is not enabled.
                </exception>
    </member>
    <member name="P:System.Windows.Automation.Provider.IValueProvider.Value">
      <summary>
                    Gets the value of the control.
                </summary>
      <returns>
                    The value of the control.
                </returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.IWindowProvider">
      <summary>
                    Exposes methods and properties to support access by a UI Automation client to controls that provide fundamental window-based functionality within a traditional graphical user interface (GUI). 
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.IWindowProvider.Close">
      <summary>
                    Closes the window.
                </summary>
      <exception cref="T:System.InvalidOperationException">
                    The control is unable to perform the requested action.
                </exception>
      <exception cref="T:System.Windows.Automation.ElementNotAvailableException">
                    The target element is no longer available. For example, the window has been closed.
                </exception>
    </member>
    <member name="P:System.Windows.Automation.Provider.IWindowProvider.InteractionState">
      <summary>
                    Gets the interaction state of the window. 
                </summary>
      <returns>
                    The interaction state of the control. 
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IWindowProvider.IsModal">
      <summary>
                    Gets a value that specifies whether the window is modal.
                </summary>
      <returns>true if the window is modal; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IWindowProvider.IsTopmost">
      <summary>
                    Gets a value that specifies whether the window is the topmost element in the z-order.
                </summary>
      <returns>true if the window is topmost; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IWindowProvider.Maximizable">
      <summary>
                    Gets a value that specifies whether the window can be maximized.
                </summary>
      <returns>true if the window can be maximized; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IWindowProvider.Minimizable">
      <summary>
                    Gets a value that specifies whether the window can be minimized. 
                </summary>
      <returns>true if the window can be minimized; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.IWindowProvider.SetVisualState(System.Windows.Automation.WindowVisualState)">
      <summary>
                    Changes the visual state of the window (such as minimizing or maximizing it).
                </summary>
      <param name="state">
                    The visual state of the window to change to.
                </param>
      <exception cref="T:System.InvalidOperationException">
                    The control does not support the requested behavior.
                </exception>
    </member>
    <member name="P:System.Windows.Automation.Provider.IWindowProvider.VisualState">
      <summary>
                    Gets the visual state of the window. 
                </summary>
      <returns>
                    The visual state of the window. 
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.IWindowProvider.WaitForInputIdle(System.Int32)">
      <summary>
                    Blocks the calling code for the specified time or until the associated process enters an idle state, whichever completes first. 
                </summary>
      <returns>true if the window has entered the idle state; false if the timeout occurred.
                </returns>
      <param name="milliseconds">
                    The amount of time, in milliseconds, to wait for the associated process to become idle. The maximum is <see cref="F:System.Int32.MaxValue" />.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The value in <paramref name="milliseconds " />is not a valid number.
                </exception>
    </member>
    <member name="T:System.Windows.Controls.Border">
      <summary>
                    Draws a border, background, or both around another object.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Border.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.Border" /> class.
                </summary>
    </member>
    <member name="P:System.Windows.Controls.Border.Background">
      <summary>
                    Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that fills the background of the border.
                </summary>
      <returns>
                    The brush that fills the background.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Border.BackgroundProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Border.Background" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Border.Background" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Border.BorderBrush">
      <summary>
                    Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that is used to create the border.
                </summary>
      <returns>
                    The brush that fills the border.  
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Border.BorderBrushProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Border.BorderBrush" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Border.BorderBrush" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Border.BorderThickness">
      <summary>
                    Gets or sets the thickness of the border.
                </summary>
      <returns>
                    The thickness of the border in pixels.  The default is 0 on all four sides.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Border.BorderThicknessProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Border.BorderThickness" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Border.BorderThickness" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Border.Child">
      <summary>
                    Gets or sets the child element to draw the border around.
                </summary>
      <returns>
                    The <see cref="T:System.Windows.UIElement" /> to apply the border to.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Border.CornerRadius">
      <summary>
                    Gets or sets the radius for the corners of the border.
                </summary>
      <returns>
                    The degree to which the corners are rounded.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Border.CornerRadiusProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Border.CornerRadius" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Border.CornerRadius" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Border.Padding">
      <summary>
                    Gets or sets the distance between the border and its child object.
                </summary>
      <returns>
                    The dimensions of the space between the border and its child as a <see cref="T:System.Windows.Thickness" /> value. The <see cref="T:System.Windows.Thickness" /> values are in pixels.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Border.PaddingProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Border.Padding" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Border.Padding" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.Button">
      <summary>
                    Represents a button control, which responds to the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> event.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Button.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.Button" /> class. 
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Button.OnApplyTemplate">
      <summary>
                    Builds the visual tree for the <see cref="T:System.Windows.Controls.Button" /> when a new template is applied.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Button.OnClick">
      <summary>
                    Raises the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> event. 
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Button.OnCreateAutomationPeer">
      <summary>
                    Returns a <see cref="T:System.Windows.Automation.Peers.ButtonAutomationPeer" /> for use by the Silverlight automation infrastructure.
                </summary>
      <returns>
        <see cref="T:System.Windows.Automation.Peers.ButtonAutomationPeer" /> for the <see cref="T:System.Windows.Controls.Button" /> object.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.Canvas">
      <summary>
                    Defines an area within which you can explicitly position child objects by using coordinates that are relative to the area. 
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Canvas.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.Canvas" /> class. 
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Canvas.ArrangeOverride(System.Windows.Size)">
      <summary>
                    Provides the behavior for the "arrange" pass of Silverlight layout. Classes can override this method to define their own arrange pass behavior.
                </summary>
      <returns>
                    The actual size used.
                </returns>
      <param name="arrangeSize">
                    The size that this object should use to arrange its child objects.
                </param>
    </member>
    <member name="M:System.Windows.Controls.Canvas.GetLeft(System.Windows.UIElement)">
      <summary>
                    Gets the value of the <see cref="P:System.Windows.Controls.Canvas.Left" /> attached property for a given object. 
                </summary>
      <returns>
                    The <see cref="P:System.Windows.Controls.Canvas.Left" /> value of the specified object.
                </returns>
      <param name="element">
                    The object from which the property value is read.
                </param>
    </member>
    <member name="M:System.Windows.Controls.Canvas.GetTop(System.Windows.UIElement)">
      <summary>
                    Gets the value of the <see cref="P:System.Windows.Controls.Canvas.Top" /> attached property for a given object. 
                </summary>
      <returns>
                    The <see cref="P:System.Windows.Controls.Canvas.Top" /> value of the specified object.
                </returns>
      <param name="element">
                    The object from which the property value is read.
                </param>
    </member>
    <member name="M:System.Windows.Controls.Canvas.GetZIndex(System.Windows.UIElement)">
      <summary>
                    Gets the value of the <see cref="P:System.Windows.Controls.Canvas.ZIndex" /> attached property for a given object. 
                </summary>
      <returns>
                    The <see cref="P:System.Windows.Controls.Canvas.ZIndex" /> value of the requested object. The maximum allowed value for <see cref="P:System.Windows.Controls.Canvas.ZIndex" /> is Int16.MaxValue – 1 = 32766.
                </returns>
      <param name="element">
                    The object from which the property value is read.
                </param>
    </member>
    <member name="P:System.Windows.Controls.Canvas.Left">
      <summary>
                    Gets or sets the distance between the left side of an object and the left side of its parent <see cref="T:System.Windows.Controls.Canvas" />.
                </summary>
      <returns>
                    The offset position from the left side of a parent <see cref="T:System.Windows.Controls.Canvas" />, in pixels. The default is 0.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Canvas.LeftProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Canvas.Left" /> attached property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Canvas.Left" /> attached property.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.Canvas.MeasureOverride(System.Windows.Size)">
      <summary>
                    Provides the behavior for the "measure" pass of Silverlight layout. Classes can override this method to define their own measure pass behavior.
                </summary>
      <returns>
                    The size that this object determines it needs during layout, based on its calculations of child object allotted sizes.
                </returns>
      <param name="constraint">
                    The available size that this object can give to child objects. Infinity can be specified as a value to indicate that the object will size to whatever content is available.
                </param>
    </member>
    <member name="M:System.Windows.Controls.Canvas.SetLeft(System.Windows.UIElement,System.Double)">
      <summary>
                    Sets the value of the <see cref="P:System.Windows.Controls.Canvas.Left" /> attached property for a given object. 
                </summary>
      <param name="element">
                    The object to which the property value is written.
                </param>
      <param name="length">
                    The <see cref="P:System.Windows.Controls.Canvas.Left" /> value of the specified element.
                </param>
    </member>
    <member name="M:System.Windows.Controls.Canvas.SetTop(System.Windows.UIElement,System.Double)">
      <summary>
                    Sets the value of the <see cref="P:System.Windows.Controls.Canvas.Top" /> attached property for a given object. 
                </summary>
      <param name="element">
                    The object to which the property value is written.
                </param>
      <param name="length">
                    The <see cref="P:System.Windows.Controls.Canvas.Top" /> value of the specified object.
                </param>
    </member>
    <member name="M:System.Windows.Controls.Canvas.SetZIndex(System.Windows.UIElement,System.Int32)">
      <summary>
                    Sets the value of the <see cref="P:System.Windows.Controls.Canvas.ZIndex" /> attached property for a given object. 
                </summary>
      <param name="element">
                    The object to which the property value is written.
                </param>
      <param name="value">
                    The <see cref="P:System.Windows.Controls.Canvas.ZIndex" /> value of the specified object.
                </param>
    </member>
    <member name="P:System.Windows.Controls.Canvas.Top">
      <summary>
                    Gets or sets the distance between the top of an element and the top of its parent <see cref="T:System.Windows.Controls.Canvas" />. 
                </summary>
      <returns>
                    The offset position from the top of a parent <see cref="T:System.Windows.Controls.Canvas" />, in pixels. The default is 0.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Canvas.TopProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Canvas.Top" /> attached property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Canvas.Top" /> attached property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Canvas.ZIndex">
      <summary>
                    Gets or sets the z-order rendering behavior of objects in a <see cref="T:System.Windows.Controls.Canvas" />. 
                </summary>
      <returns>
                    The z-order of the object within the <see cref="T:System.Windows.Controls.Canvas" />. The default is 0.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Canvas.ZIndexProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Canvas.ZIndex" /> attached property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Canvas.ZIndex" /> attached property.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.CheckBox">
      <summary>
                    Represents a control that a user can select (check) or clear (uncheck).
                </summary>
    </member>
    <member name="M:System.Windows.Controls.CheckBox.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.CheckBox" /> class.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.CheckBox.OnCreateAutomationPeer">
      <summary>
                    Returns a <see cref="T:System.Windows.Automation.Peers.CheckBoxAutomationPeer" /> for use by the Silverlight automation infrastructure.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Automation.Peers.CheckBoxAutomationPeer" /> for the check box object.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.ClickMode">
      <summary>
                    Specifies when the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> event should be raised for a control. 
                </summary>
    </member>
    <member name="F:System.Windows.Controls.ClickMode.Release">
      <summary>
                    Specifies that the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> event should be raised when the left mouse button is pressed and released, and the mouse pointer is over the control. If you are using the keyboard, specifies that the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> event should be raised when the SPACEBAR or ENTER key is pressed and released, and the control has keyboard focus.
                </summary>
    </member>
    <member name="F:System.Windows.Controls.ClickMode.Press">
      <summary>
                    Specifies that the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> event should be raised when the mouse button is pressed and the mouse pointer is over the control. If you are using the keyboard, specifies that the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> event should be raised when the SPACEBAR or ENTER is pressed and the control has keyboard focus.
                </summary>
    </member>
    <member name="F:System.Windows.Controls.ClickMode.Hover">
      <summary>
                    Specifies that the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> event should be raised when the mouse pointer moves over the control. 
                </summary>
    </member>
    <member name="T:System.Windows.Controls.ColumnDefinition">
      <summary>
                    Defines column-specific properties that apply to <see cref="T:System.Windows.Controls.Grid" /> objects. 
                </summary>
    </member>
    <member name="M:System.Windows.Controls.ColumnDefinition.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.ColumnDefinition" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.Controls.ColumnDefinition.ActualWidth">
      <summary>
                    Gets a value that represents the actual calculated width of a <see cref="T:System.Windows.Controls.ColumnDefinition" />. 
                </summary>
      <returns>
                    A <see cref="T:System.Double" /> that represents the actual calculated width in pixels. The default is 0.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.ColumnDefinition.MaxWidth">
      <summary>
                    Gets or sets a value that represents the maximum width of a <see cref="T:System.Windows.Controls.ColumnDefinition" />.
                </summary>
      <returns>
                    A <see cref="T:System.Double" /> that represents the maximum width in pixels. The default is <see cref="F:System.Double.PositiveInfinity" />.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.ColumnDefinition.MaxWidthProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.ColumnDefinition.MaxWidth" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.ColumnDefinition.MaxWidth" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.ColumnDefinition.MinWidth">
      <summary>
                    Gets or sets a value that represents the minimum width of a <see cref="T:System.Windows.Controls.ColumnDefinition" />. 
                </summary>
      <returns>
                    A <see cref="T:System.Double" /> that represents the minimum width in pixels. The default is 0.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.ColumnDefinition.MinWidthProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.ColumnDefinition.MinWidth" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.ColumnDefinition.MinWidth" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.ColumnDefinition.Width">
      <summary>
                    Gets the calculated width of a <see cref="T:System.Windows.Controls.ColumnDefinition" /> element, or sets the <see cref="T:System.Windows.GridLength" /> value of a column that is defined by the <see cref="T:System.Windows.Controls.ColumnDefinition" />. 
                </summary>
      <returns>
                    The <see cref="T:System.Windows.GridLength" /> that represents the width of the column. The default value is 1.0.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.ColumnDefinition.WidthProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.ColumnDefinition.Width" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.ColumnDefinition.Width" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.ColumnDefinitionCollection">
      <summary>
                    Provides access to an ordered, strongly typed collection of <see cref="T:System.Windows.Controls.ColumnDefinition" /> objects.
                </summary>
    </member>
    <member name="T:System.Windows.Controls.ComboBox">
      <summary>
                    Represents a selection control that combines a non-editable text box and a popup containing a list box that allows users to select an item from a list. 
                </summary>
    </member>
    <member name="M:System.Windows.Controls.ComboBox.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.ComboBox" /> class. . 
                </summary>
    </member>
    <member name="M:System.Windows.Controls.ComboBox.ArrangeOverride(System.Windows.Size)">
      <summary>
                    Arranges and sizes the combo box control and its contents.
                </summary>
      <returns>
                    The actual size of the combo box.
                </returns>
      <param name="arrangeBounds">
                    The size allowed for the combo box control.
                </param>
    </member>
    <member name="E:System.Windows.Controls.ComboBox.DropDownClosed">
      <summary>
                    Occurs when the popup portion of the combo box closes.
                </summary>
    </member>
    <member name="E:System.Windows.Controls.ComboBox.DropDownOpened">
      <summary>
                    Occurs when the popup portion of the combo box opens.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.ComboBox.GetContainerForItemOverride">
      <summary>
                    Retrieves an empty combo box item.
                </summary>
      <returns>
                    An empty combo box item.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.ComboBox.IsDropDownOpen">
      <summary>
                    Gets or sets a value that indicates whether the popup portion of the combo box is currently open.
                </summary>
      <returns>true if the popup portion is open; otherwise, false. The default is false.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.ComboBox.IsDropDownOpenProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.ComboBox.IsDropDownOpen" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.ComboBox.IsDropDownOpen" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.ComboBox.IsEditable">
      <summary>
                    Gets a value that indicates whether the user can edit text in the text box portion of a combo box. This property always returns false.
                </summary>
      <returns>false in all cases.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.ComboBox.IsItemItsOwnContainerOverride(System.Object)">
      <summary>
                    Determines whether the specified item is (or is eligible to be) its own item container. 
                </summary>
      <returns>true if the item is a <see cref="T:System.Windows.Controls.ComboBoxItem" />; otherwise, false. The default is false.
                </returns>
      <param name="item">
                    The item to evaluate.
                </param>
    </member>
    <member name="F:System.Windows.Controls.ComboBox.IsSelectionActiveProperty">
      <summary>
                    Identifies the IsSelectionActive attached property.
                </summary>
      <returns>
                    The identifier for the IsSelectionActive attached property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.ComboBox.IsSelectionBoxHighlighted">
      <summary>
                    Gets a value that indicates whether the <see cref="P:System.Windows.Controls.ComboBox.SelectionBoxItem" /> is highlighted.
                </summary>
      <returns>true if the <see cref="P:System.Windows.Controls.ComboBox.SelectionBoxItem" /> is highlighted; otherwise, false. The default is true.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.ComboBox.ItemContainerStyle">
      <summary>
                    Gets or sets the style applied to the container generated for each item in the combo box.
                </summary>
      <returns>
                    The style applied to the container generated for each item in the combo box.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.ComboBox.ItemContainerStyleProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.ComboBox.ItemContainerStyle" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.ComboBox.ItemContainerStyle" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.ComboBox.MaxDropDownHeight">
      <summary>
                    Gets or sets the maximum height of the popup that lists combo box items.
                </summary>
      <returns>
                    The maximum height of the popup that lists combo box items. The default is infinity.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.ComboBox.MaxDropDownHeightProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.ComboBox.MaxDropDownHeight" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.ComboBox.MaxDropDownHeight" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.ComboBox.OnApplyTemplate">
      <summary>
                    Builds the visual tree for the <see cref="T:System.Windows.Controls.ComboBox" /> when a new template is applied.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.ComboBox.OnCreateAutomationPeer">
      <summary>
                    Returns a <see cref="T:System.Windows.Automation.Peers.ComboBoxAutomationPeer" /> for use by the Silverlight automation infrastructure.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Automation.Peers.ComboBoxAutomationPeer" /> for the <see cref="T:System.Windows.Controls.ComboBox" /> object.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.ComboBox.OnDropDownClosed(System.EventArgs)">
      <summary>
                    Raises the <see cref="E:System.Windows.Controls.ComboBox.DropDownClosed" /> event.
                </summary>
      <param name="e">
                    The event data.
                </param>
    </member>
    <member name="M:System.Windows.Controls.ComboBox.OnDropDownOpened(System.EventArgs)">
      <summary>
                    Raises the <see cref="E:System.Windows.Controls.ComboBox.DropDownOpened" /> event.
                </summary>
      <param name="e">
                    The event data.
                </param>
    </member>
    <member name="M:System.Windows.Controls.ComboBox.OnGotFocus(System.Windows.RoutedEventArgs)">
      <summary>
                    Provides handling for the <see cref="E:System.Windows.UIElement.GotFocus" /> event.
                </summary>
      <param name="e">
                    The event data.
                </param>
    </member>
    <member name="M:System.Windows.Controls.ComboBox.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>
                    Provides handling for the <see cref="E:System.Windows.UIElement.KeyDown" /> event.
                </summary>
      <param name="e">
                    The event data
                </param>
    </member>
    <member name="M:System.Windows.Controls.ComboBox.OnLostFocus(System.Windows.RoutedEventArgs)">
      <summary>
                    Provides handling for the <see cref="E:System.Windows.UIElement.LostFocus" /> event.
                </summary>
      <param name="e">
                    The event data.
                </param>
    </member>
    <member name="M:System.Windows.Controls.ComboBox.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
      <summary>
                    Provides handling for the <see cref="E:System.Windows.UIElement.MouseEnter" /> event that occurs when the mouse pointer enters this control.
                </summary>
      <param name="e">
                    The event data.
                </param>
    </member>
    <member name="M:System.Windows.Controls.ComboBox.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
      <summary>
                    Provides handling for the <see cref="E:System.Windows.UIElement.MouseLeave" /> event that occurs when the mouse pointer leaves the combo box.
                </summary>
      <param name="e">
                    The event data.
                </param>
    </member>
    <member name="M:System.Windows.Controls.ComboBox.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>
                    Provides handling for the <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> event that occurs when the left mouse button is pressed while the mouse pointer is over the combo box.
                </summary>
      <param name="e">
                    The event data.
                </param>
    </member>
    <member name="M:System.Windows.Controls.ComboBox.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
      <summary>
                    Prepares the specified item element to display the specified item.
                </summary>
      <param name="element">
                    Element used to display the specified item.
                </param>
      <param name="item">
                    The item to display.
                </param>
    </member>
    <member name="P:System.Windows.Controls.ComboBox.SelectionBoxItem">
      <summary>
                    Gets the item displayed in the selection box.
                </summary>
      <returns>
                    The item displayed in the selection box.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.ComboBox.SelectionBoxItemTemplate">
      <summary>
                    Gets the template applied to the selection box content. 
                </summary>
      <returns>
                    The template applied to the selection box content.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.ComboBoxItem">
      <summary>
                    Represents a selectable item contained in a <see cref="T:System.Windows.Controls.ComboBox" /> control.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.ComboBoxItem.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.ComboBoxItem" /> class. 
                </summary>
    </member>
    <member name="M:System.Windows.Controls.ComboBoxItem.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>
                    Provides handling for the <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" />event.
                </summary>
      <param name="e">
                    The event data.
                </param>
    </member>
    <member name="T:System.Windows.Controls.ContentControl">
      <summary>
                    Represents a control with a single piece of content. Controls such as <see cref="T:System.Windows.Controls.Button" />, <see cref="T:System.Windows.Controls.CheckBox" />, and <see cref="T:System.Windows.Controls.ScrollViewer" /> directly or indirectly inherit from this class.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.ContentControl.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.ContentControl" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.Controls.ContentControl.Content">
      <summary>
                    Gets or sets the value of the <see cref="T:System.Windows.Controls.ContentControl" /> dependency property.
                </summary>
      <returns>
                    An object that contains the control's content. The default is null.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.ContentControl.ContentProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.ContentControl.Content" /> dependency property 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.ContentControl.Content" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.ContentControl.ContentTemplate">
      <summary>
                    Gets or sets the data template that is used to display the content of the <see cref="T:System.Windows.Controls.ContentControl" />.
                </summary>
      <returns>
                    The data template that is used to display the content of the <see cref="T:System.Windows.Controls.ContentControl" />.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.ContentControl.ContentTemplateProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.ContentControl.ContentTemplate" /> dependency property 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.ContentControl.ContentTemplate" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.ContentControl.OnContentChanged(System.Object,System.Object)">
      <summary>
                    Called when the value of the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property changes. 
                </summary>
      <param name="oldContent">
                    The old value of the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property.
                </param>
      <param name="newContent">
                    The new value of the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property.
                </param>
    </member>
    <member name="T:System.Windows.Controls.ContentPresenter">
      <summary>
                    Displays the content of a <see cref="T:System.Windows.Controls.ContentPresenter" />.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.ContentPresenter.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.ContentPresenter" /> class.
                </summary>
    </member>
    <member name="P:System.Windows.Controls.ContentPresenter.Content">
      <summary>
                    Gets or sets the data that is used to generate the child elements of a <see cref="T:System.Windows.Controls.ContentPresenter" />.
                </summary>
      <returns>
                    The data that is used to generate the child elements. The default is null.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.ContentPresenter.ContentProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.ContentPresenter.Content" /> dependency property 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.ContentPresenter.Content" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.ContentPresenter.ContentTemplate">
      <summary>
                    Gets or sets the template that is used to display the content of the control.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.DataTemplate" /> that defines the visualization of the content. The default is null.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.ContentPresenter.ContentTemplateProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.ContentPresenter.ContentTemplate" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.ContentPresenter.ContentTemplate" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.Control">
      <summary>
                    Represents the base class for UI elements that use a <see cref="T:System.Windows.Controls.ControlTemplate" /> to define their appearance. 
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Control.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.Control" /> class. 
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Control.ApplyTemplate">
      <summary>
                    Loads the relevant control template so that its parts can be referenced.
                </summary>
      <returns>
                    Returns whether the visual tree was rebuilt by this call. true indicates the tree was rebuilt; false indicates that the previous visual tree was retained.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Control.Background">
      <summary>
                    Gets or sets a brush that provides the background of the control.
                </summary>
      <returns>
                    The brush that provides the background of the control. The default is null.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Control.BackgroundProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Control.Background" /> dependency property 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Control.Background" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Control.BorderBrush">
      <summary>
                    Gets or sets a brush that describes the border background of a control.
                </summary>
      <returns>
                    The brush that is used to fill the control's border; the default is null.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Control.BorderBrushProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Control.BorderBrush" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Control.BorderBrush" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Control.BorderThickness">
      <summary>
                    Gets or sets the border thickness of a control. 
                </summary>
      <returns>
                    A thickness value; the default is a thickness of 0 on all four sides.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Control.BorderThicknessProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Control.BorderThickness" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Control.BorderThickness" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Control.DefaultStyleKey">
      <summary>
                    Gets or sets the key that references the default style for the control.
                </summary>
      <returns>
                    The key that references the default style for the control. To work correctly as part of theme style lookup, this value is expected to be the <see cref="T:System.Type" /> of the control being styled.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Control.DefaultStyleKeyProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Control.DefaultStyleKey" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Control.DefaultStyleKey" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.Control.Focus">
      <summary>
                    Attempts to set the focus on the control.
                </summary>
      <returns>true if focus was set to the control, or focus was already on the control. false if the control is not focusable.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Control.FontFamily">
      <summary>
                    Gets or sets the font used to display text in the control.
                </summary>
      <returns>
                    The font used to display text in the control. The default is the "Portable User Interface".
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Control.FontFamilyProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Control.FontFamily" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Control.FontFamily" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Control.FontSize">
      <summary>
                    Gets or sets the size of the text in this control.
                </summary>
      <returns>
                    The size of the text in the <see cref="T:System.Windows.Controls.Control" />. The default is 11 (in pixels).
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Control.FontSizeProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Control.FontStyle" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Control.FontStyle" /> dependency property.
                
                    f
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Control.FontStretch">
      <summary>
                    Gets or sets the degree to which a font is condensed or expanded on the screen.
                </summary>
      <returns>
                    One of the values that specifies the degree to which a font is condensed or expanded on the screen. The default is <see cref="P:System.Windows.FontStretches.Normal" />.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Control.FontStretchProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Control.FontStretch" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Control.FontStretch" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Control.FontStyle">
      <summary>
                    Gets or sets the style in which the text is rendered.
                </summary>
      <returns>
                    One of the values that specifies the style in which the text is rendered.  The default is <see cref="P:System.Windows.FontStyles.Normal" />.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Control.FontStyleProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Control.FontStyle" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Control.FontStyle" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Control.FontWeight">
      <summary>
                    Gets or sets the thickness of the specified font.
                </summary>
      <returns>
                    One of the values that specifies the thickness of the specified font. The default is <see cref="P:System.Windows.FontWeights.Normal" />.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Control.FontWeightProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Control.FontWeight" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Control.FontWeight" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Control.Foreground">
      <summary>
                    Gets or sets a brush that describes the foreground color.
                </summary>
      <returns>
                    The brush that paints the foreground of the control. The default value is <see cref="P:System.Windows.Media.Colors.Black" />.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Control.ForegroundProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Control.Foreground" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Control.Foreground" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.Control.GetTemplateChild(System.String)">
      <summary>
                    Retrieves the named element in the instantiated <see cref="T:System.Windows.Controls.ControlTemplate" /> visual tree.
                </summary>
      <returns>
                    The named element from the template, if found. Can return null if no element with name <paramref name="childName" /> was found in the template.
                </returns>
      <param name="childName">
                    The name of element to find.
                </param>
    </member>
    <member name="P:System.Windows.Controls.Control.HorizontalContentAlignment">
      <summary>
                    Gets or sets the horizontal alignment of the control's content. 
                </summary>
      <returns>
                    One of the <see cref="T:System.Windows.HorizontalAlignment" /> values. The default is <see cref="F:System.Windows.HorizontalAlignment.Center" />.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Control.HorizontalContentAlignmentProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Control.HorizontalContentAlignment" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Control.HorizontalContentAlignment" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Control.IsEnabled">
      <summary>
                    Gets or sets a value indicating whether the user can interact with the control. 
                </summary>
      <returns>true if the user can interact with the control; otherwise, false.
                </returns>
    </member>
    <member name="E:System.Windows.Controls.Control.IsEnabledChanged">
      <summary>
                    Occurs when the <see cref="P:System.Windows.Controls.Control.IsEnabled" /> property changes.
                </summary>
    </member>
    <member name="F:System.Windows.Controls.Control.IsEnabledProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Control.IsEnabled" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Control.IsEnabled" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Control.IsTabStop">
      <summary>
                    Gets or sets a value that indicates whether a control is included in tab navigation. 
                </summary>
      <returns>true if the control is included in tab navigation; otherwise, false. The default is true.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Control.IsTabStopProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Control.IsTabStop" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Control.IsTabStop" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.Control.OnGotFocus(System.Windows.RoutedEventArgs)">
      <summary>
                    Called before the <see cref="E:System.Windows.UIElement.GotFocus" /> event occurs.
                </summary>
      <param name="e">
                    The data for the event. 
                </param>
    </member>
    <member name="M:System.Windows.Controls.Control.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>
                    Called before the <see cref="E:System.Windows.UIElement.KeyDown" /> event occurs.
                </summary>
      <param name="e">
                    The data for the event. 
                </param>
    </member>
    <member name="M:System.Windows.Controls.Control.OnKeyUp(System.Windows.Input.KeyEventArgs)">
      <summary>
                    Called before the <see cref="E:System.Windows.UIElement.KeyUp" /> event occurs.
                </summary>
      <param name="e">
                    The data for the event. 
                </param>
    </member>
    <member name="M:System.Windows.Controls.Control.OnLostFocus(System.Windows.RoutedEventArgs)">
      <summary>
                    Called before the <see cref="E:System.Windows.UIElement.LostFocus" /> event occurs.
                </summary>
      <param name="e">
                    The data for the event.
                </param>
    </member>
    <member name="M:System.Windows.Controls.Control.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
      <summary>
                    Called before the <see cref="E:System.Windows.UIElement.MouseEnter" /> event occurs.
                </summary>
      <param name="e">
                    The data for the event. 
                </param>
    </member>
    <member name="M:System.Windows.Controls.Control.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
      <summary>
                    Called before the <see cref="E:System.Windows.UIElement.MouseLeave" /> event occurs.
                </summary>
      <param name="e">
                    The data for the event. 
                </param>
    </member>
    <member name="M:System.Windows.Controls.Control.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>
                    Called before the <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> event occurs.
                </summary>
      <param name="e">
                    The data for the event. 
                </param>
    </member>
    <member name="M:System.Windows.Controls.Control.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>
                    Called before the <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> event occurs.
                </summary>
      <param name="e">
                    The data for the event. 
                </param>
    </member>
    <member name="M:System.Windows.Controls.Control.OnMouseMove(System.Windows.Input.MouseEventArgs)">
      <summary>
                    Called before the <see cref="E:System.Windows.UIElement.MouseMove" /> event occurs.
                </summary>
      <param name="e">
                    The data for the event. 
                </param>
    </member>
    <member name="P:System.Windows.Controls.Control.Padding">
      <summary>
                    Gets or sets the padding inside a control.
                </summary>
      <returns>
                    The amount of space between the content of a <see cref="T:System.Windows.Controls.Control" /> and its <see cref="P:System.Windows.FrameworkElement.Margin" /> or <see cref="T:System.Windows.Controls.Border" />.  The default is a thickness of 0 on all four sides.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Control.PaddingProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Control.Padding" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Control.Padding" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Control.TabIndex">
      <summary>
                    Gets or sets a value that determines the order in which elements receive focus when the user navigates through controls by using the TAB key.
                </summary>
      <returns>
                    A value that determines the order of logical navigation for a device. The default value is <see cref="F:System.Int32.MaxValue" />.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Control.TabIndexProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Control.TabIndex" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Control.TabIndex" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Control.TabNavigation">
      <summary>
                    Gets or sets a value that modifies how tabbing and <see cref="P:System.Windows.Controls.Control.TabIndex" /> work for this control.
                </summary>
      <returns>
                    A value of the enumeration. The default is <see cref="F:System.Windows.Input.KeyboardNavigationMode.Local" />.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Control.TabNavigationProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Control.TabNavigation" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Control.TabNavigation" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Control.Template">
      <summary>
                    Gets or sets a control template. 
                </summary>
      <returns>
                    The template that defines the appearance of the <see cref="T:System.Windows.Controls.Control" />.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Control.TemplateProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Control.Template" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Control.Template" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Control.VerticalContentAlignment">
      <summary>
                    Gets or sets the vertical alignment of the control's content.
                </summary>
      <returns>
                    One of the <see cref="T:System.Windows.VerticalAlignment" /> values. The default is <see cref="F:System.Windows.VerticalAlignment.Center" />.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Control.VerticalContentAlignmentProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Control.VerticalContentAlignment" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Control.VerticalContentAlignment" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.ControlTemplate">
      <summary>
                    Defines the element tree that is applied as a control template.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.ControlTemplate.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.ControlTemplate" /> class.
                </summary>
    </member>
    <member name="P:System.Windows.Controls.ControlTemplate.TargetType">
      <summary>
                    Gets or sets the type to which the <see cref="T:System.Windows.Controls.ControlTemplate" /> is applied.
                </summary>
      <returns>
                    The type to which the <see cref="T:System.Windows.Controls.ControlTemplate" /> is applied.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.Grid">
      <summary>
                    Defines a flexible grid area that consists of columns and rows.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Grid.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.Grid" /> class. 
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Grid.ArrangeOverride(System.Windows.Size)">
      <summary>
                    Arranges the content of a <see cref="T:System.Windows.Controls.Grid" /> element.
                </summary>
      <returns>
        <see cref="T:System.Windows.Size" /> that represents the arranged size of this <see cref="T:System.Windows.Controls.Grid" /> element and its children.
                </returns>
      <param name="arrangeSize">
                    Specifies the size this <see cref="T:System.Windows.Controls.Grid" /> element should use to arrange its child elements.
                </param>
    </member>
    <member name="P:System.Windows.Controls.Grid.Column">
      <summary>
                    Gets or sets a value that indicates which column child content within a <see cref="T:System.Windows.Controls.Grid" /> should appear in. 
                </summary>
      <returns>
                    An <see cref="T:System.Int32" /> value that represents the column in which child content should appear. The default value is 0.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Grid.ColumnDefinitions">
      <summary>
                    Gets a <see cref="T:System.Windows.Controls.ColumnDefinitionCollection" /> defined on this instance of <see cref="T:System.Windows.Controls.Grid" />. 
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Controls.ColumnDefinitionCollection" /> defined on this instance of <see cref="T:System.Windows.Controls.Grid" /></returns>
    </member>
    <member name="F:System.Windows.Controls.Grid.ColumnProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Grid.Column" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Grid.Column" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Grid.ColumnSpan">
      <summary>
                    Gets or sets a value that indicates the total number of columns that child content spans within a <see cref="T:System.Windows.Controls.Grid" />.
                </summary>
      <returns>
                    An <see cref="T:System.Int32" /> value that represents the number of columns that child content should span. The default value is 1.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Grid.ColumnSpanProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Grid.ColumnSpan" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Grid.ColumnSpan" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.Grid.GetColumn(System.Windows.FrameworkElement)">
      <summary>
                    Gets the value of the <see cref="P:System.Windows.Controls.Grid.Column" /> attached property from the specified <see cref="T:System.Windows.FrameworkElement" />.
                </summary>
      <returns>
                    The value of the <see cref="P:System.Windows.Controls.Grid.Column" /> attached property.
                </returns>
      <param name="element">
                    The element from which to read the property value.
                </param>
    </member>
    <member name="M:System.Windows.Controls.Grid.GetColumnSpan(System.Windows.FrameworkElement)">
      <summary>
                    Gets the value of the <see cref="P:System.Windows.Controls.Grid.ColumnSpan" /> attached property from the specified <see cref="T:System.Windows.FrameworkElement" />.
                </summary>
      <returns>
                    The value of the <see cref="P:System.Windows.Controls.Grid.ColumnSpan" /> attached property.
                </returns>
      <param name="element">
                    The element from which to read the property value.
                </param>
    </member>
    <member name="M:System.Windows.Controls.Grid.GetRow(System.Windows.FrameworkElement)">
      <summary>
                    Gets the value of the <see cref="P:System.Windows.Controls.Grid.Row" /> attached property from the specified <see cref="T:System.Windows.FrameworkElement" />. 
                </summary>
      <returns>
                    The value of the <see cref="P:System.Windows.Controls.Grid.Row" /> attached property.
                </returns>
      <param name="element">
                    The element from which to read the property value.
                </param>
    </member>
    <member name="M:System.Windows.Controls.Grid.GetRowSpan(System.Windows.FrameworkElement)">
      <summary>
                    Gets the value of the <see cref="P:System.Windows.Controls.Grid.RowSpan" /> attached property from the specified <see cref="T:System.Windows.FrameworkElement" />. 
                </summary>
      <returns>
                    The value of the <see cref="P:System.Windows.Controls.Grid.RowSpan" /> attached property.
                </returns>
      <param name="element">
                    The element from which to read the property value.
                </param>
    </member>
    <member name="M:System.Windows.Controls.Grid.MeasureOverride(System.Windows.Size)">
      <summary>
                    Measures the children of a <see cref="T:System.Windows.Controls.Grid" /> in anticipation of arranging them during the <see cref="M:System.Windows.Controls.Grid.ArrangeOverride(System.Windows.Size)" /> pass.
                </summary>
      <returns>
        <see cref="T:System.Windows.Size" /> that represents the maximum area available to the child content for layout.
                </returns>
      <param name="constraint">
                    Indicates an upper limit size that should not be exceeded.
                </param>
    </member>
    <member name="P:System.Windows.Controls.Grid.Row">
      <summary>
                    Gets or sets a value that indicates which row child content within a <see cref="T:System.Windows.Controls.Grid" /> should appear in.
                </summary>
      <returns>
                    An <see cref="T:System.Int32" /> value that represents the row in which child content should appear. The default value is 0.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Grid.RowDefinitions">
      <summary>
                    Gets a <see cref="T:System.Windows.Controls.RowDefinitionCollection" /> defined on this instance of <see cref="T:System.Windows.Controls.Grid" />. 
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Controls.RowDefinitionCollection" /> defined on this instance of <see cref="T:System.Windows.Controls.Grid" />.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Grid.RowProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Grid.Row" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Grid.Row" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Grid.RowSpan">
      <summary>
                    Gets or sets a value that indicates the total number of rows that child content spans within a <see cref="T:System.Windows.Controls.Grid" />.
                </summary>
      <returns>
                    An <see cref="T:System.Int32" /> value that represents the number of rows that child content should span. The default value is 1.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Grid.RowSpanProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Grid.RowSpan" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Grid.RowSpan" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.Grid.SetColumn(System.Windows.FrameworkElement,System.Int32)">
      <summary>
                    Sets the value of the <see cref="P:System.Windows.Controls.Grid.Column" /> attached property to the specified <see cref="T:System.Windows.FrameworkElement" />. 
                </summary>
      <param name="element">
                    The element on which to set the <see cref="P:System.Windows.Controls.Grid.Column" /> attached property.
                </param>
      <param name="value">
                    The property value to set.
                </param>
    </member>
    <member name="M:System.Windows.Controls.Grid.SetColumnSpan(System.Windows.FrameworkElement,System.Int32)">
      <summary>
                    Sets the value of the <see cref="P:System.Windows.Controls.Grid.ColumnSpan" /> attached property to the specified <see cref="T:System.Windows.FrameworkElement" />. 
                </summary>
      <param name="element">
                    The element on which to set the <see cref="P:System.Windows.Controls.Grid.ColumnSpan" /> attached property.
                </param>
      <param name="value">
                    The property value to set.
                </param>
    </member>
    <member name="M:System.Windows.Controls.Grid.SetRow(System.Windows.FrameworkElement,System.Int32)">
      <summary>
                    Sets the value of the <see cref="P:System.Windows.Controls.Grid.Row" /> attached property to the specified <see cref="T:System.Windows.FrameworkElement" />. 
                </summary>
      <param name="element">
                    The element on which to set the <see cref="P:System.Windows.Controls.Grid.Row" /> attached property.
                </param>
      <param name="value">
                    The property value to set.
                </param>
    </member>
    <member name="M:System.Windows.Controls.Grid.SetRowSpan(System.Windows.FrameworkElement,System.Int32)">
      <summary>
                    Sets the value of the <see cref="P:System.Windows.Controls.Grid.RowSpan" /> attached property to the specified <see cref="T:System.Windows.FrameworkElement" />. 
                </summary>
      <param name="element">
                    The element on which to set the <see cref="P:System.Windows.Controls.Grid.RowSpan" /> attached property.
                </param>
      <param name="value">
                    The property value to set.
                </param>
    </member>
    <member name="P:System.Windows.Controls.Grid.ShowGridLines">
      <summary>
                    Gets or sets a value that indicates whether grid lines are visible within this <see cref="T:System.Windows.Controls.Grid" />. 
                </summary>
      <returns>true if grid lines are visible; otherwise, false. The default value is false.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Grid.ShowGridLinesProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Grid.ShowGridLines" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Grid.ShowGridLines" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.HyperlinkButton">
      <summary>
                    Represents a button control that displays a hyperlink.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.HyperlinkButton.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.HyperlinkButton" /> class.
                </summary>
    </member>
    <member name="P:System.Windows.Controls.HyperlinkButton.NavigateUri">
      <summary>
                    Gets or sets the URI to navigate to when the <see cref="T:System.Windows.Controls.HyperlinkButton" /> is clicked. 
                </summary>
      <returns>
                    The URI to navigate to when the <see cref="T:System.Windows.Controls.HyperlinkButton" /> is clicked.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.HyperlinkButton.NavigateUriProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.HyperlinkButton.NavigateUri" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.HyperlinkButton.NavigateUri" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.HyperlinkButton.OnApplyTemplate">
      <summary>
                    Builds the visual tree for the <see cref="T:System.Windows.Controls.HyperlinkButton" /> when a new template is applied.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.HyperlinkButton.OnClick">
      <summary>
                    Provides handling for the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> event.
                </summary>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="P:System.Windows.Controls.HyperlinkButton.NavigateUri" /> property is not or cannot be converted to an absolute URI.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="P:System.Windows.Controls.HyperlinkButton.TargetName" /> property is set to a value that contains embedded whitespace.
                </exception>
    </member>
    <member name="M:System.Windows.Controls.HyperlinkButton.OnCreateAutomationPeer">
      <summary>
                    Returns a <see cref="T:System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer" /> for use by the Silverlight automation infrastructure.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer" /> for the hyperlink button object. 
                </returns>
    </member>
    <member name="P:System.Windows.Controls.HyperlinkButton.TargetName">
      <summary>
                    Gets or sets the name of a target window or frame to navigate to within the Web page specified by the <see cref="P:System.Windows.Controls.HyperlinkButton.NavigateUri" /> property.
                </summary>
      <returns>
                    The name of the target window or frame to navigate to within the Web page specified by the <see cref="P:System.Windows.Controls.HyperlinkButton.NavigateUri" /> property. 
                </returns>
    </member>
    <member name="F:System.Windows.Controls.HyperlinkButton.TargetNameProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.HyperlinkButton.TargetName" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.HyperlinkButton.TargetName" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.Image">
      <summary>
                    Represents a control that displays an image.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Image.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.Image" /> class. 
                </summary>
    </member>
    <member name="E:System.Windows.Controls.Image.ImageFailed">
      <summary>
                    Occurs when there is an error associated with image retrieval or format.
                </summary>
    </member>
    <member name="P:System.Windows.Controls.Image.Source">
      <summary>
                    Gets or sets the source for the image.
                </summary>
      <returns>
                    A source object for the drawn image.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Image.SourceProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Image.Source" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Image.Source" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Image.Stretch">
      <summary>
                    Gets or sets a value that describes how an <see cref="T:System.Windows.Controls.Image" /> should be stretched to fill the destination rectangle. 
                </summary>
      <returns>
        <see cref="T:System.Windows.Media.Stretch" />
                    A value of the enumeration that specifies how the source image is applied if the <see cref="P:System.Windows.FrameworkElement.Height" /> and <see cref="P:System.Windows.FrameworkElement.Width" /> of the <see cref="T:System.Windows.Controls.Image" /> are specified and are different than the source image's height and width.
                
                    The default value is Uniform.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Image.StretchProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Image.Stretch" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Image.Stretch" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.InkPresenter">
      <summary>
                    Implements a rectangular surface that displays ink strokes.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.InkPresenter.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.InkPresenter" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.Controls.InkPresenter.Strokes">
      <summary>
                    Gets or sets the strokes that the <see cref="T:System.Windows.Controls.InkPresenter" /> displays.
                </summary>
      <returns>
                    The collection of ink strokes that are displayed by the <see cref="T:System.Windows.Controls.InkPresenter" />.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.InkPresenter.StrokesProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.InkPresenter.Strokes" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.InkPresenter.Strokes" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.ItemCollection">
      <summary>
                    Holds the list of items that constitute the content of an <see cref="T:System.Windows.Controls.ItemsControl" />.
                </summary>
    </member>
    <member name="T:System.Windows.Controls.ItemsControl">
      <summary>
                    Represents a control that can be used to present a collection of items.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.ItemsControl.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.ItemsControl" /> class.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.ItemsControl.ClearContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
      <summary>
                    Undoes the effects of the <see cref="M:System.Windows.Controls.ItemsControl.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)" /> method.
                </summary>
      <param name="element">
                    The container element.
                </param>
      <param name="item">
                    The item.
                </param>
    </member>
    <member name="P:System.Windows.Controls.ItemsControl.DisplayMemberPath">
      <summary>
                    Gets or sets the name or path of the property that is displayed for each data item.
                </summary>
      <returns>
                    The name or path of the property that is displayed for each the data item in the control.  The default is an empty string ("").
                </returns>
    </member>
    <member name="F:System.Windows.Controls.ItemsControl.DisplayMemberPathProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.ItemsControl.DisplayMemberPath" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.ItemsControl.DisplayMemberPath" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.ItemsControl.GetContainerForItemOverride">
      <summary>
                    Creates or identifies the element that is used to display the given item.
                </summary>
      <returns>
                    The element that is used to display the given item.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.ItemsControl.IsItemItsOwnContainerOverride(System.Object)">
      <summary>
                    Determines if the specified item is (or is eligible to be) its own container.
                </summary>
      <returns>true if the item is (or is eligible to be) its own container; otherwise, false.
                </returns>
      <param name="item">
                    The item to check.
                </param>
    </member>
    <member name="P:System.Windows.Controls.ItemsControl.Items">
      <summary>
                    Gets the collection used to generate the content of the control.
                </summary>
      <returns>
                    The collection that is used to generate the content of the control, if it exists; otherwise, null. See Remarks. The default is an empty collection.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.ItemsControl.ItemsPanel">
      <summary>
                    Gets or sets the template that defines the panel that controls the layout of items.
                </summary>
      <returns>
                    An <see cref="T:System.Windows.Controls.ItemsPanelTemplate" /> that defines the panel to use for the layout of the items. The default value for the <see cref="T:System.Windows.Controls.ItemsControl" /> is an <see cref="T:System.Windows.Controls.ItemsPanelTemplate" /> that specifies a <see cref="T:System.Windows.Controls.StackPanel" />.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.ItemsControl.ItemsPanelProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.ItemsControl.ItemsPanel" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.ItemsControl.ItemsPanel" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.ItemsControl.ItemsSource">
      <summary>
                    Gets or sets a collection used to generate the content of the <see cref="T:System.Windows.Controls.ItemsControl" />. 
                </summary>
      <returns>
                    The  object that is used to generate the content of the <see cref="T:System.Windows.Controls.ItemsControl" />. The default is null.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.ItemsControl.ItemsSourceProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.ItemsControl.ItemsSource" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.ItemsControl.ItemsSource" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.ItemsControl.ItemTemplate">
      <summary>
                    Gets or sets the <see cref="T:System.Windows.DataTemplate" /> used to display each item. 
                </summary>
      <returns>
                    The template that specifies the visualization of the data objects. The default is null.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.ItemsControl.ItemTemplateProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.ItemsControl.ItemTemplate" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.ItemsControl.ItemTemplate" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.ItemsControl.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>
                    Invoked when the <see cref="P:System.Windows.Controls.ItemsControl.Items" /> property changes.
                </summary>
      <param name="e">
                    Information about the change.
                </param>
    </member>
    <member name="M:System.Windows.Controls.ItemsControl.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
      <summary>
                    Prepares the specified element to display the specified item. 
                </summary>
      <param name="element">
                    The element used to display the specified item.
                </param>
      <param name="item">
                    The item to display.
                </param>
    </member>
    <member name="T:System.Windows.Controls.ItemsPanelTemplate">
      <summary>
                    Specifies the panel that the <see cref="T:System.Windows.Controls.ItemsPresenter" /> creates for the layout of the items of an <see cref="T:System.Windows.Controls.ItemsControl" />.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.ItemsPanelTemplate.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.ItemsPanelTemplate" /> class. 
                </summary>
    </member>
    <member name="T:System.Windows.Controls.ItemsPresenter">
      <summary>
                    Specifies where items are placed in a control, usually an <see cref="T:System.Windows.Controls.ItemsControl" />.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.ItemsPresenter.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.ItemsPresenter" /> class. 
                </summary>
    </member>
    <member name="T:System.Windows.Controls.ListBox">
      <summary>
                    Contains a list of selectable items. 
                </summary>
    </member>
    <member name="M:System.Windows.Controls.ListBox.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.ListBox" /> class. 
                </summary>
    </member>
    <member name="M:System.Windows.Controls.ListBox.GetContainerForItemOverride">
      <summary>
                    Creates or identifies the element used to display a specified item. 
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Controls.ListBoxItem" /> corresponding to a specified item.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.ListBox.IsItemItsOwnContainerOverride(System.Object)">
      <summary>
                    Determines if the specified item is (or is eligible to be) its own item container. 
                </summary>
      <returns>true if the item is its own item container; otherwise, false.
                </returns>
      <param name="item">
                    The specified item.
                </param>
    </member>
    <member name="F:System.Windows.Controls.ListBox.IsSelectionActiveProperty">
      <summary>
                    Identifies the IsSelectionActive dependency property. 
                </summary>
      <returns>
                    The identifier for the IsSelectionActive dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.ListBox.ItemContainerStyle">
      <summary>
                    Gets or sets the style that is used when rendering the item containers. 
                </summary>
      <returns>
                    The style applied to the item containers. The default is null.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.ListBox.ItemContainerStyleProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.ListBox.ItemContainerStyle" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.ListBox.ItemContainerStyle" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.ListBox.OnApplyTemplate">
      <summary>
                    Builds the visual tree for the <see cref="T:System.Windows.Controls.ListBox" /> control when a new template is applied.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.ListBox.OnCreateAutomationPeer">
      <summary>
                    Returns a <see cref="T:System.Windows.Automation.Peers.ListBoxAutomationPeer" /> for the Silverlight automation infrastructure.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Automation.Peers.ListBoxAutomationPeer" /> for the <see cref="T:System.Windows.Controls.ListBox" /> object.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.ListBox.OnGotFocus(System.Windows.RoutedEventArgs)">
      <summary>
                    Provides handling for the <see cref="E:System.Windows.UIElement.GotFocus" /> event.
                </summary>
      <param name="e">
                    The event data.
                </param>
    </member>
    <member name="M:System.Windows.Controls.ListBox.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>
                    Provides handling for the <see cref="E:System.Windows.UIElement.KeyDown" /> event that occurs when a key is pressed while the control has focus.
                </summary>
      <param name="e">
                    The event data.
                </param>
    </member>
    <member name="M:System.Windows.Controls.ListBox.OnLostFocus(System.Windows.RoutedEventArgs)">
      <summary>
                    Provides handling for the <see cref="E:System.Windows.UIElement.LostFocus" /> event.
                </summary>
      <param name="e">
                    The event data.
                </param>
    </member>
    <member name="M:System.Windows.Controls.ListBox.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
      <summary>
                    Prepares the specified element to display the specified item. 
                </summary>
      <param name="element">
                    Element used to display the specified item.
                </param>
      <param name="item">
                    The specified item.
                </param>
    </member>
    <member name="M:System.Windows.Controls.ListBox.ScrollIntoView(System.Object)">
      <summary>
                    Causes the object to scroll into view. 
                </summary>
      <param name="item">
                    The object to scroll.
                </param>
    </member>
    <member name="T:System.Windows.Controls.ListBoxItem">
      <summary>
                    Represents a selectable item in a <see cref="T:System.Windows.Controls.ListBox" />. 
                </summary>
    </member>
    <member name="M:System.Windows.Controls.ListBoxItem.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.ListBoxItem" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.Controls.ListBoxItem.IsSelected">
      <summary>
                    Gets or sets a value that indicates whether a <see cref="T:System.Windows.Controls.ListBoxItem" /> is selected. 
                </summary>
      <returns>true if the item is selected; otherwise, false. The default is false.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.ListBoxItem.IsSelectedProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.ListBoxItem.IsSelected" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.ListBoxItem.IsSelected" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.ListBoxItem.OnApplyTemplate">
      <summary>
                    Builds the visual tree for the <see cref="T:System.Windows.Controls.ListBoxItem" /> control when a new template is applied.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.ListBoxItem.OnCreateAutomationPeer">
      <summary>
                    Returns a <see cref="T:System.Windows.Automation.Peers.ListBoxItemAutomationPeer" /> for the Silverlight automation infrastructure.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Automation.Peers.ListBoxItemAutomationPeer" /> for the <see cref="T:System.Windows.Controls.ListBoxItem" />.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.ListBoxItem.OnGotFocus(System.Windows.RoutedEventArgs)">
      <summary>
                    Provides handling for the <see cref="E:System.Windows.UIElement.GotFocus" /> event.
                </summary>
      <param name="e">
                    The event data.
                </param>
    </member>
    <member name="M:System.Windows.Controls.ListBoxItem.OnLostFocus(System.Windows.RoutedEventArgs)">
      <summary>
                    Provides handling for the <see cref="E:System.Windows.UIElement.LostFocus" /> event.
                </summary>
      <param name="e">
                    The event data.
                </param>
    </member>
    <member name="M:System.Windows.Controls.ListBoxItem.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
      <summary>
                    Provides handling for the <see cref="E:System.Windows.UIElement.MouseEnter" /> event.
                </summary>
      <param name="e">
                    The event data.
                </param>
    </member>
    <member name="M:System.Windows.Controls.ListBoxItem.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
      <summary>
                    Provides handling for the <see cref="E:System.Windows.UIElement.MouseLeave" /> event.
                </summary>
      <param name="e">
                    The event data.
                </param>
    </member>
    <member name="M:System.Windows.Controls.ListBoxItem.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>
                    Provides handling for the <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> event.
                </summary>
      <param name="e">
                    The event data.
                </param>
    </member>
    <member name="T:System.Windows.Controls.MediaElement">
      <summary>
                    Represents an object that contains audio, video, or both.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.MediaElement.#ctor">
      <summary>
                    Instantiates a new instance of the <see cref="T:System.Windows.Controls.MediaElement" /> class.
                </summary>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.Attributes">
      <summary>
                    Gets the collection of attributes that corresponds to the current entry in the ASX file that <see cref="P:System.Windows.Controls.MediaElement.Source" /> is set to.
                </summary>
      <returns>
                    The collection of attributes that corresponds to the current entry in the ASX file that <see cref="P:System.Windows.Controls.MediaElement.Source" /> is set to.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.AttributesProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.MediaElement.Attributes" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.MediaElement.Attributes" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.AudioStreamCount">
      <summary>
                    Gets the number of audio streams available in the current media file. 
                </summary>
      <returns>
                    The number of audio streams that exist in the source media file. The default value is 0.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.AudioStreamCountProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.MediaElement.AudioStreamCount" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.MediaElement.AudioStreamCount" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.AudioStreamIndex">
      <summary>
                    Gets or sets the index of the audio stream that plays along with the video component. The collection of audio streams is composed at run time and represents all audio streams available within the media file. 
                </summary>
      <returns>
                    The index within the media file of the audio component that plays along with the video component. The index can be unspecified, in which case the value is null. The default value is null (see the "Remarks" section).
                </returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.AudioStreamIndexProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.MediaElement.AudioStreamIndex" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.MediaElement.AudioStreamIndex" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.AutoPlay">
      <summary>
                    Gets or sets a value that indicates whether media will begin playback automatically when the <see cref="P:System.Windows.Controls.MediaElement.Source" /> property is set. 
                </summary>
      <returns>true if playback is automatic; otherwise, false. The default value is true.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.AutoPlayProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.MediaElement.AutoPlay" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.MediaElement.AutoPlay" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.Balance">
      <summary>
                    Gets or sets a ratio of volume across stereo speakers. 
                </summary>
      <returns>
                    The ratio of volume across speakers in the range between -1 and 1. The default value is 0.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.BalanceProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.MediaElement.Balance" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.MediaElement.Balance" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.BufferingProgress">
      <summary>
                    Gets a value that indicates the current buffering progress. 
                </summary>
      <returns>
                    The amount of buffering that is completed for media content. The value ranges from 0 to 1. Multiply by 100 to obtain a percentage. The default value is 0.
                </returns>
    </member>
    <member name="E:System.Windows.Controls.MediaElement.BufferingProgressChanged">
      <summary>
                    Occurs when the <see cref="P:System.Windows.Controls.MediaElement.BufferingProgress" /> property changes.
                </summary>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.BufferingProgressProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.MediaElement.BufferingProgress" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.MediaElement.BufferingProgress" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.BufferingTime">
      <summary>
                    Gets or sets the amount of time to buffer.
                </summary>
      <returns>
                    The amount of time to buffer. The default value is a <see cref="T:System.TimeSpan" /> with value of 5 seconds (0:0:05).
                </returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.BufferingTimeProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.MediaElement.BufferingTime" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.MediaElement.BufferingTime" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.CanPause">
      <summary>
                    Gets a value indicating if media can be paused if the <see cref="M:System.Windows.Controls.MediaElement.Pause" /> method is called. 
                </summary>
      <returns>true if the media can be paused; otherwise, false. The default is false.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.CanPauseProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.MediaElement.CanPause" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.MediaElement.CanPause" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.CanSeek">
      <summary>
                    Gets a value indicating if media can be repositioned by setting the value of the <see cref="P:System.Windows.Controls.MediaElement.Position" /> property. 
                </summary>
      <returns>true if the media can be repositioned; otherwise, false.
                
                    The default value is false.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.CanSeekProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.MediaElement.CanSeek" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.MediaElement.CanSeek" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.CurrentState">
      <summary>
                    Gets the status of the <see cref="T:System.Windows.Controls.MediaElement" />. 
                </summary>
      <returns>
                    The current state of the <see cref="T:System.Windows.Controls.MediaElement" />. The state can be one of the following (as defined in the <see cref="T:System.Windows.Media.MediaElementState" /> enumeration): <see cref="F:System.Windows.Media.MediaElementState.Buffering" />, <see cref="F:System.Windows.Media.MediaElementState.Closed" />, <see cref="F:System.Windows.Media.MediaElementState.Opening" />, <see cref="F:System.Windows.Media.MediaElementState.Paused" />, <see cref="F:System.Windows.Media.MediaElementState.Playing" />, or <see cref="F:System.Windows.Media.MediaElementState.Stopped" />.
                
                    The default value is <see cref="F:System.Windows.Media.MediaElementState.Closed" />.
                </returns>
    </member>
    <member name="E:System.Windows.Controls.MediaElement.CurrentStateChanged">
      <summary>
                    Occurs when the value of the <see cref="P:System.Windows.Controls.MediaElement.CurrentState" /> property changes.
                </summary>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.CurrentStateProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.MediaElement.CurrentState" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.MediaElement.CurrentState" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.DownloadProgress">
      <summary>
                    Gets a percentage value indicating the amount of download completed for content located on a remote server.
                </summary>
      <returns>
                    A value that indicates the amount of download completed for content that is located on a remote server. The value ranges from 0 to 1. Multiply by 100 to obtain a percentage. The default value is 0.
                </returns>
    </member>
    <member name="E:System.Windows.Controls.MediaElement.DownloadProgressChanged">
      <summary>
                    Occurs when the <see cref="P:System.Windows.Controls.MediaElement.DownloadProgress" /> property has changed.
                </summary>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.DownloadProgressOffset">
      <summary>
                    Gets the offset of the download progress. 
                </summary>
      <returns>
                    The offset of the download progress.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.DownloadProgressOffsetProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.MediaElement.DownloadProgressOffset" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.MediaElement.DownloadProgressOffset" /> dependency property.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.DownloadProgressProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.MediaElement.DownloadProgress" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.MediaElement.DownloadProgress" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.DroppedFramesPerSecond">
      <summary>
                    Gets the number of frames per second being dropped by the media.
                </summary>
      <returns>
                    The number of frames per second being dropped by the media.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.DroppedFramesPerSecondProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.MediaElement.DroppedFramesPerSecond" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.MediaElement.DroppedFramesPerSecond" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.IsMuted">
      <summary>
                    Gets or sets a value indicating whether the audio is muted. 
                </summary>
      <returns>true if audio is muted; otherwise, false. The default is false.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.IsMutedProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.MediaElement.IsMuted" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.MediaElement.IsMuted" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.LicenseAcquirer">
      <summary>
                    Gets or sets the <see cref="T:System.Windows.Media.LicenseAcquirer" /> associated with the <see cref="T:System.Windows.Controls.MediaElement" />. The <see cref="T:System.Windows.Media.LicenseAcquirer" /> handles acquiring licenses for DRM encrypted content.
                </summary>
      <returns>
                    The <see cref="T:System.Windows.Media.LicenseAcquirer" /> associated with the <see cref="T:System.Windows.Controls.MediaElement" />. The default is null.
                </returns>
    </member>
    <member name="E:System.Windows.Controls.MediaElement.MarkerReached">
      <summary>
                    Occurs when a timeline marker is encountered during media playback.
                </summary>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.Markers">
      <summary>
                    Gets the collection of timeline markers associated with the currently loaded media file.
                </summary>
      <returns>
                    The collection of timeline markers (represented as <see cref="T:System.Windows.Media.TimelineMarker" /> objects) associated with the currently loaded media file. 
                
                    The default value is an empty collection.
                </returns>
    </member>
    <member name="E:System.Windows.Controls.MediaElement.MediaEnded">
      <summary>
                    Occurs when the <see cref="T:System.Windows.Controls.MediaElement" />  is no longer playing audio or video.
                </summary>
    </member>
    <member name="E:System.Windows.Controls.MediaElement.MediaFailed">
      <summary>
                    Occurs when there is an error associated with the media <see cref="P:System.Windows.Controls.MediaElement.Source" />.
                </summary>
    </member>
    <member name="E:System.Windows.Controls.MediaElement.MediaOpened">
      <summary>
                    Occurs when the media stream has been validated and opened, and the file headers have been read.
                </summary>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.NaturalDuration">
      <summary>
                    Gets the duration of the media file currently opened.
                </summary>
      <returns>
                    The natural duration of the media. The default value is <see cref="P:System.Windows.Duration.Automatic" />, which is the value held if you query this property before <see cref="E:System.Windows.Controls.MediaElement.MediaOpened" />. 
                </returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.NaturalDurationProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.MediaElement.NaturalDuration" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.MediaElement.NaturalDuration" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.NaturalVideoHeight">
      <summary>
                    Gets the height of the video associated with the media.
                </summary>
      <returns>
                    The height of the video that is associated with the media, in pixels. Audio files will return 0. The default value is 0.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.NaturalVideoHeightProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.MediaElement.NaturalVideoHeight" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.MediaElement.NaturalVideoHeight" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.NaturalVideoWidth">
      <summary>
                    Gets the width of the video associated with the media.
                </summary>
      <returns>
                    The width of the video associated with the media. The default value is 0.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.NaturalVideoWidthProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.MediaElement.NaturalVideoWidth" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.MediaElement.NaturalVideoWidth" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.MediaElement.Pause">
      <summary>
                    Pauses media at the current position.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.MediaElement.Play">
      <summary>
                    Plays media from the current position.
                </summary>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.Position">
      <summary>
                    Gets or sets the current position of progress through the media's playback time.
                </summary>
      <returns>
                    The amount of time since the beginning of the media. The default is a <see cref="T:System.TimeSpan" /> with value 0:0:0.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.PositionProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.MediaElement.Position" /> dependency property.
                </summary>
      <returns>
                    The identifier the <see cref="P:System.Windows.Controls.MediaElement.Position" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.RenderedFramesPerSecond">
      <summary>
                    Gets the number of frames per second being rendered by the media.
                </summary>
      <returns>
                    The number of frames per second being rendered by the media.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.RenderedFramesPerSecondProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.MediaElement.RenderedFramesPerSecond" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.MediaElement.RenderedFramesPerSecond" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.MediaElement.SetSource(System.IO.Stream)">
      <summary>
                    Sets the <see cref="P:System.Windows.Controls.MediaElement.Source" /> property using the supplied stream.
                </summary>
      <param name="stream">
                    A stream that contains a valid media source.
                </param>
    </member>
    <member name="M:System.Windows.Controls.MediaElement.SetSource(System.Windows.Media.MediaStreamSource)">
      <summary>
                    This sets the source of a <see cref="T:System.Windows.Controls.MediaElement" /> to a subclass of <see cref="T:System.Windows.Media.MediaStreamSource" />.
                </summary>
      <param name="mediaStreamSource">
                    A subclass of <see cref="T:System.Windows.Media.MediaStreamSource" />.
                </param>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.Source">
      <summary>
                    Gets or sets a media source on the <see cref="T:System.Windows.Controls.MediaElement" />. 
                </summary>
      <returns>
                    A string that specifies the source of the element, as a Uniform Resource Identifier (URI). The default value is null.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.SourceProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.MediaElement.Source" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.MediaElement.Source" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.MediaElement.Stop">
      <summary>
                    Stops and resets media to be played from the beginning.
                </summary>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.Stretch">
      <summary>
                    Gets or sets a <see cref="T:System.Windows.Media.Stretch" /> value that describes how a <see cref="T:System.Windows.Controls.MediaElement" /> fills the destination rectangle. 
                </summary>
      <returns>
                    A value of the enumeration that specifies the stretch behavior for the rendered media. 
                
                    The default value is Uniform.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.StretchProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.MediaElement.Stretch" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.MediaElement.Stretch" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.Volume">
      <summary>
                    Gets or sets the media's volume. 
                </summary>
      <returns>
                    The media's volume represented on a linear scale between 0 and 1. The default is 0.5.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.VolumeProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.MediaElement.Volume" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.MediaElement.Volume" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.MultiScaleImage">
      <summary>
                    This object enables users to open a multi-resolution image which can be zoomed in on and panned across. This is one of the key objects of Silverlight's Deep Zoom technology.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.MultiScaleImage.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.MultiScaleImage" /> class.
                </summary>
    </member>
    <member name="P:System.Windows.Controls.MultiScaleImage.AspectRatio">
      <summary>
                    Gets the aspect ratio of the image used as the source of the <see cref="T:System.Windows.Controls.MultiScaleImage" />. The aspect ratio is the width of the image divided by its height.
                </summary>
      <returns>
                    The aspect ratio of the image used as the source of the <see cref="T:System.Windows.Controls.MultiScaleImage" />. The aspect ratio is the width of the image divided by its height.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.MultiScaleImage.AspectRatioProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.MultiScaleImage.AspectRatio" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.MultiScaleImage.AspectRatio" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.MultiScaleImage.ElementToLogicalPoint(System.Windows.Point)">
      <summary>
                    Gets a point with logical coordinates (value of 0-1) from a point of the <see cref="T:System.Windows.Controls.MultiScaleImage" />. 
                </summary>
      <returns>
                    The logical point translated from the elementPoint.
                </returns>
      <param name="elementPoint">
                    The point on the <see cref="T:System.Windows.Controls.MultiScaleImage" /> to translate into a point with logical coordinates (value of 0-1).
                </param>
    </member>
    <member name="E:System.Windows.Controls.MultiScaleImage.ImageFailed">
      <summary>
                    Occurs if the download of a tile times out or fails for another reason.
                </summary>
    </member>
    <member name="E:System.Windows.Controls.MultiScaleImage.ImageOpenFailed">
      <summary>
                    Occurs if the first piece of metadata used to open the image fails. If this event occurs no parts of the image will open successfully.
                </summary>
    </member>
    <member name="E:System.Windows.Controls.MultiScaleImage.ImageOpenSucceeded">
      <summary>
                    Occurs when the first piece of metadata that is needed to load the rest of the tiles opens.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.MultiScaleImage.LogicalToElementPoint(System.Windows.Point)">
      <summary>
                    Gets a point with pixel coordinates relative to the <see cref="T:System.Windows.Controls.MultiScaleImage" /> from a logical point (value between 0-1).
                </summary>
      <returns>
                    Point using pixel coordinates relative to the <see cref="T:System.Windows.Controls.MultiScaleImage" /> translated from logicalPoint.
                </returns>
      <param name="logicalPoint">
                    The logical point to translate into pixel coordinates relative to the <see cref="T:System.Windows.Controls.MultiScaleImage" />.
                </param>
    </member>
    <member name="E:System.Windows.Controls.MultiScaleImage.MotionFinished">
      <summary>
                    Occurs when the zoom or pan animation ends. 
                </summary>
    </member>
    <member name="P:System.Windows.Controls.MultiScaleImage.Source">
      <summary>
                    Gets or sets the URI of the image to be used by the <see cref="T:System.Windows.Controls.MultiScaleImage" />.
                </summary>
      <returns>
                    The URI of the image to be used by the <see cref="T:System.Windows.Controls.MultiScaleImage" />.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.MultiScaleImage.SourceProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.MultiScaleImage.Source" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.MultiScaleImage.Source" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.MultiScaleImage.SubImages">
      <summary>
                    Gets the collection of <see cref="T:System.Windows.Controls.MultiScaleSubImage" /> objects within the multiresolution image used by the <see cref="T:System.Windows.Controls.MultiScaleImage" />.
                </summary>
      <returns>
                    The collection of <see cref="T:System.Windows.Controls.MultiScaleSubImage" /> objects within the multiresolution image used by the <see cref="T:System.Windows.Controls.MultiScaleImage" />.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.MultiScaleImage.SubImagesProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.MultiScaleImage.SubImages" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.MultiScaleImage.SubImages" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.MultiScaleImage.UseSprings">
      <summary>
                    Gets or sets whether the <see cref="T:System.Windows.Controls.MultiScaleImage" /> uses spring animations.
                </summary>
      <returns>
                    Whether the <see cref="T:System.Windows.Controls.MultiScaleImage" /> uses spring animations or not. The default value is true.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.MultiScaleImage.UseSpringsProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.MultiScaleImage.UseSprings" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.MultiScaleImage.UseSprings" /> dependency property.
                </returns>
    </member>
    <member name="E:System.Windows.Controls.MultiScaleImage.ViewportChanged">
      <summary>
                    Occurs when the viewport (the area of the image displayed) changes. 
                </summary>
    </member>
    <member name="P:System.Windows.Controls.MultiScaleImage.ViewportOrigin">
      <summary>
                    Gets or sets the top-left corner of the area of the image to be displayed. 
                </summary>
      <returns>
                    The point of the top-left corner of the rectangular area of the image to be displayed. The coordinates of the point are in local coordinates (0-1) relative to the displayed image. For example, a ViewportOrigin point value of 1,1 would specify an origin on the lower right-hand corner of the image. Because this origin is for the top-left corner of the rectangular area of the image displayed, a value of 1, 1 would actually show nothing of the image (area would be lower and to the right of the image). As another example, a point at 0.5, 0.5 would be directly in the center of the image and therefore the area shown would be to the lower-right of the image center.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.MultiScaleImage.ViewportOriginProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.MultiScaleImage.ViewportOrigin" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.MultiScaleImage.ViewportOrigin" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.MultiScaleImage.ViewportWidth">
      <summary>
                    Gets or sets the width of the area of the image displayed.
                </summary>
      <returns>
                    The width of the area of the image displayed. This value is in logical coordinates. For example a value of 1 displays the entire image (no zoom), a value of 0.5 is 200% zoomed in and a value of 0 is completely zoomed (user cannot see the image at all). A value above 1 is zooming out from the image. For example, a value of 2 means that the image will take up half the size of the <see cref="T:System.Windows.Controls.MultiScaleImage" /> control area (50% zoom). 
                </returns>
    </member>
    <member name="F:System.Windows.Controls.MultiScaleImage.ViewportWidthProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.MultiScaleImage.ViewportWidth" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.MultiScaleImage.ViewportWidth" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.MultiScaleImage.ZoomAboutLogicalPoint(System.Double,System.Double,System.Double)">
      <summary>
                    Enables a user to zoom in on a point of the <see cref="T:System.Windows.Controls.MultiScaleImage" />.
                </summary>
      <param name="zoomIncrementFactor">
                    Specifies the zoom. This number is greater than 0. A value of 1 shows the image fitting the allotted screen size exactly and any number greater than 1 is zoomed in. If a value of 0 or less is used, failure is returned and no zoom changes are applied.  
                </param>
      <param name="zoomCenterLogicalX">
                    X coordinate for the point on the <see cref="T:System.Windows.Controls.MultiScaleImage" /> that is zoomed in on. This is a logical point (0-1). 
                </param>
      <param name="zoomCenterLogicalY">
                    Y coordinate for the point on the <see cref="T:System.Windows.Controls.MultiScaleImage" /> that is zoomed in on. This is a logical point (0-1).
                </param>
    </member>
    <member name="T:System.Windows.Controls.MultiScaleSubImage">
      <summary>
                    This class holds the properties for each sub-image within the <see cref="T:System.Windows.Controls.MultiScaleImage" />.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.MultiScaleSubImage.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.MultiScaleSubImage" /> class.
                </summary>
    </member>
    <member name="P:System.Windows.Controls.MultiScaleSubImage.AspectRatio">
      <summary>
                    Gets the aspect ratio of the image used as the source of the <see cref="T:System.Windows.Controls.MultiScaleSubImage" />. The aspect ratio is the width of the image divided by its height.
                </summary>
      <returns>
                    The aspect ratio of the image used as the source of the <see cref="T:System.Windows.Controls.MultiScaleSubImage" />. The aspect ratio is the width of the image divided by its height.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.MultiScaleSubImage.AspectRatioProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.MultiScaleSubImage.AspectRatio" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.MultiScaleSubImage.AspectRatio" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.MultiScaleSubImage.Opacity">
      <summary>
                    Gets or sets the degree of the <see cref="T:System.Windows.Controls.MultiScaleSubImage" /> opacity.
                </summary>
      <returns>
                    A value between 0 and 1.0 that declares the opacity, with 1.0 meaning full opacity and 0 meaning transparent. The default value is 1.0.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.MultiScaleSubImage.OpacityProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.MultiScaleSubImage.Opacity" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.MultiScaleSubImage.Opacity" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.MultiScaleSubImage.ViewportOrigin">
      <summary>
                    Gets or sets the top-left corner of the area of the image to be displayed.
                </summary>
      <returns>
                    The point of the top-left corner of the rectangular area of the image to be displayed. The coordinates of the point are in local coordinates (0-1) relative to the displayed image. For example, a ViewportOrigin point value of 1,1 would specify an origin on the lower right-hand corner of the image. Because this origin is for the top-left corner of the rectangular area of the image displayed, a value of 1, 1 would actually show nothing of the image (area would be lower and to the right of the image). As another example, a point at 0.5, 0.5 would be directly in the center of the image and therefore the area shown would be to the lower-right of the image center.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.MultiScaleSubImage.ViewportOriginProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.MultiScaleSubImage.ViewportOrigin" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.MultiScaleSubImage.ViewportOrigin" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.MultiScaleSubImage.ViewportWidth">
      <summary>
                    Gets or sets the width of the area of the image displayed.
                </summary>
      <returns>
                    The width of the area of the image displayed. This value is in logical coordinates. For example a value of 1 displays the entire image (no zoom), a value of 0.5 is 200% zoomed in and a value of 0 is completely zoomed (user cannot see the image at all). A value above 1 is zooming out from the image. For example, a value of 2 means that the image will take up half the size of the <see cref="T:System.Windows.Controls.MultiScaleSubImage" /> control area (50% zoom).
                </returns>
    </member>
    <member name="F:System.Windows.Controls.MultiScaleSubImage.ViewportWidthProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.MultiScaleSubImage.ViewportWidth" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.MultiScaleSubImage.ViewportWidth" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.MultiScaleSubImage.ZIndex">
      <summary>
                    Gets or sets a value that represents the z-order rendering behavior of the <see cref="T:System.Windows.Controls.MultiScaleSubImage" />. Z-order determines the relative rendering order of objects (which object is on top of which other objects).
                </summary>
      <returns>
                    The value that represents the z-order rendering behavior of the <see cref="T:System.Windows.Controls.MultiScaleSubImage" />. The default value is 0.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.MultiScaleSubImage.ZIndexProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.MultiScaleSubImage.ZIndex" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.MultiScaleSubImage.ZIndex" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.OpenFileDialog">
      <summary>
                    Represents an open file dialog box that enables a user to select one or more files. This class cannot be inherited. 
                </summary>
    </member>
    <member name="M:System.Windows.Controls.OpenFileDialog.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.OpenFileDialog" /> class.
                </summary>
    </member>
    <member name="P:System.Windows.Controls.OpenFileDialog.File">
      <summary>
                    Gets a <see cref="T:System.IO.FileInfo" /> object for the selected file. If multiple files are selected, returns the first selected file.
                </summary>
      <returns>
                    The selected file. If multiple files are selected, returns the first selected file.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.OpenFileDialog.Files">
      <summary>
                    Gets a collection of <see cref="T:System.IO.FileInfo" /> objects for the selected files.
                </summary>
      <returns>
                    A collection of <see cref="T:System.IO.FileInfo" /> objects for the selected files.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.OpenFileDialog.Filter">
      <summary>
                    Gets or sets the filter string that determines what file types are displayed in the <see cref="T:System.Windows.Controls.OpenFileDialog" />.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that contains the filtering options available in the <see cref="T:System.Windows.Controls.OpenFileDialog" />. The default is <see cref="F:System.String.Empty" />, which means that no filter is applied and all file types are displayed.
                </returns>
      <exception cref="T:System.ArgumentException">
                    The filter string is null, has a file type part without a label part, or has a label part without a file type part.
                </exception>
    </member>
    <member name="P:System.Windows.Controls.OpenFileDialog.FilterIndex">
      <summary>
                    Gets or sets the index of the selected item in the <see cref="T:System.Windows.Controls.OpenFileDialog" /> filter drop-down list.
                </summary>
      <returns>
                    The index of the selected item in the <see cref="T:System.Windows.Controls.OpenFileDialog" /> filter drop-down list. The default is 1.
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The filter index is less than 1.
                </exception>
    </member>
    <member name="P:System.Windows.Controls.OpenFileDialog.Multiselect">
      <summary>
                    Gets or sets a value that indicates whether the <see cref="T:System.Windows.Controls.OpenFileDialog" /> allows users to select multiple files.
                </summary>
      <returns>true if multiple selections are allowed; otherwise, false. The default is false.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.OpenFileDialog.ShowDialog">
      <summary>
                    Displays an <see cref="T:System.Windows.Controls.OpenFileDialog" /> that is modal to the Web browser window.
                </summary>
      <returns>true if the user clicks OK in the dialog box; otherwise, false.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    Silverlight was unable to display the dialog box.
                </exception>
    </member>
    <member name="T:System.Windows.Controls.Orientation">
      <summary>
                    Defines the different orientations that a control or layout can have.
                </summary>
    </member>
    <member name="F:System.Windows.Controls.Orientation.Vertical">
      <summary>
                    The control or layout should be vertically oriented.
                </summary>
    </member>
    <member name="F:System.Windows.Controls.Orientation.Horizontal">
      <summary>
                    The control or layout should be horizontally oriented.
                </summary>
    </member>
    <member name="T:System.Windows.Controls.Panel">
      <summary>
                    Provides a base class for all <see cref="T:System.Windows.Controls.Panel" /> elements. Use <see cref="T:System.Windows.Controls.Panel" /> elements to position and arrange child objects in Silverlight-based applications. 
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Panel.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.Panel" /> class.
                </summary>
    </member>
    <member name="P:System.Windows.Controls.Panel.Background">
      <summary>
                    Gets or sets a <see cref="T:System.Windows.Media.Brush" /> that is used to fill the panel. 
                </summary>
      <returns>
                    The brush used to fill the panel. The default is null.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Panel.BackgroundProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Panel.Background" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Panel.Background" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Panel.Children">
      <summary>
                    Gets the collection of child elements of the panel. 
                </summary>
      <returns>
                    The collection of child objects. The default is an empty collection.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.PasswordBox">
      <summary>
                    Represents a control for entering passwords.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.PasswordBox.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.PasswordBox" /> class
                </summary>
    </member>
    <member name="P:System.Windows.Controls.PasswordBox.FontSource">
      <summary>
                    Gets or sets the font source that is applied to the password box for rendering content.
                </summary>
      <returns>
                    The font source used to render content in the text box. The default is null.
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The value set is not a valid source.
                </exception>
    </member>
    <member name="P:System.Windows.Controls.PasswordBox.MaxLength">
      <summary>
                    Gets or sets the maximum length for passwords to be handled by this <see cref="T:System.Windows.Controls.PasswordBox" />.
                </summary>
      <returns>
                    An integer specifying the maximum length, in character, for passwords to be handled by this <see cref="T:System.Windows.Controls.PasswordBox" />. 
                
                    A value of zero (0) means no limit.
                
                    The default value is 0 (no length limit).
                </returns>
    </member>
    <member name="F:System.Windows.Controls.PasswordBox.MaxLengthProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.PasswordBox.MaxLength" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.PasswordBox.MaxLength" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.PasswordBox.Password">
      <summary>
                    Gets or sets the password currently held by the <see cref="T:System.Windows.Controls.PasswordBox" />.
                </summary>
      <returns>
                    A string representing the password currently held by the <see cref="T:System.Windows.Controls.PasswordBox" />.
                
                    The default value is <see cref="F:System.String.Empty" />.
                </returns>
    </member>
    <member name="E:System.Windows.Controls.PasswordBox.PasswordChanged">
      <summary>
                    Occurs when the value of the <see cref="P:System.Windows.Controls.PasswordBox.Password" /> property changes.
                </summary>
    </member>
    <member name="P:System.Windows.Controls.PasswordBox.PasswordChar">
      <summary>
                    Gets or sets the masking character for the <see cref="T:System.Windows.Controls.PasswordBox" />. 
                </summary>
      <returns>
                    A masking character to echo when the user enters text into the <see cref="T:System.Windows.Controls.PasswordBox" />. 
                
                    The default value is a bullet character (●). 
                </returns>
    </member>
    <member name="F:System.Windows.Controls.PasswordBox.PasswordCharProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.PasswordBox.PasswordChar" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.PasswordBox.PasswordChar" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.PasswordBox.SelectAll">
      <summary>
                    Selects all the character in the <see cref="T:System.Windows.Controls.PasswordBox" />.
                </summary>
    </member>
    <member name="P:System.Windows.Controls.PasswordBox.SelectionBackground">
      <summary>
                    Gets or sets the brush used to render the background for the selected text.
                </summary>
      <returns>
                    The brush that fills the background of the selected text.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.PasswordBox.SelectionBackgroundProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.PasswordBox.SelectionBackground" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.PasswordBox.SelectionBackground" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.PasswordBox.SelectionForeground">
      <summary>
                    Gets or sets the brush used for the selected text in the <see cref="T:System.Windows.Controls.PasswordBox" />.
                </summary>
      <returns>
                    The brush used for the selected text in the <see cref="T:System.Windows.Controls.PasswordBox" />.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.PasswordBox.SelectionForegroundProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.PasswordBox.SelectionForeground" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.PasswordBox.SelectionForeground" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.ProgressBar">
      <summary>
                    Represents a control that indicates the progress of an operation.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.ProgressBar.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.ProgressBar" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.Controls.ProgressBar.IsIndeterminate">
      <summary>
                    Gets or sets a value that indicates whether the progress bar reports generic progress with a repeating pattern or reports progress based on the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> property. 
                </summary>
      <returns>true if the progress bar reports generic progress with a repeating pattern; false if the progress bar reports progress based on the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> property. The default is false.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.ProgressBar.IsIndeterminateProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.ProgressBar.IsIndeterminate" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.ProgressBar.IsIndeterminate" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.ProgressBar.OnApplyTemplate">
      <summary>
                    Builds the visual tree for the <see cref="T:System.Windows.Controls.ProgressBar" /> control when a new template is applied.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.ProgressBar.OnCreateAutomationPeer">
      <summary>
                    Returns a <see cref="T:System.Windows.Automation.Peers.ProgressBarAutomationPeer" /> for use by the Silverlight automation infrastructure.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Automation.Peers.ProgressBarAutomationPeer" /> for the <see cref="T:System.Windows.Controls.ProgressBar" /> object.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.ProgressBar.OnValueChanged(System.Double,System.Double)">
      <summary>
                    Called when value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> property changes.
                </summary>
      <param name="oldValue">
                    The previous value.
                </param>
      <param name="newValue">
                    The new value.
                </param>
    </member>
    <member name="T:System.Windows.Controls.RadioButton">
      <summary>
                    Represents a button that allows a user to select a single option from a group of options.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.RadioButton.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.RadioButton" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.Controls.RadioButton.GroupName">
      <summary>
                    Gets or sets the name that specifies which <see cref="T:System.Windows.Controls.RadioButton" /> controls are mutually exclusive.
                </summary>
      <returns>
                    The name that specifies which <see cref="T:System.Windows.Controls.RadioButton" /> controls are mutually exclusive. The default is null.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.RadioButton.GroupNameProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.RadioButton.GroupName" /> dependency property. 
                </summary>
      <returns>
                    The identifier for <see cref="P:System.Windows.Controls.RadioButton.GroupName" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.RadioButton.OnCreateAutomationPeer">
      <summary>
                    Returns a <see cref="T:System.Windows.Automation.Peers.RadioButtonAutomationPeer" /> for use by the Silverlight automation infrastructure.
                </summary>
      <returns>
                    An <see cref="T:System.Windows.Automation.Peers.RadioButtonAutomationPeer" /> for the radio button object.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.RadioButton.OnToggle">
      <summary>
                    Sets the <see cref="P:System.Windows.Controls.Primitives.ToggleButton.IsChecked" /> property to true.
                </summary>
    </member>
    <member name="T:System.Windows.Controls.RowDefinition">
      <summary>
                    Defines row-specific properties that apply to <see cref="T:System.Windows.Controls.Grid" /> elements.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.RowDefinition.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.RowDefinition" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.Controls.RowDefinition.ActualHeight">
      <summary>
                    Gets a value that represents the calculated height of the <see cref="T:System.Windows.Controls.RowDefinition" />.
                </summary>
      <returns>
                    A <see cref="T:System.Double" /> that represents the calculated height in pixels. The default value is 0.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.RowDefinition.Height">
      <summary>
                    Gets the calculated height of a <see cref="T:System.Windows.Controls.RowDefinition" /> element, or sets the <see cref="T:System.Windows.GridLength" /> value of a row that is defined by the <see cref="T:System.Windows.Controls.RowDefinition" />. 
                </summary>
      <returns>
                    The <see cref="T:System.Windows.GridLength" /> that represents the height of the row. The default value is 1.0.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.RowDefinition.HeightProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.RowDefinition.Height" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.RowDefinition.Height" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.RowDefinition.MaxHeight">
      <summary>
                    Gets or sets a value that represents the maximum height of a <see cref="T:System.Windows.Controls.RowDefinition" />.
                </summary>
      <returns>
                    A <see cref="T:System.Double" /> that represents the maximum height. 
                </returns>
    </member>
    <member name="F:System.Windows.Controls.RowDefinition.MaxHeightProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.RowDefinition.MaxHeight" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.RowDefinition.MaxHeight" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.RowDefinition.MinHeight">
      <summary>
                    Gets or sets a value that represents the minimum allowed height of a <see cref="T:System.Windows.Controls.RowDefinition" />. 
                </summary>
      <returns>
                    A <see cref="T:System.Double" /> that represents the minimum allowed height. The default value is 0.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.RowDefinition.MinHeightProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.RowDefinition.MinHeight" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.RowDefinition.MinHeight" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.RowDefinitionCollection">
      <summary>
                    Provides access to an ordered, strongly typed collection of <see cref="T:System.Windows.Controls.RowDefinition" /> objects.
                </summary>
    </member>
    <member name="T:System.Windows.Controls.ScrollBarVisibility">
      <summary>
                    Specifies the visibility of <see cref="a scrollbar within a T:System.Windows.Controls.ScrollViewer" /><see cref="control" />.
                </summary>
    </member>
    <member name="F:System.Windows.Controls.ScrollBarVisibility.Disabled">
      <summary>
                    A <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> does not appear even when the viewport cannot display all of the content. The dimension of the content is set to the corresponding dimension of the <see cref="T:System.Windows.Controls.ScrollViewer" /> parent. For a horizontal <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />, the width of the content is set to the <see cref="P:System.Windows.Controls.ScrollViewer.ViewportWidth" /> of the <see cref="T:System.Windows.Controls.ScrollViewer" />. For a vertical <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />, the height of the content is set to the <see cref="P:System.Windows.Controls.ScrollViewer.ViewportHeight" /> of the <see cref="T:System.Windows.Controls.ScrollViewer" />.
                </summary>
    </member>
    <member name="F:System.Windows.Controls.ScrollBarVisibility.Auto">
      <summary>
                    A <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> appears and the dimension of the <see cref="T:System.Windows.Controls.ScrollViewer" /> is applied to the content when the viewport cannot display all of the content. For a horizontal <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />, the width of the content is set to the <see cref="P:System.Windows.Controls.ScrollViewer.ViewportWidth" /> of the <see cref="T:System.Windows.Controls.ScrollViewer" />. For a vertical <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />, the height of the content is set to the <see cref="P:System.Windows.Controls.ScrollViewer.ViewportHeight" /> of the <see cref="T:System.Windows.Controls.ScrollViewer" />.
                </summary>
    </member>
    <member name="F:System.Windows.Controls.ScrollBarVisibility.Hidden">
      <summary>
                    A <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> does not appear even when the viewport cannot display all of the content. The dimension of the <see cref="T:System.Windows.Controls.ScrollViewer" /> is not applied to the content.
                </summary>
    </member>
    <member name="F:System.Windows.Controls.ScrollBarVisibility.Visible">
      <summary>
                    A <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> always appears. The dimension of the <see cref="T:System.Windows.Controls.ScrollViewer" /> is applied to the content. For a horizontal <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />, the width of the content is set to the <see cref="P:System.Windows.Controls.ScrollViewer.ViewportWidth" /> of the <see cref="T:System.Windows.Controls.ScrollViewer" />. For a vertical <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />, the height of the content is set to the <see cref="P:System.Windows.Controls.ScrollViewer.ViewportHeight" /> of the <see cref="T:System.Windows.Controls.ScrollViewer" />.
                </summary>
    </member>
    <member name="T:System.Windows.Controls.ScrollContentPresenter">
      <summary>
                    Displays the content of a <see cref="T:System.Windows.Controls.ScrollViewer" /> control.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.ScrollContentPresenter.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.ScrollContentPresenter" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.Controls.ScrollContentPresenter.CanHorizontallyScroll">
      <summary>
                    Gets or sets a value that indicates whether scrolling on the horizontal axis is possible.
                </summary>
      <returns>true if scrolling is possible; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.ScrollContentPresenter.CanVerticallyScroll">
      <summary>
                    Gets or sets a value that indicates whether scrolling on the vertical axis is possible.
                </summary>
      <returns>true if scrolling is possible; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.ScrollContentPresenter.ExtentHeight">
      <summary>
                    Gets the vertical size of the extent.
                </summary>
      <returns>
                    The vertical size of the extent.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.ScrollContentPresenter.ExtentWidth">
      <summary>
                    Gets the horizontal size of the extent.
                </summary>
      <returns>
                    The horizontal size of the extent.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.ScrollContentPresenter.HorizontalOffset">
      <summary>
                    Gets or sets the distance the content has been scrolled horizontally.
                </summary>
      <returns>
                    The distance the content has been scrolled horizontally.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.ScrollContentPresenter.ScrollOwner">
      <summary>
                    Gets or sets the <see cref="T:System.Windows.Controls.ScrollViewer" /> element that controls scrolling behavior.
                </summary>
      <returns>
                    The <see cref="T:System.Windows.Controls.ScrollViewer" /> element that controls scrolling behavior.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.ScrollContentPresenter.SetHorizontalOffset(System.Double)">
      <summary>
                    Sets the distance the content has been scrolled horizontally.
                </summary>
      <param name="offset">
                    The distance the content has been scrolled horizontally.
                </param>
    </member>
    <member name="M:System.Windows.Controls.ScrollContentPresenter.SetVerticalOffset(System.Double)">
      <summary>
                    Sets the distance the content has been scrolled vertically.
                </summary>
      <param name="offset">
                    The distance the content has been scrolled vertically.
                </param>
    </member>
    <member name="P:System.Windows.Controls.ScrollContentPresenter.VerticalOffset">
      <summary>
                    Gets or sets the distance the content has been scrolled vertically.
                </summary>
      <returns>
                    The distance the content has been scrolled vertically.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.ScrollContentPresenter.ViewportHeight">
      <summary>
                    Gets the vertical size of the viewport.
                </summary>
      <returns>
                    The vertical size of the viewport.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.ScrollContentPresenter.ViewportWidth">
      <summary>
                    Gets the horizontal size of the viewport.
                </summary>
      <returns>
                    The horizontal size of the viewport.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.ScrollViewer">
      <summary>
                    Represents a scrollable area that can contain other visible elements. 
                </summary>
    </member>
    <member name="M:System.Windows.Controls.ScrollViewer.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.ScrollViewer" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.Controls.ScrollViewer.ComputedHorizontalScrollBarVisibility">
      <summary>
                    Gets a value that indicates whether the horizontal <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> is visible. 
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Visibility" /> that indicates whether the horizontal scroll bar is visible. The default value is <see cref="F:System.Windows.Controls.ScrollBarVisibility.Hidden" />.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.ScrollViewer.ComputedHorizontalScrollBarVisibilityProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.ScrollViewer.ComputedHorizontalScrollBarVisibility" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.ScrollViewer.ComputedHorizontalScrollBarVisibility" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.ScrollViewer.ComputedVerticalScrollBarVisibility">
      <summary>
                    Gets a value that indicates whether the vertical <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> is visible. 
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Visibility" /> that indicates whether the vertical scroll bar is visible. The default value is <see cref="F:System.Windows.Controls.ScrollBarVisibility.Visible" />.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.ScrollViewer.ComputedVerticalScrollBarVisibilityProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.ScrollViewer.ComputedVerticalScrollBarVisibility" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.ScrollViewer.ComputedVerticalScrollBarVisibility" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.ScrollViewer.ExtentHeight">
      <summary>
                    Gets the vertical size of all the content for display in the <see cref="T:System.Windows.Controls.ScrollViewer" />.
                </summary>
      <returns>
                    The vertical size of all the content for display in the <see cref="T:System.Windows.Controls.ScrollViewer" />.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.ScrollViewer.ExtentHeightProperty">
      <summary>
                    Identifier for the <see cref="P:System.Windows.Controls.ScrollViewer.ExtentHeight" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.ScrollViewer.ExtentHeight" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.ScrollViewer.ExtentWidth">
      <summary>
                    Gets the horizontal size of all the content for display in the <see cref="T:System.Windows.Controls.ScrollViewer" />.
                </summary>
      <returns>
                    The horizontal size of all the content for display in the <see cref="T:System.Windows.Controls.ScrollViewer" />.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.ScrollViewer.ExtentWidthProperty">
      <summary>
                    Identifier for the <see cref="P:System.Windows.Controls.ScrollViewer.ExtentWidth" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.ScrollViewer.ExtentWidth" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.ScrollViewer.GetHorizontalScrollBarVisibility(System.Windows.DependencyObject)">
      <summary>
                    Gets the value of the <see cref="P:System.Windows.Controls.ScrollViewer.HorizontalScrollBarVisibility" /> dependency property from a specified element.
                </summary>
      <returns>
                    The value of the <see cref="P:System.Windows.Controls.ScrollViewer.HorizontalScrollBarVisibility" /> dependency property.
                </returns>
      <param name="element">
                    The element from which the property value is read.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.
                </exception>
    </member>
    <member name="M:System.Windows.Controls.ScrollViewer.GetVerticalScrollBarVisibility(System.Windows.DependencyObject)">
      <summary>
                    Gets the value of the <see cref="P:System.Windows.Controls.ScrollViewer.VerticalScrollBarVisibility" /> dependency property from a specified element.
                </summary>
      <returns>
                    The value of the <see cref="P:System.Windows.Controls.ScrollViewer.VerticalScrollBarVisibility" /> dependency property.
                </returns>
      <param name="element">
                    The element from which the property value is read.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.
                </exception>
    </member>
    <member name="P:System.Windows.Controls.ScrollViewer.HorizontalOffset">
      <summary>
                    Gets a value that contains the horizontal offset of the scrolled content. 
                </summary>
      <returns>
                    The horizontal offset of the scrolled content. The default value is 0.0.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.ScrollViewer.HorizontalOffsetProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.ScrollViewer.HorizontalOffset" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.ScrollViewer.HorizontalOffset" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.ScrollViewer.HorizontalScrollBarVisibility">
      <summary>
                    Gets or sets a value that indicates whether a horizontal <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> should be displayed.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Controls.ScrollBarVisibility" /> value that indicates whether a horizontal <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> should be displayed. The default value is <see cref="F:System.Windows.Controls.ScrollBarVisibility.Hidden" />.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.ScrollViewer.HorizontalScrollBarVisibility" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.ScrollViewer.HorizontalScrollBarVisibility" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.ScrollViewer.InvalidateScrollInfo">
      <summary>
                    Called when the value of properties that describe the size and location of the scroll area change. 
                </summary>
    </member>
    <member name="M:System.Windows.Controls.ScrollViewer.OnApplyTemplate">
      <summary>
                    Builds the visual tree for the <see cref="T:System.Windows.Controls.ScrollViewer" /> control when a new template is applied.
                </summary>
    </member>
    <member name="P:System.Windows.Controls.ScrollViewer.ScrollableHeight">
      <summary>
                    Gets a value that represents the vertical size of the area that can be scrolled; the difference between the width of the extent and the width of the viewport.
                </summary>
      <returns>
                    The vertical size of the area that can be scrolled. This property has no default value.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.ScrollViewer.ScrollableHeightProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.ScrollViewer.ScrollableHeight" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.ScrollViewer.ScrollableHeight" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.ScrollViewer.ScrollableWidth">
      <summary>
                    Gets a value that represents the horizontal size of the area that can be scrolled; the difference between the width of the extent and the width of the viewport.. 
                </summary>
      <returns>
                    The horizontal size of the area that can be scrolled. This property has no default value.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.ScrollViewer.ScrollableWidthProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.ScrollViewer.ScrollableWidth" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.ScrollViewer.ScrollableWidth" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.ScrollViewer.ScrollToHorizontalOffset(System.Double)">
      <summary>
                    Scrolls the content that is within the <see cref="T:System.Windows.Controls.ScrollViewer" /> to the specified horizontal offset position.
                </summary>
      <param name="offset">
                    The position that the content scrolls to.
                </param>
    </member>
    <member name="M:System.Windows.Controls.ScrollViewer.ScrollToVerticalOffset(System.Double)">
      <summary>
                    Scrolls the content that is within the <see cref="T:System.Windows.Controls.ScrollViewer" /> to the specified vertical offset position.
                </summary>
      <param name="offset">
                    The position that the content scrolls to.
                </param>
    </member>
    <member name="M:System.Windows.Controls.ScrollViewer.SetHorizontalScrollBarVisibility(System.Windows.DependencyObject,System.Windows.Controls.ScrollBarVisibility)">
      <summary>
                    Sets the value of the <see cref="P:System.Windows.Controls.ScrollViewer.HorizontalScrollBarVisibility" /> dependency property to a specified element.
                </summary>
      <param name="element">
                    The element on which to set the property value.
                </param>
      <param name="horizontalScrollBarVisibility">
                    The property value to set.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.
                </exception>
    </member>
    <member name="M:System.Windows.Controls.ScrollViewer.SetVerticalScrollBarVisibility(System.Windows.DependencyObject,System.Windows.Controls.ScrollBarVisibility)">
      <summary>
                    Sets the value of the <see cref="P:System.Windows.Controls.ScrollViewer.VerticalScrollBarVisibility" /> dependency property to a specified element.
                </summary>
      <param name="element">
                    The element on which to set the property value.
                </param>
      <param name="verticalScrollBarVisibility">
                    The property value to set.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.
                </exception>
    </member>
    <member name="P:System.Windows.Controls.ScrollViewer.VerticalOffset">
      <summary>
                    Gets a value that contains the vertical offset of the scrolled content.
                </summary>
      <returns>
                    The vertical offset of the scrolled content. The default value is 0.0.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.ScrollViewer.VerticalOffsetProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.ScrollViewer.VerticalOffset" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.ScrollViewer.VerticalOffset" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.ScrollViewer.VerticalScrollBarVisibility">
      <summary>
                    Gets or sets a value that indicates whether a vertical <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> should be displayed. 
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Controls.ScrollBarVisibility" /> value that indicates whether a vertical <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> should be displayed. The default value is <see cref="F:System.Windows.Controls.ScrollBarVisibility.Visible" />.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.ScrollViewer.VerticalScrollBarVisibility" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.ScrollViewer.VerticalScrollBarVisibility" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.ScrollViewer.ViewportHeight">
      <summary>
                    Gets a value that contains the vertical size of the viewable content. 
                </summary>
      <returns>
                    The vertical size of the viewable content. This property has no default value.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.ScrollViewer.ViewportHeightProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.ScrollViewer.ViewportHeight" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.ScrollViewer.ViewportHeight" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.ScrollViewer.ViewportWidth">
      <summary>
                    Gets a value that contains the horizontal size of the viewable content.
                </summary>
      <returns>
                    The horizontal size of the viewable content. The default value is 0.0.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.ScrollViewer.ViewportWidthProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.ScrollViewer.ViewportWidth" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.ScrollViewer.ViewportWidth" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.SelectionChangedEventArgs">
      <summary>
                    Provides data for the <see cref="E:System.Windows.Controls.Primitives.Selector.SelectionChanged" /> event.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.SelectionChangedEventArgs.#ctor(System.Collections.IList,System.Collections.IList)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.SelectionChangedEventArgs" /> class. 
                </summary>
      <param name="removedItems">
                    The items that were unselected.
                </param>
      <param name="addedItems">
                    The items that were selected.
                </param>
    </member>
    <member name="P:System.Windows.Controls.SelectionChangedEventArgs.AddedItems">
      <summary>
                    Gets a list that contains the items that were selected. 
                </summary>
      <returns>
                    The items that were selected in this event.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.SelectionChangedEventArgs.RemovedItems">
      <summary>
                    Gets a list that contains the items that were unselected. 
                </summary>
      <returns>
                    The items that were unselected in this event.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.SelectionChangedEventHandler">
      <summary>
                    Represents the method that will handle the <see cref="E:System.Windows.Controls.Primitives.Selector.SelectionChanged" /> event. 
                </summary>
      <param name="sender">
                    The object where the event handler is attached.
                </param>
      <param name="e">
                    The event data.
                </param>
    </member>
    <member name="T:System.Windows.Controls.Slider">
      <summary>
                    Represents a control that lets the user select from a range of values by moving a <see cref="T:System.Windows.Controls.Primitives.Thumb" /> control along a track.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Slider.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.Slider" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.Controls.Slider.IsDirectionReversed">
      <summary>
                    Gets or sets a value that indicates the direction of increasing value. 
                </summary>
      <returns>true if the direction of increasing value is to the left for a horizontal slider or down for a vertical slider; otherwise, false. The default is false.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Slider.IsDirectionReversedProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Slider.IsDirectionReversed" /> dependency property.
                </summary>
    </member>
    <member name="P:System.Windows.Controls.Slider.IsFocused">
      <summary>
                    Gets a value indicating whether the slider control has focus.
                </summary>
      <returns>true if the slider control has focus; otherwise, false. The default is false.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Slider.IsFocusedProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Slider.IsFocused" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Slider.IsFocused" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.Slider.OnApplyTemplate">
      <summary>
                    Builds the visual tree for the <see cref="T:System.Windows.Controls.Slider" /> control when a new template is applied.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Slider.OnCreateAutomationPeer">
      <summary>
                    Returns a <see cref="T:System.Windows.Automation.Peers.SliderAutomationPeer" /> object for use by the automation infrastructure.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Automation.Peers.SliderAutomationPeer" /> object for use by the slider control.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.Slider.OnGotFocus(System.Windows.RoutedEventArgs)">
      <summary>
                    Provides class handling for the <see cref="E:System.Windows.UIElement.GotFocus" /> event.
                </summary>
      <param name="e">
                    A <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data. 
                </param>
    </member>
    <member name="M:System.Windows.Controls.Slider.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>
                    Provides class handling for the <see cref="E:System.Windows.UIElement.KeyDown" /> event.
                </summary>
      <param name="e">
                    A <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.
                </param>
    </member>
    <member name="M:System.Windows.Controls.Slider.OnLostFocus(System.Windows.RoutedEventArgs)">
      <summary>
                    Provides class handling for the <see cref="E:System.Windows.UIElement.LostFocus" /> event.
                </summary>
      <param name="e">
                    A <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data.
                </param>
    </member>
    <member name="M:System.Windows.Controls.Slider.OnMaximumChanged(System.Double,System.Double)">
      <summary>
                    Called when the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Maximum" /> property changes.
                </summary>
      <param name="oldMaximum">
                    Old value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Maximum" /> property.
                </param>
      <param name="newMaximum">
                    New value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Maximum" /> property.
                </param>
    </member>
    <member name="M:System.Windows.Controls.Slider.OnMinimumChanged(System.Double,System.Double)">
      <summary>
                    Called when the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum" /> property changes.
                </summary>
      <param name="oldMinimum">
                    Old value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum" /> property.
                </param>
      <param name="newMinimum">
                    New value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum" /> property.
                </param>
    </member>
    <member name="M:System.Windows.Controls.Slider.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
      <summary>
                    Provides class handling for the <see cref="E:System.Windows.UIElement.MouseEnter" /> event.
                </summary>
      <param name="e">
                    A <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.
                </param>
    </member>
    <member name="M:System.Windows.Controls.Slider.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
      <summary>
                    Provides class handling for the <see cref="E:System.Windows.UIElement.MouseLeave" /> event.
                </summary>
      <param name="e">
                    A <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.
                </param>
    </member>
    <member name="M:System.Windows.Controls.Slider.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>
                    Provides class handling for the <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> event.
                </summary>
      <param name="e">
                    A <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.
                </param>
    </member>
    <member name="M:System.Windows.Controls.Slider.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>
                    Provides class handling for the <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> event.
                </summary>
      <param name="e">
                    A <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.
                </param>
    </member>
    <member name="M:System.Windows.Controls.Slider.OnValueChanged(System.Double,System.Double)">
      <summary>
                    Updates the current position of the <see cref="T:System.Windows.Controls.Slider" /> when the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> property changes.
                </summary>
      <param name="oldValue">
                    The old <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> of the <see cref="T:System.Windows.Controls.Slider" />.
                </param>
      <param name="newValue">
                    The new <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> of the <see cref="T:System.Windows.Controls.Slider" />.
                </param>
    </member>
    <member name="P:System.Windows.Controls.Slider.Orientation">
      <summary>
                    Gets or sets the orientation of a <see cref="T:System.Windows.Controls.Slider" />. 
                </summary>
      <returns>
                    One of the <see cref="T:System.Windows.Controls.Orientation" /> values. The default is <see cref="F:System.Windows.Controls.Orientation.Horizontal" />.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Slider.OrientationProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Slider.Orientation" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Slider.Orientation" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.StackPanel">
      <summary>
                    Arranges child elements into a single line that can be oriented horizontally or vertically. 
                </summary>
    </member>
    <member name="M:System.Windows.Controls.StackPanel.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.StackPanel" /> class.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.StackPanel.ArrangeOverride(System.Windows.Size)">
      <summary>
                    Positions child elements and determines a size for the derived class. 
                </summary>
      <returns>
                    The actual size used.
                </returns>
      <param name="arrangeSize">
                    The final area within the parent that this element should use to arrange itself and its children.
                </param>
    </member>
    <member name="M:System.Windows.Controls.StackPanel.MeasureOverride(System.Windows.Size)">
      <summary>
                    Measures the size in layout required for child elements and determines a size for the derived class. 
                </summary>
      <returns>
                    The size that this element determines it needs during layout, based on its calculations of child element sizes.
                </returns>
      <param name="constraint">
                    The available size that this element can give to child elements.
                </param>
    </member>
    <member name="P:System.Windows.Controls.StackPanel.Orientation">
      <summary>
                    Gets or sets the dimension by which child elements are stacked.  
                </summary>
      <returns>
                    One of the enumeration values that specifies the orientation of child elements. The default is <see cref="F:System.Windows.Controls.Orientation.Vertical" />.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.StackPanel.OrientationProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.StackPanel.Orientation" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.StackPanel.Orientation" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.TextBlock">
      <summary>
                    Provides a lightweight control for displaying small amounts of flow content.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.TextBlock.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.TextBlock" /> class.
                </summary>
    </member>
    <member name="P:System.Windows.Controls.TextBlock.FontFamily">
      <summary>
                    Gets or sets the preferred top-level font family for the content in this element. 
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Media.FontFamily" /> object that specifies the preferred font family, or a primary preferred font family with one or more fallback font families. For information about defaults, see the <see cref="T:System.Windows.Media.FontFamily" /> topic.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.TextBlock.FontFamilyProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.TextBlock.FontFamily" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.TextBlock.FontFamily" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.TextBlock.FontSize">
      <summary>
                    Gets or sets the font size for the content in this element. 
                </summary>
      <returns>
                    A non-negative value that specifies the font size, in pixels. The default is 11 pixels.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.TextBlock.FontSizeProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.TextBlock.FontSize" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.TextBlock.FontSize" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.TextBlock.FontSource">
      <summary>
                    Gets or sets the font source that is applied to the text for rendering content.
                </summary>
      <returns>
                    The font source that is used to render content in the text box.  The default is null.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.TextBlock.FontStretch">
      <summary>
                    Gets or sets the font stretch for the content in this element. 
                </summary>
      <returns>
                    The requested font stretch, which is a <see cref="T:System.Windows.FontStretch" /> that is obtained from one of the <see cref="T:System.Windows.FontStretches" /> property values. The default is <see cref="P:System.Windows.FontStretches.Normal" />.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.TextBlock.FontStretchProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.TextBlock.FontStretch" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.TextBlock.FontStretch" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.TextBlock.FontStyle">
      <summary>
                    Gets or sets the font style for the content in this element. 
                </summary>
      <returns>
                    The requested font style, which is a <see cref="T:System.Windows.FontStyle" /> that is obtained from one of the <see cref="T:System.Windows.FontStyles" /> property values. The default is <see cref="P:System.Windows.FontStyles.Normal" />.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.TextBlock.FontStyleProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.TextBlock.FontStyle" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.TextBlock.FontStyle" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.TextBlock.FontWeight">
      <summary>
                    Gets or sets the top-level font weight for the <see cref="T:System.Windows.Controls.TextBlock" />.
                </summary>
      <returns>
                    The requested font weight, which is a <see cref="T:System.Windows.FontWeight" /> that is obtained from one of the <see cref="T:System.Windows.FontWeights" /> property values. The default is <see cref="P:System.Windows.FontWeights.Normal" />.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.TextBlock.FontWeightProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.TextBlock.FontWeight" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.TextBlock.FontWeight" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.TextBlock.Foreground">
      <summary>
                    Gets or sets the <see cref="T:System.Windows.Media.Brush" /> to apply to the text contents of the <see cref="T:System.Windows.Controls.TextBlock" />. 
                </summary>
      <returns>
                    The brush used to apply to the text contents. The default is a <see cref="T:System.Windows.Media.SolidColorBrush" /> with a <see cref="P:System.Windows.Media.SolidColorBrush.Color" /> value of <see cref="P:System.Windows.Media.Colors.Black" />.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.TextBlock.ForegroundProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.TextBlock.Foreground" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.TextBlock.Foreground" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.TextBlock.Inlines">
      <summary>
                    Gets the collection of inline text elements within a <see cref="T:System.Windows.Controls.TextBlock" />.
                </summary>
      <returns>
                    A collection that holds all inline text elements from the <see cref="T:System.Windows.Controls.TextBlock" />.
                
                    The default is an empty collection.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.TextBlock.LineHeight">
      <summary>
                    Gets or sets the height of each line of content. 
                </summary>
      <returns>
                    The height of each line in pixels. A value of <see cref="F:System.Double.NaN" /> (equivalent to an attribute value of "Auto") indicates that the line height is determined automatically from the current font characteristics. The default is <see cref="F:System.Double.NaN" />.
                </returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Windows.Controls.TextBlock.LineHeight" /> is set to a non-positive value.
                </exception>
    </member>
    <member name="F:System.Windows.Controls.TextBlock.LineHeightProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.TextBlock.LineHeight" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.TextBlock.LineHeight" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.TextBlock.LineStackingStrategy">
      <summary>
                    Gets or sets a value that indicates how a line box is determined for each line of text in the <see cref="T:System.Windows.Controls.TextBlock" />. 
                </summary>
      <returns>
                    A value that indicates how a line box is determined for each line of text in the <see cref="T:System.Windows.Controls.TextBlock" />. The default is <see cref="F:System.Windows.LineStackingStrategy.MaxHeight" />.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.TextBlock.LineStackingStrategyProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.TextBlock.LineStackingStrategy" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.TextBlock.LineStackingStrategy" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.TextBlock.Padding">
      <summary>
                    Gets or sets a value that indicates the thickness of padding space between the boundaries of the content area and the content displayed by a <see cref="T:System.Windows.Controls.TextBlock" />.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Thickness" /> structure that specifies the amount of padding to apply.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.TextBlock.PaddingProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.TextBlock.Padding" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.TextBlock.Padding" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.TextBlock.Text">
      <summary>
                    Gets or sets the text contents of a <see cref="T:System.Windows.Controls.TextBlock" />. 
                </summary>
      <returns>
                    A string that specifies the text contents of this <see cref="T:System.Windows.Controls.TextBlock" />. 
                
                    The default is an empty string.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.TextBlock.TextAlignment">
      <summary>
                    Gets or sets a value that indicates the horizontal alignment of text content. 
                </summary>
      <returns>
                    The text alignment. The default is <see cref="F:System.Windows.TextAlignment.Left" />.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.TextBlock.TextAlignmentProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.TextBlock.TextAlignment" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.TextBlock.TextAlignment" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.TextBlock.TextDecorations">
      <summary>
                    Gets or sets a value that specifies the text decorations that are applied to the content in a <see cref="T:System.Windows.Controls.TextBlock" /> element. 
                </summary>
      <returns>
                    A <see cref="T:System.Windows.TextDecorationCollection" />, or null if no text decorations are applied.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.TextBlock.TextDecorationsProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.TextBlock.TextDecorations" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.TextBlock.TextDecorations" /> dependency property.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.TextBlock.TextProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.TextBlock.Text" /> dependency property.
                </summary>
      <returns>
                    The identifier of the <see cref="P:System.Windows.Controls.TextBlock.Text" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.TextBlock.TextWrapping">
      <summary>
                    Gets or sets how the <see cref="T:System.Windows.Controls.TextBlock" /> wraps text.
                </summary>
      <returns>
                    A value that indicates how the <see cref="T:System.Windows.Controls.TextBlock" /> wraps text. The default is <see cref="F:System.Windows.TextWrapping.NoWrap" />.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.TextBlock.TextWrappingProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.TextBlock.TextWrapping" /> dependency property. 
                </summary>
      <returns>
                    The identifier of the <see cref="P:System.Windows.Controls.TextBlock.TextWrapping" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.TextBox">
      <summary>
                    Represents a control that can be used to display single-format, multi-line text.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.TextBox.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.TextBox" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.Controls.TextBox.AcceptsReturn">
      <summary>
                    Gets or sets the value that determines whether the text box allows and displays the newline or return characters.
                </summary>
      <returns>true if the text box allows newline characters; otherwise, false. The default is false.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.TextBox.AcceptsReturnProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.TextBox.AcceptsReturn" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.TextBox.AcceptsReturn" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.TextBox.ArrangeOverride(System.Windows.Size)">
      <summary>
                    Sets the text box size if a <see cref="T:System.Windows.Controls.ScrollViewer" /> is associated with the text box. 
                </summary>
      <returns>
                    The actual size of the text box. 
                </returns>
      <param name="arrangeBounds">
                    The final size within the <see cref="T:System.Windows.Controls.ScrollViewer" /> that the text box should use to arrange itself and its children.
                </param>
    </member>
    <member name="P:System.Windows.Controls.TextBox.FontSource">
      <summary>
                    Gets or sets the font source that is applied to the <see cref="T:System.Windows.Controls.TextBox" /> for rendering content.
                </summary>
      <returns>
                    The font source used to render content in the text box. The default is null.
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The value set is not a valid source.
                </exception>
    </member>
    <member name="P:System.Windows.Controls.TextBox.HorizontalScrollBarVisibility">
      <summary>
                    Gets or sets the visibility of the horizontal scroll bar.
                </summary>
      <returns>
                    The visibility of the horizontal scroll bar. The default is <see cref="F:System.Windows.Controls.ScrollBarVisibility.Hidden" />.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.TextBox.IsReadOnly">
      <summary>
                    Gets or sets the value that determines if the user can change the text in the text box.
                </summary>
      <returns>true if the text box is read-only; otherwise, false.  The default is false.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.TextBox.IsReadOnlyProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.TextBox.IsReadOnly" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.TextBox.IsReadOnly" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.TextBox.MaxLength">
      <summary>
                    Gets or sets the value that determines the maximum number of characters allowed for user input.
                </summary>
      <returns>
                    The maximum number of characters allowed for user input.  The default is 0.
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The value set is less than 0.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The value set is null.
                </exception>
    </member>
    <member name="F:System.Windows.Controls.TextBox.MaxLengthProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.TextBox.MaxLength" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.TextBox.MaxLength" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.TextBox.OnCreateAutomationPeer">
      <summary>
                    Returns a <see cref="T:System.Windows.Automation.Peers.TextBoxAutomationPeer" /> for use by the Silverlight automation infrastructure.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Automation.Peers.TextBoxAutomationPeer" /> for the <see cref="T:System.Windows.Controls.TextBox" /> object.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.TextBox.OnGotFocus(System.Windows.RoutedEventArgs)">
      <summary>
                    Called before <see cref="E:System.Windows.UIElement.GotFocus" /> event occurs
                </summary>
      <param name="e">
                    The data for the event.
                </param>
    </member>
    <member name="M:System.Windows.Controls.TextBox.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>
                    Called when <see cref="E:System.Windows.UIElement.KeyDown" /> event occurs.
                </summary>
      <param name="e">
                    The data for the event.
                </param>
    </member>
    <member name="M:System.Windows.Controls.TextBox.OnKeyUp(System.Windows.Input.KeyEventArgs)">
      <summary>
                    Called before <see cref="E:System.Windows.UIElement.KeyUp" /> event occurs.
                </summary>
      <param name="e">
                    The data for the event.
                </param>
    </member>
    <member name="M:System.Windows.Controls.TextBox.OnLostFocus(System.Windows.RoutedEventArgs)">
      <summary>
                    Called before <see cref="E:System.Windows.UIElement.LostFocus" /> event occurs.
                </summary>
      <param name="e">
                    The data for the event.
                </param>
    </member>
    <member name="M:System.Windows.Controls.TextBox.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
      <summary>
                    Called before <see cref="E:System.Windows.UIElement.MouseEnter" /> event occurs.
                </summary>
      <param name="e">
                    The data for the event.
                </param>
    </member>
    <member name="M:System.Windows.Controls.TextBox.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
      <summary>
                    Called before <see cref="E:System.Windows.UIElement.MouseLeave" /> event occurs.
                </summary>
      <param name="e">
                    The data for the event.
                </param>
    </member>
    <member name="M:System.Windows.Controls.TextBox.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>
                    Called before <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> event occurs.
                </summary>
      <param name="e">
                    The data for the event. The event data reports that the left mouse button was pressed.
                </param>
    </member>
    <member name="M:System.Windows.Controls.TextBox.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>
                    Called before <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> event occurs.
                </summary>
      <param name="e">
                    The data for the event. The event data reports that the left mouse button was released.
                </param>
    </member>
    <member name="M:System.Windows.Controls.TextBox.OnMouseMove(System.Windows.Input.MouseEventArgs)">
      <summary>
                    Called before <see cref="E:System.Windows.UIElement.MouseMove" /> event occurs.
                </summary>
      <param name="e">
                    The data for the event.
                </param>
    </member>
    <member name="M:System.Windows.Controls.TextBox.Select(System.Int32,System.Int32)">
      <summary>
                    Selects a range of text in the text box.
                </summary>
      <param name="start">
                    The zero-based index of the first character in the selection.
                </param>
      <param name="length">
                    The length of the selection, in characters.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The <paramref name="start" /> or <paramref name="length" /> value is negative.
                </exception>
    </member>
    <member name="M:System.Windows.Controls.TextBox.SelectAll">
      <summary>
                    Selects the entire contents of the text box.
                </summary>
    </member>
    <member name="P:System.Windows.Controls.TextBox.SelectedText">
      <summary>
                    Gets or sets the content of the current selection in the text box.
                </summary>
      <returns>
                    The currently selected text in the text box.  If no text is selected, the value is <see cref="F:System.String.Empty" />.
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    The value is set to null.
                </exception>
    </member>
    <member name="P:System.Windows.Controls.TextBox.SelectionBackground">
      <summary>
                    Gets or sets the brush that fills the background of the selected text.
                </summary>
      <returns>
                    The brush that fills the background of the selected text.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.TextBox.SelectionBackgroundProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.TextBox.SelectionBackground" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.TextBox.SelectionBackground" /> dependency property.
                </returns>
    </member>
    <member name="E:System.Windows.Controls.TextBox.SelectionChanged">
      <summary>
                    Occurs when the text selection has changed.
                </summary>
    </member>
    <member name="P:System.Windows.Controls.TextBox.SelectionForeground">
      <summary>
                    Gets or sets the brush used for the selected text in the text box.
                </summary>
      <returns>
                    The brush used for the selected text in the text box.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.TextBox.SelectionForegroundProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.TextBox.SelectionForeground" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.TextBox.SelectionForeground" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.TextBox.SelectionLength">
      <summary>
                    Gets or sets the number of characters in the current selection in the text box.
                </summary>
      <returns>
                    The number of characters in the current selection in the text box, or 0 if there is no selection.
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The value is less than 0.
                </exception>
    </member>
    <member name="P:System.Windows.Controls.TextBox.SelectionStart">
      <summary>
                    Gets or sets the starting position of the text selected in the text box.
                </summary>
      <returns>
                    The starting position of the current selection.
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The value is less than 0.
                </exception>
    </member>
    <member name="P:System.Windows.Controls.TextBox.Text">
      <summary>
                    Gets or sets the text contents of the text box.
                </summary>
      <returns>
                    A string containing the text contents of the text box. The default is an empty string ("").
                </returns>
    </member>
    <member name="P:System.Windows.Controls.TextBox.TextAlignment">
      <summary>
                    Gets or sets how the text should be aligned in the text box.
                </summary>
      <returns>
                    One of the <see cref="T:System.Windows.TextAlignment" /> enumeration values.  The default is <see cref="F:System.Windows.TextAlignment.Left" />.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.TextBox.TextAlignmentProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.TextBox.TextAlignment" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.TextBox.TextAlignment" /> dependency property.
                </returns>
    </member>
    <member name="E:System.Windows.Controls.TextBox.TextChanged">
      <summary>
                    Occurs when content changes in the text box.
                </summary>
    </member>
    <member name="F:System.Windows.Controls.TextBox.TextProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.TextBox.Text" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.TextBox.Text" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.TextBox.TextWrapping">
      <summary>
                    Gets or sets how line breaking occurs if a line of text extends beyond the available width of the text box.
                </summary>
      <returns>
                    One of the <see cref="T:System.Windows.TextWrapping" /> values. The default is <see cref="F:System.Windows.TextWrapping.NoWrap" />.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.TextBox.TextWrappingProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.TextBox.TextWrapping" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.TextBox.TextWrapping" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.TextBox.VerticalScrollBarVisibility">
      <summary>
                    Gets or sets the visibility of the vertical scroll bar.
                </summary>
      <returns>
                    The visibility of the vertical scroll bar. The default is <see cref="F:System.Windows.Controls.ScrollBarVisibility.Hidden" />.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.TextChangedEventArgs">
      <summary>
                    Provides data for the <see cref="E:System.Windows.Controls.TextBox.TextChanged" /> event.
                </summary>
    </member>
    <member name="T:System.Windows.Controls.TextChangedEventHandler">
      <summary>
                    Represents the method that will handle the <see cref="E:System.Windows.Controls.TextBox.TextChanged" /> event.
                </summary>
      <param name="sender">
                    The object where the event handler is attached.
                </param>
      <param name="e">
                    The event data.
                </param>
    </member>
    <member name="T:System.Windows.Controls.ToolTip">
      <summary>
                    Represents a control that creates a pop-up window that displays information for an element in the UI. 
                </summary>
    </member>
    <member name="M:System.Windows.Controls.ToolTip.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.ToolTip" /> class. 
                </summary>
    </member>
    <member name="E:System.Windows.Controls.ToolTip.Closed">
      <summary>
                    Occurs when a <see cref="T:System.Windows.Controls.ToolTip" /> is closed and is no longer visible. 
                </summary>
    </member>
    <member name="P:System.Windows.Controls.ToolTip.HorizontalOffset">
      <summary>
                    Gets or sets the horizontal distance between the target origin and the pop-up alignment point. 
                </summary>
      <returns>
                    The horizontal distance between the target origin and the pop-up alignment point. The default is 0.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.ToolTip.HorizontalOffsetProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.ToolTip.HorizontalOffset" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.ToolTip.HorizontalOffset" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.ToolTip.IsOpen">
      <summary>
                    Gets or sets a value that indicates whether the <see cref="T:System.Windows.Controls.ToolTip" /> is visible.
                </summary>
      <returns>true if the <see cref="T:System.Windows.Controls.ToolTip" /> is visible; otherwise, false. The default is false.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.ToolTip.IsOpenProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.ToolTip.IsOpen" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.ToolTip.IsOpen" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.ToolTip.OnApplyTemplate">
      <summary>
                    Builds the visual tree for the <see cref="T:System.Windows.Controls.ToolTip" /> when a new template is applied.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.ToolTip.OnCreateAutomationPeer">
      <summary>
                    Returns an <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> for use by the Silverlight automation infrastructure.
                </summary>
      <returns>
                    An <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> for the <see cref="T:System.Windows.Controls.ToolTip" /> object.
                </returns>
    </member>
    <member name="E:System.Windows.Controls.ToolTip.Opened">
      <summary>
                    Occurs when a <see cref="T:System.Windows.Controls.ToolTip" /> becomes visible.
                </summary>
    </member>
    <member name="P:System.Windows.Controls.ToolTip.VerticalOffset">
      <summary>
                    Gets or sets the vertical distance between the target origin and the pop-up alignment point.
                </summary>
      <returns>
                    The vertical distance between the target origin and the pop-up alignment point. The default is 0.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.ToolTip.VerticalOffsetProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.ToolTip.VerticalOffset" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.ToolTip.VerticalOffset" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.ToolTipService">
      <summary>
                    Represents a service that provides static methods to display a tooltip.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.ToolTipService.GetToolTip(System.Windows.DependencyObject)">
      <summary>
                    Gets the tooltip for an object.
                </summary>
      <returns>
                    The object's tooltip value.
                </returns>
      <param name="element">
                    The object from which the property value is read.
                </param>
    </member>
    <member name="M:System.Windows.Controls.ToolTipService.SetToolTip(System.Windows.DependencyObject,System.Object)">
      <summary>
                    Sets the tooltip for an object.
                </summary>
      <param name="element">
                    The object to which the attached property is written.
                </param>
      <param name="value">
                    The value to set.
                </param>
    </member>
    <member name="P:System.Windows.Controls.ToolTipService.ToolTip">
      <summary>
                    Gets or sets a tooltip to be attached to a control.
                </summary>
      <returns>
                    The tooltip to display for a control.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.ToolTipService.ToolTipProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.ToolTipService.ToolTip" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.ToolTipService.ToolTip" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.UIElementCollection">
      <summary>
                    Represents an ordered collection of <see cref="T:System.Windows.UIElement" /> objects.
                </summary>
    </member>
    <member name="T:System.Windows.Controls.UserControl">
      <summary>
                    Provides the base class for defining a new control that encapsulates related existing controls and provides its own logic.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.UserControl.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.UserControl" /> class.
                </summary>
    </member>
    <member name="P:System.Windows.Controls.UserControl.Content">
      <summary>
                    Gets or sets the content that is contained within a user control.
                </summary>
      <returns>
                    The content of the user control.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.UserControl.ContentProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.UserControl.Content" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.UserControl.Content" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.ValidationError">
      <summary>
                    Represents a validation error that is generated by the binding engine when an exception occurs during target-to-source updates. 
                </summary>
    </member>
    <member name="P:System.Windows.Controls.ValidationError.Exception">
      <summary>
                    Gets the exception that caused the validation error.
                </summary>
      <returns>
                    The exception that caused the validation error.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.ValidationErrorEventAction">
      <summary>
                    Describes the reason a <see cref="E:System.Windows.FrameworkElement.BindingValidationError" /> event has occurred.
                </summary>
    </member>
    <member name="F:System.Windows.Controls.ValidationErrorEventAction.Added">
      <summary>
                    A new <see cref="T:System.Windows.Controls.ValidationError" /> has occurred.
                </summary>
    </member>
    <member name="F:System.Windows.Controls.ValidationErrorEventAction.Removed">
      <summary>
                    An existing <see cref="T:System.Windows.Controls.ValidationError" /> has been removed.
                </summary>
    </member>
    <member name="T:System.Windows.Controls.ValidationErrorEventArgs">
      <summary>
                    Provides data for the <see cref="E:System.Windows.FrameworkElement.BindingValidationError" /> event.
                </summary>
    </member>
    <member name="P:System.Windows.Controls.ValidationErrorEventArgs.Action">
      <summary>
                    Gets the state of the validation error.
                </summary>
      <returns>
                    One of the enumeration values that indicates the state of the validation error.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.ValidationErrorEventArgs.Error">
      <summary>
                    Gets the validation error that caused the <see cref="E:System.Windows.FrameworkElement.BindingValidationError" /> event.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Controls.ValidationError" /> object that contains the exception that caused the validation error.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.ValidationErrorEventArgs.Handled">
      <summary>
                    Gets or sets the value that marks the routed event as handled.
                </summary>
      <returns>true if the event is handled; otherwise, false.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.Primitives.ButtonBase">
      <summary>
                    Represents the base class for all button controls, such as <see cref="T:System.Windows.Controls.Button" />, <see cref="T:System.Windows.Controls.Primitives.RepeatButton" />, and <see cref="T:System.Windows.Controls.HyperlinkButton" />. 
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ButtonBase.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.ButtonBase" /> class. 
                </summary>
    </member>
    <member name="E:System.Windows.Controls.Primitives.ButtonBase.Click">
      <summary>
                    Occurs when a <see cref="T:System.Windows.Controls.Button" /> is clicked. 
                </summary>
    </member>
    <member name="P:System.Windows.Controls.Primitives.ButtonBase.ClickMode">
      <summary>
                    Gets or sets when the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> event occurs.
                </summary>
      <returns>
                    When the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> event occurs. The default value is <see cref="F:System.Windows.Controls.ClickMode.Release" />. 
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ButtonBase.ClickModeProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.ClickMode" /> dependency property 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.ClickMode" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.ButtonBase.IsFocused">
      <summary>
                    Gets a value that determines whether the button has focus.
                </summary>
      <returns>true if the control has focus; otherwise, false. The default is false.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ButtonBase.IsFocusedProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.IsFocused" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.IsFocused" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.ButtonBase.IsMouseOver">
      <summary>
                    Gets a value indicating whether the mouse pointer is located over this button control.
                </summary>
      <returns>true to indicate the mouse pointer is over the button control, otherwise false. The default is false.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ButtonBase.IsMouseOverProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.IsMouseOver" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.IsMouseOver" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.ButtonBase.IsPressed">
      <summary>
                    Gets a value that indicates whether a <see cref="T:System.Windows.Controls.Primitives.ButtonBase" /> is currently in a pressed state.
                </summary>
      <returns>true if the <see cref="T:System.Windows.Controls.Primitives.ButtonBase" /> is in a pressed state; otherwise false. The default is false.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ButtonBase.IsPressedProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.IsPressed" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.IsPressed" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ButtonBase.OnClick">
      <summary>
                    Raises the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> event. 
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ButtonBase.OnGotFocus(System.Windows.RoutedEventArgs)">
      <summary>
                    Provides handling for the <see cref="E:System.Windows.UIElement.GotFocus" /> event.
                </summary>
      <param name="e">
                    The event data.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> is null.
                </exception>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ButtonBase.OnIsPressedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
                    Called when the value of the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.IsPressed" /> property changes.
                </summary>
      <param name="e">
                    The data for <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />.
                </param>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ButtonBase.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>
                    Provides class handling for the <see cref="E:System.Windows.UIElement.KeyDown" /> event that occurs when the user presses a key while this control has focus.
                </summary>
      <param name="e">
                    The event data.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> is null.
                </exception>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ButtonBase.OnKeyUp(System.Windows.Input.KeyEventArgs)">
      <summary>
                    Provides class handling for the <see cref="E:System.Windows.UIElement.KeyUp" /> routed event that occurs when the user releases a key while this control has focus.
                </summary>
      <param name="e">
                    The event data.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> is null.
                </exception>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ButtonBase.OnLostFocus(System.Windows.RoutedEventArgs)">
      <summary>
                    Provides handling for the <see cref="E:System.Windows.UIElement.LostFocus" /> event.
                </summary>
      <param name="e">
                    The event data for the <see cref="E:System.Windows.UIElement.LostFocus" /> event.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> is null.
                </exception>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
      <summary>
                    Provides class handling for the <see cref="E:System.Windows.UIElement.MouseEnter" /> event that occurs when the mouse enters this control. 
                </summary>
      <param name="e">
                    The event data.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> is null.
                </exception>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
      <summary>
                    Provides class handling for the <see cref="E:System.Windows.UIElement.MouseLeave" /> routed event that occurs when the mouse leaves an element. 
                </summary>
      <param name="e">
                    The event data for the <see cref="E:System.Windows.UIElement.MouseLeave" /> event.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> is null.
                </exception>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>
                    Provides class handling for the <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> event that occurs when the left mouse button is pressed while the mouse pointer is over this control.
                </summary>
      <param name="e">
                    The event data. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> is null.
                </exception>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>
                    Provides class handling for the <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> event that occurs when the left mouse button is released while the mouse pointer is over this control. 
                </summary>
      <param name="e">
                    The event data.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> is null.
                </exception>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseMove(System.Windows.Input.MouseEventArgs)">
      <summary>
                    Provides class handling for the <see cref="E:System.Windows.UIElement.MouseMove" /> event that occurs when the mouse pointer moves while over this element.
                </summary>
      <param name="e">
                    The event data.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> is null.
                </exception>
    </member>
    <member name="T:System.Windows.Controls.Primitives.DragCompletedEventArgs">
      <summary>
                    Provides data for the <see cref="E:System.Windows.Controls.Primitives.Thumb.DragCompleted" /> event that occurs when a user completes a drag operation with the mouse of a <see cref="T:System.Windows.Controls.Primitives.Thumb" /> control. 
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.DragCompletedEventArgs.#ctor(System.Double,System.Double,System.Boolean)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.DragCompletedEventArgs" /> class. 
                </summary>
      <param name="horizontalChange">
                    The horizontal change in position of the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> control, resulting from the drag operation.
                </param>
      <param name="verticalChange">
                    The vertical change in position of the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> control, resulting from the drag operation.
                </param>
      <param name="canceled">
                    A value that indicates whether the drag operation was canceled by a call to the <see cref="M:System.Windows.Controls.Primitives.Thumb.CancelDrag" /> method.
                </param>
    </member>
    <member name="P:System.Windows.Controls.Primitives.DragCompletedEventArgs.Canceled">
      <summary>
                    Gets a value that indicates whether the drag operation was canceled.
                </summary>
      <returns>true if the drag operation was canceled; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.DragCompletedEventArgs.HorizontalChange">
      <summary>
                    Gets the horizontal distance between the current mouse position and the thumb coordinates.
                </summary>
      <returns>
                    The horizontal distance between the current mouse position and the thumb coordinates.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.DragCompletedEventArgs.VerticalChange">
      <summary>
                    Gets the vertical distance between the current mouse position and the thumb coordinates.
                </summary>
      <returns>
                    The vertical distance between the current mouse position and the thumb coordinates.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.Primitives.DragCompletedEventHandler">
      <summary>
                    Represents the method that will handle the <see cref="E:System.Windows.Controls.Primitives.Thumb.DragCompleted" /> event of a <see cref="T:System.Windows.Controls.Primitives.Thumb" />. 
                </summary>
      <param name="sender">
                    The object where the event handler is attached.
                </param>
      <param name="e">
                    The event data.
                </param>
    </member>
    <member name="T:System.Windows.Controls.Primitives.DragDeltaEventArgs">
      <summary>
                    Provides data for the <see cref="E:System.Windows.Controls.Primitives.Thumb.DragDelta" /> event that occurs one or more times when a user drags a <see cref="T:System.Windows.Controls.Primitives.Thumb" /> control with the mouse..
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.DragDeltaEventArgs.#ctor(System.Double,System.Double)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.DragDeltaEventArgs" /> class.
                </summary>
      <param name="horizontalChange">
                    The horizontal change in the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> position since the last <see cref="E:System.Windows.Controls.Primitives.Thumb.DragDelta" /> event.
                </param>
      <param name="verticalChange">
                    The vertical change in the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> position since the last <see cref="E:System.Windows.Controls.Primitives.Thumb.DragDelta" /> event.
                </param>
    </member>
    <member name="P:System.Windows.Controls.Primitives.DragDeltaEventArgs.HorizontalChange">
      <summary>
                    Gets the horizontal change in the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> position since the last <see cref="E:System.Windows.Controls.Primitives.Thumb.DragDelta" /> event.
                </summary>
      <returns>
                    The horizontal change in the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> position since the last <see cref="E:System.Windows.Controls.Primitives.Thumb.DragDelta" /> event.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.DragDeltaEventArgs.VerticalChange">
      <summary>
                    Gets the vertical change in the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> position since the last <see cref="E:System.Windows.Controls.Primitives.Thumb.DragDelta" /> event.
                </summary>
      <returns>
                    The vertical change in the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> position since the last <see cref="E:System.Windows.Controls.Primitives.Thumb.DragDelta" /> event.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.Primitives.DragDeltaEventHandler">
      <summary>
                    Represents the method that will handle the <see cref="E:System.Windows.Controls.Primitives.Thumb.DragDelta" /> event of a <see cref="T:System.Windows.Controls.Primitives.Thumb" />. 
                </summary>
      <param name="sender">
                    The object where the event handler is attached.
                </param>
      <param name="e">
                    The event data.
                </param>
    </member>
    <member name="T:System.Windows.Controls.Primitives.DragStartedEventArgs">
      <summary>
                    Provides data for the <see cref="E:System.Windows.Controls.Primitives.Thumb.DragStarted" /> event that occurs when a user drags a <see cref="T:System.Windows.Controls.Primitives.Thumb" /> control with the mouse. 
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.DragStartedEventArgs.#ctor(System.Double,System.Double)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.DragStartedEventArgs" /> class.
                </summary>
      <param name="horizontalOffset">
                    The horizontal distance between the current mouse position and the thumb coordinates.
                </param>
      <param name="verticalOffset">
                    The vertical distance between the current mouse position and the thumb coordinates.
                </param>
    </member>
    <member name="P:System.Windows.Controls.Primitives.DragStartedEventArgs.HorizontalOffset">
      <summary>
                    Gets the horizontal distance between the current mouse position and the thumb coordinates.
                </summary>
      <returns>
                    The horizontal distance between the current mouse position and the thumb coordinates.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.DragStartedEventArgs.VerticalOffset">
      <summary>
                    Gets the vertical distance between the current mouse position and the thumb coordinates.
                </summary>
      <returns>
                    The vertical distance between the current mouse position and the thumb coordinates.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.Primitives.DragStartedEventHandler">
      <summary>
                    Represents the method that will handle the <see cref="E:System.Windows.Controls.Primitives.Thumb.DragStarted" /> event of a <see cref="T:System.Windows.Controls.Primitives.Thumb" />. 
                </summary>
      <param name="sender">
                    The object where the event handler is attached.
                </param>
      <param name="e">
                    The event data.
                </param>
    </member>
    <member name="T:System.Windows.Controls.Primitives.LayoutInformation">
      <summary>
                    Defines methods that provide additional information about the layout of an element.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.LayoutInformation.GetLayoutClip(System.Windows.FrameworkElement)">
      <summary>
                    Returns the visible region of the specified element.
                </summary>
      <returns>
                    The visible region of the clipped element, or null if the element was not clipped during layout.
                </returns>
      <param name="element">
                    The element whose layout clip geometry is desired.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.
                </exception>
    </member>
    <member name="M:System.Windows.Controls.Primitives.LayoutInformation.GetLayoutExceptionElement(System.Windows.Threading.Dispatcher)">
      <summary>
                    Returns the element that was being processed by the layout system at the moment of an unhandled exception.
                </summary>
      <returns>
                    The element being processed at the time of an unhandled exception.
                </returns>
      <param name="dispatcher">
                    The <see cref="T:System.Windows.Threading.Dispatcher" /> object that defines the scope of the operation.  There is one dispatcher per layout engine instance.
                </param>
    </member>
    <member name="M:System.Windows.Controls.Primitives.LayoutInformation.GetLayoutSlot(System.Windows.FrameworkElement)">
      <summary>
                    Returns the layout slot, or bounding box, that contains the specified element.
                </summary>
      <returns>
                    The area assigned to the element for layout.
                </returns>
      <param name="element">
                    The element whose layout slot is desired.
                </param>
    </member>
    <member name="T:System.Windows.Controls.Primitives.Popup">
      <summary>
                    Displays content on top of existing Silverlight content, within the bounds of the Silverlight control.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.Popup.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.Popup" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.Controls.Primitives.Popup.Child">
      <summary>
                    Gets or sets the content to be hosted in the popup. 
                </summary>
      <returns>
                    The content to be hosted in the popup.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.Popup.ChildProperty">
      <summary>
                    Gets the identifier for the <see cref="P:System.Windows.Controls.Primitives.Popup.Child" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Primitives.Popup.Child" /> dependency property.
                </returns>
    </member>
    <member name="E:System.Windows.Controls.Primitives.Popup.Closed">
      <summary>
                    Occurs when the <see cref="P:System.Windows.Controls.Primitives.Popup.IsOpen" /> property is set to false.
                </summary>
    </member>
    <member name="P:System.Windows.Controls.Primitives.Popup.HorizontalOffset">
      <summary>
                    Gets or sets the distance between the left side of the Silverlight control and the left side of the popup. 
                </summary>
      <returns>
                    The distance, in pixels, between the left side of the Silverlight control and the left side of the popup.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.Popup.HorizontalOffsetProperty">
      <summary>
                    Gets the identifier for the <see cref="P:System.Windows.Controls.Primitives.Popup.HorizontalOffset" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Primitives.Popup.HorizontalOffset" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.Popup.IsOpen">
      <summary>
                    Gets or sets whether the popup is currently displaying on the screen.
                </summary>
      <returns>true if the popup is currently displaying; otherwise, false. The default is false.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.Popup.IsOpenProperty">
      <summary>
                    Gets the identifier for the <see cref="P:System.Windows.Controls.Primitives.Popup.IsOpen" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Primitives.Popup.IsOpen" /> dependency property.
                </returns>
    </member>
    <member name="E:System.Windows.Controls.Primitives.Popup.Opened">
      <summary>
                    Occurs when the <see cref="P:System.Windows.Controls.Primitives.Popup.IsOpen" /> property is set to true.
                </summary>
    </member>
    <member name="P:System.Windows.Controls.Primitives.Popup.VerticalOffset">
      <summary>
                    Gets or sets the distance between the top of the Silverlight control and the top of the popup. 
                </summary>
      <returns>
                    The distance, in pixels, from the top of the Silverlight control and the top of the popup.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.Popup.VerticalOffsetProperty">
      <summary>
                    Gets the identifier for the <see cref="P:System.Windows.Controls.Primitives.Popup.VerticalOffset" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Primitives.Popup.VerticalOffset" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.Primitives.RangeBase">
      <summary>
                    Represents an element that has a value within a specific range, such as the <see cref="T:System.Windows.Controls.ProgressBar" />, <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />, and <see cref="T:System.Windows.Controls.Slider" /> controls.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.RangeBase.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.RangeBase" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.Controls.Primitives.RangeBase.LargeChange">
      <summary>
                    Gets or sets a value to be added to or subtracted from the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> of a <see cref="T:System.Windows.Controls.Primitives.RangeBase" /> control. 
                </summary>
      <returns>
        <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> to add to or subtract from the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> of the <see cref="T:System.Windows.Controls.Primitives.RangeBase" /> element. The default is 1. 
                </returns>
      <exception cref="T:System.ArgumentException">
                    The new value is <see cref="F:System.Double.NaN" />, less than zero, or <see cref="M:System.Double.IsInfinity(System.Double)" /> is true.
                </exception>
    </member>
    <member name="F:System.Windows.Controls.Primitives.RangeBase.LargeChangeProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Primitives.RangeBase.LargeChange" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Primitives.RangeBase.LargeChange" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.RangeBase.Maximum">
      <summary>
                    Gets or sets the highest possible <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> of the range element. 
                </summary>
      <returns>
                    The highest possible <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> of the range element. The default is 1.
                </returns>
      <exception cref="T:System.ArgumentException">
                    The new value is either <see cref="F:System.Double.NaN" /> or <see cref="M:System.Double.IsInfinity(System.Double)" /> is true.
                </exception>
    </member>
    <member name="F:System.Windows.Controls.Primitives.RangeBase.MaximumProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Maximum" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Maximum" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.RangeBase.Minimum">
      <summary>
                    Gets or sets the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum" /> possible <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> of the range element. 
                </summary>
      <returns>
        <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum" /> possible <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> of the range element. The default is 0.
                </returns>
      <exception cref="T:System.ArgumentException">
                    The new value is either <see cref="F:System.Double.NaN" /> or <see cref="M:System.Double.IsInfinity(System.Double)" /> is true.
                </exception>
    </member>
    <member name="F:System.Windows.Controls.Primitives.RangeBase.MinimumProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.Primitives.RangeBase.OnMaximumChanged(System.Double,System.Double)">
      <summary>
                    Called when the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Maximum" /> property changes. 
                </summary>
      <param name="oldMaximum">
                    Old value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Maximum" /> property.
                </param>
      <param name="newMaximum">
                    New value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Maximum" /> property.
                </param>
    </member>
    <member name="M:System.Windows.Controls.Primitives.RangeBase.OnMinimumChanged(System.Double,System.Double)">
      <summary>
                    Called when the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum" /> property changes. 
                </summary>
      <param name="oldMinimum">
                    Old value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum" /> property.
                </param>
      <param name="newMinimum">
                    New value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum" /> property.
                </param>
    </member>
    <member name="M:System.Windows.Controls.Primitives.RangeBase.OnValueChanged(System.Double,System.Double)">
      <summary>
                    Raises the <see cref="E:System.Windows.Controls.Primitives.RangeBase.ValueChanged" /> routed event. 
                </summary>
      <param name="oldValue">
                    Old value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> property.
                </param>
      <param name="newValue">
                    New value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> property.
                </param>
    </member>
    <member name="P:System.Windows.Controls.Primitives.RangeBase.SmallChange">
      <summary>
                    Gets or sets a <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> to be added to or subtracted from the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> of a <see cref="T:System.Windows.Controls.Primitives.RangeBase" /> control. 
                </summary>
      <returns>
        <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> to add to or subtract from the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> of the <see cref="T:System.Windows.Controls.Primitives.RangeBase" /> element. The default is 0.1. 
                </returns>
      <exception cref="T:System.ArgumentException">
                    The new value is <see cref="F:System.Double.NaN" />, less than zero, or <see cref="M:System.Double.IsInfinity(System.Double)" /> is true.
                </exception>
    </member>
    <member name="F:System.Windows.Controls.Primitives.RangeBase.SmallChangeProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Primitives.RangeBase.SmallChange" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Primitives.RangeBase.SmallChange" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.Primitives.RangeBase.ToString">
      <summary>
                    Provides a string representation of a <see cref="T:System.Windows.Controls.Primitives.RangeBase" /> object. 
                </summary>
      <returns>
                    Returns the string representation of a <see cref="T:System.Windows.Controls.Primitives.RangeBase" /> object.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.RangeBase.Value">
      <summary>
                    Gets or sets the current setting of the range control, which may be coerced. 
                </summary>
      <returns>
                    The current setting of the range control, which may be coerced. The default is 0.
                </returns>
      <exception cref="T:System.ArgumentException">
                    The new value is either <see cref="F:System.Double.NaN" /> or <see cref="M:System.Double.IsInfinity(System.Double)" /> is true.
                </exception>
    </member>
    <member name="E:System.Windows.Controls.Primitives.RangeBase.ValueChanged">
      <summary>
                    Occurs when the range value changes. 
                </summary>
    </member>
    <member name="F:System.Windows.Controls.Primitives.RangeBase.ValueProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.Primitives.RepeatButton">
      <summary>
                    Represents a control that raises its <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> event repeatedly from the time it is pressed until it is released.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.RepeatButton.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.RepeatButton" /> class.
                </summary>
    </member>
    <member name="P:System.Windows.Controls.Primitives.RepeatButton.Delay">
      <summary>
                    Gets or sets the time, in milliseconds, the <see cref="T:System.Windows.Controls.Primitives.RepeatButton" /> waits when it is pressed before it starts repeating the click action.
                </summary>
      <returns>
                    The time, in milliseconds, the <see cref="T:System.Windows.Controls.Primitives.RepeatButton" /> waits when it is pressed before it starts repeating the click action. The default is 250.
                </returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Windows.Controls.Primitives.RepeatButton.Delay" /> is set to a value less than 0.
                </exception>
    </member>
    <member name="F:System.Windows.Controls.Primitives.RepeatButton.DelayProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Primitives.RepeatButton.Delay" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Primitives.RepeatButton.Delay" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.RepeatButton.Interval">
      <summary>
                    Gets or sets the time, in milliseconds, between repetitions of the click action, as soon as repeating starts.
                </summary>
      <returns>
                    The time, in milliseconds, between repetitions of the click action, as soon as repeating starts. The default is 250.
                </returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Windows.Controls.Primitives.RepeatButton.Interval" /> is set to a value less than 0.
                </exception>
    </member>
    <member name="F:System.Windows.Controls.Primitives.RepeatButton.IntervalProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Primitives.RepeatButton.Interval" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Primitives.RepeatButton.Interval" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.Primitives.RepeatButton.OnApplyTemplate">
      <summary>
                    Builds the visual tree for the <see cref="T:System.Windows.Controls.Primitives.RepeatButton" /> control when a new template is applied.
                </summary>
    </member>
    <member name="T:System.Windows.Controls.Primitives.ScrollBar">
      <summary>
                    Represents a control that provides a scroll bar that has a sliding <see cref="T:System.Windows.Controls.Primitives.Thumb" /> whose position corresponds to a value.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ScrollBar.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> class.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ScrollBar.OnApplyTemplate">
      <summary>
                    Builds the visual tree for the <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> control when a new template is applied.
                </summary>
    </member>
    <member name="P:System.Windows.Controls.Primitives.ScrollBar.Orientation">
      <summary>
                    Gets or sets whether the <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> is displayed horizontally or vertically. 
                </summary>
      <returns>
                    An <see cref="T:System.Windows.Controls.Orientation" /> enumeration value that defines whether the <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> is displayed horizontally or vertically. The default is <see cref="F:System.Windows.Controls.Orientation.Horizontal" />.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ScrollBar.OrientationProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Primitives.ScrollBar.Orientation" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Primitives.ScrollBar.Orientation" /> dependency property.
                </returns>
    </member>
    <member name="E:System.Windows.Controls.Primitives.ScrollBar.Scroll">
      <summary>
                    Occurs one or more times as content scrolls in a <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> when the user moves the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> by using the mouse.
                </summary>
    </member>
    <member name="P:System.Windows.Controls.Primitives.ScrollBar.ViewportSize">
      <summary>
                    Gets or sets the amount of the scrollable content that is currently visible. 
                </summary>
      <returns>
                    The amount of the scrollable content that is currently visible. The default is 0.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ScrollBar.ViewportSizeProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Primitives.ScrollBar.ViewportSize" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Primitives.ScrollBar.ViewportSize" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.Primitives.ScrollEventArgs">
      <summary>
                    Provides data for the <see cref="E:System.Windows.Controls.Primitives.ScrollBar.Scroll" /> event. 
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ScrollEventArgs.#ctor(System.Windows.Controls.Primitives.ScrollEventType,System.Double)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.ScrollEventArgs" /> class. 
                </summary>
      <param name="scrollEventType">
                    A <see cref="T:System.Windows.Controls.Primitives.ScrollEventType" /> describing the event.
                </param>
      <param name="newValue">
                    The new <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> of the <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />.
                </param>
    </member>
    <member name="P:System.Windows.Controls.Primitives.ScrollEventArgs.NewValue">
      <summary>
                    Gets the new <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> of the <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />.
                </summary>
      <returns>
                    The <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> of the <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> after the event.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.ScrollEventArgs.ScrollEventType">
      <summary>
                    Gets a <see cref="T:System.Windows.Controls.Primitives.ScrollEventType" /> describing the event.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Controls.Primitives.ScrollEventType" /> describing the event.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.Primitives.ScrollEventHandler">
      <summary>
                    Represents the method that will handle the <see cref="E:System.Windows.Controls.Primitives.ScrollBar.Scroll" /> event of a <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />.
                </summary>
      <param name="sender">
                    The source of the event. 
                </param>
      <param name="e">
                    A <see cref="T:System.Windows.Controls.Primitives.ScrollEventArgs" /> that contains the event data. 
                </param>
    </member>
    <member name="T:System.Windows.Controls.Primitives.ScrollEventType">
      <summary>
                    Specifies the type of <see cref="E:System.Windows.Controls.Primitives.ScrollBar.Scroll" /> event that occurred. 
                </summary>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ScrollEventType.EndScroll">
      <summary>
                    Specifies that the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> was dragged to a new position and is now no longer being dragged by the user.
                </summary>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ScrollEventType.First">
      <summary>
                    Specifies that the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> moved to the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum" /> position of the <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />. 
                </summary>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ScrollEventType.LargeDecrement">
      <summary>
                    Specifies that the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> moved a specified distance, as determined by the value of <see cref="P:System.Windows.Controls.Primitives.RangeBase.LargeChange" />. The <see cref="T:System.Windows.Controls.Primitives.Thumb" /> moved to the left for a horizontal <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> or upward for a vertical <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />. 
                </summary>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ScrollEventType.LargeIncrement">
      <summary>
                    Specifies that the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> moved a specified distance, as determined by the value of <see cref="P:System.Windows.Controls.Primitives.RangeBase.LargeChange" />. The <see cref="T:System.Windows.Controls.Primitives.Thumb" /> moved to the right for a horizontal <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> or downward for a vertical <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />.
                </summary>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ScrollEventType.Last">
      <summary>
                    Specifies that the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> moved to the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum" /> position of the <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />.
                </summary>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ScrollEventType.SmallDecrement">
      <summary>
                    Specifies that the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> moved a specified distance, as determined by the value of <see cref="P:System.Windows.Controls.Primitives.RangeBase.SmallChange" />. The <see cref="T:System.Windows.Controls.Primitives.Thumb" /> moved to the left for a horizontal <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> or upward for a vertical <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />.
                </summary>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ScrollEventType.SmallIncrement">
      <summary>
                    Specifies that the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> moved a specified distance, as determined by the value of <see cref="P:System.Windows.Controls.Primitives.RangeBase.SmallChange" />. The <see cref="T:System.Windows.Controls.Primitives.Thumb" /> moved to the right for a horizontal <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> or downward for a vertical <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />.
                </summary>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ScrollEventType.ThumbPosition">
      <summary>
                    Specifies that the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> moved to a new position because the user selected Scroll Here in the shortcut menu of the <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />.
                </summary>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ScrollEventType.ThumbTrack">
      <summary>
                    The <see cref="T:System.Windows.Controls.Primitives.Thumb" /> was dragged and caused a <see cref="E:System.Windows.UIElement.MouseMove" /> event. A <see cref="E:System.Windows.Controls.Primitives.ScrollBar.Scroll" /> event of this <see cref="T:System.Windows.Controls.Primitives.ScrollEventType" /> may occur more than one time when the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> is dragged in the <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />.
                </summary>
    </member>
    <member name="T:System.Windows.Controls.Primitives.Selector">
      <summary>
                    Represents a control that allows a user to select an item from a collection of items.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.Selector.ClearContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
      <summary>
                    Removes any bindings and templates applied to the item container for the specified content.
                </summary>
      <param name="element">
                    The combo box item used to display the specified content.
                </param>
      <param name="item">
                    The item content.
                </param>
    </member>
    <member name="M:System.Windows.Controls.Primitives.Selector.GetIsSelectionActive(System.Windows.DependencyObject)">
      <summary>
                    Gets a value that indicates whether the specified <see cref="T:System.Windows.Controls.Primitives.Selector" /> has the focus.
                </summary>
      <returns>true to indicate that the <see cref="T:System.Windows.Controls.Primitives.Selector" /> has the focus; otherwise, false. 
                </returns>
      <param name="element">
                    The <see cref="T:System.Windows.Controls.Primitives.Selector" /> to evaluate.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.
                </exception>
    </member>
    <member name="M:System.Windows.Controls.Primitives.Selector.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>
                    Updates the current selected item when the <see cref="P:System.Windows.Controls.ItemsControl.Items" /> collection has changed.
                </summary>
      <param name="e">
                    Contains data about changes in the items collection.
                </param>
    </member>
    <member name="P:System.Windows.Controls.Primitives.Selector.SelectedIndex">
      <summary>
                    Gets or sets the index of the selected item.
                </summary>
      <returns>
                    The index of the selected item. The default is -1.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.Selector.SelectedIndexProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Primitives.Selector.SelectedIndex" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Primitives.Selector.SelectedIndex" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.Selector.SelectedItem">
      <summary>
                    Gets or sets the selected item.
                </summary>
      <returns>
                    The selected item. The default is null. 
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.Selector.SelectedItemProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Primitives.Selector.SelectedItem" /> dependency property.
                </summary>
    </member>
    <member name="E:System.Windows.Controls.Primitives.Selector.SelectionChanged">
      <summary>
                    Occurs when the currently selected item changes.
                </summary>
    </member>
    <member name="T:System.Windows.Controls.Primitives.Thumb">
      <summary>
                    Represents a control that can be dragged by the user.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.Thumb.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> class.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.Thumb.CancelDrag">
      <summary>
                    Cancels a drag operation for the <see cref="T:System.Windows.Controls.Primitives.Thumb" />.
                </summary>
    </member>
    <member name="E:System.Windows.Controls.Primitives.Thumb.DragCompleted">
      <summary>
                    Occurs when the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> control loses mouse capture.
                </summary>
    </member>
    <member name="E:System.Windows.Controls.Primitives.Thumb.DragDelta">
      <summary>
                    Occurs one or more times as the mouse pointer is moved when a <see cref="T:System.Windows.Controls.Primitives.Thumb" /> control has logical focus and mouse capture. 
                </summary>
    </member>
    <member name="E:System.Windows.Controls.Primitives.Thumb.DragStarted">
      <summary>
                    Occurs when a <see cref="T:System.Windows.Controls.Primitives.Thumb" /> control receives logical focus and mouse capture.
                </summary>
    </member>
    <member name="P:System.Windows.Controls.Primitives.Thumb.IsDragging">
      <summary>
                    Gets whether the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> control has focus and mouse capture.
                </summary>
      <returns>true if the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> control has focus and mouse capture; otherwise false. The default is false.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.Thumb.IsDraggingProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Primitives.Thumb.IsDragging" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Primitives.Thumb.IsDragging" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.Thumb.IsFocused">
      <summary>
                    Gets whether the thumb has focus.
                </summary>
      <returns>true to indicate the thumb has focus; otherwise false. The default is false.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.Thumb.IsFocusedProperty">
      <summary>
                    Gets the identifier for the <see cref="P:System.Windows.Controls.Primitives.Thumb.IsFocused" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Primitives.Thumb.IsFocused" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.Primitives.Thumb.OnApplyTemplate">
      <summary>
                    Builds the visual tree for the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> control when a new template is applied.
                </summary>
    </member>
    <member name="T:System.Windows.Controls.Primitives.ToggleButton">
      <summary>
                    Base class for controls that can switch states, such as <see cref="T:System.Windows.Controls.CheckBox" /> and <see cref="T:System.Windows.Controls.RadioButton" />. 
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ToggleButton.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.ToggleButton" /> class. 
                </summary>
    </member>
    <member name="E:System.Windows.Controls.Primitives.ToggleButton.Checked">
      <summary>
                    Occurs when a <see cref="T:System.Windows.Controls.Primitives.ToggleButton" /> is checked.
                </summary>
    </member>
    <member name="E:System.Windows.Controls.Primitives.ToggleButton.Indeterminate">
      <summary>
                    Occurs when the state of a <see cref="T:System.Windows.Controls.Primitives.ToggleButton" /> is switched to the indeterminate state.
                </summary>
    </member>
    <member name="P:System.Windows.Controls.Primitives.ToggleButton.IsChecked">
      <summary>
                    Gets or sets whether the <see cref="T:System.Windows.Controls.Primitives.ToggleButton" /> is checked.
                </summary>
      <returns>true if the <see cref="T:System.Windows.Controls.Primitives.ToggleButton" /> is checked; false if the <see cref="T:System.Windows.Controls.Primitives.ToggleButton" /> is unchecked; otherwise null. The default is false.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ToggleButton.IsCheckedProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Primitives.ToggleButton.IsChecked" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Primitives.ToggleButton.IsChecked" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.ToggleButton.IsThreeState">
      <summary>
                    Gets or sets whether the control supports two or three states.
                </summary>
      <returns>true if the control supports three states; otherwise, false. The default is false.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ToggleButton.IsThreeStateProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Primitives.ToggleButton.IsThreeState" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Primitives.ToggleButton.IsThreeState" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ToggleButton.OnApplyTemplate">
      <summary>
                    Builds the visual tree for the <see cref="T:System.Windows.Controls.Primitives.ToggleButton" /> when a new template is applied.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ToggleButton.OnClick">
      <summary>
                    Called when the <see cref="T:System.Windows.Controls.Primitives.ToggleButton" /> is clicked by the mouse or the keyboard. 
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ToggleButton.OnContentChanged(System.Object,System.Object)">
      <summary>
                    Called when the <see cref="T:System.Windows.Controls.ContentControl" /> property changes.
                </summary>
      <param name="oldContent">
                    The content to be replaced.
                </param>
      <param name="newContent">
                    The new content to display.
                </param>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ToggleButton.OnCreateAutomationPeer">
      <summary>
                    Returns a <see cref="T:System.Windows.Automation.Peers.ToggleButtonAutomationPeer" /> for use by the Silverlight automation infrastructure.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Automation.Peers.ToggleButtonAutomationPeer" /> for the <see cref="T:System.Windows.Controls.Primitives.ToggleButton" /> object.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ToggleButton.OnToggle">
      <summary>
                    Called by the <see cref="M:System.Windows.Controls.Primitives.ToggleButton.OnClick" /> method to implement toggle behavior. 
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ToggleButton.ToString">
      <summary>
                    Returns the string representation of a <see cref="T:System.Windows.Controls.Primitives.ToggleButton" /> object. 
                </summary>
      <returns>
                    String representation of a <see cref="T:System.Windows.Controls.Primitives.ToggleButton" /> object.
                </returns>
    </member>
    <member name="E:System.Windows.Controls.Primitives.ToggleButton.Unchecked">
      <summary>
                    Occurs when a <see cref="T:System.Windows.Controls.Primitives.ToggleButton" /> is unchecked.
                </summary>
    </member>
    <member name="T:System.Windows.Data.Binding">
      <summary>
                    Defines a binding that connects the properties of binding targets and data sources.
                </summary>
    </member>
    <member name="M:System.Windows.Data.Binding.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Data.Binding" /> class.
                </summary>
    </member>
    <member name="M:System.Windows.Data.Binding.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Data.Binding" /> class with an initial property path for the data source.
                </summary>
      <param name="path">
                    The initial property path for the source of the binding.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is set to null.
                </exception>
    </member>
    <member name="P:System.Windows.Data.Binding.Converter">
      <summary>
                    Gets or sets the converter object that is called by the binding engine to modify the data as it is passed between the source and target, or vice versa.
                </summary>
      <returns>
                    The <see cref="T:System.Windows.Data.IValueConverter" /> object that modifies the data.
                </returns>
    </member>
    <member name="P:System.Windows.Data.Binding.ConverterCulture">
      <summary>
                    Gets or sets the culture to be used by the <see cref="P:System.Windows.Data.Binding.Converter" />.
                </summary>
      <returns>
                    The <see cref="T:System.Globalization.CultureInfo" /> used by the <see cref="P:System.Windows.Data.Binding.Converter" />.
                </returns>
    </member>
    <member name="P:System.Windows.Data.Binding.ConverterParameter">
      <summary>
                    Gets or sets a parameter that can be used in the <see cref="P:System.Windows.Data.Binding.Converter" /> logic.
                </summary>
      <returns>
                    A parameter to be passed to the <see cref="P:System.Windows.Data.Binding.Converter" />.  This can be used in the conversion logic.  The default is null.
                </returns>
    </member>
    <member name="P:System.Windows.Data.Binding.Mode">
      <summary>
                    Gets or sets a value that indicates the direction of the data flow in the binding.
                </summary>
      <returns>
                    One of the <see cref="T:System.Windows.Data.BindingMode" /> values. The default is <see cref="F:System.Windows.Data.BindingMode.OneWay" />.
                </returns>
    </member>
    <member name="P:System.Windows.Data.Binding.NotifyOnValidationError">
      <summary>
                    Gets or sets a value that indicates whether or not the <see cref="E:System.Windows.FrameworkElement.BindingValidationError" /> event is raised on validation errors.
                </summary>
      <returns>true if the <see cref="E:System.Windows.FrameworkElement.BindingValidationError" /> event is raised; otherwise, false. The default is false.
                </returns>
    </member>
    <member name="P:System.Windows.Data.Binding.Path">
      <summary>
                    Gets or sets the path to target property of the binding.
                </summary>
      <returns>
                    The property path for the source of the binding. See <see cref="T:System.Windows.PropertyPath" /> or Property Path Syntax.
                </returns>
    </member>
    <member name="P:System.Windows.Data.Binding.Source">
      <summary>
                    Gets or sets the data source for the binding.
                </summary>
      <returns>
                    The source object that contains the data for the binding.
                </returns>
    </member>
    <member name="P:System.Windows.Data.Binding.ValidatesOnExceptions">
      <summary>
                    Gets or sets a value that indicates whether the binding engine will report exception validation errors.
                </summary>
      <returns>true if the binding engine will report exception validation errors; otherwise, false.  The default is false.
                </returns>
    </member>
    <member name="T:System.Windows.Data.BindingExpressionBase">
      <summary>
                    A <see cref="T:System.Windows.Data.BindingExpressionBase" /> object is returned by <see cref="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)" /> if the dependency property is data bound.  
                </summary>
    </member>
    <member name="T:System.Windows.Data.BindingMode">
      <summary>
                    Describes how the data propagates in a binding.
                </summary>
    </member>
    <member name="F:System.Windows.Data.BindingMode.OneWay">
      <summary>
                    Updates the target property when the binding is created.  Changes to the source object can also propagate to the target.
                </summary>
    </member>
    <member name="F:System.Windows.Data.BindingMode.OneTime">
      <summary>
                    Updates the target property when the binding is created.
                </summary>
    </member>
    <member name="F:System.Windows.Data.BindingMode.TwoWay">
      <summary>
                    Updates either the target or the source object when either changes.  When the binding is created, the target property is updated from the source.
                </summary>
    </member>
    <member name="T:System.Windows.Data.IValueConverter">
      <summary>
                    Exposes methods that allow modifying the data as it passes through the binding engine.
                </summary>
    </member>
    <member name="M:System.Windows.Data.IValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
                    Modifies the source data before passing it to the target for display in the UI.
                </summary>
      <returns>
                    The value to be passed to the target dependency property.
                </returns>
      <param name="value">
                    The source data being passed to the target.
                </param>
      <param name="targetType">
                    The <see cref="T:System.Type" /> of data expected by the target dependency property.
                </param>
      <param name="parameter">
                    An optional parameter to be used in the converter logic.
                </param>
      <param name="culture">
                    The culture of the conversion.
                </param>
    </member>
    <member name="M:System.Windows.Data.IValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
                    Modifies the target data before passing it to the source object.  This method is called only in <see cref="F:System.Windows.Data.BindingMode.TwoWay" /> bindings.
                </summary>
      <returns>
                    The value to be passed to the source object.
                </returns>
      <param name="value">
                    The target data being passed to the source.
                </param>
      <param name="targetType">
                    The <see cref="T:System.Type" /> of data expected by the source object.
                </param>
      <param name="parameter">
                    An optional parameter to be used in the converter logic.
                </param>
      <param name="culture">
                    The culture of the conversion.
                </param>
    </member>
    <member name="T:System.Windows.Documents.FontSource">
      <summary>
                    Represents one or more fonts created from a stream.
                </summary>
    </member>
    <member name="M:System.Windows.Documents.FontSource.#ctor(System.IO.Stream)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Documents.FontSource" /> class. 
                </summary>
      <param name="stream">
                    The stream that contains the font source. 
                </param>
    </member>
    <member name="T:System.Windows.Documents.Glyphs">
      <summary>
                    Provides a visual representation of letters, characters, or symbols, in a specific font and style.
                </summary>
    </member>
    <member name="M:System.Windows.Documents.Glyphs.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Documents.Glyphs" /> class.
                </summary>
    </member>
    <member name="P:System.Windows.Documents.Glyphs.Fill">
      <summary>
                    Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that is used to render the glyphs.
                </summary>
      <returns>
                    The brush to use to render the glyphs. The default is null, which is evaluated as <see cref="P:System.Windows.Media.Colors.Transparent" /> for rendering.
                </returns>
    </member>
    <member name="F:System.Windows.Documents.Glyphs.FillProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Documents.Glyphs.Fill" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Documents.Glyphs.Fill" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Documents.Glyphs.FontRenderingEmSize">
      <summary>
                    Gets or sets the em size used for rendering the glyphs.
                </summary>
      <returns>
                    The em size used for rendering. The default is 0.
                </returns>
    </member>
    <member name="F:System.Windows.Documents.Glyphs.FontRenderingEmSizeProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Documents.Glyphs.FontRenderingEmSize" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Documents.Glyphs.FontRenderingEmSize" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Documents.Glyphs.FontUri">
      <summary>
                    Gets or sets the location of the font used for rendering the glyphs.
                </summary>
      <returns>
                    The URI source of the font. The default is null.
                </returns>
    </member>
    <member name="F:System.Windows.Documents.Glyphs.FontUriProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Documents.Glyphs.FontUri" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Documents.Glyphs.FontUri" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Documents.Glyphs.Indices">
      <summary>
                    Gets or sets the glyph indices for the glyphs.
                </summary>
      <returns>
                    A string that defines glyph indices as well as other glyph specifics in a string mini-language. The default is null.
                </returns>
    </member>
    <member name="F:System.Windows.Documents.Glyphs.IndicesProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Documents.Glyphs.Indices" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Documents.Glyphs.Indices" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Documents.Glyphs.OriginX">
      <summary>
                    Gets or sets the x origin for the glyphs.
                </summary>
      <returns>
                    The x origin of the <see cref="T:System.Windows.Documents.Glyphs" />, in pixels. The default is 0.
                </returns>
    </member>
    <member name="F:System.Windows.Documents.Glyphs.OriginXProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Documents.Glyphs.OriginX" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Documents.Glyphs.OriginX" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Documents.Glyphs.OriginY">
      <summary>
                    Gets or sets the y origin for the glyphs.
                </summary>
      <returns>
                    The y origin of the <see cref="T:System.Windows.Documents.Glyphs" />, in pixels. The default is 0.
                </returns>
    </member>
    <member name="F:System.Windows.Documents.Glyphs.OriginYProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Documents.Glyphs.OriginY" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Documents.Glyphs.OriginY" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Documents.Glyphs.StyleSimulations">
      <summary>
                    Gets or sets the style simulations applied to the glyphs.
                </summary>
      <returns>
                    One of the enumeration values that specifies the style simulations to apply to the glyphs. The default is None.
                </returns>
    </member>
    <member name="F:System.Windows.Documents.Glyphs.StyleSimulationsProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Documents.Glyphs.StyleSimulations" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Documents.Glyphs.StyleSimulations" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Documents.Glyphs.UnicodeString">
      <summary>
                    Gets or sets the Unicode string to render in glyphs.
                </summary>
      <returns>
                    A Unicode string with XAML-compatible encoding. The default is an empty string.
                </returns>
    </member>
    <member name="F:System.Windows.Documents.Glyphs.UnicodeStringProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Documents.Glyphs.UnicodeString" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Documents.Glyphs.UnicodeString" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Documents.Inline">
      <summary>
                    Provides a base for inline flow content element behavior.
                </summary>
    </member>
    <member name="M:System.Windows.Documents.Inline.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Documents.Inline" /> class.
                </summary>
    </member>
    <member name="M:System.Windows.Documents.Inline.FindName(System.String)">
      <summary>
                    Gets an object in the Silverlight object model by referencing the object's x:Name or <see cref="P:System.Windows.Documents.Inline.Name" /> attribute value.
                </summary>
      <returns>
                    The object that has the specified name, or null if no object is retrieved.
                </returns>
      <param name="name">
                    The name of the object to retrieve.
                </param>
    </member>
    <member name="P:System.Windows.Documents.Inline.FontFamily">
      <summary>
                    Gets or sets the preferred top-level font family for the content in this element. 
                </summary>
      <returns>
                    The preferred font family, or a primary preferred font family with one or more fallback font families. See <see cref="T:System.Windows.Media.FontFamily" /> for default information.
                </returns>
    </member>
    <member name="F:System.Windows.Documents.Inline.FontFamilyProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Documents.Inline.FontFamily" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Documents.Inline.FontFamily" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Documents.Inline.FontSize">
      <summary>
                    Gets or sets the font size for the content in this element. 
                </summary>
      <returns>
                    The desired font size in pixels. The default is 11 pixels.
                </returns>
    </member>
    <member name="F:System.Windows.Documents.Inline.FontSizeProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Documents.Inline.FontSize" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Documents.Inline.FontSize" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Documents.Inline.FontStretch">
      <summary>
                    Gets or sets the glyph width of the font in a family to select.
                </summary>
      <returns>
                    One of the <see cref="T:System.Windows.FontStretches" /> property values, specifying the desired font stretch. The default is <see cref="P:System.Windows.FontStretches.Normal" />.
                </returns>
    </member>
    <member name="F:System.Windows.Documents.Inline.FontStretchProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Documents.Inline.FontStretch" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Documents.Inline.FontStretch" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Documents.Inline.FontStyle">
      <summary>
                    Gets or sets the font style for the content in this element.
                </summary>
      <returns>
                    One of the <see cref="T:System.Windows.FontStyles" /> property values, specifying the font style. The default is <see cref="P:System.Windows.FontStyles.Normal" />.
                </returns>
    </member>
    <member name="F:System.Windows.Documents.Inline.FontStyleProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Documents.Inline.FontStyle" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Documents.Inline.FontStyle" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Documents.Inline.FontWeight">
      <summary>
                    Gets or sets the top-level font weight to select from the font family for the content in this element.
                </summary>
      <returns>
                    One of the <see cref="T:System.Windows.FontWeights" /> property values, specifying the font weight. The default is <see cref="P:System.Windows.FontWeights.Normal" />.
                </returns>
    </member>
    <member name="F:System.Windows.Documents.Inline.FontWeightProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Documents.Inline.FontWeight" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Documents.Inline.FontWeight" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Documents.Inline.Foreground">
      <summary>
                    Gets or sets the <see cref="T:System.Windows.Media.Brush" /> to apply to the content in this element. 
                </summary>
      <returns>
                    The brush that is applied to the text contents. The default is a <see cref="T:System.Windows.Media.SolidColorBrush" /> with <see cref="P:System.Windows.Media.SolidColorBrush.Color" /> value <see cref="P:System.Windows.Media.Colors.Black" />.
                </returns>
    </member>
    <member name="F:System.Windows.Documents.Inline.ForegroundProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Documents.Inline.Foreground" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Documents.Inline.Foreground" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Documents.Inline.Language">
      <summary>
                    Gets or sets the language of the content within an <see cref="T:System.Windows.Documents.Inline" /> element.
                </summary>
      <returns>
                    A value of type <see cref="T:System.Windows.Markup.XmlLanguage" />. The default is a <see cref="T:System.Windows.Markup.XmlLanguage" /> value created with the string en-US (<see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> is "en-US").
                </returns>
    </member>
    <member name="F:System.Windows.Documents.Inline.LanguageProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Documents.Inline.Language" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Documents.Inline.Language" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Documents.Inline.Name">
      <summary>
                    Gets or sets a unique identification for the object. <see cref="P:System.Windows.Documents.Inline.Name" /> can only be set from initial parsing of XAML.
                </summary>
      <returns>
                    The unique identifier for the object. This property is read-only for code, but write-only for XAML, due to special parser handling of XAML properties named "Name".
                </returns>
    </member>
    <member name="P:System.Windows.Documents.Inline.TextDecorations">
      <summary>
                    Gets or sets the text decorations that are applied to the content within a <see cref="T:System.Windows.Documents.Inline" /> element.
                </summary>
      <returns>
                    A collection of text decorations. The default is null, which means that no text decorations are applied.
                </returns>
    </member>
    <member name="F:System.Windows.Documents.Inline.TextDecorationsProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Documents.Inline.TextDecorations" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Documents.Inline.TextDecorations" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Documents.InlineCollection">
      <summary>
                    Represents a collection of <see cref="T:System.Windows.Documents.Inline" /> elements.
                </summary>
    </member>
    <member name="M:System.Windows.Documents.InlineCollection.Add(System.String)">
      <summary>
                    Adds a string to the collection.
                </summary>
      <param name="text">
                    The text to add.
                </param>
    </member>
    <member name="T:System.Windows.Documents.LineBreak">
      <summary>
                    Represents an inline element that causes a new line to begin in content when rendered in a text container.
                </summary>
    </member>
    <member name="M:System.Windows.Documents.LineBreak.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Documents.LineBreak" /> class.
                </summary>
    </member>
    <member name="T:System.Windows.Documents.Run">
      <summary>
                    Represents a discrete section of formatted or unformatted text.
                </summary>
    </member>
    <member name="M:System.Windows.Documents.Run.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Documents.Run" /> class.
                </summary>
    </member>
    <member name="P:System.Windows.Documents.Run.Text">
      <summary>
                    Gets or sets the text contents of the <see cref="T:System.Windows.Documents.Run" />.
                </summary>
      <returns>
                    A string specifying the text contents of the <see cref="T:System.Windows.Documents.Run" />. The default is <see cref="F:System.String.Empty" />.
                </returns>
    </member>
    <member name="T:System.Windows.Ink.DrawingAttributes">
      <summary>
                    Specifies drawing attributes that are used to draw a <see cref="T:System.Windows.Ink.Stroke" />.
                </summary>
    </member>
    <member name="M:System.Windows.Ink.DrawingAttributes.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Ink.DrawingAttributes" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.Ink.DrawingAttributes.Color">
      <summary>
                    Gets or sets the color that is used to draw a <see cref="T:System.Windows.Ink.Stroke" />.
                </summary>
      <returns>
                    The color that is used to draw a <see cref="T:System.Windows.Ink.Stroke" />. The default is Black.
                </returns>
    </member>
    <member name="P:System.Windows.Ink.DrawingAttributes.Height">
      <summary>
                    Gets or sets the height of the stylus that is used to draw a <see cref="T:System.Windows.Ink.Stroke" />.
                </summary>
      <returns>
                    The height of the stylus that is used to draw a <see cref="T:System.Windows.Ink.Stroke" />. The default is 2 pixels.
                </returns>
    </member>
    <member name="P:System.Windows.Ink.DrawingAttributes.OutlineColor">
      <summary>
                    Gets or sets the outline color that is used to draw a <see cref="T:System.Windows.Ink.Stroke" />.
                </summary>
      <returns>
                    The outline color of the stylus that is used to draw a <see cref="T:System.Windows.Ink.Stroke" />. The default is Black.
                </returns>
    </member>
    <member name="P:System.Windows.Ink.DrawingAttributes.Width">
      <summary>
                    Gets or sets the width of the stylus that is used to draw a <see cref="T:System.Windows.Ink.Stroke" />.
                </summary>
      <returns>
                    The width of the stylus that is used to draw a <see cref="T:System.Windows.Ink.Stroke" />. The default is 2 pixels.
                </returns>
    </member>
    <member name="T:System.Windows.Ink.Stroke">
      <summary>
                    Represents a collection of points that correspond to a stylus-down, move, and stylus-up sequence.
                </summary>
    </member>
    <member name="M:System.Windows.Ink.Stroke.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Ink.Stroke" /> class.
                </summary>
    </member>
    <member name="M:System.Windows.Ink.Stroke.#ctor(System.Windows.Input.StylusPointCollection)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Ink.Stroke" /> class with the specified <see cref="T:System.Windows.Input.StylusPointCollection" />.
                </summary>
      <param name="stylusPoints">
                    A <see cref="T:System.Windows.Input.StylusPointCollection" /> that represents the <see cref="T:System.Windows.Ink.Stroke" />.
                </param>
    </member>
    <member name="P:System.Windows.Ink.Stroke.DrawingAttributes">
      <summary>
                    Gets or sets the properties of the stroke, such as <see cref="P:System.Windows.Ink.DrawingAttributes.Height" />, <see cref="P:System.Windows.Ink.DrawingAttributes.Width" />, <see cref="P:System.Windows.Ink.DrawingAttributes.Color" />, or <see cref="P:System.Windows.Ink.DrawingAttributes.OutlineColor" />. 
                </summary>
      <returns>
                    The <see cref="T:System.Windows.Ink.DrawingAttributes" /> of the stroke.
                </returns>
    </member>
    <member name="M:System.Windows.Ink.Stroke.GetBounds">
      <summary>
                    Retrieves the bounding box for the <see cref="T:System.Windows.Ink.Stroke" /> object.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Rect" /> structure defining the bounding box for the <see cref="T:System.Windows.Ink.Stroke" /> object.
                </returns>
    </member>
    <member name="M:System.Windows.Ink.Stroke.HitTest(System.Windows.Input.StylusPointCollection)">
      <summary>
                    Indicates whether a specified <see cref="T:System.Windows.Input.StylusPointCollection" /> intersects with a <see cref="T:System.Windows.Ink.Stroke" /> object.
                </summary>
      <returns>true if the specified <see cref="T:System.Windows.Input.StylusPointCollection" /> intersects with the <see cref="T:System.Windows.Ink.Stroke" /> object; otherwise, false.
                </returns>
      <param name="stylusPointCollection">
                    The <see cref="T:System.Windows.Input.StylusPointCollection" /> used to check for intersection with the <see cref="T:System.Windows.Ink.Stroke" /> object.
                </param>
    </member>
    <member name="P:System.Windows.Ink.Stroke.StylusPoints">
      <summary>
                    Gets or sets the stylus points of the <see cref="T:System.Windows.Ink.Stroke" />.
                </summary>
      <returns>
                    The <see cref="T:System.Windows.Input.StylusPointCollection" /> that contains the stylus points that represent the current <see cref="T:System.Windows.Ink.Stroke" />.
                </returns>
    </member>
    <member name="T:System.Windows.Ink.StrokeCollection">
      <summary>
                    Represents a collection of <see cref="T:System.Windows.Ink.Stroke" /> objects.
                </summary>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Ink.StrokeCollection" /> class. 
                </summary>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.GetBounds">
      <summary>
                    Returns the bounds of the strokes in the collection.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Rect" /> that contains the bounds of the strokes in the <see cref="T:System.Windows.Ink.StrokeCollection" />.
                </returns>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.HitTest(System.Windows.Input.StylusPointCollection)">
      <summary>
                    Indicates whether a specified <see cref="T:System.Windows.Input.StylusPointCollection" /> intersects with a <see cref="T:System.Windows.Ink.StrokeCollection" /> object.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Ink.StrokeCollection" /> that contains the strokes that intersect with the points in the specified <see cref="T:System.Windows.Input.StylusPointCollection" />.
                </returns>
      <param name="stylusPointCollection">
                    The <see cref="T:System.Windows.Input.StylusPointCollection" /> used to check for intersection with the <see cref="T:System.Windows.Ink.Stroke" /> object.
                </param>
    </member>
    <member name="T:System.Windows.Input.Cursor">
      <summary>
                    Represents the image used for the mouse pointer.
                </summary>
    </member>
    <member name="M:System.Windows.Input.Cursor.ToString">
      <summary>
                    Returns the string representation of the <see cref="T:System.Windows.Input.Cursor" />. 
                </summary>
      <returns>
                    The name of the cursor.
                </returns>
    </member>
    <member name="T:System.Windows.Input.Cursors">
      <summary>
                    Defines a set of default mouse pointer images for Silverlight.
                </summary>
    </member>
    <member name="P:System.Windows.Input.Cursors.Arrow">
      <summary>
                    Represents an Arrow <see cref="T:System.Windows.Input.Cursor" />. 
                </summary>
      <returns>
                    An Arrow <see cref="T:System.Windows.Input.Cursor" />.
                </returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.Eraser">
      <summary>
                    Represents an Eraser <see cref="T:System.Windows.Input.Cursor" />. 
                </summary>
      <returns>
                    An Eraser <see cref="T:System.Windows.Input.Cursor" />. 
                </returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.Hand">
      <summary>
                    Represents a Hand <see cref="T:System.Windows.Input.Cursor" />. 
                </summary>
      <returns>
                    A Hand <see cref="T:System.Windows.Input.Cursor" />.
                </returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.IBeam">
      <summary>
                    Represents an IBeam <see cref="T:System.Windows.Input.Cursor" />, which is typically used to show where the text cursor appears when the mouse is clicked. 
                </summary>
      <returns>
                    An IBeam <see cref="T:System.Windows.Input.Cursor" />.
                </returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.None">
      <summary>
                    Represents a special <see cref="T:System.Windows.Input.Cursor" /> that is invisible. 
                </summary>
      <returns>
                    The None <see cref="T:System.Windows.Input.Cursor" />.
                </returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.SizeNS">
      <summary>
                    Represents a SizeNS <see cref="T:System.Windows.Input.Cursor" />.
                </summary>
      <returns>
                    A SizeNS <see cref="T:System.Windows.Input.Cursor" />.
                </returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.SizeWE">
      <summary>
                    Represents a SizeWE <see cref="T:System.Windows.Input.Cursor" />.
                </summary>
      <returns>
                    A SizeWE <see cref="T:System.Windows.Input.Cursor" />.
                </returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.Stylus">
      <summary>
                    Represents a Stylus <see cref="T:System.Windows.Input.Cursor" />.
                </summary>
      <returns>
                    A Stylus <see cref="T:System.Windows.Input.Cursor" />.
                </returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.Wait">
      <summary>
                    Represents a Wait<see cref="T:System.Windows.Input.Cursor" />. 
                </summary>
      <returns>
                    A Wait <see cref="T:System.Windows.Input.Cursor" />.
                </returns>
    </member>
    <member name="T:System.Windows.Input.FocusManager">
      <summary>
                    Provides utility methods related to element focus, without the need to handle focus-related events.
                </summary>
    </member>
    <member name="M:System.Windows.Input.FocusManager.GetFocusedElement">
      <summary>
                    Queries the Silverlight focus system to determine which object has focus. 
                </summary>
      <returns>
                    The object that currently has focus.  Typically, this is a <see cref="T:System.Windows.Controls.Control" /> class. 
                </returns>
    </member>
    <member name="T:System.Windows.Input.ICommand">
      <summary>
                    Defines the contract for commanding, using the same contract as used in WPF.
                </summary>
    </member>
    <member name="M:System.Windows.Input.ICommand.CanExecute(System.Object)">
      <summary>
                    Defines the method that determines whether the command can execute in its current state.
                </summary>
      <returns>true if this command can be executed; otherwise, false.
                </returns>
      <param name="parameter">
                    Data used by the command. If the command does not require data to be passed, this object can be set to null. 
                </param>
    </member>
    <member name="E:System.Windows.Input.ICommand.CanExecuteChanged">
      <summary>
                    Occurs when changes occur that affect whether the command should execute.
                </summary>
    </member>
    <member name="M:System.Windows.Input.ICommand.Execute(System.Object)">
      <summary>
                    Defines the method to be called when the command is invoked.
                </summary>
      <param name="parameter">
                    Data used by the command. If the command does not require data to be passed, this object can be set to null. 
                </param>
    </member>
    <member name="T:System.Windows.Input.InputMethod">
      <summary>
                    Supports the <see cref="P:System.Windows.Input.InputMethod.IsInputMethodEnabled" /> attached property.
                </summary>
    </member>
    <member name="M:System.Windows.Input.InputMethod.GetIsInputMethodEnabled(System.Windows.DependencyObject)">
      <summary>
                    Gets the value for the <see cref="P:System.Windows.Input.InputMethod.IsInputMethodEnabled" /> attached property on the specified object.
                </summary>
      <returns>
                    The <see cref="P:System.Windows.Input.InputMethod.IsInputMethodEnabled" /> attached property value.
                </returns>
      <param name="target">
                    The object to get the <see cref="P:System.Windows.Input.InputMethod.IsInputMethodEnabled" /> attached property value from.
                </param>
    </member>
    <member name="P:System.Windows.Input.InputMethod.IsInputMethodEnabled">
      <summary>
                    Gets or sets a value that determines whether input method editors can be used to provide input for the control where the property is attached.
                </summary>
      <returns>true if input method editors can be used to provide input; otherwise, false.
                </returns>
    </member>
    <member name="F:System.Windows.Input.InputMethod.IsInputMethodEnabledProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Input.InputMethod.IsInputMethodEnabled" /> attached property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Input.InputMethod.IsInputMethodEnabled" /> attached property.
                </returns>
    </member>
    <member name="M:System.Windows.Input.InputMethod.SetIsInputMethodEnabled(System.Windows.DependencyObject,System.Boolean)">
      <summary>
                    Sets the value for the <see cref="P:System.Windows.Input.InputMethod.IsInputMethodEnabled" /> attached property on the specified object.
                </summary>
      <param name="target">
                    The object on which to set the <see cref="P:System.Windows.Input.InputMethod.IsInputMethodEnabled" /> attached property value.
                </param>
      <param name="value">
                    The value to set.
                </param>
    </member>
    <member name="T:System.Windows.Input.Key">
      <summary>
                    Specifies the possible key values on a keyboard. 
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.None">
      <summary>
                    A special value indicating no key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Back">
      <summary>
                    The BACKSPACE key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Tab">
      <summary>
                    The TAB key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Enter">
      <summary>
                    The ENTER key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Shift">
      <summary>
                    The SHIFT key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Ctrl">
      <summary>
                    The CTRL (control) key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Alt">
      <summary>
                    The ALT key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.CapsLock">
      <summary>
                    The CAPSLOCK key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Escape">
      <summary>
                    The ESC (also known as ESCAPE) key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Space">
      <summary>
                    The SPACE key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.PageUp">
      <summary>
                    The PAGEUP key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.PageDown">
      <summary>
                    The PAGEDOWN key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.End">
      <summary>
                    The END key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Home">
      <summary>
                    The HOME key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Left">
      <summary>
                    The left arrow key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Up">
      <summary>
                    The up arrow key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Right">
      <summary>
                    The right arrow key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Down">
      <summary>
                    The down arrow key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Insert">
      <summary>
                    The INSERT key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Delete">
      <summary>
                    The DEL (also known as DELETE) key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.D0">
      <summary>
                    The 0 (zero) key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.D1">
      <summary>
                    The 1 key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.D2">
      <summary>
                    The 2 key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.D3">
      <summary>
                    The 3 key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.D4">
      <summary>
                    The 4 key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.D5">
      <summary>
                    The 5 key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.D6">
      <summary>
                    The 6 key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.D7">
      <summary>
                    The 7 key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.D8">
      <summary>
                    The 8 key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.D9">
      <summary>
                    The 9 key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.A">
      <summary>
                    The A key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.B">
      <summary>
                    The B key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.C">
      <summary>
                    The C key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.D">
      <summary>
                    The D key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.E">
      <summary>
                    The E key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F">
      <summary>
                    The F key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.G">
      <summary>
                    The G key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.H">
      <summary>
                    The H key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.I">
      <summary>
                    The I key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.J">
      <summary>
                    The J key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.K">
      <summary>
                    The K key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.L">
      <summary>
                    The L key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.M">
      <summary>
                    The M key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.N">
      <summary>
                    The N key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.O">
      <summary>
                    The O key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.P">
      <summary>
                    The P key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Q">
      <summary>
                    The Q key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.R">
      <summary>
                    The R key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.S">
      <summary>
                    The S key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.T">
      <summary>
                    The T key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.U">
      <summary>
                    The U key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.V">
      <summary>
                    The V key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.W">
      <summary>
                    The W key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.X">
      <summary>
                    The X key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Y">
      <summary>
                    The Y key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Z">
      <summary>
                    The Z key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F1">
      <summary>
                    The F1 key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F2">
      <summary>
                    The F2 key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F3">
      <summary>
                    The F3 key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F4">
      <summary>
                    The F4 key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F5">
      <summary>
                    The F5 key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F6">
      <summary>
                    The F6 key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F7">
      <summary>
                    The F7 key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F8">
      <summary>
                    The F8 key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F9">
      <summary>
                    The F9 key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F10">
      <summary>
                    The F10 key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F11">
      <summary>
                    The F11 key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F12">
      <summary>
                    The F12 key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad0">
      <summary>
                    The 0 key on the number pad.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad1">
      <summary>
                    The 1 key on the number pad.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad2">
      <summary>
                    The 2 key on the number pad.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad3">
      <summary>
                    The 3 key on the number pad.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad4">
      <summary>
                    The 4 key on the number pad.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad5">
      <summary>
                    The 5 key on the number pad.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad6">
      <summary>
                    The 6 key on the number pad.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad7">
      <summary>
                    The 7 key on the number pad.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad8">
      <summary>
                    The 8 key on the number pad.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad9">
      <summary>
                    The 9 key on the number pad.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Multiply">
      <summary>
                    The * (MULTIPLY) key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Add">
      <summary>
                    The + (ADD) key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Subtract">
      <summary>
                    The - (SUBTRACT) key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Decimal">
      <summary>
                    The . (DECIMAL) key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Divide">
      <summary>
                    The / (DIVIDE) key.
                </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Unknown">
      <summary>
                    A special value indicating the key is out of range of this enumeration.
                </summary>
    </member>
    <member name="T:System.Windows.Input.Keyboard">
      <summary>
                    Represents the keyboard device. 
                </summary>
    </member>
    <member name="P:System.Windows.Input.Keyboard.Modifiers">
      <summary>
                    Gets the set of <see cref="T:System.Windows.Input.ModifierKeys" /> that are currently pressed. 
                </summary>
      <returns>
                    A bitwise combination of the enumeration values.
                </returns>
    </member>
    <member name="T:System.Windows.Input.KeyboardNavigationMode">
      <summary>
                    Specifies the tabbing behavior across tab stops for a Silverlight tabbing sequence within a container.
                </summary>
    </member>
    <member name="F:System.Windows.Input.KeyboardNavigationMode.Local">
      <summary>
                    Tab indexes are considered on the local subtree only inside this container.
                </summary>
    </member>
    <member name="F:System.Windows.Input.KeyboardNavigationMode.Cycle">
      <summary>
                    Focus returns to the first or the last keyboard navigation stop inside of a container when the first or last keyboard navigation stop is reached.
                </summary>
    </member>
    <member name="F:System.Windows.Input.KeyboardNavigationMode.Once">
      <summary>
                    The container and all of its child elements as a whole receive focus only once. 
                </summary>
    </member>
    <member name="T:System.Windows.Input.KeyEventArgs">
      <summary>
                    Provides event data for the <see cref="E:System.Windows.UIElement.KeyUp" /> and <see cref="E:System.Windows.UIElement.KeyDown" /> events.
                </summary>
    </member>
    <member name="P:System.Windows.Input.KeyEventArgs.Handled">
      <summary>
                    Gets or sets a value that marks the routed event as handled, and prevents it from routing to further objects along the event route.
                </summary>
      <returns>true to mark the routed event handled; false to leave the routed event unhandled, which permits the event to potentially route further. The default is false.
                </returns>
    </member>
    <member name="P:System.Windows.Input.KeyEventArgs.Key">
      <summary>
                    Gets the keyboard key associated with the event. 
                </summary>
      <returns>
                    One of the enumeration values that indicates the key referenced by the event.
                </returns>
    </member>
    <member name="P:System.Windows.Input.KeyEventArgs.PlatformKeyCode">
      <summary>
                    Gets an integer value that represents the key that is pressed or released (depending on which event is raised). This value is the nonportable key code, which is operating system–specific.
                </summary>
      <returns>
                    The key code value.
                </returns>
    </member>
    <member name="T:System.Windows.Input.KeyEventHandler">
      <summary>
                    Represents the method that handles the <see cref="E:System.Windows.UIElement.KeyUp" /> and <see cref="E:System.Windows.UIElement.KeyDown" /> events.
                </summary>
      <param name="sender">
                    The object where the event handler is attached.
                </param>
      <param name="e">
                    The event data.
                </param>
    </member>
    <member name="T:System.Windows.Input.ModifierKeys">
      <summary>
                    Specifies the set of modifier keys. 
                </summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.None">
      <summary>
                    No modifiers are pressed. 
                </summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Alt">
      <summary>
                    The ALT key is pressed.
                </summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Control">
      <summary>
                    The CTRL key is pressed.
                </summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Shift">
      <summary>
                    The SHIFT key is pressed.
                </summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Windows">
      <summary>
                    The Windows logo key is pressed.
                </summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Apple">
      <summary>
                    The Apple key (also known as the Open Apple key) is pressed.
                </summary>
    </member>
    <member name="T:System.Windows.Input.MouseButtonEventArgs">
      <summary>
                    Provides event data for the <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> and <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> events. 
                </summary>
    </member>
    <member name="P:System.Windows.Input.MouseButtonEventArgs.Handled">
      <summary>
                    Gets or sets a value that marks the routed event as handled, and prevents it from routing to further objects along the event route.
                </summary>
      <returns>true to mark the routed event handled. false to leave the routed event unhandled, which permits the event to potentially route further. The default is false.
                </returns>
    </member>
    <member name="T:System.Windows.Input.MouseButtonEventHandler">
      <summary>
                    Represents the method that handles the <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> and <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> events. 
                </summary>
      <param name="sender">
                    The object where the event handler is attached.
                </param>
      <param name="e">
                    The event data.
                </param>
    </member>
    <member name="T:System.Windows.Input.MouseEventArgs">
      <summary>
                    Provides data for mouse related events that do not specifically involve mouse buttons, for example <see cref="E:System.Windows.UIElement.MouseMove" />.
                </summary>
    </member>
    <member name="M:System.Windows.Input.MouseEventArgs.GetPosition(System.Windows.UIElement)">
      <summary>
                    Returns the x- and y-coordinates of the mouse pointer position, optionally evaluated against a coordinate origin of a supplied <see cref="T:System.Windows.UIElement" />.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Point" /> that represents the current x- and y-coordinates of the mouse pointer position. If null was passed as <paramref name="relativeTo" />, this coordinate is for the overall Silverlight plug-in content area. If a non-null <paramref name="relativeTo" /> was passed, this coordinate is relative to the object referenced by <paramref name="relativeTo" />.
                </returns>
      <param name="relativeTo">
                    Any <see cref="T:System.Windows.UIElement" />-derived object that is contained by the Silverlight plug-in and connected to the object tree. To specify the object relative to the overall Silverlight coordinate system, use a <paramref name="relativeTo" /> value of null.
                </param>
    </member>
    <member name="P:System.Windows.Input.MouseEventArgs.StylusDevice">
      <summary>
                    Gets an object that reports stylus device information, such as the collection of stylus points associated with the input.
                </summary>
      <returns>
                    The stylus device information object.
                </returns>
    </member>
    <member name="T:System.Windows.Input.MouseEventHandler">
      <summary>
                    Represents the method that will handle mouse related routed events that do not specifically involve mouse buttons; for example, <see cref="E:System.Windows.UIElement.MouseMove" />.
                </summary>
      <param name="sender">
                    The object where the event handler is attached.
                </param>
      <param name="e">
                    The event data.
                </param>
    </member>
    <member name="T:System.Windows.Input.StylusDevice">
      <summary>
                    Reports stylus device information, such as the collection of stylus points associated with the input.
                </summary>
    </member>
    <member name="M:System.Windows.Input.StylusDevice.GetStylusPoints(System.Windows.UIElement)">
      <summary>
                    Returns the stylus points collected since the last mouse event.
                </summary>
      <returns>
                    A collection of the stylus points collected since the last mouse event.
                </returns>
      <param name="relativeTo">
                    Specifies the offset for the object (typically an <see cref="T:System.Windows.Controls.InkPresenter" />) that should be applied to captured points.
                </param>
    </member>
    <member name="P:System.Windows.Input.StylusDevice.Inverted">
      <summary>
                    Gets or sets a value that indicates whether the stylus is inverted.
                </summary>
      <returns>true if the stylus is inverted; otherwise, false. The default is false.
                </returns>
    </member>
    <member name="T:System.Windows.Input.StylusPoint">
      <summary>
                    Represents a single point collected while the user is entering ink strokes with the stylus or mouse.
                </summary>
    </member>
    <member name="M:System.Windows.Input.StylusPoint.#ctor(System.Double,System.Double)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Input.StylusPoint" /> class. 
                </summary>
      <param name="x">
                    The x-coordinate of the <see cref="T:System.Windows.Input.StylusPoint" /> in a pixel grid.
                </param>
      <param name="y">
                    The y-coordinate of the <see cref="T:System.Windows.Input.StylusPoint" /> in a pixel grid.
                </param>
    </member>
    <member name="P:System.Windows.Input.StylusPoint.PressureFactor">
      <summary>
                    Gets or sets the pressure factor of the stylus on the screen.
                </summary>
      <returns>
                    The pressure factor of the stylus on the screen. The default is 0.5.
                </returns>
    </member>
    <member name="P:System.Windows.Input.StylusPoint.X">
      <summary>
                    Gets or sets the value for the x-coordinate of the <see cref="T:System.Windows.Input.StylusPoint" />.
                </summary>
      <returns>
                    The x-coordinate of the <see cref="T:System.Windows.Input.StylusPoint" /> in a pixel grid. The default is 0.
                </returns>
    </member>
    <member name="P:System.Windows.Input.StylusPoint.Y">
      <summary>
                    Gets or sets the value for the y-coordinate of the <see cref="T:System.Windows.Input.StylusPoint" />.
                </summary>
      <returns>
                    The y-coordinate of the <see cref="T:System.Windows.Input.StylusPoint" /> in a pixel grid. The default is 0.
                </returns>
    </member>
    <member name="T:System.Windows.Input.StylusPointCollection">
      <summary>
                    Represents a collection of related <see cref="T:System.Windows.Input.StylusPoint" /> objects.
                </summary>
    </member>
    <member name="M:System.Windows.Input.StylusPointCollection.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Input.StylusPointCollection" /> class. 
                </summary>
    </member>
    <member name="M:System.Windows.Input.StylusPointCollection.Add(System.Windows.Input.StylusPointCollection)">
      <summary>
                    Adds a collection of <see cref="T:System.Windows.Input.StylusPoint" /> objects to the collection. 
                </summary>
      <param name="stylusPoints">
                    The collection of <see cref="T:System.Windows.Input.StylusPoint" /> objects to add to the collection.
                </param>
    </member>
    <member name="T:System.Windows.Interop.Content">
      <summary>
                    Reports details about the Silverlight-based application's instantiation settings, and exposes some of the HTML DOM values for the hosted Silverlight plug-in instance. <see cref="T:System.Windows.Interop.Content" /> contains APIs that specifically relate to the Silverlight content area (the area declared by the width and height in the initialization).
                </summary>
    </member>
    <member name="M:System.Windows.Interop.Content.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Interop.Content" /> class.
                </summary>
    </member>
    <member name="P:System.Windows.Interop.Content.ActualHeight">
      <summary>
                    Gets the browser-determined height of the Silverlight plug-in content area.
                </summary>
      <returns>
                    The browser-determined height of the Silverlight plug-in content area, in pixels. The default value is the height of the Silverlight plug-in, as specified by the HTML object element that instantiated it. 
                </returns>
    </member>
    <member name="P:System.Windows.Interop.Content.ActualWidth">
      <summary>
                    Gets the browser-determined width of the Silverlight plug-in content area.
                </summary>
      <returns>
                    The browser-determined width of the Silverlight plug-in content area, in pixels. The default value is the width of the Silverlight plug-in, as specified by the HTML object element that instantiated it. 
                </returns>
    </member>
    <member name="E:System.Windows.Interop.Content.FullScreenChanged">
      <summary>
                    Occurs when the hosted Silverlight plug-in either enters or exits full-screen mode.
                </summary>
    </member>
    <member name="P:System.Windows.Interop.Content.IsFullScreen">
      <summary>
                    Gets or sets a value that indicates whether the Silverlight plug-in is displaying in full-screen mode.
                </summary>
      <returns>true if the Silverlight plug-in displays as a full-screen plug-in. false if the Silverlight plug-in displays as an embedded plug-in.
                </returns>
    </member>
    <member name="E:System.Windows.Interop.Content.Resized">
      <summary>
                    Occurs when the <see cref="P:System.Windows.Interop.Content.ActualHeight" /> or the <see cref="P:System.Windows.Interop.Content.ActualWidth" /> of the Silverlight plug-in change.
                </summary>
    </member>
    <member name="T:System.Windows.Interop.HostingRenderTargetBitmap">
      <summary>
                    Enables a native Silverlight host, such as Expression Blend or Visual Studio, to convert a <see cref="T:System.Windows.UIElement" /> object into a bitmap.
                </summary>
    </member>
    <member name="M:System.Windows.Interop.HostingRenderTargetBitmap.#ctor(System.Int32,System.Int32,System.IntPtr)">
      <summary>[SECURITY CRITICAL] 
                    Initializes a new instance of the <see cref="T:System.Windows.Interop.HostingRenderTargetBitmap" /> class. 
                </summary>
      <param name="width">
                    The width of the <see cref="T:System.Windows.UIElement" /> to convert.
                </param>
      <param name="height">
                    The height of the <see cref="T:System.Windows.UIElement" /> to convert.
                </param>
      <param name="bitmap">
                    A pointer to the target bitmap.
                </param>
    </member>
    <member name="M:System.Windows.Interop.HostingRenderTargetBitmap.Render(System.Windows.UIElement)">
      <summary>
                    Renders the <see cref="T:System.Windows.UIElement" /> object to the bitmap pointer specified in the constructor.
                </summary>
      <returns>
                    The dirty rectangle. 
                </returns>
      <param name="visual">
                    The object to render.
                </param>
    </member>
    <member name="T:System.Windows.Interop.Settings">
      <summary>
                    Reports details about the Silverlight-based application's instantiation settings, and exposes some of the HTML DOM values for the hosted Silverlight plug-in instance. 
                </summary>
    </member>
    <member name="M:System.Windows.Interop.Settings.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Interop.Settings" /> object.
                </summary>
    </member>
    <member name="P:System.Windows.Interop.Settings.EnableFrameRateCounter">
      <summary>
                    Gets or sets a value that indicates whether a diagnostic frame rate counter should appear in the status area of the hosting browser. (Microsoft Internet Explorer only.)
                </summary>
      <returns>true if the frame rate counter is enabled. false if the frame rate counter is disabled. The default is false.
                </returns>
    </member>
    <member name="P:System.Windows.Interop.Settings.EnableHTMLAccess">
      <summary>
                    Gets a value that indicates whether the Silverlight plug-in allows hosted content or its runtime to access the HTML DOM.
                </summary>
      <returns>true if hosted content can access the browser DOM; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Windows.Interop.Settings.EnableRedrawRegions">
      <summary>
                    Gets or sets a value that indicates whether to show the areas of the Silverlight plug-in that are being redrawn each frame.
                </summary>
      <returns>true if the areas of the plug-in that are being redrawn each frame are shown; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Windows.Interop.Settings.MaxFrameRate">
      <summary>
                    Gets or sets the maximum number of frames to render per second.
                </summary>
      <returns>
                    An integer value that specifies the maximum number of frames to render per second. The default value is 60.
                </returns>
    </member>
    <member name="P:System.Windows.Interop.Settings.Windowless">
      <summary>
                    Gets a value that indicates whether the Silverlight plug-in displays as a window-less plug-in. 
                </summary>
      <returns>true if the Silverlight plug-in displays as a window-less plug-in. false if the Silverlight plug-in displays as a windowed plug-in. The default value is false.
                </returns>
    </member>
    <member name="T:System.Windows.Interop.SilverlightHost">
      <summary>
                    Reports details about the Silverlight-based application's instantiation settings, and exposes some of the HTML DOM values for the hosted Silverlight plug-in instance.
                </summary>
    </member>
    <member name="M:System.Windows.Interop.SilverlightHost.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Interop.SilverlightHost" /> class.
                </summary>
    </member>
    <member name="P:System.Windows.Interop.SilverlightHost.Background">
      <summary>
                    Gets the background color value that was applied to the Silverlight plug-in as part of instantiation settings.
                </summary>
      <returns>
                    The background color for the Silverlight plug-in.
                </returns>
    </member>
    <member name="P:System.Windows.Interop.SilverlightHost.Content">
      <summary>
                    Gets the "Content" sub-object of this <see cref="T:System.Windows.Interop.SilverlightHost" />.
                </summary>
      <returns>
                    The "Content" sub-object.
                </returns>
    </member>
    <member name="P:System.Windows.Interop.SilverlightHost.IsLoaded">
      <summary>
                    Gets a value that indicates whether the hosted Silverlight plug-in has finished loading.
                </summary>
      <returns>true if the plug-in has finished loading; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Windows.Interop.SilverlightHost.IsVersionSupported(System.String)">
      <summary>
                    Returns a value that indicates whether the installed Silverlight plug-in supports the specified version. 
                </summary>
      <returns>true if the version can be supported by the installation; otherwise, false.
                </returns>
      <param name="versionStr">
                    The version to check, in the form of major.minor.build.revision See Remarks for more information about the string form.
                </param>
    </member>
    <member name="P:System.Windows.Interop.SilverlightHost.Settings">
      <summary>
                    Gets the "Settings" sub-object of this <see cref="T:System.Windows.Interop.SilverlightHost" />.
                </summary>
      <returns>
                    The "Settings" sub-object.
                </returns>
    </member>
    <member name="P:System.Windows.Interop.SilverlightHost.Source">
      <summary>
                    Gets the URI of the package or XAML file that specifies the XAML content to render.
                </summary>
      <returns>
                    The URI of the package, XAML file, or XAML scripting tag that contains the content to load into the Silverlight plug-in.
                </returns>
    </member>
    <member name="T:System.Windows.Markup.ContentPropertyAttribute">
      <summary>
                    Specifies which property of a class can be interpreted to be the content property when the class is created or serialized by a XAML processor.
                </summary>
    </member>
    <member name="M:System.Windows.Markup.ContentPropertyAttribute.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Markup.ContentPropertyAttribute" /> class.
                </summary>
    </member>
    <member name="M:System.Windows.Markup.ContentPropertyAttribute.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Markup.ContentPropertyAttribute" /> class, using the specified content property name.
                </summary>
      <param name="name">
                    The content property name.
                </param>
    </member>
    <member name="P:System.Windows.Markup.ContentPropertyAttribute.Name">
      <summary>
                    Gets the name of the property that is the declared content property.
                </summary>
      <returns>
                    A string that contains the name of the property that is the content property. The default is null.
                </returns>
    </member>
    <member name="T:System.Windows.Markup.XamlParseException">
      <summary>
                    The exception that is thrown when an Extensible Application Markup Language (XAML) parsing exception occurs.
                </summary>
    </member>
    <member name="P:System.Windows.Markup.XamlParseException.LineNumber">
      <summary>
                    Gets the line number where the exception occurred.
                </summary>
      <returns>
                    The number of the line on which the XAML parsing exception occurred.
                </returns>
    </member>
    <member name="P:System.Windows.Markup.XamlParseException.LinePosition">
      <summary>
                    Gets the position in the line where the exception occurred.
                </summary>
      <returns>
                    The position on the line where the XAML parsing exception occurred.
                </returns>
    </member>
    <member name="T:System.Windows.Markup.XamlReader">
      <summary>
                    Provides a XAML processor engine for parsing XAML and creating corresponding Silverlight object trees.
                </summary>
    </member>
    <member name="M:System.Windows.Markup.XamlReader.Load(System.String)">
      <summary>
                    Parses a well-formed XAML fragment and creates a corresponding Silverlight object tree, and returns the root of the object tree.
                </summary>
      <returns>
                    The root object of the Silverlight object tree.
                </returns>
      <param name="xaml">
                    A string that contains a valid XAML fragment.
                </param>
    </member>
    <member name="M:System.Windows.Markup.XamlReader.LoadWithInitialTemplateValidation(System.String)">
      <summary>[SECURITY CRITICAL] 
                     
                </summary>
      <returns>
                     
                </returns>
      <param name="xaml">
                     
                </param>
    </member>
    <member name="T:System.Windows.Markup.XmlLanguage">
      <summary>
                    Represents culture information for use in XML and XAML markup.
                </summary>
    </member>
    <member name="M:System.Windows.Markup.XmlLanguage.Equals(System.Object)">
      <summary>
                    Checks for equality of an object to the current object.
                </summary>
      <returns>true if the objects are the same object; otherwise, false.
                </returns>
      <param name="obj">
                    The <see cref="T:System.Object" /> to compare to the calling object.
                </param>
    </member>
    <member name="M:System.Windows.Markup.XmlLanguage.GetHashCode">
      <summary>
                    Serves as a hash function for the <see cref="T:System.Windows.Markup.XmlLanguage" /> class.
                </summary>
      <returns>
                    An integer hash value.
                </returns>
    </member>
    <member name="M:System.Windows.Markup.XmlLanguage.GetLanguage(System.String)">
      <summary>
                    Returns a <see cref="T:System.Windows.Markup.XmlLanguage" /> instance, based on a string representing the language per RFC 3066.
                </summary>
      <returns>
                    A new <see cref="T:System.Windows.Markup.XmlLanguage" /> with the provided string as its <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> value.
                </returns>
      <param name="ietfLanguageTag">
                    An RFC 3066 language string, or an empty string ("").
                </param>
    </member>
    <member name="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag">
      <summary>
                    Gets the string representation of the language tag.
                </summary>
      <returns>
                    A string that represents the language tag.
                </returns>
    </member>
    <member name="M:System.Windows.Markup.XmlLanguage.op_Equality(System.Windows.Markup.XmlLanguage,System.Windows.Markup.XmlLanguage)">
      <summary>
                    Determines whether two specified <see cref="T:System.Windows.Markup.XmlLanguage" /> objects have the same value. 
                </summary>
      <returns>true if the value of <paramref name="xmlLanguage1" /> is the same as the value of <paramref name="xmlLanguage2" />; otherwise, false.
                </returns>
      <param name="xmlLanguage1">
                    The first <see cref="T:System.Windows.Markup.XmlLanguage" /> to compare.
                </param>
      <param name="xmlLanguage2">
                    The second <see cref="T:System.Windows.Markup.XmlLanguage" /> to compare.
                </param>
    </member>
    <member name="M:System.Windows.Markup.XmlLanguage.op_Inequality(System.Windows.Markup.XmlLanguage,System.Windows.Markup.XmlLanguage)">
      <summary>
                    Determines whether two specified <see cref="T:System.Windows.Markup.XmlLanguage" /> objects have a different value. 
                </summary>
      <returns>true if the value of <paramref name="xmlLanguage1" /> is different from the value of <paramref name="xmlLanguage2" />; otherwise, false.
                </returns>
      <param name="xmlLanguage1">
                    The first <see cref="T:System.Windows.Markup.XmlLanguage" /> to compare.
                </param>
      <param name="xmlLanguage2">
                    The second <see cref="T:System.Windows.Markup.XmlLanguage" /> to compare.
                </param>
    </member>
    <member name="T:System.Windows.Markup.XmlnsDefinitionAttribute">
      <summary>
                    Specifies a mapping in an assembly between an XML namespace (xmlns) and a CLR namespace.
                </summary>
    </member>
    <member name="M:System.Windows.Markup.XmlnsDefinitionAttribute.#ctor(System.String,System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Markup.XmlnsDefinitionAttribute" /> class.
                </summary>
      <param name="xmlNamespace">
                    Specifies the <see cref="P:System.Windows.Markup.XmlnsDefinitionAttribute.XmlNamespace" />  value.
                </param>
      <param name="clrNamespace">
                    Specifies the <see cref="P:System.Windows.Markup.XmlnsDefinitionAttribute.ClrNamespace" /> value.
                </param>
    </member>
    <member name="P:System.Windows.Markup.XmlnsDefinitionAttribute.AssemblyName">
      <summary>
                    Gets or sets the name of the assembly that contains the <see cref="P:System.Windows.Markup.XmlnsDefinitionAttribute.ClrNamespace" />.
                </summary>
      <returns>
                    The name of the assembly that contains the <see cref="P:System.Windows.Markup.XmlnsDefinitionAttribute.ClrNamespace" />.
                </returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsDefinitionAttribute.ClrNamespace">
      <summary>
                    Gets the CLR namespace that is mapped to <see cref="P:System.Windows.Markup.XmlnsDefinitionAttribute.XmlNamespace" /> by the attribute. 
                </summary>
      <returns>
                    The CLR namespace that is mapped to <see cref="P:System.Windows.Markup.XmlnsDefinitionAttribute.XmlNamespace" /> by the attribute. 
                </returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsDefinitionAttribute.XmlNamespace">
      <summary>
                    Gets the XML namespace (xmlns) that is mapped to <see cref="P:System.Windows.Markup.XmlnsDefinitionAttribute.ClrNamespace" /> by the attribute.
                </summary>
      <returns>
                    The XML namespace (xmlns) that is mapped to <see cref="P:System.Windows.Markup.XmlnsDefinitionAttribute.ClrNamespace" /> by the attribute.
                </returns>
    </member>
    <member name="T:System.Windows.Markup.XmlnsPrefixAttribute">
      <summary>
                    Specifies a recommended prefix to associate with an XML namespace when writing elements and attributes in a XAML file.
                </summary>
    </member>
    <member name="M:System.Windows.Markup.XmlnsPrefixAttribute.#ctor(System.String,System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Markup.XmlnsPrefixAttribute" /> class.
                </summary>
      <param name="xmlNamespace">
                    The URI of the relevant XML namespace (use a string, not a true <see cref="T:System.Uri" /> type).
                </param>
      <param name="prefix">
                    The recommended prefix to use when mapping the XML namespace.
                </param>
    </member>
    <member name="P:System.Windows.Markup.XmlnsPrefixAttribute.Prefix">
      <summary>
                    Gets the recommended prefix to associate with the XML namespace.
                </summary>
      <returns>
                    A string that provides the recommended prefix to use when mapping the <see cref="P:System.Windows.Markup.XmlnsPrefixAttribute.XmlNamespace" /> namespace.
                </returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsPrefixAttribute.XmlNamespace">
      <summary>
                    Gets the XML namespace URI.
                </summary>
      <returns>
                    A string that provides the URI for the relevant XML namespace.
                </returns>
    </member>
    <member name="T:System.Windows.Media.AlignmentX">
      <summary>
                    Describes how content is positioned horizontally in a container. 
                </summary>
    </member>
    <member name="F:System.Windows.Media.AlignmentX.Left">
      <summary>
                    The contents align toward the left of the container. 
                </summary>
    </member>
    <member name="F:System.Windows.Media.AlignmentX.Center">
      <summary>
                    The contents align toward the center of the container. 
                </summary>
    </member>
    <member name="F:System.Windows.Media.AlignmentX.Right">
      <summary>
                    The contents align toward the right of the container. 
                </summary>
    </member>
    <member name="T:System.Windows.Media.AlignmentY">
      <summary>
                    Describes how content is positioned vertically in a container. 
                </summary>
    </member>
    <member name="F:System.Windows.Media.AlignmentY.Top">
      <summary>
                    The contents align toward the upper edge of the container. 
                </summary>
    </member>
    <member name="F:System.Windows.Media.AlignmentY.Center">
      <summary>
                    The contents align toward the center of the container.
                </summary>
    </member>
    <member name="F:System.Windows.Media.AlignmentY.Bottom">
      <summary>
                    The contents align toward the lower edge of the container. 
                </summary>
    </member>
    <member name="T:System.Windows.Media.ArcSegment">
      <summary>
                    Represents an elliptical arc between two points. 
                </summary>
    </member>
    <member name="M:System.Windows.Media.ArcSegment.#ctor">
      <summary>
                    Initializes a new instance of th