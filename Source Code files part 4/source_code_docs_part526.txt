tral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="T:System.Security.Policy.IApplicationTrustManager">
      <summary>Determines whether an application should be executed and which set of permissions should be granted to the application.</summary>
    </member>
    <member name="M:System.Security.Policy.IApplicationTrustManager.DetermineApplicationTrust(System.ActivationContext,System.Security.Policy.TrustManagerContext)">
      <summary>Determines whether an application should be executed and which set of permissions should be granted to the application.</summary>
      <returns>An <see cref="T:System.Security.Policy.ApplicationTrust" />.</returns>
      <param name="activationContext">An <see cref="T:System.ActivationContext" /> identifying the activation context for the application.</param>
      <param name="context">A <see cref="T:System.Security.Policy.TrustManagerContext" />  identifying the trust manager context for the application.</param>
    </member>
    <member name="T:System.Security.Policy.IIdentityPermissionFactory">
      <summary>Defines the method that creates a new identity permission.</summary>
    </member>
    <member name="M:System.Security.Policy.IIdentityPermissionFactory.CreateIdentityPermission(System.Security.Policy.Evidence)">
      <summary>Creates a new identity permission for the specified evidence.</summary>
      <returns>The new identity permission.</returns>
      <param name="evidence">The evidence from which to create the new identity permission. </param>
    </member>
    <member name="T:System.Security.Policy.IMembershipCondition">
      <summary>Defines the test to determine whether a code assembly is a member of a code group.</summary>
    </member>
    <member name="M:System.Security.Policy.IMembershipCondition.Check(System.Security.Policy.Evidence)">
      <summary>Determines whether the specified evidence satisfies the membership condition.</summary>
      <returns>true if the specified evidence satisfies the membership condition; otherwise, false.</returns>
      <param name="evidence">The evidence set against which to make the test. </param>
    </member>
    <member name="M:System.Security.Policy.IMembershipCondition.Copy">
      <summary>Creates an equivalent copy of the membership condition.</summary>
      <returns>A new, identical copy of the current membership condition.</returns>
    </member>
    <member name="M:System.Security.Policy.IMembershipCondition.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</summary>
      <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. </param>
    </member>
    <member name="M:System.Security.Policy.IMembershipCondition.ToString">
      <summary>Creates and returns a string representation of the membership condition.</summary>
      <returns>A string representation of the state of the current membership condition.</returns>
    </member>
    <member name="T:System.Security.Policy.NetCodeGroup">
      <summary>Grants Web permission to the site from which the assembly was downloaded. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Policy.NetCodeGroup.#ctor(System.Security.Policy.IMembershipCondition)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.NetCodeGroup" /> class.</summary>
      <param name="membershipCondition">A membership condition that tests evidence to determine whether this code group applies code access security policy. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="membershipCondition" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentException">The type of the <paramref name="membershipCondition" /> parameter is not valid. </exception>
    </member>
    <member name="F:System.Security.Policy.NetCodeGroup.AbsentOriginScheme">
      <summary>Contains a value used to specify connection access for code with an unknown or unrecognized origin scheme.</summary>
    </member>
    <member name="M:System.Security.Policy.NetCodeGroup.AddConnectAccess(System.String,System.Security.Policy.CodeConnectAccess)">
      <summary>Adds the specified connection access to the current code group.</summary>
      <param name="originScheme">A <see cref="T:System.String" /> containing the scheme to match against the code's scheme.</param>
      <param name="connectAccess">A <see cref="T:System.Security.Policy.CodeConnectAccess" /> that specifies the scheme and port code can use to connect back to its origin server.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="originScheme" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="originScheme" /> contains characters that are not permitted in schemes.-or-<paramref name="originScheme" /> = <see cref="F:System.Security.Policy.NetCodeGroup.AbsentOriginScheme" /> and <paramref name="connectAccess" /> specifies <see cref="F:System.Security.Policy.CodeConnectAccess.OriginScheme" /> as its scheme.</exception>
    </member>
    <member name="F:System.Security.Policy.NetCodeGroup.AnyOtherOriginScheme">
      <summary>Contains a value used to specify any other unspecified origin scheme.</summary>
    </member>
    <member name="P:System.Security.Policy.NetCodeGroup.AttributeString">
      <summary>Gets a string representation of the attributes of the policy statement for the code group.</summary>
      <returns>Always null.</returns>
    </member>
    <member name="M:System.Security.Policy.NetCodeGroup.Copy">
      <summary>Makes a deep copy of the current code group.</summary>
      <returns>An equivalent copy of the current code group, including its membership conditions and child code groups.</returns>
    </member>
    <member name="M:System.Security.Policy.NetCodeGroup.Equals(System.Object)">
      <summary>Determines whether the specified code group is equivalent to the current code group.</summary>
      <returns>true if the specified code group is equivalent to the current code group; otherwise, false.</returns>
      <param name="o">The <see cref="T:System.Security.Policy.NetCodeGroup" /> object to compare with the current code group.</param>
    </member>
    <member name="M:System.Security.Policy.NetCodeGroup.GetConnectAccessRules">
      <summary>Gets the connection access information for the current code group.</summary>
      <returns>A <see cref="T:System.Collections.DictionaryEntry" /> array containing connection access information.</returns>
    </member>
    <member name="M:System.Security.Policy.NetCodeGroup.GetHashCode">
      <returns>The hash code of the current code group.</returns>
    </member>
    <member name="P:System.Security.Policy.NetCodeGroup.MergeLogic">
      <summary>Gets the logic to use for merging groups.</summary>
      <returns>The string "Union".</returns>
    </member>
    <member name="P:System.Security.Policy.NetCodeGroup.PermissionSetName">
      <summary>Gets the name of the <see cref="T:System.Security.NamedPermissionSet" /> for the code group.</summary>
      <returns>Always the string "Same site Web."</returns>
    </member>
    <member name="M:System.Security.Policy.NetCodeGroup.ResetConnectAccess">
      <summary>Removes all connection access information for the current code group.</summary>
    </member>
    <member name="M:System.Security.Policy.NetCodeGroup.Resolve(System.Security.Policy.Evidence)">
      <summary>Resolves policy for the code group and its descendants for a set of evidence.</summary>
      <returns>A <see cref="T:System.Security.Policy.PolicyStatement" /> that consists of the permissions granted by the code group with optional attributes, or null if the code group does not apply (the membership condition does not match the specified evidence).</returns>
      <param name="evidence">The <see cref="T:System.Security.Policy.Evidence" /> for the assembly. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="evidence" /> parameter is null. </exception>
      <exception cref="T:System.Security.Policy.PolicyException">More than one code group (including the parent code group and any child code groups) is marked <see cref="F:System.Security.Policy.PolicyStatementAttribute.Exclusive" />. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Policy.NetCodeGroup.ResolveMatchingCodeGroups(System.Security.Policy.Evidence)">
      <summary>Resolves matching code groups.</summary>
      <returns>A <see cref="T:System.Security.Policy.CodeGroup" />.</returns>
      <param name="evidence">The <see cref="T:System.Security.Policy.Evidence" /> for the assembly. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="evidence" /> parameter is null. </exception>
    </member>
    <member name="T:System.Security.Policy.PermissionRequestEvidence">
      <summary>Defines evidence that represents permission requests. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Policy.PermissionRequestEvidence.#ctor(System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.PermissionRequestEvidence" /> class with the permission request of a code assembly.</summary>
      <param name="request">The minimum permissions the code requires to run. </param>
      <param name="optional">The permissions the code can use if they are granted, but that are not required. </param>
      <param name="denied">The permissions the code explicitly asks not to be granted. </param>
    </member>
    <member name="M:System.Security.Policy.PermissionRequestEvidence.Clone">
      <summary>Creates a new object that is a copy of the current instance.</summary>
      <returns>A new object that is a copy of this instance. </returns>
    </member>
    <member name="M:System.Security.Policy.PermissionRequestEvidence.Copy">
      <summary>Creates an equivalent copy of the current <see cref="T:System.Security.Policy.PermissionRequestEvidence" />.</summary>
      <returns>An equivalent copy of the current <see cref="T:System.Security.Policy.PermissionRequestEvidence" />.</returns>
    </member>
    <member name="P:System.Security.Policy.PermissionRequestEvidence.DeniedPermissions">
      <summary>Gets the permissions the code explicitly asks not to be granted.</summary>
      <returns>The permissions the code explicitly asks not to be granted.</returns>
    </member>
    <member name="P:System.Security.Policy.PermissionRequestEvidence.OptionalPermissions">
      <summary>Gets the permissions the code can use if they are granted, but are not required.</summary>
      <returns>The permissions the code can use if they are granted, but are not required.</returns>
    </member>
    <member name="P:System.Security.Policy.PermissionRequestEvidence.RequestedPermissions">
      <summary>Gets the minimum permissions the code requires to run.</summary>
      <returns>The minimum permissions the code requires to run.</returns>
    </member>
    <member name="M:System.Security.Policy.PermissionRequestEvidence.ToString">
      <summary>Gets a string representation of the state of the <see cref="T:System.Security.Policy.PermissionRequestEvidence" />.</summary>
      <returns>A representation of the state of the <see cref="T:System.Security.Policy.PermissionRequestEvidence" />.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="T:System.Security.Policy.PolicyException">
      <summary>The exception that is thrown when policy forbids code to run.</summary>
    </member>
    <member name="M:System.Security.Policy.PolicyException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.PolicyException" /> class with default properties.</summary>
    </member>
    <member name="M:System.Security.Policy.PolicyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.PolicyException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination. </param>
    </member>
    <member name="M:System.Security.Policy.PolicyException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.PolicyException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
    </member>
    <member name="M:System.Security.Policy.PolicyException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.PolicyException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="exception">The exception that is the cause of the current exception. If the <paramref name="exception" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Security.Policy.PolicyLevel">
      <summary>Represents the security policy levels for the common language runtime. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.AddFullTrustAssembly(System.Security.Policy.StrongName)">
      <summary>Adds a <see cref="T:System.Security.Policy.StrongNameMembershipCondition" /> corresponding to the specified <see cref="T:System.Security.Policy.StrongName" /> to the list of <see cref="T:System.Security.Policy.StrongNameMembershipCondition" /> objects used to determine whether an assembly is a member of the group of assemblies that should not be evaluated.</summary>
      <param name="sn">The <see cref="T:System.Security.Policy.StrongName" /> used to create the <see cref="T:System.Security.Policy.StrongNameMembershipCondition" /> to add to the list of <see cref="T:System.Security.Policy.StrongNameMembershipCondition" /> objects used to determine whether an assembly is a member of the group of assemblies that should not be evaluated. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="sn" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.Security.Policy.StrongName" /> specified by the <paramref name="sn" /> parameter already has full trust. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.AddFullTrustAssembly(System.Security.Policy.StrongNameMembershipCondition)">
      <summary>Adds the specified <see cref="T:System.Security.Policy.StrongNameMembershipCondition" /> to the list of <see cref="T:System.Security.Policy.StrongNameMembershipCondition" /> objects used to determine whether an assembly is a member of the group of assemblies that should not be evaluated.</summary>
      <param name="snMC">The <see cref="T:System.Security.Policy.StrongNameMembershipCondition" /> to add to the list of <see cref="T:System.Security.Policy.StrongNameMembershipCondition" /> objects used to determine whether an assembly is a member of the group of assemblies that should not be evaluated. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="snMC" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.Security.Policy.StrongNameMembershipCondition" /> specified by the <paramref name="snMC" /> parameter already has full trust. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.AddNamedPermissionSet(System.Security.NamedPermissionSet)">
      <summary>Adds a <see cref="T:System.Security.NamedPermissionSet" /> to the current policy level.</summary>
      <param name="permSet">The <see cref="T:System.Security.NamedPermissionSet" /> to add to the current policy level. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="permSet" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="permSet" /> parameter has the same name as an existing <see cref="T:System.Security.NamedPermissionSet" /> in the <see cref="T:System.Security.Policy.PolicyLevel" />. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.ChangeNamedPermissionSet(System.String,System.Security.PermissionSet)">
      <summary>Replaces a <see cref="T:System.Security.NamedPermissionSet" /> in the current policy level with the specified <see cref="T:System.Security.PermissionSet" />.</summary>
      <returns>A copy of the <see cref="T:System.Security.NamedPermissionSet" /> that was replaced.</returns>
      <param name="name">The name of the <see cref="T:System.Security.NamedPermissionSet" /> to replace. </param>
      <param name="pSet">The <see cref="T:System.Security.PermissionSet" /> that replaces the <see cref="T:System.Security.NamedPermissionSet" /> specified by the <paramref name="name" /> parameter. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.-or- The <paramref name="pSet" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is equal to the name of a reserved permission set.-or- The <see cref="T:System.Security.PermissionSet" /> specified by the <paramref name="pSet" /> parameter cannot be found. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.CreateAppDomainLevel">
      <summary>Creates a new policy level for use at the application domain policy level.</summary>
      <returns>The newly created <see cref="T:System.Security.Policy.PolicyLevel" />.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a security object with a given state from an XML encoding.</summary>
      <param name="e">The XML encoding to use to reconstruct the security object. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="e" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.Security.SecurityElement" /> specified by the <paramref name="e" /> parameter is invalid. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Security.Policy.PolicyLevel.FullTrustAssemblies">
      <summary>Gets a list of <see cref="T:System.Security.Policy.StrongNameMembershipCondition" /> objects used to determine whether an assembly is a member of the group of assemblies used to evaluate security policy.</summary>
      <returns>A list of <see cref="T:System.Security.Policy.StrongNameMembershipCondition" /> objects used to determine whether an assembly is a member of the group of assemblies used to evaluate security policy. These assemblies are granted full trust during security policy evaluation of assemblies not in the list.</returns>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.GetNamedPermissionSet(System.String)">
      <summary>Returns the <see cref="T:System.Security.NamedPermissionSet" /> in the current policy level with the specified name.</summary>
      <returns>The <see cref="T:System.Security.NamedPermissionSet" /> in the current policy level with the specified name, if found; otherwise, null.</returns>
      <param name="name">The name of the <see cref="T:System.Security.NamedPermissionSet" /> to find. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception>
    </member>
    <member name="P:System.Security.Policy.PolicyLevel.Label">
      <summary>Gets a descriptive label for the policy level.</summary>
      <returns>The label associated with the policy level.</returns>
    </member>
    <member name="P:System.Security.Policy.PolicyLevel.NamedPermissionSets">
      <summary>Gets a list of named permission sets defined for the policy level.</summary>
      <returns>A list of named permission sets defined for the policy level.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.Recover">
      <summary>Replaces the configuration file for this <see cref="T:System.Security.Policy.PolicyLevel" /> with the last backup (reflecting the state of policy prior to the last time it was saved) and returns it to the state of the last save.</summary>
      <exception cref="T:System.Security.Policy.PolicyException">The policy level does not have a valid configuration file. </exception>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.RemoveFullTrustAssembly(System.Security.Policy.StrongName)">
      <summary>Removes an assembly with the specified <see cref="T:System.Security.Policy.StrongName" /> from the list of assemblies the policy level uses to evaluate policy.</summary>
      <param name="sn">The <see cref="T:System.Security.Policy.StrongName" /> of the assembly to remove from the list of assemblies used to evaluate policy. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="sn" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentException">The assembly with the <see cref="T:System.Security.Policy.StrongName" /> specified by the <paramref name="sn" /> parameter does not have full trust. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.RemoveFullTrustAssembly(System.Security.Policy.StrongNameMembershipCondition)">
      <summary>Removes an assembly with the specified <see cref="T:System.Security.Policy.StrongNameMembershipCondition" /> from the list of assemblies the policy level uses to evaluate policy.</summary>
      <param name="snMC">The <see cref="T:System.Security.Policy.StrongNameMembershipCondition" /> of the assembly to remove from the list of assemblies used to evaluate policy. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="snMC" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.Security.Policy.StrongNameMembershipCondition" /> specified by the <paramref name="snMC" /> parameter does not have full trust. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.RemoveNamedPermissionSet(System.Security.NamedPermissionSet)">
      <summary>Removes the specified <see cref="T:System.Security.NamedPermissionSet" /> from the current policy level.</summary>
      <returns>The <see cref="T:System.Security.NamedPermissionSet" /> that was removed.</returns>
      <param name="permSet">The <see cref="T:System.Security.NamedPermissionSet" /> to remove from the current policy level. </param>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.Security.NamedPermissionSet" /> specified by the <paramref name="permSet" /> parameter was not found. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="permSet" /> parameter is null. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.RemoveNamedPermissionSet(System.String)">
      <summary>Removes the <see cref="T:System.Security.NamedPermissionSet" /> with the specified name from the current policy level.</summary>
      <returns>The <see cref="T:System.Security.NamedPermissionSet" /> that was removed.</returns>
      <param name="name">The name of the <see cref="T:System.Security.NamedPermissionSet" /> to remove. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is equal to the name of a reserved permission set.-or- A <see cref="T:System.Security.NamedPermissionSet" /> with the specified name cannot be found. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.Reset">
      <summary>Returns the current policy level to the default state.</summary>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, ControlPolicy" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.Resolve(System.Security.Policy.Evidence)">
      <summary>Resolves policy based on evidence for the policy level, and returns the resulting <see cref="T:System.Security.Policy.PolicyStatement" />.</summary>
      <returns>The resulting <see cref="T:System.Security.Policy.PolicyStatement" />.</returns>
      <param name="evidence">The <see cref="T:System.Security.Policy.Evidence" /> used to resolve the <see cref="T:System.Security.Policy.PolicyLevel" />. </param>
      <exception cref="T:System.Security.Policy.PolicyException">The policy level contains multiple matching code groups marked as exclusive. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="evidence" /> parameter is null. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.ResolveMatchingCodeGroups(System.Security.Policy.Evidence)">
      <summary>Resolves policy at the policy level and returns the root of a code group tree that matches the evidence.</summary>
      <returns>A <see cref="T:System.Security.Policy.CodeGroup" /> representing the root of a tree of code groups matching the specified evidence.</returns>
      <param name="evidence">The <see cref="T:System.Security.Policy.Evidence" /> used to resolve policy. </param>
      <exception cref="T:System.Security.Policy.PolicyException">The policy level contains multiple matching code groups marked as exclusive. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="evidence" /> parameter is null. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Security.Policy.PolicyLevel.RootCodeGroup">
      <summary>Gets or sets the root code group for the policy level.</summary>
      <returns>The <see cref="T:System.Security.Policy.CodeGroup" /> that is the root of the tree of policy level code groups.</returns>
      <exception cref="T:System.ArgumentNullException">The value for <see cref="P:System.Security.Policy.PolicyLevel.RootCodeGroup" /> is null.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence, ControlPolicy" />
      </PermissionSet>
    </member>
    <member name="P:System.Security.Policy.PolicyLevel.StoreLocation">
      <summary>Gets the path where the policy file is stored.</summary>
      <returns>The path where the policy file is stored, or null if the <see cref="T:System.Security.Policy.PolicyLevel" /> does not have a storage location.</returns>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.ToXml">
      <summary>Creates an XML encoding of the security object and its current state.</summary>
      <returns>An XML encoding of the security object, including any state information.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Security.Policy.PolicyLevel.Type">
      <summary>Gets the type of the policy level.</summary>
      <returns>One of the <see cref="T:System.Security.PolicyLevelType" /> values.</returns>
    </member>
    <member name="T:System.Security.Policy.PolicyStatement">
      <summary>Represents the statement of a <see cref="T:System.Security.Policy.CodeGroup" /> describing the permissions and other information that apply to code with a particular set of evidence. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Policy.PolicyStatement.#ctor(System.Security.PermissionSet)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.PolicyStatement" /> class with the specified <see cref="T:System.Security.PermissionSet" />.</summary>
      <param name="permSet">The <see cref="T:System.Security.PermissionSet" /> with which to initialize the new instance. </param>
    </member>
    <member name="M:System.Security.Policy.PolicyStatement.#ctor(System.Security.PermissionSet,System.Security.Policy.PolicyStatementAttribute)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.PolicyStatement" /> class with the specified <see cref="T:System.Security.PermissionSet" /> and attributes.</summary>
      <param name="permSet">The <see cref="T:System.Security.PermissionSet" /> with which to initialize the new instance. </param>
      <param name="attributes">A bitwise combination of the <see cref="T:System.Security.Policy.PolicyStatementAttribute" /> values. </param>
    </member>
    <member name="P:System.Security.Policy.PolicyStatement.Attributes">
      <summary>Gets or sets the attributes of the policy statement.</summary>
      <returns>The attributes of the policy statement.</returns>
    </member>
    <member name="P:System.Security.Policy.PolicyStatement.AttributeString">
      <summary>Gets a string representation of the attributes of the policy statement.</summary>
      <returns>A text string representing the attributes of the policy statement.</returns>
    </member>
    <member name="M:System.Security.Policy.PolicyStatement.Copy">
      <summary>Creates an equivalent copy of the current policy statement.</summary>
      <returns>A new copy of the <see cref="T:System.Security.Policy.PolicyStatement" /> with <see cref="P:System.Security.Policy.PolicyStatement.PermissionSet" /> and <see cref="P:System.Security.Policy.PolicyStatement.Attributes" /> identical to those of the current <see cref="T:System.Security.Policy.PolicyStatement" />.</returns>
    </member>
    <member name="M:System.Security.Policy.PolicyStatement.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Security.Policy.PolicyStatement" /> object is equal to the current <see cref="T:System.Security.Policy.PolicyStatement" />.</summary>
      <returns>true if the specified <see cref="T:System.Security.Policy.PolicyStatement" /> is equal to the current <see cref="T:System.Security.Policy.PolicyStatement" /> object; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Security.Policy.PolicyStatement" /> object to compare with the current <see cref="T:System.Security.Policy.PolicyStatement" />. </param>
    </member>
    <member name="M:System.Security.Policy.PolicyStatement.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a security object with a given state from an XML encoding.</summary>
      <param name="et">The XML encoding to use to reconstruct the security object. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="et" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="et" /> parameter is not a valid <see cref="T:System.Security.Policy.PolicyStatement" /> encoding. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Policy.PolicyStatement.FromXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)">
      <summary>Reconstructs a security object with a given state from an XML encoding.</summary>
      <param name="et">The XML encoding to use to reconstruct the security object. </param>
      <param name="level">The <see cref="T:System.Security.Policy.PolicyLevel" /> context for lookup of <see cref="T:System.Security.NamedPermissionSet" /> values. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="et" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="et" /> parameter is not a valid <see cref="T:System.Security.Policy.PolicyStatement" /> encoding. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Policy.PolicyStatement.GetHashCode">
      <summary>Gets a hash code for the <see cref="T:System.Security.Policy.PolicyStatement" /> object that is suitable for use in hashing algorithms and data structures such as a hash table.</summary>
      <returns>A hash code for the current <see cref="T:System.Security.Policy.PolicyStatement" /> object.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Security.Policy.PolicyStatement.PermissionSet">
      <summary>Gets or sets the <see cref="T:System.Security.PermissionSet" /> of the policy statement.</summary>
      <returns>The <see cref="T:System.Security.PermissionSet" /> of the policy statement.</returns>
    </member>
    <member name="M:System.Security.Policy.PolicyStatement.ToXml">
      <summary>Creates an XML encoding of the security object and its current state.</summary>
      <returns>An XML encoding of the security object, including any state information.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Policy.PolicyStatement.ToXml(System.Security.Policy.PolicyLevel)">
      <summary>Creates an XML encoding of the security object and its current state.</summary>
      <returns>An XML encoding of the security object, including any state information.</returns>
      <param name="level">The <see cref="T:System.Security.Policy.PolicyLevel" /> context for lookup of <see cref="T:System.Security.NamedPermissionSet" /> values. </param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="T:System.Security.Policy.PolicyStatementAttribute">
      <summary>Defines special attribute flags for security policy on code groups.</summary>
    </member>
    <member name="F:System.Security.Policy.PolicyStatementAttribute.Nothing">
      <summary>No flags are set.</summary>
    </member>
    <member name="F:System.Security.Policy.PolicyStatementAttribute.Exclusive">
      <summary>The exclusive code group flag. When a code group has this flag set, only the permissions associated with that code group are granted to code belonging to the code group. At most, one code group matching a given piece of code can be set as exclusive.</summary>
    </member>
    <member name="F:System.Security.Policy.PolicyStatementAttribute.LevelFinal">
      <summary>The flag representing a policy statement that causes lower policy levels to not be evaluated as part of the resolve operation, effectively allowing the policy level to override lower levels.</summary>
    </member>
    <member name="F:System.Security.Policy.PolicyStatementAttribute.All">
      <summary>All attribute flags are set.</summary>
    </member>
    <member name="T:System.Security.Policy.Publisher">
      <summary>Provides the Authenticode X.509v3 digital signature of a code assembly as evidence for policy evaluation. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Policy.Publisher.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.Publisher" /> class with the Authenticode X.509v3 certificate containing the publisher's public key.</summary>
      <param name="cert">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> that contains the software publisher's public key. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="cert" /> parameter is null. </exception>
    </member>
    <member name="P:System.Security.Policy.Publisher.Certificate">
      <summary>Gets the publisher's Authenticode X.509v3 certificate.</summary>
      <returns>The publisher's <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" />.</returns>
    </member>
    <member name="M:System.Security.Policy.Publisher.Clone">
      <summary>Creates a new object that is a copy of the current instance.</summary>
      <returns>A new object that is a copy of this instance. </returns>
    </member>
    <member name="M:System.Security.Policy.Publisher.Copy">
      <summary>Creates an equivalent copy of the <see cref="T:System.Security.Policy.Publisher" />.</summary>
      <returns>A new, identical copy of the <see cref="T:System.Security.Policy.Publisher" />.</returns>
    </member>
    <member name="M:System.Security.Policy.Publisher.CreateIdentityPermission(System.Security.Policy.Evidence)">
      <summary>Creates an identity permission that corresponds to the current instance of the <see cref="T:System.Security.Policy.Publisher" /> class.</summary>
      <returns>A <see cref="T:System.Security.Permissions.PublisherIdentityPermission" /> for the specified <see cref="T:System.Security.Policy.Publisher" />.</returns>
      <param name="evidence">The <see cref="T:System.Security.Policy.Evidence" /> from which to construct the identity permission. </param>
    </member>
    <member name="M:System.Security.Policy.Publisher.Equals(System.Object)">
      <summary>Compares the current <see cref="T:System.Security.Policy.Publisher" /> to the specified object for equivalence.</summary>
      <returns>true if the two instances of the <see cref="T:System.Security.Policy.Publisher" /> class are equal; otherwise, false.</returns>
      <param name="o">The <see cref="T:System.Security.Policy.Publisher" /> to test for equivalence with the current object. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="o" /> parameter is not a <see cref="T:System.Security.Policy.Publisher" /> object. </exception>
    </member>
    <member name="M:System.Security.Policy.Publisher.GetHashCode">
      <summary>Gets the hash code of the current <see cref="P:System.Security.Policy.Publisher.Certificate" />.</summary>
      <returns>The hash code of the current <see cref="P:System.Security.Policy.Publisher.Certificate" />.</returns>
    </member>
    <member name="M:System.Security.Policy.Publisher.ToString">
      <summary>Returns a string representation of the current <see cref="T:System.Security.Policy.Publisher" />.</summary>
      <returns>A representation of the current <see cref="T:System.Security.Policy.Publisher" />.</returns>
    </member>
    <member name="T:System.Security.Policy.PublisherMembershipCondition">
      <summary>Determines whether an assembly belongs to a code group by testing its software publisher's Authenticode X.509v3 certificate. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Policy.PublisherMembershipCondition.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.PublisherMembershipCondition" /> class with the Authenticode X.509v3 certificate that determines membership.</summary>
      <param name="certificate">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> that contains the software publisher's public key. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="certificate" /> parameter is null. </exception>
    </member>
    <member name="P:System.Security.Policy.PublisherMembershipCondition.Certificate">
      <summary>Gets or sets the Authenticode X.509v3 certificate for which the membership condition tests.</summary>
      <returns>The <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> for which the membership condition tests.</returns>
      <exception cref="T:System.ArgumentNullException">The property value is null. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="Create" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Policy.PublisherMembershipCondition.Check(System.Security.Policy.Evidence)">
      <summary>Determines whether the specified evidence satisfies the membership condition.</summary>
      <returns>true if the specified evidence satisfies the membership condition; otherwise, false.</returns>
      <param name="evidence">The <see cref="T:System.Security.Policy.Evidence" /> against which to make the test. </param>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Policy.PublisherMembershipCondition.Certificate" /> property is null. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="Create" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Policy.PublisherMembershipCondition.Copy">
      <summary>Creates an equivalent copy of the membership condition.</summary>
      <returns>A new, identical copy of the current membership condition.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Policy.PublisherMembershipCondition.Certificate" /> property is null. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="Create" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Policy.PublisherMembershipCondition.Equals(System.Object)">
      <summary>Determines whether the publisher certificate from the specified object is equivalent to the publisher certificate contained in the current <see cref="T:System.Security.Policy.PublisherMembershipCondition" />.</summary>
      <returns>true if the publisher certificate from the specified object is equivalent to the publisher certificate contained in the current <see cref="T:System.Security.Policy.PublisherMembershipCondition" />; otherwise, false.</returns>
      <param name="o">The object to compare to the current <see cref="T:System.Security.Policy.PublisherMembershipCondition" />. </param>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Policy.PublisherMembershipCondition.Certificate" /> property is null. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="Create" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Policy.PublisherMembershipCondition.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a security object with a specified state from an XML encoding.</summary>
      <param name="e">The XML encoding to use to reconstruct the security object. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="e" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="e" /> parameter is not a valid membership condition element. </exception>
    </member>
    <member name="M:System.Security.Policy.PublisherMembershipCondition.FromXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)">
      <summary>Reconstructs a security object with a specified state from an XML encoding.</summary>
      <param name="e">The XML encoding to use to reconstruct the security object. </param>
      <param name="level">The <see cref="T:System.Security.Policy.PolicyLevel" /> context, used to resolve <see cref="T:System.Security.NamedPermissionSet" /> references. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="e" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="e" /> parameter is not a valid membership condition element. </exception>
    </member>
    <member name="M:System.Security.Policy.PublisherMembershipCondition.GetHashCode">
      <summary>Gets the hash code for the current membership condition.</summary>
      <returns>The hash code for the current membership condition.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Policy.PublisherMembershipCondition.Certificate" /> property is null. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="Create" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Policy.PublisherMembershipCondition.ToString">
      <summary>Creates and returns a string representation of the <see cref="T:System.Security.Policy.PublisherMembershipCondition" />.</summary>
      <returns>A representation of the <see cref="T:System.Security.Policy.PublisherMembershipCondition" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Policy.PublisherMembershipCondition.Certificate" /> property is null. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="Create" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Policy.PublisherMembershipCondition.ToXml">
      <summary>Creates an XML encoding of the security object and its current state.</summary>
      <returns>An XML encoding of the security object, including any state information.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Policy.PublisherMembershipCondition.Certificate" /> property is null. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="Create" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Policy.PublisherMembershipCondition.ToXml(System.Security.Policy.PolicyLevel)">
      <summary>Creates an XML encoding of the security object and its current state with the specified <see cref="T:System.Security.Policy.PolicyLevel" />.</summary>
      <returns>An XML encoding of the security object, including any state information.</returns>
      <param name="level">The <see cref="T:System.Security.Policy.PolicyLevel" /> context, which is used to resolve <see cref="T:System.Security.NamedPermissionSet" /> references. </param>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Policy.PublisherMembershipCondition.Certificate" /> property is null. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="Create" />
      </PermissionSet>
    </member>
    <member name="T:System.Security.Policy.Site">
      <summary>Provides the Web site from which a code assembly originates as evidence for policy evaluation. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Policy.Site.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.Site" /> class with the Web site from which a code assembly originates.</summary>
      <param name="name">The Web site of origin for the associated code assembly. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception>
    </member>
    <member name="M:System.Security.Policy.Site.Clone">
      <summary>Creates a new object that is a copy of the current instance.</summary>
      <returns>A new object that is a copy of this instance. </returns>
    </member>
    <member name="M:System.Security.Policy.Site.Copy">
      <summary>Creates an equivalent copy of the <see cref="T:System.Security.Policy.Site" />.</summary>
      <returns>A new, identical copy of the <see cref="T:System.Security.Policy.Site" />.</returns>
    </member>
    <member name="M:System.Security.Policy.Site.CreateFromUrl(System.String)">
      <summary>Creates a new <see cref="T:System.Security.Policy.Site" /> from the specified URL.</summary>
      <returns>The new <see cref="T:System.Security.Policy.Site" />.</returns>
      <param name="url">The URL from which to create the new <see cref="T:System.Security.Policy.Site" />. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="url" /> parameter is not a valid URL. -or-The <paramref name="url" /> parameter is a file name.</exception>
    </member>
    <member name="M:System.Security.Policy.Site.CreateIdentityPermission(System.Security.Policy.Evidence)">
      <summary>Creates an identity permission that corresponds to the current <see cref="T:System.Security.Policy.Site" />.</summary>
      <returns>A <see cref="T:System.Security.Permissions.SiteIdentityPermission" /> for the specified <see cref="T:System.Security.Policy.Site" />.</returns>
      <param name="evidence">The <see cref="T:System.Security.Policy.Evidence" /> from which to construct the identity permission. </param>
    </member>
    <member name="M:System.Security.Policy.Site.Equals(System.Object)">
      <summary>Compares the current <see cref="T:System.Security.Policy.Site" /> to the specified object for equivalence.</summary>
      <returns>true if the two instances of the <see cref="T:System.Security.Policy.Site" /> class are equal; otherwise, false.</returns>
      <param name="o">The <see cref="T:System.Security.Policy.Site" /> to test for equivalence with the current object. </param>
    </member>
    <member name="M:System.Security.Policy.Site.GetHashCode">
      <summary>Returns the hash code of the current Web site name.</summary>
      <returns>The hash code of the current Web site name.</returns>
    </member>
    <member name="P:System.Security.Policy.Site.Name">
      <summary>Gets the site from which the code assembly originates.</summary>
      <returns>The name of the site from which the code assembly originates.</returns>
    </member>
    <member name="M:System.Security.Policy.Site.ToString">
      <summary>Returns a string representation of the current <see cref="T:System.Security.Policy.Site" />.</summary>
      <returns>A representation the current <see cref="T:System.Security.Policy.Site" />.</returns>
    </member>
    <member name="T:System.Security.Policy.SiteMembershipCondition">
      <summary>Determines whether an assembly belongs to a code group by testing the site from which it originated. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Policy.SiteMembershipCondition.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.SiteMembershipCondition" /> class with name of the site that determines membership.</summary>
      <param name="site">The site name or wildcard expression. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="site" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="site" /> parameter is not a valid <see cref="T:System.Security.Policy.Site" />. </exception>
    </member>
    <member name="M:System.Security.Policy.SiteMembershipCondition.Check(System.Security.Policy.Evidence)">
      <summary>Determines whether the specified evidence satisfies the membership condition.</summary>
      <returns>true if the specified evidence satisfies the membership condition; otherwise, false.</returns>
      <param name="evidence">The <see cref="T:System.Security.Policy.Evidence" /> against which to make the test. </param>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Security.Policy.SiteMembershipCondition.Site" /> property is null. </exception>
    </member>
    <member name="M:System.Security.Policy.SiteMembershipCondition.Copy">
      <summary>Creates an equivalent copy of the membership condition.</summary>
      <returns>A new, identical copy of the current membership condition.</returns>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Security.Policy.SiteMembershipCondition.Site" /> property is null. </exception>
    </member>
    <member name="M:System.Security.Policy.SiteMembershipCondition.Equals(System.Object)">
      <summary>Determines whether the site from the specified <see cref="T:System.Security.Policy.SiteMembershipCondition" /> object is equivalent to the site contained in the current <see cref="T:System.Security.Policy.SiteMembershipCondition" />.</summary>
      <returns>true if the site from the specified <see cref="T:System.Security.Policy.SiteMembershipCondition" /> object is equivalent to the site contained in the current <see cref="T:System.Security.Policy.SiteMembershipCondition" />; otherwise, false.</returns>
      <param name="o">The <see cref="T:System.Security.Policy.SiteMembershipCondition" /> object to compare to the current <see cref="T:System.Security.Policy.SiteMembershipCondition" />. </param>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Security.Policy.SiteMembershipCondition.Site" /> property for the current object or the specified object is null. </exception>
    </member>
    <member name="M:System.Security.Policy.SiteMembershipCondition.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a security object with a specified state from an XML encoding.</summary>
      <param name="e">The XML encoding to use to reconstruct the security object. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="e" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="e" /> parameter is not a valid membership condition element. </exception>
    </member>
    <member name="M:System.Security.Policy.SiteMembershipCondition.FromXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)">
      <summary>Reconstructs a security object with a specified state from an XML encoding.</summary>
      <param name="e">The XML encoding to use to reconstruct the security object. </param>
      <param name="level">The <see cref="T:System.Security.Policy.PolicyLevel" /> context, used to resolve <see cref="T:System.Security.NamedPermissionSet" /> references. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="e" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="e" /> parameter is not a valid membership condition element. </exception>
    </member>
    <member name="M:System.Security.Policy.SiteMembershipCondition.GetHashCode">
      <summary>Gets the hash code for the current membership condition.</summary>
      <returns>The hash code for the current membership condition.</returns>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Security.Policy.SiteMembershipCondition.Site" /> property is null. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Security.Policy.SiteMembershipCondition.Site">
      <summary>Gets or sets the site for which the membership condition tests.</summary>
      <returns>The site for which the membership condition tests.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt is made to set <see cref="P:System.Security.Policy.SiteMembershipCondition.Site" /> to null. </exception>
      <exception cref="T:System.ArgumentException">An attempt is made to set <see cref="P:System.Security.Policy.SiteMembershipCondition.Site" /> to an invalid <see cref="T:System.Security.Policy.Site" />. </exception>
    </member>
    <member name="M:System.Security.Policy.SiteMembershipCondition.ToString">
      <summary>Creates and returns a string representation of the membership condition.</summary>
      <returns>A string representation of the membership condition.</returns>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Security.Policy.SiteMembershipCondition.Site" /> property is null. </exception>
    </member>
    <member name="M:System.Security.Policy.SiteMembershipCondition.ToXml">
      <summary>Creates an XML encoding of the security object and its current state.</summary>
      <returns>An XML encoding of the security object, including any state information.</returns>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Security.Policy.SiteMembershipCondition.Site" /> property is null. </exception>
    </member>
    <member name="M:System.Security.Policy.SiteMembershipCondition.ToXml(System.Security.Policy.PolicyLevel)">
      <summary>Creates an XML encoding of the security object and its current state with the specified <see cref="T:System.Security.Policy.PolicyLevel" />.</summary>
      <returns>An XML encoding of the security object, including any state information.</returns>
      <param name="level">The <see cref="T:System.Security.Policy.PolicyLevel" /> context, used to resolve <see cref="T:System.Security.NamedPermissionSet" /> references. </param>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Security.Policy.SiteMembershipCondition.Site" /> property is null. </exception>
    </member>
    <member name="T:System.Security.Policy.StrongName">
      <summary>Provides the strong name of a code assembly as evidence for policy evaluation. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Policy.StrongName.#ctor(System.Security.Permissions.StrongNamePublicKeyBlob,System.String,System.Version)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.StrongName" /> class with the strong name public key blob, name, and version.</summary>
      <param name="blob">The <see cref="T:System.Security.Permissions.StrongNamePublicKeyBlob" /> of the software publisher. </param>
      <param name="name">The simple name section of the strong name. </param>
      <param name="version">The <see cref="T:System.Version" /> of the strong name. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="blob" /> parameter is null.-or- The <paramref name="name" /> parameter is null.-or- The <paramref name="version" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is an empty string (""). </exception>
    </member>
    <member name="M:System.Security.Policy.StrongName.Clone">
      <summary>Creates a new object that is a copy of the current instance.</summary>
      <returns>A new object that is a copy of this instance. </returns>
    </member>
    <member name="M:System.Security.Policy.StrongName.Copy">
      <summary>Creates an equivalent copy of the current <see cref="T:System.Security.Policy.StrongName" />.</summary>
      <returns>A new, identical copy of the current <see cref="T:System.Security.Policy.StrongName" />.</returns>
    </member>
    <member name="M:System.Security.Policy.StrongName.CreateIdentityPermission(System.Security.Policy.Evidence)">
      <summary>Creates a <see cref="T:System.Security.Permissions.StrongNameIdentityPermission" /> that corresponds to the current <see cref="T:System.Security.Policy.StrongName" />.</summary>
      <returns>A <see cref="T:System.Security.Permissions.StrongNameIdentityPermission" /> for the specified <see cref="T:System.Security.Policy.StrongName" />.</returns>
      <param name="evidence">The <see cref="T:System.Security.Policy.Evidence" /> from which to construct the <see cref="T:System.Security.Permissions.StrongNameIdentityPermission" />. </param>
    </member>
    <member name="M:System.Security.Policy.StrongName.Equals(System.Object)">
      <summary>Determines whether the specified strong name is equal to the current strong name.</summary>
      <returns>true if the specified strong name is equal to the current strong name; otherwise, false.</returns>
      <param name="o">The strong name to compare against the current strong name. </param>
    </member>
    <member name="M:System.Security.Policy.StrongName.GetHashCode">
      <summary>Gets the hash code of the current <see cref="T:System.Security.Policy.StrongName" />.</summary>
      <returns>The hash code of the current <see cref="T:System.Security.Policy.StrongName" />.</returns>
    </member>
    <member name="P:System.Security.Policy.StrongName.Name">
      <summary>Gets the simple name of the current <see cref="T:System.Security.Policy.StrongName" />.</summary>
      <returns>The simple name part of the <see cref="T:System.Security.Policy.StrongName" />.</returns>
    </member>
    <member name="P:System.Security.Policy.StrongName.PublicKey">
      <summary>Gets the <see cref="T:System.Security.Permissions.StrongNamePublicKeyBlob" /> of the current <see cref="T:System.Security.Policy.StrongName" />.</summary>
      <returns>The <see cref="T:System.Security.Permissions.StrongNamePublicKeyBlob" /> of the current <see cref="T:System.Security.Policy.StrongName" />.</returns>
    </member>
    <member name="M:System.Security.Policy.StrongName.ToString">
      <summary>Creates a string representation of the current <see cref="T:System.Security.Policy.StrongName" />.</summary>
      <returns>A representation of the current <see cref="T:System.Security.Policy.StrongName" />.</returns>
    </member>
    <member name="P:System.Security.Policy.StrongName.Version">
      <summary>Gets the <see cref="T:System.Version" /> of the current <see cref="T:System.Security.Policy.StrongName" />.</summary>
      <returns>The <see cref="T:System.Version" /> of the current <see cref="T:System.Security.Policy.StrongName" />.</returns>
    </member>
    <member name="T:System.Security.Policy.StrongNameMembershipCondition">
      <summary>Determines whether an assembly belongs to a code group by testing its strong name. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Policy.StrongNameMembershipCondition.#ctor(System.Security.Permissions.StrongNamePublicKeyBlob,System.String,System.Version)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.StrongNameMembershipCondition" /> class with the strong name public key blob, name, and version number that determine membership.</summary>
      <param name="blob">The strong name public key blob of the software publisher. </param>
      <param name="name">The simple name section of the strong name. </param>
      <param name="version">The version number of the strong name. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="blob" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null.-or-The <paramref name="name" /> parameter is an empty string ("").</exception>
    </member>
    <member name="M:System.Security.Policy.StrongNameMembershipCondition.Check(System.Security.Policy.Evidence)">
      <summary>Determines whether the specified evidence satisfies the membership condition.</summary>
      <returns>true if the specified evidence satisfies the membership condition; otherwise, false.</returns>
      <param name="evidence">The <see cref="T:System.Security.Policy.Evidence" /> against which to make the test. </param>
    </member>
    <member name="M:System.Security.Policy.StrongNameMembershipCondition.Copy">
      <summary>Creates an equivalent copy of the current <see cref="T:System.Security.Policy.StrongNameMembershipCondition" />.</summary>
      <returns>A new, identical copy of the current <see cref="T:System.Security.Policy.StrongNameMembershipCondition" /></returns>
    </member>
    <member name="M:System.Security.Policy.StrongNameMembershipCondition.Equals(System.Object)">
      <summary>Determines whether the <see cref="T:System.Security.Policy.StrongName" /> from the specified object is equivalent to the <see cref="T:System.Security.Policy.StrongName" /> contained in the current <see cref="T:System.Security.Policy.StrongNameMembershipCondition" />.</summary>
      <returns>true if the <see cref="T:System.Security.Policy.StrongName" /> from the specified object is equivalent to the <see cref="T:System.Security.Policy.StrongName" /> contained in the current <see cref="T:System.Security.Policy.StrongNameMembershipCondition" />; otherwise, false.</returns>
      <param name="o">The object to compare to the current <see cref="T:System.Security.Policy.StrongNameMembershipCondition" />. </param>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Security.Policy.StrongNameMembershipCondition.PublicKey" /> property of the current object or the specified object is null. </exception>
    </member>
    <member name="M:System.Security.Policy.StrongNameMembershipCondition.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a security object with a specified state from an XML encoding.</summary>
      <param name="e">The XML encoding to use to reconstruct the security object. </param>
    </member>
    <member name="M:System.Security.Policy.StrongNameMembershipCondition.FromXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)">
      <summary>Reconstructs a security object with a specified state from an XML encoding.</summary>
      <param name="e">The XML encoding to use to reconstruct the security object. </param>
      <param name="level">The <see cref="T:System.Security.Policy.PolicyLevel" /> context, used to resolve <see cref="T:System.Security.NamedPermissionSet" /> references. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="e" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="e" /> parameter is not a valid membership condition element. </exception>
    </member>
    <member name="M:System.Security.Policy.StrongNameMembershipCondition.GetHashCode">
      <summary>Returns the hash code for the current <see cref="T:System.Security.Policy.StrongNameMembershipCondition" />.</summary>
      <returns>The hash code for the current <see cref="T:System.Security.Policy.StrongNameMembershipCondition" />.</returns>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Security.Policy.StrongNameMembershipCondition.PublicKey" /> property is null. </exception>
    </member>
    <member name="P:System.Security.Policy.StrongNameMembershipCondition.Name">
      <summary>Gets or sets the simple name of the <see cref="T:System.Security.Policy.StrongName" /> for which the membership condition tests.</summary>
      <returns>The simple name of the <see cref="T:System.Security.Policy.StrongName" /> for which the membership condition tests.</returns>
      <exception cref="T:System.ArgumentException">The value is null.-or-The value is an empty string ("").</exception>
    </member>
    <member name="P:System.Security.Policy.StrongNameMembershipCondition.PublicKey">
      <summary>Gets or sets the <see cref="T:System.Security.Permissions.StrongNamePublicKeyBlob" /> of the <see cref="T:System.Security.Policy.StrongName" /> for which the membership condition tests.</summary>
      <returns>The <see cref="T:System.Security.Permissions.StrongNamePublicKeyBlob" /> of the <see cref="T:System.Security.Policy.StrongName" /> for which the membership condition tests.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt is made to set the <see cref="P:System.Security.Policy.StrongNameMembershipCondition.PublicKey" /> to null. </exception>
    </member>
    <member name="M:System.Security.Policy.StrongNameMembershipCondition.ToString">
      <summary>Creates and returns a string representation of the current <see cref="T:System.Security.Policy.StrongNameMembershipCondition" />.</summary>
      <returns>A representation of the current <see cref="T:System.Security.Policy.StrongNameMembershipCondition" />.</returns>
    </member>
    <member name="M:System.Security.Policy.StrongNameMembershipCondition.ToXml">
      <summary>Creates an XML encoding of the security object and its current state.</summary>
      <returns>An XML encoding of the security object, including any state information.</returns>
    </member>
    <member name="M:System.Security.Policy.StrongNameMembershipCondition.ToXml(System.Security.Policy.PolicyLevel)">
      <summary>Creates an XML encoding of the security object and its current state with the specified <see cref="T:System.Security.Policy.PolicyLevel" />.</summary>
      <returns>An XML encoding of the security object, including any state information.</returns>
      <param name="level">The <see cref="T:System.Security.Policy.PolicyLevel" /> context, which is used to resolve <see cref="T:System.Security.NamedPermissionSet" /> references. </param>
    </member>
    <member name="P:System.Security.Policy.StrongNameMembershipCondition.Version">
      <summary>Gets or sets the <see cref="T:System.Version" /> of the <see cref="T:System.Security.Policy.StrongName" /> for which the membership condition tests.</summary>
      <returns>The <see cref="T:System.Version" /> of the <see cref="T:System.Security.Policy.StrongName" /> for which the membership condition tests.</returns>
    </member>
    <member name="T:System.Security.Policy.TrustManagerContext">
      <summary>Represents the context for the trust manager to consider when making the decision to run an application, and when setting up the security on a new <see cref="T:System.AppDomain" /> in which to run an application.</summary>
    </member>
    <member name="M:System.Security.Policy.TrustManagerContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.TrustManagerContext" /> class. </summary>
    </member>
    <member name="M:System.Security.Policy.TrustManagerContext.#ctor(System.Security.Policy.TrustManagerUIContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.TrustManagerContext" /> class using the specified <see cref="T:System.Security.Policy.TrustManagerUIContext" /> object. </summary>
      <param name="uiContext">One of the <see cref="T:System.Security.Policy.TrustManagerUIContext" /> values that specifies the type of trust manager user interface to use. </param>
    </member>
    <member name="P:System.Security.Policy.TrustManagerContext.IgnorePersistedDecision">
      <summary>Gets or sets a value indicating whether the application security manager should ignore any persisted decisions and call the trust manager.</summary>
      <returns>true to call the trust manager; otherwise, false. </returns>
    </member>
    <member name="P:System.Security.Policy.TrustManagerContext.KeepAlive">
      <summary>Gets or sets a value indicating whether the trust manager should cache state for this application, to facilitate future requests to determine application trust.</summary>
      <returns>true to cache state data; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Security.Policy.TrustManagerContext.NoPrompt">
      <summary>Gets or sets a value indicating whether the trust manager should prompt the user for trust decisions.</summary>
      <returns>true to not prompt the user; false to prompt the user. The default is false.</returns>
    </member>
    <member name="P:System.Security.Policy.TrustManagerContext.Persist">
      <summary>Gets or sets a value indicating whether the user's response to the consent dialog should be persisted. </summary>
      <returns>true to cache state data; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Security.Policy.TrustManagerContext.PreviousApplicationIdentity">
      <summary>Gets or sets the identity of the previous application identity.</summary>
      <returns>An <see cref="T:System.ApplicationIdentity" /> object representing the previous <see cref="T:System.ApplicationIdentity" />.</returns>
    </member>
    <member name="P:System.Security.Policy.TrustManagerContext.UIContext">
      <summary>Gets or sets the type of user interface the trust manager should display.</summary>
      <returns>One of the <see cref="T:System.Security.Policy.TrustManagerUIContext" /> values. The default is <see cref="F:System.Security.Policy.TrustManagerUIContext.Run" />. </returns>
    </member>
    <member name="T:System.Security.Policy.TrustManagerUIContext">
      <summary>Specifies the type of user interface (UI) the trust manager should use for trust decisions. </summary>
    </member>
    <member name="F:System.Security.Policy.TrustManagerUIContext.Install">
      <summary>An Install UI.</summary>
    </member>
    <member name="F:System.Security.Policy.TrustManagerUIContext.Upgrade">
      <summary>An Upgrade UI.</summary>
    </member>
    <member name="F:System.Security.Policy.TrustManagerUIContext.Run">
      <summary>A Run UI.</summary>
    </member>
    <member name="T:System.Security.Policy.UnionCodeGroup">
      <summary>Represents a code group whose policy statement is the union of the current code group's policy statement and the policy statement of all its matching child code groups. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Policy.UnionCodeGroup.#ctor(System.Security.Policy.IMembershipCondition,System.Security.Policy.PolicyStatement)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.UnionCodeGroup" /> class.</summary>
      <param name="membershipCondition">A membership condition that tests evidence to determine whether this code group applies policy. </param>
      <param name="policy">The policy statement for the code group in the form of a permission set and attributes to grant code that matches the membership condition. </param>
      <exception cref="T:System.ArgumentException">The type of the <paramref name="membershipCondition" /> parameter is not valid.-or- The type of the <paramref name="policy" /> parameter is not valid. </exception>
    </member>
    <member name="M:System.Security.Policy.UnionCodeGroup.Copy">
      <summary>Makes a deep copy of the current code group.</summary>
      <returns>An equivalent copy of the current code group, including its membership conditions and child code groups.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Security.Policy.UnionCodeGroup.MergeLogic">
      <summary>Gets the merge logic.</summary>
      <returns>Always the string "Union".</returns>
    </member>
    <member name="M:System.Security.Policy.UnionCodeGroup.Resolve(System.Security.Policy.Evidence)">
      <summary>Resolves policy for the code group and its descendants for a set of evidence.</summary>
      <returns>A policy statement consisting of the permissions granted by the code group with optional attributes, or null if the code group does not apply (the membership condition does not match the specified evidence).</returns>
      <param name="evidence">The evidence for the assembly. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="evidence" /> parameter is null. </exception>
      <exception cref="T:System.Security.Policy.PolicyException">More than one code group (including the parent code group and any child code groups) is marked <see cref="F:System.Security.Policy.PolicyStatementAttribute.Exclusive" />. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Policy.UnionCodeGroup.ResolveMatchingCodeGroups(System.Security.Policy.Evidence)">
      <summary>Resolves matching code groups.</summary>
      <returns>A <see cref="T:System.Security.Policy.CodeGroup" />.</returns>
      <param name="evidence">The evidence for the assembly. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="evidence" /> parameter is null. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="T:System.Security.Policy.Url">
      <summary>Provides the URL from which a code assembly originates as evidence for policy evaluation. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Policy.Url.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.Url" /> class with the URL from which a code assembly originates.</summary>
      <param name="name">The URL of origin for the associated code assembly. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception>
    </member>
    <member name="M:System.Security.Policy.Url.Clone">
      <summary>Creates a new object that is a copy of the current instance.</summary>
      <returns>A new object that is a copy of this instance. </returns>
    </member>
    <member name="M:System.Security.Policy.Url.Copy">
      <summary>Creates a new copy of the evidence object.</summary>
      <returns>A new, identical copy of the evidence object.</returns>
    </member>
    <member name="M:System.Security.Policy.Url.CreateIdentityPermission(System.Security.Policy.Evidence)">
      <summary>Creates an identity permission corresponding to the current instance of the <see cref="T:System.Security.Policy.Url" /> evidence class.</summary>
      <returns>A <see cref="T:System.Security.Permissions.UrlIdentityPermission" /> for the specified <see cref="T:System.Security.Policy.Url" /> evidence.</returns>
      <param name="evidence">The evidence set from which to construct the identity permission. </param>
    </member>
    <member name="M:System.Security.Policy.Url.Equals(System.Object)">
      <summary>Compares the current <see cref="T:System.Security.Policy.Url" /> evidence object to the specified object for equivalence.</summary>
      <returns>true if the two <see cref="T:System.Security.Policy.Url" /> objects are equal; otherwise, false.</returns>
      <param name="o">The <see cref="T:System.Security.Policy.Url" /> evidence object to test for equivalence with the current object. </param>
    </member>
    <member name="M:System.Security.Policy.Url.GetHashCode">
      <summary>Gets the hash code of the current URL.</summary>
      <returns>The hash code of the current URL.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Policy.Url.ToString">
      <summary>Returns a string representation of the current <see cref="T:System.Security.Policy.Url" />.</summary>
      <returns>A representation of the current <see cref="T:System.Security.Policy.Url" />.</returns>
    </member>
    <member name="P:System.Security.Policy.Url.Value">
      <summary>Gets the URL from which the code assembly originates.</summary>
      <returns>The URL from which the code assembly originates.</returns>
    </member>
    <member name="T:System.Security.Policy.UrlMembershipCondition">
      <summary>Determines whether an assembly belongs to a code group by testing its URL. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Policy.UrlMembershipCondition.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.UrlMembershipCondition" /> class with the URL that determines membership.</summary>
      <param name="url">The URL for which to test. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="url" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="url" /> must be an absolute URL.</exception>
    </member>
    <member name="M:System.Security.Policy.UrlMembershipCondition.Check(System.Security.Policy.Evidence)">
      <summary>Determines whether the specified evidence satisfies the membership condition.</summary>
      <returns>true if the specified evidence satisfies the membership condition; otherwise, false.</returns>
      <param name="evidence">The evidence set against which to make the test. </param>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Policy.UrlMembershipCondition.Url" /> property is null. </exception>
    </member>
    <member name="M:System.Security.Policy.UrlMembershipCondition.Copy">
      <summary>Creates an equivalent copy of the membership condition.</summary>
      <returns>A new, identical copy of the current membership condition.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Policy.UrlMembershipCondition.Url" /> property is null. </exception>
    </member>
    <member name="M:System.Security.Policy.UrlMembershipCondition.Equals(System.Object)">
      <summary>Determines whether the URL from the specified object is equivalent to the URL contained in the current <see cref="T:System.Security.Policy.UrlMembershipCondition" />.</summary>
      <returns>true if the URL from the specified object is equivalent to the URL contained in the current <see cref="T:System.Security.Policy.UrlMembershipCondition" />; otherwise, false.</returns>
      <param name="o">The object to compare to the current <see cref="T:System.Security.Policy.UrlMembershipCondition" />. </param>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Policy.UrlMembershipCondition.Url" /> property of the current object or the specified object is null. </exception>
    </member>
    <member name="M:System.Security.Policy.UrlMembershipCondition.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a security object with a specified state from an XML encoding.</summary>
      <param name="e">The XML encoding to use to reconstruct the security object. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="e" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="e" /> parameter is not a valid membership condition element. </exception>
    </member>
    <member name="M:System.Security.Policy.UrlMembershipCondition.FromXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)">
      <summary>Reconstructs a security object with a specified state from an XML encoding.</summary>
      <param name="e">The XML encoding to use to reconstruct the security object. </param>
      <param name="level">The policy level context, used to resolve named permission set references. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="e" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="e" /> parameter is not a valid membership condition element. </exception>
    </member>
    <member name="M:System.Security.Policy.UrlMembershipCondition.GetHashCode">
      <summary>Gets the hash code for the current membership condition.</summary>
      <returns>The hash code for the current membership condition.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Policy.UrlMembershipCondition.Url" /> property is null. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Policy.UrlMembershipCondition.ToString">
      <summary>Creates and returns a string representation of the membership condition.</summary>
      <returns>A string representation of the state of the membership condition.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Policy.UrlMembershipCondition.Url" /> property is null. </exception>
    </member>
    <member name="M:System.Security.Policy.UrlMembershipCondition.ToXml">
      <summary>Creates an XML encoding of the security object and its current state.</summary>
      <returns>An XML encoding of the security object, including any state information.</returns>
    </member>
    <member name="M:System.Security.Policy.UrlMembershipCondition.ToXml(System.Security.Policy.PolicyLevel)">
      <summary>Creates an XML encoding of the security object and its current state with the specified <see cref="T:System.Security.Policy.PolicyLevel" />.</summary>
      <returns>An XML encoding of the security object, including any state information.</returns>
      <param name="level">The policy level context for resolving named permission set references. </param>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Policy.UrlMembershipCondition.Url" /> property is null. </exception>
    </member>
    <member name="P:System.Security.Policy.UrlMembershipCondition.Url">
      <summary>Gets or sets the URL for which the membership condition tests.</summary>
      <returns>The URL for which the membership condition tests.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt is made to set <see cref="P:System.Security.Policy.UrlMembershipCondition.Url" /> to null. </exception>
      <exception cref="T:System.ArgumentException">Value is not an absolute URL.</exception>
    </member>
    <member name="T:System.Security.Policy.Zone">
      <summary>Provides the security zone of a code assembly as evidence for policy evaluation. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Policy.Zone.#ctor(System.Security.SecurityZone)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.Zone" /> class with the zone from which a code assembly originates.</summary>
      <param name="zone">The zone of origin for the associated code assembly. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="zone" /> parameter is not a valid <see cref="T:System.Security.SecurityZone" />. </exception>
    </member>
    <member name="M:System.Security.Policy.Zone.Clone">
      <summary>Creates a new object that is a copy of the current instance.</summary>
      <returns>A new object that is a copy of this instance. </returns>
    </member>
    <member name="M:System.Security.Policy.Zone.Copy">
      <summary>Creates an equivalent copy of the evidence object.</summary>
      <returns>A new, identical copy of the evidence object.</returns>
    </member>
    <member name="M:System.Security.Policy.Zone.CreateFromUrl(System.String)">
      <summary>Creates a new zone with the specified URL.</summary>
      <returns>A new zone with the specified URL.</returns>
      <param name="url">The URL from which to create the zone. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="url" /> parameter is null. </exception>
    </member>
    <member name="M:System.Security.Policy.Zone.CreateIdentityPermission(System.Security.Policy.Evidence)">
      <summary>Creates an identity permission that corresponds to the current instance of the <see cref="T:System.Security.Policy.Zone" /> evidence class.</summary>
      <returns>A <see cref="T:System.Security.Permissions.ZoneIdentityPermission" /> for the specified <see cref="T:System.Security.Policy.Zone" /> evidence.</returns>
      <param name="evidence">The evidence set from which to construct the identity permission. </param>
    </member>
    <member name="M:System.Security.Policy.Zone.Equals(System.Object)">
      <summary>Compares the current <see cref="T:System.Security.Policy.Zone" /> evidence object to the specified object for equivalence.</summary>
      <returns>true if the two <see cref="T:System.Security.Policy.Zone" /> objects are equal; otherwise, false.</returns>
      <param name="o">The <see cref="T:System.Security.Policy.Zone" /> evidence object to test for equivalence with the current object. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="o" /> parameter is not a <see cref="T:System.Security.Policy.Zone" /> object. </exception>
    </member>
    <member name="M:System.Security.Policy.Zone.GetHashCode">
      <summary>Gets the hash code of the current zone.</summary>
      <returns>The hash code of the current zone.</returns>
    </member>
    <member name="P:System.Security.Policy.Zone.SecurityZone">
      <summary>Gets the zone from which the code assembly originates.</summary>
      <returns>The zone from which the code assembly originates.</returns>
    </member>
    <member name="M:System.Security.Policy.Zone.ToString">
      <summary>Returns a string representation of the current <see cref="T:System.Security.Policy.Zone" />.</summary>
      <returns>A representation of the current <see cref="T:System.Security.Policy.Zone" />.</returns>
    </member>
    <member name="T:System.Security.Policy.ZoneMembershipCondition">
      <summary>Determines whether an assembly belongs to a code group by testing its zone of origin. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Policy.ZoneMembershipCondition.#ctor(System.Security.SecurityZone)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.ZoneMembershipCondition" /> class with the zone that determines membership.</summary>
      <param name="zone">The <see cref="T:System.Security.SecurityZone" /> for which to test. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="zone" /> parameter is not a valid <see cref="T:System.Security.SecurityZone" />. </exception>
    </member>
    <member name="M:System.Security.Policy.ZoneMembershipCondition.Check(System.Security.Policy.Evidence)">
      <summary>Determines whether the specified evidence satisfies the membership condition.</summary>
      <returns>true if the specified evidence satisfies the membership condition; otherwise, false.</returns>
      <param name="evidence">The evidence set against which to make the test. </param>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Policy.ZoneMembershipCondition.SecurityZone" /> property is null. </exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Security.Policy.ZoneMembershipCondition.SecurityZone" /> property is not a valid <see cref="T:System.Security.SecurityZone" />. </exception>
    </member>
    <member name="M:System.Security.Policy.ZoneMembershipCondition.Copy">
      <summary>Creates an equivalent copy of the membership condition.</summary>
      <returns>A new, identical copy of the current membership condition.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Policy.ZoneMembershipCondition.SecurityZone" /> property is null. </exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Security.Policy.ZoneMembershipCondition.SecurityZone" /> property is not a valid <see cref="T:System.Security.SecurityZone" />. </exception>
    </member>
    <member name="M:System.Security.Policy.ZoneMembershipCondition.Equals(System.Object)">
      <summary>Determines whether the zone from the specified object is equivalent to the zone contained in the current <see cref="T:System.Security.Policy.ZoneMembershipCondition" />.</summary>
      <returns>true if the zone from the specified object is equivalent to the zone contained in the current <see cref="T:System.Security.Policy.ZoneMembershipCondition" />; otherwise, false.</returns>
      <param name="o">The object to compare to the current <see cref="T:System.Security.Policy.ZoneMembershipCondition" />. </param>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Policy.ZoneMembershipCondition.SecurityZone" /> property for the current object or the specified object is null. </exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Security.Policy.ZoneMembershipCondition.SecurityZone" /> property for the current object or the specified object is not a valid <see cref="T:System.Security.SecurityZone" />. </exception>
    </member>
    <member name="M:System.Security.Policy.ZoneMembershipCondition.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a security object with a specified state from an XML encoding.</summary>
      <param name="e">The XML encoding to use to reconstruct the security object. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="e" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="e" /> parameter is not a valid membership condition element.</exception>
    </member>
    <member name="M:System.Security.Policy.ZoneMembershipCondition.FromXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)">
      <summary>Reconstructs a security object with a specified state from an XML encoding.</summary>
      <param name="e">The XML encoding to use to reconstruct the security object. </param>
      <param name="level">The policy level context used to resolve named permission set references. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="e" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="e" /> parameter is not a valid membership condition element. </exception>
    </member>
    <member name="M:System.Security.Policy.ZoneMembershipCondition.GetHashCode">
      <summary>Gets the hash code for the current membership condition.</summary>
      <returns>The hash code for the current membership condition.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Policy.ZoneMembershipCondition.SecurityZone" /> property is null. </exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Security.Policy.ZoneMembershipCondition.SecurityZone" /> property is not a valid <see cref="T:System.Security.SecurityZone" />. </exception>
    </member>
    <member name="P:System.Security.Policy.ZoneMembershipCondition.SecurityZone">
      <summary>Gets or sets the zone for which the membership condition tests.</summary>
      <returns>The zone for which the membership condition tests.</returns>
      <exception cref="T:System.ArgumentNullException">The value is null. </exception>
      <exception cref="T:System.ArgumentException">An attempt is made to set <see cref="P:System.Security.Policy.ZoneMembershipCondition.SecurityZone" /> to an invalid <see cref="T:System.Security.SecurityZone" />. </exception>
    </member>
    <member name="M:System.Security.Policy.ZoneMembershipCondition.ToString">
      <summary>Creates and returns a string representation of the membership condition.</summary>
      <returns>A string representation of the state of the membership condition.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Policy.ZoneMembershipCondition.SecurityZone" /> property is null. </exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Security.Policy.ZoneMembershipCondition.SecurityZone" /> property is not a valid <see cref="T:System.Security.SecurityZone" />. </exception>
    </member>
    <member name="M:System.Security.Policy.ZoneMembershipCondition.ToXml">
      <summary>Creates an XML encoding of the security object and its current state.</summary>
      <returns>An XML encoding of the security object, including any state information.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Policy.ZoneMembershipCondition.SecurityZone" /> property is null. </exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Security.Policy.ZoneMembershipCondition.SecurityZone" /> property is not a valid <see cref="T:System.Security.SecurityZone" />. </exception>
    </member>
    <member name="M:System.Security.Policy.ZoneMembershipCondition.ToXml(System.Security.Policy.PolicyLevel)">
      <summary>Creates an XML encoding of the security object and its current state with the specified <see cref="T:System.Security.Policy.PolicyLevel" />.</summary>
      <returns>An XML encoding of the security object, including any state information.</returns>
      <param name="level">The policy level context for resolving named permission set references. </param>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Policy.ZoneMembershipCondition.SecurityZone" /> property is null. </exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Security.Policy.ZoneMembershipCondition.SecurityZone" /> property is not a valid <see cref="T:System.Security.SecurityZone" />. </exception>
    </member>
    <member name="T:System.Security.Principal.GenericIdentity">
      <summary>Represents a generic user.</summary>
    </member>
    <member name="M:System.Security.Principal.GenericIdentity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Principal.GenericIdentity" /> class representing the user with the specified name.</summary>
      <param name="name">The name of the user on whose behalf the code is running. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception>
    </member>
    <member name="M:System.Security.Principal.GenericIdentity.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Principal.GenericIdentity" /> class representing the user with the specified name and authentication type.</summary>
      <param name="name">The name of the user on whose behalf the code is running. </param>
      <param name="type">The type of authentication used to identify the user. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.-or- The <paramref name="type" /> parameter is null. </exception>
    </member>
    <member name="P:System.Security.Principal.GenericIdentity.AuthenticationType">
      <summary>Gets the type of authentication used to identify the user.</summary>
      <returns>The type of authentication used to identify the user.</returns>
    </member>
    <member name="P:System.Security.Principal.GenericIdentity.IsAuthenticated">
      <summary>Gets a value indicating whether the user has been authenticated.</summary>
      <returns>true if the user was has been authenticated; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Principal.GenericIdentity.Name">
      <summary>Gets the user's name.</summary>
      <returns>The name of the user on whose behalf the code is being run.</returns>
    </member>
    <member name="T:System.Security.Principal.GenericPrincipal">
      <summary>Represents a generic principal.</summary>
    </member>
    <member name="M:System.Security.Principal.GenericPrincipal.#ctor(System.Security.Principal.IIdentity,System.String[])">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Principal.GenericPrincipal" /> class from a user identity and an array of role names to which the user represented by that identity belongs.</summary>
      <param name="identity">A basic implementation of <see cref="T:System.Security.Principal.IIdentity" /> that represents any user. </param>
      <param name="roles">An array of role names to which the user represented by the <paramref name="identity" /> parameter belongs. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="identity" /> parameter is null. </exception>
    </member>
    <member name="P:System.Security.Principal.GenericPrincipal.Identity">
      <summary>Gets the <see cref="T:System.Security.Principal.GenericIdentity" /> of the user represented by the current <see cref="T:System.Security.Principal.GenericPrincipal" />.</summary>
      <returns>The <see cref="T:System.Security.Principal.GenericIdentity" /> of the user represented by the <see cref="T:System.Security.Principal.GenericPrincipal" />.</returns>
    </member>
    <member name="M:System.Security.Principal.GenericPrincipal.IsInRole(System.String)">
      <summary>Determines whether the current <see cref="T:System.Security.Principal.GenericPrincipal" /> belongs to the specified role.</summary>
      <returns>true if the current <see cref="T:System.Security.Principal.GenericPrincipal" /> is a member of the specified role; otherwise, false.</returns>
      <param name="role">The name of the role for which to check membership. </param>
    </member>
    <member name="T:System.Security.Principal.IdentityNotMappedException">
      <summary>Represents an exception for a principal whose identity could not be mapped to a known identity.</summary>
    </member>
    <member name="M:System.Security.Principal.IdentityNotMappedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Principal.IdentityNotMappedException" /> class.</summary>
    </member>
    <member name="M:System.Security.Principal.IdentityNotMappedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Principal.IdentityNotMappedException" /> class by using the specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.Security.Principal.IdentityNotMappedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Principal.IdentityNotMappedException" /> class by using the specified error message and inner exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If <paramref name="inner" /> is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="M:System.Security.Principal.IdentityNotMappedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Gets serialization information with the data needed to create an instance of this <see cref="T:System.Security.Principal.IdentityNotMappedException" /> object. </summary>
      <param name="serializationInfo">The <see cref="T:System.Runtime.Serialization." /><see cref="SerializationInfo" /> object that holds the serialized object data about the exception being thrown.</param>
      <param name="streamingContext">The <see cref="T:System.Runtime.SerializationInfo." /><see cref="StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="P:System.Security.Principal.IdentityNotMappedException.UnmappedIdentities">
      <summary>Represents the collection of unmapped identities for an <see cref="T:System.Security.Principal.IdentityNotMappedException" /> exception.</summary>
      <returns>The collection of unmapped identities.</returns>
    </member>
    <member name="T:System.Security.Principal.IdentityReference">
      <summary>Represents an identity and is the base class for the <see cref="T:System.Security.Principal.NTAccount" /> and <see cref="T:System.Security.Principal.SecurityIdentifier" /> classes. This class does not provide a public constructor, and therefore cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Principal.IdentityReference.Equals(System.Object)">
      <summary>Returns a value that indicates whether the specified object equals this instance of the <see cref="T:System.Security.Principal.IdentityReference" /> class.</summary>
      <returns>true if <paramref name="o" /> is an object with the same underlying type and value as this <see cref="T:System.Security.Principal.IdentityReference" /> instance; otherwise, false.</returns>
      <param name="o">An object to compare with this <see cref="T:System.Security.Principal.IdentityReference" /> instance, or a null reference.</param>
    </member>
    <member name="M:System.Security.Principal.IdentityReference.GetHashCode">
      <summary>Serves as a hash function for <see cref="T:System.Security.Principal.IdentityReference" />. <see cref="M:System.Security.Principal.IdentityReference.GetHashCode" /> is suitable for use in hashing algorithms and data structures like a hash table.</summary>
      <returns>The hash code for this <see cref="T:System.Security.Principal.IdentityReference" /> object.</returns>
    </member>
    <member name="M:System.Security.Principal.IdentityReference.IsValidTargetType(System.Type)">
      <summary>Returns a value that indicates whether the specified type is a valid translation type for the <see cref="T:System.Security.Principal.IdentityReference" /> class.</summary>
      <returns>true if <paramref name="targetType" /> is a valid translation type for the <see cref="T:System.Security.Principal.IdentityReference" /> class; otherwise, false.</returns>
      <param name="targetType">The type being queried for validity to serve as a conversion from <see cref="T:System.Security.Principal.IdentityReference" />. The following target types are valid:<see cref="T:System.Security.Principal.NTAccount" /><see cref="T:System.Security.Principal.SecurityIdentifier" /></param>
    </member>
    <member name="M:System.Security.Principal.IdentityReference.op_Equality(System.Security.Principal.IdentityReference,System.Security.Principal.IdentityReference)">
      <summary>Compares two <see cref="T:System.Security.Principal.IdentityReference" /> objects to determine whether they are equal. They are considered equal if they have the same canonical name representation as the one returned by the <see cref="P:System.Security.Principal.IdentityReference.Value" /> property or if they are both null.</summary>
      <returns>true if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, false.</returns>
      <param name="left">The left <see cref="T:System.Security.Principal.IdentityReference" /> operand to use for the equality comparison. This parameter can be null.</param>
      <param name="right">The right <see cref="T:System.Security.Principal.IdentityReference" /> operand to use for the equality comparison. This parameter can be null.</param>
    </member>
    <member name="M:System.Security.Principal.IdentityReference.op_Inequality(System.Security.Principal.IdentityReference,System.Security.Principal.IdentityReference)">
      <summary>Compares two <see cref="T:System.Security.Principal.IdentityReference" /> objects to determine whether they are not equal. They are considered not equal if they have different canonical name representations than the one returned by the <see cref="P:System.Security.Principal.IdentityReference.Value" /> property or if one of the objects is null and the other is not.</summary>
      <returns>true if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, false.</returns>
      <param name="left">The left <see cref="T:System.Security.Principal.IdentityReference" /> operand to use for the inequality comparison. This parameter can be null.</param>
      <param name="right">The right <see cref="T:System.Security.Principal.IdentityReference" /> operand to use for the inequality comparison. This parameter can be null.</param>
    </member>
    <member name="M:System.Security.Principal.IdentityReference.ToString">
      <summary>Returns the string representation of the identity represented by the <see cref="T:System.Security.Principal.IdentityReference" /> object.</summary>
      <returns>The identity in string format.</returns>
    </member>
    <member name="M:System.Security.Principal.IdentityReference.Translate(System.Type)">
      <summary>Translates the account name represented by the <see cref="T:System.Security.Principal.IdentityReference" /> object into another <see cref="T:System.Security.Principal.IdentityReference" />-derived type.</summary>
      <returns>The converted identity.</returns>
      <param name="targetType">The target type for the conversion from <see cref="T:System.Security.Principal.IdentityReference" />. </param>
    </member>
    <member name="P:System.Security.Principal.IdentityReference.Value">
      <summary>Gets the string value of the identity represented by the <see cref="T:System.Security.Principal.IdentityReference" /> object.</summary>
      <returns>The string value of the identity represented by the <see cref="T:System.Security.Principal.IdentityReference" /> object.</returns>
    </member>
    <member name="T:System.Security.Principal.IdentityReferenceCollection">
      <summary>Represents a collection of <see cref="T:System.Security.Principal.IdentityReference" /> objects and provides a means of converting sets of <see cref="T:System.Security.Principal.IdentityReference" />-derived objects to <see cref="T:System.Security.Principal.IdentityReference" />-derived types. </summary>
    </member>
    <member name="M:System.Security.Principal.IdentityReferenceCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Principal.IdentityReferenceCollection" /> class with zero items in the collection.</summary>
    </member>
    <member name="M:System.Security.Principal.IdentityReferenceCollection.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Principal.IdentityReferenceCollection" /> class by using the specified initial size.</summary>
      <param name="capacity">The initial number of items in the collection. The value of <paramref name="capacity" /> is a hint only; it is not necessarily the maximum number of items created.</param>
    </member>
    <member name="M:System.Security.Principal.IdentityReferenceCollection.Add(System.Security.Principal.IdentityReference)">
      <summary>Adds an <see cref="T:System.Security.Principal.IdentityReference" /> object to the <see cref="T:System.Security.Principal.IdentityReferenceCollection" /> collection.</summary>
      <param name="identity">The <see cref="T:System.Security.Principal.IdentityReference" /> object to add to the collection.</param>
    </member>
    <member name="M:System.Security.Principal.IdentityReferenceCollection.Clear">
      <summary>Clears all <see cref="T:System.Security.Principal.IdentityReference" /> objects from the <see cref="T:System.Security.Principal.IdentityReferenceCollection" /> collection.</summary>
    </member>
    <member name="M:System.Security.Principal.IdentityReferenceCollection.Contains(System.Security.Principal.IdentityReference)">
      <summary>Indicates whether the <see cref="T:System.Security.Principal.IdentityReferenceCollection" /> collection contains the specified <see cref="T:System.Security.Principal.IdentityReference" /> object.</summary>
      <returns>true if the collection contains the specified object.</returns>
      <param name="identity">The <see cref="T:System.Security.Principal.IdentityReference" /> object to check for.</param>
    </member>
    <member name="M:System.Security.Principal.IdentityReferenceCollection.CopyTo(System.Security.Principal.IdentityReference[],System.Int32)">
      <summary>Copies the <see cref="T:System.Security.Principal.IdentityReferenceCollection" /> collection to an <see cref="T:System.Security.Principal.IdentityReferenceCollection" /> array, starting at the specified index.</summary>
      <param name="array">An <see cref="T:System.Security.Principal.IdentityReferenceCollection" /> array object to which the <see cref="T:System.Security.Principal.IdentityReferenceCollection" /> collection is to be copied.</param>
      <param name="offset">The zero-based index in <paramref name="array" /> where the <see cref="T:System.Security.Principal.IdentityReferenceCollection" /> collection is to be copied.</param>
    </member>
    <member name="P:System.Security.Principal.IdentityReferenceCollection.Count">
      <summary>Gets the number of items in the <see cref="T:System.Security.Principal.IdentityReferenceCollection" /> collection.</summary>
      <returns>The number of <see cref="T:System.Security.Principal.IdentityReference" /> objects in the <see cref="T:System.Security.Principal.IdentityReferenceCollection" /> collection.</returns>
    </member>
    <member name="M:System.Security.Principal.IdentityReferenceCollection.GetEnumerator">
      <summary>Gets an enumerator that can be used to iterate through the <see cref="T:System.Security.Principal.IdentityReferenceCollection" /> collection.</summary>
      <returns>An enumerator for the <see cref="T:System.Security.Principal.IdentityReferenceCollection" /> collection.</returns>
    </member>
    <member name="P:System.Security.Principal.IdentityReferenceCollection.IsReadOnly">
      <summary>Gets a value that indicates whether the <see cref="T:System.Security.Principal.IdentityReferenceCollection" /> collection is read-only.</summary>
      <returns>true if the <see cref="T:System.Security.Principal.IdentityReferenceCollection" /> collection is read-only.</returns>
    </member>
    <member name="P:System.Security.Principal.IdentityReferenceCollection.Item(System.Int32)">
      <summary>Sets or gets the node at the specified index of the <see cref="T:System.Security.Principal.IdentityReferenceCollection" /> collection.</summary>
      <returns>The <see cref="T:System.Security.Principal.IdentityReference" /> at the specified index in the collection. If <paramref name="index" /> is greater than or equal to the number of nodes in the collection, the return value is null.</returns>
      <param name="index">The zero-based index in the <see cref="T:System.Security.Principal.IdentityReferenceCollection" /> collection.</param>
    </member>
    <member name="M:System.Security.Principal.IdentityReferenceCollection.Remove(System.Security.Principal.IdentityReference)">
      <summary>Removes the specified <see cref="T:System.Security.Principal.IdentityReference" /> object from the collection.</summary>
      <returns>true if the specified object was removed from the collection.</returns>
      <param name="identity">The <see cref="T:System.Security.Principal.IdentityReference" /> object to remove.</param>
    </member>
    <member name="M:System.Security.Principal.IdentityReferenceCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gets an enumerator that can be used to iterate through the <see cref="T:System.Security.Principal.IdentityReferenceCollection" /> collection.</summary>
      <returns>An enumerator for the <see cref="T:System.Security.Principal.IdentityReferenceCollection" /> collection.</returns>
    </member>
    <member name="M:System.Security.Principal.IdentityReferenceCollection.Translate(System.Type)">
      <summary>Converts the objects in the collection to the specified type. Calling this method is the same as calling <see cref="M:System.Security.Principal.IdentityReferenceCollection.Translate(System.Type,System.Boolean)" /> with the second parameter set to false, which means that exceptions will not be thrown for items that fail conversion.</summary>
      <returns>A <see cref="T:System.Security.Principal.IdentityReferenceCollection" /> collection that represents the converted contents of the original collection.</returns>
      <param name="targetType">The type to which items in the collection are being converted.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Principal.IdentityReferenceCollection.Translate(System.Type,System.Boolean)">
      <summary>Converts the objects in the collection to the specified type and uses the specified fault tolerance to handle or ignore errors associated with a type not having a conversion mapping.</summary>
      <returns>A <see cref="T:System.Security.Principal.IdentityReferenceCollection" /> collection that represents the converted contents of the original collection.</returns>
      <param name="targetType">The type to which items in the collection are being converted.</param>
      <param name="forceSuccess">A Boolean value that determines how conversion errors are handled.If <paramref name="forceSuccess" /> is true, conversion errors due to a mapping not being found for the translation result in a failed conversion and exceptions being thrown.If <paramref name="forceSuccess" /> is false, types that failed to convert due to a mapping not being found for the translation are copied without being converted into the collection being returned.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
      </PermissionSet>
    </member>
    <member name="T:System.Security.Principal.IIdentity">
      <summary>Defines the basic functionality of an identity object.</summary>
    </member>
    <member name="P:System.Security.Principal.IIdentity.AuthenticationType">
      <summary>Gets the type of authentication used.</summary>
      <returns>The type of authentication used to identify the user.</returns>
    </member>
    <member name="P:System.Security.Principal.IIdentity.IsAuthenticated">
      <summary>Gets a value that indicates whether the user has been authenticated.</summary>
      <returns>true if the user was authenticated; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Principal.IIdentity.Name">
      <summary>Gets the name of the current user.</summary>
      <returns>The name of the user on whose behalf the code is running.</returns>
    </member>
    <member name="T:System.Security.Principal.IPrincipal">
      <summary>Defines the basic functionality of a principal object.</summary>
    </member>
    <member name="P:System.Security.Principal.IPrincipal.Identity">
      <summary>Gets the identity of the current principal.</summary>
      <returns>The <see cref="T:System.Security.Principal.IIdentity" /> object associated with the current principal.</returns>
    </member>
    <member name="M:System.Security.Principal.IPrincipal.IsInRole(System.String)">
      <summary>Determines whether the current principal belongs to the specified role.</summary>
      <returns>true if the current principal is a member of the specified role; otherwise, false.</returns>
      <param name="role">The name of the role for which to check membership. </param>
    </member>
    <member name="T:System.Security.Principal.NTAccount">
      <summary>Represents a user or group account.</summary>
    </member>
    <member name="M:System.Security.Principal.NTAccount.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Principal.NTAccount" /> class by using the specified name.</summary>
      <param name="name">The name used to create the <see cref="T:System.Security.Principal.NTAccount" /> object. This parameter cannot be null or an empty string.</param>
    </member>
    <member name="M:System.Security.Principal.NTAccount.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Principal.NTAccount" /> class by using the specified domain name and account name. </summary>
      <param name="domainName">The name of the domain. This parameter can be null or an empty string. Domain names that are null values are treated like an empty string.</param>
      <param name="accountName">The name of the account. This parameter cannot be null or an empty string.</param>
    </member>
    <member name="M:System.Security.Principal.NTAccount.Equals(System.Object)">
      <summary>Returns a value that indicates whether this <see cref="T:System.Security.Principal.NTAccount" /> object is equal to a specified object.</summary>
      <returns>true if <paramref name="o" /> is an object with the same underlying type and value as this <see cref="T:System.Security.Principal.NTAccount" /> object; otherwise, false.</returns>
      <param name="o">An object to compare with this <see cref="T:System.Security.Principal.NTAccount" /> object, or null.</param>
    </member>
    <member name="M:System.Security.Principal.NTAccount.GetHashCode">
      <summary>Serves as a hash function for the current <see cref="T:System.Security.Principal.NTAccount" /> object. The <see cref="M:System.Security.Principal.NTAccount.GetHashCode" /> method is suitable for hashing algorithms and data structures like a hash table.</summary>
      <returns>A hash value for the current <see cref="T:System.Security.Principal.NTAccount" /> object.</returns>
    </member>
    <member name="M:System.Security.Principal.NTAccount.IsValidTargetType(System.Type)">
      <summary>Returns a value that indicates whether the specified type is a valid translation type for the <see cref="T:System.Security.Principal.NTAccount" /> class.</summary>
      <returns>true if <paramref name="targetType" /> is a valid translation type for the <see cref="T:System.Security.Principal.NTAccount" /> class; otherwise false.</returns>
      <param name="targetType">The type being queried for validity to serve as a conversion from <see cref="T:System.Security.Principal.NTAccount" />. The following target types are valid:<see cref="T:System.Security.Principal.NTAccount" /><see cref="T:System.Security.Principal.SecurityIdentifier" /></param>
    </member>
    <member name="M:System.Security.Principal.NTAccount.op_Equality(System.Security.Principal.NTAccount,System.Security.Principal.NTAccount)">
      <summary>Compares two <see cref="T:System.Security.Principal.NTAccount" /> objects to determine whether they are equal. They are considered equal if they have the same canonical name representation as the one returned by the <see cref="P:System.Security.Principal.NTAccount.Value" /> property or if they are both null. </summary>
      <returns>true if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise false.</returns>
      <param name="left">The left <see cref="T:System.Security.Principal.NTAccount" /> operand to use for the equality comparison. This parameter can be null.</param>
      <param name="right">The right  <see cref="T:System.Security.Principal.NTAccount" /> operand to use for the equality comparison. This parameter can be null.</param>
    </member>
    <member name="M:System.Security.Principal.NTAccount.op_Inequality(System.Security.Principal.NTAccount,System.Security.Principal.NTAccount)">
      <summary>Compares two <see cref="T:System.Security.Principal.NTAccount" /> objects to determine whether they are not equal. They are considered not equal if they have different canonical name representations than the one returned by the <see cref="P:System.Security.Principal.NTAccount.Value" /> property or if one of the objects is null and the other is not.</summary>
      <returns>true if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise false.</returns>
      <param name="left">The left <see cref="T:System.Security.Principal.NTAccount" /> operand to use for the inequality comparison. This parameter can be null.</param>
      <param name="right">The right <see cref="T:System.Security.Principal.NTAccount" /> operand to use for the inequality comparison. This parameter can be null.</param>
    </member>
    <member name="M:System.Security.Principal.NTAccount.ToString">
      <summary>Returns the account name, in Domain\Account format, for the account represented by the <see cref="T:System.Security.Principal.NTAccount" /> object.</summary>
      <returns>The account name, in Domain\Account format.</returns>
    </member>
    <member name="M:System.Security.Principal.NTAccount.Translate(System.Type)">
      <summary>Translates the account name represented by the <see cref="T:System.Security.Principal.NTAccount" /> object into another <see cref="T:System.Security.Principal.IdentityReference" />-derived type.</summary>
      <returns>The converted identity.</returns>
      <param name="targetType">The target type for the conversion from <see cref="T:System.Security.Principal.NTAccount" />. The target type must be a type that is considered valid by the <see cref="M:System.Security.Principal.NTAccount.IsValidTargetType(System.Type)" /> method. </param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
      </PermissionSet>
    </member>
    <member name="P:System.Security.Principal.NTAccount.Value">
      <summary>Returns an uppercase string representation of this <see cref="T:System.Security.Principal.NTAccount" /> object.</summary>
      <returns>The uppercase string representation of this <see cref="T:System.Security.Principal.NTAccount" /> object.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="T:System.Security.Principal.PrincipalPolicy">
      <summary>Specifies how principal and identity objects should be created for an application domain. The default is UnauthenticatedPrincipal.</summary>
    </member>
    <member name="F:System.Security.Principal.PrincipalPolicy.UnauthenticatedPrincipal">
      <summary>Principal and identity objects for the unauthenticated entity should be created. An unauthenticated entity has <see cref="P:System.Security.Principal.GenericIdentity.Name" /> set to the empty string ("") and <see cref="P:System.Security.Principal.GenericIdentity.IsAuthenticated" /> set to false.</summary>
    </member>
    <member name="F:System.Security.Principal.PrincipalPolicy.NoPrincipal">
      <summary>No principal or identity objects should be created.</summary>
    </member>
    <member name="F:System.Security.Principal.PrincipalPolicy.WindowsPrincipal">
      <summary>Principal and identity objects that reflect the operating system token associated with the current execution thread should be created, and the associated operating system groups should be mapped into roles.</summary>
    </member>
    <member name="T:System.Security.Principal.SecurityIdentifier">
      <summary>Represents a security identifier (SID) and provides marshaling and comparison operations for SIDs.</summary>
    </member>
    <member name="M:System.Security.Principal.SecurityIdentifier.#ctor(System.Byte[],System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Principal.SecurityIdentifier" /> class by using a specified binary representation of a security identifier (SID).</summary>
      <param name="binaryForm">The byte array that represents the SID.</param>
      <param name="offset">The byte offset to use as the starting index in <paramref name="binaryForm" />. </param>
    </member>
    <member name="M:System.Security.Principal.SecurityIdentifier.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Principal.SecurityIdentifier" /> class by using an integer that represents the binary form of a security identifier (SID).</summary>
      <param name="binaryForm">An integer that represents the binary form of a SID.</param>
    </member>
    <member name="M:System.Security.Principal.SecurityIdentifier.#ctor(System.Security.Principal.WellKnownSidType,System.Security.Principal.SecurityIdentifier)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Principal.SecurityIdentifier" /> class by using the specified well known security identifier (SID) type and domain SID.</summary>
      <param name="sidType">A <see cref="T:System.Security.Principal.WellKnownSidType" /> value.This value must not be <see cref="F:System.Security.Principal.WellKnownSidType.WinLogonIdsSid" />.</param>
      <param name="domainSid">The domain SID. This value is required for the following <see cref="T:System.Security.Principal.WellKnownSidType" /> values. This parameter is ignored for any other <see cref="T:System.Security.Principal.WellKnownSidType" /> values.<see cref="F:System.Security.Principal.WellKnownSidType.WinAccountAdministratorSid" /><see cref="F:System.Security.Principal.WellKnownSidType.WinAccountGuestSid" /><see cref="F:System.Security.Principal.WellKnownSidType.WinAccountKrbtgtSid" /><see cref="F:System.Security.Principal.WellKnownSidType.WinAccountDomainAdminsSid" /><see cref="F:System.Security.Principal.WellKnownSidType.WinAccountDomainUsersSid" /><see cref="F:System.Security.Principal.WellKnownSidType.WinAccountDomainGuestsSid" /><see cref="F:System.Security.Principal.WellKnownSidType.WinAccountComputersSid" /><see cref="F:System.Security.Principal.WellKnownSidType.WinAccountControllersSid" /><see cref="F:System.Security.Principal.WellKnownSidType.WinAccountCertAdminsSid" /><see cref="F:System.Security.Principal.WellKnownSidType.WinAccountSchemaAdminsSid" /><see cref="F:System.Security.Principal.WellKnownSidType.WinAccountEnterpriseAdminsSid" /><see cref="F:System.Security.Principal.WellKnownSidType.WinAccountPolicyAdminsSid" /><see cref="F:System.Security.Principal.WellKnownSidType.WinAccountRasAndIasServersSid" /></param>
    </member>
    <member name="M:System.Security.Principal.SecurityIdentifier.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Principal.SecurityIdentifier" /> class by using the specified security identifier (SID) in Security Descriptor Definition Language (SDDL) format.</summary>
      <param name="sddlForm">SDDL string for the SID used to created the <see cref="T:System.Security.Principal.SecurityIdentifier" /> object.</param>
    </member>
    <member name="P:System.Security.Principal.SecurityIdentifier.AccountDomainSid">
      <summary>Returns the account domain security identifier (SID) portion from the SID represented by the <see cref="T:System.Security.Principal.SecurityIdentifier" /> object if the SID represents a Windows account SID. If the SID does not represent a Windows account SID, this property returns <see cref="T:System.ArgumentNullException" />.</summary>
      <returns>The account domain SID portion from the SID represented by the <see cref="T:System.Security.Principal.SecurityIdentifier" /> object if the SID represents a Windows account SID; otherwise, it returns <see cref="T:System.ArgumentNullException" />.</returns>
    </member>
    <member name="P:System.Security.Principal.SecurityIdentifier.BinaryLength">
      <summary>Returns the length, in bytes, of the security identifier (SID) represented by the <see cref="T:System.Security.Principal.SecurityIdentifier" /> object.</summary>
      <returns>The length, in bytes, of the SID represented by the <see cref="T:System.Security.Principal.SecurityIdentifier" /> object.</returns>
    </member>
    <member name="M:System.Security.Principal.SecurityIdentifier.CompareTo(System.Security.Principal.SecurityIdentifier)">
      <summary>Compares the current <see cref="T:System.Security.Principal.SecurityIdentifier" /> object with the specified <see cref="T:System.Security.Principal.SecurityIdentifier" /> object.</summary>
      <returns>A signed number indicating the relative values of this instance and <paramref name="sid" />.Return Value Description Less than zero This instance is less than <paramref name="sid" />. Zero This instance is equal to <paramref name="sid" />. Greater than zero This instance is greater than <paramref name="sid" />. </returns>
      <param name="sid">The <see cref="T:System.Security.Principal.SecurityIdentifier" /> object with which to compare the current <see cref="T:System.Security.Principal.SecurityIdentifier" /> object.</param>
    </member>
    <member name="M:System.Security.Principal.SecurityIdentifier.Equals(System.Object)">
      <summary>Returns a value that indicates whether this <see cref="T:System.Security.Principal.SecurityIdentifier" /> object is equal to a specified object.</summary>
      <returns>true if <paramref name="o" /> is an object with the same underlying type and value as this <see cref="T:System.Security.Principal.SecurityIdentifier" /> object; otherwise, false.</returns>
      <param name="o">An object to compare with this <see cref="T:System.Security.Principal.SecurityIdentifier" /> object, or null.</param>
    </member>
    <member name="M:System.Security.Principal.SecurityIdentifier.Equals(System.Security.Principal.SecurityIdentifier)">
      <summary>Indicates whether the specified <see cref="T:System.Security.Principal.SecurityIdentifier" /> object is equal to the current <see cref="T:System.Security.Principal.SecurityIdentifier" /> object.</summary>
      <returns>true if the value of <paramref name="sid" /> is equal to the value of the current <see cref="T:System.Security.Principal.SecurityIdentifier" /> object.</returns>
      <param name="sid">The <see cref="T:System.Security.Principal.SecurityIdentifier" /> object to compare.</param>
    </member>
    <member name="M:System.Security.Principal.SecurityIdentifier.GetBinaryForm(System.Byte[],System.Int32)">
      <summary>Copies the binary representation of the specified security identifier (SID) represented by the <see cref="T:System.Security.Principal.SecurityIdentifier" /> class to a byte array.</summary>
      <param name="binaryForm">The byte array to receive the copied SID.</param>
      <param name="offset">The byte offset to use as the starting index in <paramref name="binaryForm" />. </param>
    </member>
    <member name="M:System.Security.Principal.SecurityIdentifier.GetHashCode">
      <summary>Serves as a hash function for the current <see cref="T:System.Security.Principal.SecurityIdentifier" /> object. The <see cref="M:System.Security.Principal.SecurityIdentifier.GetHashCode" /> method is suitable for hashing algorithms and data structures like a hash table.</summary>
      <returns>A hash value for the current <see cref="T:System.Security.Principal.SecurityIdentifier" /> object.</returns>
    </member>
    <member name="M:System.Security.Principal.SecurityIdentifier.IsAccountSid">
      <summary>Returns a value that indicates whether the security identifier (SID) represented by this <see cref="T:System.Security.Principal.SecurityIdentifier" /> object is a valid Windows account SID.</summary>
      <returns>true if the SID represented by this <see cref="T:System.Security.Principal.SecurityIdentifier" /> object is a valid Windows account SID; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Principal.SecurityIdentifier.IsEqualDomainSid(System.Security.Principal.SecurityIdentifier)">
      <summary>Returns a value that indicates whether the security identifier (SID) represented by this <see cref="T:System.Security.Principal.SecurityIdentifier" /> object is from the same domain as the specified SID.</summary>
      <returns>true if the SID represented by this <see cref="T:System.Security.Principal.SecurityIdentifier" /> object is in the same domain as the <paramref name="sid" /> SID; otherwise, false.</returns>
      <param name="sid">The SID to compare with this <see cref="T:System.Security.Principal.SecurityIdentifier" /> object.</param>
    </member>
    <member name="M:System.Security.Principal.SecurityIdentifier.IsValidTargetType(System.Type)">
      <summary>Returns a value that indicates whether the specified type is a valid translation type for the <see cref="T:System.Security.Principal.SecurityIdentifier" /> class.</summary>
      <returns>true if <paramref name="targetType" /> is a valid translation type for the <see cref="T:System.Security.Principal.SecurityIdentifier" /> class; otherwise, false.</returns>
      <param name="targetType">The type being queried for validity to serve as a conversion from <see cref="T:System.Security.Principal.SecurityIdentifier" />. The following target types are valid:<see cref="T:System.Security.Principal.NTAccount" /><see cref="T:System.Security.Principal.SecurityIdentifier" /></param>
    </member>
    <member name="M:System.Security.Principal.SecurityIdentifier.IsWellKnown(System.Security.Principal.WellKnownSidType)">
      <summary>Returns a value that indicates whether the <see cref="T:System.Security.Principal.SecurityIdentifier" /> object matches the specified well known security identifier (SID) type. </summary>
      <returns>true if <paramref name="type" /> is the SID type for the <see cref="T:System.Security.Principal.SecurityIdentifier" /> object; otherwise, false.</returns>
      <param name="type">A <see cref="T:System.Security.Principal.WellKnownSidType" /> value to compare with the <see cref="T:System.Security.Principal.SecurityIdentifier" /> object.</param>
    </member>
    <member name="F:System.Security.Principal.SecurityIdentifier.MaxBinaryLength">
      <summary>Returns the maximum size, in bytes, of the binary representation of the security identifier.</summary>
      <returns>The maximum size, in bytes, of the binary representation of the security identifier.</returns>
    </member>
    <member name="F:System.Security.Principal.SecurityIdentifier.MinBinaryLength">
      <summary>Returns the minimum size, in bytes, of the binary representation of the security identifier.</summary>
      <returns>The minimum size, in bytes, of the binary representation of the security identifier.</returns>
    </member>
    <member name="M:System.Security.Principal.SecurityIdentifier.op_Equality(System.Security.Principal.SecurityIdentifier,System.Security.Principal.SecurityIdentifier)">
      <summary>Compares two <see cref="T:System.Security.Principal.SecurityIdentifier" /> objects to determine whether they are equal. They are considered equal if they have the same canonical representation as the one returned by the <see cref="P:System.Security.Principal.SecurityIdentifier.Value" /> property or if they are both null. </summary>
      <returns>true if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, false.</returns>
      <param name="left">The left <see cref="T:System.Security.Principal.SecurityIdentifier" /> operand to use for the equality comparison. This parameter can be null.</param>
      <param name="right">The right <see cref="T:System.Security.Principal.SecurityIdentifier" /> operand to use for the equality comparison. This parameter can be null.</param>
    </member>
    <member name="M:System.Security.Principal.SecurityIdentifier.op_Inequality(System.Security.Principal.SecurityIdentifier,System.Security.Principal.SecurityIdentifier)">
      <summary>Compares two <see cref="T:System.Security.Principal.SecurityIdentifier" /> objects to determine whether they are not equal. They are considered not equal if they have different canonical name representations than the one returned by the <see cref="P:System.Security.Principal.SecurityIdentifier.Value" /> property or if one of the objects is null and the other is not.</summary>
      <returns>true if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, false.</returns>
      <param name="left">The left <see cref="T:System.Security.Principal.SecurityIdentifier" />  operand to use for the inequality comparison. This parameter can be null.</param>
      <param name="right">The right <see cref="T:System.Security.Principal.SecurityIdentifier" />  operand to use for the inequality comparison. This parameter can be null.</param>
    </member>
    <member name="M:System.Security.Principal.SecurityIdentifier.ToString">
      <summary>Returns the security identifier (SID), in Security Descriptor Definition Language (SDDL) format, for the account represented by the <see cref="T:System.Security.Principal.SecurityIdentifier" /> object. An example of the SDDL format is S-1-5-9. </summary>
      <returns>The SID, in SDDL format, for the account represented by the <see cref="T:System.Security.Principal.SecurityIdentifier" /> object.</returns>
    </member>
    <member name="M:System.Security.Principal.SecurityIdentifier.Translate(System.Type)">
      <summary>Translates the account name represented by the <see cref="T:System.Security.Principal.SecurityIdentifier" /> object into another <see cref="T:System.Security.Principal.IdentityReference" />-derived type.</summary>
      <returns>The converted identity.</returns>
      <param name="targetType">The target type for the conversion from <see cref="T:System.Security.Principal.SecurityIdentifier" />. The target type must be a type that is considered valid by the <see cref="M:System.Security.Principal.SecurityIdentifier.IsValidTargetType(System.Type)" /> method.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
      </PermissionSet>
    </member>
    <member name="P:System.Security.Principal.SecurityIdentifier.Value">
      <summary>Returns an uppercase Security Descriptor Definition Language (SDDL) string for the security identifier (SID) represented by this <see cref="T:System.Security.Principal.SecurityIdentifier" /> object.</summary>
      <returns>An uppercase SDDL string for the SID represented by the <see cref="T:System.Security.Principal.SecurityIdentifier" /> object.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="T:System.Security.Principal.TokenAccessLevels">
      <summary>Defines the privileges of the user account associated with the access token. </summary>
    </member>
    <member name="F:System.Security.Principal.TokenAccessLevels.AssignPrimary">
      <summary>The user can attach a primary token to a process.</summary>
    </member>
    <member name="F:System.Security.Principal.TokenAccessLevels.Duplicate">
      <summary>The user can duplicate the token.</summary>
    </member>
    <member name="F:System.Security.Principal.TokenAccessLevels.Impersonate">
      <summary>The user can impersonate a client.</summary>
    </member>
    <member name="F:System.Security.Principal.TokenAccessLevels.Query">
      <summary>The user can query the token.</summary>
    </member>
    <member name="F:System.Security.Principal.TokenAccessLevels.QuerySource">
      <summary>The user can query the source of the token.</summary>
    </member>
    <member name="F:System.Security.Principal.TokenAccessLevels.AdjustPrivileges">
      <summary>The user can enable or disable privileges in the token.</summary>
    </member>
    <member name="F:System.Security.Principal.TokenAccessLevels.AdjustGroups">
      <summary>The user can change the attributes of the groups in the token.</summary>
    </member>
    <member name="F:System.Security.Principal.TokenAccessLevels.AdjustDefault">
      <summary>The user can change the default owner, primary group, or discretionary access control list (DACL) of the token.</summary>
    </member>
    <member name="F:System.Security.Principal.TokenAccessLevels.AdjustSessionId">
      <summary>The user can adjust the session identifier of the token.</summary>
    </member>
    <member name="F:System.Security.Principal.TokenAccessLevels.Read">
      <summary>The user has standard read rights and the <see cref="F:System.Security.Principal.TokenAccessLevels.Query" /> privilege for the token.</summary>
    </member>
    <member name="F:System.Security.Principal.TokenAccessLevels.Write">
      <summary>The user has standard write rights and the <see cref="F:System.Security.Principal.TokenAccessLevels.AdjustPrivileges,F:System.Security.Principal.TokenAccessLevels.AdjustGroups" />, and <see cref="F:System.Security.Principal.TokenAccessLevels.AdjustDefault" /> privileges for the token.</summary>
    </member>
    <member name="F:System.Security.Principal.TokenAccessLevels.AllAccess">
      <summary>The user has all possible access to the token.</summary>
    </member>
    <member name="F:System.Security.Principal.TokenAccessLevels.MaximumAllowed">
      <summary>The maximum value that can be assigned for the <see cref="T:System.Security.Principal.TokenAccessLevels" /> enumeration.</summary>
    </member>
    <member name="T:System.Security.Principal.TokenImpersonationLevel">
      <summary>Defines security impersonation levels. Security impersonation levels govern the degree to which a server process can act on behalf of a client process.</summary>
    </member>
    <member name="F:System.Security.Principal.TokenImpersonationLevel.None">
      <summary>An impersonation level is not assigned.</summary>
    </member>
    <member name="F:System.Security.Principal.TokenImpersonationLevel.Anonymous">
      <summary>The server process cannot obtain identification information about the client, and it cannot impersonate the client.</summary>
    </member>
    <member name="F:System.Security.Principal.TokenImpersonationLevel.Identification">
      <summary>The server process can obtain information about the client, such as security identifiers and privileges, but it cannot impersonate the client. This is useful for servers that export their own objects, for example, database products that export tables and views. Using the retrieved client-security information, the server can make access-validation decisions without being able to use other services that are using the client's security context.</summary>
    </member>
    <member name="F:System.Security.Principal.TokenImpersonationLevel.Impersonation">
      <summary>The server process can impersonate the client's security context on its local system. The server cannot impersonate the client on remote systems.</summary>
    </member>
    <member name="F:System.Security.Principal.TokenImpersonationLevel.Delegation">
      <summary>The server process can impersonate the client's security context on remote systems.</summary>
    </member>
    <member name="T:System.Security.Principal.WellKnownSidType">
      <summary>Defines a set of commonly used security identifiers (SIDs).</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.NullSid">
      <summary>Indicates a null SID.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.WorldSid">
      <summary>Indicates a SID that matches everyone.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.LocalSid">
      <summary>Indicates a local SID.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.CreatorOwnerSid">
      <summary>Indicates a SID that matches the owner or creator of an object.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.CreatorGroupSid">
      <summary>Indicates a SID that matches the creator group of an object.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.CreatorOwnerServerSid">
      <summary>Indicates a creator owner server SID.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.CreatorGroupServerSid">
      <summary>Indicates a creator group server SID.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.NTAuthoritySid">
      <summary>Indicates a SID for the Windows NT authority.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.DialupSid">
      <summary>Indicates a SID for a dial-up account.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.NetworkSid">
      <summary>Indicates a SID for a network account. This SID is added to the process of a token when it logs on across a network.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.BatchSid">
      <summary>Indicates a SID for a batch process. This SID is added to the process of a token when it logs on as a batch job.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.InteractiveSid">
      <summary>Indicates a SID for an interactive account. This SID is added to the process of a token when it logs on interactively.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.ServiceSid">
      <summary>Indicates a SID for a service. This SID is added to the process of a token when it logs on as a service.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.AnonymousSid">
      <summary>Indicates a SID for the anonymous account.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.ProxySid">
      <summary>Indicates a proxy SID.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.EnterpriseControllersSid">
      <summary>Indicates a SID for an enterprise controller.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.SelfSid">
      <summary>Indicates a SID for self.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.AuthenticatedUserSid">
      <summary>Indicates a SID for an authenticated user.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.RestrictedCodeSid">
      <summary>Indicates a SID for restricted code.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.TerminalServerSid">
      <summary>Indicates a SID that matches a terminal server account.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.RemoteLogonIdSid">
      <summary>Indicates a SID that matches remote logons.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.LogonIdsSid">
      <summary>Indicates a SID that matches logon IDs.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.LocalSystemSid">
      <summary>Indicates a SID that matches the local system.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.LocalServiceSid">
      <summary>Indicates a SID that matches a local service.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.NetworkServiceSid">
      <summary>Indicates a SID that matches a network service.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.BuiltinDomainSid">
      <summary>Indicates a SID that matches the domain account.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.BuiltinAdministratorsSid">
      <summary>Indicates a SID that matches the administrator account.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.BuiltinUsersSid">
      <summary>Indicates a SID that matches built-in user accounts.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.BuiltinGuestsSid">
      <summary>Indicates a SID that matches the guest account.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.BuiltinPowerUsersSid">
      <summary>Indicates a SID that matches the power users group.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.BuiltinAccountOperatorsSid">
      <summary>Indicates a SID that matches the account operators account.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.BuiltinSystemOperatorsSid">
      <summary>Indicates a SID that matches the system operators group.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.BuiltinPrintOperatorsSid">
      <summary>Indicates a SID that matches the print operators group.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.BuiltinBackupOperatorsSid">
      <summary>Indicates a SID that matches the backup operators group.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.BuiltinReplicatorSid">
      <summary>Indicates a SID that matches the replicator account.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.BuiltinPreWindows2000CompatibleAccessSid">
      <summary>Indicates a SID that matches pre-Windows 2000 compatible accounts.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.BuiltinRemoteDesktopUsersSid">
      <summary>Indicates a SID that matches remote desktop users.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.BuiltinNetworkConfigurationOperatorsSid">
      <summary>Indicates a SID that matches the network operators group.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.AccountAdministratorSid">
      <summary>Indicates a SID that matches the account administrators group.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.AccountGuestSid">
      <summary>Indicates a SID that matches the account guest group.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.AccountKrbtgtSid">
      <summary>Indicates a SID that matches the account Kerberos target group.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.AccountDomainAdminsSid">
      <summary>Indicates a SID that matches the account domain administrator group.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.AccountDomainUsersSid">
      <summary>Indicates a SID that matches the account domain users group.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.AccountDomainGuestsSid">
      <summary>Indicates a SID that matches the account domain guests group.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.AccountComputersSid">
      <summary>Indicates a SID that matches the account computer group.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.AccountControllersSid">
      <summary>Indicates a SID that matches the account controller group.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.AccountCertAdminsSid">
      <summary>Indicates a SID that matches the certificate administrators group.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.AccountSchemaAdminsSid">
      <summary>Indicates a SID that matches the schema administrators group.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.AccountEnterpriseAdminsSid">
      <summary>Indicates a SID that matches the enterprise administrators group.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.AccountPolicyAdminsSid">
      <summary>Indicates a SID that matches the policy administrators group.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.AccountRasAndIasServersSid">
      <summary>Indicates a SID that matches the RAS and IAS server account.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.NtlmAuthenticationSid">
      <summary>Indicates a SID present when the Microsoft NTLM authentication package authenticated the client.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.DigestAuthenticationSid">
      <summary>Indicates a SID present when the Microsoft Digest authentication package authenticated the client.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.SChannelAuthenticationSid">
      <summary>Indicates a SID present when the Secure Channel (SSL/TLS) authentication package authenticated the client.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.ThisOrganizationSid">
      <summary>Indicates a SID present when the user authenticated from within the forest or across a trust that does not have the selective authentication option enabled. If this SID is present, then <see cref="F:System.Security.Principal.WellKnownSidType.OtherOrganizationSid" /> cannot be present.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.OtherOrganizationSid">
      <summary>Indicates a SID present when the user authenticated across a forest with the selective authentication option enabled. If this SID is present, then <see cref="F:System.Security.Principal.WellKnownSidType.ThisOrganizationSid" /> cannot be present.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.BuiltinIncomingForestTrustBuildersSid">
      <summary>Indicates a SID that allows a user to create incoming forest trusts. It is added to the token of users who are a member of the Incoming Forest Trust Builders built-in group in the root domain of the forest.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.BuiltinPerformanceMonitoringUsersSid">
      <summary>Indicates a SID that matches the group of users that have remote access to schedule logging of performance counters on this computer.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.BuiltinPerformanceLoggingUsersSid">
      <summary>Indicates a SID that matches the group of users that have remote access to monitor the computer.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.BuiltinAuthorizationAccessSid">
      <summary>Indicates a SID that matches the Windows Authorization Access group.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.WinBuiltinTerminalServerLicenseServersSid">
      <summary>Indicates a SID is present in a server that can issue Terminal Server licenses.</summary>
    </member>
    <member name="F:System.Security.Principal.WellKnownSidType.MaxDefined">
      <summary>Indicates the maximum defined SID in the <see cref="T:System.Security.Principal.WellKnownSidType" /> enumeration.</summary>
    </member>
    <member name="T:System.Security.Principal.WindowsAccountType">
      <summary>Specifies the type of Windows account used.</summary>
    </member>
    <member name="F:System.Security.Principal.WindowsAccountType.Normal">
      <summary>A normal user account.</summary>
    </member>
    <member name="F:System.Security.Principal.WindowsAccountType.Guest">
      <summary>A Windows guest account.</summary>
    </member>
    <member name="F:System.Security.Principal.WindowsAccountType.System">
      <summary>A Windows system account.</summary>
    </member>
    <member name="F:System.Security.Principal.WindowsAccountType.Anonymous">
      <summary>An anonymous account.</summary>
    </member>
    <member name="T:System.Security.Principal.WindowsBuiltInRole">
      <summary>Specifies common roles to be used with <see cref="M:System.Security.Principal.WindowsPrincipal.IsInRole(System.String)" />.</summary>
    </member>
    <member name="F:System.Security.Principal.WindowsBuiltInRole.Administrator">
      <summary>Administrators have complete and unrestricted access to the computer or domain.</summary>
    </member>
    <member name="F:System.Security.Principal.WindowsBuiltInRole.User">
      <summary>Users are prevented from making accidental or intentional system-wide changes. Thus, users can run certified applications, but not most legacy applications.</summary>
    </member>
    <member name="F:System.Security.Principal.WindowsBuiltInRole.Guest">
      <summary>Guests are more restricted than users.</summary>
    </member>
    <member name="F:System.Security.Principal.WindowsBuiltInRole.PowerUser">
      <summary>Power users possess most administrative permissions with some restrictions. Thus, power users can run legacy applications, in addition to certified applications.</summary>
    </member>
    <member name="F:System.Security.Principal.WindowsBuiltInRole.AccountOperator">
      <summary>Account operators manage the user accounts on a computer or domain.</summary>
    </member>
    <member name="F:System.Security.Principal.WindowsBuiltInRole.SystemOperator">
      <summary>System operators manage a particular computer.</summary>
    </member>
    <member name="F:System.Security.Principal.WindowsBuiltInRole.PrintOperator">
      <summary>Print operators can take control of a printer.</summary>
    </member>
    <member name="F:System.Security.Principal.WindowsBuiltInRole.BackupOperator">
      <summary>Backup operators can override security restrictions for the sole purpose of backing up or restoring files.</summary>
    </member>
    <member name="F:System.Security.Principal.WindowsBuiltInRole.Replicator">
      <summary>Replicators support file replication in a domain.</summary>
    </member>
    <member name="T:System.Security.Principal.WindowsIdentity">
      <summary>Represents a Windows user.</summary>
    </member>
    <member name="M:System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Principal.WindowsIdentity" /> class for the user represented by the specified Windows account token.</summary>
      <param name="userToken">The account token for the user on whose behalf the code is running. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="userToken" /> is 0.-or-<paramref name="userToken" /> is duplicated and invalid for impersonation.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the correct permissions. -or-A Win32 error occurred.</exception>
    </member>
    <member name="M:System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Principal.WindowsIdentity" /> class for the user represented by the specified Windows account token and the specified authentication type.</summary>
      <param name="userToken">The account token for the user on whose behalf the code is running. </param>
      <param name="type">(Informational use only.) The type of authentication used to identify the user. For more information, see Remarks.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="userToken" /> is 0.-or-<paramref name="userToken" /> is duplicated and invalid for impersonation.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the correct permissions. -or-A Win32 error occurred.</exception>
    </member>
    <member name="M:System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String,System.Security.Principal.WindowsAccountType)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Principal.WindowsIdentity" /> class for the user represented by the specified Windows account token, the specified authentication type, and the specified Windows account type.</summary>
      <param name="userToken">The account token for the user on whose behalf the code is running. </param>
      <param name="type">(Informational use only.) The type of authentication used to identify the user. For more information, see Remarks.</param>
      <param name="acctType">One of the <see cref="T:System.Security.Principal.WindowsAccountType" /> values. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="userToken" /> is 0.-or-<paramref name="userToken" /> is duplicated and invalid for impersonation.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the correct permissions. -or-A Win32 error occurred.</exception>
    </member>
    <member name="M:System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String,System.Security.Principal.WindowsAccountType,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Principal.WindowsIdentity" /> class for the user represented by the specified Windows account token, the specified authentication type, the specified Windows account type, and the specified authentication status.</summary>
      <param name="userToken">The account token for the user on whose behalf the code is running. </param>
      <param name="type">(Informational use only.) The type of authentication used to identify the user. For more information, see Remarks.</param>
      <param name="acctType">One of the <see cref="T:System.Security.Principal.WindowsAccountType" /> values. </param>
      <param name="isAuthenticated">true to indicate that the user is authenticated; otherwise, false. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="userToken" /> is 0.-or-<paramref name="userToken" /> is duplicated and invalid for impersonation.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the correct permissions. -or-A Win32 error occurred.</exception>
    </member>
    <member name="M:System.Security.Principal.WindowsIdentity.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Principal.WindowsIdentity" /> class for the user represented by information in a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> stream.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> containing the account information for the user. </param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> that indicates the stream characteristics. </param>
      <exception cref="T:System.NotSupportedException">A <see cref="T:System.Security.Principal.WindowsIdentity" /> cannot be serialized across processes. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the correct permissions. -or-A Win32 error occurred.</exception>
    </member>
    <member name="M:System.Security.Principal.WindowsIdentity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Principal.WindowsIdentity" /> class for the user represented by the specified User Principal Name (UPN).</summary>
      <param name="sUserPrincipalName">The UPN for the user on whose behalf the code is running. </param>
      <exception cref="T:System.UnauthorizedAccessException">Windows returned the Windows NT status code STATUS_ACCESS_DENIED.</exception>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the correct permissions. -or-The computer is not attached to a Windows 2003 or later domain.-or-The computer is not running Windows 2003 or later.-or-The user is not a member of the domain the computer is attached to.</exception>
    </member>
    <member name="M:System.Security.Principal.WindowsIdentity.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Principal.WindowsIdentity" /> class for the user represented by the specified User Principal Name (UPN) and the specified authentication type.</summary>
      <param name="sUserPrincipalName">The UPN for the user on whose behalf the code is running. </param>
      <param name="type">(Informational use only.) The type of authentication used to identify the user. For more information, see Remarks.</param>
      <exception cref="T:System.UnauthorizedAccessException">Windows returned the Windows NT status code STATUS_ACCESS_DENIED.</exception>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the correct permissions. -or-The computer is not attached to a Windows 2003 or later domain.-or-The computer is not running Windows 2003 or later.-or-The user is not a member of the domain the computer is attached to.</exception>
    </member>
    <member name="P:System.Security.Principal.WindowsIdentity.AuthenticationType">
      <summary>Gets the type of authentication used to identify the user.</summary>
      <returns>The type of authentication used to identify the user.</returns>
      <exception cref="T:System.UnauthorizedAccessException">Windows returned the Windows NT status code STATUS_ACCESS_DENIED.</exception>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the correct permissions. -or-The computer is not attached to a Windows 2003 or later domain.-or-The computer is not running Windows 2003 or later.-or-The user is not a member of the domain the computer is attached to.</exception>
    </member>
    <member name="M:System.Security.Principal.WindowsIdentity.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Security.Principal.WindowsIdentity" />. </summary>
    </member>
    <member name="M:System.Security.Principal.WindowsIdentity.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Security.Principal.WindowsIdentity" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.Security.Principal.WindowsIdentity.GetAnonymous">
      <summary>Returns a <see cref="T:System.Security.Principal.WindowsIdentity" /> object that represents an anonymous user.</summary>
      <returns>A <see cref="T:System.Security.Principal.WindowsIdentity" /> object that represents an anonymous user.</returns>
    </member>
    <member name="M:System.Security.Principal.WindowsIdentity.GetCurrent">
      <summary>Returns a <see cref="T:System.Security.Principal.WindowsIdentity" /> object that represents the current Windows user.</summary>
      <returns>A <see cref="T:System.Security.Principal.WindowsIdentity" /> object that represents the current user.</returns>
      <exception cref="T:System.Security.SecurityException">The caller does not have the correct permissions. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlPrincipal" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Principal.WindowsIdentity.GetCurrent(System.Boolean)">
      <summary>Returns a <see cref="T:System.Security.Principal.WindowsIdentity" /> object that represents the Windows identity for either the thread or the process, depending on the value of the <paramref name="ifImpersonating" /> parameter.</summary>
      <returns>A <see cref="T:System.Security.Principal.WindowsIdentity" /> object that represents a Windows user.</returns>
      <param name="ifImpersonating">true to return the <see cref="T:System.Security.Principal.WindowsIdentity" /> only if the thread is currently impersonating; false to return the <see cref="T:System.Security.Principal.WindowsIdentity" />   of the thread if it is impersonating or the <see cref="T:System.Security.Principal.WindowsIdentity" /> of the process if the thread is not currently impersonating.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlPrincipal" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Principal.WindowsIdentity.GetCurrent(System.Security.Principal.TokenAccessLevels)">
      <summary>Returns a <see cref="T:System.Security.Principal.WindowsIdentity" /> object that represents the current Windows user, using the specified desired token access level.</summary>
      <returns>A <see cref="T:System.Security.Principal.WindowsIdentity" /> object that represents the current user.</returns>
      <param name="desiredAccess">A bitwise combination of the <see cref="T:System.Security.Principal.TokenAccessLevels" /> values. </param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlPrincipal" />
      </PermissionSet>
    </member>
    <member name="P:System.Security.Principal.WindowsIdentity.Groups">
      <summary>Gets the groups the current Windows user belongs to.</summary>
      <returns>An <see cref="T:System.Security.Principal.IdentityReferenceCollection" /> object representing the groups the current Windows user belongs to.</returns>
    </member>
    <member name="M:System.Security.Principal.WindowsIdentity.Impersonate">
      <summary>Impersonates the user represented by the <see cref="T:System.Security.Principal.WindowsIdentity" /> object.</summary>
      <returns>A <see cref="T:System.Security.Principal.WindowsImpersonationContext" /> object that represents the Windows user prior to impersonation; this can be used to revert to the original user's context.</returns>
      <exception cref="T:System.InvalidOperationException">An anonymous identity attempted to perform an impersonation.</exception>
      <exception cref="T:System.Security.SecurityException">A Win32 error occurred.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlPrincipal" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Principal.WindowsIdentity.Impersonate(System.IntPtr)">
      <summary>Impersonates the user represented by the specified user token.</summary>
      <returns>A <see cref="T:System.Security.Principal.WindowsImpersonationContext" /> object that represents the Windows user prior to impersonation; this object can be used to revert to the original user's context.</returns>
      <param name="userToken">The handle of a Windows account token. This token is usually retrieved through a call to unmanaged code, such as a call to the Win32 API LogonUser function. For more information on calls to unmanaged code, see Consuming Unmanaged DLL Functions. </param>
      <exception cref="T:System.UnauthorizedAccessException">Windows returned the Windows NT status code STATUS_ACCESS_DENIED.</exception>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the correct permissions. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlPrincipal" />
      </PermissionSet>
    </member>
    <member name="P:System.Security.Principal.WindowsIdentity.ImpersonationLevel">
      <summary>Gets the impersonation level for the user.</summary>
      <returns>One of the <see cref="T:System.Management.ImpersonationLevel" /> values. </returns>
    </member>
    <member name="P:System.Security.Principal.WindowsIdentity.IsAnonymous">
      <summary>Gets a value indicating whether the user account is identified as an anonymous account by the system.</summary>
      <returns>true if the user account is an anonymous account; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Principal.WindowsIdentity.IsAuthenticated">
      <summary>Gets a value indicating whether the user has been authenticated by Windows.</summary>
      <returns>true if the user was authenticated; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Principal.WindowsIdentity.IsGuest">
      <summary>Gets a value indicating whether the user account is identified as a <see cref="F:System.Security.Principal.WindowsAccountType.Guest" /> account by the system.</summary>
      <returns>true if the user account is a <see cref="F:System.Security.Principal.WindowsAccountType.Guest" /> account; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Principal.WindowsIdentity.IsSystem">
      <summary>Gets a value indicating whether the user account is identified as a <see cref="F:System.Security.Principal.WindowsAccountType.System" /> account by the system.</summary>
      <returns>true if the user account is a <see cref="F:System.Security.Principal.WindowsAccountType.System" /> account; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Principal.WindowsIdentity.Name">
      <summary>Gets the user's Windows logon name.</summary>
      <returns>The Windows logon name of the user on whose behalf the code is being run.</returns>
    </member>
    <member name="P:System.Security.Principal.WindowsIdentity.Owner">
      <summary>Gets the security identifier (SID) for the token owner.</summary>
      <returns>A <see cref="T:System.Security.Principal.SecurityIdentifier" /> object for the token owner.</returns>
    </member>
    <member name="M:System.Security.Principal.WindowsIdentity.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface and is called back by the deserialization event when deserialization is complete.</summary>
      <param name="sender">The source of the deserialization event. </param>
    </member>
    <member name="M:System.Security.Principal.WindowsIdentity.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the logical context information needed to recreate an instance of this execution context.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object containing the information required to serialize the <see cref="T:System.Collections.Hashtable" />. </param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object containing the source and destination of the serialized stream associated with the <see cref="T:System.Collections.Hashtable" />. </param>
    </member>
    <member name="P:System.Security.Principal.WindowsIdentity.Token">
      <summary>Gets the Windows account token for the user.</summary>
      <returns>The handle of the access token associated with the current execution thread.</returns>
    </member>
    <member name="P:System.Security.Principal.WindowsIdentity.User">
      <summary>Gets the security identifier (SID) for the user.</summary>
      <returns>A <see cref="T:System.Security.Principal.SecurityIdentifier" /> object for the user.</returns>
    </member>
    <member name="T:System.Security.Principal.WindowsImpersonationContext">
      <summary>Represents the Windows user prior to an impersonation operation.</summary>
    </member>
    <member name="M:System.Security.Principal.WindowsImpersonationContext.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Security.Principal.WindowsImpersonationContext" />.</summary>
    </member>
    <member name="M:System.Security.Principal.WindowsImpersonationContext.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Security.Principal.WindowsImpersonationContext" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.Security.Principal.WindowsImpersonationContext.Undo">
      <summary>Reverts the user context to the Windows user represented by this object.</summary>
      <exception cref="T:System.Security.SecurityException">An attempt is made to use this method for any purpose other than to revert identity to self. </exception>
    </member>
    <member name="T:System.Security.Principal.WindowsPrincipal">
      <summary>Allows code to check the Windows group membership of a Windows user.</summary>
    </member>
    <member name="M:System.Security.Principal.WindowsPrincipal.#ctor(System.Security.Principal.WindowsIdentity)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Principal.WindowsPrincipal" /> class by using the specified <see cref="T:System.Security.Principal.WindowsIdentity" /> object.</summary>
      <param name="ntIdentity">The <see cref="T:System.Security.Principal.WindowsIdentity" /> object from which to construct the new instance of <see cref="T:System.Security.Principal.WindowsPrincipal" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ntIdentity" /> is null. </exception>
    </member>
    <member name="P:System.Security.Principal.WindowsPrincipal.Identity">
      <summary>Gets the identity of the current principal.</summary>
      <returns>The <see cref="T:System.Security.Principal.WindowsIdentity" /> object of the current principal.</returns>
    </member>
    <member name="M:System.Security.Principal.WindowsPrincipal.IsInRole(System.Int32)">
      <summary>Determines whether the current principal belongs to the Windows user group with the specified relative identifier (RID).</summary>
      <returns>true if the current principal is a member of the specified Windows user group, that is, in a particular role; otherwise, false.</returns>
      <param name="rid">The RID of the Windows user group in which to check for the principal’s membership status. </param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Principal.WindowsPrincipal.IsInRole(System.Security.Principal.SecurityIdentifier)">
      <summary>Determines whether the current principal belongs to the Windows user group with the specified security identifier (SID).</summary>
      <returns>true if the current principal is a member of the specified Windows user group; otherwise, false.</returns>
      <param name="sid">A <see cref="T:System.Security.Principal.SecurityIdentifier" />  that uniquely identifies a Windows user group.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sid" /> is null.</exception>
      <exception cref="T:System.Security.SecurityException">Windows returned a Win32 error.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Principal.WindowsPrincipal.IsInRole(System.Security.Principal.WindowsBuiltInRole)">
      <summary>Determines whether the current principal belongs to the Windows user group with the specified <see cref="T:System.Security.Principal.WindowsBuiltInRole" />.</summary>
      <returns>true if the current principal is a member of the specified Windows user group; otherwise, false.</returns>
      <param name="role">One of the <see cref="T:System.Security.Principal.WindowsBuiltInRole" /> values. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="role" /> is not a valid <see cref="T:System.Security.Principal.WindowsBuiltInRole" /> value.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Principal.WindowsPrincipal.IsInRole(System.String)">
      <summary>Determines whether the current principal belongs to the Windows user group with the specified name.</summary>
      <returns>true if the current principal is a member of the specified Windows user group; otherwise, false.</returns>
      <param name="role">The name of the Windows user group for which to check membership. </param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
      </PermissionSet>
    </member>
    <member name="T:System.Text.ASCIIEncoding">
      <summary>Represents an ASCII character encoding of Unicode characters.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.ASCIIEncoding.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.ASCIIEncoding" /> class.</summary>
    </member>
    <member name="M:System.Text.ASCIIEncoding.GetByteCount(System.Char*,System.Int32)">
      <summary>Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</summary>
      <returns>The number of bytes produced by encoding the specified characters.</returns>
      <param name="chars">A pointer to the first character to encode.</param>
      <param name="count">The number of characters to encode.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero.-or- The resulting number of bytes is greater than the maximum number that can be returned as an integer. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
      <summary>Calculates the number of bytes produced by encoding a set of characters from the specified character array.</summary>
      <returns>The number of bytes produced by encoding the specified characters.</returns>
      <param name="chars">The character array containing the set of characters to encode.</param>
      <param name="index">The index of the first character to encode.</param>
      <param name="count">The number of characters to encode.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.-or- <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="chars" />.-or- The resulting number of bytes is greater than the maximum number that can be returned as an integer. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.ASCIIEncoding.GetByteCount(System.String)">
      <summary>Calculates the number of bytes produced by encoding the characters in the specified <see cref="T:System.String" />.</summary>
      <returns>The number of bytes produced by encoding the specified characters.</returns>
      <param name="chars">The <see cref="T:System.String" /> containing the set of characters to encode.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting number of bytes is greater than the maximum number that can be returned as an integer. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.ASCIIEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
      <summary>Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</summary>
      <returns>The actual number of bytes written at the location indicated by <paramref name="bytes" />.</returns>
      <param name="chars">A pointer to the first character to encode.</param>
      <param name="charCount">The number of characters to encode.</param>
      <param name="bytes">A pointer to the location at which to start writing the resulting sequence of bytes.</param>
      <param name="byteCount">The maximum number of bytes to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null.-or- <paramref name="bytes" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> or <paramref name="byteCount" /> is less than zero. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="byteCount" /> is less than the resulting number of bytes. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.ASCIIEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>Encodes a set of characters from the specified character array into the specified byte array.</summary>
      <returns>The actual number of bytes written into <paramref name="bytes" />.</returns>
      <param name="chars">The character array containing the set of characters to encode.</param>
      <param name="charIndex">The index of the first character to encode.</param>
      <param name="charCount">The number of characters to encode.</param>
      <param name="bytes">The byte array to contain the resulting sequence of bytes.</param>
      <param name="byteIndex">The index at which to start writing the resulting sequence of bytes.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null.-or- <paramref name="bytes" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.-or- <paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.-or- <paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>Encodes a set of characters from the specified <see cref="T:System.String" /> into the specified byte array.</summary>
      <returns>The actual number of bytes written into <paramref name="bytes" />.</returns>
      <param name="chars">The <see cref="T:System.String" /> containing the set of characters to encode.</param>
      <param name="charIndex">The index of the first character to encode.</param>
      <param name="charCount">The number of characters to encode.</param>
      <param name="bytes">The byte array to contain the resulting sequence of bytes.</param>
      <param name="byteIndex">The index at which to start writing the resulting sequence of bytes.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null.-or- <paramref name="bytes" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.-or- <paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.-or- <paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.ASCIIEncoding.GetCharCount(System.Byte*,System.Int32)">
      <summary>Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</summary>
      <returns>The number of characters produced by decoding the specified sequence of bytes.</returns>
      <param name="bytes">A pointer to the first byte to decode.</param>
      <param name="count">The number of bytes to decode.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero.-or- The resulting number of bytes is greater than the maximum number that can be returned as an integer. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
      <summary>Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</summary>
      <returns>The number of characters produced by decoding the specified sequence of bytes.</returns>
      <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
      <param name="index">The index of the first byte to decode.</param>
      <param name="count">The number of bytes to decode.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.-or- <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.-or- The resulting number of bytes is greater than the maximum number that can be returned as an integer. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.ASCIIEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
      <summary>Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</summary>
      <returns>The actual number of characters written at the location indicated by <paramref name="chars" />.</returns>
      <param name="bytes">A pointer to the first byte to decode.</param>
      <param name="byteCount">The number of bytes to decode.</param>
      <param name="chars">A pointer to the location at which to start writing the resulting set of characters.</param>
      <param name="charCount">The maximum number of characters to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null.-or- <paramref name="chars" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteCount" /> or <paramref name="charCount" /> is less than zero. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="charCount" /> is less than the resulting number of characters. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.ASCIIEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>Decodes a sequence of bytes from the specified byte array into the specified character array.</summary>
      <returns>The actual number of characters written into <paramref name="chars" />.</returns>
      <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
      <param name="byteIndex">The index of the first byte to decode.</param>
      <param name="byteCount">The number of bytes to decode.</param>
      <param name="chars">The character array to contain the resulting set of characters.</param>
      <param name="charIndex">The index at which to start writing the resulting set of characters.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null.-or- <paramref name="chars" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteIndex" /> or <paramref name="byteCount" /> or <paramref name="charIndex" /> is less than zero.-or- <paramref name="byteindex" /> and <paramref name="byteCount" /> do not denote a valid range in <paramref name="bytes" />.-or- <paramref name="charIndex" /> is not a valid index in <paramref name="chars" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="chars" /> does not have enough capacity from <paramref name="charIndex" /> to the end of the array to accommodate the resulting characters. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.ASCIIEncoding.GetDecoder">
      <summary>Obtains a decoder that converts an ASCII encoded sequence of bytes into a sequence of Unicode characters.</summary>
      <returns>A <see cref="T:System.Text.Decoder" /> that converts an ASCII encoded sequence of bytes into a sequence of Unicode characters.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.ASCIIEncoding.GetEncoder">
      <summary>Obtains an encoder that converts a sequence of Unicode characters into an ASCII encoded sequence of bytes.</summary>
      <returns>An <see cref="T:System.Text.Encoder" /> that converts a sequence of Unicode characters into an ASCII encoded sequence of bytes.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)">
      <summary>Calculates the maximum number of bytes produced by encoding the specified number of characters.</summary>
      <returns>The maximum number of bytes produced by encoding the specified number of characters.</returns>
      <param name="charCount">The number of characters to encode.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> is less than zero.-or- The resulting number of bytes is greater than the maximum number that can be returned as an integer. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)">
      <summary>Calculates the maximum number of characters produced by decoding the specified number of bytes.</summary>
      <returns>The maximum number of characters produced by decoding the specified number of bytes.</returns>
      <param name="byteCount">The number of bytes to decode.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteCount" /> is less than zero.-or- The resulting number of bytes is greater than the maximum number that can be returned as an integer. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.ASCIIEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
      <summary>Decodes a range of bytes from a byte array into a string.</summary>
      <returns>A <see cref="T:System.String" /> containing the results of decoding the specified sequence of bytes.</returns>
      <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
      <param name="byteIndex">The index of the first byte to decode.</param>
      <param name="byteCount">The number of bytes to decode.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.-or- <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Text.ASCIIEncoding.IsSingleByte">
      <summary>Gets a value indicating whether the current encoding uses single-byte code points.</summary>
      <returns>This property is always true.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Text.Decoder">
      <summary>Converts a sequence of encoded bytes into a set of characters.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Decoder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.Decoder" /> class.</summary>
    </member>
    <member name="M:System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
      <summary>Converts a buffer of encoded bytes to Unicode characters and stores the result in another buffer.</summary>
      <param name="bytes">The address of a buffer that contains the byte sequences to convert.</param>
      <param name="byteCount">The number of bytes in <paramref name="bytes" /> to convert.</param>
      <param name="chars">The address of a buffer to store the converted characters.</param>
      <param name="charCount">The maximum number of characters in <paramref name="chars" /> to use in the conversion.</param>
      <param name="flush">true to indicate no further data is to be converted; otherwise, false.</param>
      <param name="bytesUsed">When this method returns, contains the number of bytes that were produced by the conversion. This parameter is passed uninitialized.</param>
      <param name="charsUsed">When this method returns, contains the number of characters from <paramref name="chars" /> that were used in the conversion. This parameter is passed uninitialized.</param>
      <param name="completed">When this method returns, contains true if all the characters specified by <paramref name="byteCount" /> were converted; otherwise, false. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> or <paramref name="bytes" /> is null (Nothing).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> or <paramref name="byteCount" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">The output buffer is too small to contain any of the converted input. The output buffer should be greater than or equal to the size indicated by the <see cref="Overload:System.Text.Decoder.GetCharCount" /> method.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for fuller explanation)-and-<see cref="P:System.Text.Decoder.Fallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
      <summary>Converts an array of encoded bytes to Unicode characters and stores the result in a byte array.</summary>
      <param name="bytes">A byte array to convert.</param>
      <param name="byteIndex">The first element of <paramref name="bytes" /> to convert.</param>
      <param name="byteCount">The number of elements of <paramref name="bytes" /> to convert.</param>
      <param name="chars">An array to store the converted characters.</param>
      <param name="charIndex">The first element of <paramref name="chars" /> in which data is stored.</param>
      <param name="charCount">The maximum number of elements of <paramref name="chars" /> to use in the conversion.</param>
      <param name="flush">true to indicate that no further data is to be converted; otherwise, false.</param>
      <param name="bytesUsed">When this method returns, contains the number of bytes that were used in the conversion. This parameter is passed uninitialized.</param>
      <param name="charsUsed">When this method returns, contains the number of characters from <paramref name="chars" /> that were produced by the conversion. This parameter is passed uninitialized.</param>
      <param name="completed">When this method returns, contains true if all the characters specified by <paramref name="byteCount" /> were converted; otherwise, false. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> or <paramref name="bytes" /> is null (Nothing).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" />, <paramref name="charCount" />, <paramref name="byteIndex" />, or <paramref name="byteCount" /> is less than zero.-or-The length of <paramref name="chars" /> - <paramref name="charIndex" /> is less than <paramref name="charCount" />.-or-The length of <paramref name="bytes" /> - <paramref name="byteIndex" /> is less than <paramref name="byteCount" />.</exception>
      <exception cref="T:System.ArgumentException">The output buffer is too small to contain any of the converted input. The output buffer should be greater than or equal to the size indicated by the <see cref="Overload:System.Text.Decoder.GetCharCount" /> method.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for fuller explanation)-and-<see cref="P:System.Text.Decoder.Fallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Text.Decoder.Fallback">
      <summary>Gets or sets a <see cref="T:System.Text.DecoderFallback" /> object for the current <see cref="T:System.Text.Decoder" /> object.</summary>
      <returns>A <see cref="T:System.Text.DecoderFallback" /> object.</returns>
      <exception cref="T:System.ArgumentNullException">The value in a set operation is null (Nothing).</exception>
      <exception cref="T:System.ArgumentException">A new value cannot be assigned in a set operation because the current <see cref="T:System.Text.DecoderFallbackBuffer" /> object contains data that has not been decoded yet. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Text.Decoder.FallbackBuffer">
      <summary>Gets the <see cref="T:System.Text.DecoderFallbackBuffer" /> object associated with the current <see cref="T:System.Text.Decoder" /> object.</summary>
      <returns>A <see cref="T:System.Text.DecoderFallbackBuffer" /> object.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Decoder.GetCharCount(System.Byte*,System.Int32,System.Boolean)">
      <summary>When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer. A parameter indicates whether to clear the internal state of the decoder after the calculation.</summary>
      <returns>The number of characters produced by decoding the specified sequence of bytes and any bytes in the internal buffer.</returns>
      <param name="bytes">A pointer to the first byte to decode. </param>
      <param name="count">The number of bytes to decode. </param>
      <param name="flush">true to simulate clearing the internal state of the encoder after the calculation; otherwise, false. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null (Nothing in Visual Basic .NET). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for fuller explanation)-and-<see cref="P:System.Text.Decoder.Fallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</summary>
      <returns>The number of characters produced by decoding the specified sequence of bytes and any bytes in the internal buffer.</returns>
      <param name="bytes">The byte array containing the sequence of bytes to decode. </param>
      <param name="index">The index of the first byte to decode. </param>
      <param name="count">The number of bytes to decode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null (Nothing). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.-or- <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for fuller explanation)-and-<see cref="P:System.Text.Decoder.Fallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)">
      <summary>When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array. A parameter indicates whether to clear the internal state of the decoder after the calculation.</summary>
      <returns>The number of characters produced by decoding the specified sequence of bytes and any bytes in the internal buffer.</returns>
      <param name="bytes">The byte array containing the sequence of bytes to decode. </param>
      <param name="index">The index of the first byte to decode. </param>
      <param name="count">The number of bytes to decode. </param>
      <param name="flush">true to simulate clearing the internal state of the encoder after the calculation; otherwise, false. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null (Nothing). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.-or- <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for fuller explanation)-and-<see cref="P:System.Text.Decoder.Fallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)">
      <summary>When overridden in a derived class, decodes a sequence of bytes starting at the specified byte pointer and any bytes in the internal buffer into a set of characters that are stored starting at the specified character pointer. A parameter indicates whether to clear the internal state of the decoder after the conversion.</summary>
      <returns>The actual number of characters written at the location indicated by the <paramref name="chars" /> parameter.</returns>
      <param name="bytes">A pointer to the first byte to decode. </param>
      <param name="byteCount">The number of bytes to decode. </param>
      <param name="chars">A pointer to the location at which to start writing the resulting set of characters. </param>
      <param name="charCount">The maximum number of characters to write. </param>
      <param name="flush">true to clear the internal state of the decoder after the conversion; otherwise, false. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null (Nothing).-or- <paramref name="chars" /> is null (Nothing). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteCount" /> or <paramref name="charCount" /> is less than zero. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="charCount" /> is less than the resulting number of characters. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for fuller explanation)-and-<see cref="P:System.Text.Decoder.Fallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>When overridden in a derived class, decodes a sequence of bytes from the specified byte array and any bytes in the internal buffer into the specified character array.</summary>
      <returns>The actual number of characters written into <paramref name="chars" />.</returns>
      <param name="bytes">The byte array containing the sequence of bytes to decode. </param>
      <param name="byteIndex">The index of the first byte to decode. </param>
      <param name="byteCount">The number of bytes to decode. </param>
      <param name="chars">The character array to contain the resulting set of characters. </param>
      <param name="charIndex">The index at which to start writing the resulting set of characters. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null (Nothing).-or- <paramref name="chars" /> is null (Nothing). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteIndex" /> or <paramref name="byteCount" /> or <paramref name="charIndex" /> is less than zero.-or- <paramref name="byteindex" /> and <paramref name="byteCount" /> do not denote a valid range in <paramref name="bytes" />.-or- <paramref name="charIndex" /> is not a valid index in <paramref name="chars" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="chars" /> does not have enough capacity from <paramref name="charIndex" /> to the end of the array to accommodate the resulting characters. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for fuller explanation)-and-<see cref="P:System.Text.Decoder.Fallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)">
      <summary>When overridden in a derived class, decodes a sequence of bytes from the specified byte array and any bytes in the internal buffer into the specified character array. A parameter indicates whether to clear the internal state of the decoder after the conversion.</summary>
      <returns>The actual number of characters written into the <paramref name="chars" /> parameter.</returns>
      <param name="bytes">The byte array containing the sequence of bytes to decode. </param>
      <param name="byteIndex">The index of the first byte to decode. </param>
      <param name="byteCount">The number of bytes to decode. </param>
      <param name="chars">The character array to contain the resulting set of characters. </param>
      <param name="charIndex">The index at which to start writing the resulting set of characters. </param>
      <param name="flush">true to clear the internal state of the decoder after the conversion; otherwise, false. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null (Nothing).-or- <paramref name="chars" /> is null (Nothing). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteIndex" /> or <paramref name="byteCount" /> or <paramref name="charIndex" /> is less than zero.-or- <paramref name="byteindex" /> and <paramref name="byteCount" /> do not denote a valid range in <paramref name="bytes" />.-or- <paramref name="charIndex" /> is not a valid index in <paramref name="chars" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="chars" /> does not have enough capacity from <paramref name="charIndex" /> to the end of the array to accommodate the resulting characters. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for fuller explanation)-and-<see cref="P:System.Text.Decoder.Fallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.Decoder.Reset">
      <summary>When overridden in a derived class, sets the decoder back to its initial state.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Text.DecoderExceptionFallback">
      <summary>Throws <see cref="T:System.Text.DecoderFallbackException" /> if an encoded input byte sequence cannot be converted to a decoded output character. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.DecoderExceptionFallback.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.DecoderExceptionFallback" /> class. </summary>
    </member>
    <member name="M:System.Text.DecoderExceptionFallback.CreateFallbackBuffer">
      <summary>Initializes a new instance of the <see cref="T:System.Text.DecoderExceptionFallback" /> class. </summary>
      <returns>A <see cref="T:System.Text.DecoderFallbackBuffer" /> object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.DecoderExceptionFallback.Equals(System.Object)">
      <summary>Indicates whether the current <see cref="T:System.Text.DecoderExceptionFallback" /> object and a specified object are equal.</summary>
      <returns>true if <paramref name="value" /> is not null and is a <see cref="T:System.Text.DecoderExceptionFallback" /> object; otherwise, false.</returns>
      <param name="value">An object that derives from the <see cref="T:System.Text.DecoderExceptionFallback" /> class.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.DecoderExceptionFallback.GetHashCode">
      <summary>Retrieves the hash code for this instance.</summary>
      <returns>The return value is always the same arbitrary value, and has no special significance. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Text.DecoderExceptionFallback.MaxCharCount">
      <summary>Gets the maximum number of characters this instance can return.</summary>
      <returns>The return value is always zero.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Text.DecoderExceptionFallbackBuffer">
      <summary>Throws <see cref="T:System.Text.DecoderFallbackException" /> when an encoded input byte sequence cannot be converted to a decoded output character. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.DecoderExceptionFallbackBuffer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.DecoderExceptionFallbackBuffer" /> class. </summary>
    </member>
    <member name="M:System.Text.DecoderExceptionFallbackBuffer.Fallback(System.Byte[],System.Int32)">
      <summary>Throws <see cref="T:System.Text.DecoderFallbackException" /> when the input byte sequence cannot be decoded. The nominal return value is not used. </summary>
      <returns>None. No value is returned because the <see cref="M:System.Text.DecoderExceptionFallbackBuffer.Fallback(System.Byte[],System.Int32)" /> method always throws an exception. The nominal return value is true. A return value is defined, although it is unchanging, because this method implements an abstract method.</returns>
      <param name="bytesUnknown">An input array of bytes.</param>
      <param name="index">The index position of a byte in the input.</param>
      <exception cref="T:System.Text.DecoderFallbackException">This method always throws an exception that reports the value and index position of the input byte that cannot be decoded. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.DecoderExceptionFallbackBuffer.GetNextChar">
      <summary>Retrieves the next character in the exception data buffer.</summary>
      <returns>The return value is always the Unicode character NULL (U+0000). A return value is defined, although it is unchanging, because this method implements an abstract method.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.DecoderExceptionFallbackBuffer.MovePrevious">
      <summary>Causes the next call to <see cref="M:System.Text.DecoderExceptionFallbackBuffer.GetNextChar" /> to access the exception data buffer character position that is prior to the current position.</summary>
      <returns>The return value is always false. A return value is defined, although it is unchanging, because this method implements an abstract method.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Text.DecoderExceptionFallbackBuffer.Remaining">
      <summary>Gets the number of characters in the current <see cref="T:System.Text.DecoderExceptionFallbackBuffer" /> object that remain to be processed.</summary>
      <returns>The return value is always zero. A return value is defined, although it is unchanging, because this method implements an abstract method.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Text.DecoderFallback">
      <summary>Provides a failure-handling mechanism, called a fallback, for an encoded input byte sequence that cannot be converted to an output character. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.DecoderFallback.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.DecoderFallback" /> class. </summary>
    </member>
    <member name="M:System.Text.DecoderFallback.CreateFallbackBuffer">
      <summary>When overridden in a derived class, initializes a new instance of the <see cref="T:System.Text.DecoderFallbackBuffer" /> class. </summary>
      <returns>A <see cref="T:System.Text.DecoderFallbackBuffer" /> object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Text.DecoderFallback.ExceptionFallback">
      <summary>Gets an object that throws an exception when an input byte sequence cannot be decoded.</summary>
      <returns>A type derived from the <see cref="T:System.Text.DecoderFallback" /> class. The default value is a <see cref="T:System.Text.DecoderExceptionFallback" /> object.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Text.DecoderFallback.MaxCharCount">
      <summary>When overridden in a derived class, gets the maximum number of characters the current <see cref="T:System.Text.DecoderFallback" /> object can return.</summary>
      <returns>The maximum number of characters the current <see cref="T:System.Text.DecoderFallback" /> object can return.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Text.DecoderFallback.ReplacementFallback">
      <summary>Gets an object that outputs a substitute string in place of an input byte sequence that cannot be decoded.</summary>
      <returns>A type derived from the <see cref="T:System.Text.DecoderFallback" /> class. The default value is a <see cref="T:System.Text.DecoderReplacementFallback" /> object that emits the QUESTION MARK character ("?", U+003F) in place of unknown byte sequences. </returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Text.DecoderFallbackBuffer">
      <summary>Passes a string to a decoding operation that is emitted instead of an output character because an input byte sequence cannot be decoded. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.DecoderFallbackBuffer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.DecoderFallbackBuffer" /> class. </summary>
    </member>
    <member name="M:System.Text.DecoderFallbackBuffer.Fallback(System.Byte[],System.Int32)">
      <summary>When overridden in a derived class, prepares the fallback buffer to handle the specified input byte sequence.</summary>
      <returns>true if the fallback buffer can process <paramref name="bytesUnknown" />; false if the fallback buffer ignores <paramref name="bytesUnknown" />.</returns>
      <param name="bytesUnknown">An input array of bytes.</param>
      <param name="index">The index position of a byte in <paramref name="bytesUnknown" />.</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.DecoderFallbackBuffer.GetNextChar">
      <summary>When overridden in a derived class, retrieves the next character in the fallback buffer.</summary>
      <returns>The next character in the fallback buffer.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.DecoderFallbackBuffer.MovePrevious">
      <summary>When overridden in a derived class, causes the next call to the <see cref="M:System.Text.DecoderFallbackBuffer.GetNextChar" /> method to access the data buffer character position that is prior to the current character position. </summary>
      <returns>true if the <see cref="M:System.Text.DecoderFallbackBuffer.MovePrevious" /> operation was successful; otherwise, false.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Text.DecoderFallbackBuffer.Remaining">
      <summary>When overridden in a derived class, gets the number of characters in the current <see cref="T:System.Text.DecoderFallbackBuffer" /> object that remain to be processed.</summary>
      <returns>The number of characters in the current fallback buffer that have not yet been processed.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.DecoderFallbackBuffer.Reset">
      <summary>Initializes all data and state information pertaining to this fallback buffer.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Text.DecoderFallbackException">
      <summary>The exception that is thrown when a decoder fallback operation fails. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.DecoderFallbackException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.DecoderFallbackException" /> class. </summary>
    </member>
    <member name="M:System.Text.DecoderFallbackException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.DecoderFallbackException" /> class. A parameter specifies the error message.</summary>
      <param name="message">An error message.</param>
    </member>
    <member name="M:System.Text.DecoderFallbackException.#ctor(System.String,System.Byte[],System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.DecoderFallbackException" /> class. Parameters specify the error message, the array of bytes being decoded, and the index of the byte that cannot be decoded.</summary>
      <param name="message">An error message.</param>
      <param name="bytesUnknown">The input byte array.</param>
      <param name="index">The index position in <paramref name="bytesUnknown" /> of the byte that cannot be decoded.</param>
    </member>
    <member name="M:System.Text.DecoderFallbackException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.DecoderFallbackException" /> class. Parameters specify the error message and the inner exception that is the cause of this exception.</summary>
      <param name="message">An error message.</param>
      <param name="innerException">The exception that caused this exception.</param>
    </member>
    <member name="P:System.Text.DecoderFallbackException.BytesUnknown">
      <summary>Gets the input byte sequence that caused the exception.</summary>
      <returns>The input byte array that cannot be decoded. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Text.DecoderFallbackException.Index">
      <summary>Gets the index position in the input byte sequence of the byte that caused the exception.</summary>
      <returns>The index position in the input byte array of the byte that cannot be decoded. The index position is zero-based. </returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Text.DecoderReplacementFallback">
      <summary>Provides a failure-handling mechanism, called a fallback, for an encoded input byte sequence that cannot be converted to an output character. The fallback emits a user-specified replacement string instead of a decoded input byte sequence. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.DecoderReplacementFallback.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.DecoderReplacementFallback" /> class. </summary>
    </member>
    <member name="M:System.Text.DecoderReplacementFallback.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.DecoderReplacementFallback" /> class using a specified replacement string.</summary>
      <param name="replacement">A string that is emitted in a decoding operation in place of an input byte sequence that cannot be decoded.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="replacement" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="replacement" /> contains an invalid surrogate pair. In other words, the surrogate pair does not consist of one high surrogate component followed by one low surrogate component.</exception>
    </member>
    <member name="M:System.Text.DecoderReplacementFallback.CreateFallbackBuffer">
      <summary>Creates a <see cref="T:System.Text.DecoderFallbackBuffer" /> object that is initialized with the replacement string of this <see cref="T:System.Text.DecoderReplacementFallback" /> object.</summary>
      <returns>A <see cref="T:System.Text.DecoderFallbackBuffer" /> object that specifies a string to use instead of the original decoding operation input.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Text.DecoderReplacementFallback.DefaultString">
      <summary>Gets the replacement string that is the value of the <see cref="T:System.Text.DecoderReplacementFallback" /> object.</summary>
      <returns>A substitute string that is emitted in place of an input byte sequence that cannot be decoded.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.DecoderReplacementFallback.Equals(System.Object)">
      <summary>Indicates whether the value of a specified object is equal to the <see cref="T:System.Text.DecoderReplacementFallback" /> object.</summary>
      <returns>true if <paramref name="value" /> is a <see cref="T:System.Text.DecoderReplacementFallback" /> object having a <see cref="P:System.Text.DecoderReplacementFallback.DefaultString" /> property that is equal to the <see cref="P:System.Text.DecoderReplacementFallback.DefaultString" /> property of the current <see cref="T:System.Text.DecoderReplacementFallback" /> object; otherwise, false. </returns>
      <param name="value">A <see cref="T:System.Text.DecoderReplacementFallback" /> object.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.DecoderReplacementFallback.GetHashCode">
      <summary>Retrieves the hash code for the value of the <see cref="T:System.Text.DecoderReplacementFallback" /> object.</summary>
      <returns>The hash code of the value of the object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Text.DecoderReplacementFallback.MaxCharCount">
      <summary>Gets the number of characters in the replacement string for the <see cref="T:System.Text.DecoderReplacementFallback" /> object.</summary>
      <returns>The number of characters in the string that is emitted in place of a byte sequence that cannot be decoded, that is, the length of the string returned by the <see cref="P:System.Text.DecoderReplacementFallback.DefaultString" /> property.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Text.DecoderReplacementFallbackBuffer">
      <summary>Represents a substitute output string that is emitted when the original input byte sequence cannot be decoded. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.DecoderReplacementFallbackBuffer.#ctor(System.Text.DecoderReplacementFallback)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.DecoderReplacementFallbackBuffer" /> class using the value of a <see cref="T:System.Text.DecoderReplacementFallback" /> object.</summary>
      <param name="fallback">A <see cref="T:System.Text.DecoderReplacementFallback" /> object that contains a replacement string. </param>
    </member>
    <member name="M:System.Text.DecoderReplacementFallbackBuffer.Fallback(System.Byte[],System.Int32)">
      <summary>Prepares the replacement fallback buffer to use the current replacement string.</summary>
      <returns>true if the replacement string is not empty; false if the replacement string is empty.</returns>
      <param name="bytesUnknown">An input byte sequence. This parameter is ignored unless an exception is thrown.</param>
      <param name="index">The index position of the byte in <paramref name="bytesUnknown" />. This parameter is ignored in this operation.</param>
      <exception cref="T:System.ArgumentException">This method is called again before the <see cref="M:System.Text.DecoderReplacementFallbackBuffer.GetNextChar" /> method has read all the characters in the replacement fallback buffer.  </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.DecoderReplacementFallbackBuffer.GetNextChar">
      <summary>Retrieves the next character in the replacement fallback buffer.</summary>
      <returns>The next character in the replacement fallback buffer.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.DecoderReplacementFallbackBuffer.MovePrevious">
      <summary>Causes the next call to <see cref="M:System.Text.DecoderReplacementFallbackBuffer.GetNextChar" /> to access the character position in the replacement fallback buffer prior to the current character position.</summary>
      <returns>true if the <see cref="M:System.Text.DecoderReplacementFallbackBuffer.MovePrevious" /> operation was successful; otherwise, false.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Text.DecoderReplacementFallbackBuffer.Remaining">
      <summary>Gets the number of characters in the replacement fallback buffer that remain to be processed.</summary>
      <returns>The number of characters in the replacement fallback buffer that have not yet been processed.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.DecoderReplacementFallbackBuffer.Reset">
      <summary>Initializes all internal state information and data in the <see cref="T:System.Text.DecoderReplacementFallbackBuffer" /> object.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Text.Encoder">
      <summary>Converts a set of characters into a sequence of bytes.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.Encoder" /> class.</summary>
    </member>
    <member name="M:System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
      <summary>Converts a buffer of Unicode characters to an encoded byte sequence and stores the result in another buffer.</summary>
      <param name="chars">The address of a string of UTF-16 encoded characters to convert.</param>
      <param name="charCount">The number of characters in <paramref name="chars" /> to convert.</param>
      <param name="bytes">The address of a buffer to store the converted bytes.</param>
      <param name="byteCount">The maximum number of bytes in <paramref name="bytes" /> to use in the conversion.</param>
      <param name="flush">true to indicate no further data is to be converted; otherwise, false.</param>
      <param name="charsUsed">When this method returns, contains the number of characters from <paramref name="chars" /> that were used in the conversion. This parameter is passed uninitialized.</param>
      <param name="bytesUsed">When this method returns, contains the number of bytes that were used in the conversion. This parameter is passed uninitialized.</param>
      <param name="completed">When this method returns, contains true if all the characters specified by <paramref name="charCount" /> were converted; otherwise, false. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> or <paramref name="bytes" /> is null (Nothing).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> or <paramref name="byteCount" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">The output buffer is too small to contain any of the converted input. The output buffer should be greater than or equal to the size indicated by the <see cref="Overload:System.Text.Encoder.GetByteCount" /> method.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for fuller explanation)-and-<see cref="P:System.Text.Encoder.Fallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
      <summary>Converts an array of Unicode characters to an encoded byte sequence and stores the result in an array of bytes.</summary>
      <param name="chars">An array of characters to convert.</param>
      <param name="charIndex">The first element of <paramref name="chars" /> to convert.</param>
      <param name="charCount">The number of elements of <paramref name="chars" /> to convert.</param>
      <param name="bytes">An array where the converted bytes are stored.</param>
      <param name="byteIndex">The first element of <paramref name="bytes" /> in which data is stored.</param>
      <param name="byteCount">The maximum number of elements of <paramref name="bytes" /> to use in the conversion.</param>
      <param name="flush">true to indicate no further data is to be converted; otherwise, false.</param>
      <param name="charsUsed">When this method returns, contains the number of characters from <paramref name="chars" /> that were used in the conversion. This parameter is passed uninitialized.</param>
      <param name="bytesUsed">When this method returns, contains the number of bytes that were produced by the conversion. This parameter is passed uninitialized.</param>
      <param name="completed">When this method returns, contains true if all the characters specified by <paramref name="charCount" /> were converted; otherwise, false. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> or <paramref name="bytes" /> is null (Nothing).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" />, <paramref name="charCount" />, <paramref name="byteIndex" />, or <paramref name="byteCount" /> is less than zero.-or-The length of <paramref name="chars" /> - <paramref name="charIndex" /> is less than <paramref name="charCount" />.-or-The length of <paramref name="bytes" /> - <paramref name="byteIndex" /> is less than <paramref name="byteCount" />.</exception>
      <exception cref="T:System.ArgumentException">The output buffer is too small to contain any of the converted input. The output buffer should be greater than or equal to the size indicated by the <see cref="Overload:System.Text.Encoder.GetByteCount" /> method.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for fuller explanation)-and-<see cref="P:System.Text.Encoder.Fallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Text.Encoder.Fallback">
      <summary>Gets or sets a <see cref="T:System.Text.EncoderFallback" /> object for the current <see cref="T:System.Text.Encoder" /> object.</summary>
      <returns>A <see cref="T:System.Text.EncoderFallback" /> object.</returns>
      <exception cref="T:System.ArgumentNullException">The value in a set operation is null (Nothing).</exception>
      <exception cref="T:System.ArgumentException">A new value cannot be assigned in a set operation because the current <see cref="T:System.Text.EncoderFallbackBuffer" /> object contains data that has not been encoded yet. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for fuller explanation)-and-<see cref="P:System.Text.Encoder.Fallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Text.Encoder.FallbackBuffer">
      <summary>Gets the <see cref="T:System.Text.EncoderFallbackBuffer" /> object associated with the current <see cref="T:System.Text.Encoder" /> object.</summary>
      <returns>A <see cref="T:System.Text.EncoderFallbackBuffer" /> object.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoder.GetByteCount(System.Char*,System.Int32,System.Boolean)">
      <summary>When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer. A parameter indicates whether to clear the internal state of the encoder after the calculation.</summary>
      <returns>The number of bytes produced by encoding the specified characters and any characters in the internal buffer.</returns>
      <param name="chars">A pointer to the first character to encode. </param>
      <param name="count">The number of characters to encode. </param>
      <param name="flush">true to simulate clearing the internal state of the encoder after the calculation; otherwise, false. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null (Nothing in Visual Basic .NET). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for fuller explanation)-and-<see cref="P:System.Text.Encoder.Fallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)">
      <summary>When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters from the specified character array. A parameter indicates whether to clear the internal state of the encoder after the calculation.</summary>
      <returns>The number of bytes produced by encoding the specified characters and any characters in the internal buffer.</returns>
      <param name="chars">The character array containing the set of characters to encode. </param>
      <param name="index">The index of the first character to encode. </param>
      <param name="count">The number of characters to encode. </param>
      <param name="flush">true to simulate clearing the internal state of the encoder after the calculation; otherwise, false. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.-or- <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="chars" />. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for fuller explanation)-and-<see cref="P:System.Text.Encoder.Fallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.Encoder.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)">
      <summary>When overridden in a derived class, encodes a set of characters starting at the specified character pointer and any characters in the internal buffer into a sequence of bytes that are stored starting at the specified byte pointer. A parameter indicates whether to clear the internal state of the encoder after the conversion.</summary>
      <returns>The actual number of bytes written at the location indicated by the <paramref name="bytes" /> parameter.</returns>
      <param name="chars">A pointer to the first character to encode. </param>
      <param name="charCount">The number of characters to encode. </param>
      <param name="bytes">A pointer to the location at which to start writing the resulting sequence of bytes. </param>
      <param name="byteCount">The maximum number of bytes to write. </param>
      <param name="flush">true to clear the internal state of the encoder after the conversion; otherwise, false. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null (Nothing).-or- <paramref name="bytes" /> is null (Nothing). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> or <paramref name="byteCount" /> is less than zero. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="byteCount" /> is less than the resulting number of bytes. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for fuller explanation)-and-<see cref="P:System.Text.Encoder.Fallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
      <summary>When overridden in a derived class, encodes a set of characters from the specified character array and any characters in the internal buffer into the specified byte array. A parameter indicates whether to clear the internal state of the encoder after the conversion.</summary>
      <returns>The actual number of bytes written into <paramref name="bytes" />.</returns>
      <param name="chars">The character array containing the set of characters to encode. </param>
      <param name="charIndex">The index of the first character to encode. </param>
      <param name="charCount">The number of characters to encode. </param>
      <param name="bytes">The byte array to contain the resulting sequence of bytes. </param>
      <param name="byteIndex">The index at which to start writing the resulting sequence of bytes. </param>
      <param name="flush">true to clear the internal state of the encoder after the conversion; otherwise, false. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null (Nothing).-or- <paramref name="bytes" /> is null (Nothing). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.-or- <paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.-or- <paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for fuller explanation)-and-<see cref="P:System.Text.Encoder.Fallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.Encoder.Reset">
      <summary>When overridden in a derived class, sets the encoder back to its initial state.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Text.EncoderExceptionFallback">
      <summary>Throws a <see cref="T:System.Text.EncoderFallbackException" /> if an input character cannot be converted to an encoded output byte sequence. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.EncoderExceptionFallback.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.EncoderExceptionFallback" /> class.</summary>
    </member>
    <member name="M:System.Text.EncoderExceptionFallback.CreateFallbackBuffer">
      <summary>Initializes a new instance of the <see cref="T:System.Text.EncoderExceptionFallback" /> class.</summary>
      <returns>A <see cref="T:System.Text.EncoderFallbackBuffer" /> object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.EncoderExceptionFallback.Equals(System.Object)">
      <summary>Indicates whether the current <see cref="T:System.Text.EncoderExceptionFallback" /> object and a specified object are equal.</summary>
      <returns>true if <paramref name="value" /> is not null (Nothing in Visual Basic .NET) and is a <see cref="T:System.Text.EncoderExceptionFallback" /> object; otherwise, false.</returns>
      <param name="value">An object that derives from the <see cref="T:System.Text.EncoderExceptionFallback" /> class.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.EncoderExceptionFallback.GetHashCode">
      <summary>Retrieves the hash code for this instance.</summary>
      <returns>The return value is always the same arbitrary value, and has no special significance. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Text.EncoderExceptionFallback.MaxCharCount">
      <summary>Gets the maximum number of characters this instance can return.</summary>
      <returns>The return value is always zero.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Text.EncoderExceptionFallbackBuffer">
      <summary>Throws <see cref="T:System.Text.EncoderFallbackException" /> when an input character cannot be converted to an encoded output byte sequence. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.EncoderExceptionFallbackBuffer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.EncoderExceptionFallbackBuffer" /> class.</summary>
    </member>
    <member name="M:System.Text.EncoderExceptionFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)">
      <summary>Throws an exception because the input character cannot be encoded. Parameters specify the value and index position of the surrogate pair in the input, and the nominal return value is not used.</summary>
      <returns>None. No value is returned because the <see cref="M:System.Text.EncoderExceptionFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)" /> method always throws an exception. </returns>
      <param name="charUnknownHigh">The high surrogate of the input pair.</param>
      <param name="charUnknownLow">The low surrogate of the input pair.</param>
      <param name="index">The index position of the surrogate pair in the input buffer.</param>
      <exception cref="T:System.Text.EncoderFallbackException">The character represented by <paramref name="charUnknownHigh" /> and <paramref name="charUnknownLow" /> cannot be encoded.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Either <paramref name="charUnknownHigh" /> or <paramref name="charUnknownLow" /> is invalid. <paramref name="charUnknownHigh" /> is not between U+D800 and U+DBFF, inclusive, or <paramref name="charUnknownLow" /> is not between U+DC00 and U+DFFF, inclusive.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.EncoderExceptionFallbackBuffer.Fallback(System.Char,System.Int32)">
      <summary>Throws an exception because the input character cannot be encoded. Parameters specify the value and index position of the character that cannot be converted.</summary>
      <returns>None. No value is returned because the <see cref="M:System.Text.EncoderExceptionFallbackBuffer.Fallback(System.Char,System.Int32)" /> method always throws an exception. </returns>
      <param name="charUnknown">An input character.</param>
      <param name="index">The index position of the character in the input buffer.</param>
      <exception cref="T:System.Text.EncoderFallbackException">
        <paramref name="charUnknown" /> cannot be encoded. This method always throws an exception that reports the value of the <paramref name="charUnknown" /> and <paramref name="index" /> parameters.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.EncoderExceptionFallbackBuffer.GetNextChar">
      <summary>Retrieves the next character in the exception fallback buffer.</summary>
      <returns>The return value is always the Unicode character, NULL (U+0000). A return value is defined, although it is unchanging, because this method implements an abstract method.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.EncoderExceptionFallbackBuffer.MovePrevious">
      <summary>Causes the next call to the <see cref="M:System.Text.EncoderExceptionFallbackBuffer.GetNextChar" /> method to access the exception data buffer character position that is prior to the current position.</summary>
      <returns>The return value is always false.A return value is defined, although it is unchanging, because this method implements an abstract method.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Text.EncoderExceptionFallbackBuffer.Remaining">
      <summary>Gets the number of characters in the current <see cref="T:System.Text.EncoderExceptionFallbackBuffer" /> object that remain to be processed.</summary>
      <returns>The return value is always zero.A return value is defined, although it is unchanging, because this method implements an abstract method.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Text.EncoderFallback">
      <summary>Provides a failure-handling mechanism, called a fallback, for an input character that cannot be converted to an encoded output byte sequence. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.EncoderFallback.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.EncoderFallback" /> class.</summary>
    </member>
    <member name="M:System.Text.EncoderFallback.CreateFallbackBuffer">
      <summary>When overridden in a derived class, initializes a new instance of the <see cref="T:System.Text.EncoderFallbackBuffer" /> class. </summary>
      <returns>A <see cref="T:System.Text.EncoderFallbackBuffer" /> object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Text.EncoderFallback.ExceptionFallback">
      <summary>Gets an object that throws an exception when an input character cannot be encoded.</summary>
      <returns>A type derived from the <see cref="T:System.Text.EncoderFallback" /> class. The default value is a <see cref="T:System.Text.EncoderExceptionFallback" /> object.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Text.EncoderFallback.MaxCharCount">
      <summary>When overridden in a derived class, gets the maximum number of characters the current <see cref="T:System.Text.EncoderFallback" /> object can return.</summary>
      <returns>The maximum number of characters the current <see cref="T:System.Text.EncoderFallback" /> object can return.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Text.EncoderFallback.ReplacementFallback">
      <summary>Gets an object that outputs a substitute string in place of an input character that cannot be encoded.</summary>
      <returns>A type derived from the <see cref="T:System.Text.EncoderFallback" /> class. The default value is a <see cref="T:System.Text.EncoderReplacementFallback" /> object that replaces unknown input characters with the QUESTION MARK character ("?", U+003F).</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Text.EncoderFallbackBuffer">
      <summary>Passes a string to an encoding operation that is emitted instead of any input character that cannot be encoded. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.EncoderFallbackBuffer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.EncoderFallbackBuffer" /> class.</summary>
    </member>
    <member name="M:System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)">
      <summary>When overridden in a derived class, prepares the fallback buffer to handle the specified surrogate pair.</summary>
      <returns>True if the fallback buffer can process <paramref name="charUnknownHigh" /> and <paramref name="charUnknownLow" />; false if fallback buffer ignores the surrogate pair.</returns>
      <param name="charUnknownHigh">The high surrogate of the input pair.</param>
      <param name="charUnknownLow">The low surrogate of the input pair.</param>
      <param name="index">The index position of the surrogate pair in the input buffer.</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Int32)">
      <summary>When overridden in a derived class, prepares the fallback buffer to handle the specified input character. </summary>
      <returns>true if the fallback buffer can process <paramref name="charUnknown" />; false if the fallback buffer ignores <paramref name="charUnknown" />.</returns>
      <param name="charUnknown">An input character.</param>
      <param name="index">The index position of the character in the input buffer.</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.EncoderFallbackBuffer.GetNextChar">
      <summary>When overridden in a derived class, retrieves the next character in the fallback buffer.</summary>
      <returns>The next character in the fallback buffer.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.EncoderFallbackBuffer.MovePrevious">
      <summary>When overridden in a derived class, causes the next call to the <see cref="M:System.Text.EncoderFallbackBuffer.GetNextChar" /> method to access the data buffer character position that is prior to the current character position. </summary>
      <returns>true if the <see cref="M:System.Text.EncoderFallbackBuffer.MovePrevious" /> operation was successful; otherwise, false.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Text.EncoderFallbackBuffer.Remaining">
      <summary>When overridden in a derived class, gets the number of characters in the current <see cref="T:System.Text.EncoderFallbackBuffer" /> object that remain to be processed.</summary>
      <returns>The number of characters in the current fallback buffer that have not yet been processed.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.EncoderFallbackBuffer.Reset">
      <summary>Initializes all data and state information pertaining to this fallback buffer.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Text.EncoderFallbackException">
      <summary>The exception that is thrown when an encoder fallback operation fails. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.EncoderFallbackException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.EncoderFallbackException" /> class.</summary>
    </member>
    <member name="M:System.Text.EncoderFallbackException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.EncoderFallbackException" /> class. A parameter specifies the error message.</summary>
      <param name="message">An error message.</param>
    </member>
    <member name="M:System.Text.EncoderFallbackException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.EncoderFallbackException" /> class. Parameters specify the error message and the inner exception that is the cause of this exception.</summary>
      <param name="message">An error message.</param>
      <param name="innerException">The exception that caused this exception.</param>
    </member>
    <member name="P:System.Text.EncoderFallbackException.CharUnknown">
      <summary>Gets the input character that caused the exception.</summary>
      <returns>The character that cannot be encoded.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Text.EncoderFallbackException.CharUnknownHigh">
      <summary>Gets the high component character of the surrogate pair that caused the exception.</summary>
      <returns>The high component character of the surrogate pair that cannot be encoded.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Text.EncoderFallbackException.CharUnknownLow">
      <summary>Gets the low component character of the surrogate pair that caused the exception.</summary>
      <returns>The low component character of the surrogate pair that cannot be encoded.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Text.EncoderFallbackException.Index">
      <summary>Gets the index position in the input buffer of the character that caused the exception.</summary>
      <returns>The index position in the input buffer of the character that cannot be encoded.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.EncoderFallbackException.IsUnknownSurrogate">
      <summary>Indicates whether the input that caused the exception is a surrogate pair.</summary>
      <returns>true if the input was a surrogate pair; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Text.EncoderReplacementFallback">
      <summary>Provides a failure handling mechanism, called a fallback, for an input character that cannot be converted to an output byte sequence. The fallback uses a user-specified replacement string instead of the original input character. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.EncoderReplacementFallback.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.EncoderReplacementFallback" /> class.</summary>
    </member>
    <member name="M:System.Text.EncoderReplacementFallback.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.EncoderReplacementFallback" /> class using a specified replacement string.</summary>
      <param name="replacement">A string that is converted in an encoding operation in place of an input character that cannot be encoded.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="replacement" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="replacement" /> contains an invalid surrogate pair. In other words, the surrogate does not consist of one high surrogate component followed by one low surrogate component.</exception>
    </member>
    <member name="M:System.Text.EncoderReplacementFallback.CreateFallbackBuffer">
      <summary>Creates a <see cref="T:System.Text.EncoderFallbackBuffer" /> object that is initialized with the replacement string of this <see cref="T:System.Text.EncoderReplacementFallback" /> object.</summary>
      <returns>A <see cref="T:System.Text.EncoderFallbackBuffer" /> object equal to this <see cref="T:System.Text.EncoderReplacementFallback" /> object. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Text.EncoderReplacementFallback.DefaultString">
      <summary>Gets the replacement string that is the value of the <see cref="T:System.Text.EncoderReplacementFallback" /> object.</summary>
      <returns>A substitute string that is used in place of an input character that cannot be encoded.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.EncoderReplacementFallback.Equals(System.Object)">
      <summary>Indicates whether the value of a specified object is equal to the <see cref="T:System.Text.EncoderReplacementFallback" /> object.</summary>
      <returns>true if the <paramref name="value" /> parameter specifies an <see cref="T:System.Text.EncoderReplacementFallback" /> object and the replacement string of that object is equal to the replacement string of this <see cref="T:System.Text.EncoderReplacementFallback" /> object; otherwise, false. </returns>
      <param name="value">A <see cref="T:System.Text.EncoderReplacementFallback" /> object.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.EncoderReplacementFallback.GetHashCode">
      <summary>Retrieves the hash code for the value of the <see cref="T:System.Text.EncoderReplacementFallback" /> object.</summary>
      <returns>The hash code of the value of the object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Text.EncoderReplacementFallback.MaxCharCount">
      <summary>Gets the number of characters in the replacement string for the <see cref="T:System.Text.EncoderReplacementFallback" /> object.</summary>
      <returns>The number of characters in the string used in place of an input character that cannot be encoded.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Text.EncoderReplacementFallbackBuffer">
      <summary>Represents a substitute input string that is used when the original input character cannot be encoded. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.EncoderReplacementFallbackBuffer.#ctor(System.Text.EncoderReplacementFallback)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.EncoderReplacementFallbackBuffer" /> class using the value of a <see cref="T:System.Text.EncoderReplacementFallback" /> object.</summary>
      <param name="fallback">A <see cref="T:System.Text.EncoderReplacementFallback" /> object. </param>
    </member>
    <member name="M:System.Text.EncoderReplacementFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)">
      <summary>Indicates whether a replacement string can be used when an input surrogate pair cannot be encoded, or whether the surrogate pair can be ignored. Parameters specify the surrogate pair and the index position of the pair in the input.</summary>
      <returns>true if the replacement string is not empty; false if the replacement string is empty.</returns>
      <param name="charUnknownHigh">The high surrogate of the input pair.</param>
      <param name="charUnknownLow">The low surrogate of the input pair.</param>
      <param name="index">The index position of the surrogate pair in the input buffer.</param>
      <exception cref="T:System.ArgumentException">This method is called again before the <see cref="M:System.Text.EncoderReplacementFallbackBuffer.GetNextChar" /> method has read all the replacement string characters. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.EncoderReplacementFallbackBuffer.Fallback(System.Char,System.Int32)">
      <summary>Prepares the replacement fallback buffer to use the current replacement string.</summary>
      <returns>true if the replacement string is not empty; false if the replacement string is empty.</returns>
      <param name="charUnknown">An input character. This parameter is ignored in this operation unless an exception is thrown.</param>
      <param name="index">The index position of the character in the input buffer. This parameter is ignored in this operation.</param>
      <exception cref="T:System.ArgumentException">This method is called again before the <see cref="M:System.Text.EncoderReplacementFallbackBuffer.GetNextChar" /> method has read all the characters in the replacement fallback buffer.  </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.EncoderReplacementFallbackBuffer.GetNextChar">
      <summary>Retrieves the next character in the replacement fallback buffer.</summary>
      <returns>The next Unicode character in the replacement fallback buffer that the application can encode.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.EncoderReplacementFallbackBuffer.MovePrevious">
      <summary>Causes the next call to the <see cref="M:System.Text.EncoderReplacementFallbackBuffer.GetNextChar" /> method to access the character position in the replacement fallback buffer prior to the current character position. </summary>
      <returns>true if the <see cref="M:System.Text.EncoderReplacementFallbackBuffer.MovePrevious" /> operation was successful; otherwise, false.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Text.EncoderReplacementFallbackBuffer.Remaining">
      <summary>Gets the number of characters in the replacement fallback buffer that remain to be processed.</summary>
      <returns>The number of characters in the replacement fallback buffer that have not yet been processed.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.EncoderReplacementFallbackBuffer.Reset">
      <summary>Initializes all internal state information and data in this instance of <see cref="T:System.Text.EncoderReplacementFallbackBuffer" />.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Text.Encoding">
      <summary>Represents a character encoding.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.Encoding" /> class.</summary>
    </member>
    <member name="M:System.Text.Encoding.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.Encoding" /> class that corresponds to the specified code page.</summary>
      <param name="codePage">The code page identifier of the preferred encoding.-or- 0, to use the default encoding. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="codePage" /> is less than zero. </exception>
    </member>
    <member name="P:System.Text.Encoding.ASCII">
      <summary>Gets an encoding for the ASCII (7-bit) character set.</summary>
      <returns>A <see cref="T:System.Text.Encoding" /> object for the ASCII (7-bit) character set.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Text.Encoding.BigEndianUnicode">
      <summary>Gets an encoding for the UTF-16 format using the big endian byte order.</summary>
      <returns>A <see cref="T:System.Text.Encoding" /> for the UTF-16 format using the big endian byte order.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Text.Encoding.BodyName">
      <summary>When overridden in a derived class, gets a name for the current encoding that can be used with mail agent body tags.</summary>
      <returns>A name for the current <see cref="T:System.Text.Encoding" /> that can be used with mail agent body tags.-or- An empty string (""), if the current <see cref="T:System.Text.Encoding" /> cannot be used.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.Clone">
      <summary>When overridden in a derived class, creates a shallow copy of the current <see cref="T:System.Text.Encoding" /> object.</summary>
      <returns>A copy of the current <see cref="T:System.Text.Encoding" /> object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Text.Encoding.CodePage">
      <summary>When overridden in a derived class, gets the code page identifier of the current <see cref="T:System.Text.Encoding" />.</summary>
      <returns>The code page identifier of the current <see cref="T:System.Text.Encoding" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])">
      <summary>Converts an entire byte array from one encoding to another.</summary>
      <returns>An array of type <see cref="T:System.Byte" /> containing the results of converting <paramref name="bytes" /> from <paramref name="srcEncoding" /> to <paramref name="dstEncoding" />.</returns>
      <param name="srcEncoding">The encoding format of <paramref name="bytes" />. </param>
      <param name="dstEncoding">The target encoding format. </param>
      <param name="bytes">The bytes to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="srcEncoding" /> is null.-or- <paramref name="dstEncoding" /> is null.-or- <paramref name="bytes" /> is null. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-srcEncoding.<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-dstEncoding.<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)">
      <summary>Converts a range of bytes in a byte array from one encoding to another.</summary>
      <returns>An array of type <see cref="T:System.Byte" /> containing the result of converting a range of bytes in <paramref name="bytes" /> from <paramref name="srcEncoding" /> to <paramref name="dstEncoding" />.</returns>
      <param name="srcEncoding">The encoding of the source array, <paramref name="bytes" />. </param>
      <param name="dstEncoding">The encoding of the output array. </param>
      <param name="bytes">The array of bytes to convert. </param>
      <param name="index">The index of the first element of <paramref name="bytes" /> to convert. </param>
      <param name="count">The number of bytes to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="srcEncoding" /> is null.-or- <paramref name="dstEncoding" /> is null.-or- <paramref name="bytes" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> and <paramref name="count" /> do not specify a valid range in the byte array. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-srcEncoding.<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-dstEncoding.<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Text.Encoding.DecoderFallback">
      <summary>Gets or sets the <see cref="T:System.Text.DecoderFallback" /> object for the current <see cref="T:System.Text.Encoding" /> object.</summary>
      <returns>The <see cref="T:System.Text.DecoderFallback" /> object for the current <see cref="T:System.Text.Encoding" /> object. </returns>
      <exception cref="T:System.ArgumentNullException">The value in a set operation is null.</exception>
      <exception cref="T:System.InvalidOperationException">A value cannot be assigned in a set operation because the current <see cref="T:System.Text.Encoding" /> object is read-only.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Text.Encoding.Default">
      <summary>Gets an encoding for the operating system's current ANSI code page.</summary>
      <returns>An encoding for the operating system's current ANSI code page.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Text.Encoding.EncoderFallback">
      <summary>Gets or sets the <see cref="T:System.Text.EncoderFallback" /> object for the current <see cref="T:System.Text.Encoding" /> object.</summary>
      <returns>The <see cref="T:System.Text.EncoderFallback" /> object for the current <see cref="T:System.Text.Encoding" /> object. </returns>
      <exception cref="T:System.ArgumentNullException">The value in a set operation is null.</exception>
      <exception cref="T:System.InvalidOperationException">A value cannot be assigned in a set operation because the current <see cref="T:System.Text.Encoding" /> object is read-only.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Text.Encoding.EncodingName">
      <summary>When overridden in a derived class, gets the human-readable description of the current encoding.</summary>
      <returns>The human-readable description of the current <see cref="T:System.Text.Encoding" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current instance.</summary>
      <returns>true if <paramref name="value" /> is an instance of <see cref="T:System.Text.Encoding" /> and is equal to the current instance; otherwise, false. </returns>
      <param name="value">The <see cref="T:System.Object" /> to compare with the current instance. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.GetByteCount(System.Char*,System.Int32)">
      <summary>When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</summary>
      <returns>The number of bytes produced by encoding the specified characters.</returns>
      <param name="chars">A pointer to the first character to encode. </param>
      <param name="count">The number of characters to encode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.GetByteCount(System.Char[])">
      <summary>When overridden in a derived class, calculates the number of bytes produced by encoding all the characters in the specified character array.</summary>
      <returns>The number of bytes produced by encoding all the characters in the specified character array.</returns>
      <param name="chars">The character array containing the characters to encode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters from the specified character array.</summary>
      <returns>The number of bytes produced by encoding the specified characters.</returns>
      <param name="chars">The character array containing the set of characters to encode. </param>
      <param name="index">The index of the first character to encode. </param>
      <param name="count">The number of characters to encode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.-or- <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="chars" />. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.GetByteCount(System.String)">
      <summary>When overridden in a derived class, calculates the number of bytes produced by encoding the characters in the specified <see cref="T:System.String" />.</summary>
      <returns>The number of bytes produced by encoding the specified characters.</returns>
      <param name="s">The <see cref="T:System.String" /> containing the set of characters to encode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
      <summary>When overridden in a derived class, encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</summary>
      <returns>The actual number of bytes written at the location indicated by the <paramref name="bytes" /> parameter.</returns>
      <param name="chars">A pointer to the first character to encode. </param>
      <param name="charCount">The number of characters to encode. </param>
      <param name="bytes">A pointer to the location at which to start writing the resulting sequence of bytes. </param>
      <param name="byteCount">The maximum number of bytes to write. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null.-or- <paramref name="bytes" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> or <paramref name="byteCount" /> is less than zero. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="byteCount" /> is less than the resulting number of bytes. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.Char[])">
      <summary>When overridden in a derived class, encodes all the characters in the specified character array into a sequence of bytes.</summary>
      <returns>A byte array containing the results of encoding the specified set of characters.</returns>
      <param name="chars">The character array containing the characters to encode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, encodes a set of characters from the specified character array into a sequence of bytes.</summary>
      <returns>A byte array containing the results of encoding the specified set of characters.</returns>
      <param name="chars">The character array containing the set of characters to encode. </param>
      <param name="index">The index of the first character to encode. </param>
      <param name="count">The number of characters to encode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.-or- <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="chars" />. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>When overridden in a derived class, encodes a set of characters from the specified character array into the specified byte array.</summary>
      <returns>The actual number of bytes written into <paramref name="bytes" />.</returns>
      <param name="chars">The character array containing the set of characters to encode. </param>
      <param name="charIndex">The index of the first character to encode. </param>
      <param name="charCount">The number of characters to encode. </param>
      <param name="bytes">The byte array to contain the resulting sequence of bytes. </param>
      <param name="byteIndex">The index at which to start writing the resulting sequence of bytes. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null.-or- <paramref name="bytes" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.-or- <paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.-or- <paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.String)">
      <summary>When overridden in a derived class, encodes all the characters in the specified <see cref="T:System.String" /> into a sequence of bytes.</summary>
      <returns>A byte array containing the results of encoding the specified set of characters.</returns>
      <param name="s">The <see cref="T:System.String" /> containing the characters to encode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>When overridden in a derived class, encodes a set of characters from the specified <see cref="T:System.String" /> into the specified byte array.</summary>
      <returns>The actual number of bytes written into <paramref name="bytes" />.</returns>
      <param name="s">The <see cref="T:System.String" /> containing the set of characters to encode. </param>
      <param name="charIndex">The index of the first character to encode. </param>
      <param name="charCount">The number of characters to encode. </param>
      <param name="bytes">The byte array to contain the resulting sequence of bytes. </param>
      <param name="byteIndex">The index at which to start writing the resulting sequence of bytes. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null.-or- <paramref name="bytes" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.-or- <paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.-or- <paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)">
      <summary>When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</summary>
      <returns>The number of characters produced by decoding the specified sequence of bytes.</returns>
      <param name="bytes">A pointer to the first byte to decode. </param>
      <param name="count">The number of bytes to decode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.GetCharCount(System.Byte[])">
      <summary>When overridden in a derived class, calculates the number of characters produced by decoding all the bytes in the specified byte array.</summary>
      <returns>The number of characters produced by decoding the specified sequence of bytes.</returns>
      <param name="bytes">The byte array containing the sequence of bytes to decode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</summary>
      <returns>The number of characters produced by decoding the specified sequence of bytes.</returns>
      <param name="bytes">The byte array containing the sequence of bytes to decode. </param>
      <param name="index">The index of the first byte to decode. </param>
      <param name="count">The number of bytes to decode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.-or- <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
      <summary>When overridden in a derived class, decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</summary>
      <returns>The actual number of characters written at the location indicated by the <paramref name="chars" /> parameter.</returns>
      <param name="bytes"></param>
      <param name="byteCount">The number of bytes to decode. </param>
      <param name="chars"></param>
      <param name="charCount">The maximum number of characters to write. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null.-or- <paramref name="chars" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteCount" /> or <paramref name="charCount" /> is less than zero. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="charCount" /> is less than the resulting number of characters. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.GetChars(System.Byte[])">
      <summary>When overridden in a derived class, decodes all the bytes in the specified byte array into a set of characters.</summary>
      <returns>A character array containing the results of decoding the specified sequence of bytes.</returns>
      <param name="bytes">The byte array containing the sequence of bytes to decode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, decodes a sequence of bytes from the specified byte array into a set of characters.</summary>
      <returns>A character array containing the results of decoding the specified sequence of bytes.</returns>
      <param name="bytes">The byte array containing the sequence of bytes to decode. </param>
      <param name="index">The index of the first byte to decode. </param>
      <param name="count">The number of bytes to decode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.-or- <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>When overridden in a derived class, decodes a sequence of bytes from the specified byte array into the specified character array.</summary>
      <returns>The actual number of characters written into <paramref name="chars" />.</returns>
      <param name="bytes">The byte array containing the sequence of bytes to decode. </param>
      <param name="byteIndex">The index of the first byte to decode. </param>
      <param name="byteCount">The number of bytes to decode. </param>
      <param name="chars">The character array to contain the resulting set of characters. </param>
      <param name="charIndex">The index at which to start writing the resulting set of characters. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null.-or- <paramref name="chars" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteIndex" /> or <paramref name="byteCount" /> or <paramref name="charIndex" /> is less than zero.-or- <paramref name="byteindex" /> and <paramref name="byteCount" /> do not denote a valid range in <paramref name="bytes" />.-or- <paramref name="charIndex" /> is not a valid index in <paramref name="chars" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="chars" /> does not have enough capacity from <paramref name="charIndex" /> to the end of the array to accommodate the resulting characters. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.GetDecoder">
      <summary>When overridden in a derived class, obtains a decoder that converts an encoded sequence of bytes into a sequence of characters.</summary>
      <returns>A <see cref="T:System.Text.Decoder" /> that converts an encoded sequence of bytes into a sequence of characters.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.GetEncoder">
      <summary>When overridden in a derived class, obtains an encoder that converts a sequence of Unicode characters into an encoded sequence of bytes.</summary>
      <returns>A <see cref="T:System.Text.Encoder" /> that converts a sequence of Unicode characters into an encoded sequence of bytes.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.GetEncoding(System.Int32)">
      <summary>Returns the encoding associated with the specified code page identifier.</summary>
      <returns>The <see cref="T:System.Text.Encoding" /> associated with the specified code page.</returns>
      <param name="codepage">The code page identifier of the preferred encoding.-or- 0, to use the default encoding. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="codepage" /> is less than zero or greater than 65535. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="codepage" /> is not supported by the underlying platform. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="codepage" /> is not supported by the underlying platform. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
      <summary>Returns the encoding associated with the specified code page identifier. Parameters specify an error handler for characters that cannot be encoded and byte sequences that cannot be decoded.</summary>
      <returns>The <see cref="T:System.Text.Encoding" /> object associated with the specified code page.</returns>
      <param name="codepage">The code page identifier of the preferred encoding.-or- 0, to use the default encoding. </param>
      <param name="encoderFallback">A <see cref="T:System.Text.EncoderFallback" /> object that provides an error handling procedure when a character cannot be encoded with the current encoding. </param>
      <param name="decoderFallback">A <see cref="T:System.Text.DecoderFallback" /> object that provides an error handling procedure when a byte sequence cannot be decoded with the current encoding. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="codepage" /> is less than zero or greater than 65535. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="codepage" /> is not supported by the underlying platform. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="codepage" /> is not supported by the underlying platform. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.GetEncoding(System.String)">
      <summary>Returns an encoding associated with the specified code page name.</summary>
      <returns>The <see cref="T:System.Text.Encoding" /> associated with the specified code page.</returns>
      <param name="name">The code page name of the preferred encoding. Any value returned by <see cref="P:System.Text.Encoding.WebName" /> is a valid input. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is not a valid code page name.-or- The code page indicated by <paramref name="name" /> is not supported by the underlying platform. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)">
      <summary>Returns the encoding associated with the specified code page name. Parameters specify an error handler for characters that cannot be encoded and byte sequences that cannot be decoded.</summary>
      <returns>The <see cref="T:System.Text.Encoding" /> object associated with the specified code page.</returns>
      <param name="name">The code page name of the preferred encoding. </param>
      <param name="encoderFallback">A <see cref="T:System.Text.EncoderFallback" /> object that provides an error handling procedure when a character cannot be encoded with the current encoding. </param>
      <param name="decoderFallback">A <see cref="T:System.Text.DecoderFallback" /> object that provides an error handling procedure when a byte sequence cannot be decoded with the current encoding. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is not a valid code page name.-or- The code page indicated by <paramref name="name" /> is not supported by the underlying platform. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.GetEncodings">
      <summary>Returns an array containing all encodings.</summary>
      <returns>An array of type <see cref="T:System.Text.EncodingInfo" /> containing all encodings.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>The hash code for the current instance.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.GetMaxByteCount(System.Int32)">
      <summary>When overridden in a derived class, calculates the maximum number of bytes produced by encoding the specified number of characters.</summary>
      <returns>The maximum number of bytes produced by encoding the specified number of characters.</returns>
      <param name="charCount">The number of characters to encode. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> is less than zero. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.GetMaxCharCount(System.Int32)">
      <summary>When overridden in a derived class, calculates the maximum number of characters produced by decoding the specified number of bytes.</summary>
      <returns>The maximum number of characters produced by decoding the specified number of bytes.</returns>
      <param name="byteCount">The number of bytes to decode. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteCount" /> is less than zero. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.GetPreamble">
      <summary>When overridden in a derived class, returns a sequence of bytes that specifies the encoding used.</summary>
      <returns>A byte array containing a sequence of bytes that specifies the encoding used.-or- A byte array of length zero, if a preamble is not required.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.GetString(System.Byte[])">
      <summary>When overridden in a derived class, decodes all the bytes in the specified byte array into a string.</summary>
      <returns>A <see cref="T:System.String" /> containing the results of decoding the specified sequence of bytes.</returns>
      <param name="bytes">The byte array containing the sequence of bytes to decode. </param>
      <exception cref="T:System.ArgumentException">The byte array contains invalid Unicode code points.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, decodes a sequence of bytes from the specified byte array into a string.</summary>
      <returns>A <see cref="T:System.String" /> containing the results of decoding the specified sequence of bytes.</returns>
      <param name="bytes">The byte array containing the sequence of bytes to decode. </param>
      <param name="index">The index of the first byte to decode. </param>
      <param name="count">The number of bytes to decode. </param>
      <exception cref="T:System.ArgumentException">The byte array contains invalid Unicode code points.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.-or- <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Text.Encoding.HeaderName">
      <summary>When overridden in a derived class, gets a name for the current encoding that can be used with mail agent header tags.</summary>
      <returns>A name for the current <see cref="T:System.Text.Encoding" /> to use with mail agent header tags.-or- An empty string (""), if the current <see cref="T:System.Text.Encoding" /> cannot be used.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.IsAlwaysNormalized">
      <summary>Gets a value indicating whether the current encoding is always normalized, using the default normalization form.</summary>
      <returns>true if the current <see cref="T:System.Text.Encoding" /> is always normalized; otherwise, false. The default is false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)">
      <summary>When overridden in a derived class, gets a value indicating whether the current encoding is always normalized, using the specified normalization form.</summary>
      <returns>true if the current <see cref="T:System.Text.Encoding" /> object is always normalized using the specified <see cref="T:System.Text.NormalizationForm" /> value; otherwise, false. The default is false.</returns>
      <param name="form">One of the <see cref="T:System.Text.NormalizationForm" /> values. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Text.Encoding.IsBrowserDisplay">
      <summary>When overridden in a derived class, gets a value indicating whether the current encoding can be used by browser clients for displaying content.</summary>
      <returns>true if the current <see cref="T:System.Text.Encoding" /> can be used by browser clients for displaying content; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Text.Encoding.IsBrowserSave">
      <summary>When overridden in a derived class, gets a value indicating whether the current encoding can be used by browser clients for saving content.</summary>
      <returns>true if the current <see cref="T:System.Text.Encoding" /> can be used by browser clients for saving content; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Text.Encoding.IsMailNewsDisplay">
      <summary>When overridden in a derived class, gets a value indicating whether the current encoding can be used by mail and news clients for displaying content.</summary>
      <returns>true if the current <see cref="T:System.Text.Encoding" /> can be used by mail and news clients for displaying content; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Text.Encoding.IsMailNewsSave">
      <summary>When overridden in a derived class, gets a value indicating whether the current encoding can be used by mail and news clients for saving content.</summary>
      <returns>true if the current <see cref="T:System.Text.Encoding" /> can be used by mail and news clients for saving content; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Text.Encoding.IsReadOnly">
      <summary>When overridden in a derived class, gets a value indicating whether the current encoding is read-only.</summary>
      <returns>true if the current <see cref="T:System.Text.Encoding" /> is read-only; otherwise, false. The default is true.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Text.Encoding.IsSingleByte">
      <summary>When overridden in a derived class, gets a value indicating whether the current encoding uses single-byte code points.</summary>
      <returns>true if the current <see cref="T:System.Text.Encoding" /> uses single-byte code points; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Text.Encoding.Unicode">
      <summary>Gets an encoding for the UTF-16 format using the little endian byte order.</summary>
      <returns>A <see cref="T:System.Text.Encoding" /> for the UTF-16 format using the little endian byte order.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Text.Encoding.UTF32">
      <summary>Gets an encoding for the UTF-32 format using the little endian byte order.</summary>
      <returns>A <see cref="T:System.Text.Encoding" /> object for the UTF-32 format using the little endian byte order.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Text.Encoding.UTF7">
      <summary>Gets an encoding for the UTF-7 format.</summary>
      <returns>A <see cref="T:System.Text.Encoding" /> for the UTF-7 format.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Text.Encoding.UTF8">
      <summary>Gets an encoding for the UTF-8 format.</summary>
      <returns>A <see cref="T:System.Text.Encoding" /> for the UTF-8 format.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Text.Encoding.WebName">
      <summary>When overridden in a derived class, gets the name registered with the Internet Assigned Numbers Authority (IANA) for the current encoding.</summary>
      <returns>The IANA name for the current <see cref="T:System.Text.Encoding" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Text.Encoding.WindowsCodePage">
      <summary>When overridden in a derived class, gets the Windows operating system code page that most closely corresponds to the current encoding.</summary>
      <returns>The Windows operating system code page that most closely corresponds to the current <see cref="T:System.Text.Encoding" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Text.EncodingInfo">
      <summary>Provides basic information about an encoding.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Text.EncodingInfo.CodePage">
      <summary>Gets the code page identifier of the encoding.</summary>
      <returns>The code page identifier of the encoding.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Text.EncodingInfo.DisplayName">
      <summary>Gets the human-readable description of the encoding.</summary>
      <returns>The human-readable description of the encoding.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.EncodingInfo.Equals(System.Object)">
      <summary>Gets a value indicating whether the specified object is equal to the current <see cref="T:System.Text.EncodingInfo" /> object.</summary>
      <returns>true if <paramref name="value" /> is a <see cref="T:System.Text.EncodingInfo" /> object and is equal to the current <see cref="T:System.Text.EncodingInfo" /> object; otherwise, false.</returns>
      <param name="value">An object to compare to the current <see cref="T:System.Text.EncodingInfo" /> object.</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.EncodingInfo.GetEncoding">
      <summary>Returns a <see cref="T:System.Text.Encoding" /> object that corresponds to the current <see cref="T:System.Text.EncodingInfo" /> object.</summary>
      <returns>A <see cref="T:System.Text.Encoding" /> object that corresponds to the current <see cref="T:System.Text.EncodingInfo" /> object.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.EncodingInfo.GetHashCode">
      <summary>Returns the hash code for the current <see cref="T:System.Text.EncodingInfo" /> object.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Text.EncodingInfo.Name">
      <summary>Gets the name registered with the Internet Assigned Numbers Authority (IANA) for the encoding.</summary>
      <returns>The IANA name for the encoding. For more information about the IANA, see www.iana.org.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Text.NormalizationForm">
      <summary>Defines the type of normalization to perform.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Text.NormalizationForm.FormC">
      <summary>Indicates that a Unicode string is normalized using full canonical decomposition, followed by the replacement of sequences with their primary composites, if possible.</summary>
    </member>
    <member name="F:System.Text.NormalizationForm.FormD">
      <summary>Indicates that a Unicode string is normalized using full canonical decomposition.</summary>
    </member>
    <member name="F:System.Text.NormalizationForm.FormKC">
      <summary>Indicates that a Unicode string is normalized using full compatibility decomposition, followed by the replacement of sequences with their primary composites, if possible.</summary>
    </member>
    <member name="F:System.Text.NormalizationForm.FormKD">
      <summary>Indicates that a Unicode string is normalized using full compatibility decomposition.</summary>
    </member>
    <member name="T:System.Text.StringBuilder">
      <summary>Represents a mutable string of characters. This class cannot be inherited.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.StringBuilder" /> class.</summary>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.StringBuilder" /> class using the specified capacity.</summary>
      <param name="capacity">The suggested starting size of this instance. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than zero. </exception>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.StringBuilder" /> class that starts with a specified capacity and can grow to a specified maximum.</summary>
      <param name="capacity">The suggested starting size of the <see cref="T:System.Text.StringBuilder" />. </param>
      <param name="maxCapacity">The maximum number of characters the current string can contain. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxCapacity" /> is less than one, <paramref name="capacity" /> is less than zero, or <paramref name="capacity" /> is greater than <paramref name="maxCapacity" />. </exception>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.StringBuilder" /> class using the specified string.</summary>
      <param name="value">The string used to initialize the value of the instance. If <paramref name="value" /> is null, the new <see cref="T:System.Text.StringBuilder" /> will contain the empty string (that is, it contains <see cref="F:System.String.Empty" />). </param>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.StringBuilder" /> class using the specified string and capacity.</summary>
      <param name="value">The string used to initialize the value of the instance. If <paramref name="value" /> is null, the new <see cref="T:System.Text.StringBuilder" /> will contain the empty string (that is, it contains <see cref="F:System.String.Empty" />). </param>
      <param name="capacity">The suggested starting size of the <see cref="T:System.Text.StringBuilder" />. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than zero. </exception>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.StringBuilder" /> class from the specified substring and capacity.</summary>
      <param name="value">The string that contains the substring used to initialize the value of this instance. If <paramref name="value" /> is null, the new <see cref="T:System.Text.StringBuilder" /> will contain the empty string (that is, it contains <see cref="F:System.String.Empty" />). </param>
      <param name="startIndex">The position within <paramref name="value" /> where the substring begins. </param>
      <param name="length">The number of characters in the substring. </param>
      <param name="capacity">The suggested starting size of the <see cref="T:System.Text.StringBuilder" />. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than zero.-or- <paramref name="startIndex" /> plus <paramref name="length" /> is not a position within <paramref name="value" />. </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Boolean)">
      <summary>Appends the string representation of a specified Boolean value to the end of this instance.</summary>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <param name="value">The Boolean value to append. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Byte)">
      <summary>Appends the string representation of a specified 8-bit unsigned integer to the end of this instance.</summary>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <param name="value">The value to append. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char)">
      <summary>Appends the string representation of a specified Unicode character to the end of this instance.</summary>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <param name="value">The Unicode character to append. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char,System.Int32)">
      <summary>Appends a specified number of copies of the string representation of a Unicode character to the end of this instance.</summary>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <param name="value">The character to append. </param>
      <param name="repeatCount">The number of times to append <paramref name="value" />. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="repeatCount" /> is less than zero.-or- Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <exception cref="T:System.OutOfMemoryException">Out of memory.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char[])">
      <summary>Appends the string representation of the Unicode characters in a specified array to the end of this instance.</summary>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <param name="value">The array of characters to append. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char[],System.Int32,System.Int32)">
      <summary>Appends the string representation of a specified subarray of Unicode characters to the end of this instance.</summary>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <param name="value">A character array. </param>
      <param name="startIndex">The starting position in <paramref name="value" />. </param>
      <param name="charCount">The number of characters to append. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null, and <paramref name="startIndex" /> and <paramref name="charCount" /> are not zero. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> is less than zero.-or- <paramref name="startIndex" /> is less than zero.-or- <paramref name="startIndex" /> + <paramref name="charCount" /> is greater than the length of <paramref name="value" />.-or- Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Decimal)">
      <summary>Appends the string representation of a specified decimal number to the end of this instance.</summary>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <param name="value">The value to append. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Double)">
      <summary>Appends the string representation of a specified double-precision floating-point number to the end of this instance.</summary>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <param name="value">The value to append. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Int16)">
      <summary>Appends the string representation of a specified 16-bit signed integer to the end of this instance.</summary>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <param name="value">The value to append. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Int32)">
      <summary>Appends the string representation of a specified 32-bit signed integer to the end of this instance.</summary>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <param name="value">The value to append. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Int64)">
      <summary>Appends the string representation of a specified 64-bit signed integer to the end of this instance.</summary>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <param name="value">The value to append. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Object)">
      <summary>Appends the string representation of a specified object to the end of this instance.</summary>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <param name="value">The object to append. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.SByte)">
      <summary>Appends the string representation of a specified 8-bit signed integer to the end of this instance.</summary>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <param name="value">The value to append. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Single)">
      <summary>Appends the string representation of a specified single-precision floating-point number to the end of this instance.</summary>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <param name="value">The value to append. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.String)">
      <summary>Appends a copy of the specified string to the end of this instance.</summary>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <param name="value">The string to append. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.String,System.Int32,System.Int32)">
      <summary>Appends a copy of a specified substring to the end of this instance.</summary>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <param name="value">The string that contains the substring to append. </param>
      <param name="startIndex">The starting position of the substring within <paramref name="value" />. </param>
      <param name="count">The number of characters in <paramref name="value" /> to append. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null, and <paramref name="startIndex" /> and <paramref name="count" /> are not zero. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> less than zero.-or- <paramref name="startIndex" /> less than zero.-or- <paramref name="startIndex" /> + <paramref name="count" /> is greater than the length of <paramref name="value" />.-or- Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.UInt16)">
      <summary>Appends the string representation of a specified 16-bit unsigned integer to the end of this instance.</summary>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <param name="value">The value to append. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.UInt32)">
      <summary>Appends the string representation of a specified 32-bit unsigned integer to the end of this instance.</summary>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <param name="value">The value to append. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.UInt64)">
      <summary>Appends the string representation of a specified 64-bit unsigned integer to the end of this instance.</summary>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <param name="value">The value to append. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a corresponding argument in a parameter array using a specified format provider.</summary>
      <returns>A reference to this instance after the append operation has completed. After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <paramref name="format" /> where any format specification is replaced by the string representation of the corresponding object argument. </returns>
      <param name="provider">An object that supplies culture-specific formatting information. </param>
      <param name="format">A composite format string. </param>
      <param name="args">An array of objects to format.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid. -or-The index of a format item is less than 0 (zero), or greater than or equal to the length of the <paramref name="args" /> array.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of the expanded string would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object)">
      <summary>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a single argument.</summary>
      <returns>A reference to this instance with <paramref name="format" /> appended. Each format item in <paramref name="format" /> is replaced by the string representation of <paramref name="arg0" />.</returns>
      <param name="format">A composite format string. </param>
      <param name="arg0">An object to format. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid. -or-The index of a format item is less than 0 (zero), or greater than or equal to 1.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of the expanded string would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object)">
      <summary>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of two arguments.</summary>
      <returns>A reference to this instance with <paramref name="format" /> appended. Each format item in <paramref name="format" /> is replaced by the string representation of the corresponding object argument.</returns>
      <param name="format">A composite format string. </param>
      <param name="arg0">The first object to format. </param>
      <param name="arg1">The second object to format. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.-or-The index of a format item is less than 0 (zero), or greater than or equal to 2. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of the expanded string would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object,System.Object)">
      <summary>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of three arguments.</summary>
      <returns>A reference to this instance with <paramref name="format" /> appended. Each format item in <paramref name="format" /> is replaced by the string representation of the corresponding object argument.</returns>
      <param name="format">A composite format string. </param>
      <param name="arg0">The first object to format. </param>
      <param name="arg1">The second object to format. </param>
      <param name="arg2">The third object to format. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.-or-The index of a format item is less than 0 (zero), or greater than or equal to 3.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of the expanded string would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object[])">
      <summary>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a corresponding argument in a parameter array.</summary>
      <returns>A reference to this instance with <paramref name="format" /> appended. Each format item in <paramref name="format" /> is replaced by the string representation of the corresponding object argument.</returns>
      <param name="format">A composite format string. </param>
      <param name="args">An array of objects to format. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> or <paramref name="args" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid. -or-The index of a format item is less than 0 (zero), or greater than or equal to the length of the <paramref name="args" /> array.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of the expanded string would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.AppendLine">
      <summary>Appends the default line terminator to the end of the current <see cref="T:System.Text.StringBuilder" /> object.</summary>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.AppendLine(System.String)">
      <summary>Appends a copy of the specified string followed by the default line terminator to the end of the current <see cref="T:System.Text.StringBuilder" /> object.</summary>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <param name="value">The string to append. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Text.StringBuilder.Capacity">
      <summary>Gets or sets the maximum number of characters that can be contained in the memory allocated by the current instance.</summary>
      <returns>The maximum number of characters that can be contained in the memory allocated by the current instance.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value specified for a set operation is less than the current length of this instance.-or- The value specified for a set operation is greater than the maximum capacity. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Text.StringBuilder.Chars(System.Int32)">
      <summary>Gets or sets the character at the specified character position in this instance.</summary>
      <returns>The Unicode character at position <paramref name="index" />.</returns>
      <param name="index">The position of the character. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the bounds of this instance while setting a character. </exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is outside the bounds of this instance while getting a character. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Clear">
      <summary>Removes all characters from the current <see cref="T:System.Text.StringBuilder" /> instance.</summary>
      <returns>An object whose <see cref="P:System.Text.StringBuilder.Length" /> is 0 (zero).</returns>
    </member>
    <member name="M:System.Text.StringBuilder.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
      <summary>Copies the characters from a specified segment of this instance to a specified segment of a destination <see cref="T:System.Char" /> array.</summary>
      <param name="sourceIndex">The starting position in this instance where characters will be copied from. The index is zero-based.</param>
      <param name="destination">The array where characters will be copied.</param>
      <param name="destinationIndex">The starting position in <paramref name="destination" /> where characters will be copied. The index is zero-based.</param>
      <param name="count">The number of characters to be copied.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" />, <paramref name="destinationIndex" />, or <paramref name="count" />, is less than zero.-or-<paramref name="sourceIndex" /> is greater than the length of this instance.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceIndex" /> + <paramref name="count" /> is greater than the length of this instance.-or-<paramref name="destinationIndex" /> + <paramref name="count" /> is greater than the length of <paramref name="destination" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.EnsureCapacity(System.Int32)">
      <summary>Ensures that the capacity of this instance of <see cref="T:System.Text.StringBuilder" /> is at least the specified value.</summary>
      <returns>The new capacity of this instance.</returns>
      <param name="capacity">The minimum capacity to ensure. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than zero.-or- Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Equals(System.Text.StringBuilder)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <returns>true if this instance and <paramref name="sb" /> have equal string, <see cref="P:System.Text.StringBuilder.Capacity" />, and <see cref="P:System.Text.StringBuilder.MaxCapacity" /> values; otherwise, false.</returns>
      <param name="sb">An object to compare with this instance, or null. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Boolean)">
      <summary>Inserts the string representation of a Boolean value into this instance at the specified character position.</summary>
      <returns>A reference to this instance after the insert operation has completed.</returns>
      <param name="index">The position in this instance where insertion begins. </param>
      <param name="value">The value to insert. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the length of this instance.</exception>
      <exception cref="T:System.OutOfMemoryException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Byte)">
      <summary>Inserts the string representation of a specified 8-bit unsigned integer into this instance at the specified character position.</summary>
      <returns>A reference to this instance after the insert operation has completed.</returns>
      <param name="index">The position in this instance where insertion begins. </param>
      <param name="value">The value to insert. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the length of this instance. </exception>
      <exception cref="T:System.OutOfMemoryException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Char)">
      <summary>Inserts the string representation of a specified Unicode character into this instance at the specified character position.</summary>
      <returns>A reference to this instance after the insert operation has completed.</returns>
      <param name="index">The position in this instance where insertion begins. </param>
      <param name="value">The value to insert. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the length of this instance.-or- Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Char[])">
      <summary>Inserts the string representation of a specified array of Unicode characters into this instance at the specified character position.</summary>
      <returns>A reference to this instance after the insert operation has completed.</returns>
      <param name="index">The position in this instance where insertion begins. </param>
      <param name="value">The character array to insert. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the length of this instance.-or- Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Char[],System.Int32,System.Int32)">
      <summary>Inserts the string representation of a specified subarray of Unicode characters into this instance at the specified character position.</summary>
      <returns>A reference to this instance after the insert operation has completed.</returns>
      <param name="index">The position in this instance where insertion begins. </param>
      <param name="value">A character array. </param>
      <param name="startIndex">The starting index within <paramref name="value" />. </param>
      <param name="charCount">The number of characters to insert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null, and <paramref name="startIndex" /> and <paramref name="charCount" /> are not zero. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />, <paramref name="startIndex" />, or <paramref name="charCount" /> is less than zero.-or- <paramref name="index" /> is greater than the length of this instance.-or- <paramref name="startIndex" /> plus <paramref name="charCount" /> is not a position within <paramref name="value" />.-or- Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Decimal)">
      <summary>Inserts the string representation of a decimal number into this instance at the specified character position.</summary>
      <returns>A reference to this instance after the insert operation has completed.</returns>
      <param name="index">The position in this instance where insertion begins. </param>
      <param name="value">The value to insert. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the length of this instance. </exception>
      <exception cref="T:System.OutOfMemoryException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Double)">
      <summary>Inserts the string representation of a double-precision floating-point number into this instance at the specified character position.</summary>
      <returns>A reference to this instance after the insert operation has completed.</returns>
      <param name="index">The position in this instance where insertion begins. </param>
      <param name="value">The value to insert. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the length of this instance. </exception>
      <exception cref="T:System.OutOfMemoryException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Int16)">
      <summary>Inserts the string representation of a specified 16-bit signed integer into this instance at the specified character position.</summary>
      <returns>A reference to this instance after the insert operation has completed.</returns>
      <param name="index">The position in this instance where insertion begins. </param>
      <param name="value">The value to insert. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the length of this instance. </exception>
      <exception cref="T:System.OutOfMemoryException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Int32)">
      <summary>Inserts the string representation of a specified 32-bit signed integer into this instance at the specified character position.</summary>
      <returns>A reference to this instance after the insert operation has completed.</returns>
      <param name="index">The position in this instance where insertion begins. </param>
      <param name="value">The value to insert. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the length of this instance. </exception>
      <exception cref="T:System.OutOfMemoryException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Int64)">
      <summary>Inserts the string representation of a 64-bit signed integer into this instance at the specified character position.</summary>
      <returns>A reference to this instance after the insert operation has completed.</returns>
      <param name="index">The position in this instance where insertion begins. </param>
      <param name="value">The value to insert. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the length of this instance. </exception>
      <exception cref="T:System.OutOfMemoryException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Object)">
      <summary>Inserts the string representation of an object into this instance at the specified character position.</summary>
      <returns>A reference to this instance after the insert operation has completed.</returns>
      <param name="index">The position in this instance where insertion begins. </param>
      <param name="value">The object to insert, or null. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the length of this instance. </exception>
      <exception cref="T:System.OutOfMemoryException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.SByte)">
      <summary>Inserts the string representation of a specified 8-bit signed integer into this instance at the specified character position.</summary>
      <returns>A reference to this instance after the insert operation has completed.</returns>
      <param name="index">The position in this instance where insertion begins. </param>
      <param name="value">The value to insert. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the length of this instance. </exception>
      <exception cref="T:System.OutOfMemoryException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Single)">
      <summary>Inserts the string representation of a single-precision floating point number into this instance at the specified character position.</summary>
      <returns>A reference to this instance after the insert operation has completed.</returns>
      <param name="index">The position in this instance where insertion begins. </param>
      <param name="value">The value to insert. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the length of this instance. </exception>
      <exception cref="T:System.OutOfMemoryException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.String)">
      <summary>Inserts a string into this instance at the specified character position.</summary>
      <returns>A reference to this instance after the insert operation has completed.</returns>
      <param name="index">The position in this instance where insertion begins. </param>
      <param name="value">The string to insert. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the current length of this instance. -or-The current length of this <see cref="T:System.Text.StringBuilder" /> object plus the length of <paramref name="value" /> exceeds <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.String,System.Int32)">
      <summary>Inserts one or more copies of a specified string into this instance at the specified character position.</summary>
      <returns>A reference to this instance after insertion has completed.</returns>
      <param name="index">The position in this instance where insertion begins. </param>
      <param name="value">The string to insert. </param>
      <param name="count">The number of times to insert <paramref name="value" />. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the current length of this instance.-or- <paramref name="count" /> is less than zero. </exception>
      <exception cref="T:System.OutOfMemoryException">The current length of this <see cref="T:System.Text.StringBuilder" /> object plus the length of <paramref name="value" /> times <paramref name="count" /> exceeds <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.UInt16)">
      <summary>Inserts the string representation of a 16-bit unsigned integer into this instance at the specified character position.</summary>
      <returns>A reference to this instance after the insert operation has completed.</returns>
      <param name="index">The position in this instance where insertion begins. </param>
      <param name="value">The value to insert. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the length of this instance. </exception>
      <exception cref="T:System.OutOfMemoryException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.UInt32)">
      <summary>Inserts the string representation of a 32-bit unsigned integer into this instance at the specified character position.</summary>
      <returns>A reference to this instance after the insert operation has completed.</returns>
      <param name="index">The position in this instance where insertion begins. </param>
      <param name="value">The value to insert. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the length of this instance. </exception>
      <exception cref="T:System.OutOfMemoryException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.UInt64)">
      <summary>Inserts the string representation of a 64-bit unsigned integer into this instance at the specified character position.</summary>
      <returns>A reference to this instance after the insert operation has completed.</returns>
      <param name="index">The position in this instance where insertion begins. </param>
      <param name="value">The value to insert. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the length of this instance. </exception>
      <exception cref="T:System.OutOfMemoryException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Text.StringBuilder.Length">
      <summary>Gets or sets the length of the current <see cref="T:System.Text.StringBuilder" /> object.</summary>
      <returns>The length of this instance.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value specified for a set operation is less than zero or greater than <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Text.StringBuilder.MaxCapacity">
      <summary>Gets the maximum capacity of this instance.</summary>
      <returns>The maximum number of characters this instance can hold.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Remove(System.Int32,System.Int32)">
      <summary>Removes the specified range of characters from this instance.</summary>
      <returns>A reference to this instance after the excise operation has completed.</returns>
      <param name="startIndex">The zero-based position in this instance where removal begins. </param>
      <param name="length">The number of characters to remove. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="startIndex" /> or <paramref name="length" /> is less than zero, or <paramref name="startIndex" /> + <paramref name="length" /> is greater than the length of this instance. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.Char,System.Char)">
      <summary>Replaces all occurrences of a specified character in this instance with another specified character.</summary>
      <returns>A reference to this instance with <paramref name="oldChar" /> replaced by <paramref name="newChar" />.</returns>
      <param name="oldChar">The character to replace. </param>
      <param name="newChar">The character that replaces <paramref name="oldChar" />. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.Char,System.Char,System.Int32,System.Int32)">
      <summary>Replaces, within a substring of this instance, all occurrences of a specified character with another specified character.</summary>
      <returns>A reference to this instance with <paramref name="oldChar" /> replaced by <paramref name="newChar" /> in the range from <paramref name="startIndex" /> to <paramref name="startIndex" /> + <paramref name="count" /> -1.</returns>
      <param name="oldChar">The character to replace. </param>
      <param name="newChar">The character that replaces <paramref name="oldChar" />. </param>
      <param name="startIndex">The position in this instance where the substring begins. </param>
      <param name="count">The length of the substring. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> + <paramref name="count" /> is greater than the length of the value of this instance.-or- <paramref name="startIndex" /> or <paramref name="count" /> is less than zero. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.String,System.String)">
      <summary>Replaces all occurrences of a specified string in this instance with another specified string.</summary>
      <returns>A reference to this instance with all instances of <paramref name="oldValue" /> replaced by <paramref name="newValue" />.</returns>
      <param name="oldValue">The string to replace. </param>
      <param name="newValue">The string that replaces <paramref name="oldValue" />, or null. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldValue" /> is null. </exception>
      <exception cref="T:System.ArgumentException">The length of <paramref name="oldValue" /> is zero. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.String,System.String,System.Int32,System.Int32)">
      <summary>Replaces, within a substring of this instance, all occurrences of a specified string with another specified string.</summary>
      <returns>A reference to this instance with all instances of <paramref name="oldValue" /> replaced by <paramref name="newValue" /> in the range from <paramref name="startIndex" /> to <paramref name="startIndex" /> + <paramref name="count" /> - 1.</returns>
      <param name="oldValue">The string to replace. </param>
      <param name="newValue">The string that replaces <paramref name="oldValue" />, or null. </param>
      <param name="startIndex">The position in this instance where the substring begins. </param>
      <param name="count">The length of the substring. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldValue" /> is null. </exception>
      <exception cref="T:System.ArgumentException">The length of <paramref name="oldValue" /> is zero. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="count" /> is less than zero.-or- <paramref name="startIndex" /> plus <paramref name="count" /> indicates a character position not within this instance.-or- Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the data necessary to deserialize the current <see cref="T:System.Text.StringBuilder" /> object.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" />  object to populate with serialization information.</param>
      <param name="context">The place to store and retrieve serialized data. Reserved for future use.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is null. </exception>
    </member>
    <member name="M:System.Text.StringBuilder.ToString">
      <summary>Converts the value of this instance to a <see cref="T:System.String" />.</summary>
      <returns>A string whose value is the same as this instance.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.ToString(System.Int32,System.Int32)">
      <summary>Converts the value of a substring of this instance to a <see cref="T:System.String" />.</summary>
      <returns>A string whose value is the same as the specified substring of this instance.</returns>
      <param name="startIndex">The starting position of the substring in this instance. </param>
      <param name="length">The length of the substring. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="length" /> is less than zero.-or- The sum of <paramref name="startIndex" /> and <paramref name="length" /> is greater than the length of the current instance. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Text.UnicodeEncoding">
      <summary>Represents a UTF-16 encoding of Unicode characters. </summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UnicodeEncoding.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.UnicodeEncoding" /> class.</summary>
    </member>
    <member name="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.UnicodeEncoding" /> class. Parameters specify whether to use the big endian byte order and whether to provide a Unicode byte order mark.</summary>
      <param name="bigEndian">true to use the big endian byte order (most significant byte first), or false to use the little endian byte order (least significant byte first). </param>
      <param name="byteOrderMark">true to specify that a Unicode byte order mark is provided; otherwise, false. </param>
    </member>
    <member name="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.UnicodeEncoding" /> class. Parameters specify whether to use the big endian byte order, whether to provide a Unicode byte order mark, and whether to throw an exception when an invalid encoding is detected.</summary>
      <param name="bigEndian">true to use the big endian byte order (most significant byte first); false to use the little endian byte order (least significant byte first). </param>
      <param name="byteOrderMark">true to specify that a Unicode byte order mark is provided; otherwise, false. </param>
      <param name="throwOnInvalidBytes">true to specify that an exception should be thrown when an invalid encoding is detected; otherwise, false. </param>
    </member>
    <member name="F:System.Text.UnicodeEncoding.CharSize">
      <summary>Represents the Unicode version 2.0 character size in bytes. This field is a constant.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UnicodeEncoding.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Text.UnicodeEncoding" /> object.</summary>
      <returns>true if <paramref name="value" /> is an instance of <see cref="T:System.Text.UnicodeEncoding" /> and is equal to the current object; otherwise, false.</returns>
      <param name="value">The <see cref="T:System.Object" /> to compare with the current object. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)">
      <summary>Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</summary>
      <returns>The number of bytes produced by encoding the specified characters.</returns>
      <param name="chars">A pointer to the first character to encode. </param>
      <param name="count">The number of characters to encode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null (Nothing in Visual Basic .NET). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero.-or- The resulting number of bytes is greater than the maximum number that can be returned as an integer. </exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled and <paramref name="chars" /> contains an invalid sequence of characters. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for fuller explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
      <summary>Calculates the number of bytes produced by encoding a set of characters from the specified character array.</summary>
      <returns>The number of bytes produced by encoding the specified characters.</returns>
      <param name="chars">The character array containing the set of characters to encode. </param>
      <param name="index">The index of the first character to encode. </param>
      <param name="count">The number of characters to encode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null (Nothing). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.-or- <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="chars" />.-or- The resulting number of bytes is greater than the maximum number that can be returned as an integer. </exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for fuller explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetByteCount(System.String)">
      <summary>Calculates the number of bytes produced by encoding the characters in the specified <see cref="T:System.String" />.</summary>
      <returns>The number of bytes produced by encoding the specified characters.</returns>
      <param name="s">The <see cref="T:System.String" /> containing the set of characters to encode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null (Nothing). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting number of bytes is greater than the maximum number that can be returned as an integer. </exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="s" /> contains an invalid sequence of characters. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for fuller explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
      <summary>Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</summary>
      <returns>The actual number of bytes written at the location indicated by the <paramref name="bytes" /> parameter.</returns>
      <param name="chars">A pointer to the first character to encode. </param>
      <param name="charCount">The number of characters to encode. </param>
      <param name="bytes">A pointer to the location at which to start writing the resulting sequence of bytes. </param>
      <param name="byteCount">The maximum number of bytes to write. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null (Nothing).-or- <paramref name="bytes" /> is null (Nothing). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> or <paramref name="byteCount" /> is less than zero. </exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.-or- <paramref name="byteCount" /> is less than the resulting number of bytes. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for fuller explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>Encodes a set of characters from the specified character array into the specified byte array.</summary>
      <returns>The actual number of bytes written into <paramref name="bytes" />.</returns>
      <param name="chars">The character array containing the set of characters to encode. </param>
      <param name="charIndex">The index of the first character to encode. </param>
      <param name="charCount">The number of characters to encode. </param>
      <param name="bytes">The byte array to contain the resulting sequence of bytes. </param>
      <param name="byteIndex">The index at which to start writing the resulting sequence of bytes. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null (Nothing).-or- <paramref name="bytes" /> is null (Nothing). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.-or- <paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.-or- <paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />. </exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.-or- <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for fuller explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>Encodes a set of characters from the specified <see cref="T:System.String" /> into the specified byte array.</summary>
      <returns>The actual number of bytes written into <paramref name="bytes" />.</returns>
      <param name="s">The <see cref="T:System.String" /> containing the set of characters to encode. </param>
      <param name="charIndex">The index of the first character to encode. </param>
      <param name="charCount">The number of characters to encode. </param>
      <param name="bytes">The byte array to contain the resulting sequence of bytes. </param>
      <param name="byteIndex">The index at which to start writing the resulting sequence of bytes. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null (Nothing).-or- <paramref name="bytes" /> is null (Nothing). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.-or- <paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.-or- <paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />. </exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="s" /> contains an invalid sequence of characters.-or- <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for fuller explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)">
      <summary>Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</summary>
      <returns>The number of characters produced by decoding the specified sequence of bytes.</returns>
      <param name="bytes">A pointer to the first byte to decode. </param>
      <param name="count">The number of bytes to decode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null (Nothing). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero.-or- The resulting number of bytes is greater than the maximum number that can be returned as an integer. </exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for fuller explanation)-and-<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
      <summary>Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</summary>
      <returns>The number of characters produced by decoding the specified sequence of bytes.</returns>
      <param name="bytes">The byte array containing the sequence of bytes to decode. </param>
      <param name="index">The index of the first byte to decode. </param>
      <param name="count">The number of bytes to decode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null (Nothing). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.-or- <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.-or- The resulting number of bytes is greater than the maximum number that can be returned as an integer. </exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for fuller explanation)-and-<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
      <summary>Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</summary>
      <returns>The actual number of characters written at the location indicated by the <paramref name="chars" /> parameter.</returns>
      <param name="bytes">A pointer to the first byte to decode. </param>
      <param name="byteCount">The number of bytes to decode. </param>
      <param name="chars">A pointer to the location at which to start writing the resulting set of characters. </param>
      <param name="charCount">The maximum number of characters to write. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null (Nothing).-or- <paramref name="chars" /> is null (Nothing). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteCount" /> or <paramref name="charCount" /> is less than zero. </exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.-or- <paramref name="charCount" /> is less than the resulting number of characters. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for fuller explanation)-and-<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>Decodes a sequence of bytes from the specified byte array into the specified character array.</summary>
      <returns>The actual number of characters written into <paramref name="chars" />.</returns>
      <param name="bytes">The byte array containing the sequence of bytes to decode. </param>
      <param name="byteIndex">The index of the first byte to decode. </param>
      <param name="byteCount">The number of bytes to decode. </param>
      <param name="chars">The character array to contain the resulting set of characters. </param>
      <param name="charIndex">The index at which to start writing the resulting set of characters. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null (Nothing).-or- <paramref name="chars" /> is null (Nothing). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteIndex" /> or <paramref name="byteCount" /> or <paramref name="charIndex" /> is less than zero.-or- <paramref name="byteindex" /> and <paramref name="byteCount" /> do not denote a valid range in <paramref name="bytes" />.-or- <paramref name="charIndex" /> is not a valid index in <paramref name="chars" />. </exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.-or- <paramref name="chars" /> does not have enough capacity from <paramref name="charIndex" /> to the end of the array to accommodate the resulting characters. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for fuller explanation)-and-<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetDecoder">
      <summary>Obtains a decoder that converts a UTF-16 encoded sequence of bytes into a sequence of Unicode characters.</summary>
      <returns>A <see cref="T:System.Text.Decoder" /> that converts a UTF-16 encoded sequence of bytes into a sequence of Unicode characters.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetEncoder">
      <summary>Obtains an encoder that converts a sequence of Unicode characters into a UTF-16 encoded sequence of bytes.</summary>
      <returns>A <see cref="T:System.Text.Encoder" /> object that converts a sequence of Unicode characters into a UTF-16 encoded sequence of bytes.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>The hash code for the current <see cref="T:System.Text.UnicodeEncoding" /> object.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)">
      <summary>Calculates the maximum number of bytes produced by encoding the specified number of characters.</summary>
      <returns>The maximum number of bytes produced by encoding the specified number of characters.</returns>
      <param name="charCount">The number of characters to encode. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> is less than zero.-or- The resulting number of bytes is greater than the maximum number that can be returned as an integer. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for fuller explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)">
      <summary>Calculates the maximum number of characters produced by decoding the specified number of bytes.</summary>
      <returns>The maximum number of characters produced by decoding the specified number of bytes.</returns>
      <param name="byteCount">The number of bytes to decode. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteCount" /> is less than zero.-or- The resulting number of bytes is greater than the maximum number that can be returned as an integer. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for fuller explanation)-and-<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetPreamble">
      <summary>Returns a Unicode byte order mark encoded in UTF-16 format, if the constructor for this instance requests a byte order mark.</summary>
      <returns>A byte array containing the Unicode byte order mark, if the constructor for this instance requests a byte order mark. Otherwise, this method returns a byte array of length zero.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
      <summary>Decodes a range of bytes from a byte array into a string.</summary>
      <returns>A <see cref="T:System.String" /> object containing the results of decoding the specified sequence of bytes.</returns>
      <param name="bytes">The byte array containing the sequence of bytes to decode. </param>
      <param name="index">The index of the first byte to decode. </param>
      <param name="count">The number of bytes to decode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null (Nothing). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.-or- <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />. </exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for fuller explanation)-and-<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Text.UTF32Encoding">
      <summary>Represents a UTF-32 encoding of Unicode characters.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF32Encoding.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.UTF32Encoding" /> class.</summary>
    </member>
    <member name="M:System.Text.UTF32Encoding.#ctor(System.Boolean,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.UTF32Encoding" /> class. Parameters specify whether to use the big endian byte order and whether to provide a Unicode byte order mark.</summary>
      <param name="bigEndian">true to use the big endian byte order (most significant byte first), or false to use the little endian byte order (least significant byte first). </param>
      <param name="byteOrderMark">true to specify that a Unicode byte order mark is provided; otherwise, false. </param>
    </member>
    <member name="M:System.Text.UTF32Encoding.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.UTF32Encoding" /> class. Parameters specify whether to use the big endian byte order, whether to provide a Unicode byte order mark, and whether to throw an exception when an invalid encoding is detected.</summary>
      <param name="bigEndian">true to use the big endian byte order (most significant byte first), or false to use the little endian byte order (least significant byte first). </param>
      <param name="byteOrderMark">true to specify that a Unicode byte order mark is provided; otherwise, false. </param>
      <param name="throwOnInvalidCharacters">true to specify that an exception should be thrown when an invalid encoding is detected; otherwise, false. </param>
    </member>
    <member name="M:System.Text.UTF32Encoding.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Text.UTF32Encoding" /> object.</summary>
      <returns>true if <paramref name="value" /> is an instance of <see cref="T:System.Text.UTF32Encoding" /> and is equal to the current object; otherwise, false.</returns>
      <param name="value">The <see cref="T:System.Object" /> to compare with the current object. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.UTF32Encoding.GetByteCount(System.Char*,System.Int32)">
      <summary>Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</summary>
      <returns>The number of bytes produced by encoding the specified characters.</returns>
      <param name="chars">A pointer to the first character to encode. </param>
      <param name="count">The number of characters to encode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero.-or- The resulting number of bytes is greater than the maximum number that can be returned as an integer. </exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
      <summary>Calculates the number of bytes produced by encoding a set of characters from the specified character array.</summary>
      <returns>The number of bytes produced by encoding the specified characters.</returns>
      <param name="chars">The character array containing the set of characters to encode. </param>
      <param name="index">The index of the first character to encode. </param>
      <param name="count">The number of characters to encode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.-or- <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="chars" />.-or- The resulting number of bytes is greater than the maximum number that can be returned as an integer. </exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF32Encoding.GetByteCount(System.String)">
      <summary>Calculates the number of bytes produced by encoding the characters in the specified <see cref="T:System.String" />.</summary>
      <returns>The number of bytes produced by encoding the specified characters.</returns>
      <param name="s">The <see cref="T:System.String" /> containing the set of characters to encode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting number of bytes is greater than the maximum number that can be returned as an integer. </exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="s" /> contains an invalid sequence of characters. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF32Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
      <summary>Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</summary>
      <returns>The actual number of bytes written at the location indicated by the <paramref name="bytes" /> parameter.</returns>
      <param name="chars">A pointer to the first character to encode. </param>
      <param name="charCount">The number of characters to encode. </param>
      <param name="bytes">A pointer to the location at which to start writing the resulting sequence of bytes. </param>
      <param name="byteCount">The maximum number of bytes to write. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null.-or- <paramref name="bytes" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> or <paramref name="byteCount" /> is less than zero. </exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.-or- <paramref name="byteCount" /> is less than the resulting number of bytes. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF32Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>Encodes a set of characters from the specified character array into the specified byte array.</summary>
      <returns>The actual number of bytes written into <paramref name="bytes" />.</returns>
      <param name="chars">The character array containing the set of characters to encode. </param>
      <param name="charIndex">The index of the first character to encode. </param>
      <param name="charCount">The number of characters to encode. </param>
      <param name="bytes">The byte array to contain the resulting sequence of bytes. </param>
      <param name="byteIndex">The index at which to start writing the resulting sequence of bytes. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null.-or- <paramref name="bytes" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.-or- <paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.-or- <paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />. </exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.-or- <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>Encodes a set of characters from the specified <see cref="T:System.String" /> into the specified byte array.</summary>
      <returns>The actual number of bytes written into <paramref name="bytes" />.</returns>
      <param name="s">The <see cref="T:System.String" /> containing the set of characters to encode. </param>
      <param name="charIndex">The index of the first character to encode. </param>
      <param name="charCount">The number of characters to encode. </param>
      <param name="bytes">The byte array to contain the resulting sequence of bytes. </param>
      <param name="byteIndex">The index at which to start writing the resulting sequence of bytes. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null.-or- <paramref name="bytes" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.-or- <paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.-or- <paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />. </exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="s" /> contains an invalid sequence of characters.-or- <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF32Encoding.GetCharCount(System.Byte*,System.Int32)">
      <summary>Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</summary>
      <returns>The number of characters produced by decoding the specified sequence of bytes.</returns>
      <param name="bytes">A pointer to the first byte to decode. </param>
      <param name="count">The number of bytes to decode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero.-or- The resulting number of bytes is greater than the maximum number that can be returned as an integer. </exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
      <summary>Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</summary>
      <returns>The number of characters produced by decoding the specified sequence of bytes.</returns>
      <param name="bytes">The byte array containing the sequence of bytes to decode. </param>
      <param name="index">The index of the first byte to decode. </param>
      <param name="count">The number of bytes to decode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.-or- <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.-or- The resulting number of bytes is greater than the maximum number that can be returned as an integer. </exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF32Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
      <summary>Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</summary>
      <returns>The actual number of characters written at the location indicated by <paramref name="chars" />.</returns>
      <param name="bytes">A pointer to the first byte to decode. </param>
      <param name="byteCount">The number of bytes to decode. </param>
      <param name="chars">A pointer to the location at which to start writing the resulting set of characters. </param>
      <param name="charCount">The maximum number of characters to write. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null.-or- <paramref name="chars" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteCount" /> or <paramref name="charCount" /> is less than zero. </exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.-or- <paramref name="charCount" /> is less than the resulting number of characters. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>Decodes a sequence of bytes from the specified byte array into the specified character array.</summary>
      <returns>The actual number of characters written into <paramref name="chars" />.</returns>
      <param name="bytes">The byte array containing the sequence of bytes to decode. </param>
      <param name="byteIndex">The index of the first byte to decode. </param>
      <param name="byteCount">The number of bytes to decode. </param>
      <param name="chars">The character array to contain the resulting set of characters. </param>
      <param name="charIndex">The index at which to start writing the resulting set of characters. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null.-or- <paramref name="chars" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteIndex" /> or <paramref name="byteCount" /> or <paramref name="charIndex" /> is less than zero.-or- <paramref name="byteindex" /> and <paramref name="byteCount" /> do not denote a valid range in <paramref name="bytes" />.-or- <paramref name="charIndex" /> is not a valid index in <paramref name="chars" />. </exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.-or- <paramref name="chars" /> does not have enough capacity from <paramref name="charIndex" /> to the end of the array to accommodate the resulting characters. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF32Encoding.GetDecoder">
      <summary>Obtains a decoder that converts a UTF-32 encoded sequence of bytes into a sequence of Unicode characters.</summary>
      <returns>A <see cref="T:System.Text.Decoder" /> that converts a UTF-32 encoded sequence of bytes into a sequence of Unicode characters.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF32Encoding.GetEncoder">
      <summary>Obtains an encoder that converts a sequence of Unicode characters into a UTF-32 encoded sequence of bytes.</summary>
      <returns>A <see cref="T:System.Text.Encoder" /> that converts a sequence of Unicode characters into a UTF-32 encoded sequence of bytes.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF32Encoding.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>The hash code for the current <see cref="T:System.Text.UTF32Encoding" /> object.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)">
      <summary>Calculates the maximum number of bytes produced by encoding the specified number of characters.</summary>
      <returns>The maximum number of bytes produced by encoding the specified number of characters.</returns>
      <param name="charCount">The number of characters to encode. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> is less than zero.-or- The resulting number of bytes is greater than the maximum number that can be returned as an integer. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)">
      <summary>Calculates the maximum number of characters produced by decoding the specified number of bytes.</summary>
      <returns>The maximum number of characters produced by decoding the specified number of bytes.</returns>
      <param name="byteCount">The number of bytes to decode. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteCount" /> is less than zero.-or- The resulting number of bytes is greater than the maximum number that can be returned as an integer. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF32Encoding.GetPreamble">
      <summary>Returns a Unicode byte order mark encoded in UTF-32 format, if the constructor for this instance requests a byte order mark.</summary>
      <returns>A byte array containing the Unicode byte order mark, if the constructor for this instance requests a byte order mark. Otherwise, this method returns a byte array of length zero.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)">
      <summary>Decodes a range of bytes from a byte array into a string.</summary>
      <returns>A <see cref="T:System.String" /> containing the results of decoding the specified sequence of bytes.</returns>
      <param name="bytes">The byte array containing the sequence of bytes to decode. </param>
      <param name="index">The index of the first byte to decode. </param>
      <param name="count">The number of bytes to decode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.-or- <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />. </exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Text.UTF7Encoding">
      <summary>Represents a UTF-7 encoding of Unicode characters.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF7Encoding.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.UTF7Encoding" /> class.</summary>
    </member>
    <member name="M:System.Text.UTF7Encoding.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.UTF7Encoding" /> class. A parameter specifies whether to allow optional characters.</summary>
      <param name="allowOptionals">true to specify that optional characters are allowed; otherwise, false. </param>
    </member>
    <member name="M:System.Text.UTF7Encoding.Equals(System.Object)">
      <summary>Gets a value indicating whether the specified object is equal to the current <see cref="T:System.Text.UTF7Encoding" /> object.</summary>
      <returns>true if <paramref name="value" /> is a <see cref="T:System.Text.UTF7Encoding" /> object and is equal to the current <see cref="T:System.Text.UTF7Encoding" /> object; otherwise, false.</returns>
      <param name="value">An object to compare to the current <see cref="T:System.Text.UTF7Encoding" /> object.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.UTF7Encoding.GetByteCount(System.Char*,System.Int32)">
      <summary>Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</summary>
      <returns>The number of bytes produced by encoding the specified characters.</returns>
      <param name="chars">A pointer to the first character to encode. </param>
      <param name="count">The number of characters to encode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null (Nothing in Visual Basic .NET). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero.-or- The resulting number of bytes is greater than the maximum number that can be returned as an int. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
      <summary>Calculates the number of bytes produced by encoding a set of characters from the specified character array.</summary>
      <returns>The number of bytes produced by encoding the specified characters.</returns>
      <param name="chars">The character array containing the set of characters to encode. </param>
      <param name="index">The index of the first character to encode. </param>
      <param name="count">The number of characters to encode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null (Nothing). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.-or- <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="chars" />.-or- The resulting number of bytes is greater than the maximum number that can be returned as an int. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF7Encoding.GetByteCount(System.String)">
      <summary>Calculates the number of bytes produced by encoding the characters in the specified <see cref="T:System.String" /> object.</summary>
      <returns>The number of bytes produced by encoding the specified characters.</returns>
      <param name="s">The <see cref="T:System.String" /> object containing the set of characters to encode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null (Nothing). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting number of bytes is greater than the maximum number that can be returned as an int. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for fuller explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF7Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
      <summary>Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</summary>
      <returns>The actual number of bytes written at the location indicated by <paramref name="bytes" />.</returns>
      <param name="chars">A pointer to the first character to encode. </param>
      <param name="charCount">The number of characters to encode. </param>
      <param name="bytes">A pointer to the location at which to start writing the resulting sequence of bytes. </param>
      <param name="byteCount">The maximum number of bytes to write. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null (Nothing).-or- <paramref name="bytes" /> is null (Nothing). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> or <paramref name="byteCount" /> is less than zero. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="byteCount" /> is less than the resulting number of bytes. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for fuller explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF7Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>Encodes a set of characters from the specified character array into the specified byte array.</summary>
      <returns>The actual number of bytes written into <paramref name="bytes" />.</returns>
      <param name="chars">The character array containing the set of characters to encode. </param>
      <param name="charIndex">The index of the first character to encode. </param>
      <param name="charCount">The number of characters to encode. </param>
      <param name="bytes">The byte array to contain the resulting sequence of bytes. </param>
      <param name="byteIndex">The index at which to start writing the resulting sequence of bytes. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null (Nothing).-or- <paramref name="bytes" /> is null (Nothing). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.-or- <paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.-or- <paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for fuller explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>Encodes a set of characters from the specified <see cref="T:System.String" /> into the specified byte array.</summary>
      <returns>The actual number of bytes written into <paramref name="bytes" />.</returns>
      <param name="s">The <see cref="T:System.String" /> containing the set of characters to encode. </param>
      <param name="charIndex">The index of the first character to encode. </param>
      <param name="charCount">The number of characters to encode. </param>
      <param name="bytes">The byte array to contain the resulting sequence of bytes. </param>
      <param name="byteIndex">The index at which to start writing the resulting sequence of bytes. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null (Nothing).-or- <paramref name="bytes" /> is null (Nothing). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.-or- <paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.-or- <paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for fuller explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF7Encoding.GetCharCount(System.Byte*,System.Int32)">
      <summary>Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</summary>
      <returns>The number of characters produced by decoding the specified sequence of bytes.</returns>
      <param name="bytes">A pointer to the first byte to decode. </param>
      <param name="count">The number of bytes to decode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null (Nothing). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero.-or- The resulting number of characters is greater than the maximum number that can be returned as an int. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for fuller explanation)-and-<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
      <summary>Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</summary>
      <returns>The number of characters produced by decoding the specified sequence of bytes.</returns>
      <param name="bytes">The byte array containing the sequence of bytes to decode. </param>
      <param name="index">The index of the first byte to decode. </param>
      <param name="count">The number of bytes to decode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null (Nothing). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.-or- <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.-or- The resulting number of characters is greater than the maximum number that can be returned as an int. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF7Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
      <summary>Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</summary>
      <returns>The actual number of characters written at the location indicated by <paramref name="chars" />.</returns>
      <param name="bytes">A pointer to the first byte to decode. </param>
      <param name="byteCount">The number of bytes to decode. </param>
      <param name="chars">A pointer to the location at which to start writing the resulting set of characters. </param>
      <param name="charCount">The maximum number of characters to write. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null (Nothing).-or- <paramref name="chars" /> is null (Nothing). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteCount" /> or <paramref name="charCount" /> is less than zero. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="charCount" /> is less than the resulting number of characters. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>Decodes a sequence of bytes from the specified byte array into the specified character array.</summary>
      <returns>The actual number of characters written into <paramref name="chars" />.</returns>
      <param name="bytes">The byte array containing the sequence of bytes to decode. </param>
      <param name="byteIndex">The index of the first byte to decode. </param>
      <param name="byteCount">The number of bytes to decode. </param>
      <param name="chars">The character array to contain the resulting set of characters. </param>
      <param name="charIndex">The index at which to start writing the resulting set of characters. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null (Nothing).-or- <paramref name="chars" /> is null (Nothing). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteIndex" /> or <paramref name="byteCount" /> or <paramref name="charIndex" /> is less than zero.-or- <paramref name="byteindex" /> and <paramref name="byteCount" /> do not denote a valid range in <paramref name="bytes" />.-or- <paramref name="charIndex" /> is not a valid index in <paramref name="chars" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="chars" /> does not have enough capacity from <paramref name="charIndex" /> to the end of the array to accommodate the resulting characters. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF7Encoding.GetDecoder">
      <summary>Obtains a decoder that converts a UTF-7 encoded sequence of bytes into a sequence of Unicode characters.</summary>
      <returns>A <see cref="T:System.Text.Decoder" /> that converts a UTF-7 encoded sequence of bytes into a sequence of Unicode characters.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF7Encoding.GetEncoder">
      <summary>Obtains an encoder that converts a sequence of Unicode characters into a UTF-7 encoded sequence of bytes.</summary>
      <returns>A <see cref="T:System.Text.Encoder" /> that converts a sequence of Unicode characters into a UTF-7 encoded sequence of bytes.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF7Encoding.GetHashCode">
      <summary>Returns the hash code for the current <see cref="T:System.Text.UTF7Encoding" /> object.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)">
      <summary>Calculates the maximum number of bytes produced by encoding the specified number of characters.</summary>
      <returns>The maximum number of bytes produced by encoding the specified number of characters.</returns>
      <param name="charCount">The number of characters to encode. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> is less than zero.-or- The resulting number of bytes is greater than the maximum number that can be returned as an int. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)">
      <summary>Calculates the maximum number of characters produced by decoding the specified number of bytes.</summary>
      <returns>The maximum number of characters produced by decoding the specified number of bytes.</returns>
      <param name="byteCount">The number of bytes to decode. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteCount" /> is less than zero.-or- The resulting number of characters is greater than the maximum number that can be returned as an int. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)">
      <summary>Decodes a range of bytes from a byte array into a string.</summary>
      <returns>A <see cref="T:System.String" /> containing the results of decoding the specified sequence of bytes.</returns>
      <param name="bytes">The byte array containing the sequence of bytes to decode. </param>
      <param name="index">The index of the first byte to decode. </param>
      <param name="count">The number of bytes to decode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null (Nothing). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.-or- <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for fuller explanation)-and-<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Text.UTF8Encoding">
      <summary>Represents a UTF-8 encoding of Unicode characters.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF8Encoding.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.UTF8Encoding" /> class.</summary>
    </member>
    <member name="M:System.Text.UTF8Encoding.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.UTF8Encoding" /> class. A parameter specifies whether to provide a Unicode byte order mark.</summary>
      <param name="encoderShouldEmitUTF8Identifier">true to specify that a Unicode byte order mark is provided; otherwise, false. </param>
    </member>
    <member name="M:System.Text.UTF8Encoding.#ctor(System.Boolean,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.UTF8Encoding" /> class. Parameters specify whether to provide a Unicode byte order mark and whether to throw an exception when an invalid encoding is detected.</summary>
      <param name="encoderShouldEmitUTF8Identifier">true to specify that a Unicode byte order mark is provided; otherwise, false. </param>
      <param name="throwOnInvalidBytes">true to specify that an exception be thrown when an invalid encoding is detected; otherwise, false. </param>
    </member>
    <member name="M:System.Text.UTF8Encoding.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Text.UTF8Encoding" /> object.</summary>
      <returns>true if <paramref name="value" /> is an instance of <see cref="T:System.Text.UTF8Encoding" /> and is equal to the current object; otherwise, false.</returns>
      <param name="value">The <see cref="T:System.Object" /> to compare with the current instance. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetByteCount(System.Char*,System.Int32)">
      <summary>Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</summary>
      <returns>The number of bytes produced by encoding the specified characters.</returns>
      <param name="chars">A pointer to the first character to encode. </param>
      <param name="count">The number of characters to encode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero.-or- The resulting number of bytes is greater than the maximum number that can be returned as an integer. </exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
      <summary>Calculates the number of bytes produced by encoding a set of characters from the specified character array.</summary>
      <returns>The number of bytes produced by encoding the specified characters.</returns>
      <param name="chars">The character array containing the set of characters to encode. </param>
      <param name="index">The index of the first character to encode. </param>
      <param name="count">The number of characters to encode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.-or- <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="chars" />.-or- The resulting number of bytes is greater than the maximum number that can be returned as an integer. </exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetByteCount(System.String)">
      <summary>Calculates the number of bytes produced by encoding the characters in the specified <see cref="T:System.String" />.</summary>
      <returns>The number of bytes produced by encoding the specified characters.</returns>
      <param name="chars">The <see cref="T:System.String" /> containing the set of characters to encode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting number of bytes is greater than the maximum number that can be returned as an integer. </exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
      <summary>Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</summary>
      <returns>The actual number of bytes written at the location indicated by <paramref name="bytes" />.</returns>
      <param name="chars">A pointer to the first character to encode. </param>
      <param name="charCount">The number of characters to encode. </param>
      <param name="bytes">A pointer to the location at which to start writing the resulting sequence of bytes. </param>
      <param name="byteCount">The maximum number of bytes to write. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null.-or- <paramref name="bytes" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> or <paramref name="byteCount" /> is less than zero. </exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.-or- <paramref name="byteCount" /> is less than the resulting number of bytes. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>Encodes a set of characters from the specified character array into the specified byte array.</summary>
      <returns>The actual number of bytes written into <paramref name="bytes" />.</returns>
      <param name="chars">The character array containing the set of characters to encode. </param>
      <param name="charIndex">The index of the first character to encode. </param>
      <param name="charCount">The number of characters to encode. </param>
      <param name="bytes">The byte array to contain the resulting sequence of bytes. </param>
      <param name="byteIndex">The index at which to start writing the resulting sequence of bytes. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null.-or- <paramref name="bytes" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.-or- <paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.-or- <paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />. </exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.-or- <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>Encodes a set of characters from the specified <see cref="T:System.String" /> into the specified byte array.</summary>
      <returns>The actual number of bytes written into <paramref name="bytes" />.</returns>
      <param name="s">The <see cref="T:System.String" /> containing the set of characters to encode. </param>
      <param name="charIndex">The index of the first character to encode. </param>
      <param name="charCount">The number of characters to encode. </param>
      <param name="bytes">The byte array to contain the resulting sequence of bytes. </param>
      <param name="byteIndex">The index at which to start writing the resulting sequence of bytes. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null.-or- <paramref name="bytes" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.-or- <paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.-or- <paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />. </exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="s" /> contains an invalid sequence of characters.-or- <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetCharCount(System.Byte*,System.Int32)">
      <summary>Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</summary>
      <returns>The number of characters produced by decoding the specified sequence of bytes.</returns>
      <param name="bytes">A pointer to the first byte to decode. </param>
      <param name="count">The number of bytes to decode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero.-or- The resulting number of bytes is greater than the maximum number that can be returned as an integer. </exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
      <summary>Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</summary>
      <returns>The number of characters produced by decoding the specified sequence of bytes.</returns>
      <param name="bytes">The byte array containing the sequence of bytes to decode. </param>
      <param name="index">The index of the first byte to decode. </param>
      <param name="count">The number of bytes to decode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.-or- <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.-or- The resulting number of bytes is greater than the maximum number that can be returned as an integer. </exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
      <summary>Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</summary>
      <returns>The actual number of characters written at the location indicated by <paramref name="chars" />.</returns>
      <param name="bytes">A pointer to the first byte to decode. </param>
      <param name="byteCount">The number of bytes to decode. </param>
      <param name="chars">A pointer to the location at which to start writing the resulting set of characters. </param>
      <param name="charCount">The maximum number of characters to write. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null.-or- <paramref name="chars" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteCount" /> or <paramref name="charCount" /> is less than zero. </exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.-or- <paramref name="charCount" /> is less than the resulting number of characters. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>Decodes a sequence of bytes from the specified byte array into the specified character array.</summary>
      <returns>The actual number of characters written into <paramref name="chars" />.</returns>
      <param name="bytes">The byte array containing the sequence of bytes to decode. </param>
      <param name="byteIndex">The index of the first byte to decode. </param>
      <param name="byteCount">The number of bytes to decode. </param>
      <param name="chars">The character array to contain the resulting set of characters. </param>
      <param name="charIndex">The index at which to start writing the resulting set of characters. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null.-or- <paramref name="chars" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteIndex" /> or <paramref name="byteCount" /> or <paramref name="charIndex" /> is less than zero.-or- <paramref name="byteindex" /> and <paramref name="byteCount" /> do not denote a valid range in <paramref name="bytes" />.-or- <paramref name="charIndex" /> is not a valid index in <paramref name="chars" />. </exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.-or- <paramref name="chars" /> does not have enough capacity from <paramref name="charIndex" /> to the end of the array to accommodate the resulting characters. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetDecoder">
      <summary>Obtains a decoder that converts a UTF-8 encoded sequence of bytes into a sequence of Unicode characters.</summary>
      <returns>A <see cref="T:System.Text.Decoder" /> that converts a UTF-8 encoded sequence of bytes into a sequence of Unicode characters.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetEncoder">
      <summary>Obtains an encoder that converts a sequence of Unicode characters into a UTF-8 encoded sequence of bytes.</summary>
      <returns>A <see cref="T:System.Text.Encoder" /> that converts a sequence of Unicode characters into a UTF-8 encoded sequence of bytes.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>The hash code for the current instance.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)">
      <summary>Calculates the maximum number of bytes produced by encoding the specified number of characters.</summary>
      <returns>The maximum number of bytes produced by encoding the specified number of characters.</returns>
      <param name="charCount">The number of characters to encode. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> is less than zero.-or- The resulting number of bytes is greater than the maximum number that can be returned as an integer. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)">
      <summary>Calculates the maximum number of characters produced by decoding the specified number of bytes.</summary>
      <returns>The maximum number of characters produced by decoding the specified number of bytes.</returns>
      <param name="byteCount">The number of bytes to decode. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteCount" /> is less than zero.-or- The resulting number of bytes is greater than the maximum number that can be returned as an integer. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetPreamble">
      <summary>Returns a Unicode byte order mark encoded in UTF-8 format, if the constructor for this instance requests a byte order mark.</summary>
      <returns>A byte array containing the Unicode byte order mark, if the constructor for this instance requests a byte order mark. Otherwise, this method returns a byte array of length zero.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)">
      <summary>Decodes a range of bytes from a byte array into a string.</summary>
      <returns>A <see cref="T:System.String" /> containing the results of decoding the specified sequence of bytes.</returns>
      <param name="bytes">The byte array containing the sequence of bytes to decode. </param>
      <param name="index">The index of the first byte to decode. </param>
      <param name="count">The number of bytes to decode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.-or- <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />. </exception>
      <exception cref="T:System.ArgumentException">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes. </exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation)-and-<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetBytes(System.String)"></member>
    <member name="T:System.Threading.AbandonedMutexException">
      <summary>The exception that is thrown when one thread acquires a <see cref="T:System.Threading.Mutex" /> object that another thread has abandoned by exiting without releasing it.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.AbandonedMutexException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.AbandonedMutexException" /> class with default values.</summary>
    </member>
    <member name="M:System.Threading.AbandonedMutexException.#ctor(System.Int32,System.Threading.WaitHandle)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.AbandonedMutexException" /> class with a specified index for the abandoned mutex, if applicable, and a <see cref="T:System.Threading.Mutex" /> object that represents the mutex.</summary>
      <param name="location">The index of the abandoned mutex in the array of wait handles if the exception is thrown for the <see cref="Overload:System.Threading.WaitHandle.WaitAny" /> method, or –1 if the exception is thrown for the <see cref="Overload:System.Threading.WaitHandle.WaitOne" /> or <see cref="Overload:System.Threading.WaitHandle.WaitAll" /> methods.</param>
      <param name="handle">A <see cref="T:System.Threading.Mutex" /> object that represents the abandoned mutex.</param>
    </member>
    <member name="M:System.Threading.AbandonedMutexException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.AbandonedMutexException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception being thrown. </param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Threading.AbandonedMutexException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.AbandonedMutexException" /> class with a specified error message.</summary>
      <param name="message">An error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.AbandonedMutexException" /> class with a specified error message and inner exception. </summary>
      <param name="message">An error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception,System.Int32,System.Threading.WaitHandle)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.AbandonedMutexException" /> class with a specified error message, the inner exception, the index for the abandoned mutex, if applicable, and a <see cref="T:System.Threading.Mutex" /> object that represents the mutex.</summary>
      <param name="message">An error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
      <param name="location">The index of the abandoned mutex in the array of wait handles if the exception is thrown for the <see cref="Overload:System.Threading.WaitHandle.WaitAny" /> method, or –1 if the exception is thrown for the <see cref="Overload:System.Threading.WaitHandle.WaitOne" /> or <see cref="Overload:System.Threading.WaitHandle.WaitAll" /> methods.</param>
      <param name="handle">A <see cref="T:System.Threading.Mutex" /> object that represents the abandoned mutex.</param>
    </member>
    <member name="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Int32,System.Threading.WaitHandle)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.AbandonedMutexException" /> class with a specified error message, the index of the abandoned mutex, if applicable, and the abandoned mutex. </summary>
      <param name="message">An error message that explains the reason for the exception.</param>
      <param name="location">The index of the abandoned mutex in the array of wait handles if the exception is thrown for the <see cref="Overload:System.Threading.WaitHandle.WaitAny" /> method, or –1 if the exception is thrown for the <see cref="Overload:System.Threading.WaitHandle.WaitOne" /> or <see cref="Overload:System.Threading.WaitHandle.WaitAll" /> methods.</param>
      <param name="handle">A <see cref="T:System.Threading.Mutex" /> object that represents the abandoned mutex.</param>
    </member>
    <member name="P:System.Threading.AbandonedMutexException.Mutex">
      <summary>Gets the abandoned mutex that caused the exception, if known.</summary>
      <returns>A <see cref="T:System.Threading.Mutex" /> object that represents the abandoned mutex, or null if the abandoned mutex could not be identified.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Threading.AbandonedMutexException.MutexIndex">
      <summary>Gets the index of the abandoned mutex that caused the exception, if known.</summary>
      <returns>The index, in the array of wait handles passed to the <see cref="Overload:System.Threading.WaitHandle.WaitAny" /> method, of the <see cref="T:System.Threading.Mutex" /> object that represents the abandoned mutex, or –1 if the index of the abandoned mutex could not be determined.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Threading.ApartmentState">
      <summary>Specifies the apartment state of a <see cref="T:System.Threading.Thread" />.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Threading.ApartmentState.STA">
      <summary>The <see cref="T:System.Threading.Thread" /> will create and enter a single-threaded apartment.</summary>
    </member>
    <member name="F:System.Threading.ApartmentState.MTA">
      <summary>The <see cref="T:System.Threading.Thread" /> will create and enter a multithreaded apartment.</summary>
    </member>
    <member name="F:System.Threading.ApartmentState.Unknown">
      <summary>The <see cref="P:System.Threading.Thread.ApartmentState" /> property has not been set.</summary>
    </member>
    <member name="T:System.Threading.AsyncFlowControl">
      <summary>Provides the functionality to restore the migration, or flow, of the execution context between threads.  </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.AsyncFlowControl.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.Threading.AsyncFlowControl" /> class.</summary>
    </member>
    <member name="M:System.Threading.AsyncFlowControl.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current <see cref="T:System.Threading.AsyncFlowControl" /> structure. </summary>
      <returns>true if <paramref name="obj" /> is an <see cref="T:System.Threading.AsyncFlowControl" /> structure and is equal to the current <see cref="T:System.Threading.AsyncFlowControl" /> structure; otherwise, false. </returns>
      <param name="obj">An object to compare with the current structure.</param>
    </member>
    <member name="M:System.Threading.AsyncFlowControl.Equals(System.Threading.AsyncFlowControl)">
      <summary>Determines whether the specified <see cref="T:System.Threading.AsyncFlowControl" /> structure is equal to the current <see cref="T:System.Threading.AsyncFlowControl" /> structure.</summary>
      <returns>true if <paramref name="obj" /> is equal to the current <see cref="T:System.Threading.AsyncFlowControl" /> structure; otherwise, false.</returns>
      <param name="obj">An <see cref="T:System.Threading.AsyncFlowControl" /> structure to compare with the current structure.</param>
    </member>
    <member name="M:System.Threading.AsyncFlowControl.GetHashCode">
      <summary>Gets a hash code for the current <see cref="T:System.Threading.AsyncFlowControl" /> structure.</summary>
      <returns>A hash code for the current <see cref="T:System.Threading.AsyncFlowControl" /> structure.</returns>
    </member>
    <member name="M:System.Threading.AsyncFlowControl.op_Equality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)">
      <summary>Compares two <see cref="T:System.Threading.AsyncFlowControl" /> structures to determine whether they are equal. </summary>
      <returns>true if the two structures are equal; otherwise, false. </returns>
      <param name="a">An <see cref="T:System.Threading.AsyncFlowControl" /> structure.</param>
      <param name="b">An <see cref="T:System.Threading.AsyncFlowControl" /> structure.</param>
    </member>
    <member name="M:System.Threading.AsyncFlowControl.op_Inequality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)">
      <summary>Compares two <see cref="T:System.Threading.AsyncFlowControl" /> structures to determine whether they are not equal. </summary>
      <returns>true if the structures are not equal; otherwise, false. </returns>
      <param name="a">An <see cref="T:System.Threading.AsyncFlowControl" /> structure.</param>
      <param name="b">An <see cref="T:System.Threading.AsyncFlowControl" /> structure.</param>
    </member>
    <member name="M:System.Threading.AsyncFlowControl.Undo">
      <summary>Restores the flow of the execution context between threads.</summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Threading.AsyncFlowControl" /> structure is not used on the thread where it was created.-or-The <see cref="T:System.Threading.AsyncFlowControl" /> structure has already been used to call <see cref="M:System.Threading.AsyncFlowControl.Undo" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Threading.AutoResetEvent">
      <summary>Notifies a waiting thread that an event has occurred. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.AutoResetEvent" /> class with a Boolean value indicating whether to set the initial state to signaled.</summary>
      <param name="initialState">true to set the initial state to signaled; false to set the initial state to non-signaled. </param>
    </member>
    <member name="T:System.Threading.CancellationToken">
      <summary>Propogates notification that operations should be canceled.</summary>
    </member>
    <member name="M:System.Threading.CancellationToken.#ctor(System.Boolean)">
      <summary>Initializes the <see cref="T:System.Threading.CancellationToken" />.</summary>
      <param name="canceled">The canceled state for the token.</param>
    </member>
    <member name="P:System.Threading.CancellationToken.CanBeCanceled">
      <summary>Gets whether this token is capable of being in the canceled state.</summary>
      <returns>true if this token is capable of being in the canceled state; otherwise false.</returns>
    </member>
    <member name="M:System.Threading.CancellationToken.Equals(System.Object)">
      <summary>Determines whether the current <see cref="T:System.Threading.CancellationToken" /> instance is equal to the specified <see cref="T:System.Object" />.</summary>
      <returns>True if <paramref name="other" /> is a <see cref="T:System.Threading.CancellationToken" /> and if the two instances are equal; otherwise, false. Two tokens are equal if they are associated with the same <see cref="T:System.Threading.CancellationTokenSource" /> or if they were both constructed from public CancellationToken constructors and their <see cref="P:System.Threading.CancellationToken.IsCancellationRequested" /> values are equal.</returns>
      <param name="other">The other object to which to compare this instance.</param>
      <exception cref="T:System.ObjectDisposedException">An associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.Equals(System.Threading.CancellationToken)">
      <summary>Determines whether the current <see cref="T:System.Threading.CancellationToken" /> instance is equal to the specified token.</summary>
      <returns>True if the instances are equal; otherwise, false. Two tokens are equal if they are associated with the same <see cref="T:System.Threading.CancellationTokenSource" /> or if they were both constructed from public CancellationToken constructors and their <see cref="P:System.Threading.CancellationToken.IsCancellationRequested" /> values are equal.</returns>
      <param name="other">The other <see cref="T:System.Threading.CancellationToken" /> to which to compare this instance.</param>
    </member>
    <member name="M:System.Threading.CancellationToken.GetHashCode">
      <summary>Serves as a hash function for a <see cref="T:System.Threading.CancellationToken" />.</summary>
      <returns>A hash code for the current <see cref="T:System.Threading.CancellationToken" /> instance.</returns>
    </member>
    <member name="P:System.Threading.CancellationToken.IsCancellationRequested">
      <summary>Gets whether cancellation has been requested for this token.</summary>
      <returns>true if cancellation has been requested for this token; otherwise false.</returns>
    </member>
    <member name="P:System.Threading.CancellationToken.None">
      <summary>Returns an empty CancellationToken value.</summary>
      <returns>Returns an empty CancellationToken value.</returns>
    </member>
    <member name="M:System.Threading.CancellationToken.op_Equality(System.Threading.CancellationToken,System.Threading.CancellationToken)">
      <summary>Determines whether two <see cref="T:System.Threading.CancellationToken" /> instances are equal.</summary>
      <returns>True if the instances are equal; otherwise, false.</returns>
      <param name="left">The first instance.</param>
      <param name="right">The second instance.</param>
      <exception cref="T:System.ObjectDisposedException">An associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.op_Inequality(System.Threading.CancellationToken,System.Threading.CancellationToken)">
      <summary>Determines whether two <see cref="T:System.Threading.CancellationToken" /> instances are not equal.</summary>
      <returns>True if the instances are not equal; otherwise, false.</returns>
      <param name="left">The first instance.</param>
      <param name="right">The second instance.</param>
      <exception cref="T:System.ObjectDisposedException">An associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.Register(System.Action)">
      <summary>Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</summary>
      <returns>The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to deregister the callback.</returns>
      <param name="callback">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</param>
      <exception cref="T:System.ObjectDisposedException">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> is null.</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.Register(System.Action,System.Boolean)">
      <summary>Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</summary>
      <returns>The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to deregister the callback.</returns>
      <param name="callback">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</param>
      <param name="useSynchronizationContext">A Boolean value that indicates whether to capture the current <see cref="T:System.Threading.SynchronizationContext" /> and use it when invoking the <paramref name="callback" />.</param>
      <exception cref="T:System.ObjectDisposedException">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> is null.</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object)">
      <summary>Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</summary>
      <returns>The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to deregister the callback.</returns>
      <param name="callback">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</param>
      <param name="state">The state to pass to the <paramref name="callback" /> when the delegate is invoked. This may be null.</param>
      <exception cref="T:System.ObjectDisposedException">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> is null.</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object,System.Boolean)">
      <summary>Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</summary>
      <returns>The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to deregister the callback.</returns>
      <param name="callback">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</param>
      <param name="state">The state to pass to the <paramref name="callback" /> when the delegate is invoked. This may be null.</param>
      <param name="useSynchronizationContext">A Boolean value that indicates whether to capture the current <see cref="T:System.Threading.SynchronizationContext" /> and use it when invoking the <paramref name="callback" />.</param>
      <exception cref="T:System.ObjectDisposedException">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> is null.</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.ThrowIfCancellationRequested">
      <summary>Throws a <see cref="T:System.OperationCanceledException" /> if this token has had cancellation requested.</summary>
      <exception cref="T:System.OperationCanceledException">The token has had cancellation requested.</exception>
      <exception cref="T:System.ObjectDisposedException">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</exception>
    </member>
    <member name="P:System.Threading.CancellationToken.WaitHandle">
      <summary>Gets a <see cref="T:System.Threading.WaitHandle" /> that is signaled when the token is canceled.</summary>
      <returns>A <see cref="T:System.Threading.WaitHandle" /> that is signaled when the token is canceled.</returns>
      <exception cref="T:System.ObjectDisposedException">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</exception>
    </member>
    <member name="T:System.Threading.CancellationTokenRegistration">
      <summary>Represents a callback delegate that has been registered with a <see cref="T:System.Threading.CancellationToken" />.</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.Threading.CancellationTokenRegistration" /> class.</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.Equals(System.Object)">
      <summary>Determines whether the current <see cref="T:System.Threading.CancellationTokenRegistration" /> instance is equal to the specified <see cref="T:System.Object" />.</summary>
      <returns>True, if both this and <paramref name="obj" /> are equal. False, otherwise. Two <see cref="T:System.Threading.CancellationTokenRegistration" /> instances are equal if they both refer to the output of a single call to the same Register method of a <see cref="T:System.Threading.CancellationToken" />.</returns>
      <param name="obj">The other object to which to compare this instance.</param>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.Equals(System.Threading.CancellationTokenRegistration)">
      <summary>Determines whether the current <see cref="T:System.Threading.CancellationToken" /> instance is equal to the specified <see cref="T:System.Object" />.</summary>
      <returns>True, if both this and <paramref name="other" /> are equal. False, otherwise. Two <see cref="T:System.Threading.CancellationTokenRegistration" /> instances are equal if they both refer to the output of a single call to the same Register method of a <see cref="T:System.Threading.CancellationToken" />.</returns>
      <param name="other">The other <see cref="T:System.Threading.CancellationTokenRegistration" /> to which to compare this instance.</param>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.GetHashCode">
      <summary>Serves as a hash function for a <see cref="T:System.Threading.CancellationTokenRegistration" />.</summary>
      <returns>A hash code for the current <see cref="T:System.Threading.CancellationTokenRegistration" /> instance.</returns>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.op_Equality(System.Threading.CancellationTokenRegistration,System.Threading.CancellationTokenRegistration)">
      <summary>Determines whether two <see cref="T:System.Threading.CancellationTokenRegistration" /> instances are equal.</summary>
      <returns>True if the instances are equal; otherwise, false.</returns>
      <param name="left">The first instance.</param>
      <param name="right">The second instance.</param>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.op_Inequality(System.Threading.CancellationTokenRegistration,System.Threading.CancellationTokenRegistration)">
      <summary>Determines whether two <see cref="T:System.Threading.CancellationTokenRegistration" /> instances are not equal.</summary>
      <returns>True if the instances are not equal; otherwise, false.</returns>
      <param name="left">The first instance.</param>
      <param name="right">The second instance.</param>
    </member>
    <member name="T:System.Threading.CancellationTokenSource">
      <summary>Signals to a <see cref="T:System.Threading.CancellationToken" /> that it should be canceled.</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.#ctor">
      <summary>Initializes the <see cref="T:System.Threading.CancellationTokenSource" />.</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Cancel">
      <summary>Communicates a request for cancellation.</summary>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</exception>
      <exception cref="T:System.AggregateException">An aggregate exception containing all the exceptions thrown by the registered callbacks on the associated <see cref="T:System.Threading.CancellationToken" />.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
      <summary>Communicates a request for cancellation.</summary>
      <param name="throwOnFirstException">Specifies whether exceptions should immediately propagate.</param>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</exception>
      <exception cref="T:System.AggregateException">An aggregate exception containing all the exceptions thrown by the registered callbacks on the associated <see cref="T:System.Threading.CancellationToken" />.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)">
      <summary>Creates a <see cref="T:System.Threading.CancellationTokenSource" /> that will be in the canceled state when any of the source tokens are in the canceled state.</summary>
      <returns>A <see cref="T:System.Threading.CancellationTokenSource" /> that is linked to the source tokens.</returns>
      <param name="token1">The first <see cref="T:System.Threading.CancellationToken" /> to observe.</param>
      <param name="token2">The second <see cref="T:System.Threading.CancellationToken" /> to observe.</param>
      <exception cref="T:System.ObjectDisposedException">A <see cref="T:System.Threading.CancellationTokenSource" /> associated with one of the source tokens has been disposed.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])">
      <summary>Creates a <see cref="T:System.Threading.CancellationTokenSource" /> that will be in the canceled state when any of the source tokens are in the canceled state.</summary>
      <returns>A <see cref="T:System.Threading.CancellationTokenSource" /> that is linked to the source tokens.</returns>
      <param name="tokens">The <see cref="T:System.Threading.CancellationToken" /> instances to observe.</param>
      <exception cref="T:System.ObjectDisposedException">A <see cref="T:System.Threading.CancellationTokenSource" /> associated with one of the source tokens has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokens" /> is null.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.Threading.CancellationTokenSource" /> class.</summary>
    </member>
    <member name="P:System.Threading.CancellationTokenSource.IsCancellationRequested">
      <summary>Gets whether cancellation has been requested for this <see cref="T:System.Threading.CancellationTokenSource" />.</summary>
      <returns>Whether cancellation has been requested for this <see cref="T:System.Threading.CancellationTokenSource" />.</returns>
    </member>
    <member name="P:System.Threading.CancellationTokenSource.Token">
      <summary>Gets the <see cref="T:System.Threading.CancellationToken" /> associated with this <see cref="T:System.Threading.CancellationTokenSource" />.</summary>
      <returns>The <see cref="T:System.Threading.CancellationToken" /> associated with this <see cref="T:System.Threading.CancellationTokenSource" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The token source has been disposed.</exception>
    </member>
    <member name="T:System.Threading.CompressedStack">
      <summary>Provides methods for setting and capturing the compressed stack on the current thread. This class cannot be inherited. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.CompressedStack.Capture">
      <summary>Captures the compressed stack from the current thread.</summary>
      <returns>A <see cref="T:System.Threading.CompressedStack" /> object.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.CompressedStack.CreateCopy">
      <summary>Creates a copy of the current compressed stack.</summary>
      <returns>A <see cref="T:System.Threading.CompressedStack" /> object representing the current compressed stack.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.CompressedStack.GetCompressedStack">
      <summary>Gets the compressed stack for the current thread.</summary>
      <returns>A <see cref="T:System.Threading.CompressedStack" /> for the current thread.</returns>
      <exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code.-or-The request for <see cref="T:System.Security.Permissions.StrongNameIdentityPermission" /> failed.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Security.Permissions.StrongNameIdentityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PublicKeyBlob="00000000000000000400000000000000" />
      </PermissionSet>
    </member>
    <member name="M:System.Threading.CompressedStack.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the logical context information needed to recreate an instance of this execution context.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object to be populated with serialization information. </param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> structure representing the destination context of the serialization. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is null. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.CompressedStack.Run(System.Threading.CompressedStack,System.Threading.ContextCallback,System.Object)">
      <summary>Runs a method in the specified compressed stack on the current thread.</summary>
      <param name="compressedStack">The <see cref="T:System.Threading.CompressedStack" /> to set.</param>
      <param name="callback">A <see cref="T:System.Threading.ContextCallback" /> that represents the method to be run in the specified security context.</param>
      <param name="state">The object to be passed to the callback method.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="compressedStack" /> is null.</exception>
    </member>
    <member name="T:System.Threading.ContextCallback">
      <summary>Represents a method to be called within a new context.  </summary>
      <param name="state">An object containing information to be used by the callback method each time it executes.</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Threading.CountdownEvent">
      <summary>Represents a synchronization primitive that is signaled when its count reaches zero.</summary>
    </member>
    <member name="M:System.Threading.CountdownEvent.#ctor(System.Int32)">
      <summary>Initializes a new instance of <see cref="T:System.Threading.CountdownEvent" /> class with the specified count.</summary>
      <param name="initialCount">The number of signals required to set the <see cref="T:System.Threading.CountdownEvent" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="initialCount" /> is less than 0.</exception>
    </member>
    <member name="M:System.Threading.CountdownEvent.AddCount">
      <summary>Increments the <see cref="T:System.Threading.CountdownEvent" />'s current count by one.</summary>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The current instance is already set.-or-<see cref="P:System.Threading.CountdownEvent.CurrentCount" /> is equal to <see cref="T:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Threading.CountdownEvent.AddCount(System.Int32)">
      <summary>Increments the <see cref="T:System.Threading.CountdownEvent" />'s current count by a specified value.</summary>
      <param name="signalCount">The value by which to increase <see cref="P:System.Threading.CountdownEvent.CurrentCount" />.</param>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signalCount" /> is less than 0.</exception>
      <exception cref="T:System.InvalidOperationException">The current instance is already set.-or-<see cref="P:System.Threading.CountdownEvent.CurrentCount" /> is equal to <see cref="T:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="P:System.Threading.CountdownEvent.CurrentCount">
      <summary>Gets the number of remaining signals required to set the event.</summary>
      <returns> The number of remaining signals required to set the event.</returns>
    </member>
    <member name="M:System.Threading.CountdownEvent.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.Threading.CountdownEvent" /> class.</summary>
    </member>
    <member name="M:System.Threading.CountdownEvent.Dispose(System.Boolean)">
      <summary>When overridden in a derived class, releases the unmanaged resources used by the <see cref="T:System.Threading.CountdownEvent" />, and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Threading.CountdownEvent.InitialCount">
      <summary>Gets the numbers of signals initially required to set the event.</summary>
      <returns> The number of signals initially required to set the event.</returns>
    </member>
    <member name="P:System.Threading.CountdownEvent.IsSet">
      <summary>Determines whether the event is set.</summary>
      <returns>true if the event is set; otherwise, false.</returns>
    </member>
    <member name="M:System.Threading.CountdownEvent.Reset">
      <summary>Resets the <see cref="P:System.Threading.CountdownEvent.CurrentCount" /> to the value of <see cref="P:System.Threading.CountdownEvent.InitialCount" />.</summary>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed..</exception>
    </member>
    <member name="M:System.Threading.CountdownEvent.Reset(System.Int32)">
      <summary>Resets the <see cref="P:System.Threading.CountdownEvent.CurrentCount" /> to a specified value.</summary>
      <param name="count">The number of signals required to set the <see cref="T:System.Threading.CountdownEvent" />.</param>
      <exception cref="T:System.ObjectDisposedException">The current instance has alread been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than 0.</exception>
    </member>
    <member name="M:System.Threading.CountdownEvent.Signal">
      <summary>Registers a signal with the <see cref="T:System.Threading.CountdownEvent" />, decrementing its count.</summary>
      <returns>true if the signal caused the count to reach zero and the event was set; otherwise, false.</returns>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The current instance is already set.</exception>
    </member>
    <member name="M:System.Threading.CountdownEvent.Signal(System.Int32)">
      <summary>Registers multiple signals with the <see cref="T:System.Threading.CountdownEvent" />, decrementing its count by the specified amount.</summary>
      <returns>true if the signals caused the count to reach zero and the event was set; otherwise, false.</returns>
      <param name="signalCount">The number of signals to register.</param>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signalCount" /> is less than 1.</exception>
      <exception cref="T:System.InvalidOperationException">The current instance is already set. -or- Or <paramref name="signalCount" /> is greater than <see cref="P:System.Threading.CountdownEvent.CurrentCount" />.</exception>
    </member>
    <member name="M:System.Threading.CountdownEvent.TryAddCount">
      <summary>Attempts to increment the <see cref="T:System.Threading.CountdownEvent" />'s current count by one.</summary>
      <returns>true if the increment succeeded; otherwise, false. If <see cref="P:System.Threading.CountdownEvent.CurrentCount" /> is already at zero. this will return false.</returns>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Threading.CountdownEvent.CurrentCount" /> is equal to <see cref="T:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Threading.CountdownEvent.TryAddCount(System.Int32)">
      <summary>Attempts to increment the <see cref="T:System.Threading.CountdownEvent" />'s current count by a specified value.</summary>
      <returns>true if the increment succeeded; otherwise, false. If <see cref="P:System.Threading.CountdownEvent.CurrentCount" /> is already at zero this will return false.</returns>
      <param name="signalCount">The value by which to increase <see cref="P:System.Threading.CountdownEvent.CurrentCount" />.</param>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signalCount" /> is less than 0.</exception>
      <exception cref="T:System.InvalidOperationException">The current instance is already set.-or-<see cref="P:System.Threading.CountdownEvent.CurrentCount" /> is equal to <see cref="T:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Threading.CountdownEvent.Wait">
      <summary>Blocks the current thread until the <see cref="T:System.Threading.CountdownEvent" /> is set.</summary>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.CountdownEvent.Wait(System.Int32)">
      <summary>Blocks the current thread until the <see cref="T:System.Threading.CountdownEvent" /> is set, using a 32-bit signed integer to measure the time interval.</summary>
      <returns>true if the <see cref="T:System.Threading.CountdownEvent" /> was set; otherwise, false.</returns>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" />(-1) to wait indefinitely.</param>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</exception>
    </member>
    <member name="M:System.Threading.CountdownEvent.Wait(System.Int32,System.Threading.CancellationToken)">
      <summary>Blocks the current thread until the <see cref="T:System.Threading.CountdownEvent" /> is set, using a 32-bit signed integer to measure the time interval, while observing a <see cref="T:System.Threading.CancellationToken" />.</summary>
      <returns>true if the <see cref="T:System.Threading.CountdownEvent" /> was set; otherwise, false.</returns>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" />(-1) to wait indefinitely.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to observe.</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> has been canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</exception>
    </member>
    <member name="M:System.Threading.CountdownEvent.Wait(System.Threading.CancellationToken)">
      <summary>Blocks the current thread until the <see cref="T:System.Threading.CountdownEvent" /> is set, while observing a <see cref="T:System.Threading.CancellationToken" />.</summary>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to observe.</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> has been canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.CountdownEvent.Wait(System.TimeSpan)">
      <summary>Blocks the current thread until the <see cref="T:System.Threading.CountdownEvent" /> is set, using a <see cref="T:System.TimeSpan" /> to measure the time interval.</summary>
      <returns>true if the <see cref="T:System.Threading.CountdownEvent" /> was set; otherwise, false.</returns>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</param>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Threading.CountdownEvent.Wait(System.TimeSpan,System.Threading.CancellationToken)">
      <summary>Blocks the current thread until the <see cref="T:System.Threading.CountdownEvent" /> is set, using a <see cref="T:System.TimeSpan" /> to measure the time interval, while observing a <see cref="T:System.Threading.CancellationToken" />.</summary>
      <returns>true if the <see cref="T:System.Threading.CountdownEvent" /> was set; otherwise, false.</returns>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to observe.</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> has been canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="P:System.Threading.CountdownEvent.WaitHandle">
      <summary>Gets a <see cref="T:System.Threading.WaitHandle" /> that is used to wait for the event to be set.</summary>
      <returns>A <see cref="T:System.Threading.WaitHandle" /> that is used to wait for the event to be set.</returns>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
    </member>
    <member name="T:System.Threading.EventResetMode">
      <summary>Indicates whether an <see cref="T:System.Threading.EventWaitHandle" /> is reset automatically or manually after receiving a signal.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Threading.EventResetMode.AutoReset">
      <summary>When signaled, the <see cref="T:System.Threading.EventWaitHandle" /> resets automatically after releasing a single thread. If no threads are waiting, the <see cref="T:System.Threading.EventWaitHandle" /> remains signaled until a thread blocks, and resets after releasing the thread.</summary>
    </member>
    <member name="F:System.Threading.EventResetMode.ManualReset">
      <summary>When signaled, the <see cref="T:System.Threading.EventWaitHandle" /> releases all waiting threads and remains signaled until it is manually reset.</summary>
    </member>
    <member name="T:System.Threading.EventWaitHandle">
      <summary>Represents a thread synchronization event.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.EventWaitHandle" /> class, specifying whether the wait handle is initially signaled, and whether it resets automatically or manually.</summary>
      <param name="initialState">true to set the initial state to signaled; false to set it to nonsignaled.</param>
      <param name="mode">One of the <see cref="T:System.Threading.EventResetMode" /> values that determines whether the event resets automatically or manually.</param>
    </member>
    <member name="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.EventWaitHandle" /> class, specifying whether the wait handle is initially signaled if created as a result of this call, whether it resets automatically or manually, and the name of a system synchronization event.</summary>
      <param name="initialState">true to set the initial state to signaled if the named event is created as a result of this call; false to set it to nonsignaled.</param>
      <param name="mode">One of the <see cref="T:System.Threading.EventResetMode" /> values that determines whether the event resets automatically or manually.</param>
      <param name="name">The name of a system-wide synchronization event.</param>
      <exception cref="T:System.IO.IOException">A Win32 error occurred.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The named event exists and has access control security, but the user does not have <see cref="F:System.Security.AccessControl.EventWaitHandleRights.FullControl" />.</exception>
      <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">The named event cannot be created, perhaps because a wait handle of a different type has the same name.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is longer than 260 characters.</exception>
    </member>
    <member name="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.EventWaitHandle" /> class, specifying whether the wait handle is initially signaled if created as a result of this call, whether it resets automatically or manually, the name of a system synchronization event, and a Boolean variable whose value after the call indicates whether the named system event was created.</summary>
      <param name="initialState">true to set the initial state to signaled if the named event is created as a result of this call; false to set it to nonsignaled.</param>
      <param name="mode">One of the <see cref="T:System.Threading.EventResetMode" /> values that determines whether the event resets automatically or manually.</param>
      <param name="name">The name of a system-wide synchronization event.</param>
      <param name="createdNew">When this method returns, contains true if a local event was created (that is, if <paramref name="name" /> is null or an empty string) or if the specified named system event was created; false if the specified named system event already existed. This parameter is passed uninitialized.</param>
      <exception cref="T:System.IO.IOException">A Win32 error occurred.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The named event exists and has access control security, but the user does not have <see cref="F:System.Security.AccessControl.EventWaitHandleRights.FullControl" />.</exception>
      <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">The named event cannot be created, perhaps because a wait handle of a different type has the same name.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is longer than 260 characters.</exception>
    </member>
    <member name="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@,System.Security.AccessControl.EventWaitHandleSecurity)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.EventWaitHandle" /> class, specifying whether the wait handle is initially signaled if created as a result of this call, whether it resets automatically or manually, the name of a system synchronization event, a Boolean variable whose value after the call indicates whether the named system event was created, and the access control security to be applied to the named event if it is created.</summary>
      <param name="initialState">true to set the initial state to signaled if the named event is created as a result of this call; false to set it to nonsignaled.</param>
      <param name="mode">One of the <see cref="T:System.Threading.EventResetMode" /> values that determines whether the event resets automatically or manually.</param>
      <param name="name">The name of a system-wide synchronization event.</param>
      <param name="createdNew">When this method returns, contains true if a local event was created (that is, if <paramref name="name" /> is null or an empty string) or if the specified named system event was created; false if the specified named system event already existed. This parameter is passed uninitialized.</param>
      <param name="eventSecurity">An <see cref="T:System.Security.AccessControl.EventWaitHandleSecurity" /> object that represents the access control security to be applied to the named system event.</param>
      <exception cref="T:System.IO.IOException">A Win32 error occurred.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The named event exists and has access control security, but the user does not have <see cref="F:System.Security.AccessControl.EventWaitHandleRights.FullControl" />.</exception>
      <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">The named event cannot be created, perhaps because a wait handle of a different type has the same name.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is longer than 260 characters.</exception>
    </member>
    <member name="M:System.Threading.EventWaitHandle.GetAccessControl">
      <summary>Gets an <see cref="T:System.Security.AccessControl.EventWaitHandleSecurity" /> object that represents the access control security for the named system event represented by the current <see cref="T:System.Threading.EventWaitHandle" /> object.</summary>
      <returns>An <see cref="T:System.Security.AccessControl.EventWaitHandleSecurity" /> object that represents the access control security for the named system event.</returns>
      <exception cref="T:System.UnauthorizedAccessException">The current <see cref="T:System.Threading.EventWaitHandle" /> object represents a named system event, and the user does not have <see cref="F:System.Security.AccessControl.EventWaitHandleRights.ReadPermissions" />.-or-The current <see cref="T:System.Threading.EventWaitHandle" /> object represents a named system event, and was not opened with <see cref="F:System.Security.AccessControl.EventWaitHandleRights.ReadPermissions" />.</exception>
      <exception cref="T:System.NotSupportedException">Not supported for Windows 98 or Windows Millennium Edition.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Threading.EventWaitHandle.OpenExisting(System.String)">
      <summary>Opens an existing named synchronization event.</summary>
      <returns>A <see cref="T:System.Threading.EventWaitHandle" /> object that represents the named system event.</returns>
      <param name="name">The name of a system synchronization event.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is an empty string. -or-<paramref name="name" /> is longer than 260 characters.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
      <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">The named system event does not exist.</exception>
      <exception cref="T:System.IO.IOException">A Win32 error occurred.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The named event exists, but the user does not have the security access required to use it.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Threading.EventWaitHandle.OpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights)">
      <summary>Opens an existing named synchronization event, specifying the desired security access.</summary>
      <returns>A <see cref="T:System.Threading.EventWaitHandle" /> object that represents the named system event.</returns>
      <param name="name">The name of a system-wide synchronization event.</param>
      <param name="rights">A combination of <see cref="T:System.Security.AccessControl.EventWaitHandleRights" />  values that represent the desired security access.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is an empty string.-or-<paramref name="name" /> is longer than 260 characters.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
      <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">The named system event does not exist.</exception>
      <exception cref="T:System.IO.IOException">A Win32 error occurred.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The named event exists, but the user does not have the desired security access.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Threading.EventWaitHandle.Reset">
      <summary>Sets the state of the event to nonsignaled, causing threads to block.</summary>
      <returns>true if the operation succeeds; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.EventWaitHandle.Set">
      <summary>Sets the state of the event to signaled, allowing one or more waiting threads to proceed.</summary>
      <returns>true if the operation succeeds; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.EventWaitHandle.SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity)">
      <summary>Sets the access control security for a named system event.</summary>
      <param name="eventSecurity">An <see cref="T:System.Security.AccessControl.EventWaitHandleSecurity" />  object that represents the access control security to be applied to the named system event.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="eventSecurity" /> is null.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The user does not have <see cref="F:System.Security.AccessControl.EventWaitHandleRights.ChangePermissions" />.-or-The event was not opened with <see cref="F:System.Security.AccessControl.EventWaitHandleRights.ChangePermissions" />.</exception>
      <exception cref="T:System.SystemException">The current <see cref="T:System.Threading.EventWaitHandle" /> object does not represent a named system event.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="T:System.Threading.ExecutionContext">
      <summary>Manages the execution context for the current thread. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.ExecutionContext.Capture">
      <summary>Captures the execution context from the current thread.</summary>
      <returns>An <see cref="T:System.Threading.ExecutionContext" /> object representing the execution context for the current thread.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.ExecutionContext.CreateCopy">
      <summary>Creates a copy of the current execution context.</summary>
      <returns>An <see cref="T:System.Threading.ExecutionContext" /> object representing the current execution context.</returns>
      <exception cref="T:System.InvalidOperationException">This context cannot be copied because it is used. Only newly captured contexts can be copied.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.ExecutionContext.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.Threading.ExecutionContext" /> class.</summary>
    </member>
    <member name="M:System.Threading.ExecutionContext.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the logical context information needed to recreate an instance of the current execution context.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object to be populated with serialization information. </param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> structure representing the destination context of the serialization. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is null. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.ExecutionContext.IsFlowSuppressed">
      <summary>Indicates whether the flow of the execution context is currently suppressed.</summary>
      <returns>true if the flow is suppressed; otherwise, false. </returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.ExecutionContext.RestoreFlow">
      <summary>Restores the flow of the execution context across asynchronous threads.</summary>
      <exception cref="T:System.InvalidOperationException">The context flow cannot be restored because it is not being suppressed.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext,System.Threading.ContextCallback,System.Object)">
      <summary>Runs a method in a specified execution context on the current thread.</summary>
      <param name="executionContext">The <see cref="T:System.Threading.ExecutionContext" /> to set.</param>
      <param name="callback">A <see cref="T:System.Threading.ContextCallback" /> delegate that represents the method to be run in the provided execution context.</param>
      <param name="state">The object to pass to the callback method.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="executionContext" /> is null.-or-<paramref name="executionContext" /> was not acquired through a capture operation. -or-<paramref name="executionContext" /> has already been used as the argument to a <see cref="M:System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext,System.Threading.ContextCallback,System.Object)" /> call.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="Infrastructure" />
      </PermissionSet>
    </member>
    <member name="M:System.Threading.ExecutionContext.SuppressFlow">
      <summary>Suppresses the flow of the execution context across asynchronous threads.</summary>
      <returns>An <see cref="T:System.Threading.AsyncFlowControl" /> structure for restoring the flow.</returns>
      <exception cref="T:System.InvalidOperationException">The context flow is already suppressed.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="Infrastructure" />
      </PermissionSet>
    </member>
    <member name="T:System.Threading.HostExecutionContext">
      <summary>Encapsulates and propagates the host execution context across threads. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.HostExecutionContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.HostExecutionContext" /> class. </summary>
    </member>
    <member name="M:System.Threading.HostExecutionContext.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.HostExecutionContext" /> class using the specified state. </summary>
      <param name="state">An object representing the host execution context state.</param>
    </member>
    <member name="M:System.Threading.HostExecutionContext.CreateCopy">
      <summary>Creates a copy of the current host execution context.</summary>
      <returns>A <see cref="T:System.Threading.HostExecutionContext" /> object representing the host context for the current thread.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.HostExecutionContext.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.Threading.HostExecutionContext" /> class.</summary>
    </member>
    <member name="M:System.Threading.HostExecutionContext.Dispose(System.Boolean)">
      <summary>When overridden in a derived class, releases the unmanaged resources used by the <see cref="T:System.Threading.WaitHandle" />, and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Threading.HostExecutionContext.State">
      <summary>Gets or sets the state of the host execution context.</summary>
      <returns>An object representing the host execution context state.</returns>
    </member>
    <member name="T:System.Threading.HostExecutionContextManager">
      <summary>Provides the functionality that allows a common language runtime host to participate in the flow, or migration, of the execution context.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.HostExecutionContextManager.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.HostExecutionContextManager" /> class.</summary>
    </member>
    <member name="M:System.Threading.HostExecutionContextManager.Capture">
      <summary>Captures the host execution context from the current thread.</summary>
      <returns>A <see cref="T:System.Threading.HostExecutionContext" /> object representing the host execution context of the current thread.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.HostExecutionContextManager.Revert(System.Object)">
      <summary>Restores the host execution context to its prior state.</summary>
      <param name="previousState">The previous context state to revert to.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="previousState" /> is null.-or-<paramref name="previousState" /> was not created on the current thread.-or-<paramref name="previousState" /> is not the last state for the <see cref="T:System.Threading.HostExecutionContext" />.</exception>
    </member>
    <member name="M:System.Threading.HostExecutionContextManager.SetHostExecutionContext(System.Threading.HostExecutionContext)">
      <summary>Sets the current host execution context to the specified host execution context.</summary>
      <returns>An object for restoring the <see cref="T:System.Threading.HostExecutionContext" /> to its previous state.</returns>
      <param name="hostExecutionContext">The <see cref="T:System.Threading.HostExecutionContext" /> to be set.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="hostExecutionContext" /> was not acquired through a capture operation. -or- <paramref name="hostExecutionContext" /> has been the argument to a previous <see cref="M:System.Threading.HostExecutionContextManager.SetHostExecutionContext(System.Threading.HostExecutionContext)" />  method call.</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="Infrastructure" />
      </PermissionSet>
    </member>
    <member name="T:System.Threading.Interlocked">
      <summary>Provides atomic operations for variables that are shared by multiple threads. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.Interlocked.Add(System.Int32@,System.Int32)">
      <summary>Adds two 32-bit integers and replaces the first integer with the sum, as an atomic operation.</summary>
      <returns>The new value stored at <paramref name="location1" />.</returns>
      <param name="location1">A variable containing the first value to be added. The sum of the two values is stored in <paramref name="location1" />.</param>
      <param name="value">The value to be added to the integer at <paramref name="location1" />.</param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location1" /> is a null pointer. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Interlocked.Add(System.Int64@,System.Int64)">
      <summary>Adds two 64-bit integers and replaces the first integer with the sum, as an atomic operation.</summary>
      <returns>The new value stored at <paramref name="location1" />.</returns>
      <param name="location1">A variable containing the first value to be added. The sum of the two values is stored in <paramref name="location1" />.</param>
      <param name="value">The value to be added to the integer at <paramref name="location1" />.</param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location1" /> is a null pointer. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Interlocked.CompareExchange(System.Double@,System.Double,System.Double)">
      <summary>Compares two double-precision floating point numbers for equality and, if they are equal, replaces one of the values.</summary>
      <returns>The original value in <paramref name="location1" />.</returns>
      <param name="location1">The destination, whose value is compared with <paramref name="comparand" /> and possibly replaced. </param>
      <param name="value">The value that replaces the destination value if the comparison results in equality. </param>
      <param name="comparand">The value that is compared to the value at <paramref name="location1" />. </param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location1" /> is a null pointer. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Interlocked.CompareExchange(System.Int32@,System.Int32,System.Int32)">
      <summary>Compares two 32-bit signed integers for equality and, if they are equal, replaces one of the values.</summary>
      <returns>The original value in <paramref name="location1" />.</returns>
      <param name="location1">The destination, whose value is compared with <paramref name="comparand" /> and possibly replaced. </param>
      <param name="value">The value that replaces the destination value if the comparison results in equality. </param>
      <param name="comparand">The value that is compared to the value at <paramref name="location1" />. </param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location1" /> is a null pointer. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Interlocked.CompareExchange(System.Int64@,System.Int64,System.Int64)">
      <summary>Compares two 64-bit signed integers for equality and, if they are equal, replaces one of the values.</summary>
      <returns>The original value in <paramref name="location1" />.</returns>
      <param name="location1">The destination, whose value is compared with <paramref name="comparand" /> and possibly replaced. </param>
      <param name="value">The value that replaces the destination value if the comparison results in equality. </param>
      <param name="comparand">The value that is compared to the value at <paramref name="location1" />. </param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location1" /> is a null pointer. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Interlocked.CompareExchange(System.IntPtr@,System.IntPtr,System.IntPtr)">
      <summary>Compares two platform-specific handles or pointers for equality and, if they are equal, replaces one of them.</summary>
      <returns>The original value in <paramref name="location1" />.</returns>
      <param name="location1">The destination <see cref="T:System.IntPtr" />, whose value is compared with the value of <paramref name="comparand" /> and possibly replaced by <paramref name="value" />. </param>
      <param name="value">The <see cref="T:System.IntPtr" /> that replaces the destination value if the comparison results in equality. </param>
      <param name="comparand">The <see cref="T:System.IntPtr" /> that is compared to the value at <paramref name="location1" />. </param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location1" /> is a null pointer. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Interlocked.CompareExchange(System.Object@,System.Object,System.Object)">
      <summary>Compares two objects for reference equality and, if they are equal, replaces one of the objects.</summary>
      <returns>The original value in <paramref name="location1" />.</returns>
      <param name="location1">The destination object that is compared with <paramref name="comparand" /> and possibly replaced. </param>
      <param name="value">The object that replaces the destination object if the comparison results in equality. </param>
      <param name="comparand">The object that is compared to the object at <paramref name="location1" />. </param>
      <exception cref="T:System.ArgumentNullException">The address of <paramref name="location1" /> is a null pointer. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Interlocked.CompareExchange(System.Single@,System.Single,System.Single)">
      <summary>Compares two single-precision floating point numbers for equality and, if they are equal, replaces one of the values.</summary>
      <returns>The original value in <paramref name="location1" />.</returns>
      <param name="location1">The destination, whose value is compared with <paramref name="comparand" /> and possibly replaced. </param>
      <param name="value">The value that replaces the destination value if the comparison results in equality. </param>
      <param name="comparand">The value that is compared to the value at <paramref name="location1" />. </param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location1" /> is a null pointer. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Interlocked.CompareExchange``1(``0@,``0,``0)">
      <summary>Compares two instances of the specified reference type <paramref name="T" /> for equality and, if they are equal, replaces one of them.</summary>
      <returns>The original value in <paramref name="location1" />.</returns>
      <param name="location1">The destination, whose value is compared with <paramref name="comparand" /> and possibly replaced. This is a reference parameter (ref in C#, ByRef in Visual Basic). </param>
      <param name="value">The value that replaces the destination value if the comparison results in equality. </param>
      <param name="comparand">The value that is compared to the value at <paramref name="location1" />. </param>
      <typeparam name="T">The type to be used for <paramref name="location1" />, <paramref name="value" />, and <paramref name="comparand" />. This type must be a reference type.</typeparam>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location1" /> is a null pointer. </exception>
    </member>
    <member name="M:System.Threading.Interlocked.Decrement(System.Int32@)">
      <summary>Decrements a specified variable and stores the result, as an atomic operation.</summary>
      <returns>The decremented value.</returns>
      <param name="location">The variable whose value is to be decremented. </param>
      <exception cref="T:System.ArgumentNullException">The address of <paramref name="location" /> is a null pointer. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Interlocked.Decrement(System.Int64@)">
      <summary>Decrements the specified variable and stores the result, as an atomic operation.</summary>
      <returns>The decremented value.</returns>
      <param name="location">The variable whose value is to be decremented. </param>
      <exception cref="T:System.ArgumentNullException">The address of <paramref name="location" /> is a null pointer. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Interlocked.Exchange(System.Double@,System.Double)">
      <summary>Sets a double-precision floating point number to a specified value and returns the original value, as an atomic operation.</summary>
      <returns>The original value of <paramref name="location1" />.</returns>
      <param name="location1">The variable to set to the specified value. </param>
      <param name="value">The value to which the <paramref name="location1" /> parameter is set. </param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location1" /> is a null pointer. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Interlocked.Exchange(System.Int32@,System.Int32)">
      <summary>Sets a 32-bit signed integer to a specified value and returns the original value, as an atomic operation.</summary>
      <returns>The original value of <paramref name="location1" />.</returns>
      <param name="location1">The variable to set to the specified value. </param>
      <param name="value">The value to which the <paramref name="location1" /> parameter is set. </param>
      <exception cref="T:System.ArgumentNullException">The address of <paramref name="location1" /> is a null pointer. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Interlocked.Exchange(System.Int64@,System.Int64)">
      <summary>Sets a 64-bit signed integer to a specified value and returns the original value, as an atomic operation.</summary>
      <returns>The original value of <paramref name="location1" />.</returns>
      <param name="location1">The variable to set to the specified value. </param>
      <param name="value">The value to which the <paramref name="location1" /> parameter is set. </param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location1" /> is a null pointer. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Interlocked.Exchange(System.IntPtr@,System.IntPtr)">
      <summary>Sets a platform-specific handle or pointer to a specified value and returns the original value, as an atomic operation.</summary>
      <returns>The original value of <paramref name="location1" />.</returns>
      <param name="location1">The variable to set to the specified value. </param>
      <param name="value">The value to which the <paramref name="location1" /> parameter is set. </param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location1" /> is a null pointer. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Interlocked.Exchange(System.Object@,System.Object)">
      <summary>Sets an object to a specified value and returns a reference to the original object, as an atomic operation.</summary>
      <returns>The original value of <paramref name="location1" />.</returns>
      <param name="location1">The variable to set to the specified value. </param>
      <param name="value">The value to which the <paramref name="location1" /> parameter is set. </param>
      <exception cref="T:System.ArgumentNullException">The address of <paramref name="location1" /> is a null pointer. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Interlocked.Exchange(System.Single@,System.Single)">
      <summary>Sets a single-precision floating point number to a specified value and returns the original value, as an atomic operation.</summary>
      <returns>The original value of <paramref name="location1" />.</returns>
      <param name="location1">The variable to set to the specified value. </param>
      <param name="value">The value to which the <paramref name="location1" /> parameter is set. </param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location1" /> is a null pointer. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Interlocked.Exchange``1(``0@,``0)">
      <summary>Sets a variable of the specified type <paramref name="T" /> to a specified value and returns the original value, as an atomic operation.</summary>
      <returns>The original value of <paramref name="location1" />.</returns>
      <param name="location1">The variable to set to the specified value. This is a reference parameter (ref in C#, ByRef in Visual Basic). </param>
      <param name="value">The value to which the <paramref name="location1" /> parameter is set. </param>
      <typeparam name="T">The type to be used for <paramref name="location1" /> and <paramref name="value" />. This type must be a reference type.</typeparam>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location1" /> is a null pointer. </exception>
    </member>
    <member name="M:System.Threading.Interlocked.Increment(System.Int32@)">
      <summary>Increments a specified variable and stores the result, as an atomic operation.</summary>
      <returns>The incremented value.</returns>
      <param name="location">The variable whose value is to be incremented. </param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location" /> is a null pointer. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Interlocked.Increment(System.Int64@)">
      <summary>Increments a specified variable and stores the result, as an atomic operation.</summary>
      <returns>The incremented value.</returns>
      <param name="location">The variable whose value is to be incremented. </param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="location" /> is a null pointer. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Interlocked.Read(System.Int64@)">
      <summary>Returns a 64-bit value, loaded as an atomic operation.</summary>
      <returns>The loaded value.</returns>
      <param name="location">The 64-bit value to be loaded.</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Threading.IOCompletionCallback">
      <summary>Receives the error code, number of bytes, and overlapped value type when an I/O operation completes on the thread pool.</summary>
      <param name="errorCode">The error code. </param>
      <param name="numBytes">The number of bytes that are transferred. </param>
      <param name="pOVERLAP">A <see cref="T:System.Threading.NativeOverlapped" /> representing an unmanaged pointer to the native overlapped value type. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Threading.LazyInitializer">
      <summary>Provides lazy initialization routines.</summary>
    </member>
    <member name="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@)">
      <summary>Initializes a target reference type with the type's default constructor if the target has not already been initialized.</summary>
      <returns>The initialized reference of type .</returns>
      <param name="target">A reference of type  to initialize if it has not already been initialized.</param>
      <typeparam name="T">The refence type of the reference to be initialized.</typeparam>
      <exception cref="T:System.MemberAccessException">Permissions to access the constructor of type  were missing.</exception>
      <exception cref="T:System.MissingMemberException">Type  does not have a default constructor.</exception>
    </member>
    <member name="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@)">
      <summary>Initializes a target reference or value type with its default constructor if it has not already been initialized.</summary>
      <returns>The initialized value of type .</returns>
      <param name="target">A reference or value of type  to initialize if it has not already been initialized.</param>
      <param name="initialized">A reference to a boolean that determines whether the target has already been initialized.</param>
      <param name="syncLock">A reference to an object used as the mutually exclusive lock for initializing <paramref name="target" />. If syncLock is null, a new object will be instantiated.</param>
      <typeparam name="T">The type of the reference to be initialized.</typeparam>
    </member>
    <member name="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@,System.Func{``0})">
      <summary>Initializes a target reference or value type with a specified function if it has not already been initialized.</summary>
      <returns>The initialized value of type .</returns>
      <param name="target">A reference or value of type  to initialize if it has not already been initialized.</param>
      <param name="initialized">A reference to a boolean that determines whether the target has already been initialized.</param>
      <param name="syncLock">A reference to an object used as the mutually exclusive lock for initializing <paramref name="target" />. If syncLock is null, a new object will be instantiated.</param>
      <param name="valueFactory">The <see cref="T:System.Func{T}" /> invoked to initialize the reference or value.</param>
      <typeparam name="T">The type of the reference to be initialized.</typeparam>
    </member>
    <member name="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Func{``0})">
      <summary>Initializes a target reference type using the specified function if it has not already been initialized.</summary>
      <returns>The initialized reference of type .</returns>
      <param name="target">The reference of type  to initialize if it has not already been initialized.</param>
      <param name="valueFactory">The <see cref="T:System.Func{T}" /> invoked to initialize the reference.</param>
      <typeparam name="T">The reference type of the reference to be initialized.</typeparam>
      <exception cref="T:System.MissingMemberException">Type  does not have a default constructor.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="valueFactory" /> returned null.</exception>
    </member>
    <member name="T:System.Threading.LazyThreadSafetyMode">
      <summary>Specifies how a <see cref="T:System.Lazy`1" /> instance synchronizes access among multiple threads.</summary>
    </member>
    <member name="F:System.Threading.LazyThreadSafetyMode.None">
      <summary>The <see cref="T:System.Lazy`1" /> instance is not thread safe; if the instance is accessed from multiple threads, its behavior is undefined. Use this mode only when high performance is crucial and the <see cref="T:System.Lazy`1" /> instance is guaranteed never to be initialized from more than one thread. If the initialization method (or the default constructor, if there is no initialization method) throws an exception when the <see cref="T:System.Lazy`1" /> instance is initialized, the exception is cached and thrown again on subsequent calls to the <see cref="P:System.Lazy`1.Value" /> property and the <see cref="M:System.Lazy`1.ToString" /> method. If the initialization method recursively accesses the <see cref="P:System.Lazy`1.Value" /> property of the <see cref="T:System.Lazy`1" /> instance, an <see cref="T:System.InvalidOperationException" /> is thrown.</summary>
    </member>
    <member name="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
      <summary>When multiple threads try to initialize a <see cref="T:System.Lazy`1" /> instance simultaneously, all threads are allowed to run the initialization method (or the default constructor, if there is no initialization method). The first thread to complete initialization sets the value of the <see cref="T:System.Lazy`1" /> instance. That value is returned to any other threads that were simultaneously running the initialization method, unless the initialization method throws exceptions on those threads. Any instances of <paramref name="T" /> that were created by the competing threads are discarded. If the initialization method throws an exception on any thread, the exception is propagated out of the <see cref="P:System.Lazy`1.Value" /> property or the <see cref="M:System.Lazy`1.ToString" /> method. In that case, the <see cref="T:System.Lazy`1" /> instance is not initialized, the value of the <see cref="P:System.Lazy`1.IsValueCreated" /> property remains false, and subsequent calls to the <see cref="P:System.Lazy`1.Value" /> property cause the initialization method to run again. The exception is not cached. If the initialization method recursively accesses the <see cref="P:System.Lazy`1.Value" /> property of the <see cref="T:System.Lazy`1" /> instance, no exception is thrown.</summary>
    </member>
    <member name="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication">
      <summary>Locks are used to ensure that only a single thread can initialize a <see cref="T:System.Lazy`1" /> instance in a thread-safe manner. If the initialization method (or the default constructor, if there is no initialization method) uses locks internally, deadlocks can occur. If the initialization method throws an exception when the <see cref="T:System.Lazy`1" /> is initialized, the exception is cached and thrown again on subsequent calls to the <see cref="P:System.Lazy`1.Value" /> property and the <see cref="M:System.Lazy`1.ToString" /> method. If the initialization method recursively accesses the <see cref="P:System.Lazy`1.Value" /> property of the <see cref="T:System.Lazy`1" /> instance, an <see cref="T:System.InvalidOperationException" /> is thrown. </summary>
    </member>
    <member name="T:System.Threading.LockCookie">
      <summary>Defines the lock that implements single-writer/multiple-reader semantics. This is a value type.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.LockCookie.Equals(System.Object)">
      <summary>Indicates whether a specified object is a <see cref="T:System.Threading.LockCookie" /> and is equal to the current instance.</summary>
      <returns>true if the value of <paramref name="obj" /> is equal to the value of the current instance; otherwise, false.</returns>
      <param name="obj">The object to compare to the current instance.</param>
    </member>
    <member name="M:System.Threading.LockCookie.Equals(System.Threading.LockCookie)">
      <summary>Indicates whether the current instance is equal to the specified <see cref="T:System.Threading.LockCookie" />.</summary>
      <returns>true if <paramref name="obj" /> is equal to the value of the current instance; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Threading.LockCookie" /> to compare to the current instance.</param>
    </member>
    <member name="M:System.Threading.LockCookie.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Threading.LockCookie.op_Equality(System.Threading.LockCookie,System.Threading.LockCookie)">
      <summary>Indicates whether two <see cref="T:System.Threading.LockCookie" /> structures are equal.</summary>
      <returns>true if <paramref name="a" /> is equal to <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The <see cref="T:System.Threading.LockCookie" /> to compare to <paramref name="b" />.</param>
      <param name="b">The <see cref="T:System.Threading.LockCookie" /> to compare to <paramref name="a" />.</param>
    </member>
    <member name="M:System.Threading.LockCookie.op_Inequality(System.Threading.LockCookie,System.Threading.LockCookie)">
      <summary>Indicates whether two <see cref="T:System.Threading.LockCookie" /> structures are not equal.</summary>
      <returns>true if <paramref name="a" /> is not equal to <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The <see cref="T:System.Threading.LockCookie" /> to compare to <paramref name="b" />.</param>
      <param name="b">The <see cref="T:System.Threading.LockCookie" /> to compare to <paramref name="a" />.</param>
    </member>
    <member name="T:System.Threading.LockRecursionException">
      <summary>The exception that is thrown when recursive entry into a lock is not compatible with the recursion policy for the lock.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.LockRecursionException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.LockRecursionException" /> class with a system-supplied message that describes the error.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.LockRecursionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.LockRecursionException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Threading.LockRecursionException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.LockRecursionException" /> class with a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor must make sure that this string has been localized for the current system culture. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.LockRecursionException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.LockRecursionException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor must make sure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that caused the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Threading.ManualResetEvent">
      <summary>Notifies one or more waiting threads that an event has occurred. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.ManualResetEvent" /> class with a Boolean value indicating whether to set the initial state to signaled.</summary>
      <param name="initialState">true to set the initial state signaled; false to set the initial state to nonsignaled. </param>
    </member>
    <member name="T:System.Threading.ManualResetEventSlim">
      <summary>Provides a slimmed down version of <see cref="T:System.Threading.ManualResetEvent" />.</summary>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.ManualResetEventSlim" /> class with an initial state of nonsignaled.</summary>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.ManualResetEventSlim" /> class with a Boolen value indicating whether to set the intial state to signaled.</summary>
      <param name="initialState">true to set the initial state signaled; false to set the initial state to nonsignaled.</param>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.#ctor(System.Boolean,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.ManualResetEventSlim" /> class with a Boolen value indicating whether to set the intial state to signaled and a specified spin count.</summary>
      <param name="initialState">true to set the initial state to signaled; false to set the initial state to nonsignaled.</param>
      <param name="spinCount">The number of spin waits that will occur before falling back to a true wait.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="spinCount" /> is less than 0 or greater than the maximum allowed value.</exception>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.Threading.ManualResetEventSlim" /> class.</summary>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.Dispose(System.Boolean)">
      <summary>When overridden in a derived class, releases the unmanaged resources used by the <see cref="T:System.Threading.ManualResetEventSlim" />, and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Threading.ManualResetEventSlim.IsSet">
      <summary>Gets whether the event is set.</summary>
      <returns>true if the event has is set; otherwise, false.</returns>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.Reset">
      <summary>Sets the state of the event to nonsignaled, which causes threads to block.</summary>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.Set">
      <summary>Sets the state of the event to signaled, which allows one or more threads waiting on the event to proceed.</summary>
    </member>
    <member name="P:System.Threading.ManualResetEventSlim.SpinCount">
      <summary>Gets the number of spin waits that will be occur before falling back to a true wait.</summary>
      <returns>Returns the number of spin waits that will be occur before falling back to a true wait.</returns>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.Wait">
      <summary>Blocks the current thread until the current <see cref="T:System.Threading.ManualResetEventSlim" /> is set.</summary>
      <exception cref="T:System.InvalidOperationException">The maximum number of waiters has been exceeded.</exception>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.Wait(System.Int32)">
      <summary>Blocks the current thread until the current <see cref="T:System.Threading.ManualResetEventSlim" /> is set, using a 32-bit signed integer to measure the time interval.</summary>
      <returns>true if the <see cref="T:System.Threading.ManualResetEventSlim" /> was set; otherwise, false.</returns>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" />(-1) to wait indefinitely.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</exception>
      <exception cref="T:System.InvalidOperationException">The maximum number of waiters has been exceeded.</exception>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.Wait(System.Int32,System.Threading.CancellationToken)">
      <summary>Blocks the current thread until the current <see cref="T:System.Threading.ManualResetEventSlim" /> is set, using a 32-bit signed integer to measure the time interval, while observing a <see cref="T:System.Threading.CancellationToken" />.</summary>
      <returns>true if the <see cref="T:System.Threading.ManualResetEventSlim" /> was set; otherwise, false.</returns>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" />(-1) to wait indefinitely.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to observe.</param>
      <exception cref="T:System.Threading.OperationCanceledException">
        <paramref name="cancellationToken" /> was canceled.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</exception>
      <exception cref="T:System.InvalidOperationException">The maximum number of waiters has been exceeded.</exception>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.Wait(System.Threading.CancellationToken)">
      <summary>Blocks the current thread until the current <see cref="T:System.Threading.ManualResetEventSlim" /> receives a signal, while observing a <see cref="T:System.Threading.CancellationToken" />.</summary>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to observe.</param>
      <exception cref="T:System.InvalidOperationException">The maximum number of waiters has been exceeded.</exception>
      <exception cref="T:System.OperationCanceledExcepton">
        <paramref name="cancellationToken" /> was canceled.</exception>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan)">
      <summary>Blocks the current thread until the current <see cref="T:System.Threading.ManualResetEventSlim" /> is set, using a <see cref="T:System.TimeSpan" /> to measure the time interval.</summary>
      <returns>true if the <see cref="T:System.Threading.ManualResetEventSlim" /> was set; otherwise, false.</returns>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.InvalidOperationException">The maximum number of waiters has been exceeded.</exception>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
      <summary>Blocks the current thread until the current <see cref="T:System.Threading.ManualResetEventSlim" /> is set, using a <see cref="T:System.TimeSpan" /> to measure the time interval, while observing a <see cref="T:System.Threading.CancellationToken" />.</summary>
      <returns>true if the <see cref="T:System.Threading.ManualResetEventSlim" /> was set; otherwise, false.</returns>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to observe.</param>
      <exception cref="T:System.Threading.OperationCanceledException">
        <paramref name="cancellationToken" /> was canceled.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.InvalidOperationException">The maximum number of waiters has been exceeded.</exception>
    </member>
    <member name="P:System.Threading.ManualResetEventSlim.WaitHandle">
      <summary>Gets the underlying <see cref="T:System.Threading.WaitHandle" /> object for this <see cref="T:System.Threading.ManualResetEventSlim" />.</summary>
      <returns>The underlying <see cref="T:System.Threading.WaitHandle" /> event object fore this <see cref="T:System.Threading.ManualResetEventSlim" />.</returns>
    </member>
    <member name="T:System.Threading.Monitor">
      <summary>Provides a mechanism that synchronizes access to objects.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.Monitor.Enter(System.Object)">
      <summary>Acquires an exclusive lock on the specified object.</summary>
      <param name="obj">The object on which to acquire the monitor lock. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="obj" /> parameter is null. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
      <summary>Acquires an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</summary>
      <param name="obj">The object on which to wait. </param>
      <param name="lockTaken">The result of the attempt to acquire the lock, passed by reference. The input must be false. The output is true if the lock is acquired; otherwise, the output is false. The output is set even if an exception occurs during the attempt to acquire the lock. NoteIf no exception occurs, the output of this method is always true.</param>
      <exception cref="T:System.ArgumentException">The input to <paramref name="lockTaken" /> is true.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="obj" /> parameter is null. </exception>
    </member>
    <member name="M:System.Threading.Monitor.Exit(System.Object)">
      <summary>Releases an exclusive lock on the specified object.</summary>
      <param name="obj">The object on which to release the lock. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="obj" /> parameter is null. </exception>
      <exception cref="T:System.Threading.SynchronizationLockException">The current thread does not own the lock for the specified object. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Monitor.Pulse(System.Object)">
      <summary>Notifies a thread in the waiting queue of a change in the locked object's state.</summary>
      <param name="obj">The object a thread is waiting for. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="obj" /> parameter is null. </exception>
      <exception cref="T:System.Threading.SynchronizationLockException">The calling thread does not own the lock for the specified object. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Monitor.PulseAll(System.Object)">
      <summary>Notifies all waiting threads of a change in the object's state.</summary>
      <param name="obj">The object that sends the pulse. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="obj" /> parameter is null. </exception>
      <exception cref="T:System.Threading.SynchronizationLockException">The calling thread does not own the lock for the specified object. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Monitor.TryEnter(System.Object)">
      <summary>Attempts to acquire an exclusive lock on the specified object.</summary>
      <returns>true if the current thread acquires the lock; otherwise, false.</returns>
      <param name="obj">The object on which to acquire the lock. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="obj" /> parameter is null. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)">
      <summary>Attempts to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</summary>
      <param name="obj">The object on which to acquire the lock. </param>
      <param name="lockTaken">The result of the attempt to acquire the lock, passed by reference. The input must be false. The output is true if the lock is acquired; otherwise, the output is false. The output is set even if an exception occurs during the attempt to acquire the lock.</param>
      <exception cref="T:System.ArgumentException">The input to <paramref name="lockTaken" /> is true.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="obj" /> parameter is null. </exception>
    </member>
    <member name="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)">
      <summary>Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object.</summary>
      <returns>true if the current thread acquires the lock; otherwise, false.</returns>
      <param name="obj">The object on which to acquire the lock. </param>
      <param name="millisecondsTimeout">The number of milliseconds to wait for the lock. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="obj" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is negative, and not equal to <see cref="F:System.Threading.Timeout.Infinite" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)">
      <summary>Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</summary>
      <param name="obj">The object on which to acquire the lock. </param>
      <param name="millisecondsTimeout">The number of milliseconds to wait for the lock. </param>
      <param name="lockTaken">The result of the attempt to acquire the lock, passed by reference. The input must be false. The output is true if the lock is acquired; otherwise, the output is false. The output is set even if an exception occurs during the attempt to acquire the lock.</param>
      <exception cref="T:System.ArgumentException">The input to <paramref name="lockTaken" /> is true.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="obj" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is negative, and not equal to <see cref="F:System.Threading.Timeout.Infinite" />. </exception>
    </member>
    <member name="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)">
      <summary>Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object.</summary>
      <returns>true if the current thread acquires the lock without blocking; otherwise, false.</returns>
      <param name="obj">The object on which to acquire the lock. </param>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait for the lock. A value of –1 millisecond specifies an infinite wait.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="obj" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="timeout" /> in milliseconds is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)">
      <summary>Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</summary>
      <param name="obj">The object on which to acquire the lock. </param>
      <param name="timeout">The amount of time to wait for the lock. A value of –1 millisecond specifies an infinite wait.</param>
      <param name="lockTaken">The result of the attempt to acquire the lock, passed by reference. The input must be false. The output is true if the lock is acquired; otherwise, the output is false. The output is set even if an exception occurs during the attempt to acquire the lock.</param>
      <exception cref="T:System.ArgumentException">The input to <paramref name="lockTaken" /> is true.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="obj" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="timeout" /> in milliseconds is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />. </exception>
    </member>
    <member name="M:System.Threading.Monitor.Wait(System.Object)">
      <summary>Releases the lock on an object and blocks the current thread until it reacquires the lock.</summary>
      <returns>true if the call returned because the caller reacquired the lock for the specified object. This method does not return if the lock is not reacquired.</returns>
      <param name="obj">The object on which to wait. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="obj" /> parameter is null. </exception>
      <exception cref="T:System.Threading.SynchronizationLockException">The calling thread does not own the lock for the specified object. </exception>
      <exception cref="T:System.Threading.ThreadInterruptedException">The thread that invokes Wait is later interrupted from the waiting state. This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
      <summary>Releases the lock on an object and blocks the current thread until it reacquires the lock. If the specified time-out interval elapses, the thread enters the ready queue.</summary>
      <returns>true if the lock was reacquired before the specified time elapsed; false if the lock was reacquired after the specified time elapsed. The method does not return until the lock is reacquired.</returns>
      <param name="obj">The object on which to wait. </param>
      <param name="millisecondsTimeout">The number of milliseconds to wait before the thread enters the ready queue. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="obj" /> parameter is null. </exception>
      <exception cref="T:System.Threading.SynchronizationLockException">The calling thread does not own the lock for the specified object. </exception>
      <exception cref="T:System.Threading.ThreadInterruptedException">The thread that invokes Wait is later interrupted from the waiting state. This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of the <paramref name="millisecondsTimeout" /> parameter is negative, and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
      <summary>Releases the lock on an object and blocks the current thread until it reacquires the lock. If the specified time-out interval elapses, the thread enters the ready queue. This method also specifies whether the synchronization domain for the context (if in a synchronized context) is exited before the wait and reacquired afterward.</summary>
      <returns>true if the lock was reacquired before the specified time elapsed; false if the lock was reacquired after the specified time elapsed. The method does not return until the lock is reacquired.</returns>
      <param name="obj">The object on which to wait. </param>
      <param name="millisecondsTimeout">The number of milliseconds to wait before the thread enters the ready queue. </param>
      <param name="exitContext">true to exit and reacquire the synchronization domain for the context (if in a synchronized context) before the wait; otherwise, false. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="obj" /> parameter is null. </exception>
      <exception cref="T:System.Threading.SynchronizationLockException">Wait is not invoked from within a synchronized block of code. </exception>
      <exception cref="T:System.Threading.ThreadInterruptedException">The thread that invokes Wait is later interrupted from the waiting state. This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of the <paramref name="millisecondsTimeout" /> parameter is negative, and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
      <summary>Releases the lock on an object and blocks the current thread until it reacquires the lock. If the specified time-out interval elapses, the thread enters the ready queue.</summary>
      <returns>true if the lock was reacquired before the specified time elapsed; false if the lock was reacquired after the specified time elapsed. The method does not return until the lock is reacquired.</returns>
      <param name="obj">The object on which to wait. </param>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait before the thread enters the ready queue. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="obj" /> parameter is null. </exception>
      <exception cref="T:System.Threading.SynchronizationLockException">The calling thread does not own the lock for the specified object. </exception>
      <exception cref="T:System.Threading.ThreadInterruptedException">The thread that invokes Wait is later interrupted from the waiting state. This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of the <paramref name="timeout" /> parameter in milliseconds is negative and does not represent <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
      <summary>Releases the lock on an object and blocks the current thread until it reacquires the lock. If the specified time-out interval elapses, the thread enters the ready queue. Optionally exits the synchronization domain for the synchronized context before the wait and reacquires the domain afterward.</summary>
      <returns>true if the lock was reacquired before the specified time elapsed; false if the lock was reacquired after the specified time elapsed. The method does not return until the lock is reacquired.</returns>
      <param name="obj">The object on which to wait. </param>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait before the thread enters the ready queue. </param>
      <param name="exitContext">true to exit and reacquire the synchronization domain for the context (if in a synchronized context) before the wait; otherwise, false. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="obj" /> parameter is null. </exception>
      <exception cref="T:System.Threading.SynchronizationLockException">Wait is not invoked from within a synchronized block of code. </exception>
      <exception cref="T:System.Threading.ThreadInterruptedException">The thread that invokes Wait is later interrupted from the waiting state. This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="timeout" /> parameter is negative and does not represent <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Threading.Mutex">
      <summary>A synchronization primitive that can also be used for interprocess synchronization. </summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Mutex.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with default properties.</summary>
    </member>
    <member name="M:System.Threading.Mutex.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with a Boolean value that indicates whether the calling thread should have initial ownership of the mutex.</summary>
      <param name="initiallyOwned">true to give the calling thread initial ownership of the mutex; otherwise, false. </param>
    </member>
    <member name="M:System.Threading.Mutex.#ctor(System.Boolean,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with a Boolean value that indicates whether the calling thread should have initial ownership of the mutex, and a string that is the name of the mutex.</summary>
      <param name="initiallyOwned">true to give the calling thread initial ownership of the named system mutex if the named system mutex is created as a result of this call; otherwise, false. </param>
      <param name="name">The name of the <see cref="T:System.Threading.Mutex" />. If the value is null, the <see cref="T:System.Threading.Mutex" /> is unnamed. </param>
      <exception cref="T:System.UnauthorizedAccessException">The named mutex exists and has access control security, but the user does not have <see cref="F:System.Security.AccessControl.MutexRights.FullControl" />.</exception>
      <exception cref="T:System.IO.IOException">A Win32 error occurred.</exception>
      <exception cref="T:System.ApplicationException">The named mutex cannot be created, perhaps because a wait handle of a different type has the same name.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is longer than 260 characters.</exception>
    </member>
    <member name="M:System.Threading.Mutex.#ctor(System.Boolean,System.String,System.Boolean@)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with a Boolean value that indicates whether the calling thread should have initial ownership of the mutex, a string that is the name of the mutex, and a Boolean value that, when the method returns, indicates whether the calling thread was granted initial ownership of the mutex.</summary>
      <param name="initiallyOwned">true to give the calling thread initial ownership of the named system mutex if the named system mutex is created as a result of this call; otherwise, false. </param>
      <param name="name">The name of the <see cref="T:System.Threading.Mutex" />. If the value is null, the <see cref="T:System.Threading.Mutex" /> is unnamed. </param>
      <param name="createdNew">When this method returns, contains a Boolean that is true if a local mutex was created (that is, if <paramref name="name" /> is null or an empty string) or if the specified named system mutex was created; false if the specified named system mutex already existed. This parameter is passed uninitialized. </param>
      <exception cref="T:System.UnauthorizedAccessException">The named mutex exists and has access control security, but the user does not have <see cref="F:System.Security.AccessControl.MutexRights.FullControl" />.</exception>
      <exception cref="T:System.IO.IOException">A Win32 error occurred.</exception>
      <exception cref="T:System.ApplicationException">The named mutex cannot be created, perhaps because a wait handle of a different type has the same name.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is longer than 260 characters.</exception>
    </member>
    <member name="M:System.Threading.Mutex.#ctor(System.Boolean,System.String,System.Boolean@,System.Security.AccessControl.MutexSecurity)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with a Boolean value that indicates whether the calling thread should have initial ownership of the mutex, a string that is the name of the mutex, a Boolean variable that, when the method returns, indicates whether the calling thread was granted initial ownership of the mutex, and the access control security to be applied to the named mutex.</summary>
      <param name="initiallyOwned">true to give the calling thread initial ownership of the named system mutex if the named system mutex is created as a result of this call; otherwise, false. </param>
      <param name="name">The name of the system mutex. If the value is null, the <see cref="T:System.Threading.Mutex" /> is unnamed. </param>
      <param name="createdNew">When this method returns, contains a Boolean that is true if a local mutex was created (that is, if <paramref name="name" /> is null or an empty string) or if the specified named system mutex was created; false if the specified named system mutex already existed. This parameter is passed uninitialized. </param>
      <param name="mutexSecurity">A <see cref="T:System.Security.AccessControl.MutexSecurity" />  object that represents the access control security to be applied to the named system mutex.</param>
      <exception cref="T:System.IO.IOException">A Win32 error occurred.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The named mutex exists and has access control security, but the user does not have <see cref="F:System.Security.AccessControl.MutexRights.FullControl" />.</exception>
      <exception cref="T:System.ApplicationException">The named mutex cannot be created, perhaps because a wait handle of a different type has the same name.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is longer than 260 characters.</exception>
    </member>
    <member name="M:System.Threading.Mutex.GetAccessControl">
      <summary>Gets a <see cref="T:System.Security.AccessControl.MutexSecurity" /> object that represents the access control security for the named mutex.</summary>
      <returns>A <see cref="T:System.Security.AccessControl.MutexSecurity" /> object that represents the access control security for the named mutex.</returns>
      <exception cref="T:System.UnauthorizedAccessException">The current <see cref="T:System.Threading.Mutex" /> object represents a named system mutex, but the user does not have <see cref="F:System.Security.AccessControl.MutexRights.ReadPermissions" />.-or-The current <see cref="T:System.Threading.Mutex" /> object represents a named system mutex, and was not opened with <see cref="F:System.Security.AccessControl.MutexRights.ReadPermissions" />.</exception>
      <exception cref="T:System.NotSupportedException">Not supported for Windows 98 or Windows Millennium Edition.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Threading.Mutex.OpenExisting(System.String)">
      <summary>Opens an existing named mutex.</summary>
      <returns>A <see cref="T:System.Threading.Mutex" /> object that represents a named system mutex.</returns>
      <param name="name">The name of a system-wide named mutex object.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is a zero-length string.-or-<paramref name="name" /> is longer than 260 characters.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
      <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">The named mutex does not exist.</exception>
      <exception cref="T:System.IO.IOException">A Win32 error occurred.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The named mutex exists, but the user does not have the security access required to use it.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Threading.Mutex.OpenExisting(System.String,System.Security.AccessControl.MutexRights)">
      <summary>Open an existing named mutex, specifying the desired security access.</summary>
      <returns>A <see cref="T:System.Threading.Mutex" /> object that represents the named system mutex.</returns>
      <param name="name">The name of a system mutex.</param>
      <param name="rights">A combination of <see cref="T:System.Security.AccessControl.MutexRights" />  values that represent the desired security access.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is an empty string. -or-<paramref name="name" /> is longer than 260 characters.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
      <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">The named mutex does not exist.</exception>
      <exception cref="T:System.IO.IOException">A Win32 error occurred.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The named mutex exists, and the user does not have the desired security access.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Threading.Mutex.ReleaseMutex">
      <summary>Releases the <see cref="T:System.Threading.Mutex" /> once.</summary>
      <exception cref="T:System.ApplicationException">The calling thread does not own the mutex. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Mutex.SetAccessControl(System.Security.AccessControl.MutexSecurity)">
      <summary>Sets the access control security for a named system mutex.</summary>
      <param name="mutexSecurity">A <see cref="T:System.Security.AccessControl.MutexSecurity" />  object that represents the access control security to be applied to the named system mutex.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mutexSecurity" /> is null.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The user does not have <see cref="F:System.Security.AccessControl.MutexRights.ChangePermissions" />.-or-The mutex was not opened with <see cref="F:System.Security.AccessControl.MutexRights.ChangePermissions" />.</exception>
      <exception cref="T:System.SystemException">The current <see cref="T:System.Threading.Mutex" /> object does not represent a named system mutex.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="T:System.Threading.NativeOverlapped">
      <summary>Provides an explicit layout that is visible from unmanaged code and that will have the same layout as the Win32 OVERLAPPED structure with additional reserved fields at the end.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Threading.NativeOverlapped.EventHandle">
      <summary>Specifies the handle to an event set to the signaled state when the operation is complete. The calling process must set this member either to zero or to a valid event handle before calling any overlapped functions.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Threading.NativeOverlapped.InternalHigh">
      <summary>Specifies the length of the data transferred. Reserved for operating system use.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Threading.NativeOverlapped.InternalLow">
      <summary>Specifies a system-dependent status. Reserved for operating system use.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Threading.NativeOverlapped.OffsetHigh">
      <summary>Specifies the high word of the byte offset at which to start the transfer.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Threading.NativeOverlapped.OffsetLow">
      <summary>Specifies a file position at which to start the transfer.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Threading.Overlapped">
      <summary>Provides a managed representation of a Win32 OVERLAPPED structure, including methods to transfer information from an <see cref="T:System.Threading.Overlapped" /> instance to a <see cref="T:System.Threading.NativeOverlapped" /> structure.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.Overlapped.#ctor">
      <summary>Initializes a new, empty instance of the <see cref="T:System.Threading.Overlapped" /> class.</summary>
    </member>
    <member name="M:System.Threading.Overlapped.#ctor(System.Int32,System.Int32,System.Int32,System.IAsyncResult)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Overlapped" /> class with the specified file position, the 32-bit integer handle to an event that is signaled when the I/O operation is complete, and an interface through which to return the results of the operation.</summary>
      <param name="offsetLo">The low word of the file position at which to start the transfer. </param>
      <param name="offsetHi">The high word of the file position at which to start the transfer. </param>
      <param name="hEvent">The handle to an event that is signaled when the I/O operation is complete. </param>
      <param name="ar">An object that implements the <see cref="T:System.IAsyncResult" /> interface and provides status information on the I/O operation. </param>
    </member>
    <member name="M:System.Threading.Overlapped.#ctor(System.Int32,System.Int32,System.IntPtr,System.IAsyncResult)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Overlapped" /> class with the specified file position, the handle to an event that is signaled when the I/O operation is complete, and an interface through which to return the results of the operation.</summary>
      <param name="offsetLo">The low word of the file position at which to start the transfer. </param>
      <param name="offsetHi">The high word of the file position at which to start the transfer. </param>
      <param name="hEvent">The handle to an event that is signaled when the I/O operation is complete. </param>
      <param name="ar">An object that implements the <see cref="T:System.IAsyncResult" /> interface and provides status information on the I/O operation. </param>
    </member>
    <member name="P:System.Threading.Overlapped.AsyncResult">
      <summary>Gets or sets the object that provides status information on the I/O operation.</summary>
      <returns>An object that implements the <see cref="T:System.IAsyncResult" /> interface.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Threading.Overlapped.EventHandle">
      <summary>Gets or sets the 32-bit integer handle to a synchronization event that is signaled when the I/O operation is complete.</summary>
      <returns>An <see cref="T:System.Int32" /> value representing the handle of the synchronization event.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Threading.Overlapped.EventHandleIntPtr">
      <summary>Gets or sets the handle to the synchronization event that is signaled when the I/O operation is complete.</summary>
      <returns>An <see cref="T:System.IntPtr" /> representing the handle of the event.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.Overlapped.Free(System.Threading.NativeOverlapped*)">
      <summary>Frees the unmanaged memory associated with a native overlapped structure allocated by the <see cref="Overload:System.Threading.Overlapped.Pack" /> method.</summary>
      <param name="nativeOverlappedPtr">A pointer to the <see cref="T:System.Threading.NativeOverlapped" /> structure to be freed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nativeOverlappedPtr" /> is null.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Threading.Overlapped.OffsetHigh">
      <summary>Gets or sets the high-order word of the file position at which to start the transfer. The file position is a byte offset from the start of the file.</summary>
      <returns>An <see cref="T:System.Int32" /> value representing the high word of the file position.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Threading.Overlapped.OffsetLow">
      <summary>Gets or sets the low-order word of the file position at which to start the transfer. The file position is a byte offset from the start of the file.</summary>
      <returns>An <see cref="T:System.Int32" /> value representing the low word of the file position.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback)">
      <summary>Packs the current instance into a <see cref="T:System.Threading.NativeOverlapped" /> structure, specifying the delegate to be invoked when the asynchronous I/O operation is complete.</summary>
      <returns>An unmanaged pointer to a <see cref="T:System.Threading.NativeOverlapped" /> structure. </returns>
      <param name="iocb">An <see cref="T:System.Threading.IOCompletionCallback" /> delegate that represents the callback method invoked when the asynchronous I/O operation completes.</param>
      <exception cref="T:System.InvalidOperationException">The current <see cref="T:System.Threading.Overlapped" /> has already been packed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback,System.Object)">
      <summary>Packs the current instance into a <see cref="T:System.Threading.NativeOverlapped" /> structure, specifying a delegate that is invoked when the asynchronous I/O operation is complete and a managed object that serves as a buffer.</summary>
      <returns>An unmanaged pointer to a <see cref="T:System.Threading.NativeOverlapped" /> structure. </returns>
      <param name="iocb">An <see cref="T:System.Threading.IOCompletionCallback" /> delegate that represents the callback method invoked when the asynchronous I/O operation completes.</param>
      <param name="userData">An object or array of objects representing the input or output buffer for the operation. Each object represents a buffer, for example an array of bytes.</param>
      <exception cref="T:System.InvalidOperationException">The current <see cref="T:System.Threading.Overlapped" /> has already been packed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.Overlapped.Unpack(System.Threading.NativeOverlapped*)">
      <summary>Unpacks the specified unmanaged <see cref="T:System.Threading.NativeOverlapped" /> structure into a managed <see cref="T:System.Threading.Overlapped" /> object. </summary>
      <returns>An <see cref="T:System.Threading.Overlapped" /> object containing the information unpacked from the native structure.</returns>
      <param name="nativeOverlappedPtr">An unmanaged pointer to a <see cref="T:System.Threading.NativeOverlapped" /> structure.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nativeOverlappedPtr" /> is null.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback)">
      <summary>Packs the current instance into a <see cref="T:System.Threading.NativeOverlapped" /> structure specifying the delegate to invoke when the asynchronous I/O operation is complete. Does not propagate the calling stack.</summary>
      <returns>An unmanaged pointer to a <see cref="T:System.Threading.NativeOverlapped" /> structure. </returns>
      <param name="iocb">An <see cref="T:System.Threading.IOCompletionCallback" /> delegate that represents the callback method invoked when the asynchronous I/O operation completes.</param>
      <exception cref="T:System.InvalidOperationException">The current <see cref="T:System.Threading.Overlapped" /> has already been packed.</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence, ControlPolicy" />
      </PermissionSet>
    </member>
    <member name="M:System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback,System.Object)">
      <summary>Packs the current instance into a <see cref="T:System.Threading.NativeOverlapped" /> structure, specifying the delegate to invoke when the asynchronous I/O operation is complete and the managed object that serves as a buffer. Does not propagate the calling stack.</summary>
      <returns>An unmanaged pointer to a <see cref="T:System.Threading.NativeOverlapped" /> structure. </returns>
      <param name="iocb">An <see cref="T:System.Threading.IOCompletionCallback" /> delegate that represents the callback method invoked when the asynchronous I/O operation completes.</param>
      <param name="userData">An object or array of objects representing the input or output buffer for the operation. Each object represents a buffer, for example an array of bytes.</param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.InvalidOperationException">The current <see cref="T:System.Threading.Overlapped" /> is already packed.</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence, ControlPolicy" />
      </PermissionSet>
    </member>
    <member name="T:System.Threading.ParameterizedThreadStart">
      <summary>Represents the method that executes on a <see cref="T:System.Threading.Thread" />.</summary>
      <param name="obj">An object that contains data for the thread procedure.</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Threading.ReaderWriterLock">
      <summary>Defines a lock that supports single writers and multiple readers. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.ReaderWriterLock.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.ReaderWriterLock" /> class.</summary>
    </member>
    <member name="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
      <summary>Acquires a reader lock, using an <see cref="T:System.Int32" /> value for the time-out.</summary>
      <param name="millisecondsTimeout">The time-out in milliseconds. </param>
      <exception cref="T:System.ApplicationException">
        <paramref name="millisecondsTimeout" /> expires before the lock request is granted. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
      <summary>Acquires a reader lock, using a <see cref="T:System.TimeSpan" /> value for the time-out.</summary>
      <param name="timeout">A TimeSpan specifying the time-out period. </param>
      <exception cref="T:System.ApplicationException">
        <paramref name="timeout" /> expires before the lock request is granted. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> specifies a negative value other than -1 milliseconds. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
      <summary>Acquires the writer lock, using an <see cref="T:System.Int32" /> value for the time-out.</summary>
      <param name="millisecondsTimeout">The time-out in milliseconds. </param>
      <exception cref="T:System.ApplicationException">
        <paramref name="timeout" /> expires before the lock request is granted. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
      <summary>Acquires the writer lock, using a <see cref="T:System.TimeSpan" /> value for the time-out.</summary>
      <param name="timeout">The TimeSpan specifying the time-out period. </param>
      <exception cref="T:System.ApplicationException">
        <paramref name="timeout" /> expires before the lock request is granted. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> specifies a negative value other than -1 milliseconds. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)">
      <summary>Indicates whether the writer lock has been granted to any thread since the sequence number was obtained.</summary>
      <returns>true if the writer lock has been granted to any thread since the sequence number was obtained; otherwise, false.</returns>
      <param name="seqNum">The sequence number. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)">
      <summary>Restores the lock status of the thread to what it was before <see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" /> was called.</summary>
      <param name="lockCookie">A <see cref="T:System.Threading.LockCookie" /> returned by <see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" />. </param>
      <exception cref="T:System.ApplicationException">The thread does not have the writer lock. </exception>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="lockCookie" /> is a null pointer. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Threading.ReaderWriterLock.IsReaderLockHeld">
      <summary>Gets a value indicating whether the current thread holds a reader lock.</summary>
      <returns>true if the current thread holds a reader lock; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Threading.ReaderWriterLock.IsWriterLockHeld">
      <summary>Gets a value indicating whether the current thread holds the writer lock.</summary>
      <returns>true if the current thread holds the writer lock; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.ReaderWriterLock.ReleaseLock">
      <summary>Releases the lock, regardless of the number of times the thread acquired the lock.</summary>
      <returns>A <see cref="T:System.Threading.LockCookie" /> value representing the released lock.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.ReaderWriterLock.ReleaseReaderLock">
      <summary>Decrements the lock count.</summary>
      <exception cref="T:System.ApplicationException">The thread does not have any reader or writer locks. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.ReaderWriterLock.ReleaseWriterLock">
      <summary>Decrements the lock count on the writer lock.</summary>
      <exception cref="T:System.ApplicationException">The thread does not have the writer lock. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)">
      <summary>Restores the lock status of the thread to what it was before calling <see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" />.</summary>
      <param name="lockCookie">A <see cref="T:System.Threading.LockCookie" /> returned by <see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" />. </param>
      <exception cref="T:System.NullReferenceException">The address of <paramref name="lockCookie" /> is a null pointer. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
      <summary>Upgrades a reader lock to the writer lock, using an Int32 value for the time-out.</summary>
      <returns>A <see cref="T:System.Threading.LockCookie" /> value.</returns>
      <param name="millisecondsTimeout">The time-out in milliseconds. </param>
      <exception cref="T:System.ApplicationException">
        <paramref name="millisecondsTimeout" /> expires before the lock request is granted. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
      <summary>Upgrades a reader lock to the writer lock, using a TimeSpan value for the time-out.</summary>
      <returns>A <see cref="T:System.Threading.LockCookie" /> value.</returns>
      <param name="timeout">The TimeSpan specifying the time-out period. </param>
      <exception cref="T:System.ApplicationException">
        <paramref name="timeout" /> expires before the lock request is granted. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> specifies a negative value other than -1 milliseconds. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Threading.ReaderWriterLock.WriterSeqNum">
      <summary>Gets the current sequence number.</summary>
      <returns>The current sequence number.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Threading.RegisteredWaitHandle">
      <summary>Represents a handle that has been registered when calling <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
      <summary>Cancels a registered wait operation issued by the <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" /> method.</summary>
      <returns>true if the function succeeds; otherwise, false.</returns>
      <param name="waitObject">The <see cref="T:System.Threading.WaitHandle" /> to be signaled. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Threading.SemaphoreFullException">
      <summary>The exception that is thrown when the <see cref="Overload:System.Threading.Semaphore.Release" /> method is called on a semaphore whose count is already at the maximum. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.SemaphoreFullException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.SemaphoreFullException" /> class with default values.</summary>
    </member>
    <member name="M:System.Threading.SemaphoreFullException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.SemaphoreFullException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception being thrown. </param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Threading.SemaphoreFullException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.SemaphoreFullException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.Threading.SemaphoreFullException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.SemaphoreFullException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:System.Threading.SemaphoreSlim">
      <summary>Limits the number of threads that can access a resource or pool of resources concurrently.</summary>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.SemaphoreSlim" /> class, specifying the initial number of requests that can be granted concurrently.</summary>
      <param name="initialCount">The initial number of requests for the semaphore that can be granted concurrently.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="initialCount" /> is less than 0.</exception>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.#ctor(System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.SemaphoreSlim" /> class, specifying the initial and maximum number of requests that can be granted concurrently.</summary>
      <param name="initialCount">The initial number of requests for the semaphore that can be granted concurrently.</param>
      <param name="maxCount">The maximum number of requests for the semaphore that can be granted concurrently.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="initialCount" /> is less than 0. -or- <paramref name="initialCount" /> is greater than <paramref name="maxCount" />. -or- <paramref name="maxCount" /> is less than 0.</exception>
    </member>
    <member name="P:System.Threading.SemaphoreSlim.AvailableWaitHandle">
      <summary>Returns a <see cref="T:System.Threading.WaitHandle" /> that can be used to wait on the semaphore.</summary>
      <returns>A <see cref="T:System.Threading.WaitHandle" /> that can be used to wait on the semaphore.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.SemaphoreSlim" /> has been disposed.</exception>
    </member>
    <member name="P:System.Threading.SemaphoreSlim.CurrentCount">
      <summary>Gets the current count of the <see cref="T:System.Threading.SemaphoreSlim" />.</summary>
      <returns>The current count of the <see cref="T:System.Threading.SemaphoreSlim" />.</returns>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.Threading.SemaphoreSlim" /> class.</summary>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.Dispose(System.Boolean)">
      <summary>When overridden in a derived class, releases the unmanaged resources used by the <see cref="T:System.Threading.ManualResetEventSlim" />, and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.Release">
      <summary>Exits the <see cref="T:System.Threading.SemaphoreSlim" /> once.</summary>
      <returns>The previous count of the <see cref="T:System.Threading.SemaphoreSlim" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.Release(System.Int32)">
      <summary>Exits the <see cref="T:System.Threading.SemaphoreSlim" /> a specified number of times.</summary>
      <returns>The previous count of the <see cref="T:System.Threading.SemaphoreSlim" />.</returns>
      <param name="releaseCount">The number of times to exit the semaphore.</param>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="releaseCount" /> is less than 1.</exception>
      <exception cref="T:System.Threading.SemaphoreFullException">The <see cref="T:System.Threading.SemaphoreSlim" /> has already reached its maximum size.</exception>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.Wait">
      <summary>Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />.</summary>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.Wait(System.Int32)">
      <summary>Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a 32-bit signed integer to measure the time interval.</summary>
      <returns>true if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />; otherwise, false.</returns>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" />(-1) to wait indefinitely.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</exception>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
      <summary>Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a 32-bit signed integer to measure the time interval, while observing a <see cref="T:System.Threading.CancellationToken" />.</summary>
      <returns>true if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />; otherwise, false.</returns>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" />(-1) to wait indefinitely.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to observe.</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> was canceled.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</exception>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)">
      <summary>Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />, while observing a <see cref="T:System.Threading.CancellationToken" />.</summary>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> token to observe.</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> was canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
      <summary>Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a <see cref="T:System.TimeSpan" /> to measure the time interval.</summary>
      <returns>true if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />; otherwise, false.</returns>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
      <summary>Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a <see cref="T:System.TimeSpan" /> to measure the time interval, while observing a <see cref="T:System.Threading.CancellationToken" />.</summary>
      <returns>true if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />; otherwise, false.</returns>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to observe.</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> was canceled.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="T:System.Threading.SendOrPostCallback">
      <summary>Represents a method to be called when a message is to be dispatched to a synchronization context.  </summary>
      <param name="state">The object passed to the delegate.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Threading.SpinLock">
      <summary>Provides a mutual exclusion lock primitive where a thread trying to acquire the lock waits in a loop repeatedly checking until the lock becomes available.</summary>
    </member>
    <member name="M:System.Threading.SpinLock.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.SpinLock" /> structure with the option to track thread IDs to improve debugging.</summary>
      <param name="enableThreadOwnerTracking">Whether to capture and use thread IDs for debugging purposes.</param>
    </member>
    <member name="M:System.Threading.SpinLock.Enter(System.Boolean@)">
      <summary>Acquires the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</summary>
      <param name="lockTaken">True if the lock is acquired; otherwise, false. <paramref name="lockTaken" /> must be initialized to false prior to calling this method.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling Enter.</exception>
      <exception cref="T:System.Threading.LockRecursionException">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</exception>
    </member>
    <member name="M:System.Threading.SpinLock.Exit">
      <summary>Releases the lock.</summary>
      <exception cref="T:System.Threading.SynchronizationLockException">Thread ownership tracking is enabled, and the current thread is not the owner of this lock.</exception>
    </member>
    <member name="M:System.Threading.SpinLock.Exit(System.Boolean)">
      <summary>Releases the lock.</summary>
      <param name="useMemoryBarrier">A Boolean value that indicates whether a memory fence should be issued in order to immediately publish the exit operation to other threads.</param>
      <exception cref="T:System.Threading.SynchronizationLockException">Thread ownership tracking is enabled, and the current thread is not the owner of this lock.</exception>
    </member>
    <member name="P:System.Threading.SpinLock.IsHeld">
      <summary>Gets whether the lock is currently held by any thread.</summary>
      <returns>true if the lock is currently held by any thread; otherwise false.</returns>
    </member>
    <member name="P:System.Threading.SpinLock.IsHeldByCurrentThread">
      <summary>Gets whether the lock is held by the current thread.</summary>
      <returns>true if the lock is held by the current thread; otherwise false.</returns>
      <exception cref="T:System.InvalidOperationException">Thread ownership tracking is disabled.</exception>
    </member>
    <member name="P:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled">
      <summary>Gets whether thread ownership tracking is enabled for this instance.</summary>
      <returns>true if thread ownership tracking is enabled for this instance; otherwise false.</returns>
    </member>
    <member name="M:System.Threading.SpinLock.TryEnter(System.Boolean@)">
      <summary>Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</summary>
      <param name="lockTaken">True if the lock is acquired; otherwise, false. <paramref name="lockTaken" /> must be initialized to false prior to calling this method.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling TryEnter.</exception>
      <exception cref="T:System.Threading.LockRecursionException">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</exception>
    </member>
    <member name="M:System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)">
      <summary>Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</summary>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</param>
      <param name="lockTaken">True if the lock is acquired; otherwise, false. <paramref name="lockTaken" /> must be initialized to false prior to calling this method.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling TryEnter.</exception>
      <exception cref="T:System.Threading.LockRecursionException">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</exception>
    </member>
    <member name="M:System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)">
      <summary>Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</summary>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</param>
      <param name="lockTaken">True if the lock is acquired; otherwise, false. <paramref name="lockTaken" /> must be initialized to false prior to calling this method.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling TryEnter.</exception>
      <exception cref="T:System.Threading.LockRecursionException">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</exception>
    </member>
    <member name="T:System.Threading.SpinWait">
      <summary>Provides support for spin-based waiting.</summary>
    </member>
    <member name="P:System.Threading.SpinWait.Count">
      <summary>Gets the number of times <see cref="M:System.Threading.SpinWait.SpinOnce" /> has been called on this instance.</summary>
      <returns>Returns an integer that represents the number of times <see cref="M:System.Threading.SpinWait.SpinOnce" /> has been called on this instance.</returns>
    </member>
    <member name="P:System.Threading.SpinWait.NextSpinWillYield">
      <summary>Gets whether the next call to <see cref="M:System.Threading.SpinWait.SpinOnce" /> will yield the processor, triggering a forced context switch.</summary>
      <returns>Whether the next call to <see cref="M:System.Threading.SpinWait.SpinOnce" /> will yield the processor, triggering a forced context switch.</returns>
    </member>
    <member name="M:System.Threading.SpinWait.Reset">
      <summary>Resets the spin counter.</summary>
    </member>
    <member name="M:System.Threading.SpinWait.SpinOnce">
      <summary>Performs a single spin.</summary>
    </member>
    <member name="M:System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean})">
      <summary>Spins until the specified condition is satisfied.</summary>
      <param name="condition">A delegate to be executed over and over until it returns true.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="condition" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean},System.Int32)">
      <summary>Spins until the specified condition is satisfied or until the specified timeout is expired.</summary>
      <returns>True if the condition is satisfied within the timeout; otherwise, false</returns>
      <param name="condition">A delegate to be executed over and over until it returns true.</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="condition" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</exception>
    </member>
    <member name="M:System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean},System.TimeSpan)">
      <summary>Spins until the specified condition is satisfied or until the specified timeout is expired.</summary>
      <returns>True if the condition is satisfied within the timeout; otherwise, false</returns>
      <param name="condition">A delegate to be executed over and over until it returns true.</param>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="condition" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="T:System.Threading.SynchronizationContext">
      <summary>Provides the basic functionality for propagating a synchronization context in various synchronization models. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.SynchronizationContext.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Threading.SynchronizationContext" /> class.</summary>
    </member>
    <member name="M:System.Threading.SynchronizationContext.CreateCopy">
      <summary>When overridden in a derived class, creates a copy of the synchronization context.  </summary>
      <returns>A new <see cref="T:System.Threading.SynchronizationContext" /> object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Threading.SynchronizationContext.Current">
      <summary>Gets the synchronization context for the current thread.</summary>
      <returns>A <see cref="T:System.Threading.SynchronizationContext" /> object representing the current synchronization context.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.SynchronizationContext.IsWaitNotificationRequired">
      <summary>Determines if wait notification is required.</summary>
      <returns>true if wait notification is required; otherwise, false. </returns>
    </member>
    <member name="M:System.Threading.SynchronizationContext.OperationCompleted">
      <summary>When overridden in a derived class, responds to the notification that an operation has completed.</summary>
    </member>
    <member name="M:System.Threading.SynchronizationContext.OperationStarted">
      <summary>When overridden in a derived class, responds to the notification that an operation has started.</summary>
    </member>
    <member name="M:System.Threading.SynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
      <summary>When overridden in a derived class, dispatches an asynchronous message to a synchronization context.</summary>
      <param name="d">The <see cref="T:System.Threading.SendOrPostCallback" /> delegate to call.</param>
      <param name="state">The object passed to the delegate.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.SynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
      <summary>When overridden in a derived class, dispatches a synchronous message to a synchronization context.</summary>
      <param name="d">The <see cref="T:System.Threading.SendOrPostCallback" /> delegate to call.</param>
      <param name="state">The object passed to the delegate.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.SynchronizationContext.SetSynchronizationContext(System.Threading.SynchronizationContext)">
      <summary>Sets the current synchronization context.</summary>
      <param name="syncContext">The <see cref="T:System.Threading.SynchronizationContext" /> object to be set.</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence, ControlPolicy" />
      </PermissionSet>
    </member>
    <member name="M:System.Threading.SynchronizationContext.SetWaitNotificationRequired">
      <summary>Sets notification that wait notification is required and prepares the callback method so it can be called more reliably when a wait occurs.</summary>
    </member>
    <member name="M:System.Threading.SynchronizationContext.Wait(System.IntPtr[],System.Boolean,System.Int32)">
      <summary>Waits for any or all the elements in the specified array to receive a signal.</summary>
      <returns>The array index of the object that satisfied the wait.</returns>
      <param name="waitHandles">An array of type <see cref="T:System.IntPtr" /> that contains the native operating system handles.</param>
      <param name="waitAll">true to wait for all handles; false to wait for any handle. </param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="waitHandles" /> is null.</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence, ControlPolicy" />
      </PermissionSet>
    </member>
    <member name="M:System.Threading.SynchronizationContext.WaitHelper(System.IntPtr[],System.Boolean,System.Int32)">
      <summary>Helper function that waits for any or all the elements in the specified array to receive a signal.</summary>
      <returns>The array index of the object that satisfied the wait.</returns>
      <param name="waitHandles">An array of type <see cref="T:System.IntPtr" /> that contains the native operating system handles.</param>
      <param name="waitAll">true to wait for all handles;  false to wait for any handle. </param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</param>
    </member>
    <member name="T:System.Threading.SynchronizationLockException">
      <summary>The exception that is thrown when a method requires the caller to own the lock on a given Monitor, and the method is invoked by a caller that does not own that lock.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.SynchronizationLockException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.SynchronizationLockException" /> class with default properties.</summary>
    </member>
    <member name="M:System.Threading.SynchronizationLockException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.SynchronizationLockException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown. </param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
    </member>
    <member name="M:System.Threading.SynchronizationLockException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.SynchronizationLockException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
    </member>
    <member name="M:System.Threading.SynchronizationLockException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.SynchronizationLockException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Threading.Thread">
      <summary>Creates and controls a thread, sets its priority, and gets its status.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Thread" /> class, specifying a delegate that allows an object to be passed to the thread when the thread is started.</summary>
      <param name="start">A <see cref="T:System.Threading.ParameterizedThreadStart" /> delegate that represents the methods to be invoked when this thread begins executing.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="start" /> is null. </exception>
    </member>
    <member name="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Thread" /> class, specifying a delegate that allows an object to be passed to the thread when the thread is started and specifying the maximum stack size for the thread.</summary>
      <param name="start">A <see cref="T:System.Threading.ParameterizedThreadStart" /> delegate that represents the methods to be invoked when this thread begins executing.</param>
      <param name="maxStackSize">The maximum stack size to be used by the thread, or 0 to use the default maximum stack size specified in the header for the executable.ImportantFor partially trusted code, <paramref name="maxStackSize" /> is ignored if it is greater than the default stack size. No exception is thrown. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="start" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxStackSize" /> is less than zero.</exception>
    </member>
    <member name="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Thread" /> class.</summary>
      <param name="start">A <see cref="T:System.Threading.ThreadStart" /> delegate that represents the methods to be invoked when this thread begins executing. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="start" /> parameter is null. </exception>
    </member>
    <member name="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Thread" /> class, specifying the maximum stack size for the thread.</summary>
      <param name="start">A <see cref="T:System.Threading.ThreadStart" /> delegate that represents the methods to be invoked when this thread begins executing.</param>
      <param name="maxStackSize">The maximum stack size to be used by the thread, or 0 to use the default maximum stack size specified in the header for the executable.ImportantFor partially trusted code, <paramref name="maxStackSize" /> is ignored if it is greater than the default stack size. No exception is thrown. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="start" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxStackSize" /> is less than zero.</exception>
    </member>
    <member name="M:System.Threading.Thread.Abort">
      <summary>Raises a <see cref="T:System.Threading.ThreadAbortException" /> in the thread on which it is invoked, to begin the process of terminating the thread. Calling this method usually terminates the thread.</summary>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.Threading.ThreadStateException">The thread that is being aborted is currently suspended.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlThread" />
      </PermissionSet>
    </member>
    <member name="M:System.Threading.Thread.Abort(System.Object)">
      <summary>Raises a <see cref="T:System.Threading.ThreadAbortException" /> in the thread on which it is invoked, to begin the process of terminating the thread while also providing exception information about the thread termination. Calling this method usually terminates the thread.</summary>
      <param name="stateInfo">An object that contains application-specific information, such as state, which can be used by the thread being aborted. </param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.Threading.ThreadStateException">The thread that is being aborted is currently suspended.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlThread" />
      </PermissionSet>
    </member>
    <member name="M:System.Threading.Thread.AllocateDataSlot">
      <summary>Allocates an unnamed data slot on all the threads. For better performance, use fields that are marked with the <see cref="T:System.ThreadStaticAttribute" /> attribute instead.</summary>
      <returns>A <see cref="T:System.LocalDataStoreSlot" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.AllocateNamedDataSlot(System.String)">
      <summary>Allocates a named data slot on all threads. For better performance, use fields that are marked with the <see cref="T:System.ThreadStaticAttribute" /> attribute instead.</summary>
      <returns>A <see cref="T:System.LocalDataStoreSlot" />.</returns>
      <param name="name">The name of the data slot to be allocated. </param>
      <exception cref="T:System.ArgumentException">A named data slot with the specified name already exists.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Threading.Thread.ApartmentState">
      <summary>Gets or sets the apartment state of this thread.</summary>
      <returns>One of the <see cref="T:System.Threading.ApartmentState" /> values. The initial value is Unknown.</returns>
      <exception cref="T:System.ArgumentException">An attempt is made to set this property to a state that is not a valid apartment state (a state other than single-threaded apartment (STA) or multithreaded apartment (MTA)). </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.BeginCriticalRegion">
      <summary>Notifies a host that execution is about to enter a region of code in which the effects of a thread abort or unhandled exception might jeopardize other tasks in the application domain.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.BeginThreadAffinity">
      <summary>Notifies a host that managed code is about to execute instructions that depend on the identity of the current physical operating system thread.</summary>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlThread" />
      </PermissionSet>
    </member>
    <member name="P:System.Threading.Thread.CurrentContext">
      <summary>Gets the current context in which the thread is executing.</summary>
      <returns>A <see cref="T:System.Runtime.Remoting.Contexts.Context" /> representing the current thread context.</returns>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="Infrastructure" />
      </PermissionSet>
    </member>
    <member name="P:System.Threading.Thread.CurrentCulture">
      <summary>Gets or sets the culture for the current thread.</summary>
      <returns>A <see cref="T:System.Globalization.CultureInfo" /> representing the culture for the current thread.</returns>
      <exception cref="T:System.NotSupportedException">The property is set to a neutral culture. Neutral cultures cannot be used in formatting and parsing and therefore cannot be set as the thread's current culture.</exception>
      <exception cref="T:System.ArgumentNullException">The property is set to null.</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlThread" />
      </PermissionSet>
    </member>
    <member name="P:System.Threading.Thread.CurrentPrincipal">
      <summary>Gets or sets the thread's current principal (for role-based security).</summary>
      <returns>An <see cref="T:System.Security.Principal.IPrincipal" /> value representing the security context.</returns>
      <exception cref="T:System.Security.SecurityException">The caller does not have the permission required to set the principal. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlPrincipal" />
      </PermissionSet>
    </member>
    <member name="P:System.Threading.Thread.CurrentThread">
      <summary>Gets the currently running thread.</summary>
      <returns>A <see cref="T:System.Threading.Thread" /> that is the representation of the currently running thread.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Threading.Thread.CurrentUICulture">
      <summary>Gets or sets the current culture used by the Resource Manager to look up culture-specific resources at run time.</summary>
      <returns>A <see cref="T:System.Globalization.CultureInfo" /> representing the current culture.</returns>
      <exception cref="T:System.ArgumentNullException">The property is set to null. </exception>
      <exception cref="T:System.ArgumentException">The property is set to a culture name that cannot be used to locate a resource file. Resource filenames must include only letters, numbers, hyphens or underscores.</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Threading.Thread.DisableComObjectEagerCleanup">
      <summary>Turns off automatic cleanup of runtime callable wrappers (RCW) for the current thread. </summary>
    </member>
    <member name="M:System.Threading.Thread.EndCriticalRegion">
      <summary>Notifies a host that execution is about to enter a region of code in which the effects of a thread abort or unhandled exception are limited to the current task.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.EndThreadAffinity">
      <summary>Notifies a host that managed code has finished executing instructions that depend on the identity of the current physical operating system thread.</summary>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlThread" />
      </PermissionSet>
    </member>
    <member name="P:System.Threading.Thread.ExecutionContext">
      <summary>Gets an <see cref="T:System.Threading.ExecutionContext" /> object that contains information about the various contexts of the current thread. </summary>
      <returns>An <see cref="T:System.Threading.ExecutionContext" /> object that consolidates context information for the current thread.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.FreeNamedDataSlot(System.String)">
      <summary>Eliminates the association between a name and a slot, for all threads in the process. For better performance, use fields that are marked with the <see cref="T:System.ThreadStaticAttribute" /> attribute instead.</summary>
      <param name="name">The name of the data slot to be freed. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.GetApartmentState">
      <summary>Returns an <see cref="T:System.Threading.ApartmentState" /> value indicating the apartment state.</summary>
      <returns>One of the <see cref="T:System.Threading.ApartmentState" /> values indicating the apartment state of the managed thread. The default is <see cref="F:System.Threading.ApartmentState.Unknown" />.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.GetCompressedStack">
      <summary>Returns a <see cref="T:System.Threading.CompressedStack" /> object that can be used to capture the stack for the current thread. </summary>
      <returns>None. </returns>
      <exception cref="T:System.InvalidOperationException">In all cases.</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Security.Permissions.StrongNameIdentityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PublicKeyBlob="00000000000000000400000000000000" />
      </PermissionSet>
    </member>
    <member name="M:System.Threading.Thread.GetData(System.LocalDataStoreSlot)">
      <summary>Retrieves the value from the specified slot on the current thread, within the current thread's current domain. For better performance, use fields that are marked with the <see cref="T:System.ThreadStaticAttribute" /> attribute instead.</summary>
      <returns>The retrieved value.</returns>
      <param name="slot">The <see cref="T:System.LocalDataStoreSlot" /> from which to get the value. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.GetDomain">
      <summary>Returns the current domain in which the current thread is running.</summary>
      <returns>An <see cref="T:System.AppDomain" /> representing the current application domain of the running thread.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.GetDomainID">
      <summary>Returns a unique application domain identifier.</summary>
      <returns>A 32-bit signed integer uniquely identifying the application domain.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.GetHashCode">
      <summary>Returns a hash code for the current thread.</summary>
      <returns>An integer hash code value.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.GetNamedDataSlot(System.String)">
      <summary>Looks up a named data slot. For better performance, use fields that are marked with the <see cref="T:System.ThreadStaticAttribute" /> attribute instead.</summary>
      <returns>A <see cref="T:System.LocalDataStoreSlot" /> allocated for this thread.</returns>
      <param name="name">The name of the local data slot. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.Interrupt">
      <summary>Interrupts a thread that is in the WaitSleepJoin thread state.</summary>
      <exception cref="T:System.Security.SecurityException">The caller does not have the appropriate <see cref="T:System.Security.Permissions.SecurityPermission" />. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlThread" />
      </PermissionSet>
    </member>
    <member name="P:System.Threading.Thread.IsAlive">
      <summary>Gets a value indicating the execution status of the current thread.</summary>
      <returns>true if this thread has been started and has not terminated normally or aborted; otherwise, false.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Threading.Thread.IsBackground">
      <summary>Gets or sets a value indicating whether or not a thread is a background thread.</summary>
      <returns>true if this thread is or is to become a background thread; otherwise, false.</returns>
      <exception cref="T:System.Threading.ThreadStateException">The thread is dead. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Threading.Thread.IsThreadPoolThread">
      <summary>Gets a value indicating whether or not a thread belongs to the managed thread pool.</summary>
      <returns>true if this thread belongs to the managed thread pool; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.Join">
      <summary>Blocks the calling thread until a thread terminates, while continuing to perform standard COM and SendMessage pumping.</summary>
      <exception cref="T:System.Threading.ThreadStateException">The caller attempted to join a thread that is in the <see cref="F:System.Threading.ThreadState.Unstarted" /> state. </exception>
      <exception cref="T:System.Threading.ThreadInterruptedException">The thread is interrupted while waiting. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.Join(System.Int32)">
      <summary>Blocks the calling thread until a thread terminates or the specified time elapses, while continuing to perform standard COM and SendMessage pumping.</summary>
      <returns>true if the thread has terminated; false if the thread has not terminated after the amount of time specified by the <paramref name="millisecondsTimeout" /> parameter has elapsed.</returns>
      <param name="millisecondsTimeout">The number of milliseconds to wait for the thread to terminate. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="millisecondsTimeout" /> is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> in milliseconds. </exception>
      <exception cref="T:System.Threading.ThreadStateException">The thread has not been started. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.Join(System.TimeSpan)">
      <summary>Blocks the calling thread until a thread terminates or the specified time elapses, while continuing to perform standard COM and SendMessage pumping.</summary>
      <returns>true if the thread terminated; false if the thread has not terminated after the amount of time specified by the <paramref name="timeout" /> parameter has elapsed.</returns>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> set to the amount of time to wait for the thread to terminate. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="timeout" /> is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> in milliseconds, or is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds. </exception>
      <exception cref="T:System.Threading.ThreadStateException">The caller attempted to join a thread that is in the <see cref="F:System.Threading.ThreadState.Unstarted" /> state. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Threading.Thread.ManagedThreadId">
      <summary>Gets a unique identifier for the current managed thread.</summary>
      <returns>An integer that represents a unique identifier for this managed thread.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.MemoryBarrier">
      <summary>Synchronizes memory access as follows: The processor executing the current thread cannot reorder instructions in such a way that memory accesses prior to the call to <see cref="M:System.Threading.Thread.MemoryBarrier" /> execute after memory accesses that follow the call to <see cref="M:System.Threading.Thread.MemoryBarrier" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Threading.Thread.Name">
      <summary>Gets or sets the name of the thread.</summary>
      <returns>A string containing the name of the thread, or null if no name was set.</returns>
      <exception cref="T:System.InvalidOperationException">A set operation was requested, and the Name property has already been set. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Threading.Thread.Priority">
      <summary>Gets or sets a value indicating the scheduling priority of a thread.</summary>
      <returns>One of the <see cref="T:System.Threading.ThreadPriority" /> values. The default value is Normal.</returns>
      <exception cref="T:System.Threading.ThreadStateException">The thread has reached a final state, such as <see cref="F:System.Threading.ThreadState.Aborted" />. </exception>
      <exception cref="T:System.ArgumentException">The value specified for a set operation is not a valid ThreadPriority value. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.ResetAbort">
      <summary>Cancels an <see cref="M:System.Threading.Thread.Abort(System.Object)" /> requested for the current thread.</summary>
      <exception cref="T:System.Threading.ThreadStateException">Abort was not invoked on the current thread. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required security permission for the current thread. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlThread" />
      </PermissionSet>
    </member>
    <member name="M:System.Threading.Thread.Resume">
      <summary>Resumes a thread that has been suspended.</summary>
      <exception cref="T:System.Threading.ThreadStateException">The thread has not been started, is dead, or is not in the suspended state. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the appropriate <see cref="T:System.Security.Permissions.SecurityPermission" />. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlThread" />
      </PermissionSet>
    </member>
    <member name="M:System.Threading.Thread.SetApartmentState(System.Threading.ApartmentState)">
      <summary>Sets the apartment state of a thread before it is started.</summary>
      <param name="state">The new apartment state.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> is not a valid apartment state.</exception>
      <exception cref="T:System.Threading.ThreadStateException">The thread has already been started.</exception>
      <exception cref="T:System.InvalidOperationException">The apartment state has already been initialized.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.SetCompressedStack(System.Threading.CompressedStack)">
      <summary>Applies a captured <see cref="T:System.Threading.CompressedStack" /> to the current thread. </summary>
      <param name="stack">The <see cref="T:System.Threading.CompressedStack" /> object to be applied to the current thread.</param>
      <exception cref="T:System.InvalidOperationException">In all cases. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Security.Permissions.StrongNameIdentityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PublicKeyBlob="00000000000000000400000000000000" />
      </PermissionSet>
    </member>
    <member name="M:System.Threading.Thread.SetData(System.LocalDataStoreSlot,System.Object)">
      <summary>Sets the data in the specified slot on the currently running thread, for that thread's current domain. For better performance, use fields marked with the <see cref="T:System.ThreadStaticAttribute" /> attribute instead.</summary>
      <param name="slot">The <see cref="T:System.LocalDataStoreSlot" /> in which to set the value. </param>
      <param name="data">The value to be set. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.Sleep(System.Int32)">
      <summary>Suspends the current thread for a specified time.</summary>
      <param name="millisecondsTimeout">The number of milliseconds for which the thread is blocked. Specify zero (0) to indicate that this thread should be suspended to allow other waiting threads to execute. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to block the thread indefinitely. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The time-out value is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.Sleep(System.TimeSpan)">
      <summary>Blocks the current thread for a specified time.</summary>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> set to the amount of time for which the thread is blocked. Specify zero to indicate that this thread should be suspended to allow other waiting threads to execute. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to block the thread indefinitely. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="timeout" /> is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> in milliseconds, or is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.SpinWait(System.Int32)">
      <summary>Causes a thread to wait the number of times defined by the <paramref name="iterations" /> parameter.</summary>
      <param name="iterations">A 32-bit signed integer that defines how long a thread is to wait. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.Start">
      <summary>Causes the operating system to change the state of the current instance to <see cref="F:System.Threading.ThreadState.Running" />.</summary>
      <exception cref="T:System.Threading.ThreadStateException">The thread has already been started. </exception>
      <exception cref="T:System.OutOfMemoryException">There is not enough memory available to start this thread. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.Start(System.Object)">
      <summary>Causes the operating system to change the state of the current instance to <see cref="F:System.Threading.ThreadState.Running" />, and optionally supplies an object containing data to be used by the method the thread executes.</summary>
      <param name="parameter">An object that contains data to be used by the method the thread executes.</param>
      <exception cref="T:System.Threading.ThreadStateException">The thread has already been started. </exception>
      <exception cref="T:System.OutOfMemoryException">There is not enough memory available to start this thread. </exception>
      <exception cref="T:System.InvalidOperationException">This thread was created using a <see cref="T:System.Threading.ThreadStart" /> delegate instead of a <see cref="T:System.Threading.ParameterizedThreadStart" /> delegate.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.Suspend">
      <summary>Either suspends the thread, or if the thread is already suspended, has no effect.</summary>
      <exception cref="T:System.Threading.ThreadStateException">The thread has not been started or is dead. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the appropriate <see cref="T:System.Security.Permissions.SecurityPermission" />. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlThread" />
      </PermissionSet>
    </member>
    <member name="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">Passed-in array of names to be mapped.</param>
      <param name="cNames">Count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">Caller-allocated array which receives the IDs corresponding to the names.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can then be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">Receives a pointer to the requested type information object.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">Points to a location that receives the number of type information interfaces provided by the object.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">Identifies the member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">Pointer to the location where the result is to be stored.</param>
      <param name="pExcepInfo">Pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="P:System.Threading.Thread.ThreadState">
      <summary>Gets a value containing the states of the current thread.</summary>
      <returns>One of the <see cref="T:System.Threading.ThreadState" /> values indicating the state of the current thread. The initial value is Unstarted.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.TrySetApartmentState(System.Threading.ApartmentState)">
      <summary>Sets the apartment state of a thread before it is started.</summary>
      <returns>true if the apartment state is set; otherwise, false.</returns>
      <param name="state">The new apartment state.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> is not a valid apartment state.</exception>
      <exception cref="T:System.Threading.ThreadStateException">The thread has already been started.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Byte@)">
      <summary>Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</summary>
      <returns>The latest value written to the field by any processor.</returns>
      <param name="address">The field to be read. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Double@)">
      <summary>Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</summary>
      <returns>The latest value written to the field by any processor.</returns>
      <param name="address">The field to be read. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Int16@)">
      <summary>Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</summary>
      <returns>The latest value written to the field by any processor.</returns>
      <param name="address">The field to be read. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Int32@)">
      <summary>Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</summary>
      <returns>The latest value written to the field by any processor.</returns>
      <param name="address">The field to be read. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Int64@)">
      <summary>Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</summary>
      <returns>The latest value written to the field by any processor.</returns>
      <param name="address">The field to be read. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.IntPtr@)">
      <summary>Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</summary>
      <returns>The latest value written to the field by any processor.</returns>
      <param name="address">The field to be read. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Object@)">
      <summary>Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</summary>
      <returns>The latest value written to the field by any processor.</returns>
      <param name="address">The field to be read. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.SByte@)">
      <summary>Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</summary>
      <returns>The latest value written to the field by any processor.</returns>
      <param name="address">The field to be read. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Single@)">
      <summary>Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</summary>
      <returns>The latest value written to the field by any processor.</returns>
      <param name="address">The field to be read. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.UInt16@)">
      <summary>Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</summary>
      <returns>The latest value written to the field by any processor.</returns>
      <param name="address">The field to be read. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.UInt32@)">
      <summary>Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</summary>
      <returns>The latest value written to the field by any processor.</returns>
      <param name="address">The field to be read. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.UInt64@)">
      <summary>Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</summary>
      <returns>The latest value written to the field by any processor.</returns>
      <param name="address">The field to be read. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.UIntPtr@)">
      <summary>Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</summary>
      <returns>The latest value written to the field by any processor.</returns>
      <param name="address">The field to be read. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Byte@,System.Byte)">
      <summary>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</summary>
      <param name="address">The field to which the value is to be written. </param>
      <param name="value">The value to be written. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Double@,System.Double)">
      <summary>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</summary>
      <param name="address">The field to which the value is to be written. </param>
      <param name="value">The value to be written. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Int16@,System.Int16)">
      <summary>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</summary>
      <param name="address">The field to which the value is to be written. </param>
      <param name="value">The value to be written. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Int32@,System.Int32)">
      <summary>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</summary>
      <param name="address">The field to which the value is to be written. </param>
      <param name="value">The value to be written. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Int64@,System.Int64)">
      <summary>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</summary>
      <param name="address">The field to which the value is to be written. </param>
      <param name="value">The value to be written. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.IntPtr@,System.IntPtr)">
      <summary>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</summary>
      <param name="address">The field to which the value is to be written. </param>
      <param name="value">The value to be written. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Object@,System.Object)">
      <summary>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</summary>
      <param name="address">The field to which the value is to be written. </param>
      <param name="value">The value to be written. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.SByte@,System.SByte)">
      <summary>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</summary>
      <param name="address">The field to which the value is to be written. </param>
      <param name="value">The value to be written. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Single@,System.Single)">
      <summary>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</summary>
      <param name="address">The field to which the value is to be written. </param>
      <param name="value">The value to be written. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.UInt16@,System.UInt16)">
      <summary>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</summary>
      <param name="address">The field to which the value is to be written. </param>
      <param name="value">The value to be written. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.UInt32@,System.UInt32)">
      <summary>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</summary>
      <param name="address">The field to which the value is to be written. </param>
      <param name="value">The value to be written. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.UInt64@,System.UInt64)">
      <summary>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</summary>
      <param name="address">The field to which the value is to be written. </param>
      <param name="value">The value to be written. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.UIntPtr@,System.UIntPtr)">
      <summary>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</summary>
      <param name="address">The field to which the value is to be written. </param>
      <param name="value">The value to be written. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Thread.Yield">
      <summary>Causes the calling thread to yield execution to another thread that is ready to run on the current processor. The operating system selects the thread to yield to.</summary>
      <returns>true if the operating system switched execution to another thread; otherwise, false.</returns>
    </member>
    <member name="T:System.Threading.ThreadAbortException">
      <summary>The exception that is thrown when a call is made to the <see cref="M:System.Threading.Thread.Abort(System.Object)" /> method. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Threading.ThreadAbortException.ExceptionState">
      <summary>Gets an object that contains application-specific information related to the thread abort.</summary>
      <returns>An object containing application-specific information.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Threading.ThreadInterruptedException">
      <summary>The exception that is thrown when a <see cref="T:System.Threading.Thread" /> is interrupted while it is in a waiting state.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.ThreadInterruptedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.ThreadInterruptedException" /> class with default properties.</summary>
    </member>
    <member name="M:System.Threading.ThreadInterruptedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.ThreadInterruptedException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown. </param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
    </member>
    <member name="M:System.Threading.ThreadInterruptedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.ThreadInterruptedException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
    </member>
    <member name="M:System.Threading.ThreadInterruptedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.ThreadInterruptedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Threading.ThreadLocal`1">
      <summary>Provides thread-local storage of data.</summary>
      <typeparam name="T">Specifies the type of data stored per-thread.</typeparam>
    </member>
    <member name="M:System.Threading.ThreadLocal`1.#ctor">
      <summary>Initializes the <see cref="T:System.Threading.ThreadLocal`1" /> instance.</summary>
    </member>
    <member name="M:System.Threading.ThreadLocal`1.#ctor(System.Func{`0})">
      <summary>Initializes the <see cref="T:System.Threading.ThreadLocal`1" /> instance with the specified <paramref name="valueFactory" /> function.</summary>
      <param name="valueFactory">The <see cref="T:System.Func{T}" /> invoked to produce a lazily-initialized value when an attempt is made to retrieve <see cref="P:System.Threading.ThreadLocal`1.Value" /> without it having been previously initialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="valueFactory" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Threading.ThreadLocal`1.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.Threading.ThreadLocal`1" /> class.</summary>
    </member>
    <member name="M:System.Threading.ThreadLocal`1.Dispose(System.Boolean)">
      <summary>Releases the resources used by this <see cref="T:System.Threading.ThreadLocal{T}" /> instance.</summary>
      <param name="disposing">A Boolean value that indicates whether this method is being called due to a call to <see cref="M:System.Threading.ThreadLocal`1.Dispose" />.</param>
    </member>
    <member name="M:System.Threading.ThreadLocal`1.Finalize">
      <summary>Releases the resources used by this <see cref="T:System.Threading.ThreadLocal{T}" /> instance.</summary>
    </member>
    <member name="P:System.Threading.ThreadLocal`1.IsValueCreated">
      <summary>Gets whether <see cref="P:System.Threading.ThreadLocal`1.Value" /> is initialized on the current thread.</summary>
      <returns>true if <see cref="P:System.Threading.ThreadLocal`1.Value" /> is initialized on the current thread; otherwise false.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.ThreadLocal`1" /> instance has been disposed.</exception>
    </member>
    <member name="M:System.Threading.ThreadLocal`1.ToString">
      <summary>Creates and returns a string representation of this instance for the current thread.</summary>
      <returns>The result of calling <see cref="M:System.Object.ToString" /> on the <see cref="P:System.Threading.ThreadLocal`1.Value" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.ThreadLocal`1" /> instance has been disposed.</exception>
      <exception cref="T:System.NullReferenceException">The <see cref="P:System.Threading.ThreadLocal`1.Value" /> for the current thread is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">The initialization function referenced <see cref="P:System.Threading.ThreadLocal`1.Value" /> in an improper manner.</exception>
    </member>
    <member name="P:System.Threading.ThreadLocal`1.Value">
      <summary>Gets or sets the value of this instance for the current thread.</summary>
      <returns>Returns an instance of the object that this ThreadLocal is responsible for initializing.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.ThreadLocal`1" /> instance has been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The initialization function referenced <see cref="P:System.Threading.ThreadLocal`1.Value" /> in an improper manner.</exception>
    </member>
    <member name="T:System.Threading.ThreadPool">
      <summary>Provides a pool of threads that can be used to post work items, process asynchronous I/O, wait on behalf of other threads, and process timers.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)">
      <summary>Binds an operating system handle to the <see cref="T:System.Threading.ThreadPool" />.</summary>
      <returns>true if the handle is bound; otherwise, false.</returns>
      <param name="osHandle">An <see cref="T:System.IntPtr" /> that holds the handle. The handle must have been opened for overlapped I/O on the unmanaged side. </param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
      <summary>Binds an operating system handle to the <see cref="T:System.Threading.ThreadPool" />.</summary>
      <returns>true if the handle is bound; otherwise, false.</returns>
      <param name="osHandle">A <see cref="T:System.Runtime.InteropServices.SafeHandle" />  that holds the operating system handle. The handle must have been opened for overlapped I/O on the unmanaged side.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="osHandle" /> is null. </exception>
    </member>
    <member name="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)">
      <summary>Retrieves the difference between the maximum number of thread pool threads returned by the <see cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" /> method, and the number currently active.</summary>
      <param name="workerThreads">The number of available worker threads. </param>
      <param name="completionPortThreads">The number of available asynchronous I/O threads. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
      <summary>Retrieves the number of requests to the thread pool that can be active concurrently. All requests above that number remain queued until thread pool threads become available.</summary>
      <param name="workerThreads">The maximum number of worker threads in the thread pool. </param>
      <param name="completionPortThreads">The maximum number of asynchronous I/O threads in the thread pool. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
      <summary>Retrieves the number of idle threads the thread pool maintains in anticipation of new requests.</summary>
      <param name="workerThreads">The minimum number of idle worker threads currently maintained by the thread pool. </param>
      <param name="completionPortThreads">The minimum number of idle asynchronous I/O threads currently maintained by the thread pool. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
      <summary>Queues a method for execution. The method executes when a thread pool thread becomes available.</summary>
      <returns>true if the method is successfully queued; <see cref="T:System.NotSupportedException" /> is thrown if the work item could not be queued.</returns>
      <param name="callBack">A <see cref="T:System.Threading.WaitCallback" /> that represents the method to be executed. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callBack" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">The common language runtime (CLR) is hosted, and the host does not support this action.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
      <summary>Queues a method for execution, and specifies an object containing data to be used by the method. The method executes when a thread pool thread becomes available.</summary>
      <returns>true if the method is successfully queued; <see cref="T:System.NotSupportedException" /> is thrown if the work item could not be queued.</returns>
      <param name="callBack">A <see cref="T:System.Threading.WaitCallback" /> representing the method to execute. </param>
      <param name="state">An object containing data to be used by the method. </param>
      <exception cref="T:System.NotSupportedException">The common language runtime (CLR) is hosted, and the host does not support this action.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callBack" /> is null.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
      <summary>Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 32-bit signed integer for the time-out in milliseconds.</summary>
      <returns>The <see cref="T:System.Threading.RegisteredWaitHandle" /> that encapsulates the native handle.</returns>
      <param name="waitObject">The <see cref="T:System.Threading.WaitHandle" /> to register. Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <paramref name="waitObject" /> parameter is signaled. </param>
      <param name="state">The object that is passed to the delegate. </param>
      <param name="millisecondsTimeOutInterval">The time-out in milliseconds. If the <paramref name="millisecondsTimeOutInterval" /> parameter is 0 (zero), the function tests the object's state and returns immediately. If <paramref name="millisecondsTimeOutInterval" /> is -1, the function's time-out interval never elapses. </param>
      <param name="executeOnlyOnce">true to indicate that the thread will no longer wait on the <paramref name="waitObject" /> parameter after the delegate has been called; false to indicate that the timer is reset every time the wait operation completes until the wait is unregistered. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
      <summary>Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 64-bit signed integer for the time-out in milliseconds.</summary>
      <returns>The <see cref="T:System.Threading.RegisteredWaitHandle" /> that encapsulates the native handle.</returns>
      <param name="waitObject">The <see cref="T:System.Threading.WaitHandle" /> to register. Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <paramref name="waitObject" /> parameter is signaled. </param>
      <param name="state">The object passed to the delegate. </param>
      <param name="millisecondsTimeOutInterval">The time-out in milliseconds. If the <paramref name="millisecondsTimeOutInterval" /> parameter is 0 (zero), the function tests the object's state and returns immediately. If <paramref name="millisecondsTimeOutInterval" /> is -1, the function's time-out interval never elapses. </param>
      <param name="executeOnlyOnce">true to indicate that the thread will no longer wait on the <paramref name="waitObject" /> parameter after the delegate has been called; false to indicate that the timer is reset every time the wait operation completes until the wait is unregistered. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
      <summary>Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a <see cref="T:System.TimeSpan" /> value for the time-out.</summary>
      <returns>The <see cref="T:System.Threading.RegisteredWaitHandle" /> that encapsulates the native handle.</returns>
      <param name="waitObject">The <see cref="T:System.Threading.WaitHandle" /> to register. Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <paramref name="waitObject" /> parameter is signaled. </param>
      <param name="state">The object passed to the delegate. </param>
      <param name="timeout">The time-out represented by a <see cref="T:System.TimeSpan" />. If <paramref name="timeout" /> is 0 (zero), the function tests the object's state and returns immediately. If <paramref name="timeout" /> is -1, the function's time-out interval never elapses. </param>
      <param name="executeOnlyOnce">true to indicate that the thread will no longer wait on the <paramref name="waitObject" /> parameter after the delegate has been called; false to indicate that the timer is reset every time the wait operation completes until the wait is unregistered. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="timeout" /> parameter is less than -1. </exception>
      <exception cref="T:System.NotSupportedException">The <paramref name="timeout" /> parameter is greater than <see cref="F:System.Int32.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
      <summary>Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 32-bit unsigned integer for the time-out in milliseconds.</summary>
      <returns>The <see cref="T:System.Threading.RegisteredWaitHandle" /> that can be used to cancel the registered wait operation.</returns>
      <param name="waitObject">The <see cref="T:System.Threading.WaitHandle" /> to register. Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <paramref name="waitObject" /> parameter is signaled. </param>
      <param name="state">The object passed to the delegate. </param>
      <param name="millisecondsTimeOutInterval">The time-out in milliseconds. If the <paramref name="millisecondsTimeOutInterval" /> parameter is 0 (zero), the function tests the object's state and returns immediately. If <paramref name="millisecondsTimeOutInterval" /> is -1, the function's time-out interval never elapses. </param>
      <param name="executeOnlyOnce">true to indicate that the thread will no longer wait on the <paramref name="waitObject" /> parameter after the delegate has been called; false to indicate that the timer is reset every time the wait operation completes until the wait is unregistered. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
      <summary>Sets the number of requests to the thread pool that can be active concurrently. All requests above that number remain queued until thread pool threads become available.</summary>
      <returns>true if the change is successful; otherwise, false.</returns>
      <param name="workerThreads">The maximum number of worker threads in the thread pool. </param>
      <param name="completionPortThreads">The maximum number of asynchronous I/O threads in the thread pool. </param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlThread" />
      </PermissionSet>
    </member>
    <member name="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
      <summary>Sets the number of idle threads the thread pool maintains in anticipation of new requests.</summary>
      <returns>true if the change is successful; otherwise, false.</returns>
      <param name="workerThreads">The new minimum number of idle worker threads to be maintained by the thread pool. </param>
      <param name="completionPortThreads">The new minimum number of idle asynchronous I/O threads to be maintained by the thread pool. </param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlThread" />
      </PermissionSet>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
      <summary>Queues an overlapped I/O operation for execution.</summary>
      <returns>true if the operation was successfully queued to an I/O completion port; otherwise, false.</returns>
      <param name="overlapped">The <see cref="T:System.Threading.NativeOverlapped" /> structure to queue.</param>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
      <summary>Queues the specified delegate to the thread pool, but does not propagate the calling stack to the worker thread.</summary>
      <returns>true if the method succeeds; <see cref="T:System.OutOfMemoryException" /> is thrown if the work item could not be queued.</returns>
      <param name="callBack">A <see cref="T:System.Threading.WaitCallback" /> that represents the delegate to invoke when a thread in the thread pool picks up the work item. </param>
      <param name="state">The object that is passed to the delegate when serviced from the thread pool. </param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ApplicationException">An out-of-memory condition was encountered.</exception>
      <exception cref="T:System.OutOfMemoryException">The work item could not be queued.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callBack" /> is null.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence, ControlPolicy" />
      </PermissionSet>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
      <summary>Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, using a 32-bit signed integer for the time-out in milliseconds. Does not propagate the calling stack to the worker thread.</summary>
      <returns>The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</returns>
      <param name="waitObject">The <see cref="T:System.Threading.WaitHandle" /> to register. Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack">The delegate to call when the <paramref name="waitObject" /> parameter is signaled. </param>
      <param name="state">The object that is passed to the delegate. </param>
      <param name="millisecondsTimeOutInterval">The time-out in milliseconds. If the <paramref name="millisecondsTimeOutInterval" /> parameter is 0 (zero), the function tests the object's state and returns immediately. If <paramref name="millisecondsTimeOutInterval" /> is -1, the function's time-out interval never elapses. </param>
      <param name="executeOnlyOnce">true to indicate that the thread will no longer wait on the <paramref name="waitObject" /> parameter after the delegate has been called; false to indicate that the timer is reset every time the wait operation completes until the wait is unregistered. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence, ControlPolicy" />
      </PermissionSet>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
      <summary>Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 64-bit signed integer for the time-out in milliseconds. Does not propagate the calling stack to the worker thread.</summary>
      <returns>The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</returns>
      <param name="waitObject">The <see cref="T:System.Threading.WaitHandle" /> to register. Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack">The delegate to call when the <paramref name="waitObject" /> parameter is signaled. </param>
      <param name="state">The object that is passed to the delegate. </param>
      <param name="millisecondsTimeOutInterval">The time-out in milliseconds. If the <paramref name="millisecondsTimeOutInterval" /> parameter is 0 (zero), the function tests the object's state and returns immediately. If <paramref name="millisecondsTimeOutInterval" /> is -1, the function's time-out interval never elapses. </param>
      <param name="executeOnlyOnce">true to indicate that the thread will no longer wait on the <paramref name="waitObject" /> parameter after the delegate has been called; false to indicate that the timer is reset every time the wait operation completes until the wait is unregistered. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence, ControlPolicy" />
      </PermissionSet>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
      <summary>Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a <see cref="T:System.TimeSpan" /> value for the time-out. Does not propagate the calling stack to the worker thread.</summary>
      <returns>The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</returns>
      <param name="waitObject">The <see cref="T:System.Threading.WaitHandle" /> to register. Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack">The delegate to call when the <paramref name="waitObject" /> parameter is signaled. </param>
      <param name="state">The object that is passed to the delegate. </param>
      <param name="timeout">The time-out represented by a <see cref="T:System.TimeSpan" />. If <paramref name="timeout" /> is 0 (zero), the function tests the object's state and returns immediately. If <paramref name="timeout" /> is -1, the function's time-out interval never elapses. </param>
      <param name="executeOnlyOnce">true to indicate that the thread will no longer wait on the <paramref name="waitObject" /> parameter after the delegate has been called; false to indicate that the timer is reset every time the wait operation completes until the wait is unregistered. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="timeout" /> parameter is less than -1. </exception>
      <exception cref="T:System.NotSupportedException">The <paramref name="timeout" /> parameter is greater than <see cref="F:System.Int32.MaxValue" />. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence, ControlPolicy" />
      </PermissionSet>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
      <summary>Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 32-bit unsigned integer for the time-out in milliseconds. Does not propagate the calling stack to the worker thread.</summary>
      <returns>The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</returns>
      <param name="waitObject">The <see cref="T:System.Threading.WaitHandle" /> to register. Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack">The delegate to call when the <paramref name="waitObject" /> parameter is signaled. </param>
      <param name="state">The object that is passed to the delegate. </param>
      <param name="millisecondsTimeOutInterval">The time-out in milliseconds. If the <paramref name="millisecondsTimeOutInterval" /> parameter is 0 (zero), the function tests the object's state and returns immediately. If <paramref name="millisecondsTimeOutInterval" /> is -1, the function's time-out interval never elapses. </param>
      <param name="executeOnlyOnce">true to indicate that the thread will no longer wait on the <paramref name="waitObject" /> parameter after the delegate has been called; false to indicate that the timer is reset every time the wait operation completes until the wait is unregistered. </param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence, ControlPolicy" />
      </PermissionSet>
    </member>
    <member name="T:System.Threading.ThreadPriority">
      <summary>Specifies the scheduling priority of a <see cref="T:System.Threading.Thread" />.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Threading.ThreadPriority.Lowest">
      <summary>The <see cref="T:System.Threading.Thread" /> can be scheduled after threads with any other priority.</summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.BelowNormal">
      <summary>The <see cref="T:System.Threading.Thread" /> can be scheduled after threads with Normal priority and before those with Lowest priority.</summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.Normal">
      <summary>The <see cref="T:System.Threading.Thread" /> can be scheduled after threads with AboveNormal priority and before those with BelowNormal priority. Threads have Normal priority by default.</summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.AboveNormal">
      <summary>The <see cref="T:System.Threading.Thread" /> can be scheduled after threads with Highest priority and before those with Normal priority.</summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.Highest">
      <summary>The <see cref="T:System.Threading.Thread" /> can be scheduled before threads with any other priority.</summary>
    </member>
    <member name="T:System.Threading.ThreadStart">
      <summary>Represents the method that executes on a <see cref="T:System.Threading.Thread" />.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Threading.ThreadStartException">
      <summary>The exception that is thrown when a failure occurs in a managed thread after the underlying operating system thread has been started, but before the thread is ready to execute user code.</summary>
    </member>
    <member name="T:System.Threading.ThreadState">
      <summary>Specifies the execution states of a <see cref="T:System.Threading.Thread" />.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Threading.ThreadState.Running">
      <summary>The thread has been started, it is not blocked, and there is no pending <see cref="T:System.Threading.ThreadAbortException" />.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.StopRequested">
      <summary>The thread is being requested to stop. This is for internal use only.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.SuspendRequested">
      <summary>The thread is being requested to suspend.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Background">
      <summary>The thread is being executed as a background thread, as opposed to a foreground thread. This state is controlled by setting the <see cref="P:System.Threading.Thread.IsBackground" /> property.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Unstarted">
      <summary>The <see cref="M:System.Threading.Thread.Start" /> method has not been invoked on the thread.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Stopped">
      <summary>The thread has stopped.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.WaitSleepJoin">
      <summary>The thread is blocked. This could be the result of calling <see cref="M:System.Threading.Thread.Sleep(System.Int32)" /> or <see cref="M:System.Threading.Thread.Join" />, of requesting a lock — for example, by calling <see cref="M:System.Threading.Monitor.Enter(System.Object)" /> or <see cref="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)" /> — or of waiting on a thread synchronization object such as <see cref="T:System.Threading.ManualResetEvent" />. </summary>
    </member>
    <member name="F:System.Threading.ThreadState.Suspended">
      <summary>The thread has been suspended.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.AbortRequested">
      <summary>The <see cref="M:System.Threading.Thread.Abort(System.Object)" /> method has been invoked on the thread, but the thread has not yet received the pending <see cref="T:System.Threading.ThreadAbortException" /> that will attempt to terminate it.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Aborted">
      <summary>The thread state includes <see cref="F:System.Threading.ThreadState.AbortRequested" /> and the thread is now dead, but its state has not yet changed to <see cref="F:System.Threading.ThreadState.Stopped" />.</summary>
    </member>
    <member name="T:System.Threading.ThreadStateException">
      <summary>The exception that is thrown when a <see cref="T:System.Threading.Thread" /> is in an invalid <see cref="P:System.Threading.Thread.ThreadState" /> for the method call.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.ThreadStateException" /> class with default properties.</summary>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.ThreadStateException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown. </param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.ThreadStateException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.ThreadStateException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Threading.Timeout">
      <summary>Contains a constant used to specify an infinite amount of time. This class cannot be inherited. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Threading.Timeout.Infinite">
      <summary>A constant used to specify an infinite waiting period. This field is constant.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Threading.Timer">
      <summary>Provides a mechanism for executing a method at specified intervals. This class cannot be inherited.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Timer" /> class with an infinite period and an infinite due time, using the newly created <see cref="T:System.Threading.Timer" /> object as the state object. </summary>
      <param name="callback">A <see cref="T:System.Threading.TimerCallback" /> delegate representing a method to be executed.</param>
    </member>
    <member name="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the Timer class, using a 32-bit signed integer to specify the time interval.</summary>
      <param name="callback">A <see cref="T:System.Threading.TimerCallback" /> delegate representing a method to be executed. </param>
      <param name="state">An object containing information to be used by the callback method, or null. </param>
      <param name="dueTime">The amount of time to delay before <paramref name="callback" /> is invoked, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from starting. Specify zero (0) to start the timer immediately. </param>
      <param name="period">The time interval between invocations of <paramref name="callback" />, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="callback" /> parameter is null. </exception>
    </member>
    <member name="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)">
      <summary>Initializes a new instance of the Timer class, using 64-bit signed integers to measure time intervals.</summary>
      <param name="callback">A <see cref="T:System.Threading.TimerCallback" /> delegate representing a method to be executed. </param>
      <param name="state">An object containing information to be used by the callback method, or null. </param>
      <param name="dueTime">The amount of time to delay before <paramref name="callback" /> is invoked, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from starting. Specify zero (0) to start the timer immediately. </param>
      <param name="period">The time interval between invocations of <paramref name="callback" />, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />. </exception>
      <exception cref="T:System.NotSupportedException">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is greater than 4294967294. </exception>
    </member>
    <member name="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)">
      <summary>Initializes a new instance of the Timer class, using <see cref="T:System.TimeSpan" /> values to measure time intervals.</summary>
      <param name="callback">A <see cref="T:System.Threading.TimerCallback" /> delegate representing a method to be executed. </param>
      <param name="state">An object containing information to be used by the callback method, or null. </param>
      <param name="dueTime">The <see cref="T:System.TimeSpan" /> representing the amount of time to delay before the <paramref name="callback" /> parameter invokes its methods. Specify negative one (-1) milliseconds to prevent the timer from starting. Specify zero (0) to start the timer immediately. </param>
      <param name="period">The time interval between invocations of the methods referenced by <paramref name="callback" />. Specify negative one (-1) milliseconds to disable periodic signaling. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The number of milliseconds in the value of <paramref name="dueTime" /> or <paramref name="period" /> is negative and not equal to <see cref="F:System.Threading.Timeout.Infinite" />, or is greater than <see cref="F:System.Int32.MaxValue" />. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="callback" /> parameter is null. </exception>
    </member>
    <member name="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)">
      <summary>Initializes a new instance of the Timer class, using 32-bit unsigned integers to measure time intervals.</summary>
      <param name="callback">A <see cref="T:System.Threading.TimerCallback" /> delegate representing a method to be executed. </param>
      <param name="state">An object containing information to be used by the callback method, or null. </param>
      <param name="dueTime">The amount of time to delay before <paramref name="callback" /> is invoked, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from starting. Specify zero (0) to start the timer immediately. </param>
      <param name="period">The time interval between invocations of <paramref name="callback" />, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="callback" /> parameter is null. </exception>
    </member>
    <member name="M:System.Threading.Timer.Change(System.Int32,System.Int32)">
      <summary>Changes the start time and the interval between method invocations for a timer, using 32-bit signed integers to measure time intervals.</summary>
      <returns>true if the current instance has not been disposed; otherwise, false.</returns>
      <param name="dueTime">The amount of time to delay before the invoking the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from restarting. Specify zero (0) to restart the timer immediately. </param>
      <param name="period">The time interval between invocations of the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Timer" /> has already been disposed. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.Timer.Change(System.Int64,System.Int64)">
      <summary>Changes the start time and the interval between method invocations for a timer, using 64-bit signed integers to measure time intervals.</summary>
      <returns>true if the current instance has not been disposed; otherwise, false.</returns>
      <param name="dueTime">The amount of time to delay before the invoking the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from restarting. Specify zero (0) to restart the timer immediately. </param>
      <param name="period">The time interval between invocations of the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Timer" /> has already been disposed. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is less than -1. </exception>
      <exception cref="T:System.NotSupportedException">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is greater than 4294967294. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)">
      <summary>Changes the start time and the interval between method invocations for a timer, using <see cref="T:System.TimeSpan" /> values to measure time intervals.</summary>
      <returns>true if the current instance has not been disposed; otherwise, false.</returns>
      <param name="dueTime">A <see cref="T:System.TimeSpan" /> representing the amount of time to delay before invoking the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed. Specify negative one (-1) milliseconds to prevent the timer from restarting. Specify zero (0) to restart the timer immediately. </param>
      <param name="period">The time interval between invocations of the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed. Specify negative one (-1) milliseconds to disable periodic signaling. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Timer" /> has already been disposed. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="dueTime" /> or <paramref name="period" /> parameter, in milliseconds, is less than -1. </exception>
      <exception cref="T:System.NotSupportedException">The <paramref name="dueTime" /> or <paramref name="period" /> parameter, in milliseconds, is greater than 4294967294. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.Timer.Change(System.UInt32,System.UInt32)">
      <summary>Changes the start time and the interval between method invocations for a timer, using 32-bit unsigned integers to measure time intervals.</summary>
      <returns>true if the current instance has not been disposed; otherwise, false.</returns>
      <param name="dueTime">The amount of time to delay before the invoking the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from restarting. Specify zero (0) to restart the timer immediately. </param>
      <param name="period">The time interval between invocations of the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Timer" /> has already been disposed. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.Timer.Dispose">
      <summary>Releases all resources used by the current instance of <see cref="T:System.Threading.Timer" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.Timer.Dispose(System.Threading.WaitHandle)">
      <summary>Releases all resources used by the current instance of <see cref="T:System.Threading.Timer" /> and signals when the timer has been disposed of.</summary>
      <returns>true if the function succeeds; otherwise, false.</returns>
      <param name="notifyObject">The <see cref="T:System.Threading.WaitHandle" /> to be signaled when the Timer has been disposed of. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="notifyObject" /> parameter is null. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Threading.TimerCallback">
      <summary>Represents the method that handles calls from a <see cref="T:System.Threading.Timer" />.</summary>
      <param name="state">An object containing application-specific information relevant to the method invoked by this delegate, or null. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Threading.WaitCallback">
      <summary>Represents a callback method to be executed by a thread pool thread.</summary>
      <param name="state">An object containing information to be used by the callback method. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Threading.WaitHandle">
      <summary>Encapsulates operating system–specific objects that wait for exclusive access to shared resources.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.WaitHandle.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.WaitHandle" /> class.</summary>
    </member>
    <member name="M:System.Threading.WaitHandle.Close">
      <summary>When overridden in a derived class, releases all resources held by the current <see cref="T:System.Threading.WaitHandle" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.WaitHandle.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.Threading.WaitHandle" /> class.</summary>
    </member>
    <member name="M:System.Threading.WaitHandle.Dispose(System.Boolean)">
      <summary>When overridden in a derived class, releases the unmanaged resources used by the <see cref="T:System.Threading.WaitHandle" />, and optionally releases the managed resources.</summary>
      <param name="explicitDisposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="P:System.Threading.WaitHandle.Handle">
      <summary>Gets or sets the native operating system handle.</summary>
      <returns>An IntPtr representing the native operating system handle. The default is the value of the <see cref="F:System.Threading.WaitHandle.InvalidHandle" /> field.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Threading.WaitHandle.InvalidHandle">
      <summary>Represents an invalid native operating system handle. This field is read-only.</summary>
    </member>
    <member name="P:System.Threading.WaitHandle.SafeWaitHandle">
      <summary>Gets or sets the native operating system handle.</summary>
      <returns>A <see cref="T:Microsoft.Win32.SafeHandles.SafeWaitHandle" /> representing the native operating system handle.</returns>
    </member>
    <member name="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)">
      <summary>Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another, as an atomic operation.</summary>
      <returns>true if both the signal and the wait complete successfully; if the wait does not complete, the method does not return.</returns>
      <param name="toSignal">The <see cref="T:System.Threading.WaitHandle" /> to signal.</param>
      <param name="toWaitOn">The <see cref="T:System.Threading.WaitHandle" /> to wait on.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="toSignal" /> is null.-or-<paramref name="toWaitOn" /> is null. </exception>
      <exception cref="T:System.NotSupportedException">The method was called on a thread that has <see cref="T:System.STAThreadAttribute" />. </exception>
      <exception cref="T:System.PlatformNotSupportedException">This method is not supported on Windows 98 or Windows Millennium Edition. </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="toSignal" /> is a semaphore, and it already has a full count. </exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)">
      <summary>Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another, as an atomic operation, specifying a time-out interval as a 32-bit signed integer and specifying whether to exit the synchronization domain for the context before entering the wait.</summary>
      <returns>true if both the signal and the wait completed successfully, or false if the signal completed but the wait timed out.</returns>
      <param name="toSignal">The <see cref="T:System.Threading.WaitHandle" /> to signal.</param>
      <param name="toWaitOn">The <see cref="T:System.Threading.WaitHandle" /> to wait on.</param>
      <param name="millisecondsTimeout">An integer that represents the interval to wait. If the value is <see cref="F:System.Threading.Timeout.Infinite" />, that is, -1, the wait is infinite.</param>
      <param name="exitContext">true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, false. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="toSignal" /> is null.-or-<paramref name="toWaitOn" /> is null. </exception>
      <exception cref="T:System.NotSupportedException">The method is called on a thread that has <see cref="T:System.STAThreadAttribute" />. </exception>
      <exception cref="T:System.PlatformNotSupportedException">This method is not supported on Windows 98 or Windows Millennium Edition. </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="toSignal" /> is a semaphore, and it already has a full count. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out. </exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Threading.WaitHandle" /> cannot be signaled because it would exceed its maximum count.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)">
      <summary>Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another, as an atomic operation, specifying the time-out interval as a <see cref="T:System.TimeSpan" /> and specifying whether to exit the synchronization domain for the context before entering the wait.</summary>
      <returns>true if both the signal and the wait completed successfully, or false if the signal completed but the wait timed out.</returns>
      <param name="toSignal">The <see cref="T:System.Threading.WaitHandle" /> to signal.</param>
      <param name="toWaitOn">The <see cref="T:System.Threading.WaitHandle" /> to wait on.</param>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the interval to wait. If the value is -1, the wait is infinite.</param>
      <param name="exitContext">true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, false. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="toSignal" /> is null.-or-<paramref name="toWaitOn" /> is null. </exception>
      <exception cref="T:System.NotSupportedException">The method was called on a thread that has <see cref="T:System.STAThreadAttribute" />. </exception>
      <exception cref="T:System.PlatformNotSupportedException">This method is not supported on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="toSignal" /> is a semaphore, and it already has a full count. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> evaluates to a negative number of milliseconds other than -1. -or-<paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])">
      <summary>Waits for all the elements in the specified array to receive a signal.</summary>
      <returns>true when every element in <paramref name="waitHandles" /> has received a signal; otherwise the method never returns.</returns>
      <param name="waitHandles">A WaitHandle array containing the objects for which the current instance will wait. This array cannot contain multiple references to the same object. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is null. -or- One or more of the objects in the <paramref name="waitHandles" /> array are null. -or-<paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later. </exception>
      <exception cref="T:System.DuplicateWaitObjectException">The <paramref name="waitHandles" /> array contains elements that are duplicates. </exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.-or- The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element. </exception>
      <exception cref="T:System.ApplicationException">
        <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1. </exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait terminated because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)">
      <summary>Waits for all the elements in the specified array to receive a signal, using an <see cref="T:System.Int32" /> value to measure the time interval.</summary>
      <returns>true when every element in <paramref name="waitHandles" /> has received a signal; otherwise, false.</returns>
      <param name="waitHandles">A WaitHandle array containing the objects for which the current instance will wait. This array cannot contain multiple references to the same object (duplicates). </param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is null.-or- One or more of the objects in the <paramref name="waitHandles" /> array is null. -or-<paramref name="waitHandles" /> is an array with no elements. </exception>
      <exception cref="T:System.DuplicateWaitObjectException">The <paramref name="waitHandles" /> array contains elements that are duplicates. </exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.-or- The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out. </exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
      <summary>Waits for all the elements in the specified array to receive a signal, using an <see cref="T:System.Int32" /> value to measure the time interval and specifying whether to exit the synchronization domain before the wait.</summary>
      <returns>true when every element in <paramref name="waitHandles" /> has received a signal; otherwise, false.</returns>
      <param name="waitHandles">A WaitHandle array containing the objects for which the current instance will wait. This array cannot contain multiple references to the same object (duplicates). </param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely. </param>
      <param name="exitContext">true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, false. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is null.-or- One or more of the objects in the <paramref name="waitHandles" /> array is null. -or-<paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later. </exception>
      <exception cref="T:System.DuplicateWaitObjectException">The <paramref name="waitHandles" /> array contains elements that are duplicates. </exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.-or- The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element. </exception>
      <exception cref="T:System.ApplicationException">
        <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out. </exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)">
      <summary>Waits for all the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> value to measure the time interval.</summary>
      <returns>true when every element in <paramref name="waitHandles" /> has received a signal; otherwise, false.</returns>
      <param name="waitHandles">A WaitHandle array containing the objects for which the current instance will wait. This array cannot contain multiple references to the same object. </param>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds, to wait indefinitely. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is null. -or- One or more of the objects in the <paramref name="waitHandles" /> array is null. -or-<paramref name="waitHandles" /> is an array with no elements. </exception>
      <exception cref="T:System.DuplicateWaitObjectException">The <paramref name="waitHandles" /> array contains elements that are duplicates. </exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.-or- The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out. -or-<paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait terminated because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
      <summary>Waits for all the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> value to measure the time interval, and specifying whether to exit the synchronization domain before the wait.</summary>
      <returns>true when every element in <paramref name="waitHandles" /> has received a signal; otherwise false.</returns>
      <param name="waitHandles">A WaitHandle array containing the objects for which the current instance will wait. This array cannot contain multiple references to the same object. </param>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds, to wait indefinitely. </param>
      <param name="exitContext">true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, false. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is null. -or- One or more of the objects in the <paramref name="waitHandles" /> array is null. -or-<paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later. </exception>
      <exception cref="T:System.DuplicateWaitObjectException">The <paramref name="waitHandles" /> array contains elements that are duplicates. </exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.-or- The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element. </exception>
      <exception cref="T:System.ApplicationException">
        <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out. -or-<paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait terminated because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])">
      <summary>Waits for any of the elements in the specified array to receive a signal.</summary>
      <returns>The array index of the object that satisfied the wait.</returns>
      <param name="waitHandles">A WaitHandle array containing the objects for which the current instance will wait. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is null.-or-One or more of the objects in the <paramref name="waitHandles" /> array is null. </exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits. </exception>
      <exception cref="T:System.ApplicationException">
        <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1. </exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later. </exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)">
      <summary>Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to measure the time interval.</summary>
      <returns>The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="millisecondsTimeout" /> has passed.</returns>
      <param name="waitHandles">A WaitHandle array containing the objects for which the current instance will wait. </param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is null.-or-One or more of the objects in the <paramref name="waitHandles" /> array is null. </exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out. </exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="waitHandles" /> is an array with no elements. </exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
      <summary>Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to measure the time interval, and specifying whether to exit the synchronization domain before the wait.</summary>
      <returns>The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="millisecondsTimeout" /> has passed.</returns>
      <param name="waitHandles">A WaitHandle array containing the objects for which the current instance will wait. </param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely. </param>
      <param name="exitContext">true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, false. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is null.-or-One or more of the objects in the <paramref name="waitHandles" /> array is null. </exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits. </exception>
      <exception cref="T:System.ApplicationException">
        <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out. </exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later. </exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)">
      <summary>Waits for any of the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> to measure the time interval.</summary>
      <returns>The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="timeout" /> has passed.</returns>
      <param name="waitHandles">A WaitHandle array containing the objects for which the current instance will wait. </param>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is null.-or-One or more of the objects in the <paramref name="waitHandles" /> array is null. </exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out. -or-<paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="waitHandles" /> is an array with no elements. </exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
      <summary>Waits for any of the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> to measure the time interval and specifying whether to exit the synchronization domain before the wait.</summary>
      <returns>The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="timeout" /> has passed.</returns>
      <param name="waitHandles">A WaitHandle array containing the objects for which the current instance will wait. </param>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely. </param>
      <param name="exitContext">true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, false. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is null.-or-One or more of the objects in the <paramref name="waitHandles" /> array is null. </exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits. </exception>
      <exception cref="T:System.ApplicationException">
        <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out. -or-<paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later. </exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne">
      <summary>Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal.</summary>
      <returns>true if the current instance receives a signal. If the current instance is never signaled, <see cref="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)" /> never returns.</returns>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed. </exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne(System.Int32)">
      <summary>Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal, using a 32-bit signed integer to measure the time interval.</summary>
      <returns>true if the current instance receives a signal; otherwise, false.</returns>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely. </param>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out. </exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)">
      <summary>Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal, using a 32-bit signed integer to measure the time interval and specifying whether to exit the synchronization domain before the wait.</summary>
      <returns>true if the current instance receives a signal; otherwise, false.</returns>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely. </param>
      <param name="exitContext">true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, false. </param>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out. </exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan)">
      <summary>Blocks the current thread until the current instance receives a signal, using a <see cref="T:System.TimeSpan" /> to measure the time interval.</summary>
      <returns>true if the current instance receives a signal; otherwise, false.</returns>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely. </param>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.-or-<paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />. </exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)">
      <summary>Blocks the current thread until the current instance receives a signal, using a <see cref="T:System.TimeSpan" /> to measure the time interval and specifying whether to exit the synchronization domain before the wait.</summary>
      <returns>true if the current instance receives a signal; otherwise, false.</returns>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely. </param>
      <param name="exitContext">true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, false. </param>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.-or-<paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />. </exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Threading.WaitHandle.WaitTimeout">
      <summary>Indicates that a <see cref="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" /> operation timed out before any of the wait handles were signaled. This field is constant.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Threading.WaitHandleCannotBeOpenedException">
      <summary>The exception that is thrown when an attempt is made to open a system mutex or semaphore that does not exist.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.WaitHandleCannotBeOpenedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.WaitHandleCannotBeOpenedException" /> class with default values.</summary>
    </member>
    <member name="M:System.Threading.WaitHandleCannotBeOpenedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.WaitHandleCannotBeOpenedException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception being thrown. </param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Threading.WaitHandleCannotBeOpenedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.WaitHandleCannotBeOpenedException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.Threading.WaitHandleCannotBeOpenedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.WaitHandleCannotBeOpenedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:System.Threading.WaitOrTimerCallback">
      <summary>Represents a method to be called when a <see cref="T:System.Threading.WaitHandle" /> is signaled or times out.</summary>
      <param name="state">An object containing information to be used by the callback method each time it executes. </param>
      <param name="timedOut">true if the <see cref="T:System.Threading.WaitHandle" /> timed out; false if it was signaled. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.WaitHandle.System#IDisposable#Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Threading.WaitHandle" />.</summary>
    </member>
    <member name="M:System.Threading.EventWaitHandle.Close">
      <summary>Releases all resources held by the current instance.</summary>
    </member>
    <member name="M:System.Threading.EventWaitHandle.Finalize">
      <summary>Releases the resources held by the current instance.</summary>
    </member>
    <member name="M:System.Threading.EventWaitHandle.WaitOne">
      <summary>Blocks the current thread until the current <see cref="T:System.Threading.EventWaitHandle" /> receives a signal. For complete documentation, see the base class topic, <see cref="M:System.Threading.WaitHandle.WaitOne" />.</summary>
      <returns>true if the current instance receives a signal. If the current instance is never signaled, <see cref="M:System.Threading.EventWaitHandle.WaitOne" /> never returns.</returns>
    </member>
    <member name="M:System.Threading.EventWaitHandle.WaitOne(System.Int32,System.Boolean)">
      <summary>Blocks the current thread until the current <see cref="T:System.Threading.EventWaitHandle" /> receives a signal, using a 32-bit signed integer to measure the time interval and specifying whether to exit the synchronization domain before the wait. For complete documentation, see the base class topic, <see cref="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)" />. </summary>
      <returns>true if the current instance receives a signal; otherwise, false.</returns>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely. </param>
      <param name="exitContext">true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, false. </param>
    </member>
    <member name="M:System.Threading.Mutex.Close">
      <summary>Releases all resources held by the current instance.</summary>
    </member>
    <member name="M:System.Threading.Mutex.WaitOne">
      <summary>Blocks the current thread until the current <see cref="T:System.Threading.Mutex" /> receives a signal. For complete documentation, see the base class topic, <see cref="M:System.Threading.WaitHandle.WaitOne" />.</summary>
      <returns>true if the current instance receives a signal. If the current instance is never signaled, <see cref="M:System.Threading.Mutex.WaitOne" /> never returns.</returns>
    </member>
    <member name="M:System.Threading.Mutex.WaitOne(System.Int32,System.Boolean)">
      <summary>Blocks the current thread until the current <see cref="T:System.Threading.Mutex" /> receives a signal, using a 32-bit signed integer to specify the time interval to wait and specifying whether to exit the synchronization domain before the wait. For complete documentation, see the base class topic, <see cref="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)" />.</summary>
      <returns>true if the current instance receives a signal; otherwise, false.</returns>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely. </param>
      <param name="exitContext">true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, false. </param>
    </member>
    <member name="M:System.Threading.Thread.SetProcessorAffinity(System.Int32[])">
      <summary>In the .NET Compact Framework for Xbox 360, sets the processor affinity for a managed thread. Processor affinity determines the processors on which a thread runs.</summary>
      <param name="cpus">An array of identifiers that specify the hardware threads on which the managed thread is permitted to run.For Xbox 360, only a single hardware thread can be specified—the cpus array should contain only one element. The hardware thread number must be in the range 0 through 5.XNA Game Studio Express games should not use hardware threads 0 or 2; see Remarks. </param>
      <exception cref="T:System.InvalidOperationException">An invalid value was passed to the method. </exception>
    </member>
    <member name="T:System.Threading.Tasks.Parallel">
      <summary>Provides support for parallel loops and regions.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})">
      <summary>Executes a for loop in which iterations may run in parallel.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> structure that contains information on what portion of the loop completed.</returns>
      <param name="fromInclusive">The start index, inclusive.</param>
      <param name="toExclusive">The end index, exclusive.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="body" /> argument is null.</exception>
      <exception cref="T:System.AggregateException">The exception that is thrown to contain an exception thrown from one of the specified delegates.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})">
      <summary>Executes a for loop in which iterations may run in parallel.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> structure that contains information on what portion of the loop completed.</returns>
      <param name="fromInclusive">The start index, inclusive.</param>
      <param name="toExclusive">The end index, exclusive.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="body" /> argument is null.</exception>
      <exception cref="T:System.AggregateException">The exception that is thrown to contain an exception thrown from one of the specified delegates.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})">
      <summary>Executes a for loop in which iterations may run in parallel.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> structure that contains information on what portion of the loop completed.</returns>
      <param name="fromInclusive">The start index, inclusive.</param>
      <param name="toExclusive">The end index, exclusive.</param>
      <param name="localInit">The function delegate that returns the initial state of the local data for each thread.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <param name="localFinally">The delegate that performs a final action on the local state of each thread.</param>
      <typeparam name="TLocal">The type of the thread-local data.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="body" /> argument is null.-or-The exception that is thrown when the <paramref name="localInit" /> argument is null.-or-The exception that is thrown when the <paramref name="localFinally" /> argument is null.</exception>
      <exception cref="T:System.AggregateException">The exception that is thrown to contain an exception thrown from one of the specified delegates.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})">
      <summary>Executes a for loop in which iterations may run in parallel.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> structure that contains information on what portion of the loop completed.</returns>
      <param name="fromInclusive">The start index, inclusive.</param>
      <param name="toExclusive">The end index, exclusive.</param>
      <param name="parallelOptions">A <see cref="T:System.Threading.Tasks.ParallelOptions" /> instance that configures the behavior of this operation.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <exception cref="T:System.OperationCanceledException">The exception that is thrown when the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is set.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="body" /> argument is null.-or-The exception that is thrown when the <paramref name="parallelOptions" /> argument is null.</exception>
      <exception cref="T:System.AggregateException">The exception that is thrown to contain an exception thrown from one of the specified delegates.</exception>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when the the <see cref="T:System.Threading.CancellationTokenSource" /> associated with the the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})">
      <summary>Executes a for loop in which iterations may run in parallel.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> structure that contains information on what portion of the loop completed.</returns>
      <param name="fromInclusive">The start index, inclusive.</param>
      <param name="toExclusive">The end index, exclusive.</param>
      <param name="parallelOptions">A <see cref="T:System.Threading.Tasks.ParallelOptions" /> instance that configures the behavior of this operation.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <exception cref="T:System.OperationCanceledException">The exception that is thrown when the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is set.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="body" /> argument is null.-or-The exception that is thrown when the <paramref name="parallelOptions" /> argument is null.</exception>
      <exception cref="T:System.AggregateException">The exception that is thrown to contain an exception thrown from one of the specified delegates.</exception>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when the the <see cref="T:System.Threading.CancellationTokenSource" /> associated with the the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})">
      <summary>Executes a for loop in which iterations may run in parallel.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> structure that contains information on what portion of the loop completed.</returns>
      <param name="fromInclusive">The start index, inclusive.</param>
      <param name="toExclusive">The end index, exclusive.</param>
      <param name="parallelOptions">A <see cref="T:System.Threading.Tasks.ParallelOptions" /> instance that configures the behavior of this operation.</param>
      <param name="localInit">The function delegate that returns the initial state of the local data for each thread.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <param name="localFinally">The delegate that performs a final action on the local state of each thread.</param>
      <typeparam name="TLocal">The type of the thread-local data.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="body" /> argument is null.-or-The exception that is thrown when the <paramref name="localInit" /> argument is null.-or-The exception that is thrown when the <paramref name="localFinally" /> argument is null.-or-The exception that is thrown when the <paramref name="parallelOptions" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64})">
      <summary>Executes a for loop in which iterations may run in parallel.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> structure that contains information on what portion of the loop completed.</returns>
      <param name="fromInclusive">The start index, inclusive.</param>
      <param name="toExclusive">The end index, exclusive.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="body" /> argument is null.</exception>
      <exception cref="T:System.AggregateException">The exception that is thrown to contain an exception thrown from one of the specified delegates.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})">
      <summary>Executes a for loop in which iterations may run in parallel.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> structure that contains information on what portion of the loop completed.</returns>
      <param name="fromInclusive">The start index, inclusive.</param>
      <param name="toExclusive">The end index, exclusive.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="body" /> argument is null.</exception>
      <exception cref="T:System.AggregateException">The exception that is thrown to contain an exception thrown from one of the specified delegates.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})">
      <summary>Executes a for loop in which iterations may run in parallel. Supports 64-bit indices.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> structure that contains information on what portion of the loop completed.</returns>
      <param name="fromInclusive">The start index, inclusive.</param>
      <param name="toExclusive">The end index, exclusive.</param>
      <param name="localInit">The function delegate that returns the initial state of the local data for each thread.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <param name="localFinally">The delegate that performs a final action on the local state of each thread.</param>
      <typeparam name="TLocal">The type of the thread-local data.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="body" /> argument is null.-or-The exception that is thrown when the <paramref name="localInit" /> argument is null.-or-The exception that is thrown when the <paramref name="localFinally" /> argument is null.</exception>
      <exception cref="T:System.AggregateException">The exception that is thrown to contain an exception thrown from one of the specified delegates.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})">
      <summary>Executes a for loop in which iterations may run in parallel.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> structure that contains information on what portion of the loop completed.</returns>
      <param name="fromInclusive">The start index, inclusive.</param>
      <param name="toExclusive">The end index, exclusive.</param>
      <param name="parallelOptions">A <see cref="T:System.Threading.Tasks.ParallelOptions" /> instance that configures the behavior of this operation.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <exception cref="T:System.OperationCanceledException">The exception that is thrown when the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is set.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="body" /> argument is null.-or-The exception that is thrown when the <paramref name="parallelOptions" /> argument is null.</exception>
      <exception cref="T:System.AggregateException">The exception that is thrown to contain an exception thrown from one of the specified delegates.</exception>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when the the <see cref="T:System.Threading.CancellationTokenSource" /> associated with the the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})">
      <summary>Executes a for loop in which iterations may run in parallel.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> structure that contains information on what portion of the loop completed.</returns>
      <param name="fromInclusive">The start index, inclusive.</param>
      <param name="toExclusive">The end index, exclusive.</param>
      <param name="parallelOptions">A <see cref="T:System.Threading.Tasks.ParallelOptions" /> instance that configures the behavior of this operation.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <exception cref="T:System.OperationCanceledException">The exception that is thrown when the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is set.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="body" /> argument is null.-or-The exception that is thrown when the <paramref name="parallelOptions" /> argument is null.</exception>
      <exception cref="T:System.AggregateException">The exception that is thrown to contain an exception thrown from one of the specified delegates.</exception>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when the the <see cref="T:System.Threading.CancellationTokenSource" /> associated with the the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})">
      <summary>Executes a for loop in which iterations may run in parallel.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> structure that contains information on what portion of the loop completed.</returns>
      <param name="fromInclusive">The start index, inclusive.</param>
      <param name="toExclusive">The end index, exclusive.</param>
      <param name="parallelOptions">A <see cref="T:System.Threading.Tasks.ParallelOptions" /> instance that configures the behavior of this operation.</param>
      <param name="localInit">The function delegate that returns the initial state of the local data for each thread.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <param name="localFinally">The delegate that performs a final action on the local state of each thread.</param>
      <typeparam name="TLocal">The type of the thread-local data.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="body" /> argument is null.-or-The exception that is thrown when the <paramref name="localInit" /> argument is null.-or-The exception that is thrown when the <paramref name="localFinally" /> argument is null.-or-The exception that is thrown when the <paramref name="parallelOptions" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})">
      <summary>Executes a for each operation on a <see cref="T:System.Collections.Concurrent.OrderablePartitioner{TSource}" /> in which iterations may run in parallel.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> structure that contains information on what portion of the loop completed.</returns>
      <param name="source">The OrderablePartitioner that contains the original data source.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <typeparam name="TSource">The type of the elements in <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="source" /> argument is null.-or-The exception that is thrown when the <paramref name="body" /> argument is null.</exception>
      <exception cref="T:System.InvalidOperationException">The exception that is thrown when the SupportsDynamicPartitions property in the <paramref name="source" /> OrderablePartitioner returns false.-or-The exception that is thrown when the KeysNormalized property in the <paramref name="source" /> OrderablePartitioner returns false.-or-The exception that is thrown when any methods in the <paramref name="source" /> OrderablePartitioner return null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})">
      <summary>Executes a for each operation on a <see cref="T:System.Collections.Concurrent.OrderablePartitioner{TSource}" /> in which iterations may run in parallel.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> structure that contains information on what portion of the loop completed.</returns>
      <param name="source">The OrderablePartitioner that contains the original data source.</param>
      <param name="localInit">The function delegate that returns the initial state of the local data for each thread.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <param name="localFinally">The delegate that performs a final action on the local state of each thread.</param>
      <typeparam name="TSource">The type of the elements in <paramref name="source" />.</typeparam>
      <typeparam name="TLocal">The type of the thread-local data.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="source" /> argument is null.-or-The exception that is thrown when the <paramref name="body" /> argument is null.-or-The exception that is thrown when the <paramref name="localInit" /> argument is null.-or-The exception that is thrown when the <paramref name="localFinally" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})">
      <summary>Executes a for each operation on a <see cref="T:System.Collections.Concurrent.OrderablePartitioner{TSource}" /> in which iterations may run in parallel.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> structure that contains information on what portion of the loop completed.</returns>
      <param name="source">The OrderablePartitioner that contains the original data source.</param>
      <param name="parallelOptions">A <see cref="T:System.Threading.Tasks.ParallelOptions" /> instance that configures the behavior of this operation.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <typeparam name="TSource">The type of the elements in <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The exception that is thrown when the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is set</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="source" /> argument is null.-or-The exception that is thrown when the <paramref name="parallelOptions" /> argument is null.-or-The exception that is thrown when the <paramref name="body" /> argument is null.</exception>
      <exception cref="T:System.InvalidOperationException">The exception that is thrown when the SupportsDynamicPartitions property in the <paramref name="source" /> OrderablePartitioner returns false.-or-The exception that is thrown when the KeysNormalized property in the <paramref name="source" /> OrderablePartitioner returns false.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})">
      <summary>Executes a for each operation on a <see cref="T:System.Collections.Concurrent.OrderablePartitioner{TSource}" /> in which iterations may run in parallel.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> structure that contains information on what portion of the loop completed.</returns>
      <param name="source">The OrderablePartitioner that contains the original data source.</param>
      <param name="parallelOptions">A <see cref="T:System.Threading.Tasks.ParallelOptions" /> instance that configures the behavior of this operation.</param>
      <param name="localInit">The function delegate that returns the initial state of the local data for each thread.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <param name="localFinally">The delegate that performs a final action on the local state of each thread.</param>
      <typeparam name="TSource">The type of the elements in <paramref name="source" />.</typeparam>
      <typeparam name="TLocal">The type of the thread-local data.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="source" /> argument is null.-or-The exception that is thrown when the <paramref name="parallelOptions" /> argument is null.-or-The exception that is thrown when the <paramref name="body" /> argument is null.-or-The exception that is thrown when the <paramref name="localInit" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})">
      <summary>Executes a for each operation on a <see cref="T:System.Collections.Concurrent.Partitioner{TSource}" /> in which iterations may run in parallel.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> structure that contains information on what portion of the loop completed.</returns>
      <param name="source">The Partitioner that contains the original data source.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <typeparam name="TSource">The type of the elements in <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="source" /> argument is null.-or-The exception that is thrown when the <paramref name="body" /> argument is null.</exception>
      <exception cref="T:System.InvalidOperationException">The exception that is thrown when the SupportsDynamicPartitions property in the <paramref name="source" /> Partitioner returns false.-or-The exception that is thrown when any methods in the <paramref name="source" /> Partitioner return null.-or-The exception that is thrown when the GetPartitions() method in the <paramref name="source" /> Partitioner does not return the correct number of partitions.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})">
      <summary>Executes a for each operation on a <see cref="T:System.Collections.Concurrent.Partitioner{TSource}" /> in which iterations may run in parallel.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> structure that contains information on what portion of the loop completed.</returns>
      <param name="source">The Partitioner that contains the original data source.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <typeparam name="TSource">The type of the elements in <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="source" /> argument is null.-or-The exception that is thrown when the <paramref name="body" /> argument is null.</exception>
      <exception cref="T:System.InvalidOperationException">The exception that is thrown when the SupportsDynamicPartitions property in the <paramref name="source" /> Partitioner returns false.-or-The exception that is thrown when any methods in the <paramref name="source" /> Partitioner return null.-or-The exception that is thrown when the GetPartitions() method in the <paramref name="source" /> Partitioner does not return the correct number of partitions.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})">
      <summary>Executes a for each operation on a <see cref="T:System.Collections.Concurrent.Partitioner{TSource}" /> in which iterations may run in parallel.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> structure that contains information on what portion of the loop completed.</returns>
      <param name="source">The Partitioner that contains the original data source.</param>
      <param name="localInit">The function delegate that returns the initial state of the local data for each thread.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <param name="localFinally">The delegate that performs a final action on the local state of each thread.</param>
      <typeparam name="TSource">The type of the elements in <paramref name="source" />.</typeparam>
      <typeparam name="TLocal">The type of the thread-local data.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="source" /> argument is null.-or-The exception that is thrown when the <paramref name="body" /> argument is null.-or-The exception that is thrown when the <paramref name="localInit" /> argument is null.-or-The exception that is thrown when the <paramref name="localFinally" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})">
      <summary>Executes a for each operation on a <see cref="T:System.Collections.Concurrent.Partitioner{TSource}" /> in which iterations may run in parallel.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> structure that contains information on what portion of the loop completed.</returns>
      <param name="source">The Partitioner that contains the original data source.</param>
      <param name="parallelOptions">A <see cref="T:System.Threading.Tasks.ParallelOptions" /> instance that configures the behavior of this operation.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <typeparam name="TSource">The type of the elements in <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The exception that is thrown when the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is set</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="source" /> argument is null.-or-The exception that is thrown when the <paramref name="parallelOptions" /> argument is null.-or-The exception that is thrown when the <paramref name="body" /> argument is null.</exception>
      <exception cref="T:System.InvalidOperationException">The exception that is thrown when the SupportsDynamicPartitions property in the <paramref name="source" /> Partitioner returns false.-or-The exception that is thrown when any methods in the <paramref name="source" /> Partitioner return null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})">
      <summary>Executes a for each operation on a <see cref="T:System.Collections.Concurrent.Partitioner{TSource}" /> in which iterations may run in parallel.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> structure that contains information on what portion of the loop completed.</returns>
      <param name="source">The Partitioner that contains the original data source.</param>
      <param name="parallelOptions">A <see cref="T:System.Threading.Tasks.ParallelOptions" /> instance that configures the behavior of this operation.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <typeparam name="TSource">The type of the elements in <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The exception that is thrown when the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is set</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="source" /> argument is null.-or-The exception that is thrown when the <paramref name="parallelOptions" /> argument is null.-or-The exception that is thrown when the <paramref name="body" /> argument is null.</exception>
      <exception cref="T:System.InvalidOperationException">The exception that is thrown when the SupportsDynamicPartitions property in the <paramref name="source" /> Partitioner returns false.-or-The exception that is thrown when any methods in the <paramref name="source" /> Partitioner return null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})">
      <summary>Executes a for each operation on a <see cref="T:System.Collections.Concurrent.Partitioner{TSource}" /> in which iterations may run in parallel.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> structure that contains information on what portion of the loop completed.</returns>
      <param name="source">The Partitioner that contains the original data source.</param>
      <param name="parallelOptions">A <see cref="T:System.Threading.Tasks.ParallelOptions" /> instance that configures the behavior of this operation.</param>
      <param name="localInit">The function delegate that returns the initial state of the local data for each thread.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <param name="localFinally">The delegate that performs a final action on the local state of each thread.</param>
      <typeparam name="TSource">The type of the elements in <paramref name="source" />.</typeparam>
      <typeparam name="TLocal">The type of the thread-local data.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="source" /> argument is null.-or-The exception that is thrown when the <paramref name="parallelOptions" /> argument is null.-or-The exception that is thrown when the <paramref name="body" /> argument is null.-or-The exception that is thrown when the <paramref name="localInit" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
      <summary>Executes a for each operation on an <see cref="T:System.Collections.IEnumerable{TSource}" /> in which iterations may run in parallel.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> structure that contains information on what portion of the loop completed.</returns>
      <param name="source">An enumerable data source.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <typeparam name="TSource">The type of the data in the source.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="source" /> argument is null.-or-The exception that is thrown when the <paramref name="body" /> argument is null.</exception>
      <exception cref="T:System.AggregateException">The exception that is thrown to contain an exception thrown from one of the specified delegates.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})">
      <summary>Executes a for each operation on an <see cref="T:System.Collections.IEnumerable{TSource}" /> in which iterations may run in parallel.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> structure that contains information on what portion of the loop completed.</returns>
      <param name="source">An enumerable data source.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <typeparam name="TSource">The type of the data in the source.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="source" /> argument is null.-or-The exception that is thrown when the <paramref name="body" /> argument is null.</exception>
      <exception cref="T:System.AggregateException">The exception that is thrown to contain an exception thrown from one of the specified delegates.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})">
      <summary>Executes a for each operation on an <see cref="T:System.Collections.IEnumerable{TSource}" /> in which iterations may run in parallel.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> structure that contains information on what portion of the loop completed.</returns>
      <param name="source">An enumerable data source.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <typeparam name="TSource">The type of the data in the source.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="source" /> argument is null.-or-The exception that is thrown when the <paramref name="body" /> argument is null.</exception>
      <exception cref="T:System.AggregateException">The exception that is thrown to contain an exception thrown from one of the specified delegates.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})">
      <summary>Executes a for each operation on an <see cref="T:System.Collections.IEnumerable{TSource}" /> in which iterations may run in parallel.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> structure that contains information on what portion of the loop completed.</returns>
      <param name="source">An enumerable data source.</param>
      <param name="localInit">The function delegate that returns the initial state of the local data for each thread.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <param name="localFinally">The delegate that performs a final action on the local state of each thread.</param>
      <typeparam name="TSource">The type of the data in the source.</typeparam>
      <typeparam name="TLocal">The type of the thread-local data.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="source" /> argument is null.-or-The exception that is thrown when the <paramref name="body" /> argument is null.-or-The exception that is thrown when the <paramref name="localInit" /> argument is null.-or-The exception that is thrown when the <paramref name="localFinally" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})">
      <summary>Executes a for each operation on an <see cref="T:System.Collections.IEnumerable{TSource}" /> in which iterations may run in parallel.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> structure that contains information on what portion of the loop completed.</returns>
      <param name="source">An enumerable data source.</param>
      <param name="localInit">The function delegate that returns the initial state of the local data for each thread.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <param name="localFinally">The delegate that performs a final action on the local state of each thread.</param>
      <typeparam name="TSource">The type of the data in the source.</typeparam>
      <typeparam name="TLocal">The type of the thread-local data.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="source" /> argument is null.-or-The exception that is thrown when the <paramref name="body" /> argument is null.-or-The exception that is thrown when the <paramref name="localInit" /> argument is null.-or-The exception that is thrown when the <paramref name="localFinally" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})">
      <summary>Executes a for each operation on an <see cref="T:System.Collections.IEnumerable{TSource}" /> in which iterations may run in parallel.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> structure that contains information on what portion of the loop completed.</returns>
      <param name="source">An enumerable data source.</param>
      <param name="parallelOptions">A <see cref="T:System.Threading.Tasks.ParallelOptions" /> instance that configures the behavior of this operation.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <typeparam name="TSource">The type of the data in the source.</typeparam>
      <exception cref="T:System.OperationCanceledException">The exception that is thrown when the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is set</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="source" /> argument is null.-or-The exception that is thrown when the <paramref name="parallelOptions" /> argument is null.-or-The exception that is thrown when the <paramref name="body" /> argument is null.</exception>
      <exception cref="T:System.AggregateException">The exception that is thrown to contain an exception thrown from one of the specified delegates.</exception>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when the the <see cref="T:System.Threading.CancellationTokenSource" /> associated with the the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})">
      <summary>Executes a for each operation on an <see cref="T:System.Collections.IEnumerable{TSource}" /> in which iterations may run in parallel.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> structure that contains information on what portion of the loop completed.</returns>
      <param name="source">An enumerable data source.</param>
      <param name="parallelOptions">A <see cref="T:System.Threading.Tasks.ParallelOptions" /> instance that configures the behavior of this operation.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <typeparam name="TSource">The type of the data in the source.</typeparam>
      <exception cref="T:System.OperationCanceledException">The exception that is thrown when the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is set</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="source" /> argument is null.-or-The exception that is thrown when the <paramref name="parallelOptions" /> argument is null.-or-The exception that is thrown when the <paramref name="body" /> argument is null.</exception>
      <exception cref="T:System.AggregateException">The exception that is thrown to contain an exception thrown from one of the specified delegates.</exception>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when the the <see cref="T:System.Threading.CancellationTokenSource" /> associated with the the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})">
      <summary>Executes a for each operation on an <see cref="T:System.Collections.IEnumerable{TSource}" /> in which iterations may run in parallel.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> structure that contains information on what portion of the loop completed.</returns>
      <param name="source">An enumerable data source.</param>
      <param name="parallelOptions">A <see cref="T:System.Threading.Tasks.ParallelOptions" /> instance that configures the behavior of this operation.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <typeparam name="TSource">The type of the data in the source.</typeparam>
      <exception cref="T:System.OperationCanceledException">The exception that is thrown when the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is set</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="source" /> argument is null.-or-The exception that is thrown when the <paramref name="parallelOptions" /> argument is null.-or-The exception that is thrown when the <paramref name="body" /> argument is null.</exception>
      <exception cref="T:System.AggregateException">The exception that is thrown to contain an exception thrown from one of the specified delegates.</exception>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when the the <see cref="T:System.Threading.CancellationTokenSource" /> associated with the the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})">
      <summary>Executes a for each operation on an <see cref="T:System.Collections.IEnumerable{TSource}" /> in which iterations may run in parallel.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> structure that contains information on what portion of the loop completed.</returns>
      <param name="source">An enumerable data source.</param>
      <param name="parallelOptions">A <see cref="T:System.Threading.Tasks.ParallelOptions" /> instance that configures the behavior of this operation.</param>
      <param name="localInit">The function delegate that returns the initial state of the local data for each thread.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <param name="localFinally">The delegate that performs a final action on the local state of each thread.</param>
      <typeparam name="TSource">The type of the data in the source.</typeparam>
      <typeparam name="TLocal">The type of the thread-local data.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="source" /> argument is null.-or-The exception that is thrown when the <paramref name="parallelOptions" /> argument is null.-or-The exception that is thrown when the <paramref name="body" /> argument is null.-or-The exception that is thrown when the <paramref name="localInit" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})">
      <summary>Executes a for each operation on an <see cref="T:System.Collections.IEnumerable{TSource}" /> in which iterations may run in parallel.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> structure that contains information on what portion of the loop completed.</returns>
      <param name="source">An enumerable data source.</param>
      <param name="parallelOptions">A <see cref="T:System.Threading.Tasks.ParallelOptions" /> instance that configures the behavior of this operation.</param>
      <param name="localInit">The function delegate that returns the initial state of the local data for each thread.</param>
      <param name="body">The delegate that is invoked once per iteration.</param>
      <param name="localFinally">The delegate that performs a final action on the local state of each thread.</param>
      <typeparam name="TSource">The type of the data in the source.</typeparam>
      <typeparam name="TLocal">The type of the thread-local data.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="source" /> argument is null.-or-The exception that is thrown when the <paramref name="parallelOptions" /> argument is null.-or-The exception that is thrown when the <paramref name="body" /> argument is null.-or-The exception that is thrown when the <paramref name="localInit" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.Invoke(System.Action[])">
      <summary>Executes each of the provided actions, possibly in parallel.</summary>
      <param name="actions">An array of <see cref="T:System.Action" /> to execute.</param>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="actions" /> argument is null.</exception>
      <exception cref="T:System.AggregateException">The exception that is thrown when any action in the <paramref name="actions" /> array throws an exception.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="actions" /> array contains a null element.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])">
      <summary>Executes each of the provided actions, possibly in parallel.</summary>
      <param name="parallelOptions">A <see cref="T:System.Threading.Tasks.ParallelOptions" /> instance that configures the behavior of this operation.</param>
      <param name="actions">An array of <see cref="T:System.Action" /> to execute.</param>
      <exception cref="T:System.OperationCanceledException">The exception that is thrown when the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> is set.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="actions" /> argument is null.-or-The exception that is thrown when the <paramref name="parallelOptions" /> argument is null.</exception>
      <exception cref="T:System.AggregateException">The exception that is thrown when any action in the <paramref name="actions" /> array throws an exception.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="actions" /> array contains a null element.</exception>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when the the <see cref="T:System.Threading.CancellationTokenSource" /> associated with the the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</exception>
    </member>
    <member name="T:System.Threading.Tasks.ParallelLoopResult">
      <summary>Provides completion status on the execution of a <see cref="T:System.Threading.Tasks.Parallel" /> loop.</summary>
    </member>
    <member name="P:System.Threading.Tasks.ParallelLoopResult.IsCompleted">
      <summary>Gets whether the loop ran to completion, such that all iterations of the loop were executed and the loop didn't receive a request to end prematurely.</summary>
      <returns>true if the loop ran to completion; otherwise false;</returns>
    </member>
    <member name="P:System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration">
      <summary>Gets the index of the lowest iteration from which <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> was called.</summary>
      <returns>Returns an integer that represents the lowest iteration from which the Break statement was called.</returns>
    </member>
    <member name="T:System.Threading.Tasks.ParallelLoopState">
      <summary>Enables iterations of <see cref="T:System.Threading.Tasks.Parallel" /> loops to interact with other iterations. An instance of this class is provided by the Parallel class to each loop; you can not create instances in your user code.</summary>
    </member>
    <member name="M:System.Threading.Tasks.ParallelLoopState.Break">
      <summary>Communicates that the <see cref="T:System.Threading.Tasks.Parallel" /> loop should cease execution at the system's earliest convenience of iterations beyond the current iteration.</summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method was previously called. <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> and <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> may not be used in combination by iterations of the same loop.</exception>
    </member>
    <member name="P:System.Threading.Tasks.ParallelLoopState.IsExceptional">
      <summary>Gets whether any iteration of the loop has thrown an exception that went unhandled by that iteration.</summary>
      <returns>True if an unhandled exception was thrown; otherwise false.</returns>
    </member>
    <member name="P:System.Threading.Tasks.ParallelLoopState.IsStopped">
      <summary>Gets whether any iteration of the loop has called <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />.</summary>
      <returns>true if any iteration has stopped the loop; otherwise false.</returns>
    </member>
    <member name="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
      <summary>Gets the lowest iteration of the loop from which <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> was called.</summary>
      <returns>An integer that represents the lowest iteration from which Break was called.</returns>
    </member>
    <member name="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
      <summary>Gets whether the current iteration of the loop should exit based on requests made by this or other iterations.</summary>
      <returns>true if the current iteration should exit; otherwise false.</returns>
    </member>
    <member name="M:System.Threading.Tasks.ParallelLoopState.Stop">
      <summary>Communicates that the <see cref="T:System.Threading.Tasks.Parallel" /> loop should cease execution at the system's earliest convenience.</summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> method was previously called. <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> and <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> may not be used in combination by iterations of the same loop.</exception>
    </member>
    <member name="T:System.Threading.Tasks.ParallelOptions">
      <summary>Stores options that configure the operation of methods on the <see cref="T:System.Threading.Tasks.Parallel" /> class.</summary>
    </member>
    <member name="M:System.Threading.Tasks.ParallelOptions.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Tasks.ParallelOptions" /> class.</summary>
    </member>
    <member name="P:System.Threading.Tasks.ParallelOptions.CancellationToken">
      <summary>Gets or sets the <see cref="T:System.Threading.CancellationToken" /> associated with this <see cref="T:System.Threading.Tasks.ParallelOptions" /> instance.</summary>
      <returns>The token that is associated with this instance.</returns>
    </member>
    <member name="P:System.Threading.Tasks.ParallelOptions.MaxDegreeOfParallelism">
      <summary>Gets or sets the maximum degree of parallelism enabled by this ParallelOptions instance.</summary>
      <returns>An integer that represents the maximum degree of parallelism.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when this <see cref="P:System.Threading.Tasks.ParallelOptions.MaxDegreeOfParallelism" /> is set to 0 or some value less than -1.</exception>
    </member>
    <member name="P:System.Threading.Tasks.ParallelOptions.TaskScheduler">
      <summary>Gets or sets the <see cref="T:System.Threading.Tasks.TaskScheduler" /> associated with this <see cref="T:System.Threading.Tasks.ParallelOptions" /> instance. Setting this property to null indicates that the current scheduler should be used.</summary>
      <returns>The task scheduler that is associated with this instance.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Task">
      <summary>Represents an asynchronous operation.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action.</summary>
      <param name="action">The delegate that represents the code to execute in the Task.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action and <see cref="T:System.Threading.CancellationToken" /> while observing a cancellation token.</summary>
      <param name="action">The delegate that represents the code to execute in the Task.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that the new Task will observe.</param>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action and creation options.</summary>
      <param name="action">The delegate that represents the code to execute in the task.</param>
      <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.Task.CancellationToken" /> that the new task will observe.</param>
      <param name="creationOptions">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the Task's behavior.</param>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action and creation options.</summary>
      <param name="action">The delegate that represents the code to execute in the task.</param>
      <param name="creationOptions">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the Task's behavior. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action and state.</summary>
      <param name="action">The delegate that represents the code to execute in the task.</param>
      <param name="state">An object representing data to be used by the action.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action, state, and options.</summary>
      <param name="action">The delegate that represents the code to execute in the task.</param>
      <param name="state">An object representing data to be used by the action.</param>
      <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.Task.CancellationToken" /> that that the new task will observe..</param>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action, state, and options.</summary>
      <param name="action">The delegate that represents the code to execute in the task.</param>
      <param name="state">An object representing data to be used by the action.</param>
      <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.Task.CancellationToken" /> that that the new task will observe..</param>
      <param name="creationOptions">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the Task's behavior.</param>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action, state, and options.</summary>
      <param name="action">The delegate that represents the code to execute in the task.</param>
      <param name="state">An object representing data to be used by the action.</param>
      <param name="creationOptions">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the Task's behavior.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</exception>
    </member>
    <member name="P:System.Threading.Tasks.Task.AsyncState">
      <summary>Gets the state object supplied when the <see cref="T:System.Threading.Tasks.Task" /> was created, or null if none was supplied.</summary>
      <returns>An <see cref="T:System.Object" /> that represents the state data that was passed in to the task when it was created.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})">
      <summary>Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</summary>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="continuationAction">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes. When run, the delegate will be passed the completed task as an argument.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
      <summary>Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</summary>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="continuationAction">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes. When run, the delegate will be passed the completed task as an argument.</param>
      <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.Task.CancellationToken" /> that will be assigned to the new continuation task.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.-or-The <see cref="T:System.Threading.CancellationTokenSource" /> that created the token has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation that executes according to the specified <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</summary>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="continuationAction">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes. When run, the delegate will be passed the completed task as an argument.</param>
      <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.Task.CancellationToken" /> that will be assigned to the new continuation task.</param>
      <param name="continuationOptions">Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.-or-The <see cref="T:System.Threading.CancellationTokenSource" /> that created the token has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction" /> argument is null.-or-The <paramref name="scheduler" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation that executes according to the specified <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</summary>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="continuationAction">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes. When run, the delegate will be passed the completed task as an argument.</param>
      <param name="continuationOptions">Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</summary>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="continuationAction">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes. When run, the delegate will be passed the completed task as an argument.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction" /> argument is null.-or-The <paramref name="scheduler" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})">
      <summary>Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</summary>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="continuationFunction">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes. When run, the delegate will be passed the completed task as an argument.</param>
      <typeparam name="TResult"> The type of the result produced by the continuation.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)">
      <summary>Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</summary>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="continuationFunction">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes. When run, the delegate will be passed the completed task as an argument.</param>
      <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.Task.CancellationToken" /> that will be assigned to the new continuation task.</param>
      <typeparam name="TResult"> The type of the result produced by the continuation.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.-or-The <see cref="T:System.Threading.CancellationTokenSource" /> that created the token has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</summary>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="continuationFunction">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes. When run, the delegate will be passed the completed task as an argument.</param>
      <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.Task.CancellationToken" /> that will be assigned to the new continuation task.</param>
      <param name="continuationOptions">Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</param>
      <typeparam name="TResult"> The type of the result produced by the continuation.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.-or-The <see cref="T:System.Threading.CancellationTokenSource" /> that created the token has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction" /> argument is null.-or-The <paramref name="scheduler" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</summary>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="continuationFunction">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes. When run, the delegate will be passed the completed task as an argument.</param>
      <param name="continuationOptions">Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</param>
      <typeparam name="TResult"> The type of the result produced by the continuation.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</summary>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="continuationFunction">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes. When run, the delegate will be passed the completed task as an argument.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</param>
      <typeparam name="TResult"> The type of the result produced by the continuation.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction" /> argument is null.-or-The <paramref name="scheduler" /> argument is null.</exception>
    </member>
    <member name="P:System.Threading.Tasks.Task.CreationOptions">
      <summary>Gets the <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to create this task.</summary>
      <returns>The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to create this task.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.CurrentId">
      <summary>Returns the unique ID of the currently executing <see cref="T:System.Threading.Tasks.Task" />.</summary>
      <returns>An integer that was assigned by the system to the currently-executing task.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.Threading.Tasks.Task" /> class.</summary>
      <exception cref="T:System.InvalidOperationException">The exception that is thrown if the <see cref="T:System.Threading.Tasks.Task" /> is not in one of the final states: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />, or <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Dispose(System.Boolean)">
      <summary>Disposes the <see cref="T:System.Threading.Tasks.Task" />, releasing all of its unmanaged resources.</summary>
      <param name="disposing">A Boolean value that indicates whether this method is being called due to a call to <see cref="M:System.Threading.Tasks.Task.Dispose" />.</param>
    </member>
    <member name="P:System.Threading.Tasks.Task.Exception">
      <summary>Gets the <see cref="T:System.AggregateException" /> that caused the <see cref="T:System.Threading.Tasks.Task" /> to end prematurely. If the <see cref="T:System.Threading.Tasks.Task" /> completed successfully or has not yet thrown any exceptions, this will return null.</summary>
      <returns>The <see cref="T:System.AggregateException" /> that caused the <see cref="T:System.Threading.Tasks.Task" /> to end prematurely.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.Factory">
      <summary>Provides access to factory methods for creating <see cref="T:System.Threading.Tasks.Task" /> and <see cref="T:System.Threading.Tasks.Task`1" /> instances.</summary>
      <returns>The default <see cref="T:System.Threading.Tasks.TaskFactory" /> for the current task.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.Id">
      <summary>Gets a unique ID for this <see cref="T:System.Threading.Tasks.Task" /> instance.</summary>
      <returns>An integer that was assigned by the system to this task instance.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.IsCanceled">
      <summary>Gets whether this <see cref="T:System.Threading.Tasks.Task" /> instance has completed execution due to being canceled.</summary>
      <returns>true if the task has completed due to being canceled; otherwise false.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.IsCompleted">
      <summary>Gets whether this <see cref="T:System.Threading.Tasks.Task" /> has completed.</summary>
      <returns>true if the task has completed; otherwise false.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.IsFaulted">
      <summary>Gets whether the <see cref="T:System.Threading.Tasks.Task" /> completed due to an unhandled exception.</summary>
      <returns>true if the task has thrown an unhandled exception; otherwise false.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.RunSynchronously">
      <summary>Runs the <see cref="T:System.Threading.Tasks.Task" /> synchronously on the current <see cref="T:System.Threading.Tasks.TaskScheduler" />.</summary>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> instance has been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Threading.Tasks.Task" /> is not in a valid state to be started. It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)">
      <summary>Runs the <see cref="T:System.Threading.Tasks.Task" /> synchronously on the <see cref="T:System.Threading.Tasks.TaskScheduler" /> provided.</summary>
      <param name="scheduler">The scheduler on which to attempt to run this task inline.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> instance has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="scheduler" /> parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Threading.Tasks.Task" /> is not in a valid state to be started. It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Start">
      <summary>Starts the <see cref="T:System.Threading.Tasks.Task" />, scheduling it for execution to the current <see cref="T:System.Threading.Tasks.TaskScheduler" />.</summary>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> instance has been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Threading.Tasks.Task" /> is not in a valid state to be started. It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)">
      <summary>Starts the <see cref="T:System.Threading.Tasks.Task" />, scheduling it for execution to the specified <see cref="T:System.Threading.Tasks.TaskScheduler" />.</summary>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> with which to associate and execute this task.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> instance has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="scheduler" /> argument is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Threading.Tasks.Task" /> is not in a valid state to be started. It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</exception>
    </member>
    <member name="P:System.Threading.Tasks.Task.Status">
      <summary>Gets the <see cref="T:System.Threading.Tasks.TaskStatus" /> of this Task.</summary>
      <returns>The current <see cref="T:System.Threading.Tasks.TaskStatus" /> of this task instance.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.System#IAsyncResult#AsyncWaitHandle">
      <summary>Gets a <see cref="T:System.Threading.WaitHandle" /> that can be used to wait for the task to complete.</summary>
      <returns>A <see cref="T:System.Threading.WaitHandle" /> that can be used to wait for the task to complete.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</exception>
    </member>
    <member name="P:System.Threading.Tasks.Task.System#IAsyncResult#CompletedSynchronously">
      <summary>Gets an indication of whether the asynchronous operation completed synchronously.</summary>
      <returns>true if the asynchronous operation completed synchronously; otherwise, false.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.Wait">
      <summary>Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution.</summary>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</exception>
      <exception cref="T:System.AggregateException">The <see cref="T:System.Threading.Tasks.Task" /> was canceled -or- an exception was thrown during the execution of the <see cref="T:System.Threading.Tasks.Task" />. If the task was canceled, the <see cref="T:System.AggregateException" /> contains an <see cref="T:System.Threading.OperationCanceledException" /> in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Wait(System.Int32)">
      <summary>Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution.</summary>
      <returns>true if the <see cref="T:System.Threading.Tasks.Task" /> completed execution within the allotted time; otherwise, false.</returns>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</exception>
      <exception cref="T:System.AggregateException">The <see cref="T:System.Threading.Tasks.Task" /> was canceled -or- an exception was thrown during the execution of the <see cref="T:System.Threading.Tasks.Task" />. If the task was canceled, the <see cref="T:System.AggregateException" /> contains an <see cref="T:System.Threading.OperationCanceledException" /> in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)">
      <summary>Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution.</summary>
      <returns>true if the <see cref="T:System.Threading.Tasks.Task" /> completed execution within the allotted time; otherwise, false.</returns>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</param>
      <param name="cancellationToken">A <see cref="P:System.Threading.Tasks.Task.CancellationToken" /> to observe while waiting for the task to complete.</param>
      <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken" /> was canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</exception>
      <exception cref="T:System.AggregateException">The <see cref="T:System.Threading.Tasks.Task" /> was canceled -or- an exception was thrown during the execution of the <see cref="T:System.Threading.Tasks.Task" />. If the task was canceled, the <see cref="T:System.AggregateException" /> contains an <see cref="T:System.Threading.OperationCanceledException" /> in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)">
      <summary>Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution.</summary>
      <param name="cancellationToken">A <see cref="P:System.Threading.Tasks.Task.CancellationToken" /> to observe while waiting for the task to complete.</param>
      <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken" /> was canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</exception>
      <exception cref="T:System.AggregateException">The <see cref="T:System.Threading.Tasks.Task" /> was canceled -or- an exception was thrown during the execution of the <see cref="T:System.Threading.Tasks.Task" />. If the task was canceled, the <see cref="T:System.AggregateException" /> contains an <see cref="T:System.Threading.OperationCanceledException" /> in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Wait(System.TimeSpan)">
      <summary>Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution.</summary>
      <returns>true if the <see cref="T:System.Threading.Tasks.Task" /> completed execution within the allotted time; otherwise, false.</returns>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.AggregateException">The <see cref="T:System.Threading.Tasks.Task" /> was canceled -or- an exception was thrown during the execution of the <see cref="T:System.Threading.Tasks.Task" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])">
      <summary>Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution.</summary>
      <param name="tasks">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</param>
      <exception cref="T:System.ObjectDisposedException">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument is null.-or-The <paramref name="tasks" /> argument contains a null element.</exception>
      <exception cref="T:System.AggregateException">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled -or- an exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances. If a task was canceled, the <see cref="T:System.AggregateException" /> contains an <see cref="T:System.Threading.OperationCanceledException" /> in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)">
      <summary>Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution.</summary>
      <returns>true if all of the <see cref="T:System.Threading.Tasks.Task" /> instances completed execution within the allotted time; otherwise, false.</returns>
      <param name="tasks">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</param>
      <exception cref="T:System.ObjectDisposedException">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument is null.</exception>
      <exception cref="T:System.AggregateException">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled -or- an exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances. If a task was canceled, the <see cref="T:System.AggregateException" /> contains an <see cref="T:System.Threading.OperationCanceledException" /> in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> argument contains a null element.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
      <summary>Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution.</summary>
      <returns>true if all of the <see cref="T:System.Threading.Tasks.Task" /> instances completed execution within the allotted time; otherwise, false.</returns>
      <param name="tasks">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</param>
      <param name="cancellationToken">A <see cref="P:System.Threading.Tasks.Task.CancellationToken" /> to observe while waiting for the tasks to complete.</param>
      <exception cref="T:System.ObjectDisposedException">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument is null.</exception>
      <exception cref="T:System.AggregateException">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled -or- an exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances. If a task was canceled, the <see cref="T:System.AggregateException" /> contains an <see cref="T:System.Threading.OperationCanceledException" /> in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> argument contains a null element.</exception>
      <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken" /> was canceled.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)">
      <summary>Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution.</summary>
      <param name="tasks">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</param>
      <param name="cancellationToken">A <see cref="P:System.Threading.Tasks.Task.CancellationToken" /> to observe while waiting for the tasks to complete.</param>
      <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken" /> was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument is null.</exception>
      <exception cref="T:System.AggregateException">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled -or- an exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances. If a task was canceled, the <see cref="T:System.AggregateException" /> contains an <see cref="T:System.Threading.OperationCanceledException" /> in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> argument contains a null element.</exception>
      <exception cref="T:System.ObjectDisposedException">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)">
      <summary>Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution.</summary>
      <returns>true if all of the <see cref="T:System.Threading.Tasks.Task" /> instances completed execution within the allotted time; otherwise, false.</returns>
      <param name="tasks">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</param>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</param>
      <exception cref="T:System.ObjectDisposedException">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument is null.</exception>
      <exception cref="T:System.AggregateException">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled -or- an exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances. If a task was canceled, the <see cref="T:System.AggregateException" /> contains an <see cref="T:System.Threading.OperationCanceledException" /> in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> argument contains a null element.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])">
      <summary>Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution.</summary>
      <returns>The index of the completed task in the <paramref name="tasks" /> array argument.</returns>
      <param name="tasks">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> argument contains a null element.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)">
      <summary>Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution.</summary>
      <returns>The index of the completed task in the <paramref name="tasks" /> array argument, or -1 if the timeout occurred.</returns>
      <param name="tasks">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> argument contains a null element.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
      <summary>Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution.</summary>
      <returns>The index of the completed task in the <paramref name="tasks" /> array argument, or -1 if the timeout occurred.</returns>
      <param name="tasks">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</param>
      <param name="cancellationToken">A <see cref="P:System.Threading.Tasks.Task.CancellationToken" /> to observe while waiting for a task to complete.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> argument contains a null element.</exception>
      <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken" /> was canceled.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)">
      <summary>Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution.</summary>
      <returns>The index of the completed task in the <paramref name="tasks" /> array argument.</returns>
      <param name="tasks">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</param>
      <param name="cancellationToken">A <see cref="P:System.Threading.Tasks.Task.CancellationToken" /> to observe while waiting for a task to complete.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> argument contains a null element.</exception>
      <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken" /> was canceled.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)">
      <summary>Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution.</summary>
      <returns>The index of the completed task in the <paramref name="tasks" /> array argument, or -1 if the timeout occurred.</returns>
      <param name="tasks">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</param>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> argument contains a null element.</exception>
    </member>
    <member name="T:System.Threading.Tasks.Task`1">
      <summary>Represents an asynchronous operation that can return a value.</summary>
      <typeparam name="TResult">The type of the result produced by this <see cref="T:System.Threading.Tasks.Task`1" />. </typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0})">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Task`1" /> with the specified function.</summary>
      <param name="function">The delegate that represents the code to execute in the task. When the function has completed, the task's <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will be set to return the result value of the function.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Task`1" /> with the specified function.</summary>
      <param name="function">The delegate that represents the code to execute in the task. When the function has completed, the task's <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will be set to return the result value of the function.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to be assigned to this task.</param>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Task`1" /> with the specified function and creation options.</summary>
      <param name="function">The delegate that represents the code to execute in the task. When the function has completed, the task's <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will be set to return the result value of the function.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new task.</param>
      <param name="creationOptions">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</param>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Task`1" /> with the specified function and creation options.</summary>
      <param name="function">The delegate that represents the code to execute in the task. When the function has completed, the task's <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will be set to return the result value of the function.</param>
      <param name="creationOptions">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Task`1" /> with the specified function and state.</summary>
      <param name="function">The delegate that represents the code to execute in the task. When the function has completed, the task's <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will be set to return the result value of the function.</param>
      <param name="state">An object representing data to be used by the action.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Task`1" /> with the specified action, state, and options.</summary>
      <param name="function">The delegate that represents the code to execute in the task. When the function has completed, the task's <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will be set to return the result value of the function.</param>
      <param name="state">An object representing data to be used by the function.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to be assigned to the new task.</param>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Task`1" /> with the specified action, state, and options.</summary>
      <param name="function">The delegate that represents the code to execute in the task. When the function has completed, the task's <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will be set to return the result value of the function.</param>
      <param name="state">An object representing data to be used by the function.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to be assigned to the new task.</param>
      <param name="creationOptions">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</param>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Task`1" /> with the specified action, state, and options.</summary>
      <param name="function">The delegate that represents the code to execute in the task. When the function has completed, the task's <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will be set to return the result value of the function.</param>
      <param name="state">An object representing data to be used by the function.</param>
      <param name="creationOptions">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}})">
      <summary>Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</summary>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="continuationAction">An action to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes. When run, the delegate will be passed the completed task as an argument.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task`1" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)">
      <summary>Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</summary>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="continuationAction">An action to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes. When run, the delegate will be passed the completed task as an argument.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task`1" /> has been disposed.-or-The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</summary>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="continuationAction">An action to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes. When run, the delegate will be passed the completed task as an argument.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</param>
      <param name="continuationOptions">Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task`1" /> has been disposed.-or-The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction" /> argument is null.-or-The <paramref name="scheduler" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</summary>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="continuationAction">An action to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes. When run, the delegate will be passed the completed task as an argument.</param>
      <param name="continuationOptions">Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task`1" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</summary>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="continuationAction">An action to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes. When run, the delegate will be passed the completed task as an argument.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task`1" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction" /> argument is null.-or-The <paramref name="scheduler" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0})">
      <summary>Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</summary>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="continuationFunction">A function to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes. When run, the delegate will be passed the completed task as an argument.</param>
      <typeparam name="TNewResult"> The type of the result produced by the continuation.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task`1" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken)">
      <summary>Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</summary>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="continuationFunction">A function to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes. When run, the delegate will be passed the completed task as an argument.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new task.</param>
      <typeparam name="TNewResult"> The type of the result produced by the continuation.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task`1" /> has been disposed.-or-The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</summary>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="continuationFunction">A function to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes. When run, the delegate will be passed as an argument this completed task.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new task.</param>
      <param name="continuationOptions">Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</param>
      <typeparam name="TNewResult"> The type of the result produced by the continuation.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task`1" /> has been disposed.-or-The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction" /> argument is null.-or-The <paramref name="scheduler" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</summary>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="continuationFunction">A function to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes. When run, the delegate will be passed the completed task as an argument.</param>
      <param name="continuationOptions">Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</param>
      <typeparam name="TNewResult"> The type of the result produced by the continuation.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task`1" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</summary>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="continuationFunction">A function to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes. When run, the delegate will be passed the completed task as an argument.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</param>
      <typeparam name="TNewResult"> The type of the result produced by the continuation.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task`1" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction" /> argument is null.-or-The <paramref name="scheduler" /> argument is null.</exception>
    </member>
    <member name="P:System.Threading.Tasks.Task`1.Factory">
      <summary>Provides access to factory methods for creating <see cref="T:System.Threading.Tasks.Task`1" /> instances.</summary>
      <returns>A default instance of <see cref="T:System.Threading.Tasks.TaskFactory`1" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task`1.Result">
      <summary>Gets the result value of this <see cref="T:System.Threading.Tasks.Task`1" />.</summary>
      <returns>The result value of this <see cref="T:System.Threading.Tasks.Task`1" />, which is the same type as the task's type parameter.</returns>
    </member>
    <member name="T:System.Threading.Tasks.TaskCanceledException">
      <summary>Represents an exception used to communicate task cancellation.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Tasks.TaskCanceledException" /> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Tasks.TaskCanceledException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination. </param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Tasks.TaskCanceledException" /> class with a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Tasks.TaskCanceledException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.Threading.Tasks.Task)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Tasks.TaskCanceledException" /> class with a reference to the <see cref="T:System.Threading.Tasks.Task" /> that has been canceled.</summary>
      <param name="task">A task that has been canceled.</param>
    </member>
    <member name="P:System.Threading.Tasks.TaskCanceledException.Task">
      <summary>Gets the task associated with this exception.</summary>
      <returns>A reference to the <see cref="T:System.Threading.Tasks.Task" /> that is associated with this exception.</returns>
    </member>
    <member name="T:System.Threading.Tasks.TaskCompletionSource`1">
      <summary>Represents the producer side of a <see cref="T:System.Threading.Tasks.Task{TResult}" /> unbound to a delegate, providing access to the consumer side through the <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> property.</summary>
      <typeparam name="TResult">The type of the result value assocatied with this <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor">
      <summary>Creates a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Object)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> with the specified state.</summary>
      <param name="state">The state to use as the underlying <see cref="T:System.Threading.Tasks.Task{TResult}" />'s AsyncState.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> with the specified state and options.</summary>
      <param name="state">The state to use as the underlying <see cref="T:System.Threading.Tasks.Task{TResult}" />'s AsyncState.</param>
      <param name="creationOptions">The options to use when creating the underlying <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions" /> represent options invalid for use with a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> with the specified options.</summary>
      <param name="creationOptions">The options to use when creating the underlying <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions" /> represent options invalid for use with a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetCanceled">
      <summary>Transitions the underlying <see cref="T:System.Threading.Tasks.Task{TResult}" /> into the <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /> state.</summary>
      <exception cref="T:System.InvalidOperationException">The underlying <see cref="T:System.Threading.Tasks.Task{TResult}" /> is already in one of the three final states: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />, or <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />, or if the underlying <see cref="T:System.Threading.Tasks.Task{TResult}" /> has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Collections.Generic.IEnumerable{System.Exception})">
      <summary>Transitions the underlying <see cref="T:System.Threading.Tasks.Task{TResult}" /> into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state.</summary>
      <param name="exceptions">The collection of exceptions to bind to this <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> was disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="exceptions" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">There are one or more null elements in <paramref name="exceptions" />.</exception>
      <exception cref="T:System.InvalidOperationException">The underlying <see cref="T:System.Threading.Tasks.Task{TResult}" /> is already in one of the three final states: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />, or <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Exception)">
      <summary>Transitions the underlying <see cref="T:System.Threading.Tasks.Task{TResult}" /> into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state.</summary>
      <param name="exception">The exception to bind to this <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> was disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="exception" /> argument is null.</exception>
      <exception cref="T:System.InvalidOperationException">The underlying <see cref="T:System.Threading.Tasks.Task{TResult}" /> is already in one of the three final states: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />, or <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetResult(`0)">
      <summary>Transitions the underlying <see cref="T:System.Threading.Tasks.Task{TResult}" /> into the <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /> state.</summary>
      <param name="result">The result value to bind to this <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> was disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The underlying <see cref="T:System.Threading.Tasks.Task{TResult}" /> is already in one of the three final states: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />, or <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskCompletionSource`1.Task">
      <summary>Gets the <see cref="T:System.Threading.Tasks.Task{TResult}" /> created by this <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</summary>
      <returns>Returns the <see cref="T:System.Threading.Tasks.Task{TResult}" /> created by this <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled">
      <summary>Attempts to transition the underlying <see cref="T:System.Threading.Tasks.Task{TResult}" /> into the <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /> state.</summary>
      <returns>True if the operation was successful; false if the operation was unsuccessful or the object has already been disposed.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Collections.Generic.IEnumerable{System.Exception})">
      <summary>Attempts to transition the underlying <see cref="T:System.Threading.Tasks.Task{TResult}" /> into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state.</summary>
      <returns>True if the operation was successful; otherwise, false.</returns>
      <param name="exceptions">The collection of exceptions to bind to this <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> was disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="exceptions" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">There are one or more null elements in <paramref name="exceptions" />.-or-The <paramref name="exceptions" /> collection is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Exception)">
      <summary>Attempts to transition the underlying <see cref="T:System.Threading.Tasks.Task{TResult}" /> into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state.</summary>
      <returns>True if the operation was successful; otherwise, false.</returns>
      <param name="exception">The exception to bind to this <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> was disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="exception" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetResult(`0)">
      <summary>Attempts to transition the underlying <see cref="T:System.Threading.Tasks.Task{TResult}" /> into the <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /> state.</summary>
      <returns>True if the operation was successful; otherwise, false. </returns>
      <param name="result">The result value to bind to this <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
    </member>
    <member name="T:System.Threading.Tasks.TaskContinuationOptions">
      <summary>Specifies the behavior for a task that is created by using the <see cref="T:System.Threading.Tasks.Task.ContinueWith" /> or <see cref="T:System.Threading.Tasks.Task`1.ContinueWith" /> method.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.None">
      <summary>Default = "Continue on any, no task options, run asynchronously" Specifies that the default behavior should be used. Continuations, by default, will be scheduled when the antecedent task completes, regardless of the task's final <see cref="T:System.Threading.Tasks.TaskStatus" />.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.PreferFairness">
      <summary>A hint to a <see cref="T:System.Threading.Tasks.TaskScheduler" /> to schedule a task in as fair a manner as possible, meaning that tasks scheduled sooner will be more likely to be run sooner, and tasks scheduled later will be more likely to be run later.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.LongRunning">
      <summary>Specifies that a task will be a long-running, course-grained operation. It provides a hint to the <see cref="T:System.Threading.Tasks.TaskScheduler" /> that oversubscription may be warranted.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent">
      <summary>Specifies that a task is attached to a parent in the task hierarchy.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.NotOnRanToCompletion">
      <summary>Specifies that the continuation task should not be scheduled if its antecedent ran to completion. This option is not valid for multi-task continuations.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.NotOnFaulted">
      <summary>Specifies that the continuation task should not be scheduled if its antecedent threw an unhandled exception. This option is not valid for multi-task continuations.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.NotOnCanceled">
      <summary>Specifies that the continuation task should not be scheduled if its antecedent was canceled. This option is not valid for multi-task continuations.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnRanToCompletion">
      <summary>Specifies that the continuation task should be scheduled only if its antecedent ran to completion. This option is not valid for multi-task continuations.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted">
      <summary>Specifies that the continuation task should be scheduled only if its antecedent threw an unhandled exception. This option is not valid for multi-task continuations.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled">
      <summary>Specifies that the continuation task should be scheduled only if its antecedent was canceled.  This option is not valid for multi-task continuations.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously">
      <summary>Specifies that the continuation task should be executed synchronously. With this option specified, the continuation will be run on the same thread that causes the antecedent task to transition into its final state. If the antecedent is already complete when the continuation is created, the continuation will run on the thread creating the continuation. Only very short-running continuations should be executed synchronously.</summary>
    </member>
    <member name="T:System.Threading.Tasks.TaskCreationOptions">
      <summary>Specifies flags that control optional behavior for the creation and execution of tasks.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskCreationOptions.None">
      <summary>Specifies that the default behavior should be used.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskCreationOptions.PreferFairness">
      <summary>A hint to a <see cref="T:System.Threading.Tasks.TaskScheduler" /> to schedule a task in as fair a manner as possible, meaning that tasks scheduled sooner will be more likely to be run sooner, and tasks scheduled later will be more likely to be run later.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskCreationOptions.LongRunning">
      <summary>Specifies that a task will be a long-running, course-grained operation. It provides a hint to the <see cref="T:System.Threading.Tasks.TaskScheduler" /> that oversubscription may be warranted.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskCreationOptions.AttachedToParent">
      <summary>Specifies that a task is attached to a parent in the task hierarchy.</summary>
    </member>
    <member name="T:System.Threading.Tasks.TaskFactory">
      <summary>Provides support for creating and scheduling <see cref="T:System.Threading.Tasks.Task" /> objects.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.#ctor">
      <summary>Initializes a <see cref="T:System.Threading.Tasks.TaskFactory" /> instance with the default configuration.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken)">
      <summary>Initializes a <see cref="T:System.Threading.Tasks.TaskFactory" /> instance with the specified configuration.</summary>
      <param name="cancellationToken">The default <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to tasks created by this <see cref="T:System.Threading.Tasks.TaskFactory" /> unless another CancellationToken is explicitly specified while calling the factory methods.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Initializes a <see cref="T:System.Threading.Tasks.TaskFactory" /> instance with the specified configuration.</summary>
      <param name="cancellationToken">The default <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to tasks created by this <see cref="T:System.Threading.Tasks.TaskFactory" /> unless another CancellationToken is explicitly specified while calling the factory methods.</param>
      <param name="creationOptions">The default <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> to use when creating tasks with this TaskFactory.</param>
      <param name="continuationOptions">The default <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> to use when creating continuation tasks with this TaskFactory.</param>
      <param name="scheduler">The default <see cref="T:System.Threading.Tasks.TaskScheduler" /> to use to schedule any Tasks created with this TaskFactory. A null value indicates that TaskScheduler.Current should be used.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions" /> argument or the <paramref name="continuationOptions" /> argumentspecifies an invalid value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Initializes a <see cref="T:System.Threading.Tasks.TaskFactory" /> instance with the specified configuration.</summary>
      <param name="creationOptions">The default <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> to use when creating tasks with this TaskFactory.</param>
      <param name="continuationOptions">The default <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> to use when creating continuation tasks with this TaskFactory.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions" /> argument or the <paramref name="continuationOptions" /> argument specifies an invalid value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskScheduler)">
      <summary>Initializes a <see cref="T:System.Threading.Tasks.TaskFactory" /> instance with the specified configuration.</summary>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to use to schedule any tasks created with this TaskFactory. A null value indicates that the current TaskScheduler should be used.</param>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory.CancellationToken">
      <summary>Gets the default <see cref="T:System.Threading.CancellationToken" /> of this TaskFactory.</summary>
      <returns>The default <see cref="T:System.Threading.CancellationToken" /> of this TaskFactory.</returns>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory.ContinuationOptions">
      <summary>Gets the <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> value of this TaskFactory.</summary>
      <returns>The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> value of this TaskFactory.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of a set of provided Tasks.</summary>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationAction">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</param>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks" /> array is null.-or-The exception that is thrown when the <paramref name="continuationAction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.-or-The exception that is thrown when the <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of a set of provided Tasks.</summary>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationAction">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</param>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.-or-The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks" /> array is null.-or-The exception that is thrown when the <paramref name="continuationAction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.-or-The exception that is thrown when the <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of a set of provided Tasks.</summary>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationAction">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</param>
      <param name="continuationOptions">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task" />.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task" />.</param>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks" /> array is null.-or-The exception that is thrown when the <paramref name="continuationAction" /> argument is null.-or-The exception that is thrown when the <paramref name="scheduler" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.-or-The exception that is thrown when the <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of a set of provided Tasks.</summary>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationAction">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</param>
      <param name="continuationOptions">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task" />.</param>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks" /> array is null.-or-The exception that is thrown when the <paramref name="continuationAction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="continuationOptions" /> argument specifies an invalid TaskContinuationOptions value.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.-or-The exception that is thrown when the <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of a set of provided Tasks.</summary>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</returns>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationFunction">The function delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</param>
      <typeparam name="TResult">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task{TResult}" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks" /> array is null.-or-The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.-or-The exception that is thrown when the <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of a set of provided Tasks.</summary>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</returns>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationFunction">The function delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</param>
      <typeparam name="TResult">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task{TResult}" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.-or-The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks" /> array is null.-or-The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.-or-The exception that is thrown when the <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task{TResult}" /> that will be started upon the completion of a set of provided Tasks.</summary>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</returns>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationFunction">The function delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</param>
      <param name="continuationOptions">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <typeparam name="TResult">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task{TResult}" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks" /> array is null.-or-The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.-or-The exception that is thrown when the <paramref name="scheduler" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.-or-The exception that is thrown when the <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task{TResult}" /> that will be started upon the completion of a set of provided Tasks.</summary>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</returns>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationFunction">The function delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</param>
      <param name="continuationOptions">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <typeparam name="TResult">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task{TResult}" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks" /> array is null.-or-The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="continuationOptions" /> argument specifies an invalid TaskContinuationOptions value.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.-or-The exception that is thrown when the <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of a set of provided Tasks.</summary>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationAction">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks" /> array is null.-or-The exception that is thrown when the <paramref name="continuationAction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.-or-The exception that is thrown when the <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of a set of provided Tasks.</summary>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationAction">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.-or-The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks" /> array is null.-or-The exception that is thrown when the <paramref name="continuationAction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.-or-The exception that is thrown when the <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of a set of provided Tasks.</summary>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationAction">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</param>
      <param name="continuationOptions">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task" />.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task" />.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks" /> array is null.-or-The exception that is thrown when the <paramref name="continuationAction" /> argument is null.-or-The exception that is thrown when the <paramref name="scheduler" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.-or-The exception that is thrown when the <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of a set of provided Tasks.</summary>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationAction">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</param>
      <param name="continuationOptions">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task" />.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks" /> array is null.-or-The exception that is thrown when the <paramref name="continuationAction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="continuationOptions" /> argument specifies an invalid TaskContinuationOptions value.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.-or-The exception that is thrown when the <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task{TResult}" /> that will be started upon the completion of a set of provided Tasks.</summary>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</returns>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationFunction">The function delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      <typeparam name="TResult">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task{TResult}" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks" /> array is null.-or-The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.-or-The exception that is thrown when the <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task{TResult}" /> that will be started upon the completion of a set of provided Tasks.</summary>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</returns>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationFunction">The function delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      <typeparam name="TResult">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task{TResult}" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.-or-The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks" /> array is null.-or-The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.-or-The exception that is thrown when the <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task{TResult}" /> that will be started upon the completion of a set of provided Tasks.</summary>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</returns>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationFunction">The function delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</param>
      <param name="continuationOptions">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      <typeparam name="TResult">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task{TResult}" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks" /> array is null.-or-The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.-or-The exception that is thrown when the <paramref name="scheduler" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.-or-The exception that is thrown when the <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task{TResult}" /> that will be started upon the completion of a set of provided Tasks.</summary>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</returns>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationFunction">The function delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</param>
      <param name="continuationOptions">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      <typeparam name="TResult">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task{TResult}" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks" /> array is null.-or-The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="continuationOptions" /> argument specifies an invalid TaskContinuationOptions value.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.-or-The exception that is thrown when the <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</summary>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationAction">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</param>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks" /> array is null.-or-The exception that is thrown when the <paramref name="continuationAction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.-or-The exception that is thrown when the <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</summary>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationAction">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</param>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.-or-The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks" /> array is null.-or-The exception that is thrown when the <paramref name="continuationAction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.-or-The exception that is thrown when the <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</summary>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationAction">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</param>
      <param name="continuationOptions">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task" />.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task" />.</param>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks" /> array is null.-or-The exception that is thrown when the <paramref name="continuationAction" /> argument is null.-or-The exception that is thrown when the <paramref name="scheduler" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.-or-The exception that is thrown when the <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</summary>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationAction">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</param>
      <param name="continuationOptions">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task" />.</param>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks" /> array is null.-or-The exception that is thrown when the <paramref name="continuationAction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="continuationOptions" /> argument specifies an invalid TaskContinuationOptions value.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.-or-The exception that is thrown when the <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task{TResult}" /> that will be started upon the completion of any Task in the provided set.</summary>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</returns>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationFunction">The function delegate to execute when one task in the <paramref name="tasks" /> array completes.</param>
      <typeparam name="TResult">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task{TResult}" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks" /> array is null.-or-The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.-or-The exception that is thrown when the <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task{TResult}" /> that will be started upon the completion of any Task in the provided set.</summary>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</returns>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationFunction">The function delegate to execute when one task in the <paramref name="tasks" /> array completes.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</param>
      <typeparam name="TResult">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task{TResult}" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.-or-The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks" /> array is null.-or-The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.-or-The exception that is thrown when the <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task{TResult}" /> that will be started upon the completion of any Task in the provided set.</summary>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</returns>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationFunction">The function delegate to execute when one task in the <paramref name="tasks" /> array completes.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</param>
      <param name="continuationOptions">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <typeparam name="TResult">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task{TResult}" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks" /> array is null.-or-The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.-or-The exception that is thrown when the <paramref name="scheduler" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.-or-The exception that is thrown when the <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task{TResult}" /> that will be started upon the completion of any Task in the provided set.</summary>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</returns>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationFunction">The function delegate to execute when one task in the <paramref name="tasks" /> array completes.</param>
      <param name="continuationOptions">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <typeparam name="TResult">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task{TResult}" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks" /> array is null.-or-The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="continuationOptions" /> argument specifies an invalid TaskContinuationOptions value.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.-or-The exception that is thrown when the <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</summary>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationAction">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks" /> array is null.-or-The exception that is thrown when the <paramref name="continuationAction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.-or-The exception that is thrown when the <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</summary>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationAction">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.-or-The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks" /> array is null.-or-The exception that is thrown when the <paramref name="continuationAction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.-or-The exception that is thrown when the <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</summary>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationAction">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</param>
      <param name="continuationOptions">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task" />.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks" /> array is null.-or-The exception that is thrown when the <paramref name="continuationAction" /> argument is null.-or-The exception that is thrown when the <paramref name="scheduler" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.-or-The exception that is thrown when the <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</summary>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationAction">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</param>
      <param name="continuationOptions">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task" />.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks" /> array is null.-or-The exception that is thrown when the <paramref name="continuationAction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="continuationOptions" /> argument specifies an invalid TaskContinuationOptions value.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.-or-The exception that is thrown when the <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task{TResult}" /> that will be started upon the completion of any Task in the provided set.</summary>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</returns>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationFunction">The function delegate to execute when one task in the <paramref name="tasks" /> array completes.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      <typeparam name="TResult">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task{TResult}" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks" /> array is null.-or-The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.-or-The exception that is thrown when the <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task{TResult}" /> that will be started upon the completion of any Task in the provided set.</summary>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</returns>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationFunction">The function delegate to execute when one task in the <paramref name="tasks" /> array completes.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      <typeparam name="TResult">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task{TResult}" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.-or-The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks" /> array is null.-or-The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.-or-The exception that is thrown when the <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task{TResult}" /> that will be started upon the completion of any Task in the provided set.</summary>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</returns>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationFunction">The function delegate to execute when one task in the <paramref name="tasks" /> array completes.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</param>
      <param name="continuationOptions">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      <typeparam name="TResult">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task{TResult}" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks" /> array is null.-or-The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.-or-The exception that is thrown when the <paramref name="scheduler" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.-or-The exception that is thrown when the <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task{TResult}" /> that will be started upon the completion of any Task in the provided set.</summary>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</returns>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationFunction">The function delegate to execute when one task in the <paramref name="tasks" /> array completes.</param>
      <param name="continuationOptions">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      <typeparam name="TResult">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task{TResult}" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks" /> array is null.-or-The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="continuationOptions" /> argument specifies an invalid TaskContinuationOptions value.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.-or-The exception that is thrown when the <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory.CreationOptions">
      <summary>Gets the <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> value of this TaskFactory.</summary>
      <returns>The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> value of this TaskFactory.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <returns>The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="state">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.-or-The exception that is thrown when the <paramref name="endMethod" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <returns>The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="state">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
      <param name="creationOptions">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" />.</param>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.-or-The exception that is thrown when the <paramref name="endMethod" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task{TResult}" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <returns>The created <see cref="T:System.Threading.Tasks.Task{TResult}" /> that represents the asynchronous operation.</returns>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="state">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task{TResult}" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.-or-The exception that is thrown when the <paramref name="endMethod" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task{TResult}" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <returns>The created <see cref="T:System.Threading.Tasks.Task{TResult}" /> that represents the asynchronous operation.</returns>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="state">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
      <param name="creationOptions">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task{TResult}" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.-or-The exception that is thrown when the <paramref name="endMethod" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <returns>The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="state">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
      <typeparam name="TArg1">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.-or-The exception that is thrown when the <paramref name="endMethod" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <returns>The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="state">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
      <param name="creationOptions">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" />.</param>
      <typeparam name="TArg1">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.-or-The exception that is thrown when the <paramref name="endMethod" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task{TResult}" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <returns>The created <see cref="T:System.Threading.Tasks.Task{TResult}" /> that represents the asynchronous operation.</returns>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="state">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
      <typeparam name="TArg1">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</typeparam>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task{TResult}" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.-or-The exception that is thrown when the <paramref name="endMethod" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task{TResult}" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <returns>The created <see cref="T:System.Threading.Tasks.Task{TResult}" /> that represents the asynchronous operation.</returns>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="state">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
      <param name="creationOptions">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <typeparam name="TArg1">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</typeparam>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task{TResult}" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.-or-The exception that is thrown when the <paramref name="endMethod" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <returns>The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="arg2">The second argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="state">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
      <typeparam name="TArg1">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.-or-The exception that is thrown when the <paramref name="endMethod" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <returns>The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="arg2">The second argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="state">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
      <param name="creationOptions">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" />.</param>
      <typeparam name="TArg1">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.-or-The exception that is thrown when the <paramref name="endMethod" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task{TResult}" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <returns>The created <see cref="T:System.Threading.Tasks.Task{TResult}" /> that represents the asynchronous operation.</returns>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="arg2">The second argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="state">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
      <typeparam name="TArg1">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</typeparam>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task{TResult}" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.-or-The exception that is thrown when the <paramref name="endMethod" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task{TResult}" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <returns>The created <see cref="T:System.Threading.Tasks.Task{TResult}" /> that represents the asynchronous operation.</returns>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="arg2">The second argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="state">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
      <param name="creationOptions">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <typeparam name="TArg1">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</typeparam>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task{TResult}" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.-or-The exception that is thrown when the <paramref name="endMethod" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <returns>The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="arg2">The second argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="arg3">The third argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="state">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
      <typeparam name="TArg1">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to <paramref name="beginMethod" /> delegate.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.-or-The exception that is thrown when the <paramref name="endMethod" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <returns>The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="arg2">The second argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="arg3">The third argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="state">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
      <param name="creationOptions">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" />.</param>
      <typeparam name="TArg1">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to <paramref name="beginMethod" /> delegate.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.-or-The exception that is thrown when the <paramref name="endMethod" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task{TResult}" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <returns>The created <see cref="T:System.Threading.Tasks.Task{TResult}" /> that represents the asynchronous operation.</returns>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="arg2">The second argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="arg3">The third argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="state">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
      <typeparam name="TArg1">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to <paramref name="beginMethod" /> delegate.</typeparam>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task{TResult}" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.-or-The exception that is thrown when the <paramref name="endMethod" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task{TResult}" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <returns>The created <see cref="T:System.Threading.Tasks.Task{TResult}" /> that represents the asynchronous operation.</returns>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="arg2">The second argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="arg3">The third argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="state">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
      <param name="creationOptions">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <typeparam name="TArg1">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to <paramref name="beginMethod" /> delegate.</typeparam>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task{TResult}" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.-or-The exception that is thrown when the <paramref name="endMethod" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task" /> that executes an end method action when a specified <see cref="T:System.IAsyncResult" /> completes.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <param name="asyncResult">The IAsyncResult whose completion should trigger the processing of the <paramref name="endMethod" />.</param>
      <param name="endMethod">The action delegate that processes the completed <paramref name="asyncResult" />.</param>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="asyncResult" /> argument is null.-or-The exception that is thrown when the <paramref name="endMethod" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task" /> that executes an end method action when a specified <see cref="T:System.IAsyncResult" /> completes.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <param name="asyncResult">The IAsyncResult whose completion should trigger the processing of the <paramref name="endMethod" />.</param>
      <param name="endMethod">The action delegate that processes the completed <paramref name="asyncResult" />.</param>
      <param name="creationOptions">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" />.</param>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="asyncResult" /> argument is null.-or-The exception that is thrown when the <paramref name="endMethod" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task" /> that executes an end method action when a specified <see cref="T:System.IAsyncResult" /> completes.</summary>
      <returns>The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <param name="asyncResult">The IAsyncResult whose completion should trigger the processing of the <paramref name="endMethod" />.</param>
      <param name="endMethod">The action delegate that processes the completed <paramref name="asyncResult" />.</param>
      <param name="creationOptions">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" />.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the task that executes the end method.</param>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="asyncResult" /> argument is null.-or-The exception that is thrown when the <paramref name="endMethod" /> argument is null.-or-The exception that is thrown when the <paramref name="scheduler" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task{TResult}" /> that executes an end method function when a specified <see cref="T:System.IAsyncResult" /> completes.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.Task{TResult}" /> that represents the asynchronous operation.</returns>
      <param name="asyncResult">The IAsyncResult whose completion should trigger the processing of the <paramref name="endMethod" />.</param>
      <param name="endMethod">The function delegate that processes the completed <paramref name="asyncResult" />.</param>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task{TResult}" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="asyncResult" /> argument is null.-or-The exception that is thrown when the <paramref name="endMethod" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task{TResult}" /> that executes an end method function when a specified <see cref="T:System.IAsyncResult" /> completes.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.Task{TResult}" /> that represents the asynchronous operation.</returns>
      <param name="asyncResult">The IAsyncResult whose completion should trigger the processing of the <paramref name="endMethod" />.</param>
      <param name="endMethod">The function delegate that processes the completed <paramref name="asyncResult" />.</param>
      <param name="creationOptions">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task{TResult}" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="asyncResult" /> argument is null.-or-The exception that is thrown when the <paramref name="endMethod" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task{TResult}" /> that executes an end method function when a specified <see cref="T:System.IAsyncResult" /> completes.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.Task{TResult}" /> that represents the asynchronous operation.</returns>
      <param name="asyncResult">The IAsyncResult whose completion should trigger the processing of the <paramref name="endMethod" />.</param>
      <param name="endMethod">The function delegate that processes the completed <paramref name="asyncResult" />.</param>
      <param name="creationOptions">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the task that executes the end method.</param>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task{TResult}" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="asyncResult" /> argument is null.-or-The exception that is thrown when the <paramref name="endMethod" /> argument is null.-or-The exception that is thrown when the <paramref name="scheduler" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory.Scheduler">
      <summary>Gets the <see cref="T:System.Threading.Tasks.TaskScheduler" /> of this TaskFactory.</summary>
      <returns>The <see cref="T:System.Threading.Tasks.TaskScheduler" /> of this TaskFactory.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action)">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</summary>
      <returns>The started <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="action">The action delegate to execute asynchronously.</param>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="action" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</summary>
      <returns>The started <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="action">The action delegate to execute asynchronously.</param>
      <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new task.</param>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="action" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</summary>
      <returns>The started <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="action">The action delegate to execute asynchronously.</param>
      <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new <see cref="T:System.Threading.Tasks.Task" /></param>
      <param name="creationOptions">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" /></param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created <see cref="T:System.Threading.Tasks.Task" />.</param>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="action" /> argument is null.-or-The exception that is thrown when the <paramref name="scheduler" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</summary>
      <returns>The started <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="action">The action delegate to execute asynchronously.</param>
      <param name="creationOptions">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" /></param>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="action" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</summary>
      <returns>The started <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="action">The action delegate to execute asynchronously.</param>
      <param name="state">An object containing data to be used by the <paramref name="action" /> delegate.</param>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="action" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</summary>
      <returns>The started <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="action">The action delegate to execute asynchronously.</param>
      <param name="state">An object containing data to be used by the <paramref name="action" /> delegate.</param>
      <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new <see cref="T:System.Threading.Tasks.Task" /></param>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="action" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</summary>
      <returns>The started <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="action">The action delegate to execute asynchronously.</param>
      <param name="state">An object containing data to be used by the <paramref name="action" /> delegate.</param>
      <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new task.</param>
      <param name="creationOptions">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" /></param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created <see cref="T:System.Threading.Tasks.Task" />.</param>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="action" /> argument is null.-or-The exception that is thrown when the <paramref name="scheduler" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</summary>
      <returns>The started <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="action">The action delegate to execute asynchronously.</param>
      <param name="state">An object containing data to be used by the <paramref name="action" /> delegate.</param>
      <param name="creationOptions">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" /></param>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="action" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task{TResult}" />.</summary>
      <returns>The started <see cref="T:System.Threading.Tasks.Task{TResult}" />.</returns>
      <param name="function">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task{TResult}" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="function" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task{TResult}" />.</summary>
      <returns>The started <see cref="T:System.Threading.Tasks.Task{TResult}" />.</returns>
      <param name="function">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new <see cref="T:System.Threading.Tasks.Task" /></param>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task{TResult}" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="function" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task{TResult}" />.</summary>
      <returns>The started <see cref="T:System.Threading.Tasks.Task{TResult}" />.</returns>
      <param name="function">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new task.</param>
      <param name="creationOptions">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task{TResult}" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="function" /> argument is null.-or-The exception that is thrown when the <paramref name="scheduler" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task{TResult}" />.</summary>
      <returns>The started <see cref="T:System.Threading.Tasks.Task{TResult}" />.</returns>
      <param name="function">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <param name="creationOptions">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task{TResult}" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="function" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object)">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task{TResult}" />.</summary>
      <returns>The started <see cref="T:System.Threading.Tasks.Task{TResult}" />.</returns>
      <param name="function">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <param name="state">An object containing data to be used by the <paramref name="function" /> delegate.</param>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task{TResult}" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="function" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task{TResult}" />.</summary>
      <returns>The started <see cref="T:System.Threading.Tasks.Task{TResult}" />.</returns>
      <param name="function">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <param name="state">An object containing data to be used by the <paramref name="function" /> delegate.</param>
      <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new <see cref="T:System.Threading.Tasks.Task" /></param>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task{TResult}" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="function" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task{TResult}" />.</summary>
      <returns>The started <see cref="T:System.Threading.Tasks.Task{TResult}" />.</returns>
      <param name="function">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <param name="state">An object containing data to be used by the <paramref name="function" /> delegate.</param>
      <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new task.</param>
      <param name="creationOptions">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task{TResult}" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="function" /> argument is null.-or-The exception that is thrown when the <paramref name="scheduler" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task{TResult}" />.</summary>
      <returns>The started <see cref="T:System.Threading.Tasks.Task{TResult}" />.</returns>
      <param name="function">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <param name="state">An object containing data to be used by the <paramref name="function" /> delegate.</param>
      <param name="creationOptions">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task{TResult}" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="function" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</exception>
    </member>
    <member name="T:System.Threading.Tasks.TaskFactory`1">
      <summary>Provides support for creating and scheduling <see cref="T:System.Threading.Tasks.Task`1" /> objects.</summary>
      <typeparam name="TResult">The type of the results that are available though the <see cref="T:System.Threading.Tasks.Task{TResult}" /> objects that are associated with the methods in this class.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.#ctor">
      <summary>Initializes a <see cref="T:System.Threading.Tasks.TaskFactory`1" /> instance with the default configuration.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken)">
      <summary>Initializes a <see cref="T:System.Threading.Tasks.TaskFactory`1" /> instance with the default configuration.</summary>
      <param name="cancellationToken">The default <see cref="P:System.Threading.Tasks.TaskFactory`1.CancellationToken" /> that will be assigned to tasks created by this <see cref="T:System.Threading.Tasks.TaskFactory" /> unless another CancellationToken is explicitly specified while calling the factory methods.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Initializes a <see cref="T:System.Threading.Tasks.TaskFactory`1" /> instance with the specified configuration.</summary>
      <param name="cancellationToken">The default <see cref="T:System.Threading.CancellationToken" /> that will be assigned to tasks created by this <see cref="T:System.Threading.Tasks.TaskFactory" /> unless another CancellationToken is explicitly specified while calling the factory methods.</param>
      <param name="creationOptions">The default <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> to use when creating tasks with this <see cref="T:System.Threading.Tasks.TaskFactory`1" />.</param>
      <param name="continuationOptions">The default <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> to use when creating continuation tasks with this TaskFactory{TResult}.</param>
      <param name="scheduler">The default <see cref="T:System.Threading.Tasks.TaskScheduler" /> to use to schedule any Tasks created with this TaskFactory{TResult}. A null value indicates that TaskScheduler.Current should be used.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions" /> argument or the <paramref name="continuationOptions" /> argumentspecifies an invalid value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Initializes a <see cref="T:System.Threading.Tasks.TaskFactory`1" /> instance with the specified configuration.</summary>
      <param name="creationOptions">The default <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> to use when creating tasks with this TaskFactory{TResult}.</param>
      <param name="continuationOptions">The default <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> to use when creating continuation tasks with this TaskFactory{TResult}.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions" /> argument or the <paramref name="continuationOptions" /> argument specifies an invalid value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskScheduler)">
      <summary>Initializes a <see cref="T:System.Threading.Tasks.TaskFactory`1" /> instance with the specified configuration.</summary>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to use to schedule any tasks created with this TaskFactory{TResult}. A null value indicates that the current TaskScheduler should be used.</param>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory`1.CancellationToken">
      <summary>Gets the default <see cref="T:System.Threading.CancellationToken" /> of this TaskFactory.</summary>
      <returns>Returns the default <see cref="T:System.Threading.CancellationToken" /> of this TaskFactory.</returns>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory`1.ContinuationOptions">
      <summary>Gets the <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> value of this TaskFactory{TResult}.</summary>
      <returns>Returns the <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> value of this <see cref="T:System.Threading.Tasks.TaskFactory{TResult}" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task{TResult}" /> that will be started upon the completion of a set of provided Tasks.</summary>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</returns>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationFunction">The function delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</param>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks" /> array is null.-or-The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.-or-The exception that is thrown when the <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task{TResult}" /> that will be started upon the completion of a set of provided Tasks.</summary>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</returns>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationFunction">The function delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</param>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.-or-The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks" /> array is null.-or-The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.-or-The exception that is thrown when the <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task{TResult}" /> that will be started upon the completion of a set of provided Tasks.</summary>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</returns>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationFunction">The function delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</param>
      <param name="continuationOptions">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task" />.</param>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks" /> array is null.-or-The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.-or-The exception that is thrown when the <paramref name="scheduler" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.-or-The exception that is thrown when the <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task{TResult}" /> that will be started upon the completion of a set of provided Tasks.</summary>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</returns>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationFunction">The function delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</param>
      <param name="continuationOptions">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks" /> array is null.-or-The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="continuationOptions" /> argument specifies an invalid TaskContinuationOptions value.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.-or-The exception that is thrown when the <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task{TResult}" /> that will be started upon the completion of a set of provided Tasks.</summary>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</returns>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationFunction">The function delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks" /> array is null.-or-The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.-or-The exception that is thrown when the <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task{TResult}" /> that will be started upon the completion of a set of provided Tasks.</summary>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</returns>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationFunction">The function delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.-or-The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks" /> array is null.-or-The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.-or-The exception that is thrown when the <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task{TResult}" /> that will be started upon the completion of a set of provided Tasks.</summary>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</returns>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationFunction">The function delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</param>
      <param name="continuationOptions">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks" /> array is null.-or-The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.-or-The exception that is thrown when the <paramref name="scheduler" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.-or-The exception that is thrown when the <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task{TResult}" /> that will be started upon the completion of a set of provided Tasks.</summary>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</returns>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationFunction">The function delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</param>
      <param name="continuationOptions">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks" /> array is null.-or-The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="continuationOptions" /> argument specifies an invalid TaskContinuationOptions value.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.-or-The exception that is thrown when the <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task{TResult}" /> that will be started upon the completion of any Task in the provided set.</summary>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</returns>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationFunction">The function delegate to execute when one task in the <paramref name="tasks" /> array completes.</param>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks" /> array is null.-or-The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.-or-The exception that is thrown when the <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task{TResult}" /> that will be started upon the completion of any Task in the provided set.</summary>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</returns>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationFunction">The function delegate to execute when one task in the <paramref name="tasks" /> array completes.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</param>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.-or-The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks" /> array is null.-or-The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.-or-The exception that is thrown when the <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task{TResult}" /> that will be started upon the completion of any Task in the provided set.</summary>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</returns>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationFunction">The function delegate to execute when one task in the <paramref name="tasks" /> array completes.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</param>
      <param name="continuationOptions">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task" />.</param>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks" /> array is null.-or-The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.-or-The exception that is thrown when the <paramref name="scheduler" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.-or-The exception that is thrown when the <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task{TResult}" /> that will be started upon the completion of any Task in the provided set.</summary>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</returns>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationFunction">The function delegate to execute when one task in the <paramref name="tasks" /> array completes.</param>
      <param name="continuationOptions">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks" /> array is null.-or-The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="continuationOptions" /> argument specifies an invalid TaskContinuationOptions value.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.-or-The exception that is thrown when the <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task{TResult}" /> that will be started upon the completion of any Task in the provided set.</summary>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</returns>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationFunction">The function delegate to execute when one task in the <paramref name="tasks" /> array completes.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks" /> array is null.-or-The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.-or-The exception that is thrown when the <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task{TResult}" /> that will be started upon the completion of any Task in the provided set.</summary>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</returns>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationFunction">The function delegate to execute when one task in the <paramref name="tasks" /> array completes.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.-or-The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks" /> array is null.-or-The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.-or-The exception that is thrown when the <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task{TResult}" /> that will be started upon the completion of any Task in the provided set.</summary>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</returns>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationFunction">The function delegate to execute when one task in the <paramref name="tasks" /> array completes.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</param>
      <param name="continuationOptions">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks" /> array is null.-or-The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.-or-The exception that is thrown when the <paramref name="scheduler" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.-or-The exception that is thrown when the <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task{TResult}" /> that will be started upon the completion of any Task in the provided set.</summary>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</returns>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationFunction">The function delegate to execute when one task in the <paramref name="tasks" /> array completes.</param>
      <param name="continuationOptions">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="tasks" /> array is null.-or-The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="continuationOptions" /> argument specifies an invalid TaskContinuationOptions value.</exception>
      <exception cref="T:System.ArgumentException">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.-or-The exception that is thrown when the <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory`1.CreationOptions">
      <summary>Gets the <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> value of this TaskFactory{TResult}.</summary>
      <returns>Returns the <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> value of this <see cref="T:System.Threading.Tasks.TaskFactory{TResult}" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task{TResult}" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <returns>The created <see cref="T:System.Threading.Tasks.Task{TResult}" /> that represents the asynchronous operation.</returns>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="state">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.-or-The exception that is thrown when the <paramref name="endMethod" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task{TResult}" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <returns>The created <see cref="T:System.Threading.Tasks.Task{TResult}" /> that represents the asynchronous operation.</returns>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="state">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
      <param name="creationOptions">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.-or-The exception that is thrown when the <paramref name="endMethod" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task{TResult}" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <returns>The created <see cref="T:System.Threading.Tasks.Task{TResult}" /> that represents the asynchronous operation.</returns>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="state">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
      <typeparam name="TArg1">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.-or-The exception that is thrown when the <paramref name="endMethod" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task{TResult}" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <returns>The created <see cref="T:System.Threading.Tasks.Task{TResult}" /> that represents the asynchronous operation.</returns>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="state">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
      <param name="creationOptions">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <typeparam name="TArg1">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.-or-The exception that is thrown when the <paramref name="endMethod" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task{TResult}" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <returns>The created <see cref="T:System.Threading.Tasks.Task{TResult}" /> that represents the asynchronous operation.</returns>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="arg2">The second argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="state">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
      <typeparam name="TArg1">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.-or-The exception that is thrown when the <paramref name="endMethod" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task{TResult}" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <returns>The created <see cref="T:System.Threading.Tasks.Task{TResult}" /> that represents the asynchronous operation.</returns>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="arg2">The second argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="state">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
      <param name="creationOptions">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <typeparam name="TArg1">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.-or-The exception that is thrown when the <paramref name="endMethod" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task{TResult}" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <returns>The created <see cref="T:System.Threading.Tasks.Task{TResult}" /> that represents the asynchronous operation.</returns>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="arg2">The second argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="arg3">The third argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="state">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
      <typeparam name="TArg1">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to <paramref name="beginMethod" /> delegate.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.-or-The exception that is thrown when the <paramref name="endMethod" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task{TResult}" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <returns>The created <see cref="T:System.Threading.Tasks.Task{TResult}" /> that represents the asynchronous operation.</returns>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="arg2">The second argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="arg3">The third argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="state">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
      <param name="creationOptions">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <typeparam name="TArg1">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to <paramref name="beginMethod" /> delegate.</typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.-or-The exception that is thrown when the <paramref name="endMethod" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task{TResult}" /> that executes an end method function when a specified <see cref="T:System.IAsyncResult" /> completes.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.Task{TResult}" /> that represents the asynchronous operation.</returns>
      <param name="asyncResult">The IAsyncResult whose completion should trigger the processing of the <paramref name="endMethod" />.</param>
      <param name="endMethod">The function delegate that processes the completed <paramref name="asyncResult" />.</param>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="asyncResult" /> argument is null.-or-The exception that is thrown when the <paramref name="endMethod" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task{TResult}" /> that executes an end method function when a specified <see cref="T:System.IAsyncResult" /> completes.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.Task{TResult}" /> that represents the asynchronous operation.</returns>
      <param name="asyncResult">The IAsyncResult whose completion should trigger the processing of the <paramref name="endMethod" />.</param>
      <param name="endMethod">The function delegate that processes the completed <paramref name="asyncResult" />.</param>
      <param name="creationOptions">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="asyncResult" /> argument is null.-or-The exception that is thrown when the <paramref name="endMethod" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task{TResult}" /> that executes an end method function when a specified <see cref="T:System.IAsyncResult" /> completes.</summary>
      <returns>The created <see cref="T:System.Threading.Tasks.Task{TResult}" /> that represents the asynchronous operation.</returns>
      <param name="asyncResult">The IAsyncResult whose completion should trigger the processing of the <paramref name="endMethod" />.</param>
      <param name="endMethod">The function delegate that processes the completed <paramref name="asyncResult" />.</param>
      <param name="creationOptions">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the task that executes the end method.</param>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="asyncResult" /> argument is null.-or-The exception that is thrown when the <paramref name="endMethod" /> argument is null.-or-The exception that is thrown when the <paramref name="scheduler" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory`1.Scheduler">
      <summary>Gets the <see cref="T:System.Threading.Tasks.TaskScheduler" /> of this TaskFactory{TResult}.</summary>
      <returns>Returns the <see cref="T:System.Threading.Tasks.TaskScheduler" /> of this <see cref="T:System.Threading.Tasks.TaskFactory{TResult}" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0})">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task{TResult}" />.</summary>
      <returns>The started <see cref="T:System.Threading.Tasks.Task{TResult}" />.</returns>
      <param name="function">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="function" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task{TResult}" />.</summary>
      <returns>The started <see cref="T:System.Threading.Tasks.Task{TResult}" />.</returns>
      <param name="function">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.TaskFactory`1.CancellationToken" /> that will be assigned to the new task.</param>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="function" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task{TResult}" />.</summary>
      <returns>The started <see cref="T:System.Threading.Tasks.Task{TResult}" />.</returns>
      <param name="function">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.TaskFactory`1.CancellationToken" /> that will be assigned to the new task.</param>
      <param name="creationOptions">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="function" /> argument is null.-or-The exception that is thrown when the <paramref name="scheduler" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task{TResult}" />.</summary>
      <returns>The started <see cref="T:System.Threading.Tasks.Task{TResult}" />.</returns>
      <param name="function">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <param name="creationOptions">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="function" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task{TResult}" />.</summary>
      <returns>The started <see cref="T:System.Threading.Tasks.Task{TResult}" />.</returns>
      <param name="function">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <param name="state">An object containing data to be used by the <paramref name="function" /> delegate.</param>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="function" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task{TResult}" />.</summary>
      <returns>The started <see cref="T:System.Threading.Tasks.Task{TResult}" />.</returns>
      <param name="function">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <param name="state">An object containing data to be used by the <paramref name="function" /> delegate.</param>
      <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.TaskFactory`1.CancellationToken" /> that will be assigned to the new task.</param>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="function" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task{TResult}" />.</summary>
      <returns>The started <see cref="T:System.Threading.Tasks.Task{TResult}" />.</returns>
      <param name="function">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <param name="state">An object containing data to be used by the <paramref name="function" /> delegate.</param>
      <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.TaskFactory`1.CancellationToken" /> that will be assigned to the new task.</param>
      <param name="creationOptions">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="function" /> argument is null.-or-The exception that is thrown when the <paramref name="scheduler" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task{TResult}" />.</summary>
      <returns>The started <see cref="T:System.Threading.Tasks.Task{TResult}" />.</returns>
      <param name="function">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <param name="state">An object containing data to be used by the <paramref name="function" /> delegate.</param>
      <param name="creationOptions">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task{TResult}" />.</param>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="function" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</exception>
    </member>
    <member name="T:System.Threading.Tasks.TaskScheduler">
      <summary>Represents an object that handles the low-level work of queuing tasks onto threads.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.#ctor">
      <summary>Initializes the <see cref="T:System.Threading.Tasks.TaskScheduler" />.</summary>
    </member>
    <member name="P:System.Threading.Tasks.TaskScheduler.Current">
      <summary>Gets the <see cref="T:System.Threading.Tasks.TaskScheduler" /> associated with the currently executing task.</summary>
      <returns>Returns the <see cref="T:System.Threading.Tasks.TaskScheduler" /> associated with the currently executing task.</returns>
    </member>
    <member name="P:System.Threading.Tasks.TaskScheduler.Default">
      <summary>Gets the default <see cref="T:System.Threading.Tasks.TaskScheduler" /> instance that is provided by the .NET Framework.</summary>
      <returns>Returns the default <see cref="T:System.Threading.Tasks.TaskScheduler" /> instance.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.Finalize">
      <summary>Frees all resources associated with this scheduler.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext">
      <summary>Creates a <see cref="T:System.Threading.Tasks.TaskScheduler" /> associated with the current <see cref="T:System.Threading.SynchronizationContext" />.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.TaskScheduler" /> associated with the current <see cref="T:System.Threading.SynchronizationContext" />, as determined by <see cref="P:System.Threading.SynchronizationContext.Current" />.</returns>
      <exception cref="T:System.InvalidOperationException">The current SynchronizationContext may not be used as a TaskScheduler.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.GetScheduledTasks">
      <summary>Generates an enumerable of <see cref="T:System.Threading.Tasks.Task" /> instances currently queued to the scheduler waiting to be executed.</summary>
      <returns>An enumerable that allows traversal of tasks currently queued to this scheduler.</returns>
      <exception cref="T:System.NotSupportedException">This scheduler is unable to generate a list of queued tasks at this time.</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskScheduler.Id">
      <summary>Gets the unique ID for this <see cref="T:System.Threading.Tasks.TaskScheduler" />.</summary>
      <returns>Returns the unique ID for this <see cref="T:System.Threading.Tasks.TaskScheduler" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.TaskScheduler.MaximumConcurrencyLevel">
      <summary>Indicates the maximum concurrency level this <see cref="T:System.Threading.Tasks.TaskScheduler" /> is able to support.</summary>
      <returns>Returns an integer that represents the maximum concurrency level.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.QueueTask(System.Threading.Tasks.Task)">
      <summary>Queues a <see cref="T:System.Threading.Tasks.Task" /> to the scheduler.</summary>
      <param name="task">The <see cref="T:System.Threading.Tasks.Task" /> to be queued.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="task" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.TryDequeue(System.Threading.Tasks.Task)">
      <summary>Attempts to dequeue a <see cref="T:System.Threading.Tasks.Task" /> that was previously queued to this scheduler.</summary>
      <returns>A Boolean denoting whether the <paramref name="task" /> argument was successfully dequeued.</returns>
      <param name="task">The <see cref="T:System.Threading.Tasks.Task" /> to be dequeued.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="task" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.TryExecuteTask(System.Threading.Tasks.Task)">
      <summary>Attempts to execute the provided <see cref="T:System.Threading.Tasks.Task" /> on this scheduler.</summary>
      <returns>A Boolean that is true if <paramref name="task" /> was successfully executed, false if it was not. A common reason for execution failure is that the task had previously been executed or is in the process of being executed by another thread.</returns>
      <param name="task">A <see cref="T:System.Threading.Tasks.Task" /> object to be executed.</param>
      <exception cref="T:System.InvalidOperationException">The <paramref name="task" /> is not associated with this scheduler.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
      <summary>Determines whether the provided <see cref="T:System.Threading.Tasks.Task" /> can be executed synchronously in this call, and if it can, executes it.</summary>
      <returns>A Boolean value indicating whether the task was executed inline.</returns>
      <param name="task">The <see cref="T:System.Threading.Tasks.Task" /> to be executed.</param>
      <param name="taskWasPreviouslyQueued">A Boolean denoting whether or not task has previously been queued. If this parameter is True, then the task may have been previously queued (scheduled); if False, then the task is known not to have been queued, and this call is being made in order to execute the task inline without queuing it.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="task" /> argument is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="task" /> was already executed.</exception>
    </member>
    <member name="E:System.Threading.Tasks.TaskScheduler.UnobservedTaskException">
      <summary>Occurs when a faulted <see cref="T:System.Threading.Tasks.Task" />'s unobserved exception is about to trigger exception escalation policy, which, by default, would terminate the process.</summary>
    </member>
    <member name="T:System.Threading.Tasks.TaskSchedulerException">
      <summary>Represents an exception used to communicate an invalid operation by a <see cref="T:System.Threading.Tasks.TaskScheduler" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> class using the default error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="innerException">The exception that is the cause of the current exception.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination. </param>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> class with a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Threading.Tasks.TaskStatus">
      <summary>Represents the current stage in the lifecycle of a <see cref="T:System.Threading.Tasks.Task" />.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.Created">
      <summary>The task has been initialized but has not yet been scheduled.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.WaitingForActivation">
      <summary>The task is waiting to be activated and scheduled internally by the .NET Framework infrastructure.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.WaitingToRun">
      <summary>The task has been scheduled for execution but has not yet begun executing.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.Running">
      <summary>The task is running but has not yet completed.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.WaitingForChildrenToComplete">
      <summary>The task has finished executing and is implicitly waiting for attached child tasks to complete.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.RanToCompletion">
      <summary>The task completed execution successfully.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.Canceled">
      <summary>The task acknowledged cancellation by throwing an OperationCanceledException with its own CancellationToken while the token was in signaled state, or the task's CancellationToken was already signaled before the task started executing.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.Faulted">
      <summary>The task completed due to an unhandled exception.</summary>
    </member>
    <member name="T:System.Threading.Tasks.UnobservedTaskExceptionEventArgs">
      <summary>Provides data for the event that is raised when a faulted <see cref="T:System.Threading.Tasks.Task" />'s exception goes unobserved.</summary>
    </member>
    <member name="M:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.#ctor(System.AggregateException)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Tasks.UnobservedTaskExceptionEventArgs" /> class with the unobserved exception.</summary>
      <param name="exception">The Exception that has gone unobserved.</param>
    </member>
    <member name="P:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.Exception">
      <summary>The Exception that went unobserved.</summary>
      <returns>The Exception that went unobserved.</returns>
    </member>
    <member name="P:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.Observed">
      <summary>Gets whether this exception has been marked as "observed."</summary>
      <returns>true if this exception has been marked as "observed"; otherwise false.</returns>
    </member>
    <member name="M:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.SetObserved">
      <summary>Marks the <see cref="P:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.Exception" /> as "observed," thus preventing it from triggering exception escalation policy which, by default, terminates the process.</summary>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\System.IdentityModel.Selectors.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.IdentityModel.Selectors</name>
  </assembly>
  <members>
    <member name="T:System.IdentityModel.Selectors.CardSpaceException">
      <summary>The exception that is thrown when one or more exceptions have occurred at the  service level. The cause of the error will be logged in the event log.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.CardSpaceException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Selectors.CardSpaceException" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.CardSpaceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes an instance of the <see cref="T:System.IdentityModel.Selectors.CardSpaceException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" />  that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.IdentityModel.Selectors.CardSpaceException.#ctor(System.String)">
      <summary>Initializes an instance of the <see cref="T:System.IdentityModel.Selectors.CardSpaceException" /> class with the specified error message.</summary>
      <param name="message">The message that describes the error.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.CardSpaceException.#ctor(System.String,System.Exception)">
      <summary>Initializes an instance of the <see cref="T:System.IdentityModel.Selectors.CardSpaceException" /> class with the specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that represents the cause of the current exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Selectors.CardSpacePolicyElement">
      <summary>This class is intended for use by the infrastructure.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.CardSpacePolicyElement.#ctor(System.Xml.XmlElement,System.Xml.XmlElement,System.Collections.ObjectModel.Collection{System.Xml.XmlElement},System.Uri,System.Int32,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Selectors.CardSpacePolicyElement" /> class using the specified target and issuer of the policy, the policy parameters, privacy notice location, and the privacy notice version.</summary>
      <param name="target">An <see cref="T:System.Xml.XmlElement" /> that represents the target of this policy.Sets the <see cref="P:System.IdentityModel.Selectors.CardSpacePolicyElement.Target" /> property.</param>
      <param name="issuer">An <see cref="T:System.Xml.XmlElement" /> that represents the policy issuer. Sets the <see cref="P:System.IdentityModel.Selectors.CardSpacePolicyElement.Issuer" /> property.</param>
      <param name="parameters">A <see cref="T:System.Collections.ObjectModel.Collection`1" /> of type <see cref="T:System.Xml.XmlElement" /> that represents the parameters for this element. Sets the <see cref="P:System.IdentityModel.Selectors.CardSpacePolicyElement.Parameters" /> property.</param>
      <param name="privacyNoticeLink">The <see cref="T:System.Uri" /> where the privacy policy is located. Sets the <see cref="P:System.IdentityModel.Selectors.CardSpacePolicyElement.PolicyNoticeLink" /> property.</param>
      <param name="privacyNoticeVersion">The version of the privacy information. Sets the <see cref="P:System.IdentityModel.Selectors.CardSpacePolicyElement.PolicyNoticeVersion" /> property.</param>
      <param name="isManagedIssuer">true if the issuer is managed; otherwise false. Sets the <see cref="P:System.IdentityModel.Selectors.CardSpacePolicyElement.IsManagedIssuer" /> property.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Selectors.CardSpacePolicyElement.IsManagedIssuer">
      <summary>Gets or sets a value that indicates whether the issuer of the policy is a managed issuer.</summary>
      <returns>true if the issuer is managed; otherwise false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Selectors.CardSpacePolicyElement.Issuer">
      <summary>Gets or sets the policy issuer.</summary>
      <returns>An <see cref="T:System.Xml.XmlElement" /> that represents the policy issuer.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Selectors.CardSpacePolicyElement.Parameters">
      <summary>Gets a collection of XML elements that represent the parameters for this element.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.Collection`1" /> of type <see cref="T:System.Xml.XmlElement" /> that represents the parameters for this element.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Selectors.CardSpacePolicyElement.PolicyNoticeLink">
      <summary>Gets or sets the URI for the privacy information of this policy.</summary>
      <returns>The <see cref="T:System.Uri" /> where the privacy policy is located.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Selectors.CardSpacePolicyElement.PolicyNoticeVersion">
      <summary>Gets or sets the version of the privacy information.</summary>
      <returns>The version of the privacy information.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Selectors.CardSpacePolicyElement.Target">
      <summary>Gets or sets the target of this policy.</summary>
      <returns>An <see cref="T:System.Xml.XmlElement" /> that represents the target of this policy.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Selectors.CardSpaceSelector">
      <summary>Provides access to all  public operations that are supported in managed code.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.CardSpaceSelector.GetToken(System.IdentityModel.Selectors.CardSpacePolicyElement[],System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>Generates a security token using the  system and the specified policy chain and token serializer.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.GenericXmlSecurityToken" /> that represents the generated security token.</returns>
      <param name="policyChain">An array of <see cref="T:System.IdentityModel.Selectors.CardSpacePolicyElement" /> that describes the federated security chain that the client requires a final token to unwind.</param>
      <param name="tokenSerializer">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> that can read a KeyInfo clause.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="policyChain" /> is null.-or-<paramref name="policyChain" /> is zero length.-or-<paramref name="tokenSerializer" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.CardSpaceSelector.GetToken(System.Xml.XmlElement,System.Collections.Generic.IEnumerable{System.Xml.XmlElement},System.Xml.XmlElement,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>Generates a security token using the  system and the specified endpoint, policy, token issuer, and token serializer.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.GenericXmlSecurityToken" /> that represents the generated security token.</returns>
      <param name="endpoint">An <see cref="T:System.Xml.XmlElement" /> that represents the endpoint address of the recipient where the token is presented.</param>
      <param name="policy">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of type <see cref="T:System.Xml.XmlElement" /> that contains a policy fragment that specifies the token types and claims that are requested by the recipient.</param>
      <param name="requiredRemoteTokenIssuer">An <see cref="T:System.Xml.XmlElement" /> that represents the issuer of the token.</param>
      <param name="tokenSerializer">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> that can read a KeyInfo clause.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="endpoint" /> is null.-or-<paramref name="policy" /> is null.-or-<paramref name="tokenSerializer" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.CardSpaceSelector.Import(System.String)">
      <summary>Displays the Import Card user interface.</summary>
      <param name="fileName">The name of the file to import.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> is null.-or-<paramref name="fileName" /> is <see cref="F:System.String.Empty" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.CardSpaceSelector.Manage">
      <summary>Displays the  management user interface that allows the user to create, delete, rename, and modify the card.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Selectors.IdentityValidationException">
      <summary>Exception class to indicate that the recipient certificate was not valid.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.IdentityValidationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Selectors.IdentityValidationException" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.IdentityValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Selectors.IdentityValidationException" /> class using the specified serialization information and serialization context.</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.IdentityModel.Selectors.IdentityValidationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Selectors.IdentityValidationException" /> class with the specified error message.</summary>
      <param name="message">A string that contains the error message that explains the reason for the exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.IdentityValidationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Selectors.IdentityValidationException" /> class with the specified error message and the original exception that caused this exception to be thrown.</summary>
      <param name="message">A string that contains the error message that explains the reason for the exception.</param>
      <param name="innerException">The original exception that caused this exception to be thrown.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Selectors.PolicyValidationException">
      <summary>Exception class to indicate that the policy supplied by the recipient could not be validated.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.PolicyValidationException.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.IdentityModel.Selectors.PolicyValidationException" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.PolicyValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes an instance of the <see cref="T:System.IdentityModel.Selectors.PolicyValidationException" /> class with serialization information and streaming context specified.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.IdentityModel.Selectors.PolicyValidationException.#ctor(System.String)">
      <summary>Initializes an instance of the <see cref="T:System.IdentityModel.Selectors.PolicyValidationException" /> class with the specified error message.</summary>
      <param name="message">The message that describes the error.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.PolicyValidationException.#ctor(System.String,System.Exception)">
      <summary>Initializes an instance of the <see cref="T:System.IdentityModel.Selectors.PolicyValidationException" /> class with the specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">The exception that is the cause of the current exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Selectors.ServiceBusyException">
      <summary>Exception class to indicate that the  service is busy processing other requests.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.ServiceBusyException.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.IdentityModel.Selectors.ServiceBusyException" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.ServiceBusyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes an instance of the <see cref="T:System.IdentityModel.Selectors.ServiceBusyException" /> class with serialization information and streaming context specified.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.IdentityModel.Selectors.ServiceBusyException.#ctor(System.String)">
      <summary>Initializes an instance of the <see cref="T:System.IdentityModel.Selectors.ServiceBusyException" /> class with the specified error message.</summary>
      <param name="message">The message that describes the error.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.ServiceBusyException.#ctor(System.String,System.Exception)">
      <summary>Initializes an instance of the <see cref="T:System.IdentityModel.Selectors.ServiceBusyException" /> class with the specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">The exception that is the cause of the current exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Selectors.ServiceNotStartedException">
      <summary>The exception that is thrown when  has not been started on the user's computer.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.ServiceNotStartedException.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.IdentityModel.Selectors.ServiceNotStartedException" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.ServiceNotStartedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes an instance of the <see cref="T:System.IdentityModel.Selectors.ServiceNotStartedException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.IdentityModel.Selectors.ServiceNotStartedException.#ctor(System.String)">
      <summary>Initializes an instance of the <see cref="T:System.IdentityModel.Selectors.ServiceNotStartedException" /> class with the specified error message.</summary>
      <param name="message">The message that describes the error.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.ServiceNotStartedException.#ctor(System.String,System.Exception)">
      <summary>Initializes an instance of the <see cref="T:System.IdentityModel.Selectors.ServiceNotStartedException" /> class with the specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">The exception that is the cause of the current exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Selectors.StsCommunicationException">
      <summary>The exception that is thrown when there is a problem communicating with the security token service.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.StsCommunicationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IdentityModel.Selectors.StsCommunicationException" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.StsCommunicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes an instance of the <see cref="T:System.IdentityModel.Selectors.StsCommunicationException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.IdentityModel.Selectors.StsCommunicationException.#ctor(System.String)">
      <summary>Initializes an instance of the <see cref="T:System.IdentityModel.Selectors.StsCommunicationException" /> class with the specified error message.</summary>
      <param name="message">The message that describes the error.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.StsCommunicationException.#ctor(System.String,System.Exception)">
      <summary>Initializes an instance of the <see cref="T:System.IdentityModel.Selectors.StsCommunicationException" /> class with the specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">The exception that is the cause of the current exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Selectors.UnsupportedPolicyOptionsException">
      <summary>Indicates that a policy was provided to the system that included options that were unsupported.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.UnsupportedPolicyOptionsException.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.IdentityModel.Selectors.UnsupportedPolicyOptionsException" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.UnsupportedPolicyOptionsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes an instance of the <see cref="T:System.IdentityModel.Selectors.UnsupportedPolicyOptionsException" /> class with the specified serialization information and streaming context.</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.IdentityModel.Selectors.UnsupportedPolicyOptionsException.#ctor(System.String)">
      <summary>Initializes an instance of the <see cref="T:System.IdentityModel.Selectors.UnsupportedPolicyOptionsException" /> class with the specified error message.</summary>
      <param name="message">The error message.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.UnsupportedPolicyOptionsException.#ctor(System.String,System.Exception)">
      <summary>Initializes an instance of the <see cref="T:System.IdentityModel.Selectors.UnsupportedPolicyOptionsException" /> class with the specified error message and the original exception that caused this exception to be thrown.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The original exception that caused this exception to be thrown.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Selectors.UntrustedRecipientException">
      <summary>The exception that is thrown when the user decides not to trust the entity that is requesting a token after reviewing the information from their certificate.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.UntrustedRecipientException.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.IdentityModel.Selectors.UntrustedRecipientException" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.UntrustedRecipientException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes an instance of the <see cref="T:System.IdentityModel.Selectors.UntrustedRecipientException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.IdentityModel.Selectors.UntrustedRecipientException.#ctor(System.String)">
      <summary>Initializes an instance of the <see cref="T:System.IdentityModel.Selectors.UntrustedRecipientException" /> class with the specified error message.</summary>
      <param name="message">The message that describes the error.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.UntrustedRecipientException.#ctor(System.String,System.Exception)">
      <summary>Initializes an instance of the <see cref="T:System.IdentityModel.Selectors.UntrustedRecipientException" /> class with the specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">The exception that is the cause of the current exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Selectors.UserCancellationException">
      <summary>The exception that is thrown when the user cancels an operation during the <see cref="M:System.IdentityModel.Selectors.CardSpaceSelector.GetToken(System.IdentityModel.Selectors.CardSpacePolicyElement[],System.IdentityModel.Selectors.SecurityTokenSerializer)" /> call.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.UserCancellationException.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.IdentityModel.Selectors.UserCancellationException" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.UserCancellationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes an instance of the <see cref="T:System.IdentityModel.Selectors.UserCancellationException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.IdentityModel.Selectors.UserCancellationException.#ctor(System.String)">
      <summary>Initializes an instance of the <see cref="T:System.IdentityModel.Selectors.UserCancellationException" /> class with the specified error message.</summary>
      <param name="message">The message that describes the error.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.UserCancellationException.#ctor(System.String,System.Exception)">
      <summary>Initializes an instance of the <see cref="T:System.IdentityModel.Selectors.UserCancellationException" /> class with the specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">The exception that is the cause of the current exception.</param>
      <filterpriority>2</filterpriority>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\System.EnterpriseServices.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.EnterpriseServices</name>
  </assembly>
  <members>
    <member name="T:System.EnterpriseServices.AccessChecksLevelOption">
      <summary>Specifies the level of access checking for an application, either at the process level only or at all levels, including component, interface, and method levels.</summary>
    </member>
    <member name="F:System.EnterpriseServices.AccessChecksLevelOption.Application">
      <summary>Enables access checks only at the process level. No access checks are made at the component, interface, or method level.</summary>
    </member>
    <member name="F:System.EnterpriseServices.AccessChecksLevelOption.ApplicationComponent">
      <summary>Enables access checks at every level on calls into the application.</summary>
    </member>
    <member name="T:System.EnterpriseServices.ActivationOption">
      <summary>Specifies the manner in which serviced components are activated in the application.</summary>
    </member>
    <member name="F:System.EnterpriseServices.ActivationOption.Library">
      <summary>Specifies that serviced components in the marked application are activated in the creator's process.</summary>
    </member>
    <member name="F:System.EnterpriseServices.ActivationOption.Server">
      <summary>Specifies that serviced components in the marked application are activated in a system-provided process.</summary>
    </member>
    <member name="T:System.EnterpriseServices.Activity">
      <summary>Creates an activity to do synchronous or asynchronous batch work that can use COM+ services without needing to create a COM+ component. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.EnterpriseServices.Activity.#ctor(System.EnterpriseServices.ServiceConfig)">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.Activity" /> class.</summary>
      <param name="cfg">A <see cref="T:System.EnterpriseServices.ServiceConfig" /> that contains the configuration information for the services to be used. </param>
      <exception cref="T:System.PlatformNotSupportedException">
        <see cref="T:System.EnterpriseServices.Activity" /> is not supported on the current platform. </exception>
    </member>
    <member name="M:System.EnterpriseServices.Activity.AsynchronousCall(System.EnterpriseServices.IServiceCall)">
      <summary>Runs the specified user-defined batch work asynchronously.</summary>
      <param name="serviceCall">A <see cref="T:System.EnterpriseServices.IServiceCall" /> object that is used to implement the batch work. </param>
    </member>
    <member name="M:System.EnterpriseServices.Activity.BindToCurrentThread">
      <summary>Binds the user-defined work to the current thread.</summary>
    </member>
    <member name="M:System.EnterpriseServices.Activity.SynchronousCall(System.EnterpriseServices.IServiceCall)">
      <summary>Runs the specified user-defined batch work synchronously.</summary>
      <param name="serviceCall">A <see cref="T:System.EnterpriseServices.IServiceCall" /> object that is used to implement the batch work. </param>
    </member>
    <member name="M:System.EnterpriseServices.Activity.UnbindFromThread">
      <summary>Unbinds the batch work that is submitted by the <see cref="M:System.EnterpriseServices.Activity.SynchronousCall(System.EnterpriseServices.IServiceCall)" /> or <see cref="M:System.EnterpriseServices.Activity.AsynchronousCall(System.EnterpriseServices.IServiceCall)" /> methods from the thread on which the batch work is running.</summary>
    </member>
    <member name="T:System.EnterpriseServices.ApplicationAccessControlAttribute">
      <summary>Specifies access controls to an assembly containing <see cref="T:System.EnterpriseServices.ServicedComponent" /> classes.</summary>
    </member>
    <member name="M:System.EnterpriseServices.ApplicationAccessControlAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.ApplicationAccessControlAttribute" /> class, enabling the COM+ security configuration.</summary>
    </member>
    <member name="M:System.EnterpriseServices.ApplicationAccessControlAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.ApplicationAccessControlAttribute" /> class and sets the <see cref="P:System.EnterpriseServices.ApplicationAccessControlAttribute.Value" /> property indicating whether to enable COM security configuration.</summary>
      <param name="val">true to allow configuration of security; otherwise, false. </param>
    </member>
    <member name="P:System.EnterpriseServices.ApplicationAccessControlAttribute.AccessChecksLevel">
      <summary>Gets or sets the access checking level to process level or to component level.</summary>
      <returns>One of the <see cref="T:System.EnterpriseServices.AccessChecksLevelOption" /> values.</returns>
    </member>
    <member name="P:System.EnterpriseServices.ApplicationAccessControlAttribute.Authentication">
      <summary>Gets or sets the remote procedure call (RPC) authentication level.</summary>
      <returns>One of the <see cref="T:System.EnterpriseServices.AuthenticationOption" /> values.</returns>
    </member>
    <member name="P:System.EnterpriseServices.ApplicationAccessControlAttribute.ImpersonationLevel">
      <summary>Gets or sets the impersonation level that is allowed for calling targets of this application.</summary>
      <returns>One of the <see cref="T:System.EnterpriseServices.ImpersonationLevelOption" /> values.</returns>
    </member>
    <member name="P:System.EnterpriseServices.ApplicationAccessControlAttribute.Value">
      <summary>Gets or sets a value indicating whether to enable COM+ security configuration.</summary>
      <returns>true if COM+ security configuration is enabled; otherwise, false.</returns>
    </member>
    <member name="T:System.EnterpriseServices.ApplicationActivationAttribute">
      <summary>Specifies whether components in the assembly run in the creator's process or in a system process.</summary>
    </member>
    <member name="M:System.EnterpriseServices.ApplicationActivationAttribute.#ctor(System.EnterpriseServices.ActivationOption)">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.ApplicationActivationAttribute" /> class, setting the specified <see cref="T:System.EnterpriseServices.ActivationOption" /> value.</summary>
      <param name="opt">One of the <see cref="T:System.EnterpriseServices.ActivationOption" /> values. </param>
    </member>
    <member name="P:System.EnterpriseServices.ApplicationActivationAttribute.SoapMailbox">
      <summary>This property is not supported in the current version.</summary>
      <returns>This property is not supported in the current version.</returns>
    </member>
    <member name="P:System.EnterpriseServices.ApplicationActivationAttribute.SoapVRoot">
      <summary>Gets or sets a value representing a virtual root on the Web for the COM+ application.</summary>
      <returns>The virtual root on the Web for the COM+ application.</returns>
    </member>
    <member name="P:System.EnterpriseServices.ApplicationActivationAttribute.Value">
      <summary>Gets the specified <see cref="T:System.EnterpriseServices.ActivationOption" /> value.</summary>
      <returns>One of the <see cref="T:System.EnterpriseServices.ActivationOption" /> values, either Library or Server.</returns>
    </member>
    <member name="T:System.EnterpriseServices.ApplicationIDAttribute">
      <summary>Specifies the application ID (as a GUID) for this assembly. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.EnterpriseServices.ApplicationIDAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.ApplicationIDAttribute" /> class specifying the GUID representing the application ID for the COM+ application.</summary>
      <param name="guid">The GUID associated with the COM+ application. </param>
    </member>
    <member name="P:System.EnterpriseServices.ApplicationIDAttribute.Value">
      <summary>Gets the GUID of the COM+ application.</summary>
      <returns>The GUID representing the COM+ application.</returns>
    </member>
    <member name="T:System.EnterpriseServices.ApplicationNameAttribute">
      <summary>Specifies the name of the COM+ application to be used for the install of the components in the assembly. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.EnterpriseServices.ApplicationNameAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.ApplicationNameAttribute" /> class, specifying the name of the COM+ application to be used for the install of the components.</summary>
      <param name="name">The name of the COM+ application. </param>
    </member>
    <member name="P:System.EnterpriseServices.ApplicationNameAttribute.Value">
      <summary>Gets a value indicating the name of the COM+ application that contains the components in the assembly.</summary>
      <returns>The name of the COM+ application.</returns>
    </member>
    <member name="T:System.EnterpriseServices.ApplicationQueuingAttribute">
      <summary>Enables queuing support for the marked assembly and enables the application to read method calls from Message Queuing queues. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.EnterpriseServices.ApplicationQueuingAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.ApplicationQueuingAttribute" /> class, enabling queuing support for the assembly and initializing <see cref="P:System.EnterpriseServices.ApplicationQueuingAttribute.Enabled" />, <see cref="P:System.EnterpriseServices.ApplicationQueuingAttribute.QueueListenerEnabled" />, and <see cref="P:System.EnterpriseServices.ApplicationQueuingAttribute.MaxListenerThreads" />.</summary>
    </member>
    <member name="P:System.EnterpriseServices.ApplicationQueuingAttribute.Enabled">
      <summary>Gets or sets a value indicating whether queuing support is enabled.</summary>
      <returns>true if queuing support is enabled; otherwise, false. The default value set by the constructor is true.</returns>
    </member>
    <member name="P:System.EnterpriseServices.ApplicationQueuingAttribute.MaxListenerThreads">
      <summary>Gets or sets the number of threads used to extract messages from the queue and activate the corresponding component.</summary>
      <returns>The maximum number of threads to use for processing messages arriving in the queue. The default is zero.</returns>
    </member>
    <member name="P:System.EnterpriseServices.ApplicationQueuingAttribute.QueueListenerEnabled">
      <summary>Gets or sets a value indicating whether the application will accept queued component calls from clients.</summary>
      <returns>true if the application accepts queued component calls; otherwise, false. The default is false.</returns>
    </member>
    <member name="T:System.EnterpriseServices.AuthenticationOption">
      <summary>Specifies the remote procedure call (RPC) authentication mechanism. Applicable only when the <see cref="T:System.EnterpriseServices.ActivationOption" /> is set to Server.</summary>
    </member>
    <member name="F:System.EnterpriseServices.AuthenticationOption.Default">
      <summary>Uses the default authentication level for the specified authentication service. In COM+, this setting is provided by the DefaultAuthenticationLevel property in the LocalComputer collection.</summary>
    </member>
    <member name="F:System.EnterpriseServices.AuthenticationOption.None">
      <summary>Authentication does not occur.</summary>
    </member>
    <member name="F:System.EnterpriseServices.AuthenticationOption.Connect">
      <summary>Authenticates credentials only when the connection is made.</summary>
    </member>
    <member name="F:System.EnterpriseServices.AuthenticationOption.Call">
      <summary>Authenticates credentials at the beginning of every call.</summary>
    </member>
    <member name="F:System.EnterpriseServices.AuthenticationOption.Packet">
      <summary>Authenticates credentials and verifies that all call data is received.</summary>
    </member>
    <member name="F:System.EnterpriseServices.AuthenticationOption.Integrity">
      <summary>Authenticates credentials and verifies that no call data has been modified in transit.</summary>
    </member>
    <member name="F:System.EnterpriseServices.AuthenticationOption.Privacy">
      <summary>Authenticates credentials and encrypts the packet, including the data and the sender's identity and signature.</summary>
    </member>
    <member name="T:System.EnterpriseServices.AutoCompleteAttribute">
      <summary>Marks the attributed method as an AutoComplete object. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.EnterpriseServices.AutoCompleteAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.AutoCompleteAttribute" /> class, specifying that the application should automatically call <see cref="M:System.EnterpriseServices.ContextUtil.SetComplete" /> if the transaction completes successfully.</summary>
    </member>
    <member name="M:System.EnterpriseServices.AutoCompleteAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.AutoCompleteAttribute" /> class, specifying whether COM+ AutoComplete is enabled.</summary>
      <param name="val">true to enable AutoComplete in the COM+ object; otherwise, false. </param>
    </member>
    <member name="P:System.EnterpriseServices.AutoCompleteAttribute.Value">
      <summary>Gets a value indicating the setting of the AutoComplete option in COM+.</summary>
      <returns>true if AutoComplete is enabled in COM+; otherwise, false. The default is true.</returns>
    </member>
    <member name="T:System.EnterpriseServices.BindingOption">
      <summary>Indicates whether all work submitted by <see cref="T:System.EnterpriseServices.Activity" /> should be bound to only one single-threaded apartment (STA). This enumeration has no impact on the multithreaded apartment (MTA).</summary>
    </member>
    <member name="F:System.EnterpriseServices.BindingOption.NoBinding">
      <summary>The work submitted by the activity is not bound to a single STA.</summary>
    </member>
    <member name="F:System.EnterpriseServices.BindingOption.BindingToPoolThread">
      <summary>The work submitted by the activity is bound to a single STA.</summary>
    </member>
    <member name="T:System.EnterpriseServices.BOID">
      <summary>Represents the unit of work associated with a transaction. This structure is used in <see cref="T:System.EnterpriseServices.XACTTRANSINFO" />.</summary>
    </member>
    <member name="F:System.EnterpriseServices.BOID.rgb">
      <summary>Represents an array that contains the data.</summary>
    </member>
    <member name="T:System.EnterpriseServices.BYOT">
      <summary>Wraps the COM+ ByotServerEx class and the COM+ DTC interfaces ICreateWithTransactionEx and ICreateWithTipTransactionEx. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.EnterpriseServices.BYOT.CreateWithTipTransaction(System.String,System.Type)">
      <summary>Creates an object that is enlisted within a manual transaction using the Transaction Internet Protocol (TIP).</summary>
      <returns>The requested transaction.</returns>
      <param name="url">A TIP URL that specifies a transaction. </param>
      <param name="t">The type. </param>
    </member>
    <member name="M:System.EnterpriseServices.BYOT.CreateWithTransaction(System.Object,System.Type)">
      <summary>Creates an object that is enlisted within a manual transaction.</summary>
      <returns>The requested transaction.</returns>
      <param name="transaction">The <see cref="T:System.EnterpriseServices.ITransaction" /> or <see cref="T:System.Transactions.Transaction" /> object that specifies a transaction. </param>
      <param name="t">The specified type. </param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="T:System.EnterpriseServices.ComponentAccessControlAttribute">
      <summary>Enables security checking on calls to a component. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.EnterpriseServices.ComponentAccessControlAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.ComponentAccessControlAttribute" /> class.</summary>
    </member>
    <member name="M:System.EnterpriseServices.ComponentAccessControlAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.ComponentAccessControlAttribute" /> class and sets the <see cref="P:System.EnterpriseServices.ComponentAccessControlAttribute.Value" /> property to indicate whether to enable COM+ security configuration.</summary>
      <param name="val">true to enable security checking on calls to a component; otherwise, false. </param>
    </member>
    <member name="P:System.EnterpriseServices.ComponentAccessControlAttribute.Value">
      <summary>Gets a value indicating whether to enable security checking on calls to a component.</summary>
      <returns>true if security checking is to be enabled; otherwise, false.</returns>
    </member>
    <member name="T:System.EnterpriseServices.COMTIIntrinsicsAttribute">
      <summary>Enables you to pass context properties from the COM Transaction Integrator (COMTI) into the COM+ context.</summary>
    </member>
    <member name="M:System.EnterpriseServices.COMTIIntrinsicsAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.COMTIIntrinsicsAttribute" /> class, setting the <see cref="P:System.EnterpriseServices.COMTIIntrinsicsAttribute.Value" /> property to true.</summary>
    </member>
    <member name="M:System.EnterpriseServices.COMTIIntrinsicsAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.COMTIIntrinsicsAttribute" /> class, enabling the setting of the <see cref="P:System.EnterpriseServices.COMTIIntrinsicsAttribute.Value" /> property.</summary>
      <param name="val">true if the COMTI context properties are passed into the COM+ context; otherwise, false. </param>
    </member>
    <member name="P:System.EnterpriseServices.COMTIIntrinsicsAttribute.Value">
      <summary>Gets a value indicating whether the COM Transaction Integrator (COMTI) context properties are passed into the COM+ context.</summary>
      <returns>true if the COMTI context properties are passed into the COM+ context; otherwise, false. The default is true.</returns>
    </member>
    <member name="T:System.EnterpriseServices.ConstructionEnabledAttribute">
      <summary>Enables COM+ object construction support. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.EnterpriseServices.ConstructionEnabledAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.ConstructionEnabledAttribute" /> class and initializes the default settings for <see cref="P:System.EnterpriseServices.ConstructionEnabledAttribute.Enabled" /> and <see cref="P:System.EnterpriseServices.ConstructionEnabledAttribute.Default" />.</summary>
    </member>
    <member name="M:System.EnterpriseServices.ConstructionEnabledAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.ConstructionEnabledAttribute" /> class, setting <see cref="P:System.EnterpriseServices.ConstructionEnabledAttribute.Enabled" /> to the specified value.</summary>
      <param name="val">true to enable COM+ object construction support; otherwise, false. </param>
    </member>
    <member name="P:System.EnterpriseServices.ConstructionEnabledAttribute.Default">
      <summary>Gets or sets a default value for the constructor string.</summary>
      <returns>The value to be used for the default constructor string. The default is an empty string ("").</returns>
    </member>
    <member name="P:System.EnterpriseServices.ConstructionEnabledAttribute.Enabled">
      <summary>Gets or sets a value indicating whether COM+ object construction support is enabled.</summary>
      <returns>true if COM+ object construction support is enabled; otherwise, false. The default is true.</returns>
    </member>
    <member name="T:System.EnterpriseServices.ContextUtil">
      <summary>Obtains information about the COM+ object context. This class cannot be inherited.</summary>
    </member>
    <member name="P:System.EnterpriseServices.ContextUtil.ActivityId">
      <summary>Gets a GUID representing the activity containing the component.</summary>
      <returns>The GUID for an activity if the current context is part of an activity; otherwise, GUID_NULL.</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException">There is no COM+ context available. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The platform is not Windows 2000 or later. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.EnterpriseServices.ContextUtil.ApplicationId">
      <summary>Gets a GUID for the current application.</summary>
      <returns>The GUID for the current application.</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException">There is no COM+ context available. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The platform is not Windows XP or later. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.EnterpriseServices.ContextUtil.ApplicationInstanceId">
      <summary>Gets a GUID for the current application instance.</summary>
      <returns>The GUID for the current application instance.</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException">There is no COM+ context available. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The platform is not Windows XP or later. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.EnterpriseServices.ContextUtil.ContextId">
      <summary>Gets a GUID for the current context.</summary>
      <returns>The GUID for the current context.</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException">There is no COM+ context available. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The platform is not Windows 2000 or later. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.EnterpriseServices.ContextUtil.DeactivateOnReturn">
      <summary>Gets or sets the done bit in the COM+ context.</summary>
      <returns>true if the object is to be deactivated when the method returns; otherwise, false. The default is false.</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException">There is no COM+ context available. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The platform is not Windows 2000 or later. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.ContextUtil.DisableCommit">
      <summary>Sets both the consistent bit and the done bit to false in the COM+ context.</summary>
      <exception cref="T:System.Runtime.InteropServices.COMException">No COM+ context is available.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.ContextUtil.EnableCommit">
      <summary>Sets the consistent bit to true and the done bit to false in the COM+ context.</summary>
      <exception cref="T:System.Runtime.InteropServices.COMException">No COM+ context is available. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.ContextUtil.GetNamedProperty(System.String)">
      <summary>Returns a named property from the COM+ context.</summary>
      <returns>The named property for the context.</returns>
      <param name="name">The name of the requested property. </param>
      <exception cref="T:System.Runtime.InteropServices.COMException">There is no COM+ context available. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The platform is not Windows 2000 or later. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.ContextUtil.IsCallerInRole(System.String)">
      <summary>Determines whether the caller is in the specified role.</summary>
      <returns>true if the caller is in the specified role; otherwise, false.</returns>
      <param name="role">The name of the role to check. </param>
      <exception cref="T:System.Runtime.InteropServices.COMException">There is no COM+ context available. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.ContextUtil.IsDefaultContext">
      <summary>Determines whether the serviced component is activated in the default context. Serviced components that do not have COM+ catalog information are activated in the default context.</summary>
      <returns>true if the serviced component is activated in the default context; otherwise, false.</returns>
    </member>
    <member name="P:System.EnterpriseServices.ContextUtil.IsInTransaction">
      <summary>Gets a value that indicates whether the current context is transactional.</summary>
      <returns>true if the current context is transactional; otherwise, false.</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException">There is no COM+ context available. </exception>
    </member>
    <member name="P:System.EnterpriseServices.ContextUtil.IsSecurityEnabled">
      <summary>Gets a value that indicates whether role-based security is active in the current context.</summary>
      <returns>true if the current context has security enabled; otherwise, false.</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException">There is no COM+ context available. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.EnterpriseServices.ContextUtil.MyTransactionVote">
      <summary>Gets or sets the consistent bit in the COM+ context.</summary>
      <returns>One of the <see cref="T:System.EnterpriseServices.TransactionVote" /> values, either Commit or Abort.</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException">There is no COM+ context available. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The platform is not Windows 2000 or later.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.EnterpriseServices.ContextUtil.PartitionId">
      <summary>Gets a GUID for the current partition.</summary>
      <returns>The GUID for the current partition.</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException">There is no COM+ context available. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The platform is not Windows XP or later. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.ContextUtil.SetAbort">
      <summary>Sets the consistent bit to false and the done bit to true in the COM+ context.</summary>
      <exception cref="T:System.Runtime.InteropServices.COMException">There is no COM+ context available. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.ContextUtil.SetComplete">
      <summary>Sets the consistent bit and the done bit to true in the COM+ context.</summary>
      <exception cref="T:System.Runtime.InteropServices.COMException">There is no COM+ context available. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.ContextUtil.SetNamedProperty(System.String,System.Object)">
      <summary>Sets the named property for the COM+ context.</summary>
      <param name="name">The name of the property to set. </param>
      <param name="value">Object that represents the property value to set.</param>
      <exception cref="T:System.Runtime.InteropServices.COMException">There is no COM+ context available. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The platform is not Windows 2000 or later. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.EnterpriseServices.ContextUtil.SystemTransaction">
      <summary>Gets the current transaction context.</summary>
      <returns>A <see cref="T:System.Transactions.Transaction" /> that represents the current transaction context.</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException">There is no COM+ context available. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The platform is not Windows 2000 or later. </exception>
    </member>
    <member name="P:System.EnterpriseServices.ContextUtil.Transaction">
      <summary>Gets an object describing the current COM+ DTC transaction.</summary>
      <returns>An object that represents the current transaction.</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException">There is no COM+ context available. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The platform is not Windows 2000 or later. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.EnterpriseServices.ContextUtil.TransactionId">
      <summary>Gets the GUID of the current COM+ DTC transaction.</summary>
      <returns>A GUID representing the current COM+ DTC transaction, if one exists.</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException">There is no COM+ context available. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The platform is not Windows 2000 or later. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.EnterpriseServices.DescriptionAttribute">
      <summary>Sets the description on an assembly (application), component, method, or interface. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.EnterpriseServices.DescriptionAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.DescriptionAttribute" /> class.</summary>
      <param name="desc">The description of the assembly (application), component, method, or interface. </param>
    </member>
    <member name="T:System.EnterpriseServices.EventClassAttribute">
      <summary>Marks the attributed class as an event class. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.EnterpriseServices.EventClassAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.EventClassAttribute" /> class.</summary>
    </member>
    <member name="P:System.EnterpriseServices.EventClassAttribute.AllowInprocSubscribers">
      <summary>Gets or sets a value that indicates whether subscribers can be activated in the publisher's process.</summary>
      <returns>true if subscribers can be activated in the publisher's process; otherwise, false.</returns>
    </member>
    <member name="P:System.EnterpriseServices.EventClassAttribute.FireInParallel">
      <summary>Gets or sets a value that indicates whether events are to be delivered to subscribers in parallel.</summary>
      <returns>true if events are to be delivered to subscribers in parallel; otherwise, false.</returns>
    </member>
    <member name="P:System.EnterpriseServices.EventClassAttribute.PublisherFilter">
      <summary>Gets or sets a publisher filter for an event method.</summary>
      <returns>The publisher filter.</returns>
    </member>
    <member name="T:System.EnterpriseServices.EventTrackingEnabledAttribute">
      <summary>Enables event tracking for a component. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.EnterpriseServices.EventTrackingEnabledAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.EventTrackingEnabledAttribute" /> class, enabling event tracking.</summary>
    </member>
    <member name="M:System.EnterpriseServices.EventTrackingEnabledAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.EventTrackingEnabledAttribute" /> class, optionally disabling event tracking.</summary>
      <param name="val">true to enable event tracking; otherwise, false. </param>
    </member>
    <member name="P:System.EnterpriseServices.EventTrackingEnabledAttribute.Value">
      <summary>Gets the value of the <see cref="P:System.EnterpriseServices.EventTrackingEnabledAttribute.Value" /> property, which indicates whether tracking is enabled.</summary>
      <returns>true if tracking is enabled; otherwise, false. The default is true.</returns>
    </member>
    <member name="T:System.EnterpriseServices.ExceptionClassAttribute">
      <summary>Sets the queuing exception class for the queued class. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.EnterpriseServices.ExceptionClassAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.ExceptionClassAttribute" /> class.</summary>
      <param name="name">The name of the exception class for the player to activate and play back before the message is routed to the dead letter queue. </param>
    </member>
    <member name="P:System.EnterpriseServices.ExceptionClassAttribute.Value">
      <summary>Gets the name of the exception class for the player to activate and play back before the message is routed to the dead letter queue.</summary>
      <returns>The name of the exception class for the player to activate and play back before the message is routed to the dead letter queue.</returns>
    </member>
    <member name="T:System.EnterpriseServices.IAsyncErrorNotify">
      <summary>Implements error trapping on the asynchronous batch work that is submitted by the <see cref="T:System.EnterpriseServices.Activity" /> object.</summary>
    </member>
    <member name="M:System.EnterpriseServices.IAsyncErrorNotify.OnError(System.Int32)">
      <summary>Handles errors for asynchronous batch work.</summary>
      <param name="hresult">The HRESULT of the error that occurred while the batch work was running asynchronously. </param>
    </member>
    <member name="T:System.EnterpriseServices.IISIntrinsicsAttribute">
      <summary>Enables access to ASP intrinsic values from <see cref="M:System.EnterpriseServices.ContextUtil.GetNamedProperty(System.String)" />. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.EnterpriseServices.IISIntrinsicsAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.IISIntrinsicsAttribute" /> class, enabling access to the ASP intrinsic values.</summary>
    </member>
    <member name="M:System.EnterpriseServices.IISIntrinsicsAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.IISIntrinsicsAttribute" /> class, optionally disabling access to the ASP intrinsic values.</summary>
      <param name="val">true to enable access to the ASP intrinsic values; otherwise, false. </param>
    </member>
    <member name="P:System.EnterpriseServices.IISIntrinsicsAttribute.Value">
      <summary>Gets a value that indicates whether access to the ASP intrinsic values is enabled.</summary>
      <returns>true if access is enabled; otherwise, false. The default is true.</returns>
    </member>
    <member name="T:System.EnterpriseServices.ImpersonationLevelOption">
      <summary>Specifies the level of impersonation allowed when calling targets of a server application.</summary>
    </member>
    <member name="F:System.EnterpriseServices.ImpersonationLevelOption.Default">
      <summary>Uses the default impersonation level for the specified authentication service. In COM+, this setting is provided by the DefaultImpersonationLevel property in the LocalComputer collection.</summary>
    </member>
    <member name="F:System.EnterpriseServices.ImpersonationLevelOption.Anonymous">
      <summary>The client is anonymous to the server. The server process can impersonate the client, but the impersonation token does not contain any information about the client.</summary>
    </member>
    <member name="F:System.EnterpriseServices.ImpersonationLevelOption.Identify">
      <summary>The system default level. The server can obtain the client's identity, and the server can impersonate the client to do ACL checks.</summary>
    </member>
    <member name="F:System.EnterpriseServices.ImpersonationLevelOption.Impersonate">
      <summary>The server can impersonate the client's security context while acting on behalf of the client. The server can access local resources as the client.</summary>
    </member>
    <member name="F:System.EnterpriseServices.ImpersonationLevelOption.Delegate">
      <summary>The most powerful impersonation level. When this level is selected, the server (whether local or remote) can impersonate the client's security context while acting on behalf of the client </summary>
    </member>
    <member name="T:System.EnterpriseServices.InheritanceOption">
      <summary>Indicates whether to create a new context based on the current context or on the information in <see cref="T:System.EnterpriseServices.ServiceConfig" />.</summary>
    </member>
    <member name="F:System.EnterpriseServices.InheritanceOption.Inherit">
      <summary>The new context is created from the existing context. <see cref="F:System.EnterpriseServices.InheritanceOption.Inherit" /> is the default value for <see cref="P:System.EnterpriseServices.ServiceConfig.Inheritance" />.</summary>
    </member>
    <member name="F:System.EnterpriseServices.InheritanceOption.Ignore">
      <summary>The new context is created from the default context.</summary>
    </member>
    <member name="T:System.EnterpriseServices.InstallationFlags">
      <summary>Flags used with the <see cref="T:System.EnterpriseServices.RegistrationHelper" /> class.</summary>
    </member>
    <member name="F:System.EnterpriseServices.InstallationFlags.Default">
      <summary>Do the default installation, which configures, installs, and registers, and assumes that the application already exists.</summary>
    </member>
    <member name="F:System.EnterpriseServices.InstallationFlags.ExpectExistingTypeLib">
      <summary>Do not export the type library; one can be found either by the generated or supplied type library name.</summary>
    </member>
    <member name="F:System.EnterpriseServices.InstallationFlags.CreateTargetApplication">
      <summary>Creates the target application. An error occurs if the target already exists.</summary>
    </member>
    <member name="F:System.EnterpriseServices.InstallationFlags.FindOrCreateTargetApplication">
      <summary>Creates the application if it does not exist; otherwise use the existing application.</summary>
    </member>
    <member name="F:System.EnterpriseServices.InstallationFlags.ReconfigureExistingApplication">
      <summary>If using an existing application, ensures that the properties on this application match those in the assembly.</summary>
    </member>
    <member name="F:System.EnterpriseServices.InstallationFlags.ConfigureComponentsOnly">
      <summary>Configures components only, do not configure methods or interfaces.</summary>
    </member>
    <member name="F:System.EnterpriseServices.InstallationFlags.ReportWarningsToConsole">
      <summary>When alert text is encountered, writes it to the Console.</summary>
    </member>
    <member name="F:System.EnterpriseServices.InstallationFlags.Register">
      <summary>Should not be used.</summary>
    </member>
    <member name="F:System.EnterpriseServices.InstallationFlags.Install">
      <summary>Should not be used.</summary>
    </member>
    <member name="F:System.EnterpriseServices.InstallationFlags.Configure">
      <summary>Should not be used.</summary>
    </member>
    <member name="T:System.EnterpriseServices.InterfaceQueuingAttribute">
      <summary>Enables queuing support for the marked interface. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.EnterpriseServices.InterfaceQueuingAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.InterfaceQueuingAttribute" /> class setting the <see cref="P:System.EnterpriseServices.InterfaceQueuingAttribute.Enabled" /> and <see cref="P:System.EnterpriseServices.InterfaceQueuingAttribute.Interface" /> properties to their default values.</summary>
    </member>
    <member name="M:System.EnterpriseServices.InterfaceQueuingAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.InterfaceQueuingAttribute" /> class, optionally disabling queuing support.</summary>
      <param name="enabled">true to enable queuing support; otherwise, false. </param>
    </member>
    <member name="P:System.EnterpriseServices.InterfaceQueuingAttribute.Enabled">
      <summary>Gets or sets a value indicating whether queuing support is enabled.</summary>
      <returns>true if queuing support is enabled; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.EnterpriseServices.InterfaceQueuingAttribute.Interface">
      <summary>Gets or sets the name of the interface on which queuing is enabled.</summary>
      <returns>The name of the interface on which queuing is enabled.</returns>
    </member>
    <member name="T:System.EnterpriseServices.IPlaybackControl">
      <summary>Functions in Queued Components in the abnormal handling of server-side playback errors and client-side failures of the Message Queuing delivery mechanism.</summary>
    </member>
    <member name="M:System.EnterpriseServices.IPlaybackControl.FinalClientRetry">
      <summary>Informs the client-side exception-handling component that all Message Queuing attempts to deliver the message to the server were rejected, and the message ended up on the client-side Xact Dead Letter queue.</summary>
    </member>
    <member name="M:System.EnterpriseServices.IPlaybackControl.FinalServerRetry">
      <summary>Informs the server-side exception class implementation that all attempts to play back the deferred activation to the server have failed, and the message is about to be moved to its final resting queue.</summary>
    </member>
    <member name="T:System.EnterpriseServices.IProcessInitControl">
      <summary>Supports setting the time-out for the <see cref="M:System.EnterpriseServices.IProcessInitializer.Startup(System.Object)" /> method.</summary>
    </member>
    <member name="M:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout(System.Int32)">
      <summary>Sets the number of seconds remaining before the <see cref="M:System.EnterpriseServices.IProcessInitializer.Startup(System.Object)" /> method times out.</summary>
      <param name="dwSecondsRemaining">The number of seconds that remain before the time taken to execute the start up method times out. </param>
    </member>
    <member name="T:System.EnterpriseServices.IProcessInitializer">
      <summary>Supports methods that can be called when a COM component starts up or shuts down.</summary>
    </member>
    <member name="M:System.EnterpriseServices.IProcessInitializer.Shutdown">
      <summary>Performs shutdown actions. Called when Dllhost.exe is shut down.</summary>
    </member>
    <member name="M:System.EnterpriseServices.IProcessInitializer.Startup(System.Object)">
      <summary>Performs initialization at startup. Called when Dllhost.exe is started.</summary>
      <param name="punkProcessControl">In Microsoft Windows XP, a pointer to the IUnknown interface of the COM component starting up. In Microsoft Windows 2000, this argument is always null. </param>
    </member>
    <member name="T:System.EnterpriseServices.IRegistrationHelper">
      <summary>Installs and configures assemblies in the COM+ catalog.</summary>
    </member>
    <member name="M:System.EnterpriseServices.IRegistrationHelper.InstallAssembly(System.String,System.String@,System.String@,System.EnterpriseServices.InstallationFlags)">
      <summary>Installs the assembly into the COM+ catalog.</summary>
      <param name="assembly">The assembly name as a file or the strong name of an assembly in the global assembly cache (GAC). </param>
      <param name="application">The application parameter can be null. If it is, the name of the application is automatically generated based on the name of the assembly or the ApplicationName attribute. If the application contains an ApplicationID attribute, the attribute takes precedence. </param>
      <param name="tlb">The name of the output type library (TLB) file, or a string containing null if the registration helper is expected to generate the name. On call completion, the actual name used is placed in the parameter. </param>
      <param name="installFlags">The installation options specified in the enumeration. </param>
    </member>
    <member name="M:System.EnterpriseServices.IRegistrationHelper.UninstallAssembly(System.String,System.String)">
      <summary>Uninstalls the assembly from the COM+ catalog.</summary>
      <param name="assembly">The assembly name as a file or the strong name of an assembly in the global assembly cache (GAC). </param>
      <param name="application">The name of the COM+ application. </param>
    </member>
    <member name="T:System.EnterpriseServices.IRemoteDispatch">
      <summary>Implemented by the <see cref="T:System.EnterpriseServices.ServicedComponent" /> class to determine if the <see cref="T:System.EnterpriseServices.AutoCompleteAttribute" /> class attribute is set to true or false for a remote method invocation.</summary>
    </member>
    <member name="M:System.EnterpriseServices.IRemoteDispatch.RemoteDispatchAutoDone(System.String)">
      <summary>Ensures that, in the COM+ context, the <see cref="T:System.EnterpriseServices.ServicedComponent" /> class object's done bit is set to true after a remote method invocation.</summary>
      <returns>A string converted from a response object that implements the <see cref="T:System.Runtime.Remoting.Messaging.IMethodReturnMessage" /> interface.</returns>
      <param name="s">A string to be converted into a request object that implements the <see cref="T:System.Runtime.Remoting.Messaging.IMessage" /> interface.</param>
    </member>
    <member name="M:System.EnterpriseServices.IRemoteDispatch.RemoteDispatchNotAutoDone(System.String)">
      <summary>Does not ensure that, in the COM+ context, the <see cref="T:System.EnterpriseServices.ServicedComponent" /> class object's done bit is set to true after a remote method invocation.</summary>
      <returns>A string converted from a response object implementing the <see cref="T:System.Runtime.Remoting.Messaging.IMethodReturnMessage" /> interface.</returns>
      <param name="s">A string to be converted into a request object implementing the <see cref="T:System.Runtime.Remoting.Messaging.IMessage" /> interface.</param>
    </member>
    <member name="T:System.EnterpriseServices.IServiceCall">
      <summary>Implements the batch work that is submitted through the activity created by <see cref="T:System.EnterpriseServices.Activity" />.</summary>
    </member>
    <member name="M:System.EnterpriseServices.IServiceCall.OnCall">
      <summary>Starts the execution of the batch work implemented in this method.</summary>
    </member>
    <member name="T:System.EnterpriseServices.IServicedComponentInfo">
      <summary>Implemented by the <see cref="T:System.EnterpriseServices.ServicedComponent" /> class to obtain information about the component via the <see cref="M:System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo(System.Int32@,System.String[]@)" /> method.</summary>
    </member>
    <member name="M:System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo(System.Int32@,System.String[]@)">
      <summary>Obtains certain information about the <see cref="T:System.EnterpriseServices.ServicedComponent" /> class instance.</summary>
      <param name="infoMask">A bitmask where 0x00000001 is a key for the serviced component's process ID, 0x00000002 is a key for the application domain ID, and 0x00000004 is a key for the serviced component's remote URI.</param>
      <param name="infoArray">A string array that may contain any or all of the following, in order: the serviced component's process ID, the application domain ID, and the serviced component's remote URI.</param>
    </member>
    <member name="T:System.EnterpriseServices.ITransaction">
      <summary>Corresponds to the Distributed Transaction Coordinator (DTC) ITransaction interface and is supported by objects obtained through <see cref="P:System.EnterpriseServices.ContextUtil.Transaction" />.</summary>
    </member>
    <member name="M:System.EnterpriseServices.ITransaction.Abort(System.EnterpriseServices.BOID@,System.Int32,System.Int32)">
      <summary>Aborts the transaction.</summary>
      <param name="pboidReason">An optional <see cref="T:System.EnterpriseServices.BOID" /> that indicates why the transaction is being aborted. This parameter can be null, indicating that no reason for the abort is provided. </param>
      <param name="fRetaining">Must be false. </param>
      <param name="fAsync">When <paramref name="fAsync" /> is true, an asynchronous abort is performed and the caller must use ITransactionOutcomeEvents to learn the outcome of the transaction. </param>
    </member>
    <member name="M:System.EnterpriseServices.ITransaction.Commit(System.Int32,System.Int32,System.Int32)">
      <summary>Commits the transaction.</summary>
      <param name="fRetaining">Must be false. </param>
      <param name="grfTC">A value taken from the OLE DB enumeration XACTTC. </param>
      <param name="grfRM">Must be zero. </param>
    </member>
    <member name="M:System.EnterpriseServices.ITransaction.GetTransactionInfo(System.EnterpriseServices.XACTTRANSINFO@)">
      <summary>Returns information about a transaction object.</summary>
      <param name="pinfo">Pointer to the caller-allocated <see cref="T:System.EnterpriseServices.XACTTRANSINFO" /> structure that will receive information about the transaction. Must not be null. </param>
    </member>
    <member name="T:System.EnterpriseServices.JustInTimeActivationAttribute">
      <summary>Turns just-in-time (JIT) activation on or off. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.EnterpriseServices.JustInTimeActivationAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.JustInTimeActivationAttribute" /> class. The default constructor enables just-in-time (JIT) activation.</summary>
    </member>
    <member name="M:System.EnterpriseServices.JustInTimeActivationAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.JustInTimeActivationAttribute" /> class, optionally allowing the disabling of just-in-time (JIT) activation by passing false as the parameter.</summary>
      <param name="val">true to enable JIT activation; otherwise, false. </param>
    </member>
    <member name="P:System.EnterpriseServices.JustInTimeActivationAttribute.Value">
      <summary>Gets the value of the <see cref="T:System.EnterpriseServices.JustInTimeActivationAttribute" /> setting.</summary>
      <returns>true if JIT activation is enabled; otherwise, false. The default is true.</returns>
    </member>
    <member name="T:System.EnterpriseServices.LoadBalancingSupportedAttribute">
      <summary>Determines whether the component participates in load balancing, if the component load balancing service is installed and enabled on the server.</summary>
    </member>
    <member name="M:System.EnterpriseServices.LoadBalancingSupportedAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.LoadBalancingSupportedAttribute" /> class, specifying load balancing support.</summary>
    </member>
    <member name="M:System.EnterpriseServices.LoadBalancingSupportedAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.LoadBalancingSupportedAttribute" /> class, optionally disabling load balancing support.</summary>
      <param name="val">true to enable load balancing support; otherwise, false. </param>
    </member>
    <member name="P:System.EnterpriseServices.LoadBalancingSupportedAttribute.Value">
      <summary>Gets a value that indicates whether load balancing support is enabled.</summary>
      <returns>true if load balancing support is enabled; otherwise, false. The default is true.</returns>
    </member>
    <member name="T:System.EnterpriseServices.MustRunInClientContextAttribute">
      <summary>Forces the attributed object to be created in the context of the creator, if possible. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.EnterpriseServices.MustRunInClientContextAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.MustRunInClientContextAttribute" /> class, requiring creation of the object in the context of the creator.</summary>
    </member>
    <member name="M:System.EnterpriseServices.MustRunInClientContextAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.MustRunInClientContextAttribute" /> class, optionally not creating the object in the context of the creator.</summary>
      <param name="val">true to create the object in the context of the creator; otherwise, false. </param>
    </member>
    <member name="P:System.EnterpriseServices.MustRunInClientContextAttribute.Value">
      <summary>Gets a value that indicates whether the attributed object is to be created in the context of the creator.</summary>
      <returns>true if the object is to be created in the context of the creator; otherwise, false. The default is true.</returns>
    </member>
    <member name="T:System.EnterpriseServices.ObjectPoolingAttribute">
      <summary>Enables and configures object pooling for a component. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.EnterpriseServices.ObjectPoolingAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.ObjectPoolingAttribute" /> class and sets the <see cref="P:System.EnterpriseServices.ObjectPoolingAttribute.Enabled" />, <see cref="P:System.EnterpriseServices.ObjectPoolingAttribute.MaxPoolSize" />, <see cref="P:System.EnterpriseServices.ObjectPoolingAttribute.MinPoolSize" />, and <see cref="P:System.EnterpriseServices.ObjectPoolingAttribute.CreationTimeout" /> properties to their default values.</summary>
    </member>
    <member name="M:System.EnterpriseServices.ObjectPoolingAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.ObjectPoolingAttribute" /> class and sets the <see cref="P:System.EnterpriseServices.ObjectPoolingAttribute.Enabled" /> property.</summary>
      <param name="enable">true to enable object pooling; otherwise, false. </param>
    </member>
    <member name="M:System.EnterpriseServices.ObjectPoolingAttribute.#ctor(System.Boolean,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.ObjectPoolingAttribute" /> class and sets the <see cref="P:System.EnterpriseServices.ObjectPoolingAttribute.Enabled" />, <see cref="P:System.EnterpriseServices.ObjectPoolingAttribute.MaxPoolSize" />, and <see cref="P:System.EnterpriseServices.ObjectPoolingAttribute.MinPoolSize" /> properties.</summary>
      <param name="enable">true to enable object pooling; otherwise, false. </param>
      <param name="minPoolSize">The minimum pool size.</param>
      <param name="maxPoolSize">The maximum pool size.</param>
    </member>
    <member name="M:System.EnterpriseServices.ObjectPoolingAttribute.#ctor(System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.ObjectPoolingAttribute" /> class and sets the <see cref="P:System.EnterpriseServices.ObjectPoolingAttribute.MaxPoolSize" /> and <see cref="P:System.EnterpriseServices.ObjectPoolingAttribute.MinPoolSize" /> properties.</summary>
      <param name="minPoolSize">The minimum pool size. </param>
      <param name="maxPoolSize">The maximum pool size. </param>
    </member>
    <member name="M:System.EnterpriseServices.ObjectPoolingAttribute.AfterSaveChanges(System.Collections.Hashtable)">
      <summary>Called internally by the .NET Framework infrastructure while installing and configuring assemblies in the COM+ catalog.</summary>
      <returns>true if the method has made changes.</returns>
      <param name="info">A hash table that contains internal objects referenced by internal keys.</param>
    </member>
    <member name="M:System.EnterpriseServices.ObjectPoolingAttribute.Apply(System.Collections.Hashtable)">
      <summary>Called internally by the .NET Framework infrastructure while applying the <see cref="T:System.EnterpriseServices.ObjectPoolingAttribute" /> class attribute to a serviced component.</summary>
      <returns>true if the method has made changes.</returns>
      <param name="info">A hash table that contains an internal object to which object pooling properties are applied, referenced by an internal key.</param>
    </member>
    <member name="P:System.EnterpriseServices.ObjectPoolingAttribute.CreationTimeout">
      <summary>Gets or sets the length of time to wait for an object to become available in the pool before throwing an exception. This value is in milliseconds.</summary>
      <returns>The time-out value in milliseconds.</returns>
    </member>
    <member name="P:System.EnterpriseServices.ObjectPoolingAttribute.Enabled">
      <summary>Gets or sets a value that indicates whether object pooling is enabled.</summary>
      <returns>true if object pooling is enabled; otherwise, false. The default is true.</returns>
    </member>
    <member name="M:System.EnterpriseServices.ObjectPoolingAttribute.IsValidTarget(System.String)">
      <summary>Called internally by the .NET Framework infrastructure while installing and configuring assemblies in the COM+ catalog.</summary>
      <returns>true if the attribute is applied to a serviced component class.</returns>
      <param name="s">A string generated by the .NET Framework infrastructure that is checked for a special value that indicates a serviced component.</param>
    </member>
    <member name="P:System.EnterpriseServices.ObjectPoolingAttribute.MaxPoolSize">
      <summary>Gets or sets the value for the maximum size of the pool.</summary>
      <returns>The maximum number of objects in the pool.</returns>
    </member>
    <member name="P:System.EnterpriseServices.ObjectPoolingAttribute.MinPoolSize">
      <summary>Gets or sets the value for the minimum size of the pool.</summary>
      <returns>The minimum number of objects in the pool.</returns>
    </member>
    <member name="T:System.EnterpriseServices.PartitionOption">
      <summary>Indicates the context in which to run the COM+ partition.</summary>
    </member>
    <member name="F:System.EnterpriseServices.PartitionOption.Ignore">
      <summary>The enclosed context runs in the Global Partition. <see cref="F:System.EnterpriseServices.PartitionOption.Ignore" /> is the default setting for <see cref="P:System.EnterpriseServices.ServiceConfig.PartitionOption" /> when <see cref="P:System.EnterpriseServices.ServiceConfig.Inheritance" /> is set to <see cref="F:System.EnterpriseServices.InheritanceOption.Ignore" />.</summary>
    </member>
    <member name="F:System.EnterpriseServices.PartitionOption.Inherit">
      <summary>The enclosed context runs in the current containing COM+ partition. This is the default setting for <see cref="P:System.EnterpriseServices.ServiceConfig.PartitionOption" /> when <see cref="P:System.EnterpriseServices.ServiceConfig.Inheritance" /> is set to <see cref="F:System.EnterpriseServices.InheritanceOption.Inherit" />.</summary>
    </member>
    <member name="F:System.EnterpriseServices.PartitionOption.New">
      <summary>The enclosed context runs in a COM+ partition that is different from the current containing partition.</summary>
    </member>
    <member name="T:System.EnterpriseServices.PrivateComponentAttribute">
      <summary>Identifies a component as a private component that is only seen and activated by components in the same application. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.EnterpriseServices.PrivateComponentAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.PrivateComponentAttribute" /> class.</summary>
    </member>
    <member name="T:System.EnterpriseServices.PropertyLockMode">
      <summary>Specifies the mode for accessing shared properties in the shared property group manager.</summary>
    </member>
    <member name="F:System.EnterpriseServices.PropertyLockMode.SetGet">
      <summary>Locks a property during a get or set, assuring that every get or set operation on a shared property is atomic.</summary>
    </member>
    <member name="F:System.EnterpriseServices.PropertyLockMode.Method">
      <summary>Locks all the properties in the shared property group for exclusive use by the caller, as long as the caller's current method is executing.</summary>
    </member>
    <member name="T:System.EnterpriseServices.PropertyReleaseMode">
      <summary>Specifies the release mode for the properties in the new shared property group.</summary>
    </member>
    <member name="F:System.EnterpriseServices.PropertyReleaseMode.Standard">
      <summary>When all clients have released their references on the property group, the property group is automatically destroyed. This is the default COM mode.</summary>
    </member>
    <member name="F:System.EnterpriseServices.PropertyReleaseMode.Process">
      <summary>The property group is not destroyed until the process in which it was created has terminated.</summary>
    </member>
    <member name="T:System.EnterpriseServices.RegistrationConfig">
      <summary>Provides configuration information for installing assemblies into the COM+ catalog.</summary>
    </member>
    <member name="M:System.EnterpriseServices.RegistrationConfig.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.RegistrationConfig" /> class.</summary>
    </member>
    <member name="P:System.EnterpriseServices.RegistrationConfig.Application">
      <summary>Gets or sets the name of the COM+ application in which the assembly is to be installed.</summary>
      <returns>The name of the COM+ application in which the assembly is to be installed.</returns>
    </member>
    <member name="P:System.EnterpriseServices.RegistrationConfig.ApplicationRootDirectory">
      <summary>Gets or sets the name of the root directory of the application.</summary>
      <returns>The name of the root directory of the application.</returns>
    </member>
    <member name="P:System.EnterpriseServices.RegistrationConfig.AssemblyFile">
      <summary>Gets or sets the file name of the assembly to install.</summary>
      <returns>The file name of the assembly to install.</returns>
    </member>
    <member name="P:System.EnterpriseServices.RegistrationConfig.InstallationFlags">
      <summary>Gets or sets a flag that indicates how to install the assembly.</summary>
      <returns>One of the <see cref="T:System.EnterpriseServices.InstallationFlags" /> values.</returns>
    </member>
    <member name="P:System.EnterpriseServices.RegistrationConfig.Partition">
      <summary>Gets or sets the name of the COM+ partition.</summary>
      <returns>The name of the COM+ partition.</returns>
    </member>
    <member name="P:System.EnterpriseServices.RegistrationConfig.TypeLibrary">
      <summary>Gets or sets the name of the output Type Library Exporter (Tlbexp.exe) file.</summary>
      <returns>The name of the output Type Library Exporter (Tlbexp.exe) file.</returns>
    </member>
    <member name="T:System.EnterpriseServices.RegistrationErrorInfo">
      <summary>Retrieves extended error information about methods related to multiple COM+ objects. This also includes methods that install, import, and export COM+ applications and components. This class cannot be inherited.</summary>
    </member>
    <member name="P:System.EnterpriseServices.RegistrationErrorInfo.ErrorCode">
      <summary>Gets the error code for the object or file.</summary>
      <returns>The error code for the object or file.</returns>
    </member>
    <member name="P:System.EnterpriseServices.RegistrationErrorInfo.ErrorString">
      <summary>Gets the description of the <see cref="P:System.EnterpriseServices.RegistrationErrorInfo.ErrorCode" />.</summary>
      <returns>The description of the <see cref="P:System.EnterpriseServices.RegistrationErrorInfo.ErrorCode" />.</returns>
    </member>
    <member name="P:System.EnterpriseServices.RegistrationErrorInfo.MajorRef">
      <summary>Gets the key value for the object that caused the error, if applicable.</summary>
      <returns>The key value for the object that caused the error, if applicable.</returns>
    </member>
    <member name="P:System.EnterpriseServices.RegistrationErrorInfo.MinorRef">
      <summary>Gets a precise specification of the item that caused the error, such as a property name.</summary>
      <returns>A precise specification of the item, such as a property name, that caused the error. If multiple errors occurred, or this does not apply, <see cref="P:System.EnterpriseServices.RegistrationErrorInfo.MinorRef" /> returns the string "&lt;Invalid&gt;".</returns>
    </member>
    <member name="P:System.EnterpriseServices.RegistrationErrorInfo.Name">
      <summary>Gets the name of the object or file that caused the error.</summary>
      <returns>The name of the object or file that caused the error.</returns>
    </member>
    <member name="T:System.EnterpriseServices.RegistrationException">
      <summary>The exception that is thrown when a registration error is detected.</summary>
    </member>
    <member name="M:System.EnterpriseServices.RegistrationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.RegistrationException" /> class.</summary>
    </member>
    <member name="M:System.EnterpriseServices.RegistrationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.RegistrationException" /> class with a specified error message.</summary>
      <param name="msg">The message displayed to the client when the exception is thrown. </param>
    </member>
    <member name="M:System.EnterpriseServices.RegistrationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.RegistrationException" /> class with a specified error message and nested exception.</summary>
      <param name="msg">The message displayed to the client when the exception is thrown. </param>
      <param name="inner">The nested exception.</param>
    </member>
    <member name="P:System.EnterpriseServices.RegistrationException.ErrorInfo">
      <summary>Gets an array of <see cref="T:System.EnterpriseServices.RegistrationErrorInfo" /> objects that describe registration errors.</summary>
      <returns>The array of <see cref="T:System.EnterpriseServices.RegistrationErrorInfo" /> objects.</returns>
    </member>
    <member name="M:System.EnterpriseServices.RegistrationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the error information in <see cref="T:System.EnterpriseServices.RegistrationErrorInfo" />.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains serialized object data. </param>
      <param name="ctx">The contextual information about the source or destination. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="info" /> parameter is null. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.EnterpriseServices.RegistrationHelper">
      <summary>Installs and configures assemblies in the COM+ catalog. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.EnterpriseServices.RegistrationHelper.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.RegistrationHelper" /> class.</summary>
    </member>
    <member name="M:System.EnterpriseServices.RegistrationHelper.InstallAssembly(System.String,System.String@,System.String,System.String@,System.EnterpriseServices.InstallationFlags)">
      <summary>Installs the named assembly in a COM+ application.</summary>
      <param name="assembly">The file name of the assembly to install. </param>
      <param name="application">The name of the COM+ application to install into. This parameter can be null. If the parameter is null and the assembly contains a <see cref="T:System.EnterpriseServices.ApplicationNameAttribute" />, then the attribute is used. Otherwise, the name of the application is generated based on the name of the assembly, then is returned.</param>
      <param name="partition">The name of the partition. This parameter can be null. </param>
      <param name="tlb">The name of the output Type Library Exporter (Tlbexp.exe) file, or a string that contains null if the registration helper is expected to generate the name. The actual name used is placed in the parameter on call completion. </param>
      <param name="installFlags">A bitwise combination of the <see cref="T:System.EnterpriseServices.InstallationFlags" /> values. </param>
      <exception cref="T:System.EnterpriseServices.RegistrationException">The input assembly does not have a strong name. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.RegistrationHelper.InstallAssembly(System.String,System.String@,System.String@,System.EnterpriseServices.InstallationFlags)">
      <summary>Installs the named assembly in a COM+ application.</summary>
      <param name="assembly">The file name of the assembly to install. </param>
      <param name="application">The name of the COM+ application to install into. This parameter can be null. If the parameter is null and the assembly contains a <see cref="T:System.EnterpriseServices.ApplicationNameAttribute" />, then the attribute is used. Otherwise, the name of the application is generated based on the name of the assembly, then is returned.</param>
      <param name="tlb">The name of the output Type Library Exporter (Tlbexp.exe) file, or a string that contains null if the registration helper is expected to generate the name. The actual name used is placed in the parameter on call completion. </param>
      <param name="installFlags">A bitwise combination of the <see cref="T:System.EnterpriseServices.InstallationFlags" /> values. </param>
      <exception cref="T:System.EnterpriseServices.RegistrationException">The input assembly does not have a strong name. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.RegistrationHelper.InstallAssemblyFromConfig(System.EnterpriseServices.RegistrationConfig@)">
      <summary>Installs the named assembly in a COM+ application.</summary>
      <param name="regConfig">A <see cref="T:System.EnterpriseServices.RegistrationConfig" /> identifying the assembly to install. </param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.RegistrationHelper.UninstallAssembly(System.String,System.String)">
      <summary>Uninstalls the assembly from the given application.</summary>
      <param name="assembly">The file name of the assembly to uninstall. </param>
      <param name="application">If this name is not null, it is the name of the application that contains the components in the assembly. </param>
      <exception cref="T:System.EnterpriseServices.RegistrationException">The input assembly does not have a strong name. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.RegistrationHelper.UninstallAssembly(System.String,System.String,System.String)">
      <summary>Uninstalls the assembly from the given application.</summary>
      <param name="assembly">The file name of the assembly to uninstall. </param>
      <param name="application">If this name is not null, it is the name of the application that contains the components in the assembly. </param>
      <param name="partition">The name of the partition. This parameter can be null. </param>
      <exception cref="T:System.EnterpriseServices.RegistrationException">The input assembly does not have a strong name. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.RegistrationHelper.UninstallAssemblyFromConfig(System.EnterpriseServices.RegistrationConfig@)">
      <summary>Uninstalls the assembly from the given application.</summary>
      <param name="regConfig">A <see cref="T:System.EnterpriseServices.RegistrationConfig" /> identifying the assembly to uninstall. </param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.EnterpriseServices.RegistrationHelperTx">
      <summary>Used by the .NET Framework infrastructure to install and configure assemblies in the COM+ catalog while maintaining a newly established transaction.</summary>
    </member>
    <member name="M:System.EnterpriseServices.RegistrationHelperTx.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.RegistrationHelperTx" /> class.</summary>
    </member>
    <member name="M:System.EnterpriseServices.RegistrationHelperTx.InstallAssembly(System.String,System.String@,System.String,System.String@,System.EnterpriseServices.InstallationFlags,System.Object)">
      <summary>Installs the named assembly in the COM+ catalog using transactional semantics.</summary>
      <param name="assembly">The file name of the assembly to install.</param>
      <param name="application">Either the name of the COM+ application to install into or a string that contains null.</param>
      <param name="partition">Either the name of the partition or null.</param>
      <param name="tlb">Either the name of the output Type Library Exporter (Tlbexp.exe) file or null.</param>
      <param name="installFlags">A bitwise combination of the installation flags values.</param>
      <param name="sync">A synchronization object generated by the infrastructure that can wait until the specified assembly has been configured in the COM+ catalog.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.RegistrationHelperTx.InstallAssembly(System.String,System.String@,System.String@,System.EnterpriseServices.InstallationFlags,System.Object)">
      <summary>Installs the named assembly in the COM+ catalog using transactional semantics.</summary>
      <param name="assembly">The file name of the assembly to install.</param>
      <param name="application">Either the name of the COM+ application to install into or null.</param>
      <param name="tlb">Either the name of the output Type Library Exporter (Tlbexp.exe) file or null.</param>
      <param name="installFlags">A bitwise combination of the installation flags values.</param>
      <param name="sync">A synchronization object generated by the infrastructure that can wait until the specified assembly has been configured in the COM+ catalog.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.RegistrationHelperTx.InstallAssemblyFromConfig(System.EnterpriseServices.RegistrationConfig@,System.Object)">
      <summary>Installs a specified assembly in the COM+ catalog using transactional semantics.</summary>
      <param name="regConfig">Configuration information for installing an assembly into the COM+ catalog.</param>
      <param name="sync">A synchronization object generated by the infrastructure that waits until the specified assembly has been configured in the COM+ catalog.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.RegistrationHelperTx.IsInTransaction">
      <summary>Gets a value indicating whether the current context for the <see cref="T:System.EnterpriseServices.RegistrationHelperTx" /> class instance is transactional.</summary>
      <returns>true if the current context for the <see cref="T:System.EnterpriseServices.RegistrationHelperTx" /> class instance is transactional; otherwise, false.</returns>
    </member>
    <member name="M:System.EnterpriseServices.RegistrationHelperTx.UninstallAssembly(System.String,System.String,System.Object)">
      <summary>Uninstalls an assembly from a COM+ application using transactional semantics.</summary>
      <param name="assembly">The file name of the assembly to uninstall.</param>
      <param name="application">Either the name of the COM+ application that contains the components in the assembly or null.</param>
      <param name="sync">A synchronization object generated by the infrastructure that can wait until the specified assembly has been uninstalled.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.RegistrationHelperTx.UninstallAssembly(System.String,System.String,System.String,System.Object)">
      <summary>Uninstalls an assembly from a COM+ application using transactional semantics.</summary>
      <param name="assembly">The file name of the assembly to uninstall.</param>
      <param name="application">Either the name of the COM+ application that contains the components in the assembly or null.</param>
      <param name="partition">Either the name of the partition or null.</param>
      <param name="sync">A synchronization object generated by the infrastructure that can wait until the specified assembly has been uninstalled.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.RegistrationHelperTx.UninstallAssemblyFromConfig(System.EnterpriseServices.RegistrationConfig@,System.Object)">
      <summary>Uninstalls a specified assembly from a COM+ application using transactional semantics.</summary>
      <param name="regConfig">Configuration information that specifies an assembly to uninstall from an application.</param>
      <param name="sync">A synchronization object generated by the infrastructure that waits until the specified assembly has been uninstalled.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.EnterpriseServices.ResourcePool">
      <summary>Stores objects in the current transaction. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.EnterpriseServices.ResourcePool.#ctor(System.EnterpriseServices.ResourcePool.TransactionEndDelegate)">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.ResourcePool" /> class.</summary>
      <param name="cb">A <see cref="T:System.EnterpriseServices.ResourcePool.TransactionEndDelegate" />, that is called when a transaction is finished. All items currently stored in the transaction are handed back to the user through the delegate. </param>
    </member>
    <member name="M:System.EnterpriseServices.ResourcePool.GetResource">
      <summary>Gets a resource from the current transaction.</summary>
      <returns>The resource object.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.ResourcePool.PutResource(System.Object)">
      <summary>Adds a resource to the current transaction.</summary>
      <returns>true if the resource object was added to the pool; otherwise, false.</returns>
      <param name="resource">The resource to add. </param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="T:System.EnterpriseServices.ResourcePool.TransactionEndDelegate">
      <summary>Represents the method that handles the ending of a transaction.</summary>
      <param name="resource">The object that is passed back to the delegate. </param>
    </member>
    <member name="T:System.EnterpriseServices.SecureMethodAttribute">
      <summary>Ensures that the infrastructure calls through an interface for a method or for each method in a class when using the security service. Classes need to use interfaces to use security services. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.EnterpriseServices.SecureMethodAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.SecureMethodAttribute" /> class.</summary>
    </member>
    <member name="T:System.EnterpriseServices.SecurityCallContext">
      <summary>Describes the chain of callers leading up to the current method call.</summary>
    </member>
    <member name="P:System.EnterpriseServices.SecurityCallContext.Callers">
      <summary>Gets a <see cref="T:System.EnterpriseServices.SecurityCallers" /> object that describes the caller.</summary>
      <returns>The <see cref="T:System.EnterpriseServices.SecurityCallers" /> object that describes the caller.</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException">There is no security context. </exception>
    </member>
    <member name="P:System.EnterpriseServices.SecurityCallContext.CurrentCall">
      <summary>Gets a <see cref="T:System.EnterpriseServices.SecurityCallContext" /> object that describes the security call context.</summary>
      <returns>The <see cref="T:System.EnterpriseServices.SecurityCallContext" /> object that describes the security call context.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.EnterpriseServices.SecurityCallContext.DirectCaller">
      <summary>Gets a <see cref="T:System.EnterpriseServices.SecurityIdentity" /> object that describes the direct caller of this method.</summary>
      <returns>A <see cref="T:System.EnterpriseServices.SecurityIdentity" /> value.</returns>
    </member>
    <member name="M:System.EnterpriseServices.SecurityCallContext.IsCallerInRole(System.String)">
      <summary>Verifies that the direct caller is a member of the specified role.</summary>
      <returns>true if the direct caller is a member of the specified role; otherwise, false.</returns>
      <param name="role">The specified role. </param>
    </member>
    <member name="P:System.EnterpriseServices.SecurityCallContext.IsSecurityEnabled">
      <summary>Determines whether security checks are enabled in the current context.</summary>
      <returns>true if security checks are enabled in the current context; otherwise, false.</returns>
    </member>
    <member name="M:System.EnterpriseServices.SecurityCallContext.IsUserInRole(System.String,System.String)">
      <summary>Verifies that the specified user is in the specified role.</summary>
      <returns>true if the specified user is a member of the specified role; otherwise, false.</returns>
      <param name="user">The specified user. </param>
      <param name="role">The specified role. </param>
    </member>
    <member name="P:System.EnterpriseServices.SecurityCallContext.MinAuthenticationLevel">
      <summary>Gets the MinAuthenticationLevel value from the ISecurityCallContext collection in COM+.</summary>
      <returns>The MinAuthenticationLevel value from the ISecurityCallContext collection in COM+.</returns>
    </member>
    <member name="P:System.EnterpriseServices.SecurityCallContext.NumCallers">
      <summary>Gets the NumCallers value from the ISecurityCallContext collection in COM+.</summary>
      <returns>The NumCallers value from the ISecurityCallContext collection in COM+.</returns>
    </member>
    <member name="P:System.EnterpriseServices.SecurityCallContext.OriginalCaller">
      <summary>Gets a <see cref="T:System.EnterpriseServices.SecurityIdentity" /> that describes the original caller.</summary>
      <returns>One of the <see cref="T:System.EnterpriseServices.SecurityIdentity" /> values.</returns>
    </member>
    <member name="T:System.EnterpriseServices.SecurityCallers">
      <summary>Provides an ordered collection of identities in the current call chain.</summary>
    </member>
    <member name="P:System.EnterpriseServices.SecurityCallers.Count">
      <summary>Gets the number of callers in the chain.</summary>
      <returns>The number of callers in the chain.</returns>
    </member>
    <member name="M:System.EnterpriseServices.SecurityCallers.GetEnumerator">
      <summary>Retrieves the enumeration interface for the object.</summary>
      <returns>The enumerator interface for the ISecurityCallersColl collection.</returns>
    </member>
    <member name="P:System.EnterpriseServices.SecurityCallers.Item(System.Int32)">
      <summary>Gets the specified <see cref="T:System.EnterpriseServices.SecurityIdentity" /> item.</summary>
      <returns>A <see cref="T:System.EnterpriseServices.SecurityIdentity" /> object.</returns>
      <param name="idx">The item to access using an index number. </param>
    </member>
    <member name="T:System.EnterpriseServices.SecurityIdentity">
      <summary>Contains information that regards an identity in a COM+ call chain.</summary>
    </member>
    <member name="P:System.EnterpriseServices.SecurityIdentity.AccountName">
      <summary>Gets the name of the user described by this identity.</summary>
      <returns>The name of the user described by this identity.</returns>
    </member>
    <member name="P:System.EnterpriseServices.SecurityIdentity.AuthenticationLevel">
      <summary>Gets the authentication level of the user described by this identity.</summary>
      <returns>One of the <see cref="T:System.EnterpriseServices.AuthenticationOption" /> values.</returns>
    </member>
    <member name="P:System.EnterpriseServices.SecurityIdentity.AuthenticationService">
      <summary>Gets the authentication service described by this identity.</summary>
      <returns>The authentication service described by this identity.</returns>
    </member>
    <member name="P:System.EnterpriseServices.SecurityIdentity.ImpersonationLevel">
      <summary>Gets the impersonation level of the user described by this identity.</summary>
      <returns>A <see cref="T:System.EnterpriseServices.ImpersonationLevelOption" /> value.</returns>
    </member>
    <member name="T:System.EnterpriseServices.SecurityRoleAttribute">
      <summary>Configures a role for an application or component. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.EnterpriseServices.SecurityRoleAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.SecurityRoleAttribute" /> class and sets the <see cref="P:System.EnterpriseServices.SecurityRoleAttribute.Role" /> property.</summary>
      <param name="role">A security role for the application, component, interface, or method. </param>
    </member>
    <member name="M:System.EnterpriseServices.SecurityRoleAttribute.#ctor(System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.SecurityRoleAttribute" /> class and sets the <see cref="P:System.EnterpriseServices.SecurityRoleAttribute.Role" /> and <see cref="P:System.EnterpriseServices.SecurityRoleAttribute.SetEveryoneAccess" /> properties.</summary>
      <param name="role">A security role for the application, component, interface, or method. </param>
      <param name="everyone">true to require that the newly created role have the Everyone user group added as a user; otherwise, false. </param>
    </member>
    <member name="P:System.EnterpriseServices.SecurityRoleAttribute.Description">
      <summary>Gets or sets the role description.</summary>
      <returns>The description for the role.</returns>
    </member>
    <member name="P:System.EnterpriseServices.SecurityRoleAttribute.Role">
      <summary>Gets or sets the security role.</summary>
      <returns>The security role applied to an application, component, interface, or method.</returns>
    </member>
    <member name="P:System.EnterpriseServices.SecurityRoleAttribute.SetEveryoneAccess">
      <summary>Sets a value indicating whether to add the Everyone user group as a user.</summary>
      <returns>true to require that a newly created role have the Everyone user group added as a user (roles that already exist on the application are not modified); otherwise, false to suppress adding the Everyone user group as a user.</returns>
    </member>
    <member name="T:System.EnterpriseServices.ServiceConfig">
      <summary>Specifies and configures the services that are to be active in the domain which is entered when calling <see cref="M:System.EnterpriseServices.ServiceDomain.Enter(System.EnterpriseServices.ServiceConfig)" /> or creating an <see cref="T:System.EnterpriseServices.Activity" />. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.EnterpriseServices.ServiceConfig.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.ServiceConfig" /> class, setting the properties to configure the desired services.</summary>
      <exception cref="T:System.PlatformNotSupportedException">
        <see cref="T:System.EnterpriseServices.ServiceConfig" /> is not supported on the current platform. </exception>
    </member>
    <member name="P:System.EnterpriseServices.ServiceConfig.Binding">
      <summary>Gets or sets the binding option, which indicates whether all work submitted by the activity is to be bound to only one single-threaded apartment (STA).</summary>
      <returns>One of the <see cref="T:System.EnterpriseServices.BindingOption" /> values. The default is <see cref="F:System.EnterpriseServices.BindingOption.NoBinding" />.</returns>
    </member>
    <member name="P:System.EnterpriseServices.ServiceConfig.BringYourOwnSystemTransaction">
      <summary>Gets or sets a <see cref="T:System.Transactions.Transaction" /> that represents an existing transaction that supplies the settings used to run the transaction identified by <see cref="T:System.EnterpriseServices.ServiceConfig" />.</summary>
      <returns>A <see cref="T:System.Transactions.Transaction" />. The default is null.</returns>
    </member>
    <member name="P:System.EnterpriseServices.ServiceConfig.BringYourOwnTransaction">
      <summary>Gets or sets a <see cref="T:System.EnterpriseServices.ITransaction" /> that represents an existing transaction that supplies the settings used to run the transaction identified by <see cref="T:System.EnterpriseServices.ServiceConfig" />.</summary>
      <returns>An <see cref="T:System.EnterpriseServices.ITransaction" />. The default is null.</returns>
    </member>
    <member name="P:System.EnterpriseServices.ServiceConfig.COMTIIntrinsicsEnabled">
      <summary>Gets or sets a value that indicates whether COM Transaction Integrator (COMTI) intrinsics are enabled.</summary>
      <returns>true if COMTI intrinsics are enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.EnterpriseServices.ServiceConfig.IISIntrinsicsEnabled">
      <summary>Gets or sets a value that indicates whether Internet Information Services (IIS) intrinsics are enabled.</summary>
      <returns>true if IIS intrinsics are enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.EnterpriseServices.ServiceConfig.Inheritance">
      <summary>Gets or sets a value that indicates whether to construct a new context based on the current context or to create a new context based solely on the information in <see cref="T:System.EnterpriseServices.ServiceConfig" />.</summary>
      <returns>One of the <see cref="T:System.EnterpriseServices.InheritanceOption" /> values. The default is <see cref="F:System.EnterpriseServices.InheritanceOption.Inherit" />.</returns>
    </member>
    <member name="P:System.EnterpriseServices.ServiceConfig.IsolationLevel">
      <summary>Gets or sets the isolation level of the transaction.</summary>
      <returns>One of the <see cref="T:System.EnterpriseServices.TransactionIsolationLevel" /> values. The default is <see cref="F:System.EnterpriseServices.TransactionIsolationLevel.Any" />.</returns>
    </member>
    <member name="P:System.EnterpriseServices.ServiceConfig.PartitionId">
      <summary>Gets or sets the GUID for the COM+ partition that is to be used.</summary>
      <returns>The GUID for the partition to be used. The default is a zero GUID.</returns>
    </member>
    <member name="P:System.EnterpriseServices.ServiceConfig.PartitionOption">
      <summary>Gets or sets a value that indicates how partitions are used for the enclosed work.</summary>
      <returns>One of the <see cref="T:System.EnterpriseServices.PartitionOption" /> values. The default is <see cref="F:System.EnterpriseServices.PartitionOption.Ignore" />.</returns>
    </member>
    <member name="P:System.EnterpriseServices.ServiceConfig.SxsDirectory">
      <summary>Gets or sets the directory for the side-by-side assembly for the enclosed work.</summary>
      <returns>The name of the directory to be used for the side-by-side assembly. The default value is null.</returns>
    </member>
    <member name="P:System.EnterpriseServices.ServiceConfig.SxsName">
      <summary>Gets or sets the file name of the side-by-side assembly for the enclosed work.</summary>
      <returns>The file name of the side-by-side assembly. The default value is null.</returns>
    </member>
    <member name="P:System.EnterpriseServices.ServiceConfig.SxsOption">
      <summary>Gets or sets a value that indicates how to configure the side-by-side assembly.</summary>
      <returns>One of the <see cref="T:System.EnterpriseServices.SxsOption" /> values. The default is <see cref="F:System.EnterpriseServices.SxsOption.Ignore" />.</returns>
    </member>
    <member name="P:System.EnterpriseServices.ServiceConfig.Synchronization">
      <summary>Gets or sets a value in that indicates the type of automatic synchronization requested by the component.</summary>
      <returns>One of the <see cref="T:System.EnterpriseServices.SynchronizationOption" /> values. The default is <see cref="F:System.EnterpriseServices.SynchronizationOption.Disabled" />.</returns>
    </member>
    <member name="P:System.EnterpriseServices.ServiceConfig.ThreadPool">
      <summary>Gets or sets a value that indicates the thread pool which runs the work submitted by the activity.</summary>
      <returns>One of the <see cref="T:System.EnterpriseServices.ThreadPoolOption" /> values. The default is <see cref="F:System.EnterpriseServices.ThreadPoolOption.None" />.</returns>
    </member>
    <member name="P:System.EnterpriseServices.ServiceConfig.TipUrl">
      <summary>Gets or sets the Transaction Internet Protocol (TIP) URL that allows the enclosed code to run in an existing transaction.</summary>
      <returns>A TIP URL. The default value is null.</returns>
    </member>
    <member name="P:System.EnterpriseServices.ServiceConfig.TrackingAppName">
      <summary>Gets or sets a text string that corresponds to the application ID under which tracker information is reported.</summary>
      <returns>The application ID under which tracker information is reported. The default value is null.</returns>
    </member>
    <member name="P:System.EnterpriseServices.ServiceConfig.TrackingComponentName">
      <summary>Gets or sets a text string that corresponds to the context name under which tracker information is reported.</summary>
      <returns>The context name under which tracker information is reported. The default value is null.</returns>
    </member>
    <member name="P:System.EnterpriseServices.ServiceConfig.TrackingEnabled">
      <summary>Gets or sets a value that indicates whether tracking is enabled.</summary>
      <returns>true if tracking is enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.EnterpriseServices.ServiceConfig.Transaction">
      <summary>Gets or sets a value that indicates how transactions are used in the enclosed work.</summary>
      <returns>One of the <see cref="T:System.EnterpriseServices.TransactionOption" /> values. The default is <see cref="F:System.EnterpriseServices.TransactionOption.Disabled" />.</returns>
    </member>
    <member name="P:System.EnterpriseServices.ServiceConfig.TransactionDescription">
      <summary>Gets or sets the name that is used when transaction statistics are displayed.</summary>
      <returns>The name used when transaction statistics are displayed. The default value is null.</returns>
    </member>
    <member name="P:System.EnterpriseServices.ServiceConfig.TransactionTimeout">
      <summary>Gets or sets the transaction time-out for a new transaction.</summary>
      <returns>The transaction time-out, in seconds.</returns>
    </member>
    <member name="T:System.EnterpriseServices.ServicedComponent">
      <summary>Represents the base class of all classes using COM+ services.</summary>
    </member>
    <member name="M:System.EnterpriseServices.ServicedComponent.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.ServicedComponent" /> class.</summary>
    </member>
    <member name="M:System.EnterpriseServices.ServicedComponent.Activate">
      <summary>Called by the infrastructure when the object is created or allocated from a pool. Override this method to add custom initialization code to objects.</summary>
    </member>
    <member name="M:System.EnterpriseServices.ServicedComponent.CanBePooled">
      <summary>This method is called by the infrastructure before the object is put back into the pool. Override this method to vote on whether the object is put back into the pool.</summary>
      <returns>true if the serviced component can be pooled; otherwise, false.</returns>
    </member>
    <member name="M:System.EnterpriseServices.ServicedComponent.Construct(System.String)">
      <summary>Called by the infrastructure just after the constructor is called, passing in the constructor string. Override this method to make use of the construction string value.</summary>
      <param name="s">The construction string. </param>
    </member>
    <member name="M:System.EnterpriseServices.ServicedComponent.Deactivate">
      <summary>Called by the infrastructure when the object is about to be deactivated. Override this method to add custom finalization code to objects when just-in-time (JIT) compiled code or object pooling is used.</summary>
    </member>
    <member name="M:System.EnterpriseServices.ServicedComponent.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.EnterpriseServices.ServicedComponent" />.</summary>
    </member>
    <member name="M:System.EnterpriseServices.ServicedComponent.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.EnterpriseServices.ServicedComponent" /> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; otherwise, false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.EnterpriseServices.ServicedComponent.DisposeObject(System.EnterpriseServices.ServicedComponent)">
      <summary>Finalizes the object and removes the associated COM+ reference.</summary>
      <param name="sc">The object to dispose. </param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlThread" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IRemoteDispatch#RemoteDispatchAutoDone(System.String)">
      <summary>Ensures that, in the COM+ context, the <see cref="T:System.EnterpriseServices.ServicedComponent" /> class object's done bit is set to true after a remote method invocation</summary>
      <returns>A string converted from a response object that implements the <see cref="T:System.Runtime.Remoting.Messaging.IMethodReturnMessage" /> interface.</returns>
      <param name="s">A string to be converted into a request object that implements the <see cref="T:System.Runtime.Remoting.Messaging.IMessage" /> interface.</param>
    </member>
    <member name="M:System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IRemoteDispatch#RemoteDispatchNotAutoDone(System.String)">
      <summary>Does not ensure that, in the COM+ context, the <see cref="T:System.EnterpriseServices.ServicedComponent" /> class object's done bit is set to true after a remote method invocation.</summary>
      <returns>A string converted from a response object implementing the <see cref="T:System.Runtime.Remoting.Messaging.IMethodReturnMessage" /> interface.</returns>
      <param name="s">A string to be converted into a request object implementing the <see cref="T:System.Runtime.Remoting.Messaging.IMessage" /> interface.</param>
    </member>
    <member name="M:System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IServicedComponentInfo#GetComponentInfo(System.Int32@,System.String[]@)">
      <summary>Obtains information about the <see cref="T:System.EnterpriseServices.ServicedComponent" /> class instance.</summary>
      <param name="infoMask">A bitmask where 0x00000001 is a key for the serviced component's process ID, 0x00000002 is a key for the application domain ID, and 0x00000004 is a key for the serviced component's remote URI.</param>
      <param name="infoArray">A string array that may contain any or all of the following, in order: the serviced component's process ID, the application domain ID, and the serviced component's remote URI.</param>
    </member>
    <member name="T:System.EnterpriseServices.ServicedComponentException">
      <summary>The exception that is thrown when an error is detected in a serviced component.</summary>
    </member>
    <member name="M:System.EnterpriseServices.ServicedComponentException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.ServicedComponentException" /> class.</summary>
    </member>
    <member name="M:System.EnterpriseServices.ServicedComponentException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.ServicedComponentException" /> class with a specified error message.</summary>
      <param name="message">The message displayed to the client when the exception is thrown. </param>
    </member>
    <member name="M:System.EnterpriseServices.ServicedComponentException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.ServicedComponentException" /> class.</summary>
      <param name="message">The message displayed to the client when the exception is thrown. </param>
      <param name="innerException">The <see cref="P:System.Exception.InnerException" />, if any, that threw the current exception. </param>
    </member>
    <member name="T:System.EnterpriseServices.ServiceDomain">
      <summary>Allows a code segment identified by <see cref="M:System.EnterpriseServices.ServiceDomain.Enter(System.EnterpriseServices.ServiceConfig)" /> and <see cref="M:System.EnterpriseServices.ServiceDomain.Leave" /> to run in its own context and behave as if it were a method that is called on an object created within the context. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.EnterpriseServices.ServiceDomain.Enter(System.EnterpriseServices.ServiceConfig)">
      <summary>Creates the context specified by the <see cref="T:System.EnterpriseServices.ServiceConfig" /> object and pushes it onto the context stack to become the current context.</summary>
      <param name="cfg">A <see cref="T:System.EnterpriseServices.ServiceConfig" /> that contains the configuration information for the services to be used within the enclosed code. </param>
      <exception cref="T:System.PlatformNotSupportedException">
        <see cref="T:System.EnterpriseServices.ServiceConfig" /> is not supported on the current platform. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.ServiceDomain.Leave">
      <summary>Triggers the server and then the client side policies as if a method call were returning. The current context is then popped from the context stack, and the context that was running when <see cref="M:System.EnterpriseServices.ServiceDomain.Enter(System.EnterpriseServices.ServiceConfig)" /> was called becomes the current context.</summary>
      <returns>One of the <see cref="T:System.EnterpriseServices.TransactionStatus" /> values.</returns>
      <exception cref="T:System.PlatformNotSupportedException">
        <see cref="T:System.EnterpriseServices.ServiceConfig" /> is not supported on the current platform. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="T:System.EnterpriseServices.SharedProperty">
      <summary>Accesses a shared property. This class cannot be inherited.</summary>
    </member>
    <member name="P:System.EnterpriseServices.SharedProperty.Value">
      <summary>Gets or sets the value of the shared property.</summary>
      <returns>The value of the shared property.</returns>
    </member>
    <member name="T:System.EnterpriseServices.SharedPropertyGroup">
      <summary>Represents a collection of shared properties. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.EnterpriseServices.SharedPropertyGroup.CreateProperty(System.String,System.Boolean@)">
      <summary>Creates a property with the given name.</summary>
      <returns>The requested <see cref="T:System.EnterpriseServices.SharedProperty" />.</returns>
      <param name="name">The name of the new property. </param>
      <param name="fExists">Determines whether the property exists. Set to true on return if the property exists. </param>
    </member>
    <member name="M:System.EnterpriseServices.SharedPropertyGroup.CreatePropertyByPosition(System.Int32,System.Boolean@)">
      <summary>Creates a property at the given position.</summary>
      <returns>The requested <see cref="T:System.EnterpriseServices.SharedProperty" />.</returns>
      <param name="position">The index of the new property </param>
      <param name="fExists">Determines whether the property exists. Set to true on return if the property exists. </param>
    </member>
    <member name="M:System.EnterpriseServices.SharedPropertyGroup.Property(System.String)">
      <summary>Returns the property with the given name.</summary>
      <returns>The requested <see cref="T:System.EnterpriseServices.SharedProperty" />.</returns>
      <param name="name">The name of requested property. </param>
    </member>
    <member name="M:System.EnterpriseServices.SharedPropertyGroup.PropertyByPosition(System.Int32)">
      <summary>Returns the property at the given position.</summary>
      <returns>The requested <see cref="T:System.EnterpriseServices.SharedProperty" />.</returns>
      <param name="position">The index of the property. </param>
    </member>
    <member name="T:System.EnterpriseServices.SharedPropertyGroupManager">
      <summary>Controls access to shared property groups. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.EnterpriseServices.SharedPropertyGroupManager.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.SharedPropertyGroupManager" /> class.</summary>
    </member>
    <member name="M:System.EnterpriseServices.SharedPropertyGroupManager.CreatePropertyGroup(System.String,System.EnterpriseServices.PropertyLockMode@,System.EnterpriseServices.PropertyReleaseMode@,System.Boolean@)">
      <summary>Finds or creates a property group with the given information.</summary>
      <returns>The requested <see cref="T:System.EnterpriseServices.SharedPropertyGroup" />.</returns>
      <param name="name">The name of requested property. </param>
      <param name="dwIsoMode">One of the <see cref="T:System.EnterpriseServices.PropertyLockMode" /> values. See the Remarks section for more information. </param>
      <param name="dwRelMode">One of the <see cref="T:System.EnterpriseServices.PropertyReleaseMode" /> values. See the Remarks section for more information. </param>
      <param name="fExist">When this method returns, contains true if the property already existed; false if the call created the property. </param>
    </member>
    <member name="M:System.EnterpriseServices.SharedPropertyGroupManager.GetEnumerator">
      <summary>Retrieves the enumeration interface for the collection.</summary>
      <returns>The enumerator interface for the collection.</returns>
    </member>
    <member name="M:System.EnterpriseServices.SharedPropertyGroupManager.Group(System.String)">
      <summary>Finds the property group with the given name.</summary>
      <returns>The requested <see cref="T:System.EnterpriseServices.SharedPropertyGroup" />.</returns>
      <param name="name">The name of requested property. </param>
    </member>
    <member name="T:System.EnterpriseServices.SxsOption">
      <summary>Indicates how side-by-side assemblies are configured for <see cref="T:System.EnterpriseServices.ServiceConfig" />.</summary>
    </member>
    <member name="F:System.EnterpriseServices.SxsOption.Ignore">
      <summary>Side-by-side assemblies are not used within the enclosed context. <see cref="F:System.EnterpriseServices.SxsOption.Ignore" /> is the default setting for <see cref="P:System.EnterpriseServices.ServiceConfig.SxsOption" /> when <see cref="P:System.EnterpriseServices.ServiceConfig.Inheritance" /> is set to <see cref="F:System.EnterpriseServices.InheritanceOption.Ignore" />.</summary>
    </member>
    <member name="F:System.EnterpriseServices.SxsOption.Inherit">
      <summary>The current side-by-side assembly of the enclosed context is used. <see cref="F:System.EnterpriseServices.SxsOption.Inherit" /> is the default setting for <see cref="P:System.EnterpriseServices.ServiceConfig.SxsOption" /> when <see cref="P:System.EnterpriseServices.ServiceConfig.Inheritance" /> is set to <see cref="F:System.EnterpriseServices.InheritanceOption.Inherit" />.</summary>
    </member>
    <member name="F:System.EnterpriseServices.SxsOption.New">
      <summary>A new side-by-side assembly is created for the enclosed context.</summary>
    </member>
    <member name="T:System.EnterpriseServices.SynchronizationAttribute">
      <summary>Sets the synchronization value of the component. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.EnterpriseServices.SynchronizationAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.SynchronizationAttribute" /> class with the default <see cref="T:System.EnterpriseServices.SynchronizationOption" />.</summary>
    </member>
    <member name="M:System.EnterpriseServices.SynchronizationAttribute.#ctor(System.EnterpriseServices.SynchronizationOption)">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.SynchronizationAttribute" /> class with the specified <see cref="T:System.EnterpriseServices.SynchronizationOption" />.</summary>
      <param name="val">One of the <see cref="T:System.EnterpriseServices.SynchronizationOption" /> values. </param>
    </member>
    <member name="P:System.EnterpriseServices.SynchronizationAttribute.Value">
      <summary>Gets the current setting of the <see cref="P:System.EnterpriseServices.SynchronizationAttribute.Value" /> property.</summary>
      <returns>One of the <see cref="T:System.EnterpriseServices.SynchronizationOption" /> values. The default is Required.</returns>
    </member>
    <member name="T:System.EnterpriseServices.SynchronizationOption">
      <summary>Specifies the type of automatic synchronization requested by the component.</summary>
    </member>
    <member name="F:System.EnterpriseServices.SynchronizationOption.Disabled">
      <summary>COM+ ignores the synchronization requirements of the component when determining context for the object.</summary>
    </member>
    <member name="F:System.EnterpriseServices.SynchronizationOption.NotSupported">
      <summary>An object with this value never participates in synchronization, regardless of the status of its caller. This setting is only available for components that are non-transactional and do not use just-in-time (JIT) activation.</summary>
    </member>
    <member name="F:System.EnterpriseServices.SynchronizationOption.Supported">
      <summary>An object with this value participates in synchronization, if it exists.</summary>
    </member>
    <member name="F:System.EnterpriseServices.SynchronizationOption.Required">
      <summary>Ensures that all objects created from the component are synchronized.</summary>
    </member>
    <member name="F:System.EnterpriseServices.SynchronizationOption.RequiresNew">
      <summary>An object with this value must participate in a new synchronization where COM+ manages contexts and apartments on behalf of all components involved in the call.</summary>
    </member>
    <member name="T:System.EnterpriseServices.ThreadPoolOption">
      <summary>Indicates the thread pool in which the work, submitted by <see cref="T:System.EnterpriseServices.Activity" />, runs.</summary>
    </member>
    <member name="F:System.EnterpriseServices.ThreadPoolOption.None">
      <summary>No thread pool is used. If this value is used to configure a <see cref="T:System.EnterpriseServices.ServiceConfig" /> that is passed to an <see cref="T:System.EnterpriseServices.Activity" />, an exception is thrown.</summary>
    </member>
    <member name="F:System.EnterpriseServices.ThreadPoolOption.Inherit">
      <summary>The same type of thread pool apartment as the caller's thread apartment is used.</summary>
    </member>
    <member name="F:System.EnterpriseServices.ThreadPoolOption.STA">
      <summary>A single-threaded apartment (STA) is used.</summary>
    </member>
    <member name="F:System.EnterpriseServices.ThreadPoolOption.MTA">
      <summary>A multithreaded apartment (MTA) is used.</summary>
    </member>
    <member name="T:System.EnterpriseServices.TransactionAttribute">
      <summary>Specifies the type of transaction that is available to the attributed object. Permissible values are members of the <see cref="T:System.EnterpriseServices.TransactionOption" /> enumeration.</summary>
    </member>
    <member name="M:System.EnterpriseServices.TransactionAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.TransactionAttribute" /> class, setting the component's requested transaction type to <see cref="F:System.EnterpriseServices.TransactionOption.Required" />.</summary>
    </member>
    <member name="M:System.EnterpriseServices.TransactionAttribute.#ctor(System.EnterpriseServices.TransactionOption)">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.TransactionAttribute" /> class, specifying the transaction type.</summary>
      <param name="val">The specified transaction type, a <see cref="T:System.EnterpriseServices.TransactionOption" /> value. </param>
    </member>
    <member name="P:System.EnterpriseServices.TransactionAttribute.Isolation">
      <summary>Gets or sets the transaction isolation level.</summary>
      <returns>One of the <see cref="T:System.EnterpriseServices.TransactionIsolationLevel" /> values.</returns>
    </member>
    <member name="P:System.EnterpriseServices.TransactionAttribute.Timeout">
      <summary>Gets or sets the time-out for this transaction.</summary>
      <returns>The transaction time-out in seconds.</returns>
    </member>
    <member name="P:System.EnterpriseServices.TransactionAttribute.Value">
      <summary>Gets the <see cref="T:System.EnterpriseServices.TransactionOption" /> value for the transaction, optionally disabling the transaction service.</summary>
      <returns>The specified transaction type, a <see cref="T:System.EnterpriseServices.TransactionOption" /> value.</returns>
    </member>
    <member name="T:System.EnterpriseServices.TransactionIsolationLevel">
      <summary>Specifies the value of the <see cref="T:System.EnterpriseServices.TransactionAttribute" />.</summary>
    </member>
    <member name="F:System.EnterpriseServices.TransactionIsolationLevel.Any">
      <summary>The isolation level for the component is obtained from the calling component's isolation level. If this is the root component, the isolation level used is <see cref="F:System.EnterpriseServices.TransactionIsolationLevel.Serializable" />.</summary>
    </member>
    <member name="F:System.EnterpriseServices.TransactionIsolationLevel.ReadUncommitted">
      <summary>Shared locks are issued and no exclusive locks are honored.</summary>
    </member>
    <member name="F:System.EnterpriseServices.TransactionIsolationLevel.ReadCommitted">
      <summary>Shared locks are held while the data is being read to avoid reading modified data, but the data can be changed before the end of the transaction, resulting in non-repeatable reads or phantom data.</summary>
    </member>
    <member name="F:System.EnterpriseServices.TransactionIsolationLevel.RepeatableRead">
      <summary>Locks are placed on all data that is used in a query, preventing other users from updating the data. Prevents non-repeatable reads, but phantom rows are still possible.</summary>
    </member>
    <member name="F:System.EnterpriseServices.TransactionIsolationLevel.Serializable">
      <summary>Prevents updating or inserting until the transaction is complete.</summary>
    </member>
    <member name="T:System.EnterpriseServices.TransactionOption">
      <summary>Specifies the automatic transaction type requested by the component.</summary>
    </member>
    <member name="F:System.EnterpriseServices.TransactionOption.Disabled">
      <summary>Ignores any transaction in the current context.</summary>
    </member>
    <member name="F:System.EnterpriseServices.TransactionOption.NotSupported">
      <summary>Creates the component in a context with no governing transaction.</summary>
    </member>
    <member name="F:System.EnterpriseServices.TransactionOption.Supported">
      <summary>Shares a transaction, if one exists.</summary>
    </member>
    <member name="F:System.EnterpriseServices.TransactionOption.Required">
      <summary>Shares a transaction, if one exists, and creates a new transaction if necessary.</summary>
    </member>
    <member name="F:System.EnterpriseServices.TransactionOption.RequiresNew">
      <summary>Creates the component with a new transaction, regardless of the state of the current context.</summary>
    </member>
    <member name="T:System.EnterpriseServices.TransactionStatus">
      <summary>Indicates the transaction status.</summary>
    </member>
    <member name="F:System.EnterpriseServices.TransactionStatus.Commited">
      <summary>The transaction has committed.</summary>
    </member>
    <member name="F:System.EnterpriseServices.TransactionStatus.LocallyOk">
      <summary>The transaction has neither committed nor aborted.</summary>
    </member>
    <member name="F:System.EnterpriseServices.TransactionStatus.NoTransaction">
      <summary>No transactions are being used through <see cref="M:System.EnterpriseServices.ServiceDomain.Enter(System.EnterpriseServices.ServiceConfig)" />.</summary>
    </member>
    <member name="F:System.EnterpriseServices.TransactionStatus.Aborting">
      <summary>The transaction is in the process of aborting.</summary>
    </member>
    <member name="F:System.EnterpriseServices.TransactionStatus.Aborted">
      <summary>The transaction is aborted.</summary>
    </member>
    <member name="T:System.EnterpriseServices.TransactionVote">
      <summary>Specifies the values allowed for transaction outcome voting.</summary>
    </member>
    <member name="F:System.EnterpriseServices.TransactionVote.Commit">
      <summary>Commits the current transaction.</summary>
    </member>
    <member name="F:System.EnterpriseServices.TransactionVote.Abort">
      <summary>Aborts the current transaction.</summary>
    </member>
    <member name="T:System.EnterpriseServices.XACTTRANSINFO">
      <summary>Represents a structure used in the <see cref="T:System.EnterpriseServices.ITransaction" /> interface.</summary>
    </member>
    <member name="F:System.EnterpriseServices.XACTTRANSINFO.grfRMSupported">
      <summary>Specifies zero. This field is reserved.</summary>
    </member>
    <member name="F:System.EnterpriseServices.XACTTRANSINFO.grfRMSupportedRetaining">
      <summary>Specifies zero. This field is reserved.</summary>
    </member>
    <member name="F:System.EnterpriseServices.XACTTRANSINFO.grfTCSupported">
      <summary>Represents a bitmask that indicates which grfTC flags this transaction implementation supports.</summary>
    </member>
    <member name="F:System.EnterpriseServices.XACTTRANSINFO.grfTCSupportedRetaining">
      <summary>Specifies zero. This field is reserved.</summary>
    </member>
    <member name="F:System.EnterpriseServices.XACTTRANSINFO.isoFlags">
      <summary>Specifies zero. This field is reserved.</summary>
    </member>
    <member name="F:System.EnterpriseServices.XACTTRANSINFO.isoLevel">
      <summary>Represents the isolation level associated with this transaction object. ISOLATIONLEVEL_UNSPECIFIED indicates that no isolation level was specified.</summary>
    </member>
    <member name="F:System.EnterpriseServices.XACTTRANSINFO.uow">
      <summary>Represents the unit of work associated with this transaction.</summary>
    </member>
    <member name="T:System.EnterpriseServices.CompensatingResourceManager.ApplicationCrmEnabledAttribute">
      <summary>Enables Compensating Resource Manger (CRM) on the tagged application.</summary>
    </member>
    <member name="M:System.EnterpriseServices.CompensatingResourceManager.ApplicationCrmEnabledAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.CompensatingResourceManager.ApplicationCrmEnabledAttribute" /> class, setting the <see cref="P:System.EnterpriseServices.CompensatingResourceManager.ApplicationCrmEnabledAttribute.Value" /> property to true.</summary>
    </member>
    <member name="M:System.EnterpriseServices.CompensatingResourceManager.ApplicationCrmEnabledAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.CompensatingResourceManager.ApplicationCrmEnabledAttribute" /> class, optionally setting the <see cref="P:System.EnterpriseServices.CompensatingResourceManager.ApplicationCrmEnabledAttribute.Value" /> property to false.</summary>
      <param name="val">true to enable Compensating Resource Manager (CRM); otherwise, false. </param>
    </member>
    <member name="P:System.EnterpriseServices.CompensatingResourceManager.ApplicationCrmEnabledAttribute.Value">
      <summary>Enables or disables Compensating Resource Manager (CRM) on the tagged application.</summary>
      <returns>true if CRM is enabled; otherwise, false. The default is true.</returns>
    </member>
    <member name="T:System.EnterpriseServices.CompensatingResourceManager.Clerk">
      <summary>Writes records of transactional actions to a log.</summary>
    </member>
    <member name="M:System.EnterpriseServices.CompensatingResourceManager.Clerk.#ctor(System.String,System.String,System.EnterpriseServices.CompensatingResourceManager.CompensatorOptions)">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.CompensatingResourceManager.Clerk" /> class.</summary>
      <param name="compensator">The name of the compensator. </param>
      <param name="description">The description of the compensator. </param>
      <param name="flags">A bitwise combination of the <see cref="T:System.EnterpriseServices.CompensatingResourceManager.CompensatorOptions" /> values. </param>
    </member>
    <member name="M:System.EnterpriseServices.CompensatingResourceManager.Clerk.#ctor(System.Type,System.String,System.EnterpriseServices.CompensatingResourceManager.CompensatorOptions)">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.CompensatingResourceManager.Clerk" /> class.</summary>
      <param name="compensator">A type that represents the compensator. </param>
      <param name="description">The description of the compensator. </param>
      <param name="flags">A bitwise combination of the <see cref="T:System.EnterpriseServices.CompensatingResourceManager.CompensatorOptions" /> values. </param>
    </member>
    <member name="M:System.EnterpriseServices.CompensatingResourceManager.Clerk.ForceLog">
      <summary>Forces all log records to disk.</summary>
    </member>
    <member name="M:System.EnterpriseServices.CompensatingResourceManager.Clerk.ForceTransactionToAbort">
      <summary>Performs an immediate abort call on the transaction.</summary>
    </member>
    <member name="M:System.EnterpriseServices.CompensatingResourceManager.Clerk.ForgetLogRecord">
      <summary>Does not deliver the last log record that was written by this instance of this interface.</summary>
    </member>
    <member name="P:System.EnterpriseServices.CompensatingResourceManager.Clerk.LogRecordCount">
      <summary>Gets the number of log records.</summary>
      <returns>The number of log records.</returns>
    </member>
    <member name="P:System.EnterpriseServices.CompensatingResourceManager.Clerk.TransactionUOW">
      <summary>Gets a value representing the transaction unit of work (UOW).</summary>
      <returns>A GUID representing the UOW.</returns>
    </member>
    <member name="M:System.EnterpriseServices.CompensatingResourceManager.Clerk.WriteLogRecord(System.Object)">
      <summary>Writes unstructured log records to the log.</summary>
      <param name="record">The log record to write to the log. </param>
    </member>
    <member name="T:System.EnterpriseServices.CompensatingResourceManager.ClerkInfo">
      <summary>Contains information describing an active Compensating Resource Manager (CRM) Clerk object.</summary>
    </member>
    <member name="P:System.EnterpriseServices.CompensatingResourceManager.ClerkInfo.ActivityId">
      <summary>Gets the activity ID of the current Compensating Resource Manager (CRM) Worker.</summary>
      <returns>Gets the activity ID of the current Compensating Resource Manager (CRM) Worker.</returns>
    </member>
    <member name="P:System.EnterpriseServices.CompensatingResourceManager.ClerkInfo.Clerk">
      <summary>Gets <see cref="F:System.Runtime.InteropServices.UnmanagedType.IUnknown" /> for the current Clerk.</summary>
      <returns>
        <see cref="F:System.Runtime.InteropServices.UnmanagedType.IUnknown" /> for the current Clerk.</returns>
    </member>
    <member name="P:System.EnterpriseServices.CompensatingResourceManager.ClerkInfo.Compensator">
      <summary>Gets the ProgId of the Compensating Resource Manager (CRM) Compensator for the current CRM Clerk.</summary>
      <returns>The ProgId of the CRM Compensator for the current CRM Clerk.</returns>
    </member>
    <member name="P:System.EnterpriseServices.CompensatingResourceManager.ClerkInfo.Description">
      <summary>Gets the description of the Compensating Resource Manager (CRM) Compensator for the current CRM Clerk. The description string is the string that was provided by the ICrmLogControl::RegisterCompensator method.</summary>
      <returns>The description of the CRM Compensator for the current CRM Clerk.</returns>
    </member>
    <member name="P:System.EnterpriseServices.CompensatingResourceManager.ClerkInfo.InstanceId">
      <summary>Gets the instance class ID (CLSID) of the current Compensating Resource Manager (CRM) Clerk.</summary>
      <returns>The instance CLSID of the current CRM Clerk.</returns>
    </member>
    <member name="P:System.EnterpriseServices.CompensatingResourceManager.ClerkInfo.TransactionUOW">
      <summary>Gets the unit of work (UOW) of the transaction for the current Compensating Resource Manager (CRM) Clerk.</summary>
      <returns>The UOW of the transaction for the current CRM Clerk.</returns>
    </member>
    <member name="T:System.EnterpriseServices.CompensatingResourceManager.ClerkMonitor">
      <summary>Contains a snapshot of all Clerks active in the process.</summary>
    </member>
    <member name="M:System.EnterpriseServices.CompensatingResourceManager.ClerkMonitor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.CompensatingResourceManager.ClerkMonitor" /> class.</summary>
    </member>
    <member name="P:System.EnterpriseServices.CompensatingResourceManager.ClerkMonitor.Count">
      <summary>Gets the count of the Clerk monitors in the Compensating Resource Manager (CRM) monitor collection.</summary>
      <returns>The number of Clerk monitors in the CRM monitor collection.</returns>
    </member>
    <member name="M:System.EnterpriseServices.CompensatingResourceManager.ClerkMonitor.GetEnumerator">
      <summary>Returns the enumeration of the clerks in the Compensating Resource Manager (CRM) monitor collection.</summary>
      <returns>An enumerator describing the clerks in the collection.</returns>
    </member>
    <member name="P:System.EnterpriseServices.CompensatingResourceManager.ClerkMonitor.Item(System.Int32)">
      <summary>Gets the <see cref="T:System.EnterpriseServices.CompensatingResourceManager.ClerkInfo" /> object for this <see cref="T:System.EnterpriseServices.CompensatingResourceManager.ClerkMonitor" />.</summary>
      <returns>The <see cref="T:System.EnterpriseServices.CompensatingResourceManager.ClerkInfo" /> object for this <see cref="T:System.EnterpriseServices.CompensatingResourceManager.ClerkMonitor" />.</returns>
      <param name="index">The integer index that identifies the <see cref="T:System.EnterpriseServices.CompensatingResourceManager.ClerkMonitor" />. </param>
    </member>
    <member name="P:System.EnterpriseServices.CompensatingResourceManager.ClerkMonitor.Item(System.String)">
      <summary>Gets the <see cref="T:System.EnterpriseServices.CompensatingResourceManager.ClerkInfo" /> object for this <see cref="T:System.EnterpriseServices.CompensatingResourceManager.ClerkMonitor" />.</summary>
      <returns>The <see cref="T:System.EnterpriseServices.CompensatingResourceManager.ClerkInfo" /> object for this <see cref="T:System.EnterpriseServices.CompensatingResourceManager.ClerkMonitor" />.</returns>
      <param name="index">The numeric index that identifies the <see cref="T:System.EnterpriseServices.CompensatingResourceManager.ClerkMonitor" />. </param>
    </member>
    <member name="M:System.EnterpriseServices.CompensatingResourceManager.ClerkMonitor.Populate">
      <summary>Gets the Clerks collection object, which is a snapshot of the current state of the Clerks.</summary>
    </member>
    <member name="T:System.EnterpriseServices.CompensatingResourceManager.Compensator">
      <summary>Represents the base class for all Compensating Resource Manager (CRM) Compensators.</summary>
    </member>
    <member name="M:System.EnterpriseServices.CompensatingResourceManager.Compensator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.CompensatingResourceManager.Compensator" /> class.</summary>
    </member>
    <member name="M:System.EnterpriseServices.CompensatingResourceManager.Compensator.AbortRecord(System.EnterpriseServices.CompensatingResourceManager.LogRecord)">
      <summary>Delivers a log record to the Compensating Resource Manager (CRM) Compensator during the abort phase.</summary>
      <returns>true if the delivered record should be forgotten; otherwise, false.</returns>
      <param name="rec">The log record to be delivered. </param>
    </member>
    <member name="M:System.EnterpriseServices.CompensatingResourceManager.Compensator.BeginAbort(System.Boolean)">
      <summary>Notifies the Compensating Resource Manager (CRM) Compensator of the abort phase of the transaction completion, and the upcoming delivery of records.</summary>
      <param name="fRecovery">true to begin abort phase; otherwise, false. </param>
    </member>
    <member name="M:System.EnterpriseServices.CompensatingResourceManager.Compensator.BeginCommit(System.Boolean)">
      <summary>Notifies the Compensating Resource Manager (CRM) Compensator of the commit phase of the transaction completion and the upcoming delivery of records.</summary>
      <param name="fRecovery">true to begin commit phase; otherwise, false. </param>
    </member>
    <member name="M:System.EnterpriseServices.CompensatingResourceManager.Compensator.BeginPrepare">
      <summary>Notifies the Compensating Resource Manager (CRM) Compensator of the prepare phase of the transaction completion and the upcoming delivery of records.</summary>
    </member>
    <member name="P:System.EnterpriseServices.CompensatingResourceManager.Compensator.Clerk">
      <summary>Gets a value representing the Compensating Resource Manager (CRM) <see cref="T:System.EnterpriseServices.CompensatingResourceManager.Clerk" /> object.</summary>
      <returns>The <see cref="T:System.EnterpriseServices.CompensatingResourceManager.Clerk" /> object.</returns>
    </member>
    <member name="M:System.EnterpriseServices.CompensatingResourceManager.Compensator.CommitRecord(System.EnterpriseServices.CompensatingResourceManager.LogRecord)">
      <summary>Delivers a log record in forward order during the commit phase.</summary>
      <returns>true if the delivered record should be forgotten; otherwise, false.</returns>
      <param name="rec">The log record to forward. </param>
    </member>
    <member name="M:System.EnterpriseServices.CompensatingResourceManager.Compensator.EndAbort">
      <summary>Notifies the Compensating Resource Manager (CRM) Compensator that it has received all the log records available during the abort phase.</summary>
    </member>
    <member name="M:System.EnterpriseServices.CompensatingResourceManager.Compensator.EndCommit">
      <summary>Notifies the Compensating Resource Manager (CRM) Compensator that it has delivered all the log records available during the commit phase.</summary>
    </member>
    <member name="M:System.EnterpriseServices.CompensatingResourceManager.Compensator.EndPrepare">
      <summary>Notifies the Compensating Resource Manager (CRM) Compensator that it has had all the log records available during the prepare phase.</summary>
      <returns>true if successful; otherwise, false.</returns>
    </member>
    <member name="M:System.EnterpriseServices.CompensatingResourceManager.Compensator.PrepareRecord(System.EnterpriseServices.CompensatingResourceManager.LogRecord)">
      <summary>Delivers a log record in forward order during the prepare phase.</summary>
      <returns>true if the delivered record should be forgotten; otherwise, false.</returns>
      <param name="rec">The log record to forward. </param>
    </member>
    <member name="T:System.EnterpriseServices.CompensatingResourceManager.CompensatorOptions">
      <summary>Specifies flags that control which phases of transaction completion should be received by the Compensating Resource Manager (CRM) Compensator, and whether recovery should fail if questionable transactions remain after recovery has been attempted.</summary>
    </member>
    <member name="F:System.EnterpriseServices.CompensatingResourceManager.CompensatorOptions.PreparePhase">
      <summary>Represents the prepare phase.</summary>
    </member>
    <member name="F:System.EnterpriseServices.CompensatingResourceManager.CompensatorOptions.CommitPhase">
      <summary>Represents the commit phase.</summary>
    </member>
    <member name="F:System.EnterpriseServices.CompensatingResourceManager.CompensatorOptions.AbortPhase">
      <summary>Represents the abort phase.</summary>
    </member>
    <member name="F:System.EnterpriseServices.CompensatingResourceManager.CompensatorOptions.AllPhases">
      <summary>Represents all phases.</summary>
    </member>
    <member name="F:System.EnterpriseServices.CompensatingResourceManager.CompensatorOptions.FailIfInDoubtsRemain">
      <summary>Fails if in-doubt transactions remain after recovery has been attempted.</summary>
    </member>
    <member name="T:System.EnterpriseServices.CompensatingResourceManager.LogRecord">
      <summary>Represents an unstructured log record delivered as a COM+ CrmLogRecordRead structure. This class cannot be inherited.</summary>
    </member>
    <member name="P:System.EnterpriseServices.CompensatingResourceManager.LogRecord.Flags">
      <summary>Gets a value that indicates when the log record was written.</summary>
      <returns>A bitwise combination of the <see cref="T:System.EnterpriseServices.CompensatingResourceManager.LogRecordFlags" /> values which provides information about when this record was written.</returns>
    </member>
    <member name="P:System.EnterpriseServices.CompensatingResourceManager.LogRecord.Record">
      <summary>Gets the log record user data.</summary>
      <returns>A single BLOB that contains the user data.</returns>
    </member>
    <member name="P:System.EnterpriseServices.CompensatingResourceManager.LogRecord.Sequence">
      <summary>The sequence number of the log record.</summary>
      <returns>An integer value that specifies the sequence number of the log record.</returns>
    </member>
    <member name="T:System.EnterpriseServices.CompensatingResourceManager.LogRecordFlags">
      <summary>Describes the origin of a Compensating Resource Manager (CRM) log record.</summary>
    </member>
    <member name="F:System.EnterpriseServices.CompensatingResourceManager.LogRecordFlags.ForgetTarget">
      <summary>Indicates the delivered record should be forgotten.</summary>
    </member>
    <member name="F:System.EnterpriseServices.CompensatingResourceManager.LogRecordFlags.WrittenDuringPrepare">
      <summary>Log record was written during prepare.</summary>
    </member>
    <member name="F:System.EnterpriseServices.CompensatingResourceManager.LogRecordFlags.WrittenDuringCommit">
      <summary>Log record was written during commit.</summary>
    </member>
    <member name="F:System.EnterpriseServices.CompensatingResourceManager.LogRecordFlags.WrittenDuringAbort">
      <summary>Log record was written during abort.</summary>
    </member>
    <member name="F:System.EnterpriseServices.CompensatingResourceManager.LogRecordFlags.WrittenDurringRecovery">
      <summary>Log record was written during recovery.</summary>
    </member>
    <member name="F:System.EnterpriseServices.CompensatingResourceManager.LogRecordFlags.WrittenDuringReplay">
      <summary>Log record was written during replay.</summary>
    </member>
    <member name="F:System.EnterpriseServices.CompensatingResourceManager.LogRecordFlags.ReplayInProgress">
      <summary>Log record was written when replay was in progress.</summary>
    </member>
    <member name="T:System.EnterpriseServices.CompensatingResourceManager.TransactionState">
      <summary>Specifies the state of the current Compensating Resource Manager (CRM) transaction.</summary>
    </member>
    <member name="F:System.EnterpriseServices.CompensatingResourceManager.TransactionState.Active">
      <summary>The transaction is active.</summary>
    </member>
    <member name="F:System.EnterpriseServices.CompensatingResourceManager.TransactionState.Committed">
      <summary>The transaction is commited.</summary>
    </member>
    <member name="F:System.EnterpriseServices.CompensatingResourceManager.TransactionState.Aborted">
      <summary>The transaction is aborted.</summary>
    </member>
    <member name="F:System.EnterpriseServices.CompensatingResourceManager.TransactionState.Indoubt">
      <summary>The transaction is in-doubt.</summary>
    </member>
    <member name="T:System.EnterpriseServices.Internal.AppDomainHelper">
      <summary>Switches into the given application domain, which the object should be bound to, and does a callback on the given function.</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.AppDomainHelper.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.Internal.AppDomainHelper" /> class.</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.AppDomainHelper.Finalize">
      <summary>Releases unmanaged resources and performs other cleanup operations before the <see cref="T:System.ComponentModel.Component" /> is reclaimed by garbage collection.</summary>
    </member>
    <member name="T:System.EnterpriseServices.Internal.AssemblyLocator">
      <summary>Locates an assembly and returns information about its modules.</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.AssemblyLocator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.Internal.AssemblyLocator" /> class.</summary>
    </member>
    <member name="T:System.EnterpriseServices.Internal.ClientRemotingConfig">
      <summary>Defines a static <see cref="M:System.EnterpriseServices.Internal.ClientRemotingConfig.Write(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" /> method that creates a client remoting configuration file for a client type library.</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.ClientRemotingConfig.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.Internal.ClientRemotingConfig" /> class.</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.ClientRemotingConfig.Write(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
      <summary>Creates a client remoting configuration file for a client type library in a SOAP-enabled COM+ application.</summary>
      <returns>true if the client remoting configuration file was successfully created; otherwise false.</returns>
      <param name="DestinationDirectory">The folder in which to create the configuration file.</param>
      <param name="VRoot">The name of the virtual root.</param>
      <param name="BaseUrl">The base URL that contains the virtual root.</param>
      <param name="AssemblyName">The display name of the assembly that contains common language runtime (CLR) metadata corresponding to the type library.</param>
      <param name="TypeName">The fully qualified name of the assembly that contains CLR metadata corresponding to the type library.</param>
      <param name="ProgId">The programmatic identifier of the class.</param>
      <param name="Mode">The activation mode.</param>
      <param name="Transport">Not used. Specify null for this parameter.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="RemotingConfiguration" />
      </PermissionSet>
    </member>
    <member name="T:System.EnterpriseServices.Internal.ClrObjectFactory">
      <summary>Activates SOAP-enabled COM+ application proxies from a client.</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.ClrObjectFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.Internal.ClrObjectFactory" /> class.</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.ClrObjectFactory.CreateFromAssembly(System.String,System.String,System.String)">
      <summary>Activates a remote assembly through .NET remoting, using the assembly's configuration file.</summary>
      <returns>An instance of the <see cref="T:System.Object" /> that represents the type, with culture, arguments, and binding and activation attributes set to null, or null if the <paramref name="TypeName" /> parameter is not found.</returns>
      <param name="AssemblyName">The name of the assembly to activate. </param>
      <param name="TypeName">The name of the type to activate. </param>
      <param name="Mode">Not used. </param>
      <exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">The class is not registered. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, RemotingConfiguration" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.ClrObjectFactory.CreateFromMailbox(System.String,System.String)">
      <summary>Activates a remote assembly through .NET remoting, using the remote assembly's mailbox. Currently not implemented; throws a <see cref="T:System.Runtime.InteropServices.COMException" /> if called.</summary>
      <returns>This method throws an exception if called.</returns>
      <param name="Mailbox">A mailbox on the Web service. </param>
      <param name="Mode">Not used. </param>
      <exception cref="T:System.Runtime.InteropServices.COMException">Simple Mail Transfer Protocol (SMTP) is not implemented. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.ClrObjectFactory.CreateFromVroot(System.String,System.String)">
      <summary>Activates a remote assembly through .NET remoting, using the virtual root URL of the remote assembly.</summary>
      <returns>An instance of the <see cref="T:System.Object" /> representing the type, with culture, arguments, and binding and activation attributes set to null, or null if the assembly identified by the <paramref name="VrootUrl" /> parameter is not found.</returns>
      <param name="VrootUrl">The virtual root URL of the object to be activated. </param>
      <param name="Mode">Not used. </param>
      <exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">The thread token could not be opened. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.ClrObjectFactory.CreateFromWsdl(System.String,System.String)">
      <summary>Activates a remote assembly through .NET remoting, using the Web Services Description Language (WSDL) of the XML Web service.</summary>
      <returns>An instance of the <see cref="T:System.Object" /> representing the type, with culture, arguments, and binding and activation attributes set to null, or null if the assembly identified by the <paramref name="WsdlUrl" /> parameter is not found.</returns>
      <param name="WsdlUrl">The WSDL URL of the Web service. </param>
      <param name="Mode">Not used. </param>
      <exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">The thread token could not be opened. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="T:System.EnterpriseServices.Internal.ComManagedImportUtil">
      <summary>Identifies and installs components in the COM+ catalog.</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.ComManagedImportUtil.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.Internal.ComManagedImportUtil" /> class.</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.ComManagedImportUtil.GetComponentInfo(System.String,System.String@,System.String@)">
      <summary>Gets the component information from the assembly.</summary>
      <param name="assemblyPath">The path to the assembly. </param>
      <param name="numComponents">When this method returns, this parameter contains the number of components in the assembly. </param>
      <param name="componentInfo">When this method returns, this parameter contains the information about the components. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyPath" /> is an empty string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.-or- The system could not retrieve the absolute path. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyPath" /> is null. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="assemblyPath" /> contains a colon (":"). </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.ComManagedImportUtil.InstallAssembly(System.String,System.String,System.String)">
      <summary>Installs an assembly into a COM+ application.</summary>
      <param name="asmpath">The path for the assembly. </param>
      <param name="parname">The COM+ partition name. </param>
      <param name="appname">The COM+ application name. </param>
      <exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception>
      <exception cref="T:System.EnterpriseServices.RegistrationException">The input assembly does not have a strong name. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.EnterpriseServices.Internal.ComSoapPublishError">
      <summary>Error handler for publishing SOAP-enabled services in COM+ applications.</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.ComSoapPublishError.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.Internal.ComSoapPublishError" /> class.</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.ComSoapPublishError.Report(System.String)">
      <summary>Writes to an event log an error encountered while publishing SOAP-enabled COM interfaces in COM+ applications.</summary>
      <param name="s">An error message to be written to the event log.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="T:System.EnterpriseServices.Internal.GenerateMetadata">
      <summary>Generates common language runtime (CLR) metadata for a COM+ component.</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.GenerateMetadata.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.Internal.GenerateMetadata" /> class.</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.GenerateMetadata.Generate(System.String,System.String)">
      <summary>Generates, or locates, an assembly that contains common language runtime (CLR) metadata for a COM+ component represented by the specified type library.</summary>
      <returns>The generated assembly name; otherwise, an empty string if the inputs are invalid.</returns>
      <param name="strSrcTypeLib">The name of the type library for which to generate an assembly.</param>
      <param name="outPath">The folder in which to generate an assembly or to locate an already existing assembly.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.GenerateMetadata.GenerateMetaData(System.String,System.String,System.Byte[],System.Reflection.StrongNameKeyPair)">
      <summary>Generates, or locates, an assembly that contains common language runtime (CLR) metadata for a COM+ component represented by the specified type library, signs the assembly with a strong-named key pair, and installs it in the global assembly cache.</summary>
      <returns>The generated assembly name; otherwise, an empty string if the inputs are invalid.</returns>
      <param name="strSrcTypeLib">The name of the type library for which to generate an assembly.</param>
      <param name="outPath">The folder in which to generate an assembly or to locate an already existing assembly.</param>
      <param name="PublicKey">A public key used to import type library information into an assembly.</param>
      <param name="KeyPair">A strong-named key pair used to sign the generated assembly.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.GenerateMetadata.GenerateSigned(System.String,System.String,System.Boolean,System.String@)">
      <summary>Generates, or locates, an assembly that contains common language runtime (CLR) metadata for a COM+ component represented by the specified type library, signs the assembly with a strong-named key pair, and installs it in the global assembly cache.</summary>
      <returns>The generated assembly name; otherwise, an empty string if the inputs are invalid.</returns>
      <param name="strSrcTypeLib">The name of the type library for which to generate an assembly.</param>
      <param name="outPath">The folder in which to generate an assembly or to locate an already existing assembly.</param>
      <param name="InstallGac">Ignored. </param>
      <param name="Error">A string to which an error message can be written.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.GenerateMetadata.SearchPath(System.String,System.String,System.String,System.Int32,System.String,System.Int32[])">
      <summary>Searches for a specified file in a specified path.</summary>
      <returns>If the search succeeds, the return value is the length of the string copied to <paramref name="buffer" />. If the search fails, the return value is 0.</returns>
      <param name="path">The path to be searched for the file.</param>
      <param name="fileName">The name of the file for which to search.</param>
      <param name="extension">An extension to be added to the file name when searching for the file.</param>
      <param name="numBufferChars">The size of the buffer that receives the valid path and file name.</param>
      <param name="buffer">The buffer that receives the path and file name of the file found.</param>
      <param name="filePart">The variable that receives the address of the last component of the valid path and file name.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="T:System.EnterpriseServices.Internal.IClrObjectFactory">
      <summary>Activates SOAP-enabled COM+ application proxies from a client.</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IClrObjectFactory.CreateFromAssembly(System.String,System.String,System.String)">
      <summary>Activates a remote assembly through .NET remoting, using the assembly's configuration file.</summary>
      <returns>An instance of the <see cref="T:System.Object" /> representing the type, with culture, arguments, and binding and activation attributes set to null, or null if the <paramref name="type" /> parameter is not found.</returns>
      <param name="assembly">The name of the assembly to activate. </param>
      <param name="type">The name of the type to activate. </param>
      <param name="mode">Not used. </param>
      <exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">The class is not registered. </exception>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IClrObjectFactory.CreateFromMailbox(System.String,System.String)">
      <summary>Activates a remote assembly through .NET remoting, using the remote assembly's mailbox. Currently not implemented; throws a <see cref="T:System.Runtime.InteropServices.COMException" /> if called.</summary>
      <returns>This method throws an exception if called.</returns>
      <param name="Mailbox">A mailbox on the Web service. </param>
      <param name="Mode">Not used. </param>
      <exception cref="T:System.Runtime.InteropServices.COMException">Simple Mail Transfer Protocol (SMTP) is not implemented. </exception>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IClrObjectFactory.CreateFromVroot(System.String,System.String)">
      <summary>Activates a remote assembly through .NET remoting, using the virtual root URL of the remote assembly.</summary>
      <returns>An instance of the <see cref="T:System.Object" /> representing the type, with culture, arguments, and binding and activation attributes set to null, or null if the assembly identified by the <paramref name="VrootUrl" /> parameter is not found.</returns>
      <param name="VrootUrl">The virtual root URL of the remote object. </param>
      <param name="Mode">Not used. </param>
      <exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">The thread token could not be opened. </exception>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IClrObjectFactory.CreateFromWsdl(System.String,System.String)">
      <summary>Activates a remote assembly through .NET remoting, using the Web Services Description Language (WSDL) of the XML Web service.</summary>
      <returns>An instance of the <see cref="T:System.Object" /> representing the type, with culture, arguments, and binding and activation attributes set to null, or null if the assembly identified by the <paramref name="WsdlUrl" /> parameter is not found.</returns>
      <param name="WsdlUrl">The WSDL URL of the Web service. </param>
      <param name="Mode">Not used. </param>
      <exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">The thread token could not be opened. </exception>
    </member>
    <member name="T:System.EnterpriseServices.Internal.IComManagedImportUtil">
      <summary>Identifies and installs components in the COM+ catalog.</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IComManagedImportUtil.GetComponentInfo(System.String,System.String@,System.String@)">
      <summary>Gets the component information from the assembly.</summary>
      <param name="assemblyPath">The path to the assembly. </param>
      <param name="numComponents">When this method returns, this parameter contains the number of components in the assembly. </param>
      <param name="componentInfo">When this method returns, this parameter contains the information about the components. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyPath" /> is an empty string (""), contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.-or- The system could not retrieve the absolute path. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyPath" /> is null. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="assemblyPath" /> contains a colon (":"). </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IComManagedImportUtil.InstallAssembly(System.String,System.String,System.String)">
      <summary>Installs an assembly into a COM+ application.</summary>
      <param name="filename">The path for the assembly. </param>
      <param name="parname">The COM+ partition name. </param>
      <param name="appname">The COM+ application name. </param>
      <exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception>
      <exception cref="T:System.EnterpriseServices.RegistrationException">The input assembly does not have a strong name. </exception>
    </member>
    <member name="T:System.EnterpriseServices.Internal.IComSoapIISVRoot">
      <summary>Interface definition for creating and deleting Internet Information Services (IIS) 6.0 virtual roots.</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IComSoapIISVRoot.Create(System.String,System.String,System.String,System.String@)">
      <summary>Creates an Internet Information Services (IIS) virtual root.</summary>
      <param name="RootWeb">The root Web server.</param>
      <param name="PhysicalDirectory">The physical path of the virtual root, which corresponds to <paramref name="PhysicalPath" /> from the <see cref="M:System.EnterpriseServices.Internal.IComSoapPublisher.CreateVirtualRoot(System.String,System.String,System.String@,System.String@,System.String@,System.String@)" /> method.</param>
      <param name="VirtualDirectory">The name of the virtual root, which corresponds to <paramref name="VirtualRoot" /> from the <see cref="M:System.EnterpriseServices.Internal.IComSoapPublisher.CreateVirtualRoot(System.String,System.String,System.String@,System.String@,System.String@,System.String@)" /> method.</param>
      <param name="Error">A string to which an error message can be written.</param>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IComSoapIISVRoot.Delete(System.String,System.String,System.String,System.String@)">
      <summary>Deletes an Internet Information Services (IIS) virtual root.</summary>
      <param name="RootWeb">The root Web server.</param>
      <param name="PhysicalDirectory">The physical path of the virtual root.</param>
      <param name="VirtualDirectory">The name of the virtual root.</param>
      <param name="Error">A string to which an error message can be written.</param>
    </member>
    <member name="T:System.EnterpriseServices.Internal.IComSoapMetadata">
      <summary>Specifies methods for generating common language runtime (CLR) metadata for a COM+ component.</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IComSoapMetadata.Generate(System.String,System.String)">
      <summary>Generates an assembly that contains common language runtime (CLR) metadata for a COM+ component represented by the specified type library.</summary>
      <returns>The generated assembly name.</returns>
      <param name="SrcTypeLibFileName">The name of the type library for which to generate an assembly.</param>
      <param name="OutPath">The folder in which to generate an assembly.</param>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IComSoapMetadata.GenerateSigned(System.String,System.String,System.Boolean,System.String@)">
      <summary>Generates an assembly that contains common language runtime (CLR) metadata for a COM+ component represented by the specified type library, signs the assembly with a strong-named key pair, and installs it in the global assembly cache.</summary>
      <returns>The generated assembly name.</returns>
      <param name="SrcTypeLibFileName">The name of the type library for which to generate an assembly.</param>
      <param name="OutPath">The folder in which to generate an assembly.</param>
      <param name="InstallGac">A flag that indicates whether to install the assembly in the global assembly cache.</param>
      <param name="Error">A string to which an error message can be written.</param>
    </member>
    <member name="T:System.EnterpriseServices.Internal.IComSoapPublisher">
      <summary>Publishes COM interfaces for SOAP-enabled COM+ applications.</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IComSoapPublisher.CreateMailBox(System.String,System.String,System.String@,System.String@,System.String@,System.String@)">
      <summary>Creates a SOAP-enabled COM+ application mailbox at a specified URL. Not fully implemented.</summary>
      <param name="RootMailServer">The URL for the root mail server. </param>
      <param name="MailBox">The mailbox to create. </param>
      <param name="SmtpName">When this method returns, this parameter contains the name of the Simple Mail Transfer Protocol (SMTP) server containing the mailbox. </param>
      <param name="Domain">When this method returns, this parameter contains the domain of the SMTP server. </param>
      <param name="PhysicalPath">When this method returns, this parameter contains the file system path for the mailbox. </param>
      <param name="Error">When this method returns, this parameter contains an error message if a problem was encountered. </param>
      <exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IComSoapPublisher.CreateVirtualRoot(System.String,System.String,System.String@,System.String@,System.String@,System.String@)">
      <summary>Creates a SOAP-enabled COM+ application virtual root.</summary>
      <param name="Operation">The operation to perform. </param>
      <param name="FullUrl">The complete URL address for the virtual root. </param>
      <param name="BaseUrl">When this method returns, this parameter contains the base URL address. </param>
      <param name="VirtualRoot">When this method returns, this parameter contains the name of the virtual root. </param>
      <param name="PhysicalPath">When this method returns, this parameter contains the file path for the virtual root. </param>
      <param name="Error">When this method returns, this parameter contains an error message if a problem was encountered. </param>
      <exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code.-or- The caller does not have permission to access Domain Name System (DNS) information. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="FullUrl" /> is null. </exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error is encountered when resolving the local host name. </exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="FullUrl" /> is empty.-or- The scheme specified in <paramref name="FullUrl" /> is invalid.-or- <paramref name="FullUrl" /> contains more than two consecutive slashes.-or- The password specified in <paramref name="FullUrl" /> is invalid.-or- The host name specified in <paramref name="FullUrl" /> is invalid.-or- The file name specified in <paramref name="FullUrl" /> is invalid. </exception>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IComSoapPublisher.DeleteMailBox(System.String,System.String,System.String@)">
      <summary>Deletes a SOAP-enabled COM+ application mailbox at a specified URL. Not fully implemented.</summary>
      <param name="RootMailServer">The URL for the root mail server. </param>
      <param name="MailBox">The mailbox to delete. </param>
      <param name="Error">When this method returns, this parameter contains an error message if a problem was encountered. </param>
      <exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IComSoapPublisher.DeleteVirtualRoot(System.String,System.String,System.String@)">
      <summary>Deletes a SOAP-enabled COM+ application virtual root. Not fully implemented.</summary>
      <param name="RootWebServer">The root Web server. </param>
      <param name="FullUrl">The complete URL address for the virtual root. </param>
      <param name="Error">When this method returns, this parameter contains an error message if a problem was encountered. </param>
      <exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IComSoapPublisher.GacInstall(System.String)">
      <summary>Installs an assembly in the global assembly cache.</summary>
      <param name="AssemblyPath">The file system path for the assembly. </param>
      <exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IComSoapPublisher.GacRemove(System.String)">
      <summary>Removes an assembly from the global assembly cache.</summary>
      <param name="AssemblyPath">The file system path for the assembly. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="AssemblyPath" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="AssemblyPath" /> is empty. </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="AssemblyPath" /> is not found. </exception>
      <exception cref="T:System.IO.FileLoadException">An assembly or module was loaded twice with two different evidences. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="AssemblyPath" /> is not a valid assembly. </exception>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IComSoapPublisher.GetAssemblyNameForCache(System.String,System.String@)">
      <summary>Returns the full path for a strong-named signed generated assembly in the SoapCache directory.</summary>
      <param name="TypeLibPath">The path for the file that contains the typelib. </param>
      <param name="CachePath">When this method returns, this parameter contains the full path of the proxy assembly in the SoapCache directory. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="TypeLibPath" /> is null. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">The file name is empty, contains only white spaces, or contains invalid characters. </exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to <paramref name="TypeLibPath" /> is denied. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="TypeLibPath" /> contains a colon (:) in the middle of the string. </exception>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IComSoapPublisher.GetTypeNameFromProgId(System.String,System.String)">
      <summary>Reflects over an assembly and returns the type name that matches the ProgID.</summary>
      <returns>The type name that matches the ProgID.</returns>
      <param name="AssemblyPath">The file system path for the assembly. </param>
      <param name="ProgId">The programmatic identifier of the class. </param>
      <exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IComSoapPublisher.ProcessClientTlb(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String@,System.String@,System.String@)">
      <summary>Processes a client type library, creating a configuration file on the client.</summary>
      <param name="ProgId">The programmatic identifier of the class. </param>
      <param name="SrcTlbPath">The path for the file that contains the typelib. </param>
      <param name="PhysicalPath">The Web application directory. </param>
      <param name="VRoot">The name of the virtual root. </param>
      <param name="BaseUrl">The base URL that contains the virtual root. </param>
      <param name="Mode">The activation mode. </param>
      <param name="Transport">Not used. Specify null for this parameter.</param>
      <param name="AssemblyName">When this method returns, this parameter contains the display name of the assembly. </param>
      <param name="TypeName">When this method returns, this parameter contains the fully-qualified type name of the assembly. </param>
      <param name="Error">When this method returns, this parameter contains an error message if a problem was encountered. </param>
      <exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IComSoapPublisher.ProcessServerTlb(System.String,System.String,System.String,System.String,System.String@,System.String@,System.String@)">
      <summary>Processes a server type library, either adding or deleting component entries to the Web.config and Default.disco files. Generates a proxy if necessary.</summary>
      <param name="ProgId">The programmatic identifier of the class. </param>
      <param name="SrcTlbPath">The path for the file that contains the type library. </param>
      <param name="PhysicalPath">The Web application directory. </param>
      <param name="Operation">The operation to perform. </param>
      <param name="AssemblyName">When this method returns, this parameter contains the display name of the assembly. </param>
      <param name="TypeName">When this method returns, this parameter contains the fully-qualified type name of the assembly. </param>
      <param name="Error">When this method returns, this parameter contains an error message if a problem was encountered. </param>
      <exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception>
      <exception cref="T:System.EnterpriseServices.ServicedComponentException">The <paramref name="SrcTlbPath" /> parameter referenced scrobj.dll; therefore, SOAP publication of script components is not supported. </exception>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IComSoapPublisher.RegisterAssembly(System.String)">
      <summary>Registers an assembly for COM interop.</summary>
      <param name="AssemblyPath">The file system path for the assembly. </param>
      <exception cref="T:System.EnterpriseServices.RegistrationException">The input assembly does not have a strong name. </exception>
      <exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code.-or- A codebase that does not start with "file://" was specified without the required <see cref="T:System.Net.WebPermission" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="AssemblyPath" /> is null. </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="AssemblyPath" /> is not found, or a file name extension is not specified. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="AssemblyPath" /> is not a valid assembly. </exception>
      <exception cref="T:System.IO.FileLoadException">An assembly or module was loaded twice with two different evidences, or the assembly name is longer than MAX_PATH characters. </exception>
      <exception cref="T:System.InvalidOperationException">A method marked with <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" /> is not static.-or- There is more than one method marked with <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" /> at a given level of the hierarchy.-or- The signature of the method marked with <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" /> is not valid. </exception>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IComSoapPublisher.UnRegisterAssembly(System.String)">
      <summary>Unregisters a COM interop assembly.</summary>
      <param name="AssemblyPath">The file system path for the assembly. </param>
      <exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code.-or- A codebase that does not start with "file://" was specified without the required <see cref="T:System.Net.WebPermission" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="AssemblyPath" /> is null. </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="AssemblyPath" /> is not found, or a file name extension is not specified. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="AssemblyPath" /> is not a valid assembly. </exception>
      <exception cref="T:System.IO.FileLoadException">An assembly or module was loaded twice with two different evidences, or the assembly name is longer than MAX_PATH characters. </exception>
      <exception cref="T:System.InvalidOperationException">A method marked with <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" /> is not static.-or- There is more than one method marked with <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" /> at a given level of the hierarchy.-or- The signature of the method marked with <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" /> is not valid. </exception>
    </member>
    <member name="T:System.EnterpriseServices.Internal.IISVirtualRoot">
      <summary>Creates and deletes Internet Information Services (IIS) 6.0 virtual roots.</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IISVirtualRoot.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.Internal.IISVirtualRoot" /> class.</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IISVirtualRoot.Create(System.String,System.String,System.String,System.String@)">
      <summary>Creates an Internet Information Services (IIS) virtual root.</summary>
      <param name="RootWeb">A string with the value "IIS://localhost/W3SVC/1/ROOT" representing the root Web server.</param>
      <param name="inPhysicalDirectory">The physical path of the virtual root, which corresponds to <paramref name="PhysicalPath" /> from the <see cref="M:System.EnterpriseServices.Internal.Publish.CreateVirtualRoot(System.String,System.String,System.String@,System.String@,System.String@,System.String@)" /> method.</param>
      <param name="VirtualDirectory">The name of the virtual root, which corresponds to <paramref name="VirtualRoot" /> from <see cref="M:System.EnterpriseServices.Internal.Publish.CreateVirtualRoot(System.String,System.String,System.String@,System.String@,System.String@,System.String@)" />.</param>
      <param name="Error">A string to which an error message can be written.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.DirectoryServices.DirectoryServicesPermission, System.DirectoryServices, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IISVirtualRoot.Delete(System.String,System.String,System.String,System.String@)">
      <summary>Deletes an Internet Information Services (IIS) virtual root.</summary>
      <param name="RootWeb">The root Web server, as specified by <paramref name="RootWebServer" /> from the <see cref="M:System.EnterpriseServices.Internal.IComSoapPublisher.DeleteVirtualRoot(System.String,System.String,System.String@)" /> method.</param>
      <param name="PhysicalDirectory">The physical path of the virtual root.</param>
      <param name="VirtualDirectory">The name of the virtual root.</param>
      <param name="Error">A string to which an error message can be written.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.DirectoryServices.DirectoryServicesPermission, System.DirectoryServices, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="T:System.EnterpriseServices.Internal.IServerWebConfig">
      <summary>Creates a Web.config file for a SOAP-enabled COM+ application and adds component entries to the file for COM interfaces being published in the application.</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IServerWebConfig.AddElement(System.String,System.String,System.String,System.String,System.String,System.String@)">
      <summary>Adds XML elements to a Web.config file for a COM interface being published in a SOAP-enabled COM+ application.</summary>
      <param name="FilePath">The path for the existing Web.config file.</param>
      <param name="AssemblyName">The name of the assembly that contains the type being added.</param>
      <param name="TypeName">The name of the type being added.</param>
      <param name="ProgId">The programmatic identifier for the type being added.</param>
      <param name="Mode">A string constant that corresponds to the name of a member from the <see cref="T:System.Runtime.Remoting.WellKnownObjectMode" /> enumeration, which indicates how a well-known object is activated.</param>
      <param name="Error">A string to which an error message can be written.</param>
    </member>
    <member name="M:System.EnterpriseServices.Internal.IServerWebConfig.Create(System.String,System.String,System.String@)">
      <summary>Creates a Web.config file for a SOAP-enabled COM+ application so that the file is ready to have XML elements added for COM interfaces being published.</summary>
      <param name="FilePath">The folder in which to create the configuration file.</param>
      <param name="FileRootName">The string value to which a config extension can be added (for example, Web for Web.config).</param>
      <param name="Error">A string to which an error message can be written.</param>
    </member>
    <member name="T:System.EnterpriseServices.Internal.ISoapClientImport">
      <summary>Imports authenticated, encrypted SOAP client proxies.</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.ISoapClientImport.ProcessClientTlbEx(System.String,System.String,System.String,System.String,System.String,System.String)">
      <summary>Creates a .NET remoting client configuration file that includes security and authentication options.</summary>
      <param name="progId">The programmatic identifier of the class. If an empty string (""), this method returns without doing anything. </param>
      <param name="virtualRoot">The name of the virtual root. </param>
      <param name="baseUrl">The base URL that contains the virtual root. </param>
      <param name="authentication">The type of ASP.NET authentication to use. </param>
      <param name="assemblyName">The name of the assembly. </param>
      <param name="typeName">The name of the type. </param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="T:System.EnterpriseServices.Internal.ISoapServerTlb">
      <summary>Processes authenticated, encrypted SOAP components on servers.</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.ISoapServerTlb.AddServerTlb(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String@,System.String@)">
      <summary>Adds the entries for a server type library to the Web.config and Default.disco files, depending on security options, and generates a proxy if necessary.</summary>
      <param name="progId">The programmatic identifier of the class. </param>
      <param name="classId">The class identifier (CLSID) for the type library. </param>
      <param name="interfaceId">The IID for the type library. </param>
      <param name="srcTlbPath">The path for the file containing the type library. </param>
      <param name="rootWebServer">The root Web server. </param>
      <param name="baseUrl">The base URL that contains the virtual root. </param>
      <param name="virtualRoot">The name of the virtual root. </param>
      <param name="clientActivated">true if client activated; otherwise, false. </param>
      <param name="wellKnown">true if well-known; otherwise, false. </param>
      <param name="discoFile">true if a discovery file; otherwise, false. </param>
      <param name="operation">The operation to perform. Specify either "delete" or an empty string. </param>
      <param name="assemblyName">When this method returns, contains the name of the assembly. </param>
      <param name="typeName">When this method returns, contains the type of the assembly. </param>
      <exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The SOAP utility is not available. </exception>
      <exception cref="T:System.EnterpriseServices.ServicedComponentException">The call to get the system directory failed. </exception>
    </member>
    <member name="M:System.EnterpriseServices.Internal.ISoapServerTlb.DeleteServerTlb(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
      <summary>Removes entries for a server type library from the Web.config and Default.disco files, depending on security options.</summary>
      <param name="progId">The programmatic identifier of the class. </param>
      <param name="classId">The class identifier (CLSID) for the type library. </param>
      <param name="interfaceId">The IID for the type library. </param>
      <param name="srcTlbPath">The path for the file containing the type library. </param>
      <param name="rootWebServer">The root Web server. </param>
      <param name="baseUrl">The base URL that contains the virtual root. </param>
      <param name="virtualRoot">The name of the virtual root. </param>
      <param name="operation">Not used. Specify null for this parameter.</param>
      <param name="assemblyName">The name of the assembly. </param>
      <param name="typeName">The type of the assembly. </param>
      <exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The SOAP utility is not available. </exception>
    </member>
    <member name="T:System.EnterpriseServices.Internal.ISoapServerVRoot">
      <summary>Publishes authenticated, encrypted SOAP virtual roots on servers.</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.ISoapServerVRoot.CreateVirtualRootEx(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String@,System.String@,System.String@)">
      <summary>Creates a SOAP virtual root with security options.</summary>
      <param name="rootWebServer">The root Web server. </param>
      <param name="inBaseUrl">The base URL that contains the virtual root. </param>
      <param name="inVirtualRoot">The name of the virtual root. </param>
      <param name="homePage">true if the EnableDefaultDoc property is to be set; otherwise, false.</param>
      <param name="discoFile">true if a default discovery file is to be created; false if there is to be no discovery file. If false and a Default.disco file exists, the file is deleted. </param>
      <param name="secureSockets">true if SSL encryption is required; otherwise, false.</param>
      <param name="authentication">Specify "anonymous" if no authentication is to be used (anonymous user). Otherwise, specify an empty string.</param>
      <param name="operation">Not used. Specify null for this parameter.</param>
      <param name="baseUrl">When this method returns, this parameter contains the base URL. </param>
      <param name="virtualRoot">When this method returns, this parameter contains the name of the virtual root. </param>
      <param name="physicalPath">When this method returns, this parameter contains the disk address of the Virtual Root directory. </param>
      <exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The SOAP utility is not available. </exception>
    </member>
    <member name="M:System.EnterpriseServices.Internal.ISoapServerVRoot.DeleteVirtualRootEx(System.String,System.String,System.String)">
      <summary>Deletes a virtual root. Not fully implemented.</summary>
      <param name="rootWebServer">The root Web server. </param>
      <param name="baseUrl">The base URL that contains the virtual root. </param>
      <param name="virtualRoot">The name of the virtual root. </param>
      <exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The SOAP utility is not available. </exception>
      <exception cref="T:System.EnterpriseServices.ServicedComponentException">The call to identify the system directory failed. </exception>
    </member>
    <member name="M:System.EnterpriseServices.Internal.ISoapServerVRoot.GetVirtualRootStatus(System.String,System.String,System.String,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
      <summary>Returns the security status of an existing SOAP virtual root.</summary>
      <param name="rootWebServer">The root Web server. </param>
      <param name="inBaseUrl">The base URL that contains the virtual root. </param>
      <param name="inVirtualRoot">The name of the virtual root. </param>
      <param name="exists">When this method returns, this parameter contains a true if the virtual directory exists; otherwise, false.</param>
      <param name="secureSockets">When this method returns, this parameter contains a true if SSL encryption is required; otherwise, false.</param>
      <param name="windowsAuth">When this method returns, this parameter contains true if Windows authentication is set, otherwise, false.</param>
      <param name="anonymous">When this method returns, this parameter contains true if no authentication is set (anonymous user); otherwise, false.</param>
      <param name="homePage">When this method returns, this parameter contains a true if the Virtual Root directory's EnableDefaultDoc property is set; otherwise, false.</param>
      <param name="discoFile">When this method returns, this parameter contains a true if a Default.disco file exists; otherwise, false.</param>
      <param name="physicalPath">When this method returns, this parameter contains the disk address of the Virtual Root directory. </param>
      <param name="baseUrl">When this method returns, this parameter contains the base URL. </param>
      <param name="virtualRoot">When this method returns, this parameter contains the name of the virtual root. </param>
    </member>
    <member name="T:System.EnterpriseServices.Internal.ISoapUtility">
      <summary>Provides utilities to support the exporting of COM+ SOAP-enabled application proxies by the server and the importing of the proxies by the client.</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.ISoapUtility.GetServerBinPath(System.String,System.String,System.String,System.String@)">
      <summary>Returns the path for the SOAP virtual root bin directory.</summary>
      <param name="rootWebServer">The root Web server. </param>
      <param name="inBaseUrl">The base URL address. </param>
      <param name="inVirtualRoot">The name of the virtual root. </param>
      <param name="binPath">When this method returns, this parameter contains the file path for the SOAP virtual root bin directory. </param>
      <exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The SOAP utility is not available. </exception>
      <exception cref="T:System.EnterpriseServices.ServicedComponentException">The call to get the system directory failed. </exception>
    </member>
    <member name="M:System.EnterpriseServices.Internal.ISoapUtility.GetServerPhysicalPath(System.String,System.String,System.String,System.String@)">
      <summary>Returns the path for the SOAP virtual root.</summary>
      <param name="rootWebServer">The root Web server. </param>
      <param name="inBaseUrl">The base URL address. </param>
      <param name="inVirtualRoot">The name of the virtual root. </param>
      <param name="physicalPath">When this method returns, this parameter contains the file path for the SOAP virtual root. </param>
      <exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The SOAP utility is not available. </exception>
      <exception cref="T:System.EnterpriseServices.ServicedComponentException">The call to get the system directory failed. </exception>
    </member>
    <member name="M:System.EnterpriseServices.Internal.ISoapUtility.Present">
      <summary>Determines whether authenticated, encrypted SOAP interfaces are present.</summary>
      <exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The SOAP utility is not available. </exception>
    </member>
    <member name="T:System.EnterpriseServices.Internal.Publish">
      <summary>Publishes COM interfaces for SOAP-enabled COM+ applications.</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.Publish.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.Internal.Publish" /> class.</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.Publish.CreateMailBox(System.String,System.String,System.String@,System.String@,System.String@,System.String@)">
      <summary>Creates a SOAP-enabled COM+ application mailbox at a specified URL. Not fully implemented.</summary>
      <param name="RootMailServer">The URL for the root mail server. </param>
      <param name="MailBox">The mailbox to create. </param>
      <param name="SmtpName">When this method returns, this parameter contains the name of the Simple Mail Transfer Protocol (SMTP) server containing the mailbox. </param>
      <param name="Domain">When this method returns, this parameter contains the domain of the SMTP server. </param>
      <param name="PhysicalPath">When this method returns, this parameter contains the file system path for the mailbox. </param>
      <param name="Error">When this method returns, this parameter contains an error message if a problem was encountered. </param>
      <exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.Publish.CreateVirtualRoot(System.String,System.String,System.String@,System.String@,System.String@,System.String@)">
      <summary>Creates a SOAP-enabled COM+ application virtual root.</summary>
      <param name="Operation">The operation to perform. </param>
      <param name="FullUrl">The complete URL address for the virtual root. </param>
      <param name="BaseUrl">When this method returns, this parameter contains the base URL address. </param>
      <param name="VirtualRoot">When this method returns, this parameter contains the name of the virtual root. </param>
      <param name="PhysicalPath">When this method returns, this parameter contains the file path for the virtual root. </param>
      <param name="Error">When this method returns, this parameter contains an error message if a problem was encountered. </param>
      <exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code.-or- The caller does not have permission to access DNS information. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="FullUrl" /> is null. </exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error is encountered when resolving the local host name. </exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="FullUrl" /> is empty.-or- The scheme specified in <paramref name="FullUrl" /> is invalid.-or- <paramref name="FullUrl" /> contains more than two consecutive slashes.-or- The password specified in <paramref name="FullUrl" /> is invalid.-or- The host name specified in <paramref name="FullUrl" /> is invalid.-or- The file name specified in <paramref name="FullUrl" /> is invalid. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, RemotingConfiguration" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.DirectoryServices.DirectoryServicesPermission, System.DirectoryServices, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.Publish.DeleteMailBox(System.String,System.String,System.String@)">
      <summary>Deletes a SOAP-enabled COM+ application mailbox at a specified URL. Not fully implemented.</summary>
      <param name="RootMailServer">The URL for the root mail server. </param>
      <param name="MailBox">The mailbox to delete. </param>
      <param name="Error">When this method returns, this parameter contains an error message if a problem was encountered. </param>
      <exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.Publish.DeleteVirtualRoot(System.String,System.String,System.String@)">
      <summary>Deletes a SOAP-enabled COM+ application virtual root. Not fully implemented.</summary>
      <param name="RootWebServer">The root Web server. </param>
      <param name="FullUrl">The complete URL address for the virtual root. </param>
      <param name="Error">When this method returns, this parameter contains an error message if a problem was encountered. </param>
      <exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.Publish.GacInstall(System.String)">
      <summary>Installs an assembly in the global assembly cache.</summary>
      <param name="AssemblyPath">The file system path for the assembly. </param>
      <exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.Publish.GacRemove(System.String)">
      <summary>Removes an assembly from the global assembly cache.</summary>
      <param name="AssemblyPath">The file system path for the assembly. </param>
      <exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code.-or- The caller does not have path discovery permission. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="AssemblyPath" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="AssemblyPath" /> is empty. </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="AssemblyPath" /> is not found. </exception>
      <exception cref="T:System.IO.FileLoadException">An assembly or module was loaded twice with two different evidences. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="AssemblyPath" /> is not a valid assembly. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, ControlAppDomain" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.Publish.GetAssemblyNameForCache(System.String,System.String@)">
      <summary>Returns the full path for a strong-named signed generated assembly in the SoapCache directory.</summary>
      <param name="TypeLibPath">The path for the file that contains the typelib. </param>
      <param name="CachePath">When this method returns, this parameter contains the name of the SoapCache directory. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="TypeLibPath" /> is null. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">The file name is empty, contains only white spaces, or contains invalid characters. </exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to <paramref name="TypeLibPath" /> is denied. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="TypeLibPath" /> contains a colon (:) in the middle of the string. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.Publish.GetClientPhysicalPath(System.Boolean)">
      <summary>Returns the path for the directory for storing client configuration files.</summary>
      <returns>The path for the directory to contain the configuration files.</returns>
      <param name="CreateDir">Set to true to create the directory, or false to return the path but not create the directory. </param>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.Publish.GetTypeNameFromProgId(System.String,System.String)">
      <summary>Reflects over an assembly and returns the type name that matches the ProgID.</summary>
      <returns>The type name that matches the ProgID.</returns>
      <param name="AssemblyPath">The file system path for the assembly. </param>
      <param name="ProgId">The programmatic identifier of the class. </param>
      <exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, ControlAppDomain" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.Publish.ParseUrl(System.String,System.String@,System.String@)">
      <summary>Parses a URL and returns the base URL and virtual root portions.</summary>
      <param name="FullUrl">The complete URL address for the virtual root. </param>
      <param name="BaseUrl">When this method returns, this parameter contains the base URL address. </param>
      <param name="VirtualRoot">When this method returns, this parameter contains the name of the virtual root. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="FullUrl" /> is null. </exception>
      <exception cref="T:System.Net.Sockets.SocketException">An error is encountered when resolving the local host name. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have permission to access DNS information. </exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="FullUrl" /> is empty.-or- The scheme specified in <paramref name="FullUrl" /> is invalid.-or- <paramref name="FullUrl" /> contains too many slashes.-or- The password specified in <paramref name="FullUrl" /> is invalid.-or- The host name specified in <paramref name="FullUrl" /> is invalid.-or- The file name specified in <paramref name="FullUrl" /> is invalid. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.Publish.ProcessClientTlb(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String@,System.String@,System.String@)">
      <summary>Processes a client type library, creating a configuration file on the client.</summary>
      <param name="ProgId">The programmatic identifier of the class. </param>
      <param name="SrcTlbPath">The path for the file that contains the typelib. </param>
      <param name="PhysicalPath">The Web application directory. </param>
      <param name="VRoot">The name of the virtual root. </param>
      <param name="BaseUrl">The base URL that contains the virtual root. </param>
      <param name="Mode">The activation mode. </param>
      <param name="Transport">Not used. Specify null for this parameter.</param>
      <param name="AssemblyName">When this method returns, this parameter contains the display name of the assembly. </param>
      <param name="TypeName">When this method returns, this parameter contains the fully-qualified type name of the assembly. </param>
      <param name="Error">When this method returns, this parameter contains an error message if a problem was encountered. </param>
      <exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, ControlAppDomain, RemotingConfiguration" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.Publish.ProcessServerTlb(System.String,System.String,System.String,System.String,System.String@,System.String@,System.String@)">
      <summary>Processes a server type library, either adding or deleting component entries to the Web.config and Default.disco files. Generates a proxy if necessary.</summary>
      <param name="ProgId">The programmatic identifier of the class. </param>
      <param name="SrcTlbPath">The path for the file that contains the type library. </param>
      <param name="PhysicalPath">The Web application directory. </param>
      <param name="Operation">The operation to perform. </param>
      <param name="strAssemblyName">When this method returns, this parameter contains the display name of the assembly. </param>
      <param name="TypeName">When this method returns, this parameter contains the fully-qualified type name of the assembly. </param>
      <param name="Error">When this method returns, this parameter contains an error message if a problem was encountered. </param>
      <exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception>
      <exception cref="T:System.EnterpriseServices.ServicedComponentException">The <paramref name="SrcTlbPath" /> parameter referenced scrobj.dll; therefore, SOAP publication of script components is not supported. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, ControlAppDomain, RemotingConfiguration" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.Publish.RegisterAssembly(System.String)">
      <summary>Registers an assembly for COM interop.</summary>
      <param name="AssemblyPath">The file system path for the assembly. </param>
      <exception cref="T:System.EnterpriseServices.RegistrationException">The input assembly does not have a strong name. </exception>
      <exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code.-or- A codebase that does not start with "file://" was specified without the required <see cref="T:System.Net.WebPermission" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="AssemblyPath" /> is null. </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="AssemblyPath" /> is not found, or a filename extension is not specified. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="AssemblyPath" /> is not a valid assembly. </exception>
      <exception cref="T:System.IO.FileLoadException">An assembly or module was loaded twice with two different evidences, or the assembly name is longer than MAX_PATH characters. </exception>
      <exception cref="T:System.InvalidOperationException">A method marked with <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" /> is not static.-or- There is more than one method marked with <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" /> at a given level of the hierarchy.-or- The signature of the method marked with <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" /> is not valid. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.Publish.UnRegisterAssembly(System.String)">
      <summary>Unregisters a COM interop assembly.</summary>
      <param name="AssemblyPath">The file system path for the assembly. </param>
      <exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code.-or- A codebase that does not start with "file://" was specified without the required <see cref="T:System.Net.WebPermission" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="AssemblyPath" /> is null. </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="AssemblyPath" /> is not found, or a file name extension is not specified. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="AssemblyPath" /> is not a valid assembly. </exception>
      <exception cref="T:System.IO.FileLoadException">An assembly or module was loaded twice with two different evidences, or the assembly name is longer than MAX_PATH characters. </exception>
      <exception cref="T:System.InvalidOperationException">A method marked with <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" /> is not static.-or- There is more than one method marked with <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" /> at a given level of the hierarchy.-or- The signature of the method marked with <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" /> is not valid. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.EnterpriseServices.Internal.ServerWebConfig">
      <summary>Creates a Web.config file for a SOAP-enabled COM+ application. Can also add component entries to the file for COM interfaces being published in the application.</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.ServerWebConfig.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.Internal.ServerWebConfig" /> class.</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.ServerWebConfig.AddElement(System.String,System.String,System.String,System.String,System.String,System.String@)">
      <summary>Adds XML elements to a Web.config file for a COM interface being published in a SOAP-enabled COM+ application.</summary>
      <param name="FilePath">The path of the existing Web.config file.</param>
      <param name="AssemblyName">The name of the assembly that contains the type being added.</param>
      <param name="TypeName">The name of the type being added.</param>
      <param name="ProgId">The programmatic identifier for the type being added.</param>
      <param name="WkoMode">A string constant that corresponds to the name of a member from the <see cref="T:System.Runtime.Remoting.WellKnownObjectMode" /> enumeration, which indicates how a well-known object is activated.</param>
      <param name="Error">A string to which an error message can be written.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, RemotingConfiguration" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.ServerWebConfig.Create(System.String,System.String,System.String@)">
      <summary>Creates a Web.config file for a SOAP-enabled COM+ application so that the file is ready to have XML elements added for COM interfaces being published.</summary>
      <param name="FilePath">The folder in which the configuration file should be created.</param>
      <param name="FilePrefix">The string value "Web", to which a config extension is added.</param>
      <param name="Error">A string to which an error message can be written.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, RemotingConfiguration" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="T:System.EnterpriseServices.Internal.SoapClientImport">
      <summary>Imports authenticated, encrypted SOAP client proxies. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.SoapClientImport.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.Internal.SoapClientImport" /> class.</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.SoapClientImport.ProcessClientTlbEx(System.String,System.String,System.String,System.String,System.String,System.String)">
      <summary>Creates a .NET remoting client configuration file that includes security and authentication options.</summary>
      <param name="progId">The programmatic identifier of the class. If an empty string (""), this method returns without doing anything. </param>
      <param name="virtualRoot">The name of the virtual root. </param>
      <param name="baseUrl">The base URL that contains the virtual root. </param>
      <param name="authentication">The type of ASP.NET authentication to use. </param>
      <param name="assemblyName">The name of the assembly. </param>
      <param name="typeName">The name of the type. </param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="T:System.EnterpriseServices.Internal.SoapServerTlb">
      <summary>Processes authenticated, encrypted SOAP components on servers. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.SoapServerTlb.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.Internal.SoapServerTlb" /> class.</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.SoapServerTlb.AddServerTlb(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String@,System.String@)">
      <summary>Adds the entries for a server type library to the Web.config and Default.disco files, depending on security options, and generates a proxy if necessary.</summary>
      <param name="progId">The programmatic identifier of the class. </param>
      <param name="classId">The class identifier (CLSID) for the type library. </param>
      <param name="interfaceId">The IID for the type library. </param>
      <param name="srcTlbPath">The path for the file containing the type library. </param>
      <param name="rootWebServer">The root Web server. </param>
      <param name="inBaseUrl">The base URL that contains the virtual root. </param>
      <param name="inVirtualRoot">The name of the virtual root. </param>
      <param name="clientActivated">true if client activated; otherwise, false. </param>
      <param name="wellKnown">true if well-known; otherwise, false. </param>
      <param name="discoFile">true if a discovery file; otherwise, false.</param>
      <param name="operation">The operation to perform. Specify either "delete" or an empty string. </param>
      <param name="strAssemblyName">When this method returns, contains the name of the assembly. </param>
      <param name="typeName">When this method returns, contains the type of the assembly. </param>
      <exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The SOAP utility is not available. </exception>
      <exception cref="T:System.EnterpriseServices.ServicedComponentException">The call to get the system directory failed. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, ControlAppDomain, RemotingConfiguration" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.SoapServerTlb.DeleteServerTlb(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
      <summary>Removes entries for a server type library from the Web.config and Default.disco files, depending on security options.</summary>
      <param name="progId">The programmatic identifier of the class. </param>
      <param name="classId">The class identifier (CLSID) for the type library. </param>
      <param name="interfaceId">The IID for the type library. </param>
      <param name="srcTlbPath">The path for the file containing the type library. </param>
      <param name="rootWebServer">The root Web server. </param>
      <param name="baseUrl">The base URL that contains the virtual root. </param>
      <param name="virtualRoot">The name of the virtual root. </param>
      <param name="operation">Not used. Specify null for this parameter.</param>
      <param name="assemblyName">The name of the assembly. </param>
      <param name="typeName">The type of the assembly. </param>
      <exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The SOAP utility is not available. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, ControlAppDomain, RemotingConfiguration" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="T:System.EnterpriseServices.Internal.SoapServerVRoot">
      <summary>Publishes authenticated, encrypted SOAP virtual roots on servers. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.SoapServerVRoot.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.Internal.SoapServerVRoot" /> class.</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.SoapServerVRoot.CreateVirtualRootEx(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String@,System.String@,System.String@)">
      <summary>Creates a SOAP virtual root with security options.</summary>
      <param name="rootWebServer">The root Web server. The default is "IIS://localhost/W3SVC/1/ROOT". </param>
      <param name="inBaseUrl">The base URL that contains the virtual root. </param>
      <param name="inVirtualRoot">The name of the virtual root. </param>
      <param name="homePage">The URL of the home page. </param>
      <param name="discoFile">true if a default discovery file is to be created; false if there is to be no discovery file. If false and a Default.disco file exists, the file is deleted. </param>
      <param name="secureSockets">true if SSL encryption is required; otherwise, false. </param>
      <param name="authentication">Specify "anonymous" if no authentication is to be used (anonymous user). Otherwise, specify an empty string.</param>
      <param name="operation">Not used. Specify null for this parameter.</param>
      <param name="baseUrl">When this method returns, this parameter contains the base URL. </param>
      <param name="virtualRoot">When this method returns, this parameter contains the name of the virtual root. </param>
      <param name="physicalPath">When this method returns, this parameter contains the disk address of the Virtual Root directory. </param>
      <exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The SOAP utility is not available. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, RemotingConfiguration" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.EventLogPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.DirectoryServices.DirectoryServicesPermission, System.DirectoryServices, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.SoapServerVRoot.DeleteVirtualRootEx(System.String,System.String,System.String)">
      <summary>Deletes a virtual root. Not fully implemented.</summary>
      <param name="rootWebServer">The root Web server. The default is "IIS://localhost/W3SVC/1/ROOT".</param>
      <param name="inBaseUrl">The base URL that contains the virtual root. </param>
      <param name="inVirtualRoot">The name of the virtual root. </param>
      <exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The SOAP utility is not available. </exception>
      <exception cref="T:System.EnterpriseServices.ServicedComponentException">The call to get the system directory failed. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.SoapServerVRoot.GetVirtualRootStatus(System.String,System.String,System.String,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
      <summary>Returns the security status of an existing SOAP virtual root.</summary>
      <param name="RootWebServer">The root Web server. The default is "IIS://localhost/W3SVC/1/ROOT". </param>
      <param name="inBaseUrl">The base URL that contains the virtual root. </param>
      <param name="inVirtualRoot">The name of the virtual root. </param>
      <param name="Exists">When this method returns, this parameter contains a true if the virtual directory exists; otherwise, false. </param>
      <param name="SSL">When this method returns, this parameter contains a true if SSL encryption is required; otherwise, false. </param>
      <param name="WindowsAuth">When this method returns, this parameter contains true if Windows authentication is set, otherwise, false. </param>
      <param name="Anonymous">When this method returns, this parameter contains true if no authentication is set (anonymous user); otherwise, false.</param>
      <param name="HomePage">When this method returns, this parameter contains a true if the Virtual Root's EnableDefaultDoc property is set; otherwise, false.</param>
      <param name="DiscoFile">When this method returns, this parameter contains a true if a Default.disco file exists; otherwise, false.</param>
      <param name="PhysicalPath">When this method returns, this parameter contains the disk address of the virtual root directory. </param>
      <param name="BaseUrl">When this method returns, this parameter contains the base URL. </param>
      <param name="VirtualRoot">When this method returns, this parameter contains the name of the virtual root. </param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.DirectoryServices.DirectoryServicesPermission, System.DirectoryServices, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="T:System.EnterpriseServices.Internal.SoapUtility">
      <summary>Provides utilities to support the exporting of COM+ SOAP-enabled application proxies by the server and the importing of the proxies by the client. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.SoapUtility.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.Internal.SoapUtility" /> class.</summary>
    </member>
    <member name="M:System.EnterpriseServices.Internal.SoapUtility.GetServerBinPath(System.String,System.String,System.String,System.String@)">
      <summary>Returns the path for the SOAP bin directory.</summary>
      <param name="rootWebServer">The root Web server. </param>
      <param name="inBaseUrl">The base URL address. </param>
      <param name="inVirtualRoot">The name of the virtual root. </param>
      <param name="binPath">When this method returns, this parameter contains the file path for the SOAP virtual root bin directory. </param>
      <exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The SOAP utility is not available. </exception>
      <exception cref="T:System.EnterpriseServices.ServicedComponentException">The call to get the system directory failed. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.SoapUtility.GetServerPhysicalPath(System.String,System.String,System.String,System.String@)">
      <summary>Returns the path for the SOAP virtual root.</summary>
      <param name="rootWebServer">The root Web server. </param>
      <param name="inBaseUrl">The base URL address. </param>
      <param name="inVirtualRoot">The name of the virtual root. </param>
      <param name="physicalPath">When this method returns, this parameter contains the file path for the SOAP virtual root. </param>
      <exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The SOAP utility is not available. </exception>
      <exception cref="T:System.EnterpriseServices.ServicedComponentException">The call to get the system directory failed. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.EnterpriseServices.Internal.SoapUtility.Present">
      <summary>Determines whether authenticated, encrypted SOAP interfaces are present.</summary>
      <exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The SOAP utility is not available. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\System.DirectoryServices.Protocols.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.DirectoryServices.Protocols</name>
  </assembly>
  <members>
    <member name="T:System.DirectoryServices.Protocols.AddRequest">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.AddRequest" /> class adds an entry to the directory.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.AddRequest.#ctor">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.AddRequest.#ctor" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.AddRequest" /> class.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.AddRequest.#ctor(System.String,System.DirectoryServices.Protocols.DirectoryAttribute[])">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.AddRequest.#ctor(System.String,System.DirectoryServices.Protocols.DirectoryAttribute[])" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.AddRequest" /> class using the specified distinguished name and attributes.</summary>
      <param name="distinguishedName">The <paramref name="distinguishedName" /> of the new object in the directory.</param>
      <param name="attributes">An array, of  <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> objects, that contains the attributes for this object. This parameter may be null.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.AddRequest.#ctor(System.String,System.String)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.AddRequest.#ctor(System.String,System.String)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.AddRequest" /> class using the specified <paramref name="distinguishedName" /> and the object class.</summary>
      <param name="distinguishedName">The <paramref name="distinguishedName" /> of the new object in the directory.</param>
      <param name="objectClass">The object class for this object. If this parameter is null, an exception is thrown.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="objectClass" /> parameter contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.AddRequest.Attributes">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.AddRequest.Attributes" /> property contains a <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeCollection" /> of attribute-value pairs for the object.</summary>
      <returns>A <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeCollection" /> of attribute-value pairs for the object.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.AddRequest.DistinguishedName">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.AddRequest.DistinguishedName" /> property contains the distinguished name of the object.</summary>
      <returns>The distinguished name of the object.</returns>
    </member>
    <member name="M:System.DirectoryServices.Protocols.AddRequest.ToXmlNode(System.Xml.XmlDocument)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.AddRequest.ToXmlNode(System.Xml.XmlDocument)" /> method creates an XML node from the specified  <see cref="T:System.Xml.XmlDocument" /> object.</summary>
      <returns>The resulting <see cref="T:System.Xml.XmlElement" /> object.</returns>
      <param name="doc">A <see cref="T:System.Xml.XmlDocument" /> object.</param>
    </member>
    <member name="T:System.DirectoryServices.Protocols.AddResponse">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.AddResponse" /> class is returned by <see cref="M:System.DirectoryServices.Protocols.DirectoryConnection.SendRequest(System.DirectoryServices.Protocols.DirectoryRequest)" /> as a response to <see cref="T:System.DirectoryServices.Protocols.AddRequest" />.</summary>
    </member>
    <member name="T:System.DirectoryServices.Protocols.AsqRequestControl">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.AsqRequestControl" /> class creates an attribute scoped query (ASQ) control. This control is used with a search request to force the query to be based on a specific DN-valued attribute.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.AsqRequestControl.#ctor">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.AsqRequestControl.#ctor" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.AsqRequestControl" /> class.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.AsqRequestControl.#ctor(System.String)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.AsqRequestControl.#ctor(System.String)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.AsqRequestControl" /> class using the specified attribute name.</summary>
      <param name="attributeName">The attribute name on which the query is based.</param>
    </member>
    <member name="P:System.DirectoryServices.Protocols.AsqRequestControl.AttributeName">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.AsqRequestControl.AttributeName" /> property gets or sets the attribute name on which the search query is based.</summary>
      <returns>The attribute name on which the search query is based.</returns>
    </member>
    <member name="M:System.DirectoryServices.Protocols.AsqRequestControl.GetValue">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.AsqRequestControl.GetValue" /> method returns the binary representation of the <see cref="T:System.DirectoryServices.Protocols.AsqRequestControl" />.</summary>
      <returns>The binary representation of the <see cref="T:System.DirectoryServices.Protocols.AsqRequestControl" />.</returns>
    </member>
    <member name="T:System.DirectoryServices.Protocols.AsqResponseControl">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.AsqResponseControl" /> class is returned in a <see cref="T:System.DirectoryServices.Protocols.SearchResponse" /> object as a response to a <see cref="T:System.DirectoryServices.Protocols.AsqRequestControl" /> query.</summary>
    </member>
    <member name="P:System.DirectoryServices.Protocols.AsqResponseControl.Result">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.AsqResponseControl.Result" /> property gets a <see cref="T:System.DirectoryServices.Protocols.ResultCode" /> object with result data.</summary>
      <returns>A <see cref="T:System.DirectoryServices.Protocols.ResultCode" /> object with result data.</returns>
    </member>
    <member name="T:System.DirectoryServices.Protocols.AuthType">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.AuthType" /> enumeration is used to specify the authentication method to use on a connection.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.AuthType.Anonymous">
      <summary>Indicates that the connection should be made without passing credentials. The value is equal to 0.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.AuthType.Basic">
      <summary>Indicates that basic authentication should be used on the connection. The value is equal to 1.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.AuthType.Negotiate">
      <summary>Indicates that Microsoft Negotiate authentication should be used on the connection. The value is equal to 2.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.AuthType.Ntlm">
      <summary>Indicates that Windows NT Challenge/Response (NTLM) authentication should be used on the connection. The value is equal to 3.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.AuthType.Digest">
      <summary>Indicates that the Digest Access Authentication should be used on the connection. The value is equal to 4.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.AuthType.Sicily">
      <summary>Indicates a negotiation mechanism (Sicily) will be used to choose MSN, DPA or NTLM.  This should be used for LDAPv2 servers only. The value is equal to 5.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.AuthType.Dpa">
      <summary>Indicates that Distributed Password Authentication (DPA) should be used on the connection. The value is equal to 6.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.AuthType.Msn">
      <summary>Indicates that it is authenticated by “Microsoft Network Authentication Service”. The value is equal to 7.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.AuthType.External">
      <summary>Indicates an external method will be used to authenticate the connection. The value is equal to 8.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.AuthType.Kerberos">
      <summary>Indicates that Kerberos authentication should be used on the connection. The value is equal to 9.</summary>
    </member>
    <member name="T:System.DirectoryServices.Protocols.BerConversionException">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.BerConversionException" /> class is an exception thrown when converting data using a <see cref="T:System.DirectoryServices.Protocols.BerConverter" /> object.          </summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.BerConversionException.#ctor">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.BerConversionException.#ctor" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.BerConversionException" /> class.          </summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.BerConversionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.BerConversionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.BerConversionException" /> class using the specified serialization data and streaming contextual data.          </summary>
      <param name="info">The serialized object data about the exception thrown. </param>
      <param name="context">The contextual data about the source or destination. </param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.BerConversionException.#ctor(System.String)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.BerConversionException.#ctor(System.String)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.BerConversionException" /> class using the specified message.          </summary>
      <param name="message">The message displayed to the client when the exception is thrown.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.BerConversionException.#ctor(System.String,System.Exception)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.BerConversionException.#ctor(System.String,System.Exception)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.BerConversionException" /> class using the specified message and inner exception.          </summary>
      <param name="message">The message displayed when the exception is thrown.</param>
      <param name="inner">The <see cref="P:System.Exception.InnerException" />, if any, that threw the exception.</param>
    </member>
    <member name="T:System.DirectoryServices.Protocols.BerConverter">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.BerConverter" /> class encodes and decodes structured data using basic encoding rules (BER).</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.BerConverter.Decode(System.String,System.Byte[])">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.BerConverter.Decode(System.String,System.Byte[])" /> method decodes a binary representation of the data, using BER, to retrieve structured data.</summary>
      <returns>The decoded data.</returns>
      <param name="format">The format string.</param>
      <param name="value">An array of BER data.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="format" /> parameter contains a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="format" /> parameter contains an undefined character.</exception>
      <exception cref="T:System.DirectoryServices.Protocols.BerConversionException">The underlying decoding fails. The decoding rules include the following.CodeCorresponding Result'{' '}' '[' ']' 'n' 'x'No corresponding result'i' 'e'int'b'bool'a'string'O'byte[]'B'byte[] containing bit strings'v'string[]'V'byte[][]</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.BerConverter.Encode(System.String,System.Object[])">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.BerConverter.Encode(System.String,System.Object[])" /> method encodes structured data, using BER, to retrieve a binary representation of the data.</summary>
      <returns>An array of BER-encoded data.</returns>
      <param name="format">The format string.</param>
      <param name="value">An array of formatted data.</param>
    </member>
    <member name="T:System.DirectoryServices.Protocols.CompareRequest">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.CompareRequest" /> class determines whether the directory object holds the specified value for the attribute.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.CompareRequest.#ctor">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.CompareRequest.#ctor" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.CompareRequest" /> class.          </summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.CompareRequest.#ctor(System.String,System.DirectoryServices.Protocols.DirectoryAttribute)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.CompareRequest.#ctor(System.String,System.DirectoryServices.Protocols.DirectoryAttribute)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.CompareRequest" /> class using the specified distinguished name and attributes.          </summary>
      <param name="distinguishedName">The distinguished name of the <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> object to compare.</param>
      <param name="assertion">A <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assertion" /> contains a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assertion" /> must contain exactly one value.</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.CompareRequest.#ctor(System.String,System.String,System.Byte[])">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.CompareRequest.#ctor(System.String,System.String,System.Byte[])" /> constructor creates an instance of <see cref="T:System.DirectoryServices.Protocols.CompareRequest" /> using the specified distinguished name, attribute, and attribute value.          </summary>
      <param name="distinguishedName">The distinguished name of the object                       to compare.</param>
      <param name="attributeName">The name of the attribute to compare.</param>
      <param name="value">The value to compare.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeName" /> or <paramref name="value" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.CompareRequest.#ctor(System.String,System.String,System.String)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.CompareRequest.#ctor(System.String,System.String,System.String)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.CompareRequest" /> class using the specified distinguished name, attribute, and attribute value.          </summary>
      <param name="distinguishedName">The distinguished name of the object to compare.</param>
      <param name="attributeName">The name of the attribute to compare.</param>
      <param name="value">The value to compare.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeName" /> or <paramref name="value" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.CompareRequest.#ctor(System.String,System.String,System.Uri)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.CompareRequest.#ctor(System.String,System.String,System.Uri)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.CompareRequest" /> class using the specified distinguished name, attribute, and attribute value.          </summary>
      <param name="distinguishedName">The distinguished name of the object                       to compare.</param>
      <param name="attributeName">The name of the attribute to compare.</param>
      <param name="value">The value to compare.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeName" /> or <paramref name="value" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.CompareRequest.Assertion">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.CompareRequest.Assertion" /> property gets the attribute/value pair used to compare.          </summary>
      <returns>The attribute/value pair used to compare.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.CompareRequest.DistinguishedName">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.CompareRequest.DistinguishedName" /> property gets or sets the distinguished name of the object to compare.          </summary>
      <returns>The distinguished name of the object to compare.</returns>
    </member>
    <member name="M:System.DirectoryServices.Protocols.CompareRequest.ToXmlNode(System.Xml.XmlDocument)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.CompareRequest.ToXmlNode(System.Xml.XmlDocument)" /> method creates an XML node from the specified <see cref="T:System.Xml.XmlDocument" /> object.          </summary>
      <returns>The resulting <see cref="T:System.Xml.XmlElement" /> object.</returns>
      <param name="doc">A <see cref="T:System.Xml.XmlDocument" /> object.</param>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> object must contain exactly one value.</exception>
    </member>
    <member name="T:System.DirectoryServices.Protocols.CompareResponse">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.CompareResponse" /> class is returned by <see cref="M:System.DirectoryServices.Protocols.DirectoryConnection.SendRequest(System.DirectoryServices.Protocols.DirectoryRequest)" /> as a response to <see cref="T:System.DirectoryServices.Protocols.CompareRequest" />.          </summary>
    </member>
    <member name="T:System.DirectoryServices.Protocols.CrossDomainMoveControl">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.CrossDomainMoveControl" /> class is used with a <see cref="T:System.DirectoryServices.Protocols.ModifyDNRequest" /> object to move an LDAP object from one domain to another.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.CrossDomainMoveControl.#ctor">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.CrossDomainMoveControl.#ctor" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.CrossDomainMoveControl" /> class.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.CrossDomainMoveControl.#ctor(System.String)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.CrossDomainMoveControl.#ctor(System.String)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.CrossDomainMoveControl" /> class using the specified target domain.</summary>
      <param name="targetDomainController">The DNS name of the destination domain controller.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.CrossDomainMoveControl.GetValue">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.CrossDomainMoveControl.GetValue" /> method returns the binary representation of <see cref="T:System.DirectoryServices.Protocols.CrossDomainMoveControl" />.</summary>
      <returns>The binary representation of <see cref="T:System.DirectoryServices.Protocols.CrossDomainMoveControl" />.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.CrossDomainMoveControl.TargetDomainController">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.CrossDomainMoveControl.TargetDomainController" /> property gets or sets the DNS name of the destination domain controller (DC).</summary>
      <returns>The DNS name of the destination DC.</returns>
    </member>
    <member name="T:System.DirectoryServices.Protocols.DeleteRequest">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.DeleteRequest" /> class deletes an entry from the directory.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DeleteRequest.#ctor">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DeleteRequest.#ctor" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.DeleteRequest" /> class.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DeleteRequest.#ctor(System.String)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DeleteRequest.#ctor(System.String)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.DeleteRequest" /> class using the specified distinguished name.</summary>
      <param name="distinguishedName">The distinguished name of the object to delete.</param>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DeleteRequest.DistinguishedName">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DeleteRequest.DistinguishedName" /> property gets or sets the distinguished name of object to delete.</summary>
      <returns>The distinguished name of object to delete.</returns>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DeleteRequest.ToXmlNode(System.Xml.XmlDocument)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DeleteRequest.ToXmlNode(System.Xml.XmlDocument)" /> method creates an XML node from the specified <see cref="T:System.Xml.XmlDocument" /> object.</summary>
      <returns>The resulting <see cref="T:System.Xml.XmlElement" /> object.</returns>
      <param name="doc">An <see cref="T:System.Xml.XmlDocument" /> object.</param>
    </member>
    <member name="T:System.DirectoryServices.Protocols.DeleteResponse">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.DeleteResponse" /> class is returned by <see cref="M:System.DirectoryServices.Protocols.DirectoryConnection.SendRequest(System.DirectoryServices.Protocols.DirectoryRequest)" /> as a response to <see cref="T:System.DirectoryServices.Protocols.DeleteRequest" />.</summary>
    </member>
    <member name="T:System.DirectoryServices.Protocols.DereferenceAlias">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.DereferenceAlias" /> enumeration specifies the process by which aliases are dereferenced.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.DereferenceAlias.Never">
      <summary>Does not dereference aliases. The value is equal to 0.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.DereferenceAlias.InSearching">
      <summary>Dereferences aliases when searching subordinates of the base object, but not when locating the base itself. The value is equal to 1.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.DereferenceAlias.FindingBaseObject">
      <summary>Dereferences aliases when locating the base object, but not when searching its subordinates. The value is equal to 2.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.DereferenceAlias.Always">
      <summary>Dereferences aliases when both searching subordinates and locating the base object of the search. The value is equal to 3.</summary>
    </member>
    <member name="T:System.DirectoryServices.Protocols.DereferenceConnectionCallback">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.DereferenceConnectionCallback" /> delegate dereferences a connection that is no longer required. The connection was probably established through a successful call to the <see cref="T:System.DirectoryServices.Protocols.QueryForConnectionCallback" /> or <see cref="T:System.DirectoryServices.Protocols.NotifyOfNewConnectionCallback" /> delegate.</summary>
      <param name="primaryConnection">An <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> object that specifies the primary connection.</param>
      <param name="connectionToDereference">An <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> object that specifies the connection to dereference.</param>
    </member>
    <member name="T:System.DirectoryServices.Protocols.DirectoryAttribute">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> class enables access to the attribute values.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryAttribute.#ctor">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryAttribute.#ctor" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> class.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryAttribute.#ctor(System.String,System.Byte[])">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryAttribute.#ctor(System.String,System.Byte[])" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> class using the specified attribute name and value.</summary>
      <param name="name">The attribute name.</param>
      <param name="value">The attribute value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="value" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryAttribute.#ctor(System.String,System.Object[])">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryAttribute.#ctor(System.String,System.Object[])" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> class using the specified attribute name and values.</summary>
      <param name="name">The attribute name.</param>
      <param name="values">An array of values for the attribute.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="value" /> contains a null reference (<paramref name="Nothing" /> in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">An element of <paramref name="values" /> is not of type string, byte[], or Uri.</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryAttribute.#ctor(System.String,System.String)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryAttribute.#ctor(System.String,System.String)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> class using the specified attribute name and value.</summary>
      <param name="name">The attribute name.</param>
      <param name="value">The attribute value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="value" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryAttribute.#ctor(System.String,System.Uri)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryAttribute.#ctor(System.String,System.Uri)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> class using the specified attribute name and value.</summary>
      <param name="name">The attribute name.</param>
      <param name="value">The attribute value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="value" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryAttribute.Add(System.Byte[])">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryAttribute.Add(System.Byte[])" /> method adds the specified value to this attribute.</summary>
      <returns>The index at which the value has been added.</returns>
      <param name="value">The value to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Value" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryAttribute.Add(System.String)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryAttribute.Add(System.String)" /> method adds the specified value to this attribute.          </summary>
      <returns>The index at which the value has been added.</returns>
      <param name="value">The value to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Value" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryAttribute.Add(System.Uri)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryAttribute.Add(System.Uri)" /> method adds the specified value to this attribute.</summary>
      <returns>The index at which the value has been added.</returns>
      <param name="value">The value to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Value" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryAttribute.AddRange(System.Object[])">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryAttribute.AddRange(System.Object[])" /> method adds an array of values to the attribute.</summary>
      <param name="values">The values to add.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="values" /> is not a  byte[][], string[], or Uri[].</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Values" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryAttribute.Contains(System.Object)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryAttribute.Contains(System.Object)" /> method determines if the attribute contains the specified value.          </summary>
      <returns>true if this attribute contains the value or false if it does not.</returns>
      <param name="value">The value for which to search.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryAttribute.CopyTo(System.Object[],System.Int32)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryAttribute.CopyTo(System.Object[],System.Int32)" /> method copies the entire collection to a one-dimensional array, starting at the specified index of the target array.</summary>
      <param name="array">A one-dimensional array that is the destination of the elements copied from the <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> object.</param>
      <param name="index">The zero-based index of <paramref name="array" /> where the copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> contains a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">This exception can occur under one of the following conditions:<paramref name="array" /> is multidimensional<paramref name="index" /> is equal to, or greater than, the length of <paramref name="array" />The number of elements in the source <see cref="T:System.DirectoryServices.Protocols.DirectoryControlCollection" /> is greater than the space available from <paramref name="index" /> to the end of the destination <paramref name="array" />.</exception>
      <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.DirectoryServices.Protocols.DirectoryControlCollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryAttribute.GetValues(System.Type)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryAttribute.GetValues(System.Type)" /> method returns all values of the specified type.</summary>
      <returns>An array of <see cref="T:System.Object" /> objects that contain the values.</returns>
      <param name="valuesType">A <see cref="T:System.Type" /> object that specifies the type of values to return.</param>
      <exception cref="T:System.NotSupportedException">A value cannot be converted to <paramref name="valuesType" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="valuesType" /> must be either string or byte.</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryAttribute.IndexOf(System.Object)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryAttribute.IndexOf(System.Object)" /> method returns the zero-based index of the first occurrence of the specified  <see cref="T:System.Object" /> in the <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> collection.          </summary>
      <returns>The index value of the specified <see cref="T:System.Object" />, if found; otherwise, -1.</returns>
      <param name="value">The <see cref="T:System.Object" /> for which the value is returned.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryAttribute.Insert(System.Int32,System.Byte[])">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryAttribute.Insert(System.Int32,System.Byte[])" /> method inserts the specified <paramref name="value" /> into the <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> collection at the specified <paramref name="index" />.</summary>
      <param name="index">The index in the <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> collection at which to insert the <paramref name="value" />.</param>
      <param name="value">The value to insert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> contains a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero, or index is greater than the number of elements in the <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> object.</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryAttribute.Insert(System.Int32,System.String)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryAttribute.Insert(System.Int32,System.String)" /> method inserts the specified <paramref name="value" /> into the <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> collection at the specified <paramref name="index" />.          </summary>
      <param name="index">The index in the <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> collection at which to insert the <paramref name="value" />.</param>
      <param name="value">The value to insert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> contains a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero, or <paramref name="index" /> is greater than  the number of elements in the <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> object.</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryAttribute.Insert(System.Int32,System.Uri)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryAttribute.Insert(System.Int32,System.Uri)" /> method inserts the specified <paramref name="value" /> into the <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> collection at the specified <paramref name="index" />.</summary>
      <param name="index">The index in the <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> collection at which to insert the <paramref name="value" />.</param>
      <param name="value">The value to insert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> contains a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or <paramref name="index" /> is greater than the number of elements in the <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> object.</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DirectoryAttribute.Item(System.Int32)">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DirectoryAttribute.Item(System.Int32)" /> property gets or sets the <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> object at the specified index.</summary>
      <returns>The <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> object at the specified index.</returns>
      <param name="index">The zero-based index value at which the <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> object is found.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> to set is an invalid type. The valid types are byte[], string, or URI.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DirectoryAttribute.Name">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DirectoryAttribute.Name" /> property contains the attribute name.</summary>
      <returns>The attribute name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryAttribute.OnValidate(System.Object)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryAttribute.OnValidate(System.Object)" /> method verifies that <paramref name="value" /> is a <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> object.</summary>
      <param name="value">The <see cref="T:System.Object" /> to evaluate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> contains a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> must be either a string, byte[], or URI.</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryAttribute.Remove(System.Object)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryAttribute.Remove(System.Object)" /> method removes the first occurrence of the specified <paramref name="value" /> from the list of attributes.</summary>
      <param name="value">The <see cref="T:System.Object" /> to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="T:System.DirectoryServices.Protocols.DirectoryAttributeCollection">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeCollection" /> class contains a collection of <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> objects.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryAttributeCollection.#ctor">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryAttributeCollection.#ctor" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeCollection" /> class.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryAttributeCollection.Add(System.DirectoryServices.Protocols.DirectoryAttribute)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryAttributeCollection.Add(System.DirectoryServices.Protocols.DirectoryAttribute)" /> method adds a <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> object to the collection.</summary>
      <returns>The zero-based index in the collection where the <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> was added.</returns>
      <param name="attribute">The <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> object to add.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="attribute" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryAttributeCollection.AddRange(System.DirectoryServices.Protocols.DirectoryAttribute[])">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryAttributeCollection.AddRange(System.DirectoryServices.Protocols.DirectoryAttribute[])" /> method adds an array of <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> objects to the collection.</summary>
      <param name="attributes">An array of <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributes" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">A member of <paramref name="attributes" /> is a null reference (Nothing in Visual Basic) or a member of <paramref name="attributes" /> specifies a modification operation other than Add.</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryAttributeCollection.AddRange(System.DirectoryServices.Protocols.DirectoryAttributeCollection)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryAttributeCollection.AddRange(System.DirectoryServices.Protocols.DirectoryAttributeCollection)" /> method adds a <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeCollection" /> object to the current collection.</summary>
      <param name="attributeCollection">The <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeCollection" /> object to add to this collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeCollection" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryAttributeCollection.Contains(System.DirectoryServices.Protocols.DirectoryAttribute)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryAttributeCollection.Contains(System.DirectoryServices.Protocols.DirectoryAttribute)" /> method determines whether this <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeCollection" /> object contains a specified <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> object.</summary>
      <returns>true if the specified <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> is part of the collection; false otherwise.</returns>
      <param name="value">The <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> object for which to search.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryAttributeCollection.CopyTo(System.DirectoryServices.Protocols.DirectoryAttribute[],System.Int32)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryAttributeCollection.CopyTo(System.DirectoryServices.Protocols.DirectoryAttribute[],System.Int32)" /> method copies the entire collection to a one-dimensional array, starting at the specified index of the target array.</summary>
      <param name="array">A one-dimensional array that is the destination of the elements copied from the <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeCollection" /> object.</param>
      <param name="index">The zero-based index of <paramref name="array" /> where copying begins.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryAttributeCollection.IndexOf(System.DirectoryServices.Protocols.DirectoryAttribute)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryAttributeCollection.IndexOf(System.DirectoryServices.Protocols.DirectoryAttribute)" /> method returns the zero-based index of the first occurrence of the specified <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> object in the  <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeCollection" />.</summary>
      <returns>The index value of the specified <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> object, if found; otherwise, -1.</returns>
      <param name="value">The <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> object for which the index is returned.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryAttributeCollection.Insert(System.Int32,System.DirectoryServices.Protocols.DirectoryAttribute)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryAttributeCollection.Insert(System.Int32,System.DirectoryServices.Protocols.DirectoryAttribute)" /> method inserts the specified <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> object into the <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeCollection" /> at the specified <paramref name="index" />.</summary>
      <param name="index">The zero-based index point, in the collection, at which to insert the <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> object.</param>
      <param name="value">The <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> object to be inserted into the collection.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is a null reference (Nothing in Visual Basic) or <paramref name="value" /> specifies a modification operation other than Add.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero, or <paramref name="index" /> is greater than  the number of elements in the <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeCollection" /> object.</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DirectoryAttributeCollection.Item(System.Int32)">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DirectoryAttributeCollection.Item(System.Int32)" /> property contains the <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> object at the specified index.</summary>
      <returns>The <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> object at the specified index.</returns>
      <param name="index">The index value of the <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> object.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryAttributeCollection.OnValidate(System.Object)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryAttributeCollection.OnValidate(System.Object)" /> method verifies that <paramref name="value" /> is a <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> object or specifies an add operation.</summary>
      <param name="value">The object to evaluate.</param>
      <exception cref="T:System.ArgumentException">This exception can occur under one of the following conditions:<paramref name="value" /> is a null reference (Nothing in Visual Basic).<paramref name="value" /> is not a <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> object.</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryAttributeCollection.Remove(System.DirectoryServices.Protocols.DirectoryAttribute)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryAttributeCollection.Remove(System.DirectoryServices.Protocols.DirectoryAttribute)" /> method removes the first occurrence of the specified <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> object from the collection.</summary>
      <param name="value">The <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> object to remove.</param>
    </member>
    <member name="T:System.DirectoryServices.Protocols.DirectoryAttributeModification">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeModification" /> class enables modification of the <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> values.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryAttributeModification.#ctor">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryAttributeModification.#ctor" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeModification" /> class.</summary>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DirectoryAttributeModification.Operation">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DirectoryAttributeModification.Operation" /> property specifies one of <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeOperation" /> modifications to perform.</summary>
      <returns>The <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeOperation" /> modification to perform.</returns>
    </member>
    <member name="T:System.DirectoryServices.Protocols.DirectoryAttributeModificationCollection">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeModificationCollection" /> class contains a collection of <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeModification" /> objects.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryAttributeModificationCollection.#ctor">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryAttributeModificationCollection.#ctor" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeModificationCollection" /> class.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryAttributeModificationCollection.Add(System.DirectoryServices.Protocols.DirectoryAttributeModification)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryAttributeModificationCollection.Add(System.DirectoryServices.Protocols.DirectoryAttributeModification)" /> method adds a <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeModification" /> object to the collection.</summary>
      <returns>The zero-based index in the collection where the <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeModification" /> was added.</returns>
      <param name="attribute">The <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeModification" /> to add.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="attribute" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryAttributeModificationCollection.AddRange(System.DirectoryServices.Protocols.DirectoryAttributeModification[])">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryAttributeModificationCollection.AddRange(System.DirectoryServices.Protocols.DirectoryAttributeModification[])" /> method adds an array of <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeModification" /> objects to the collection.</summary>
      <param name="attributes">An array of <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeModification" /> objects to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributes" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">One of the members of <paramref name="attributes" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryAttributeModificationCollection.AddRange(System.DirectoryServices.Protocols.DirectoryAttributeModificationCollection)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryAttributeModificationCollection.AddRange(System.DirectoryServices.Protocols.DirectoryAttributeModificationCollection)" /> method adds a <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeModificationCollection" /> object to the current collection.</summary>
      <param name="attributeCollection">The <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeModificationCollection" /> collection to add to this collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeCollection" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryAttributeModificationCollection.Contains(System.DirectoryServices.Protocols.DirectoryAttributeModification)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryAttributeModificationCollection.Contains(System.DirectoryServices.Protocols.DirectoryAttributeModification)" /> method determines whether this <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeModificationCollection" /> object contains a specified <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeModification" /> object.</summary>
      <returns>true if the specified <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeModification" /> is part of the collection; false otherwise.</returns>
      <param name="value">The <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeModification" /> object for which to search.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryAttributeModificationCollection.CopyTo(System.DirectoryServices.Protocols.DirectoryAttributeModification[],System.Int32)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryAttributeModificationCollection.CopyTo(System.DirectoryServices.Protocols.DirectoryAttributeModification[],System.Int32)" /> method copies the entire collection to a one-dimensional array, starting at the specified index of the target array.</summary>
      <param name="array">A one-dimensional array that is the destination of the elements copied from the <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeModificationCollection" /> object.</param>
      <param name="index">The zero-based index of <paramref name="array" /> where copying begins.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryAttributeModificationCollection.IndexOf(System.DirectoryServices.Protocols.DirectoryAttributeModification)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryAttributeModificationCollection.IndexOf(System.DirectoryServices.Protocols.DirectoryAttributeModification)" /> method returns the zero-based index of the first occurrence of the specified <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeModification" /> object in the <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeModificationCollection" />.</summary>
      <returns>The index value of the specified <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeModification" /> object, if found; otherwise, -1.</returns>
      <param name="value">The <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeModificationCollection" /> object for which the index is returned.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryAttributeModificationCollection.Insert(System.Int32,System.DirectoryServices.Protocols.DirectoryAttributeModification)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryAttributeModificationCollection.Insert(System.Int32,System.DirectoryServices.Protocols.DirectoryAttributeModification)" /> method inserts a <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeModification" /> object into the <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeModificationCollection" /> collection at the specified index.</summary>
      <param name="index">The zero-based index in the collection at which to insert the <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeModification" /> object.</param>
      <param name="value">The <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeModification" /> object to insert.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero, or <paramref name="index" /> is greater than the number of elements in the <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeModificationCollection" /> object.</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DirectoryAttributeModificationCollection.Item(System.Int32)">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DirectoryAttributeModificationCollection.Item(System.Int32)" /> property contains the <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeModification" /> object at the specified <paramref name="index" />.</summary>
      <returns>The <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeModification" /> object at the specified <paramref name="index" />.</returns>
      <param name="index">The index value of the <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeModification" /> object.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryAttributeModificationCollection.OnValidate(System.Object)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryAttributeModificationCollection.OnValidate(System.Object)" /> method verifies that <paramref name="value" /> is a <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeModification" /> object.</summary>
      <param name="value">The object to evaluate.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryAttributeModificationCollection.Remove(System.DirectoryServices.Protocols.DirectoryAttributeModification)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryAttributeModificationCollection.Remove(System.DirectoryServices.Protocols.DirectoryAttributeModification)" /> method removes the first occurrence of the specified <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeModification" /> object from the collection.</summary>
      <param name="value">The <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeModification" /> object to remove.</param>
    </member>
    <member name="T:System.DirectoryServices.Protocols.DirectoryAttributeOperation">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeOperation" /> enumeration specifies the operation to perform on a directory attribute.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.DirectoryAttributeOperation.Add">
      <summary>Add an attribute value. The value is equal to 0.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.DirectoryAttributeOperation.Delete">
      <summary>Delete an attribute value. The value is equal to 1.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.DirectoryAttributeOperation.Replace">
      <summary>Replace an attribute value. The value is equal to 2.</summary>
    </member>
    <member name="T:System.DirectoryServices.Protocols.DirectoryConnection">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.DirectoryConnection" /> class is an abstract class and cannot be instantiated. Use the <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> or <see cref="T:System.DirectoryServices.Protocols.DsmlSoapHttpConnection" /> classes to connect to a directory server.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryConnection.#ctor">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryConnection.#ctor" /> constructor initializes a new instance of a <see cref="T:System.DirectoryServices.Protocols.DirectoryConnection" /> class.</summary>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DirectoryConnection.ClientCertificates">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DirectoryConnection.ClientCertificates" /> property specifies one or more client certificates to send for authentication.</summary>
      <returns>One or more client certificates to send for authentication.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DirectoryConnection.Credential">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DirectoryConnection.Credential" /> property specifies alternate credentials for the connection object.</summary>
      <returns>Alternate credentials for the connection object.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DirectoryConnection.Directory">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DirectoryConnection.Directory" /> property specifies the domain or the server to which the connection should be made.</summary>
      <returns>The domain or the server to which the connection should be made.</returns>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryConnection.SendRequest(System.DirectoryServices.Protocols.DirectoryRequest)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryConnection.SendRequest(System.DirectoryServices.Protocols.DirectoryRequest)" /> method sends a single directory operation to the server.</summary>
      <returns>A <see cref="T:System.DirectoryServices.Protocols.DirectoryResponse" /> object that contains the server response to the request operation. The returned response object may be different than the requested object if the server returns a different response. </returns>
      <param name="request">A <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> object that contains the request.</param>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DirectoryConnection.Timeout">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DirectoryConnection.Timeout" /> property contains the length of time, in seconds, before the connection times out.</summary>
      <returns>The length of time, in seconds, before the connection times out.</returns>
    </member>
    <member name="T:System.DirectoryServices.Protocols.DirectoryControl">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.DirectoryControl" /> class specifies extension data for various LDAP operations.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryControl.#ctor(System.String,System.Byte[],System.Boolean,System.Boolean)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryControl.#ctor(System.String,System.Byte[],System.Boolean,System.Boolean)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.DirectoryControl" /> class using the specified   values for the type, value, criticality, and ServerSide properties.</summary>
      <param name="type">The control type.</param>
      <param name="value">The value associated with the control.</param>
      <param name="isCritical">Specifies if the control is critical. The default is true.</param>
      <param name="serverSide">Specifies if this is a server-side control.  The default is true. false specifies a client-side control.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> parameter is null.</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryControl.GetValue">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryControl.GetValue" /> method returns the data associated with the control.</summary>
      <returns>The data associated with the control.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DirectoryControl.IsCritical">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DirectoryControl.IsCritical" /> property specifies whether the control is critical.</summary>
      <returns>true if the control is critical; otherwise, false.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DirectoryControl.ServerSide">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DirectoryControl.ServerSide" /> property specifies whether this is a server-side control.</summary>
      <returns>true if the control is a server-side control. false specifies a client-side control.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DirectoryControl.Type">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DirectoryControl.Type" /> property contains the object identifier (OID) of the control.</summary>
      <returns>The OID of the control.</returns>
    </member>
    <member name="T:System.DirectoryServices.Protocols.DirectoryControlCollection">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.DirectoryControlCollection" /> class manages a collection of <see cref="T:System.DirectoryServices.Protocols.DirectoryControl" /> objects.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryControlCollection.#ctor">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryControlCollection.#ctor" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.DirectoryControlCollection" /> class.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryControlCollection.Add(System.DirectoryServices.Protocols.DirectoryControl)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryControlCollection.Add(System.DirectoryServices.Protocols.DirectoryControl)" /> method adds a new <see cref="T:System.DirectoryServices.Protocols.DirectoryControl" /> object to the collection.</summary>
      <returns>The index of the <see cref="T:System.DirectoryServices.Protocols.DirectoryControlCollection" /> at which the <see cref="T:System.DirectoryServices.Protocols.DirectoryControl" /> object has been added.</returns>
      <param name="control">The <see cref="T:System.DirectoryServices.Protocols.DirectoryControl" /> object to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="control" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryControlCollection.AddRange(System.DirectoryServices.Protocols.DirectoryControl[])">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryControlCollection.AddRange(System.DirectoryServices.Protocols.DirectoryControl[])" /> method adds an array of <see cref="T:System.DirectoryServices.Protocols.DirectoryControl" /> objects to the collection.</summary>
      <param name="controls">An array of <see cref="T:System.DirectoryServices.Protocols.DirectoryControl" /> objects to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controls" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">A member of the array is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryControlCollection.AddRange(System.DirectoryServices.Protocols.DirectoryControlCollection)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryControlCollection.AddRange(System.DirectoryServices.Protocols.DirectoryControlCollection)" /> method adds a <see cref="T:System.DirectoryServices.Protocols.DirectoryControlCollection" /> object to the current collection.</summary>
      <param name="controlCollection">The <see cref="T:System.DirectoryServices.Protocols.DirectoryControlCollection" /> object to add to this collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="controlCollection" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryControlCollection.Contains(System.DirectoryServices.Protocols.DirectoryControl)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryControlCollection.Contains(System.DirectoryServices.Protocols.DirectoryControl)" /> method determines whether this <see cref="T:System.DirectoryServices.Protocols.DirectoryControlCollection" /> object contains a specified <see cref="T:System.DirectoryServices.Protocols.DirectoryControl" /> object.</summary>
      <returns>true if the specified <see cref="T:System.DirectoryServices.Protocols.DirectoryControl" /> object is part of the collection; false, otherwise.</returns>
      <param name="value">The <see cref="T:System.DirectoryServices.Protocols.DirectoryControl" /> object for which to search.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryControlCollection.CopyTo(System.DirectoryServices.Protocols.DirectoryControl[],System.Int32)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryControlCollection.CopyTo(System.DirectoryServices.Protocols.DirectoryControl[],System.Int32)" /> method copies the entire collection to a one-dimensional array, starting at the specified index of the target array.</summary>
      <param name="array">A one-dimensional array that is the destination of the elements copied from the <see cref="T:System.DirectoryServices.Protocols.DirectoryControlCollection" /> object.</param>
      <param name="index">The zero-based index of <paramref name="array" /> where copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is a null reference (Nothing in Visual Basic). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional-or-The number of elements in the source <see cref="T:System.DirectoryServices.Protocols.DirectoryControlCollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</exception>
      <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.DirectoryServices.Protocols.DirectoryControlCollection" />  cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryControlCollection.IndexOf(System.DirectoryServices.Protocols.DirectoryControl)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryControlCollection.IndexOf(System.DirectoryServices.Protocols.DirectoryControl)" /> method returns the zero-based index of the first occurrence of the specified <see cref="T:System.DirectoryServices.Protocols.DirectoryControl" /> object in the <see cref="T:System.DirectoryServices.Protocols.DirectoryControlCollection" />.</summary>
      <returns>The index value of the specified <see cref="T:System.DirectoryServices.Protocols.DirectoryControl" /> object, if found; otherwise, -1.</returns>
      <param name="value">The <see cref="T:System.DirectoryServices.Protocols.DirectoryControl" /> object for which the index is returned.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryControlCollection.Insert(System.Int32,System.DirectoryServices.Protocols.DirectoryControl)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryControlCollection.Insert(System.Int32,System.DirectoryServices.Protocols.DirectoryControl)" /> method inserts the specified <see cref="T:System.DirectoryServices.Protocols.DirectoryControl" /> object into the <see cref="T:System.DirectoryServices.Protocols.DirectoryControlCollection" /> at the specified index.</summary>
      <param name="index">The index in the collection at which to insert the <see cref="T:System.DirectoryServices.Protocols.DirectoryControl" /> object.</param>
      <param name="value">The <see cref="T:System.DirectoryServices.Protocols.DirectoryControl" /> object to be inserted into the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero, or <paramref name="index" /> is greater than the number of elements in the <see cref="T:System.DirectoryServices.Protocols.DirectoryControlCollection" /> object.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.DirectoryServices.Protocols.DirectoryControlCollection" /> is read-only, or <see cref="T:System.DirectoryServices.Protocols.DirectoryControlCollection" /> has a fixed size.</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DirectoryControlCollection.Item(System.Int32)">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DirectoryControlCollection.Item(System.Int32)" /> property contains the <see cref="T:System.DirectoryServices.Protocols.DirectoryControl" /> object at the specified index.</summary>
      <returns>Contains the <see cref="T:System.DirectoryServices.Protocols.DirectoryControl" /> object at the specified index.</returns>
      <param name="index">The index value of the <see cref="T:System.DirectoryServices.Protocols.DirectoryControl" /> object. </param>
      <exception cref="T:System.ArgumentNullException">There was an attempt to set the property to null.</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryControlCollection.OnValidate(System.Object)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryControlCollection.OnValidate(System.Object)" /> method verifies that <paramref name="value" /> is a <see cref="T:System.DirectoryServices.Protocols.DirectoryControl" /> object.          </summary>
      <param name="value">The object to evaluate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is a null reference (Nothing in Visual Basic). </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.DirectoryServices.Protocols.DirectoryControl" /> object.</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryControlCollection.Remove(System.DirectoryServices.Protocols.DirectoryControl)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryControlCollection.Remove(System.DirectoryServices.Protocols.DirectoryControl)" /> method removes the first occurrence of the specified <see cref="T:System.DirectoryServices.Protocols.DirectoryControl" /> object from the collection.</summary>
      <param name="value">The <see cref="T:System.DirectoryServices.Protocols.DirectoryControl" /> object to remove.</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.DirectoryServices.Protocols.DirectoryControlCollection" /> is read-only, or <see cref="T:System.DirectoryServices.Protocols.DirectoryControlCollection" /> has a fixed size.</exception>
    </member>
    <member name="T:System.DirectoryServices.Protocols.DirectoryException">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.DirectoryException" /> class is an abstract class used as the base class for all <see cref="N:System.DirectoryServices.Protocols" /> exceptions.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryException.#ctor">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryException.#ctor" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.DirectoryException" /> class.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.DirectoryException" /> class using the specified serialization information and streaming contextual information.</summary>
      <param name="info">The serialized object data about the exception being thrown. </param>
      <param name="context">The contextual information about the source or destination. </param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryException.#ctor(System.String)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryException.#ctor(System.String)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.DirectoryException" /> class using the specified parameter.</summary>
      <param name="message">The message displayed to the client when the exception is thrown.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryException.#ctor(System.String,System.Exception)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryException.#ctor(System.String,System.Exception)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.DirectoryException" /> class using the specified parameters.</summary>
      <param name="message">The message displayed to the client when the exception is thrown.</param>
      <param name="inner">The <see cref="P:System.Exception.InnerException" />, if any, that threw the exception.</param>
    </member>
    <member name="T:System.DirectoryServices.Protocols.DirectoryIdentifier">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.DirectoryIdentifier" /> class is an abstract class that identifies the target to connect to.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryIdentifier.#ctor">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryIdentifier.#ctor" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.DirectoryIdentifier" /> class.</summary>
    </member>
    <member name="T:System.DirectoryServices.Protocols.DirectoryNotificationControl">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.DirectoryNotificationControl" /> class is a directory control used with an extended LDAP asynchronous search function to register the client to be notified when changes are made to an object in the Active Directory Domain Services.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryNotificationControl.#ctor">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryNotificationControl.#ctor" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.DirectoryNotificationControl" /> class.</summary>
    </member>
    <member name="T:System.DirectoryServices.Protocols.DirectoryOperation">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.DirectoryOperation" /> class is an abstract class used as a base for request and response elements.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryOperation.#ctor">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryOperation.#ctor" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.DirectoryOperation" /> object.</summary>
    </member>
    <member name="T:System.DirectoryServices.Protocols.DirectoryOperationException">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.DirectoryOperationException" /> class is an exception thrown by the <see cref="M:System.DirectoryServices.Protocols.LdapConnection.SendRequest(System.DirectoryServices.Protocols.DirectoryRequest)" /> method to indicate that the server returned a <see cref="T:System.DirectoryServices.Protocols.DirectoryResponse" /> object with an error.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryOperationException.#ctor">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryOperationException.#ctor" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.DirectoryOperationException" /> class.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryOperationException.#ctor(System.DirectoryServices.Protocols.DirectoryResponse)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryOperationException.#ctor(System.DirectoryServices.Protocols.DirectoryResponse)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.DirectoryOperationException" /> class using the specified response object.</summary>
      <param name="response">The <see cref="T:System.DirectoryServices.Protocols.DirectoryResponse" /> object returned by the server.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryOperationException.#ctor(System.DirectoryServices.Protocols.DirectoryResponse,System.String)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryOperationException.#ctor(System.DirectoryServices.Protocols.DirectoryResponse,System.String)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.DirectoryOperationException" /> object using the specified response object and message.</summary>
      <param name="response">The <see cref="T:System.DirectoryServices.Protocols.DirectoryResponse" /> object returned by the server.</param>
      <param name="message">The message displayed to the client when the exception is thrown.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryOperationException.#ctor(System.DirectoryServices.Protocols.DirectoryResponse,System.String,System.Exception)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryOperationException.#ctor(System.DirectoryServices.Protocols.DirectoryResponse,System.String,System.Exception)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.DirectoryOperationException" /> class using the specified response object, message, and inner exception. </summary>
      <param name="response">The <see cref="T:System.DirectoryServices.Protocols.DirectoryResponse" /> object returned by the server.</param>
      <param name="message">The message displayed to the client when the exception is thrown.</param>
      <param name="inner">The <see cref="P:System.Exception.InnerException" />, if any, that threw the exception.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.DirectoryOperationException" /> class using the specified serialization information and streaming context.</summary>
      <param name="info">Data required to serialize the parameter.</param>
      <param name="context">The source and destination of the serialized stream associated with the parameter.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryOperationException.#ctor(System.String)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryOperationException.#ctor(System.String)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.DirectoryOperationException" /> class using the specified message.</summary>
      <param name="message">The message displayed to the client when the exception is thrown.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryOperationException.#ctor(System.String,System.Exception)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryOperationException.#ctor(System.String,System.Exception)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.DirectoryOperationException" /> class using the specified message and inner exception.</summary>
      <param name="message">The message displayed to the client when the exception is thrown.</param>
      <param name="inner">The <see cref="P:System.Exception.InnerException" />, if any, that threw the exception.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryOperationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryOperationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> method populates the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the data required to serialize the parameter.</summary>
      <param name="serializationInfo">Data required to serialize the parameter.</param>
      <param name="streamingContext">The source and destination of the serialized stream associated with the parameter.</param>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DirectoryOperationException.Response">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DirectoryOperationException.Response" /> property specifies the <see cref="T:System.DirectoryServices.Protocols.DirectoryResponse" /> object returned by the server that contains an error.</summary>
      <returns>The <see cref="T:System.DirectoryServices.Protocols.DirectoryResponse" /> object returned by the server that contains an error.</returns>
    </member>
    <member name="T:System.DirectoryServices.Protocols.DirectoryRequest">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> class is the base class for request related classes, like the <see cref="T:System.DirectoryServices.Protocols.SearchRequest" /> and <see cref="T:System.DirectoryServices.Protocols.AddRequest" /> classes.</summary>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DirectoryRequest.Controls">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DirectoryRequest.Controls" /> property contains a <see cref="T:System.DirectoryServices.Protocols.DirectoryControlCollection" /> object.</summary>
      <returns>A <see cref="T:System.DirectoryServices.Protocols.DirectoryControlCollection" /> object.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DirectoryRequest.RequestId">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DirectoryRequest.RequestId" /> property contains the <paramref name="requestID" /> specified in the request.</summary>
      <returns>The <paramref name="requestID" /> specified in the request.</returns>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirectoryRequest.ToXmlNode(System.Xml.XmlDocument)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirectoryRequest.ToXmlNode(System.Xml.XmlDocument)" /> method creates an XML node from the specified <see cref="T:System.Xml.XmlDocument" /> object.</summary>
      <returns>The created <see cref="T:System.Xml.XmlElement" />.</returns>
      <param name="doc">The <see cref="T:System.Xml.XmlDocument" /> to represent as an XML element.</param>
    </member>
    <member name="T:System.DirectoryServices.Protocols.DirectoryResponse">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.DirectoryResponse" /> class is the base class for request response classes, like the <see cref="T:System.DirectoryServices.Protocols.SearchResponse" /> and <see cref="T:System.DirectoryServices.Protocols.AddResponse" /> classes.</summary>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DirectoryResponse.Controls">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DirectoryResponse.Controls" /> property contains an array of <see cref="T:System.DirectoryServices.Protocols.DirectoryControl" /> objects returned by the server.</summary>
      <returns>An array of <see cref="T:System.DirectoryServices.Protocols.DirectoryControl" /> objects returned by the server.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DirectoryResponse.ErrorMessage">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DirectoryResponse.ErrorMessage" /> property contains the error message, if any, for this operation.</summary>
      <returns>The error message, if any, for this operation.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DirectoryResponse.MatchedDN">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DirectoryResponse.MatchedDN" /> property contains the matched distinguished name returned by the server.</summary>
      <returns>The matched distinguished name returned by the server.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DirectoryResponse.Referral">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DirectoryResponse.Referral" /> property contains the server referrals.</summary>
      <returns>The server referrals.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DirectoryResponse.RequestId">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DirectoryResponse.RequestId" /> property contains the Request Identifier.</summary>
      <returns>The Request Identifier.</returns>
      <exception cref="T:System.NotSupportedException">User attempted to set the property value.</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DirectoryResponse.ResultCode">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DirectoryResponse.ResultCode" /> property contains the result code of the operation.</summary>
      <returns>The result code of the operation.</returns>
    </member>
    <member name="T:System.DirectoryServices.Protocols.DirectorySynchronizationOptions">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.DirectorySynchronizationOptions" /> enumeration specifies the behavior of the search in a <see cref="T:System.DirectoryServices.Protocols.DirSyncRequestControl" /> object.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.DirectorySynchronizationOptions.None">
      <summary>No options used. The value equals 0 or 0x0.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.DirectorySynchronizationOptions.ObjectSecurity">
      <summary>If this option is used, the caller requires no rights, but can only view objects and attributes that are accessible to the caller. If this option is not used, the caller must have the replicate changes right. The value equals 1 or 0x1.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.DirectorySynchronizationOptions.ParentsFirst">
      <summary>Return parents before children, when parents would otherwise appear later in the replication stream. The value equals 2048 or 0x800.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.DirectorySynchronizationOptions.PublicDataOnly">
      <summary>Do not return private data in search results. The value equals 8192 or 0x2000.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.DirectorySynchronizationOptions.IncrementalValues">
      <summary>If this option is used, only changed values are returned. If this option is not used, all values, up to a server-specified limit, in a multi-valued attribute, are returned when a value changes. The value equals 2147483648 or 0x80000000.</summary>
    </member>
    <member name="T:System.DirectoryServices.Protocols.DirSyncRequestControl">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.DirSyncRequestControl" /> class is a directory control that enables the application to search the directory for objects that have changed since a previous state.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirSyncRequestControl.#ctor">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirSyncRequestControl.#ctor" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.DirSyncRequestControl" /> class.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirSyncRequestControl.#ctor(System.Byte[])">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirSyncRequestControl.#ctor(System.Byte[])" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.DirSyncRequestControl" /> class using the specified parameter.</summary>
      <param name="cookie">An opaque structure used by the server. It is updated by the directory during each <see cref="T:System.DirectoryServices.Protocols.SearchRequest" />, which enables the control to incrementally read changes from the directory.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirSyncRequestControl.#ctor(System.Byte[],System.DirectoryServices.Protocols.DirectorySynchronizationOptions)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirSyncRequestControl.#ctor(System.Byte[],System.DirectoryServices.Protocols.DirectorySynchronizationOptions)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.DirSyncRequestControl" /> class using the specified parameters.</summary>
      <param name="cookie">An opaque structure used by the server. It is updated by the directory during each <see cref="T:System.DirectoryServices.Protocols.SearchRequest" />, which enables the control to incrementally read changes from the directory.</param>
      <param name="option">Specifies the behavior of the search. This parameter can be zero or a combination of one or more of the values of <see cref="T:System.DirectoryServices.Protocols.DirectorySynchronizationOptions" />.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirSyncRequestControl.#ctor(System.Byte[],System.DirectoryServices.Protocols.DirectorySynchronizationOptions,System.Int32)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirSyncRequestControl.#ctor(System.Byte[],System.DirectoryServices.Protocols.DirectorySynchronizationOptions,System.Int32)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.DirSyncRequestControl" /> class using the specified parameters.</summary>
      <param name="cookie">An opaque structure used by the server. It is updated by the directory during each <see cref="T:System.DirectoryServices.Protocols.SearchRequest" />, which enables the control to incrementally read changes from the directory.</param>
      <param name="option">Specifies the behavior of the search. This parameter can be zero or a combination of one or more of the values of <see cref="T:System.DirectoryServices.Protocols.DirectorySynchronizationOptions" />. </param>
      <param name="attributeCount">The maximum number of attributes to return. The default is 1048576.</param>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DirSyncRequestControl.AttributeCount">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DirSyncRequestControl.AttributeCount" /> property specifies the maximum number of attributes to return.</summary>
      <returns>The maximum number of attributes to return.</returns>
      <exception cref="T:System.ArgumentException">There was an attempt to set a value less than zero.</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DirSyncRequestControl.Cookie">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DirSyncRequestControl.Cookie" /> property contains an opaque structure used by the server.</summary>
      <returns>An opaque structure used by the server.</returns>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DirSyncRequestControl.GetValue">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DirSyncRequestControl.GetValue" /> method returns the data associated with this control.</summary>
      <returns>The data associated with this control.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DirSyncRequestControl.Option">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DirSyncRequestControl.Option" /> property specifies the behavior of the search.</summary>
      <returns>The behavior of the search.</returns>
    </member>
    <member name="T:System.DirectoryServices.Protocols.DirSyncResponseControl">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.DirSyncResponseControl" /> class is a directory control used to pass DirSyncRequest information from the server to the client.</summary>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DirSyncResponseControl.Cookie">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DirSyncResponseControl.Cookie" /> property contains an opaque structure returned by the directory.</summary>
      <returns>An opaque structure returned by the directory.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DirSyncResponseControl.MoreData">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DirSyncResponseControl.MoreData" /> property specifies whether there is more data to return.</summary>
      <returns>true if there is more data; false, otherwise.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DirSyncResponseControl.ResultSize">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DirSyncResponseControl.ResultSize" /> property specifies the size of the result.</summary>
      <returns>The size of the result.</returns>
    </member>
    <member name="T:System.DirectoryServices.Protocols.DomainScopeControl">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.DomainScopeControl" /> class is a directory control used to instruct the LDAP server not to generate referrals when completing a request.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DomainScopeControl.#ctor">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DomainScopeControl.#ctor" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.DomainScopeControl" /> class.</summary>
    </member>
    <member name="T:System.DirectoryServices.Protocols.DsmlAuthRequest">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.DsmlAuthRequest" /> class indicates that access control for the requests be interpreted as though the requests are performed by the security principal identified by the <see cref="P:System.DirectoryServices.Protocols.DsmlAuthRequest.Principal" /> property.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DsmlAuthRequest.#ctor">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DsmlAuthRequest.#ctor" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.DsmlAuthRequest" /> class.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DsmlAuthRequest.#ctor(System.String)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DsmlAuthRequest.#ctor(System.String)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.DsmlAuthRequest" /> class using the specified parameter.</summary>
      <param name="principal">The security principal.</param>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DsmlAuthRequest.Principal">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DsmlAuthRequest.Principal" /> property contains the security principal.</summary>
      <returns>The security principal.</returns>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DsmlAuthRequest.ToXmlNode(System.Xml.XmlDocument)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DsmlAuthRequest.ToXmlNode(System.Xml.XmlDocument)" /> method transforms an <see cref="T:System.Xml.XmlDocument" /> object into its DSML v2 XML representation.</summary>
      <returns>The transformed <see cref="T:System.Xml.XmlElement" /> object.</returns>
      <param name="doc">An <see cref="T:System.Xml.XmlDocument" /> object.</param>
    </member>
    <member name="T:System.DirectoryServices.Protocols.DsmlAuthResponse">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.DsmlAuthResponse" /> class is returned by <see cref="M:System.DirectoryServices.Protocols.DirectoryConnection.SendRequest(System.DirectoryServices.Protocols.DirectoryRequest)" /> as a response to <see cref="T:System.DirectoryServices.Protocols.DsmlAuthRequest" />.</summary>
    </member>
    <member name="T:System.DirectoryServices.Protocols.DsmlDirectoryIdentifier">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.DsmlDirectoryIdentifier" /> class identifies an HTTP server.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DsmlDirectoryIdentifier.#ctor(System.Uri)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DsmlDirectoryIdentifier.#ctor(System.Uri)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.DsmlDirectoryIdentifier" /> class using the specified parameter.</summary>
      <param name="serverUri">A server represented as a <see cref="T:System.Uri" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serverUri" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="serverUri" /> scheme is not http or https.</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DsmlDirectoryIdentifier.ServerUri">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DsmlDirectoryIdentifier.ServerUri" /> property contains the <see cref="T:System.Uri" /> of the server this object identifies.</summary>
      <returns>The <see cref="T:System.Uri" /> of the server this object identifies.</returns>
    </member>
    <member name="T:System.DirectoryServices.Protocols.DsmlDocument">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.DsmlDocument" /> class is an abstract class to construct or manipulate a DSML document. It is the base class for both <see cref="T:System.DirectoryServices.Protocols.DsmlRequestDocument" /> and <see cref="T:System.DirectoryServices.Protocols.DsmlResponseDocument" />. <see cref="T:System.DirectoryServices.Protocols.DsmlDocument" /> supports collections and indexes. Each item in its collection is an object derived from <see cref="T:System.DirectoryServices.Protocols.DirectoryOperation" />.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DsmlDocument.#ctor">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DsmlDocument.#ctor" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.DsmlDocument" /> class.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DsmlDocument.ToXml">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DsmlDocument.ToXml" /> method transforms this <see cref="T:System.DirectoryServices.Protocols.DsmlDocument" /> object into a <see cref="T:System.Xml.XmlDocument" /> object.</summary>
      <returns>The transformed <see cref="T:System.Xml.XmlDocument" /> object.</returns>
    </member>
    <member name="T:System.DirectoryServices.Protocols.DsmlDocumentProcessing">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.DsmlDocumentProcessing" /> enumeration specifies the processing method for a DSML document.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.DsmlDocumentProcessing.Sequential">
      <summary>Sequential.  Value is equal to 0.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.DsmlDocumentProcessing.Parallel">
      <summary>Parallel.  Value is equal to 1.</summary>
    </member>
    <member name="T:System.DirectoryServices.Protocols.DsmlErrorProcessing">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.DsmlErrorProcessing" /> enumeration specifies how to proceed when an error occurs.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.DsmlErrorProcessing.Resume">
      <summary>Resume. Value is equal to 0.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.DsmlErrorProcessing.Exit">
      <summary>Exit. Value is equal to 1.</summary>
    </member>
    <member name="T:System.DirectoryServices.Protocols.DsmlErrorResponse">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.DsmlErrorResponse" /> class is generated by the server when a severe error occurs.</summary>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DsmlErrorResponse.Controls">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DsmlErrorResponse.Controls" /> property is not applicable to a DSML &lt;errorResponse&gt;.</summary>
      <returns>Not applicable to a DSML &lt;errorResponse&gt;.</returns>
      <exception cref="T:System.NotSupportedException">This property is not valid for a DSML error response.</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DsmlErrorResponse.Detail">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DsmlErrorResponse.Detail" /> property contains the contents of the &lt;detail&gt; element of the errorResponse, if any.</summary>
      <returns>The contents of the &lt;detail&gt; element of the errorResponse, if any.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DsmlErrorResponse.ErrorMessage">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DsmlErrorResponse.ErrorMessage" /> property is not applicable to a DSML &lt;errorResponse&gt;.</summary>
      <returns>not applicable to a DSML &lt;errorResponse&gt;.</returns>
      <exception cref="T:System.NotSupportedException">This property is not valid for a DSML error response.</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DsmlErrorResponse.MatchedDN">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DsmlErrorResponse.MatchedDN" /> property is not applicable to a DSML &lt;errorResponse&gt;.</summary>
      <returns>Not applicable to a DSML &lt;errorResponse&gt;.</returns>
      <exception cref="T:System.NotSupportedException">This property is not valid for a DSML error response.</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DsmlErrorResponse.Message">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DsmlErrorResponse.Message" /> property contains the text returned in the &lt;message&gt; element of the errorResponse, if any.</summary>
      <returns>The text returned in the &lt;message&gt; element of the errorResponse, if any.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DsmlErrorResponse.Referral">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DsmlErrorResponse.Referral" /> property is not applicable to a DSML &lt;errorResponse&gt;.</summary>
      <returns>Not applicable to a DSML &lt;errorResponse&gt;.</returns>
      <exception cref="T:System.NotSupportedException">This property is not valid for a DSML error response.</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DsmlErrorResponse.ResultCode">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DsmlErrorResponse.ResultCode" /> property is not applicable to a DSML &lt;errorResponse&gt;.</summary>
      <returns>Not applicable to a DSML &lt;errorResponse&gt;.</returns>
      <exception cref="T:System.NotSupportedException">This property is not valid for a DSML error response.</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DsmlErrorResponse.Type">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DsmlErrorResponse.Type" /> property contains a value of <see cref="T:System.DirectoryServices.Protocols.ErrorResponseCategory" /> that specifies the type of the error response returned by the server.</summary>
      <returns>A value of <see cref="T:System.DirectoryServices.Protocols.ErrorResponseCategory" /> that specifies the type of the error response returned by the server.</returns>
    </member>
    <member name="T:System.DirectoryServices.Protocols.DsmlInvalidDocumentException">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.DsmlInvalidDocumentException" /> class is an exception that occurs when a DSML Request or Response document is not well-formed XML or cannot be validated with DSMLv2 schema.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DsmlInvalidDocumentException.#ctor">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DsmlInvalidDocumentException.#ctor" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.DsmlInvalidDocumentException" /> class.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DsmlInvalidDocumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DsmlInvalidDocumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.DsmlInvalidDocumentException" /> class using the specified serialization data and streaming contextual data.</summary>
      <param name="info">The serialized object data about the exception thrown.</param>
      <param name="context">The contextual data about the source or destination.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DsmlInvalidDocumentException.#ctor(System.String)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DsmlInvalidDocumentException.#ctor(System.String)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.DsmlInvalidDocumentException" /> class using the specified parameter.</summary>
      <param name="message">The message displayed to the client when the exception is thrown.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DsmlInvalidDocumentException.#ctor(System.String,System.Exception)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DsmlInvalidDocumentException.#ctor(System.String,System.Exception)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.DsmlInvalidDocumentException" /> class using the specified parameters.</summary>
      <param name="message">The message displayed to the client when the exception is thrown.</param>
      <param name="inner">The <see cref="P:System.Exception.InnerException" />, if any, that threw the exception.</param>
    </member>
    <member name="T:System.DirectoryServices.Protocols.DsmlRequestDocument">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.DsmlRequestDocument" /> class enables you to build a DSML request payload, such as <see cref="T:System.DirectoryServices.Protocols.AddRequest" />, <see cref="T:System.DirectoryServices.Protocols.ModifyRequest" />, or <see cref="T:System.DirectoryServices.Protocols.SearchRequest" />.  It contains zero or more <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> derived objects. The user may add, delete, modify, and enumerate the <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> before sending to the server. <see cref="T:System.DirectoryServices.Protocols.DsmlRequestDocument" /> can be used with any DSML Binding classes to transport the document, such as <see cref="T:System.DirectoryServices.Protocols.DsmlSoapHttpConnection" />.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DsmlRequestDocument.#ctor">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DsmlRequestDocument.#ctor" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.DsmlRequestDocument" /> class.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DsmlRequestDocument.Add(System.DirectoryServices.Protocols.DirectoryRequest)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DsmlRequestDocument.Add(System.DirectoryServices.Protocols.DirectoryRequest)" /> method adds a <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> object to the collection.</summary>
      <returns>The index of the <see cref="T:System.DirectoryServices.Protocols.DsmlRequestDocument" /> collection at which the <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> object was added.</returns>
      <param name="request">The <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> object to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DsmlRequestDocument.Clear">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DsmlRequestDocument.Clear" /> method removes all items from this collection.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DsmlRequestDocument.Contains(System.DirectoryServices.Protocols.DirectoryRequest)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DsmlRequestDocument.Contains(System.DirectoryServices.Protocols.DirectoryRequest)" /> method determines whether this <see cref="T:System.DirectoryServices.Protocols.DsmlRequestDocument" /> collection contains the specified <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> object.</summary>
      <returns>true if the specified <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> object is part of the collection; false, otherwise.</returns>
      <param name="value">The <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> object for which to search.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DsmlRequestDocument.CopyTo(System.DirectoryServices.Protocols.DirectoryRequest[],System.Int32)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DsmlRequestDocument.CopyTo(System.DirectoryServices.Protocols.DirectoryRequest[],System.Int32)" /> method copies the entire <see cref="T:System.DirectoryServices.Protocols.DsmlRequestDocument" /> collection to a one-dimensional array, starting at the specified index of the target array.</summary>
      <param name="value">A one-dimensional array that is the destination of the elements copied from the <see cref="T:System.DirectoryServices.Protocols.DsmlRequestDocument" /> object.</param>
      <param name="i">The zero-based index of <paramref name="value" /> where copying begins.</param>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DsmlRequestDocument.Count">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DsmlRequestDocument.Count" /> property contains the number of <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> objects in this collection.</summary>
      <returns>The number of <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> objects in this collection.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DsmlRequestDocument.DocumentProcessing">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DsmlRequestDocument.DocumentProcessing" /> property contains one of the values of <see cref="T:System.DirectoryServices.Protocols.DsmlDocumentProcessing" /> that specifies how the elements of the collection are processed.</summary>
      <returns>One of the values of <see cref="T:System.DirectoryServices.Protocols.DsmlDocumentProcessing" /> that specifies how the elements of the collection are processed.</returns>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="value" /> is an invalid enumeration value.</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DsmlRequestDocument.ErrorProcessing">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DsmlRequestDocument.ErrorProcessing" /> property contains one of the values of <see cref="T:System.DirectoryServices.Protocols.DsmlErrorProcessing" /> that specifies how errors are processed.</summary>
      <returns>One of the values of <see cref="T:System.DirectoryServices.Protocols.DsmlErrorProcessing" /> that specifies how errors are processed.</returns>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="value" /> is an invalid enumeration value.</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DsmlRequestDocument.GetEnumerator">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DsmlRequestDocument.GetEnumerator" /> method returns an enumerator for the entire <see cref="T:System.DirectoryServices.Protocols.DsmlRequestDocument" /> collection.</summary>
      <returns>A <see cref="T:System.Collections.IEnumerator" /> object for the entire collection.</returns>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DsmlRequestDocument.IndexOf(System.DirectoryServices.Protocols.DirectoryRequest)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DsmlRequestDocument.IndexOf(System.DirectoryServices.Protocols.DirectoryRequest)" /> method returns the zero-based index of the first occurrence of the specified <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> object in the <see cref="T:System.DirectoryServices.Protocols.DsmlRequestDocument" /> collection.</summary>
      <returns>The index value of the specified <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> object, if found; otherwise, -1.</returns>
      <param name="value">The <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> object for which the index is returned.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DsmlRequestDocument.Insert(System.Int32,System.DirectoryServices.Protocols.DirectoryRequest)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DsmlRequestDocument.Insert(System.Int32,System.DirectoryServices.Protocols.DirectoryRequest)" /> method inserts the specified <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> object into the <see cref="T:System.DirectoryServices.Protocols.DsmlRequestDocument" /> collection at the specified index.</summary>
      <param name="index">The index in the collection at which to insert the <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> object.</param>
      <param name="value">The <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> object to be inserted into the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DsmlRequestDocument.IsFixedSize">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DsmlRequestDocument.IsFixedSize" /> property contains a value that indicates whether the <see cref="T:System.DirectoryServices.Protocols.DsmlRequestDocument" /> has a fixed size.</summary>
      <returns>true if the <see cref="T:System.DirectoryServices.Protocols.DsmlRequestDocument" /> has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DsmlRequestDocument.IsReadOnly">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DsmlRequestDocument.IsReadOnly" /> property contains a value indicating whether the <see cref="T:System.DirectoryServices.Protocols.DsmlRequestDocument" /> is read only or not.</summary>
      <returns>true if the <see cref="T:System.DirectoryServices.Protocols.DsmlRequestDocument" /> is read only; otherwise, false.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DsmlRequestDocument.IsSynchronized">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DsmlRequestDocument.IsSynchronized" /> property contains a value that indicates whether access to the <see cref="T:System.DirectoryServices.Protocols.DsmlRequestDocument" /> is synchronized (thread-safe).</summary>
      <returns>true if access to the <see cref="T:System.DirectoryServices.Protocols.DsmlRequestDocument" /> is synchronized (thread-safe); otherwise, false.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DsmlRequestDocument.Item(System.Int32)">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DsmlRequestDocument.Item(System.Int32)" /> property contains the <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> object at the specified index.</summary>
      <returns>The <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> object at the specified index.</returns>
      <param name="index">The zero-based index value at which the <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> object is found.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="index" /> is set to a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DsmlRequestDocument.Remove(System.DirectoryServices.Protocols.DirectoryRequest)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DsmlRequestDocument.Remove(System.DirectoryServices.Protocols.DirectoryRequest)" /> method removes the first occurrence of the specified <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> object from the collection.</summary>
      <param name="value">The <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> object to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />
                is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DsmlRequestDocument.RemoveAt(System.Int32)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DsmlRequestDocument.RemoveAt(System.Int32)" /> method removes the <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> object at the specified position.</summary>
      <param name="index">The zero-based index of the <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> object to remove.</param>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DsmlRequestDocument.RequestId">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DsmlRequestDocument.RequestId" /> property contains the <paramref name="RequestID" /> associated with the <see cref="T:System.DirectoryServices.Protocols.DsmlRequestDocument" />.</summary>
      <returns>The <paramref name="RequestID" /> associated with the <see cref="T:System.DirectoryServices.Protocols.DsmlRequestDocument" />.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DsmlRequestDocument.ResponseOrder">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DsmlRequestDocument.ResponseOrder" /> property contains one of the values of <see cref="T:System.DirectoryServices.Protocols.DsmlResponseOrder" /> that specifies the order of the response.</summary>
      <returns>One of the values of <see cref="T:System.DirectoryServices.Protocols.DsmlResponseOrder" /> that specifies the order of the response.</returns>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="value" /> is an invalid enumeration value.</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DsmlRequestDocument.SyncRoot">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DsmlRequestDocument.SyncRoot" /> property contains an object that can be used to synchronize access to the <see cref="T:System.DirectoryServices.Protocols.DsmlRequestDocument" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.DirectoryServices.Protocols.DsmlRequestDocument" />.</returns>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DsmlRequestDocument.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DsmlRequestDocument.System.Collections.ICollection.CopyTo(System.Array,System.Int32)" /> method copies the entire <see cref="T:System.DirectoryServices.Protocols.DsmlRequestDocument" /> collection to a one-dimensional array, starting at the specified index of the target array.</summary>
      <param name="value">A one-dimensional array that is the destination of the elements copied from the <see cref="T:System.DirectoryServices.Protocols.DsmlRequestDocument" /> object.</param>
      <param name="i">The zero-based index of <paramref name="value" /> where copying begins.</param>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DsmlRequestDocument.System#Collections#ICollection#Count">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DsmlRequestDocument.System.Collections.ICollection.Count" /> property gets the number of <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> objects in this collection.</summary>
      <returns>The number of <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> objects.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DsmlRequestDocument.System#Collections#ICollection#IsSynchronized">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DsmlRequestDocument.System.Collections.ICollection.IsSynchronized" /> property gets a value that indicates whether access to the <see cref="T:System.DirectoryServices.Protocols.DsmlRequestDocument" /> is synchronized (thread-safe).</summary>
      <returns>true if access to the <see cref="T:System.DirectoryServices.Protocols.DsmlRequestDocument" /> is synchronized (thread-safe); otherwise, false.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DsmlRequestDocument.System#Collections#ICollection#SyncRoot">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DsmlRequestDocument.System.Collections.ICollection.SyncRoot" /> property gets an object that can be used to synchronize access to the <see cref="T:System.DirectoryServices.Protocols.DsmlRequestDocument" />.</summary>
      <returns>An object that can be used to synchronize access to <see cref="T:System.DirectoryServices.Protocols.DsmlRequestDocument" />.</returns>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DsmlRequestDocument.System#Collections#IList#Add(System.Object)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DsmlRequestDocument.System.Collections.IList.Add(System.Object)" /> method adds a <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> object to the collection.</summary>
      <returns>The index of the <see cref="T:System.DirectoryServices.Protocols.DsmlRequestDocument" /> collection at which the <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> object was added.</returns>
      <param name="request">The <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> object to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="request" /> is not a  <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> object.</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DsmlRequestDocument.System#Collections#IList#Clear">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DsmlRequestDocument.System.Collections.IList.Clear" /> method removes all items from the collection.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DsmlRequestDocument.System#Collections#IList#Contains(System.Object)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DsmlRequestDocument.System.Collections.IList.Contains(System.Object)" /> method determines whether this <see cref="T:System.DirectoryServices.Protocols.DsmlRequestDocument" /> collection contains the specified <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> object.</summary>
      <returns>true if the specified <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> object is part of the collection; false, otherwise.</returns>
      <param name="value">The <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> object for which to search.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DsmlRequestDocument.System#Collections#IList#IndexOf(System.Object)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DsmlRequestDocument.System.Collections.IList.IndexOf(System.Object)" /> method returns the zero-based index of the first occurrence of the specified <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> object in the <see cref="T:System.DirectoryServices.Protocols.DsmlRequestDocument" /> collection.</summary>
      <returns>The index value of the specified <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> object, if found; otherwise, -1.</returns>
      <param name="value">The <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> object for which the index is returned.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DsmlRequestDocument.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DsmlRequestDocument.System.Collections.IList.Insert(System.Int32,System.Object)" /> method inserts the specified <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> object into the <see cref="T:System.DirectoryServices.Protocols.DsmlRequestDocument" /> collection at the specified index.</summary>
      <param name="index">The index in the collection at which to insert the <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> object.</param>
      <param name="value">The <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> object to be inserted into the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a  <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> object.</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DsmlRequestDocument.System#Collections#IList#IsFixedSize">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DsmlRequestDocument.System.Collections.IList.IsFixedSize" /> property gets a value that indicates whether the <see cref="T:System.DirectoryServices.Protocols.DsmlRequestDocument" /> has a fixed size.</summary>
      <returns>true if the <see cref="T:System.DirectoryServices.Protocols.DsmlRequestDocument" /> has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DsmlRequestDocument.System#Collections#IList#IsReadOnly">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DsmlRequestDocument.System.Collections.IList.IsReadOnly" /> property gets a value that indicates whether the <see cref="T:System.DirectoryServices.Protocols.DsmlRequestDocument" /> is read-only or not.</summary>
      <returns>true if the <see cref="T:System.DirectoryServices.Protocols.DsmlRequestDocument" /> is read only; otherwise, false.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DsmlRequestDocument.System#Collections#IList#Item(System.Int32)">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DsmlRequestDocument.System.Collections.IList.Item(System.Int32)" /> property gets or sets the <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> object at the specified index.</summary>
      <returns>The <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> object at the specified <paramref name="index" />.</returns>
      <param name="index">The zero-based index value at which the <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> object is found.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="index" /> is set to a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a  <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> object.</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DsmlRequestDocument.System#Collections#IList#Remove(System.Object)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DsmlRequestDocument.System.Collections.IList.Remove(System.Object)" /> method removes the first occurrence of the specified <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> object from the collection.</summary>
      <param name="value">The <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> object to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DsmlRequestDocument.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DsmlRequestDocument.System.Collections.IList.RemoveAt(System.Int32)" /> method removes the <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> object at the specified position.</summary>
      <param name="index">The zero-based index of the <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> object to remove.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DsmlRequestDocument.ToXml">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DsmlRequestDocument.ToXml" /> method transforms each <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> object in the collection into an <see cref="T:System.Xml.XmlDocument" /> object.</summary>
      <returns>The transformed <see cref="T:System.Xml.XmlDocument" /> object.</returns>
    </member>
    <member name="T:System.DirectoryServices.Protocols.DsmlResponseDocument">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.DsmlResponseDocument" /> class is a read-only collection generated as a response to a <see cref="T:System.DirectoryServices.Protocols.DsmlRequestDocument" /> object that contains zero, or more, objects derived from <see cref="T:System.DirectoryServices.Protocols.DirectoryResponse" />.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DsmlResponseDocument.CopyTo(System.DirectoryServices.Protocols.DirectoryResponse[],System.Int32)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DsmlResponseDocument.CopyTo(System.DirectoryServices.Protocols.DirectoryResponse[],System.Int32)" /> method copies the entire collection to a one-dimensional array, starting at the specified index of the target array.</summary>
      <param name="value">A one-dimensional array that is the destination of the elements copied from the <see cref="T:System.DirectoryServices.Protocols.DsmlRequestDocument" /> object.</param>
      <param name="i">The zero-based index of <paramref name="value" /> where copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is a null reference (Nothing in Visual Basic). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is multidimensional-or-The number of elements in the source <see cref="T:System.DirectoryServices.Protocols.DsmlRequestDocument" /> is greater than the available space from i to the end of the destination <paramref name="value" />.</exception>
      <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.DirectoryServices.Protocols.DsmlRequestDocument" /> cannot be cast automatically to the type of the destination <paramref name="value" />.</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DsmlResponseDocument.Count">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DsmlResponseDocument.Count" /> property contains the number of <see cref="T:System.DirectoryServices.Protocols.DirectoryResponse" /> objects in this collection.</summary>
      <returns>The number of <see cref="T:System.DirectoryServices.Protocols.DirectoryResponse" /> objects in this collection.</returns>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DsmlResponseDocument.GetEnumerator">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DsmlResponseDocument.GetEnumerator" /> method returns an enumerator for the entire <see cref="T:System.DirectoryServices.Protocols.DsmlResponseDocument" /> collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object for the entire collection.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DsmlResponseDocument.IsErrorResponse">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DsmlResponseDocument.IsErrorResponse" /> property specifies whether an error response has occurred.</summary>
      <returns>This property is true if an error response has occurred; false, otherwise.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DsmlResponseDocument.IsOperationError">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DsmlResponseDocument.IsOperationError" /> property specifies whether an operation error response has occurred.</summary>
      <returns>This property is true if an operation error has occurred; false, otherwise.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DsmlResponseDocument.IsSynchronized">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DsmlResponseDocument.IsSynchronized" /> property contains a value that indicates whether access to the <see cref="T:System.DirectoryServices.Protocols.DsmlResponseDocument" /> is synchronized (thread-safe).</summary>
      <returns>true if access to the <see cref="T:System.DirectoryServices.Protocols.DsmlResponseDocument" /> is synchronized (thread-safe); otherwise, false.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DsmlResponseDocument.Item(System.Int32)">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DsmlResponseDocument.Item(System.Int32)" /> property contains the <see cref="T:System.DirectoryServices.Protocols.DirectoryResponse" /> object at the specified index.</summary>
      <returns>The <see cref="T:System.DirectoryServices.Protocols.DirectoryResponse" /> object at the specified index.</returns>
      <param name="index">The zero-based index value at which the <see cref="T:System.DirectoryServices.Protocols.DirectoryResponse" /> object is found.</param>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DsmlResponseDocument.RequestId">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DsmlResponseDocument.RequestId" /> property contains the RequestID associated with the document.</summary>
      <returns>The RequestID associated with the document.</returns>
      <exception cref="T:System.NotSupportedException">You attempted to set the property value.</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DsmlResponseDocument.SyncRoot">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DsmlResponseDocument.SyncRoot" /> property contains an object that can be used to synchronize access to the <see cref="T:System.DirectoryServices.Protocols.DsmlResponseDocument" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.DirectoryServices.Protocols.DsmlResponseDocument" />.</returns>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DsmlResponseDocument.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DsmlResponseDocument.System.Collections.ICollection.CopyTo(System.Array,System.Int32)" /> method copies the entire <see cref="T:System.DirectoryServices.Protocols.DsmlResponseDocument" /> collection to a one-dimensional array, starting at the specified index of the target array.</summary>
      <param name="value">A one-dimensional array that is the destination of the elements copied from the <see cref="T:System.DirectoryServices.Protocols.DsmlResponseDocument" /> object.</param>
      <param name="i">The zero-based index of <paramref name="value" /> where copying begins.</param>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DsmlResponseDocument.System#Collections#ICollection#Count">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DsmlResponseDocument.System.Collections.ICollection.Count" /> property gets the number of <see cref="T:System.DirectoryServices.Protocols.DirectoryResponse" /> objects in this collection.</summary>
      <returns>The number of <see cref="T:System.DirectoryServices.Protocols.DirectoryResponse" /> objects.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DsmlResponseDocument.System#Collections#ICollection#IsSynchronized">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DsmlResponseDocument.System.Collections.ICollection.IsSynchronized" /> property gets a value that indicates whether access to the <see cref="T:System.DirectoryServices.Protocols.DsmlResponseDocument" /> is synchronized (thread-safe).</summary>
      <returns>true if access to the <see cref="T:System.DirectoryServices.Protocols.DsmlResponseDocument" /> is synchronized (thread-safe); otherwise, false.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DsmlResponseDocument.System#Collections#ICollection#SyncRoot">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DsmlResponseDocument.System.Collections.ICollection.SyncRoot" /> property gets an object that can be used to synchronize access to the <see cref="T:System.DirectoryServices.Protocols.DsmlResponseDocument" />.</summary>
      <returns>An object that can be used to synchronize access to <see cref="T:System.DirectoryServices.Protocols.DsmlResponseDocument" />.</returns>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DsmlResponseDocument.ToXml">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DsmlResponseDocument.ToXml" /> method transforms each <see cref="T:System.DirectoryServices.Protocols.DirectoryResponse" /> object in the collection into an <see cref="T:System.Xml.XmlDocument" /> object.</summary>
      <returns>The transformed <see cref="T:System.Xml.XmlDocument" /> object.</returns>
    </member>
    <member name="T:System.DirectoryServices.Protocols.DsmlResponseOrder">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.DsmlResponseOrder" /> enumeration specifies the order in which responses are received.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.DsmlResponseOrder.Sequential">
      <summary>Sequential. The value is equal to 0.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.DsmlResponseOrder.Unordered">
      <summary>Unordered. The value is equal to 1.</summary>
    </member>
    <member name="T:System.DirectoryServices.Protocols.DsmlSoapConnection">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.DsmlSoapConnection" /> class is an abstract class that cannot be instantiated. It enables stateless and stateful protocols to be handled similarly by providing session-oriented features.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DsmlSoapConnection.#ctor">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DsmlSoapConnection.#ctor" /> constructor initializes a new instance of a <see cref="T:System.DirectoryServices.Protocols.DsmlSoapConnection" /> class.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DsmlSoapConnection.BeginSession">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DsmlSoapConnection.BeginSession" /> method instructs the DSML server to start a new session.</summary>
      <exception cref="T:System.InvalidOperationException">Thrown when a session is already open on the connection.</exception>
      <exception cref="T:System.DirectoryServices.Protocols.DsmlInvalidDocumentException">Thrown when the XML returned from the Server in response to the BeginSession is not well-formed.</exception>
      <exception cref="T:System.Net.WebException">Thrown when there is a communications failure with the DSML server.</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DsmlSoapConnection.EndSession">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DsmlSoapConnection.EndSession" /> method ends the session with the DSML server and clears the <see cref="P:System.DirectoryServices.Protocols.DsmlSoapConnection.SessionId" /> property.</summary>
      <exception cref="T:System.Net.WebException">Thrown when a communications failure occurs with the DSML server.</exception>
      <exception cref="T:System.InvalidOperationException">Thrown when there is no open session.</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DsmlSoapConnection.SessionId">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DsmlSoapConnection.SessionId" /> property contains the active session ID.</summary>
      <returns>The active session ID.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DsmlSoapConnection.SoapRequestHeader">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DsmlSoapConnection.SoapRequestHeader" /> property contains the SOAP Header attached to outgoing requests.</summary>
      <returns>The SOAP Header attached to outgoing requests.</returns>
    </member>
    <member name="T:System.DirectoryServices.Protocols.DsmlSoapHttpConnection">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.DsmlSoapHttpConnection" /> class represents a connection to a DSML Gateway using SOAP over HTTP.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DsmlSoapHttpConnection.#ctor(System.DirectoryServices.Protocols.DsmlDirectoryIdentifier)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DsmlSoapHttpConnection.#ctor(System.DirectoryServices.Protocols.DsmlDirectoryIdentifier)" /> constructor initializes a new instance of a <see cref="T:System.DirectoryServices.Protocols.DsmlSoapHttpConnection" /> class.</summary>
      <param name="identifier">A <see cref="T:System.DirectoryServices.Protocols.DsmlDirectoryIdentifier" /> object that specifies server for the connection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="identifier" /> is null (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DsmlSoapHttpConnection.#ctor(System.DirectoryServices.Protocols.DsmlDirectoryIdentifier,System.Net.NetworkCredential)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DsmlSoapHttpConnection.#ctor(System.DirectoryServices.Protocols.DsmlDirectoryIdentifier,System.Net.NetworkCredential)" /> constructor initializes a new instance of a <see cref="T:System.DirectoryServices.Protocols.DsmlSoapHttpConnection" /> class.</summary>
      <param name="identifier">A <see cref="T:System.DirectoryServices.Protocols.DsmlDirectoryIdentifier" /> object that specifies server for the connection.</param>
      <param name="credential">A <see cref="T:System.Net.NetworkCredential" /> object that contains the network credentials.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="identifier" /> is null (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DsmlSoapHttpConnection.#ctor(System.DirectoryServices.Protocols.DsmlDirectoryIdentifier,System.Net.NetworkCredential,System.DirectoryServices.Protocols.AuthType)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DsmlSoapHttpConnection.#ctor(System.DirectoryServices.Protocols.DsmlDirectoryIdentifier,System.Net.NetworkCredential,System.DirectoryServices.Protocols.AuthType)" /> constructor creates and initializes a new instance of a <see cref="T:System.DirectoryServices.Protocols.DsmlSoapHttpConnection" /> class using the specified identifier, network credentials, and authentication type.</summary>
      <param name="identifier">A <see cref="T:System.DirectoryServices.Protocols.DsmlDirectoryIdentifier" /> object that specifies the server for the connection.</param>
      <param name="credential">A <see cref="T:System.Net.NetworkCredential" /> object that contains the Network Credentials.</param>
      <param name="authType">The <see cref="T:System.DirectoryServices.Protocols.AuthType" /> value that specifies the authentication type to use for this connection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="identifier" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="authType" /> value is not one of the DSML supported values. DSML only supports Anonymous, Ntlm, Basic, Negotiate and digest.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="authType" /> value is not one of the constants defined in the <see cref="T:System.DirectoryServices.Protocols.AuthType" /> enumeration.</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DsmlSoapHttpConnection.#ctor(System.Uri)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DsmlSoapHttpConnection.#ctor(System.Uri)" /> constructor initializes a new instance of a <see cref="T:System.DirectoryServices.Protocols.DsmlSoapHttpConnection" /> class.</summary>
      <param name="uri">A <see cref="T:System.Uri" /> object that specifies server for the connection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> is null (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DsmlSoapHttpConnection.Abort(System.IAsyncResult)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DsmlSoapHttpConnection.Abort(System.IAsyncResult)" /> method cancels the asynchronous request.</summary>
      <param name="asyncResult">An object derived from <see cref="T:System.IAsyncResult" /> that references the asynchronous request.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> is null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> was not returned by the corresponding call to <see cref="M:System.DirectoryServices.Protocols.DsmlSoapHttpConnection.BeginSendRequest(System.DirectoryServices.Protocols.DsmlRequestDocument,System.AsyncCallback,System.Object)" />.</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DsmlSoapHttpConnection.AuthType">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DsmlSoapHttpConnection.AuthType" /> property contains one of the values of <see cref="T:System.DirectoryServices.Protocols.AuthType" /> enumeration that specifies the authentication type.</summary>
      <returns>One of the values of <see cref="T:System.DirectoryServices.Protocols.AuthType" /> enumeration that specifies the authentication type.</returns>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DsmlSoapHttpConnection.BeginSendRequest(System.DirectoryServices.Protocols.DsmlRequestDocument,System.AsyncCallback,System.Object)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DsmlSoapHttpConnection.BeginSendRequest(System.DirectoryServices.Protocols.DsmlRequestDocument,System.AsyncCallback,System.Object)" /> method begins asynchronously sending the specified <see cref="T:System.DirectoryServices.Protocols.DsmlRequestDocument" /> object to the server.</summary>
      <returns>An object derived from <see cref="T:System.IAsyncResult" /> that references the asynchronous send.</returns>
      <param name="request">The <see cref="T:System.DirectoryServices.Protocols.DsmlRequestDocument" /> object to send.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> function.</param>
      <param name="state">An <see cref="T:System.Object" /> that contains the state data for this request.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> is null (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DsmlSoapHttpConnection.BeginSession">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DsmlSoapHttpConnection.BeginSession" /> method instructs the DSML server to start a new session.</summary>
      <exception cref="T:System.InvalidOperationException">Thrown when a session is already open on the connection.</exception>
      <exception cref="T:System.DirectoryServices.Protocols.DsmlInvalidDocumentException">Thrown when the XML returned from the Server in response to the <see cref="M:System.DirectoryServices.Protocols.DsmlSoapHttpConnection.BeginSession" /> is not well-formed.</exception>
      <exception cref="T:System.Net.WebException">Thrown when there is a communications failure with the DSML server or when the server is out of available sessions.</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DsmlSoapHttpConnection.EndSendRequest(System.IAsyncResult)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DsmlSoapHttpConnection.EndSendRequest(System.IAsyncResult)" /> method completes an asynchronous send request.</summary>
      <returns>A <see cref="T:System.DirectoryServices.Protocols.DsmlResponseDocument" /> object that contains the results of the request.</returns>
      <param name="asyncResult">An object derived from <see cref="T:System.IAsyncResult" /> that contains state data for this request.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="asyncResult" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Thrown if <paramref name="asyncResult" /> was not returned by the current instance from a call to <see cref="M:System.DirectoryServices.Protocols.DsmlSoapHttpConnection.BeginSendRequest(System.DirectoryServices.Protocols.DsmlRequestDocument,System.AsyncCallback,System.Object)" />.</exception>
      <exception cref="T:System.IO.IOException">The request did not complete. No stream is available.</exception>
      <exception cref="T:System.DirectoryServices.Protocols.DsmlInvalidDocumentException">Thrown when the response returned by server is not valid.</exception>
      <exception cref="T:System.Net.WebException">Thrown when abort was previously called or when an error occurred while processing the request.</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DsmlSoapHttpConnection.EndSession">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DsmlSoapHttpConnection.EndSession" /> method ends the session with the DSML server and clears the <see cref="P:System.DirectoryServices.Protocols.DsmlSoapHttpConnection.SessionId" /> property.</summary>
      <exception cref="T:System.Net.WebException">Thrown when there is a communications failure with the DSML server.</exception>
      <exception cref="T:System.InvalidOperationException">Thrown when there is no open session.</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DsmlSoapHttpConnection.SendRequest(System.DirectoryServices.Protocols.DirectoryRequest)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DsmlSoapHttpConnection.SendRequest(System.DirectoryServices.Protocols.DirectoryRequest)" /> method sends a single <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> object.</summary>
      <returns>A <see cref="T:System.DirectoryServices.Protocols.DirectoryResponse" /> object that contains the results of the request.</returns>
      <param name="request">A <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> object that contains the request.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> is null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.DirectoryServices.Protocols.ErrorResponseException">The DSML server returned an error response.</exception>
      <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">The operation returned a failure code.</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.DsmlSoapHttpConnection.SendRequest(System.DirectoryServices.Protocols.DsmlRequestDocument)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.DsmlSoapHttpConnection.SendRequest(System.DirectoryServices.Protocols.DsmlRequestDocument)" /> method sends a <see cref="T:System.DirectoryServices.Protocols.DsmlRequestDocument" /> object to the DSML server.</summary>
      <returns>A <see cref="T:System.DirectoryServices.Protocols.DsmlResponseDocument" /> object that contains the results of the request.</returns>
      <param name="request">A <see cref="T:System.DirectoryServices.Protocols.DsmlRequestDocument" /> object sent to the server.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> is null (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DsmlSoapHttpConnection.SessionId">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DsmlSoapHttpConnection.SessionId" /> property contains the active session ID.</summary>
      <returns>The active session ID.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DsmlSoapHttpConnection.SoapActionHeader">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DsmlSoapHttpConnection.SoapActionHeader" /> property contains the SOAP Action Header sent with other HTTP headers.</summary>
      <returns>The SOAP Action Header sent with other HTTP headers.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.DsmlSoapHttpConnection.Timeout">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.DsmlSoapHttpConnection.Timeout" /> property contains the length of time, in seconds, before the <see cref="T:System.DirectoryServices.Protocols.DsmlSoapHttpConnection" /> times out.</summary>
      <returns>The length of time, in seconds, before the <see cref="T:System.DirectoryServices.Protocols.DsmlSoapHttpConnection" /> times out.</returns>
    </member>
    <member name="T:System.DirectoryServices.Protocols.ErrorResponseCategory">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.ErrorResponseCategory" /> enumeration contains possible DSML error responses.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ErrorResponseCategory.NotAttempted">
      <summary>The DSML provider did not attempt to execute a request element. The value is equal to 0.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ErrorResponseCategory.CouldNotConnect">
      <summary>The DSML provider was unable to connect to a server. The value is equal to 1.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ErrorResponseCategory.ConnectionClosed">
      <summary>The DSML provider connected to a server, but the server closed the connection without responding to the request. The value is equal to 2.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ErrorResponseCategory.MalformedRequest">
      <summary>The client failed to specify a request ID for each request. The value is equal to 3.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ErrorResponseCategory.GatewayInternalError">
      <summary>There is an internal gateway error. The value is equal to 4.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ErrorResponseCategory.AuthenticationFailed">
      <summary>Authentication failed. The value is equal to 5.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ErrorResponseCategory.UnresolvableUri">
      <summary>The client provider is unable to resolve the URI to a value that can transferred to the server. The value is equal to 6.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ErrorResponseCategory.Other">
      <summary>An unknown error occurred. The value is equal to 7.</summary>
    </member>
    <member name="T:System.DirectoryServices.Protocols.ErrorResponseException">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.ErrorResponseException" /> class is an exception that occurs when the server returns an &lt;errorResponse&gt;.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.ErrorResponseException.#ctor">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.ErrorResponseException.#ctor" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.ErrorResponseException" /> class.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.ErrorResponseException.#ctor(System.DirectoryServices.Protocols.DsmlErrorResponse)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.ErrorResponseException.#ctor(System.DirectoryServices.Protocols.DsmlErrorResponse)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.ErrorResponseException" /> class using the specified response object. The default message displayed to the client is "&lt;errorResponse&gt; returned".</summary>
      <param name="response">The <see cref="T:System.DirectoryServices.Protocols.DsmlErrorResponse" /> object returned by the server that corresponds to the &lt;errorResponse&gt;. </param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.ErrorResponseException.#ctor(System.DirectoryServices.Protocols.DsmlErrorResponse,System.String)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.ErrorResponseException.#ctor(System.DirectoryServices.Protocols.DsmlErrorResponse,System.String)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.ErrorResponseException" /> class using the specified response object and message.</summary>
      <param name="response">The <see cref="T:System.DirectoryServices.Protocols.DsmlErrorResponse" /> object returned by the server that corresponds to the &lt;errorResponse&gt;. </param>
      <param name="message">The message displayed to the client when the exception occurs.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.ErrorResponseException.#ctor(System.DirectoryServices.Protocols.DsmlErrorResponse,System.String,System.Exception)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.ErrorResponseException.#ctor(System.DirectoryServices.Protocols.DsmlErrorResponse,System.String,System.Exception)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.ErrorResponseException" /> class using the specified response object, message, and inner exception.</summary>
      <param name="response">The <see cref="T:System.DirectoryServices.Protocols.DsmlErrorResponse" /> object returned by the server that corresponds to the &lt;errorResponse&gt;. </param>
      <param name="message">The message displayed to the client when the exception occurs.</param>
      <param name="inner">The <see cref="P:System.Exception.InnerException" />, if any, that threw the exception.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.ErrorResponseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.ErrorResponseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.ErrorResponseException" /> class using the specified serialization data and streaming context.</summary>
      <param name="info">Data required to serialize the parameter.</param>
      <param name="context">The source and destination of the serialized stream associated with the parameter.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.ErrorResponseException.#ctor(System.String)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.ErrorResponseException.#ctor(System.String)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.ErrorResponseException" /> class using the specified message.</summary>
      <param name="message">The message displayed to the client when the exception occurs.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.ErrorResponseException.#ctor(System.String,System.Exception)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.ErrorResponseException.#ctor(System.String,System.Exception)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.ErrorResponseException" /> class using the specified message and inner exception.</summary>
      <param name="message">The message displayed to the client when the exception occurs.</param>
      <param name="inner">The <see cref="P:System.Exception.InnerException" />, if any, that threw the exception.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.ErrorResponseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.ErrorResponseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> method populates the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the data required to serialize the parameter.</summary>
      <param name="serializationInfo">Data required to serialize the parameter.</param>
      <param name="streamingContext">The source and destination of the serialized stream associated with the parameter.</param>
    </member>
    <member name="P:System.DirectoryServices.Protocols.ErrorResponseException.Response">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.ErrorResponseException.Response" /> property contains the <see cref="T:System.DirectoryServices.Protocols.DsmlErrorResponse" /> object that corresponds to the &lt;errorResponse&gt;.</summary>
      <returns>The <see cref="T:System.DirectoryServices.Protocols.DsmlErrorResponse" /> object that corresponds to the &lt;errorResponse&gt;.</returns>
    </member>
    <member name="T:System.DirectoryServices.Protocols.ExtendedDNControl">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.ExtendedDNControl" /> class requests an extended form of the distinguished name of an Active Directory Domain Services object.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.ExtendedDNControl.#ctor">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.ExtendedDNControl.#ctor" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.ExtendedDNControl" /> class.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.ExtendedDNControl.#ctor(System.DirectoryServices.Protocols.ExtendedDNFlag)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.ExtendedDNControl.#ctor(System.DirectoryServices.Protocols.ExtendedDNFlag)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.ExtendedDNControl" /> class using the specified flag.</summary>
      <param name="flag">A value of the <see cref="T:System.DirectoryServices.Protocols.ExtendedDNFlag" /> enumeration that specifies the format of the extended distinguished name.</param>
    </member>
    <member name="P:System.DirectoryServices.Protocols.ExtendedDNControl.Flag">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.ExtendedDNControl.Flag" /> property contains one of the values of <see cref="T:System.DirectoryServices.Protocols.ExtendedDNFlag" /> that specifies the format of the extended distinguished name.</summary>
      <returns>One of the values of <see cref="T:System.DirectoryServices.Protocols.ExtendedDNFlag" /> that specifies the format of the extended distinguished name.</returns>
    </member>
    <member name="M:System.DirectoryServices.Protocols.ExtendedDNControl.GetValue">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.ExtendedDNControl.GetValue" /> method returns the format of the extended distinguished name.</summary>
      <returns>The format of the extended distinguished name.</returns>
    </member>
    <member name="T:System.DirectoryServices.Protocols.ExtendedDNFlag">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.ExtendedDNFlag" /> enumeration specifies the format of an extended distinguished name.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ExtendedDNFlag.HexString">
      <summary>Specifies that the GUID and SID values are returned in hexadecimal format. The value is equal to 0.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ExtendedDNFlag.StandardString">
      <summary>Specifies that the GUID and SID values are returned in standard string format. The value is equal to 1.</summary>
    </member>
    <member name="T:System.DirectoryServices.Protocols.ExtendedRequest">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.ExtendedRequest" /> class passes extended LDAP operations to the server.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.ExtendedRequest.#ctor">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.ExtendedRequest.#ctor" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.ExtendedRequest" /> class.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.ExtendedRequest.#ctor(System.String)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.ExtendedRequest.#ctor(System.String)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.ExtendedRequest" /> class using the specified name.</summary>
      <param name="requestName">The name of the request.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.ExtendedRequest.#ctor(System.String,System.Byte[])">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.ExtendedRequest.#ctor(System.String,System.Byte[])" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.ExtendedRequest" /> class using the specified name and value.</summary>
      <param name="requestName">The name of the request.</param>
      <param name="requestValue">The value of the request.</param>
    </member>
    <member name="P:System.DirectoryServices.Protocols.ExtendedRequest.RequestName">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.ExtendedRequest.RequestName" /> property contains the request name.</summary>
      <returns>The request name.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.ExtendedRequest.RequestValue">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.ExtendedRequest.RequestValue" /> property contains the value of the request.</summary>
      <returns>The value of the request.</returns>
    </member>
    <member name="M:System.DirectoryServices.Protocols.ExtendedRequest.ToXmlNode(System.Xml.XmlDocument)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.ExtendedRequest.ToXmlNode(System.Xml.XmlDocument)" /> method creates an XML node from the specified <see cref="T:System.Xml.XmlDocument" /> object.</summary>
      <returns>The resulting <see cref="T:System.Xml.XmlElement" /> object.</returns>
      <param name="doc">An <see cref="T:System.Xml.XmlDocument" /> object.</param>
    </member>
    <member name="T:System.DirectoryServices.Protocols.ExtendedResponse">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.ExtendedResponse" /> class is returned by <see cref="M:System.DirectoryServices.Protocols.DirectoryConnection.SendRequest(System.DirectoryServices.Protocols.DirectoryRequest)" /> as a response to <see cref="T:System.DirectoryServices.Protocols.ExtendedRequest" />.</summary>
    </member>
    <member name="P:System.DirectoryServices.Protocols.ExtendedResponse.ResponseName">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.ExtendedResponse.ResponseName" /> property contains the name of the response returned by the server.</summary>
      <returns>The name of the response returned by the server.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.ExtendedResponse.ResponseValue">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.ExtendedResponse.ResponseValue" /> property contains the optional response value returned by the server.</summary>
      <returns>The optional response value returned by the server.</returns>
      <exception cref="T:System.DirectoryServices.Protocols.DsmlInvalidDocumentException">The server returned an invalid value.</exception>
    </member>
    <member name="T:System.DirectoryServices.Protocols.LazyCommitControl">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.LazyCommitControl" /> class instructs the server to return the results of a DS modification command, such as add, delete, or replace, after it has been completed in memory, but before it has been committed to disk.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.LazyCommitControl.#ctor">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.LazyCommitControl.#ctor" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.LazyCommitControl" /> class.</summary>
    </member>
    <member name="T:System.DirectoryServices.Protocols.LdapConnection">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> class creates a TCP/IP or UDP LDAP connection to Microsoft Active Directory Domain Services or an LDAP server. </summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.LdapConnection.#ctor(System.DirectoryServices.Protocols.LdapDirectoryIdentifier)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.LdapConnection.#ctor(System.DirectoryServices.Protocols.LdapDirectoryIdentifier)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> class using the specified directory identifier. The logon credentials and the Negotiate Authentication are used to connect to the LDAP server.</summary>
      <param name="identifier">An <see cref="T:System.DirectoryServices.Protocols.LdapDirectoryIdentifier" /> object that specifies the server.</param>
      <exception cref="T:System.DirectoryServices.Protocols.LdapException">Thrown if it fails to create a connection block or fails to open a connection to server.</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.LdapConnection.#ctor(System.DirectoryServices.Protocols.LdapDirectoryIdentifier,System.Net.NetworkCredential)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.LdapConnection.#ctor(System.DirectoryServices.Protocols.LdapDirectoryIdentifier,System.Net.NetworkCredential)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> class using the specified directory identifier and network credentials. Negotiate Authentication is used.</summary>
      <param name="identifier">An <see cref="T:System.DirectoryServices.Protocols.LdapDirectoryIdentifier" /> object that specifies the server.</param>
      <param name="credential">A <see cref="T:System.Net.NetworkCredential" /> object that specifies the credentials to use.</param>
      <exception cref="T:System.DirectoryServices.Protocols.LdapException">Thrown if it fails to create a connection block or fails to open a connection to server.</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.LdapConnection.#ctor(System.DirectoryServices.Protocols.LdapDirectoryIdentifier,System.Net.NetworkCredential,System.DirectoryServices.Protocols.AuthType)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.LdapConnection.#ctor(System.DirectoryServices.Protocols.LdapDirectoryIdentifier,System.Net.NetworkCredential,System.DirectoryServices.Protocols.AuthType)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> class using the specified directory identifier, network credentials, and authentication type.</summary>
      <param name="identifier">An <see cref="T:System.DirectoryServices.Protocols.LdapDirectoryIdentifier" /> object that specifies the server.</param>
      <param name="credential">A <see cref="T:System.Net.NetworkCredential" /> object that specifies the credentials to use.</param>
      <param name="authType">A <see cref="T:System.DirectoryServices.Protocols.AuthType" /> values that specifies the type of authentication to use.</param>
      <exception cref="T:System.DirectoryServices.Protocols.LdapException">Thrown if it fails to create a connection block or fails to open a connection to server.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when <paramref name="authType" /> is out of range.</exception>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="authType" /> is specified as Anonymous but <paramref name="credential" /> specified credentials.</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.LdapConnection.#ctor(System.String)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.LdapConnection.#ctor(System.String)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> class using the specified server.</summary>
      <param name="server">A string specifying the server  which can be a domain name, LDAP server name or dotted strings representing the IP address of the LDAP server. Optionally, this parameter may also include a port number, separated from the right end of the string by a colon (:).</param>
      <exception cref="T:System.DirectoryServices.Protocols.LdapException">Thrown if it fails to create a connection block or fails to open a connection to server.</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.LdapConnection.Abort(System.IAsyncResult)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.LdapConnection.Abort(System.IAsyncResult)" /> method cancels the asynchronous request.</summary>
      <param name="asyncResult">A <see cref="T:System.IAsyncResult" /> object that references the asynchronous request.</param>
      <exception cref="T:System.ObjectDisposedException">The object handle is not valid.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> is null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">Thrown if <paramref name="asyncResult" /> was not returned by the corresponding call to <see cref="M:System.DirectoryServices.Protocols.LdapConnection.BeginSendRequest" /></exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.LdapConnection.AuthType">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.LdapConnection.AuthType" /> property contains the supported authentication types.</summary>
      <returns>A supported authentication type.</returns>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when <paramref name="authType" /> is out of range.</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.LdapConnection.AutoBind">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.LdapConnection.AutoBind" /> property specifies whether an automatic bind is allowed.</summary>
      <returns>true if the automatic bind is allowed; otherwise, false.</returns>
    </member>
    <member name="M:System.DirectoryServices.Protocols.LdapConnection.BeginSendRequest(System.DirectoryServices.Protocols.DirectoryRequest,System.DirectoryServices.Protocols.PartialResultProcessing,System.AsyncCallback,System.Object)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.LdapConnection.BeginSendRequest(System.DirectoryServices.Protocols.DirectoryRequest,System.DirectoryServices.Protocols.PartialResultProcessing,System.AsyncCallback,System.Object)" /> method sends data asynchronously to the server.</summary>
      <returns>A <see cref="T:System.IAsyncResult" /> object that references the asynchronous send.</returns>
      <param name="request">A <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> object.</param>
      <param name="partialMode">A value from <see cref="T:System.DirectoryServices.Protocols.PartialResultProcessing" /> enumeration that specifies the level of partial result to return.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> function.</param>
      <param name="state">An <see cref="T:System.Object" /> that contains the state data for this request.</param>
      <exception cref="T:System.ObjectDisposedException">The object handle is not valid.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> is null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.NotSupportedException">Partial results are not supported. </exception>
      <exception cref="T:System.ArgumentException">A callback function must be specified if <paramref name="partialMode" /> is equal to <see cref="F:System.DirectoryServices.Protocols.PartialResultProcessing.ReturnPartialResultsAndNotifyCallback" />.</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.LdapConnection.BeginSendRequest(System.DirectoryServices.Protocols.DirectoryRequest,System.TimeSpan,System.DirectoryServices.Protocols.PartialResultProcessing,System.AsyncCallback,System.Object)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.LdapConnection.BeginSendRequest(System.DirectoryServices.Protocols.DirectoryRequest,System.TimeSpan,System.DirectoryServices.Protocols.PartialResultProcessing,System.AsyncCallback,System.Object)" /> method sends data asynchronously to the server.</summary>
      <returns>A <see cref="T:System.IAsyncResult" /> object that references the asynchronous send.</returns>
      <param name="request">A <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> object.</param>
      <param name="requestTimeout">The time, in seconds, until the request times out.</param>
      <param name="partialMode">A value from <see cref="T:System.DirectoryServices.Protocols.PartialResultProcessing" /> enumeration that specifies the level of partial result to return.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> function.</param>
      <param name="state">An <see cref="T:System.Object" /> that contains the state data for this request.</param>
      <exception cref="T:System.ObjectDisposedException">The object handle is not valid.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> is null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.NotSupportedException">Partial results are not supported. </exception>
      <exception cref="T:System.ArgumentException">A callback function must be specified if <paramref name="partialMode" /> is equal to <see cref="F:System.DirectoryServices.Protocols.PartialResultProcessing.ReturnPartialResultsAndNotifyCallback" />.</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.LdapConnection.Bind">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.LdapConnection.Bind" /> method sends an LDAP bind using the current credentials.</summary>
      <exception cref="T:System.ObjectDisposedException">The object handle is not valid.</exception>
      <exception cref="T:System.DirectoryServices.Protocols.LdapException">The error code returned by LDAP does not map to one of the <see cref="T:System.DirectoryServices.Protocols.ResultCode" /> enumeration error codes.</exception>
      <exception cref="T:System.InvalidOperationException">Either the <see cref="P:System.DirectoryServices.Protocols.DirectoryConnection.ClientCertificates" /> property specifies more than one client certificate to send for authentication, or the <see cref="P:System.DirectoryServices.Protocols.LdapConnection.AuthType" /> property is Anonymous and one or more credentials are supplied.</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.LdapConnection.Bind(System.Net.NetworkCredential)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.LdapConnection.Bind(System.Net.NetworkCredential)" /> method sends an LDAP bind using the specified <see cref="T:System.Net.NetworkCredential" />.</summary>
      <param name="newCredential">A <see cref="T:System.Net.NetworkCredential" /> object that specifies the credentials to use.</param>
      <exception cref="T:System.ObjectDisposedException">The object handle is not valid.</exception>
      <exception cref="T:System.DirectoryServices.Protocols.LdapException">The error code returned by LDAP does not map to a <see cref="T:System.DirectoryServices.Protocols.ResultCode" /> enumeration error code.</exception>
      <exception cref="T:System.InvalidOperationException">Either the <see cref="P:System.DirectoryServices.Protocols.DirectoryConnection.ClientCertificates" /> property specifies more than one client certificate to send for authentication, or the <see cref="P:System.DirectoryServices.Protocols.LdapConnection.AuthType" /> property is Anonymous and one or more credentials are supplied.</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.LdapConnection.Credential">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.LdapConnection.Credential" /> property contains the network credentials for the object.</summary>
      <returns>The network credentials for the object.</returns>
    </member>
    <member name="M:System.DirectoryServices.Protocols.LdapConnection.Dispose">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.LdapConnection.Dispose" /> method closes and releases the LDAP handle.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.LdapConnection.Dispose(System.Boolean)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.LdapConnection.Dispose(System.Boolean)" /> method closes the connection and optionally releases the LDAP handle.</summary>
      <param name="disposing">true if the handle is released when the connection is closed or false if the connection is closed without releasing the handle.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.LdapConnection.EndSendRequest(System.IAsyncResult)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.LdapConnection.EndSendRequest(System.IAsyncResult)" /> method completes an asynchronous request.</summary>
      <returns>A <see cref="T:System.DirectoryServices.Protocols.DirectoryResponse" /> object that contains the results of the request.</returns>
      <param name="asyncResult">An <see cref="T:System.IAsyncResult" /> object that contains state data for this request.</param>
      <exception cref="T:System.ObjectDisposedException">Thrown if the object is already disposed.  The object handle is not valid.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> is null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> does not match the <paramref name="asyncResult" /> returned in the <see cref="M:System.DirectoryServices.Protocols.LdapConnection.BeginSendRequest" /> call.</exception>
      <exception cref="T:System.DirectoryServices.Protocols.LdapException">The error code returned by LDAP does not map to a  <see cref="T:System.DirectoryServices.Protocols.ResultCode" /> enumeration error code.</exception>
      <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the server returned a <see cref="T:System.DirectoryServices.Protocols.DirectoryResponse" /> object with an error.</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.LdapConnection.Finalize">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.LdapConnection.Finalize" /> method allows an <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> object to attempt to free resources and perform other cleanup operations before the <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> object is reclaimed by garbage collection.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.LdapConnection.GetPartialResults(System.IAsyncResult)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.LdapConnection.GetPartialResults(System.IAsyncResult)" /> method retrieves partial results of an asynchronous operation.</summary>
      <returns>A <see cref="T:System.DirectoryServices.Protocols.PartialResultsCollection" /> object that contains the partial results.</returns>
      <param name="asyncResult">An <see cref="T:System.IAsyncResult" /> object that contains state data for this request.</param>
      <exception cref="T:System.ObjectDisposedException">The object is already disposed. The object handle is not valid.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> is null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> does not match the <paramref name="asyncResult" /> returned in the <see cref="M:System.DirectoryServices.Protocols.LdapConnection.BeginSendRequest" /> call.</exception>
      <exception cref="T:System.DirectoryServices.Protocols.LdapException">The error code returned by LDAP does not map to a  <see cref="T:System.DirectoryServices.Protocols.ResultCode" /> enumeration error code.</exception>
      <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the server returned a <see cref="T:System.DirectoryServices.Protocols.DirectoryResponse" /> object with an error.</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.LdapConnection.SendRequest(System.DirectoryServices.Protocols.DirectoryRequest)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.LdapConnection.SendRequest(System.DirectoryServices.Protocols.DirectoryRequest)" /> method sends a single <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> as an LDAP v3 operation.</summary>
      <returns>A <see cref="T:System.DirectoryServices.Protocols.DirectoryResponse" /> object that contains the response from the server.</returns>
      <param name="request">A <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> object that contains the request.</param>
      <exception cref="T:System.ObjectDisposedException">The object is already disposed. The object handle is not valid.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> is null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.NotSupportedException">Request is of type DsmlAuthRequest.</exception>
      <exception cref="T:System.DirectoryServices.Protocols.LdapException">The error code returned by LDAP does not map to a <see cref="T:System.DirectoryServices.Protocols.ResultCode" /> enumeration error code.</exception>
      <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the server returned a <see cref="T:System.DirectoryServices.Protocols.DirectoryResponse" /> object with an error.</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.LdapConnection.SendRequest(System.DirectoryServices.Protocols.DirectoryRequest,System.TimeSpan)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.LdapConnection.SendRequest(System.DirectoryServices.Protocols.DirectoryRequest,System.TimeSpan)" /> method sends a single <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> as an LDAP v3 operation.</summary>
      <returns>A <see cref="T:System.DirectoryServices.Protocols.DirectoryResponse" /> object that contains the response from the server.</returns>
      <param name="request">A <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest" /> object that contains the request.</param>
      <param name="requestTimeout">The length of time, in seconds, until the request times out.</param>
      <exception cref="T:System.ObjectDisposedException">The object is already disposed. The object handle is not valid.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> is null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.NotSupportedException">Request is of type DsmlAuthRequest.</exception>
      <exception cref="T:System.DirectoryServices.Protocols.LdapException">The error code returned by LDAP does not map to a  the <see cref="T:System.DirectoryServices.Protocols.ResultCode" /> enumeration error code.</exception>
      <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the server returned a <see cref="T:System.DirectoryServices.Protocols.DirectoryResponse" /> object with an error.</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.LdapConnection.SessionOptions">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.LdapConnection.SessionOptions" /> property contains an <see cref="T:System.DirectoryServices.Protocols.LdapSessionOptions" /> object that specifies the session options.</summary>
      <returns>An <see cref="T:System.DirectoryServices.Protocols.LdapSessionOptions" /> object that specifies the session options.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.LdapConnection.Timeout">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.LdapConnection.Timeout" /> property contains the length of time, in seconds, before the <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> times out.</summary>
      <returns>The length of time, in seconds, before the <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> times out.</returns>
    </member>
    <member name="T:System.DirectoryServices.Protocols.LdapDirectoryIdentifier">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.LdapDirectoryIdentifier" /> class creates a directory identifier for one or more LDAP servers.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.LdapDirectoryIdentifier.#ctor(System.String)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.LdapDirectoryIdentifier.#ctor(System.String)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.LdapDirectoryIdentifier" /> class using the specified server.</summary>
      <param name="server"></param>
      <exception cref="T:System.ArgumentException">Thrown if <paramref name="server" /> has space.</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.LdapDirectoryIdentifier.#ctor(System.String,System.Boolean,System.Boolean)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.LdapDirectoryIdentifier.#ctor(System.String,System.Boolean,System.Boolean)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.LdapDirectoryIdentifier" /> class using the specified server and properties.  This constructor creates an identifier that represents a set of LDAP servers.</summary>
      <param name="server"></param>
      <param name="fullyQualifiedDnsHostName">true if each element in servers is a fully-qualified DNS host name. If false, an element can be an IP address, a DNS domain or host name, or null. If null, it represents the identity of any domain controller in the domain associated with the computer account.</param>
      <param name="connectionless"></param>
      <exception cref="T:System.ArgumentException">Thrown if <paramref name="server" /> contains only white space.</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.LdapDirectoryIdentifier.#ctor(System.String,System.Int32)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.LdapDirectoryIdentifier.#ctor(System.String,System.Integer)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.LdapDirectoryIdentifier" /> class using the specified server and properties.  This constructor creates an identifier that represents a set of LDAP servers.</summary>
      <param name="server"></param>
      <param name="portNumber">The port number to use when connecting to the server.</param>
      <exception cref="T:System.ArgumentException">Thrown if <paramref name="server" /> has space.</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.LdapDirectoryIdentifier.#ctor(System.String,System.Int32,System.Boolean,System.Boolean)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.LdapDirectoryIdentifier.#ctor(System.String,System.Int32,System.Boolean,System.Boolean)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.LdapDirectoryIdentifier" /> class using the specified server and properties.  This constructor creates an identifier that represents a set of LDAP servers.</summary>
      <param name="server"></param>
      <param name="portNumber">The port number to be used when connecting to the server.</param>
      <param name="fullyQualifiedDnsHostName">true if each element in servers is a fully-qualified DNS host name. If false, an element can be an IP address, a DNS domain or host name, or null. If null, it represents the identity of any domain controller in the domain associated with the computer account.</param>
      <param name="connectionless"></param>
      <exception cref="T:System.ArgumentException">Thrown if <paramref name="server" /> has space.</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.LdapDirectoryIdentifier.#ctor(System.String[],System.Boolean,System.Boolean)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.LdapDirectoryIdentifier.#ctor(System.String,System.Boolean,System.Boolean)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.LdapDirectoryIdentifier" /> class using the specified server and properties.  This constructor creates an identifier that represents a set of LDAP servers.</summary>
      <param name="servers"></param>
      <param name="fullyQualifiedDnsHostName">true if each element in servers is a fully-qualified DNS host name. If false, an element can be an IP address, a DNS domain or host name, or null. If null, it represents the identity of any domain controller in the domain associated with the computer account.</param>
      <param name="connectionless"></param>
      <exception cref="T:System.ArgumentException">Thrown if <paramref name="server" /> has space.</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.LdapDirectoryIdentifier.#ctor(System.String[],System.Int32,System.Boolean,System.Boolean)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.LdapDirectoryIdentifier.#ctor(System.String[],System.Int32,System.Boolean,System.Boolean)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.LdapDirectoryIdentifier" /> class using the specified server and properties.  This constructor creates an identifier that represents a set of LDAP servers.</summary>
      <param name="servers"></param>
      <param name="portNumber">the port number to be used when connecting to a server.</param>
      <param name="fullyQualifiedDnsHostName">true if each element in servers is a fully-qualified DNS host name. If false, an element can be an IP address, a DNS domain or host name, or null. If null, it represents the identity of any domain controller in the domain associated with the computer account.</param>
      <param name="connectionless"></param>
      <exception cref="T:System.ArgumentException">Thrown if <paramref name="server" /> has space.</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.LdapDirectoryIdentifier.Connectionless">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.LdapDirectoryIdentifier.Connectionless" /> property specifies that the connection is User Datagram Protocol (UDP). </summary>
      <returns>This property is true if the connection is UDP. This property is false if the LDAP connection is over TCP/IP.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.LdapDirectoryIdentifier.FullyQualifiedDnsHostName">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.LdapDirectoryIdentifier.FullyQualifiedDnsHostName" /> property specifies that a server name is a fully-qualified DNS host name. </summary>
      <returns>This property is true if a server name is a fully-qualified DNS host name.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.LdapDirectoryIdentifier.PortNumber">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.LdapDirectoryIdentifier.PortNumber" /> property contains the portnumber to be used to connect to the server.</summary>
      <returns>Returns an integer representing the port number.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.LdapDirectoryIdentifier.Servers">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.LdapDirectoryIdentifier.Servers" /> property contains the set of servers this object identifies.</summary>
      <returns>The set of servers this object identifies.</returns>
    </member>
    <member name="T:System.DirectoryServices.Protocols.LdapException">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.LdapException" /> class is an exception that occurs when LDAP returns an error code not included in <see cref="T:System.DirectoryServices.Protocols.ResultCode" />.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.LdapException.#ctor">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.LdapException.#ctor" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.LdapException" /> class.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.LdapException.#ctor(System.Int32)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.LdapException.#ctor(System.Int32)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.LdapException" /> class using the specified error code. The default message displayed to the client is "Communications error with the LDAP server".</summary>
      <param name="errorCode">The error code returned by the LDAP implementation.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.LdapException.#ctor(System.Int32,System.String)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.LdapException.#ctor(System.Int32,System.String)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.LdapException" /> class using the specified error code and message.</summary>
      <param name="errorCode">The error code returned by the LDAP implementation.</param>
      <param name="message">The message displayed to the client when the exception occurs.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.LdapException.#ctor(System.Int32,System.String,System.Exception)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.LdapException.#ctor(System.Int32,System.String,System.Exception)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.LdapException" /> class using the specified error code, message, and inner exception.</summary>
      <param name="errorCode">The error code returned by the LDAP implementation.</param>
      <param name="message">The message displayed to the client when the exception occurs.</param>
      <param name="inner">The inner exception, if any, that threw the exception.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.LdapException.#ctor(System.Int32,System.String,System.String)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.LdapException.#ctor(System.Int32,System.String,System.String)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.LdapException" /> class using the specified error code, message, and LDAP server error message.</summary>
      <param name="errorCode">The error code returned by the LDAP implementation.</param>
      <param name="message"></param>
      <param name="serverErrorMessage">The LDAP server error message.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.LdapException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.LdapException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.LdapException" /> class using the specified serialization data and streaming context.</summary>
      <param name="info">Data required to serialize the parameter.</param>
      <param name="context">The source and destination of the serialized stream associated with the parameter.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.LdapException.#ctor(System.String)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.LdapException.#ctor(System.String)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.LdapException" /> class using the specified message.</summary>
      <param name="message">The message displayed to the client when the exception occurs.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.LdapException.#ctor(System.String,System.Exception)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.LdapException.#ctor(System.String,System.Exception)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.LdapException" /> class using the specified message and inner exception.</summary>
      <param name="message">The message displayed to the client when the exception occurs.</param>
      <param name="inner">The inner exception, if any, that threw the exception.</param>
    </member>
    <member name="P:System.DirectoryServices.Protocols.LdapException.ErrorCode">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.LdapException.ErrorCode" /> property contains the LDAP error code.</summary>
      <returns>The LDAP error code.</returns>
    </member>
    <member name="M:System.DirectoryServices.Protocols.LdapException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.LdapException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> method populates the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the data required to serialize the parameter.</summary>
      <param name="serializationInfo">Data required to serialize the parameter.</param>
      <param name="streamingContext">The source and destination of the serialized stream associated with the parameter.</param>
    </member>
    <member name="P:System.DirectoryServices.Protocols.LdapException.PartialResults">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.LdapException.PartialResults" /> property contains a <see cref="T:System.DirectoryServices.Protocols.PartialResultsCollection" /> object that contains partial results.</summary>
      <returns>A <see cref="T:System.DirectoryServices.Protocols.PartialResultsCollection" /> object that contains partial results.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.LdapException.ServerErrorMessage">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.LdapException.ServerErrorMessage" /> property contains a <see cref="T:System.String" /> that contains the LDAP server error message (if any exists).</summary>
      <returns>A <see cref="T:System.String" /> that contains the LDAP server error message (if any).</returns>
    </member>
    <member name="T:System.DirectoryServices.Protocols.LdapSessionOptions">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.LdapSessionOptions" /> class is used to get or set various LDAP session options.</summary>
    </member>
    <member name="P:System.DirectoryServices.Protocols.LdapSessionOptions.AutoReconnect">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.LdapSessionOptions.AutoReconnect" /> property specifies if auto-reconnect is enabled. </summary>
      <returns>This property is true if auto-reconnect is enabled or false if it is not.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> object is already disposed.</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.LdapSessionOptions.DomainName">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.LdapSessionOptions.DomainName" /> property returns the domain to which this connection is bound.</summary>
      <returns>The domain to which this connection is bound.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> object is already disposed.</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.LdapSessionOptions.FastConcurrentBind">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.LdapSessionOptions.FastConcurrentBind" /> method enables support for fast concurrent binds.</summary>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> object is already disposed.</exception>
      <exception cref="T:System.PlatformNotSupportedException">This method does not work on the current platform.</exception>
      <exception cref="T:System.DirectoryServices.Protocols.LdapException">An LDAP error occurred.</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.LdapSessionOptions.HostName">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.LdapSessionOptions.HostName" /> property returns the name of the LDAP server associated with the connection.</summary>
      <returns>The name of the LDAP server associated with the connection.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> object is already disposed.</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.LdapSessionOptions.HostReachable">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.LdapSessionOptions.HostReachable" /> property specifies whether the host is reachable. </summary>
      <returns>This property is true if the host is reachable or false if it is not.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> object is already disposed.</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.LdapSessionOptions.LocatorFlag">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.LdapSessionOptions.LocatorFlag" /> property specifies one of the values of the <see cref="T:System.DirectoryServices.Protocols.LocatorFlags" /> enumeration that are used when locating a domain controller.</summary>
      <returns>One of the values of the <see cref="T:System.DirectoryServices.Protocols.LocatorFlags" /> enumeration that are used when locating a domain controller.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> object is already disposed.</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.LdapSessionOptions.PingKeepAliveTimeout">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.LdapSessionOptions.PingKeepAliveTimeout" /> property contains a <see cref="T:System.TimeSpan" /> object that specifies the minimum number of seconds the client waits, after the last response from the server, before sending a keep-alive ping.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> object that specifies the minimum number of seconds the client waits, after the last response from the server, before sending a keep-alive ping.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> object is already disposed.</exception>
      <exception cref="T:System.ArgumentException">The specified time span is less than <see cref="F:System.TimeSpan.Zero" />.</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.LdapSessionOptions.PingLimit">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.LdapSessionOptions.PingLimit" /> property contains the number of unanswered pings that the client sends before closing a connection.</summary>
      <returns>The number of unanswered pings that the client sends before closing a connection.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> object is already disposed.</exception>
      <exception cref="T:System.ArgumentException">The specified value is less than zero.</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.LdapSessionOptions.PingWaitTimeout">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.LdapSessionOptions.PingWaitTimeout" /> property contains a <see cref="T:System.TimeSpan" /> object that specifies the number of milliseconds that the client waits for the response to come back after sending a ping.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> object that specifies the number of milliseconds that the client waits for the response to come back after sending a ping.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> object is already disposed.</exception>
      <exception cref="T:System.ArgumentException">The specified time span is less than <see cref="F:System.TimeSpan.Zero" />.</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.LdapSessionOptions.ProtocolVersion">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.LdapSessionOptions.ProtocolVersion" /> property specifies the LDAP protocol version to use.</summary>
      <returns>The LDAP protocol version to use.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> object is already disposed.</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.LdapSessionOptions.QueryClientCertificate">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.LdapSessionOptions.QueryClientCertificate" /> property contains a <see cref="T:System.DirectoryServices.Protocols.QueryClientCertificateCallback" /> object that specifies the default callback function used to specify client certificates when establishing an SSL connection.</summary>
      <returns>A <see cref="T:System.DirectoryServices.Protocols.QueryClientCertificateCallback" /> object that specifies the default callback function used to specify client certificates when establishing an SSL connection.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> object is already disposed.</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.LdapSessionOptions.ReferralCallback">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.LdapSessionOptions.ReferralCallback" /> property contains a <see cref="T:System.DirectoryServices.Protocols.ReferralCallback" /> object that specifies the default callback function used when chasing referrals.</summary>
      <returns>A <see cref="T:System.DirectoryServices.Protocols.ReferralCallback" /> object that specifies the default callback function used when chasing referrals.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> object is already disposed.</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.LdapSessionOptions.ReferralChasing">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.LdapSessionOptions.ReferralChasing" /> property contains a <see cref="T:System.DirectoryServices.ReferralChasingOption" /> object that specifies how the LDAP library follows referrals returned by LDAP servers.</summary>
      <returns>A <see cref="T:System.DirectoryServices.ReferralChasingOption" /> object that specifies how the LDAP library follows referrals returned by LDAP servers.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> object is already disposed.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value is not defined in <see cref="T:System.DirectoryServices.ReferralChasingOption" />.</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.LdapSessionOptions.ReferralHopLimit">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.LdapSessionOptions.ReferralHopLimit" /> property specifies the number of hops allowed when chasing referrals.</summary>
      <returns>The number of hops allowed when chasing referrals.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> object is already disposed.</exception>
      <exception cref="T:System.ArgumentException">The specified value is less than zero.</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.LdapSessionOptions.RootDseCache">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.LdapSessionOptions.RootDseCache" /> property enables the internal RootDSE cache. </summary>
      <returns>This property is true if the cache is enabled or false if it is not.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> object is already disposed.</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.LdapSessionOptions.SaslMethod">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.LdapSessionOptions.SaslMethod" /> property specifies the preferred Simple Authentication and Security Layer (SASL) binding method.</summary>
      <returns>The preferred SASL binding method.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> object is already disposed.</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.LdapSessionOptions.Sealing">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.LdapSessionOptions.Sealing" /> property enables Kerberos encryption. </summary>
      <returns>This property is true if Kerberos encryption is enabled or false if it is not.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> object is already disposed.</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.LdapSessionOptions.SecureSocketLayer">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.LdapSessionOptions.SecureSocketLayer" /> property enables secure socket layer on connection. </summary>
      <returns>This property is true if secure socket layer is enabled or false if it is not.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> object is already disposed.</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.LdapSessionOptions.SecurityContext">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.LdapSessionOptions.SecurityContext" /> property specifies the security context associated with the current connection.</summary>
      <returns>The security context associated with the current connection.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> object is already disposed.</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.LdapSessionOptions.SendTimeout">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.LdapSessionOptions.SendTimeout" /> property contains a <see cref="T:System.TimeSpan" /> object that specifies the send time-out.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> object that specifies the send time-out.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> object is already disposed.</exception>
      <exception cref="T:System.ArgumentException">The value specified is less than <see cref="F:System.TimeSpan.Zero" />.</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.LdapSessionOptions.Signing">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.LdapSessionOptions.Signing" /> property enables Kerberos encryption. </summary>
      <returns>This property is true if Kerberos encryption is enabled or false if it is not.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> object is already disposed.</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.LdapSessionOptions.SslInformation">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.LdapSessionOptions.SslInformation" /> property contains a <see cref="T:System.DirectoryServices.Protocols.SecurityPackageContextConnectionInformation" /> object that contains data about the current secure connection.</summary>
      <returns>A <see cref="T:System.DirectoryServices.Protocols.SecurityPackageContextConnectionInformation" /> object that contains data about the current secure connection.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> object is already disposed.</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.LdapSessionOptions.SspiFlag">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.LdapSessionOptions.SspiFlag" /> property specifies the flags to pass to the Security Support Provider Interface (SSPI) InitializeSecurityContext function.  For more information about the InitializeSecurityContext function, see the InitializeSecurityContext function topic in the MSDN library at http://msdn.microsoft.com/library.</summary>
      <returns>The flags to pass to the SSPI InitializeSecurityContext function.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> object is already disposed.</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.LdapSessionOptions.StartTransportLayerSecurity(System.DirectoryServices.Protocols.DirectoryControlCollection)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.LdapSessionOptions.StartTransportLayerSecurity(System.DirectoryServices.Protocols.DirectoryControlCollection)" /> method starts transport layer security encryption.</summary>
      <param name="controls">A <see cref="T:System.DirectoryServices.Protocols.DirectoryControlCollection" /> object that contains the controls to use.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> object is already disposed.</exception>
      <exception cref="T:System.DirectoryServices.Protocols.TlsOperationException">The request failed.</exception>
      <exception cref="T:System.DirectoryServices.Protocols.LdapException">An LDAP error occurred.</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.LdapSessionOptions.StopTransportLayerSecurity">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.LdapSessionOptions.StopTransportLayerSecurity" /> method ends transport layer security encryption.</summary>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> object is already disposed.</exception>
      <exception cref="T:System.DirectoryServices.Protocols.TlsOperationException">The request failed.</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.LdapSessionOptions.TcpKeepAlive">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.LdapSessionOptions.TcpKeepAlive" /> property enables TCP keep-alive. </summary>
      <returns>This property is true if TCP keep-alive is enabled or false if it is not.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> object is already disposed.</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.LdapSessionOptions.VerifyServerCertificate">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.LdapSessionOptions.VerifyServerCertificate" /> property contains a <see cref="T:System.DirectoryServices.Protocols.VerifyServerCertificateCallback" /> object that specifies the default callback method to use to verify server certificates when an SSL connection is established.</summary>
      <returns>A <see cref="T:System.DirectoryServices.Protocols.VerifyServerCertificateCallback" /> object that specifies the default callback method to use to verify server certificates when an SSL connection is established.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> object is already disposed.</exception>
    </member>
    <member name="T:System.DirectoryServices.Protocols.LocatorFlags">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.LocatorFlags" /> enumeration specifies data required to locate a domain controller.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.LocatorFlags.None">
      <summary>No data required. The value is equal to 0 or 0x0.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.LocatorFlags.ForceRediscovery">
      <summary>Forces the cached domain controller to be ignored. The value is equal to 1 or 0x1.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.LocatorFlags.DirectoryServicesRequired">
      <summary>Requires that the returned domain controller support Windows 2000 or later. The value is equal to 16 or 0x10.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.LocatorFlags.DirectoryServicesPreferred">
      <summary>Attempts to find a domain controller that supports directory service functions (Windows 2000 or later). The value is equal to 32 or 0x20.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.LocatorFlags.GCRequired">
      <summary>Requires that the returned domain controller be a global catalog server for the forest of domains with this domain as the root. The value is equal to 64 or 0x40.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.LocatorFlags.PdcRequired">
      <summary>Requires that the returned domain controller be the primary domain controller for the domain. The value is equal to 128 or 0x80.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.LocatorFlags.IPRequired">
      <summary>Sets the Internet protocol address of the domain controller in the DomainControllerAddress member of DomainControllerInfo. The value is equal to 512 or 0x200.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.LocatorFlags.KdcRequired">
      <summary>Requires that the returned domain controller be currently running the Kerberos Key Distribution Center service. The value is equal to 1024 or 0x400.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.LocatorFlags.TimeServerRequired">
      <summary>Requires that the returned domain controller be currently running the Windows Time Service. The value is equal to 2048 or 0x800.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.LocatorFlags.WriteableRequired">
      <summary>Requires that the returned domain controller be writable. The value is equal to 4096 or 0x1000.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.LocatorFlags.GoodTimeServerPreferred">
      <summary>Attempts to find a domain controller that is a reliable time server. The value is equal to 8192 or 0x2000.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.LocatorFlags.AvoidSelf">
      <summary>Specifies that the domain controller returned should not be the current computer. The value is equal to 16384 or 0x4000.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.LocatorFlags.OnlyLdapNeeded">
      <summary>Specifies that the server returned is an LDAP server. The value is equal to 32768 or 0x8000.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.LocatorFlags.IsFlatName">
      <summary>Specifies that the DomainName parameter is a flat name. The value is equal to 65536 or 0x10000.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.LocatorFlags.IsDnsName">
      <summary>Specifies that the DomainName parameter is a DNS name. The value is equal to 131072 or 0x20000.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.LocatorFlags.ReturnDnsName">
      <summary>Specifies that the name returned should be a DNS name. The value is equal to 1073741824 or 0x40000000.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.LocatorFlags.ReturnFlatName">
      <summary>Specifies that the name should be a flat name. The value is equal to 2147483648 or 0x80000000.</summary>
    </member>
    <member name="T:System.DirectoryServices.Protocols.ModifyDNRequest">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.ModifyDNRequest" /> class modifies the distinguished name of an object. This class moves an object to a new parent and/or renames the object.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.ModifyDNRequest.#ctor">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.ModifyDNRequest.#ctor" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.ModifyDNRequest" /> object.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.ModifyDNRequest.#ctor(System.String,System.String,System.String)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.ModifyDNRequest.#ctor(System.String,System.String,System.String)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.ModifyDNRequest" /> object using the specified object name, parent name, and new object name.</summary>
      <param name="distinguishedName">The current distinguished name of the object.</param>
      <param name="newParentDistinguishedName">The distinguished name of the new parent of the object.</param>
      <param name="newName">The new distinguished name of the object.</param>
    </member>
    <member name="P:System.DirectoryServices.Protocols.ModifyDNRequest.DeleteOldRdn">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.ModifyDNRequest.DeleteOldRdn" /> property specifies whether to delete the old relative distinguished name (RDN) of the object. </summary>
      <returns>This property is true if the RDN should be deleted or false if it should not be deleted.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.ModifyDNRequest.DistinguishedName">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.ModifyDNRequest.DistinguishedName" /> property contains the distinguished name of the object.</summary>
      <returns>The distinguished name of the object.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.ModifyDNRequest.NewName">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.ModifyDNRequest.NewName" /> property contains the new object name.</summary>
      <returns>The new object name.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.ModifyDNRequest.NewParentDistinguishedName">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.ModifyDNRequest.NewParentDistinguishedName" /> property contains the distinguished name of the new parent of the object.</summary>
      <returns>The distinguished name of the new parent of the object.</returns>
    </member>
    <member name="M:System.DirectoryServices.Protocols.ModifyDNRequest.ToXmlNode(System.Xml.XmlDocument)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.ModifyDNRequest.ToXmlNode(System.Xml.XmlDocument)" /> method creates an XML node from the specified <see cref="T:System.Xml.XmlDocument" /> object.</summary>
      <returns>The resulting <see cref="T:System.Xml.XmlElement" /> object.</returns>
      <param name="doc">A <see cref="T:System.Xml.XmlDocument" /> object.</param>
    </member>
    <member name="T:System.DirectoryServices.Protocols.ModifyDNResponse">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.ModifyDNResponse" /> class is returned by <see cref="M:System.DirectoryServices.Protocols.DirectoryConnection.SendRequest(System.DirectoryServices.Protocols.DirectoryRequest)" /> as a response to <see cref="T:System.DirectoryServices.Protocols.ModifyDNRequest" />. </summary>
    </member>
    <member name="T:System.DirectoryServices.Protocols.ModifyRequest">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.ModifyRequest" /> class modifies the attributes of an existing directory entry.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.ModifyRequest.#ctor">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.ModifyRequest.#ctor" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.ModifyRequest" /> class. This constructor creates an empty request.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.ModifyRequest.#ctor(System.String,System.DirectoryServices.Protocols.DirectoryAttributeModification[])">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.ModifyRequest.#ctor(System.String,System.DirectoryServices.Protocols.DirectoryAttributeModification[])" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.ModifyRequest" /> class using the specified distinguished name and modifications.</summary>
      <param name="distinguishedName">The distinguished name of the object to modify.</param>
      <param name="modifications">An array of <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeModification" /> objects that specify the modifications.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.ModifyRequest.#ctor(System.String,System.DirectoryServices.Protocols.DirectoryAttributeOperation,System.String,System.Object[])">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.ModifyRequest.#ctor(System.String,System.DirectoryServices.Protocols.DirectoryAttributeOperation,System.String,System.Object[])" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.ModifyRequest" /> class using the specified distinguished name, modification, attribute name, and values.</summary>
      <param name="distinguishedName">The distinguished name of the object to be modified.</param>
      <param name="operation">A <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeOperation" /> object that specifies the modification to perform.</param>
      <param name="attributeName">The name of the attribute to modify. This parameter cannot be null.</param>
      <param name="values">The new values for the attribute.</param>
    </member>
    <member name="P:System.DirectoryServices.Protocols.ModifyRequest.DistinguishedName">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.ModifyRequest.DistinguishedName" /> property contains the distinguished name of the object to modify.</summary>
      <returns>The distinguished name of the object to modify.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.ModifyRequest.Modifications">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.ModifyRequest.Modifications" /> property contains a <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeModificationCollection" /> object that specifies a list of attribute modifications.</summary>
      <returns>A <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeModificationCollection" /> object that specifies a list of attribute modifications.</returns>
    </member>
    <member name="M:System.DirectoryServices.Protocols.ModifyRequest.ToXmlNode(System.Xml.XmlDocument)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.ModifyRequest.ToXmlNode(System.Xml.XmlDocument)" /> method creates an XML node from the specified <see cref="T:System.Xml.XmlDocument" /> object.</summary>
      <returns>The resulting <see cref="T:System.Xml.XmlElement" /> object.</returns>
      <param name="doc">A <see cref="T:System.Xml.XmlDocument" /> object.</param>
    </member>
    <member name="T:System.DirectoryServices.Protocols.ModifyResponse">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.ModifyResponse" /> class is returned by <see cref="M:System.DirectoryServices.Protocols.DirectoryConnection.SendRequest(System.DirectoryServices.Protocols.DirectoryRequest)" /> as a response to <see cref="T:System.DirectoryServices.Protocols.ModifyRequest" />.</summary>
    </member>
    <member name="T:System.DirectoryServices.Protocols.NotifyOfNewConnectionCallback">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.NotifyOfNewConnectionCallback" /> delegate is called if a new connection was created while chasing a referral.</summary>
      <returns>true if the connection is to be cached.  false if not required to cache the connection.</returns>
      <param name="primaryConnection">A <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> object that specifies the primary connection.</param>
      <param name="referralFromConnection">A <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> object that specifies the connection which provided the referral.</param>
      <param name="newDistinguishedName">A <see cref="T:System.String" /> object that specifies the distinguished name of the desired entry in the referred server.</param>
      <param name="identifier">A <see cref="T:System.DirectoryServices.Protocols.LdapDirectoryIdentifier" /> object that specifies the identifier the referred LDAP directory.</param>
      <param name="newConnection">A <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> object that specifies the new connection created in the course of chasing a referral.</param>
      <param name="credential">A <see cref="T:System.Net.NetworkCredential" /> object that specifies the credentials to pass to the referred server.</param>
      <param name="currentUserToken">The LUID of the current user.</param>
      <param name="errorCodeFromBind">A <see cref="T:System.Int32" /> object that specifies the error code from the bind operation.</param>
    </member>
    <member name="T:System.DirectoryServices.Protocols.PageResultRequestControl">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.PageResultRequestControl" /> class instructs the server to return the search result in the specified page size.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.PageResultRequestControl.#ctor">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.PageResultRequestControl.#ctor" /> constructor creates a new instance of the <see cref="T:System.DirectoryServices.Protocols.PageResultRequestControl" /> class.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.PageResultRequestControl.#ctor(System.Byte[])">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.PageResultRequestControl.#ctor(System.Byte[])" /> constructor creates a new instance of the <see cref="T:System.DirectoryServices.Protocols.PageResultRequestControl" /> class using the specified page search cookie.</summary>
      <param name="cookie">Specifies a cookie used for subsequent paged results search calls.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.PageResultRequestControl.#ctor(System.Int32)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.PageResultRequestControl.#ctor(System.Int32)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.PageResultRequestControl" /> class using the requested page size.</summary>
      <param name="pageSize">The requested page size.</param>
    </member>
    <member name="P:System.DirectoryServices.Protocols.PageResultRequestControl.Cookie">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.PageResultRequestControl.Cookie" /> property specifies the page search cookie used for subsequent paged results search calls.</summary>
      <returns>The page search cookie used for subsequent paged results search calls.</returns>
    </member>
    <member name="M:System.DirectoryServices.Protocols.PageResultRequestControl.GetValue">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.PageResultRequestControl.GetValue" /> method returns the page size and cookie associated with this control.</summary>
      <returns>The page size and cookie associated with this control.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.PageResultRequestControl.PageSize">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.PageResultRequestControl.PageSize" /> property specifies the requested page size.</summary>
      <returns>The requested page size.</returns>
    </member>
    <member name="T:System.DirectoryServices.Protocols.PageResultResponseControl">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.PageResultResponseControl" /> class is a directory control used to pass page data from the server to the client.</summary>
    </member>
    <member name="P:System.DirectoryServices.Protocols.PageResultResponseControl.Cookie">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.PageResultResponseControl.Cookie" /> property contains the page search cookie returned by the server.  </summary>
      <returns>The page search cookie returned by the server.  If the cookie is empty, then the paged search completed.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.PageResultResponseControl.TotalCount">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.PageResultResponseControl.TotalCount" /> property contains the estimated result set size.</summary>
      <returns>The estimated value of the total count of the entries returned.</returns>
    </member>
    <member name="T:System.DirectoryServices.Protocols.PartialResultProcessing">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.PartialResultProcessing" /> enumeration specifies the required type of partial results processing.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.PartialResultProcessing.NoPartialResultSupport">
      <summary>The application will not retrieve partial results. The value is equal to 0.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.PartialResultProcessing.ReturnPartialResults">
      <summary>The application will retrieve partial results. The value is equal to 1.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.PartialResultProcessing.ReturnPartialResultsAndNotifyCallback">
      <summary>An application will retrieve partial results and use the callback mechanism. The value is equal to 2.</summary>
    </member>
    <member name="T:System.DirectoryServices.Protocols.PartialResultsCollection">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.PartialResultsCollection" /> class represents any partial results returned from a not-yet-completed asynchronous operation.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.PartialResultsCollection.Contains(System.Object)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.PartialResultsCollection.Contains(System.Object)" /> method determines whether this <see cref="T:System.DirectoryServices.Protocols.PartialResultsCollection" /> object contains a specified <see cref="T:System.Object" />.</summary>
      <returns>true if the specified <see cref="T:System.Object" /> is part of the collection or false if it is not.</returns>
      <param name="value">The <see cref="T:System.Object" /> for which to search.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.PartialResultsCollection.CopyTo(System.Object[],System.Int32)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.PartialResultsCollection.CopyTo(System.Object[],System.Int32)" /> method copies the entire collection to a one-dimensional array, starting at the specified index of the target array.</summary>
      <param name="values">A one-dimensional array that is the destination of the elements copied from the <see cref="T:System.DirectoryServices.Protocols.PartialResultsCollection" /> object.</param>
      <param name="index">The zero-based index of <paramref name="values" /> where copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="values" /> is multidimensional-or-The number of elements in the source <see cref="T:System.DirectoryServices.Protocols.PartialResultsCollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="values" />.</exception>
      <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.DirectoryServices.Protocols.PartialResultsCollection" /> cannot be cast automatically to the type of the destination <paramref name="values" />.</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.PartialResultsCollection.IndexOf(System.Object)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.PartialResultsCollection.IndexOf(System.Object)" /> method returns the zero-based index of the first occurrence of the specified <see cref="T:System.Object" /> in the <see cref="T:System.DirectoryServices.Protocols.PartialResultsCollection" />.</summary>
      <returns>The index value of the specified <see cref="T:System.Object" />, if found, or -1 if the specified object is not found.</returns>
      <param name="value">The <see cref="T:System.Object" /> for which the index is returned.</param>
    </member>
    <member name="P:System.DirectoryServices.Protocols.PartialResultsCollection.Item(System.Int32)">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.PartialResultsCollection.Item(System.Int32)" /> property contains the <see cref="T:System.Object" /> at the specified index.</summary>
      <returns>The <see cref="T:System.Object" /> at the specified index.</returns>
      <param name="index">The index value of the <see cref="T:System.Object" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or <paramref name="index" /> is equal to or greater than the number of items in the collection.</exception>
    </member>
    <member name="T:System.DirectoryServices.Protocols.PermissiveModifyControl">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.PermissiveModifyControl" /> class is used to modify the behavior of a <see cref="T:System.DirectoryServices.Protocols.ModifyRequest" /> object.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.PermissiveModifyControl.#ctor">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.PermissiveModifyControl.#ctor" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.PermissiveModifyControl" /> class.</summary>
    </member>
    <member name="T:System.DirectoryServices.Protocols.QueryClientCertificateCallback">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.QueryClientCertificateCallback" /> delegate gets or sets the default callback function used to specify the client certificates while establishing an SSL connection.</summary>
      <returns>The default callback function used to specify the client certificates while establishing an SSL connection.</returns>
      <param name="connection">A <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> object that specifies the connection.</param>
      <param name="trustedCAs">An array of <see cref="T:System.Byte" /> arrays that specifies the trusted certification authorities (CAs).</param>
    </member>
    <member name="T:System.DirectoryServices.Protocols.QueryForConnectionCallback">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.QueryForConnectionCallback" /> delegate determines whether there is a cached connection available for use.</summary>
      <returns>A cached <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> is returned, if there is one available. If no cached connection is available, NULL is returned.</returns>
      <param name="primaryConnection">A <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> object that specifies the primary connection.</param>
      <param name="referralFromConnection">A <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> object that specifies the connection that provides the referral.</param>
      <param name="newDistinguishedName">A <see cref="T:System.String" /> object that specifies the distinguished name (DN) of the desired entry in the referred server.</param>
      <param name="identifier">A <see cref="T:System.DirectoryServices.Protocols.LdapDirectoryIdentifier" /> object that specifies the identifier for the referred LDAP directory.</param>
      <param name="credential">A <see cref="T:System.Net.NetworkCredential" /> object that specifies the credentials to pass to the referred server.</param>
      <param name="currentUserToken">The LUID for the current user.</param>
    </member>
    <member name="T:System.DirectoryServices.Protocols.QuotaControl">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.QuotaControl" /> class is used to pass the security identifier (SID) of a security principle to retrieve quota-related data.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.QuotaControl.#ctor">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.QuotaControl.#ctor" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.QuotaControl" /> class.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.QuotaControl.#ctor(System.Security.Principal.SecurityIdentifier)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.QuotaControl.#ctor(System.Security.Principal.SecurityIdentifier)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.QuotaControl" /> class using the specified SID.</summary>
      <param name="querySid">The SID of the security principle.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.QuotaControl.GetValue">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.QuotaControl.GetValue" /> method returns the SID associated with this query.</summary>
      <returns>The SID associated with this query.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.QuotaControl.QuerySid">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.QuotaControl.QuerySid" /> property contains the SID of the security principle.</summary>
      <returns>The SID of the security principle.</returns>
    </member>
    <member name="T:System.DirectoryServices.Protocols.ReferralCallback">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.ReferralCallback" /> class contains delegates used as referral callback methods.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.ReferralCallback.#ctor">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.ReferralCallback.#ctor" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.ReferralCallback" /> class.</summary>
    </member>
    <member name="P:System.DirectoryServices.Protocols.ReferralCallback.DereferenceConnection">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.ReferralCallback.DereferenceConnection" /> property contains a <see cref="T:System.DirectoryServices.Protocols.DereferenceConnectionCallback" /> object.</summary>
      <returns>A <see cref="T:System.DirectoryServices.Protocols.DereferenceConnectionCallback" /> object.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.ReferralCallback.NotifyNewConnection">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.ReferralCallback.NotifyNewConnection" /> property contains a <see cref="T:System.DirectoryServices.Protocols.NotifyOfNewConnectionCallback" /> object.</summary>
      <returns>A <see cref="T:System.DirectoryServices.Protocols.NotifyOfNewConnectionCallback" /> object.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.ReferralCallback.QueryForConnection">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.ReferralCallback.QueryForConnection" /> property contains a <see cref="T:System.DirectoryServices.Protocols.QueryForConnectionCallback" /> object.</summary>
      <returns>A <see cref="T:System.DirectoryServices.Protocols.QueryForConnectionCallback" /> object.</returns>
    </member>
    <member name="T:System.DirectoryServices.Protocols.ReferralChasingOptions">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.ReferralChasingOptions" /> enumeration specifies if and how referral chasing is pursued.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ReferralChasingOptions.None">
      <summary>Never chase the referred-to server. Setting this option prevents a client from contacting other servers in a referral process. The value is equal to 0 or 0x0.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ReferralChasingOptions.Subordinate">
      <summary>Chase only subordinate referrals which are a subordinate naming context in a directory tree. The ADSI LDAP provider always turns off this flag for paged searches. The value is equal to 32 or 0x20.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ReferralChasingOptions.External">
      <summary>Chase external referrals. The value is equal to 64 or 0x40.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ReferralChasingOptions.All">
      <summary>Chase referrals of either the subordinate or external type. The value is equal to 96 or 0x60.</summary>
    </member>
    <member name="T:System.DirectoryServices.Protocols.ResultCode">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.ResultCode" /> enumeration specifies the operation result codes.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ResultCode.Success">
      <summary>The call completed successfully. The value is equal to 0.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ResultCode.OperationsError">
      <summary>An operation error occurred. The value is equal to 1.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ResultCode.ProtocolError">
      <summary>A protocol error occurred. The value is equal to 2.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ResultCode.TimeLimitExceeded">
      <summary>The time limit set by the server-side time limit parameter was exceeded. The value is equal to 3.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ResultCode.SizeLimitExceeded">
      <summary>The size limit was exceeded. The value is equal to 4.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ResultCode.CompareFalse">
      <summary>The attribute and known values do not match. The value is equal to 5.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ResultCode.CompareTrue">
      <summary>The attribute and known values match. The value is equal to 6.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ResultCode.AuthMethodNotSupported">
      <summary>The authentication method is not supported. The value is equal to 7.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ResultCode.StrongAuthRequired">
      <summary>Strong authentication is required for this operation. The value is equal to 8.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ResultCode.ReferralV2">
      <summary>Only partial results and referrals were received. The value is equal to 9.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ResultCode.Referral">
      <summary>A referral was returned from the server. The value is equal to 10.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ResultCode.AdminLimitExceeded">
      <summary>The administration limit on the server was exceeded. The value is equal to 11.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ResultCode.UnavailableCriticalExtension">
      <summary>The server does not support the control. The control is critical. The value is equal to 12.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ResultCode.ConfidentialityRequired">
      <summary>Confidentiality is required for this operation. The value is equal to 13.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ResultCode.SaslBindInProgress">
      <summary>Simple Authentication and Security Layer (SASL) bind is in progress. The value is equal to 14.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ResultCode.NoSuchAttribute">
      <summary>The requested attribute does not exist. The value is equal to 16.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ResultCode.UndefinedAttributeType">
      <summary>The type is not defined. The value is equal to 17.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ResultCode.InappropriateMatching">
      <summary>The matching rule does not apply to the specified attribute type. The value is equal to 18.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ResultCode.ConstraintViolation">
      <summary>A value in the request does not comply with certain constraints. The value is equal to 19.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ResultCode.AttributeOrValueExists">
      <summary>The attribute exists or the value has been assigned. The value is equal to 20.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ResultCode.InvalidAttributeSyntax">
      <summary>The syntax is invalid. The value is equal to 21.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ResultCode.NoSuchObject">
      <summary>The object does not exist. The value is equal to 32.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ResultCode.AliasProblem">
      <summary>The alias is invalid. The value is equal to 33.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ResultCode.InvalidDNSyntax">
      <summary>The distinguished name contains invalid syntax. The value is equal to 34.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ResultCode.AliasDereferencingProblem">
      <summary>A problem occurred when dereferencing the alias. The value is equal to 36.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ResultCode.InappropriateAuthentication">
      <summary>The authentication that was provided was not appropriate. The value is equal to 48.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ResultCode.InsufficientAccessRights">
      <summary>The user has insufficient access rights. The value is equal to 50.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ResultCode.Busy">
      <summary>The server is busy. The value is equal to 51.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ResultCode.Unavailable">
      <summary>The server is unavailable. The value is equal to 52.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ResultCode.UnwillingToPerform">
      <summary>The server cannot handle directory requests. The value is equal to 53.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ResultCode.LoopDetect">
      <summary>The chain of referrals has looped back to a referring server. The value is equal to 54.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ResultCode.SortControlMissing">
      <summary>The search requires a SORT control. The value is equal to 60.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ResultCode.OffsetRangeError">
      <summary>The search results exceed the specified offset range. The value is equal to 61.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ResultCode.NamingViolation">
      <summary>A naming violation occurred. The value is equal to 64.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ResultCode.ObjectClassViolation">
      <summary>An object class violation occurred. The value is equal to 65.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ResultCode.NotAllowedOnNonLeaf">
      <summary>This operation is not allowed on a non-leaf object. The value is equal to 66.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ResultCode.NotAllowedOnRdn">
      <summary>This operation is not allowed on a relative distinguished name (RDN). The value is equal to 67.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ResultCode.EntryAlreadyExists">
      <summary>The object already exists. The value is equal to 68.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ResultCode.ObjectClassModificationsProhibited">
      <summary>The request is attempting to modify an object class that cannot be modified. The value is equal to 69.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ResultCode.ResultsTooLarge">
      <summary>The returned results are too large. The value is equal to 70.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ResultCode.AffectsMultipleDsas">
      <summary>Multiple directory service agents are affected. The value is equal to 71.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ResultCode.VirtualListViewError">
      <summary>An error occurred when attempting to perform a requested Virtual List View operation. The value is equal to 76.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.ResultCode.Other">
      <summary>An unknown error occurred. The value is equal to 80.</summary>
    </member>
    <member name="T:System.DirectoryServices.Protocols.SearchOption">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.SearchOption" /> enumeration specifies the search options which define how the search will behave.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.SearchOption.DomainScope">
      <summary>Prevents referrals from being generated when the search results are returned. The value is equal to 1.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.SearchOption.PhantomRoot">
      <summary>Instructs the server to search all naming contexts that are subordinate to the search base. The value is equal to 2.</summary>
    </member>
    <member name="T:System.DirectoryServices.Protocols.SearchOptionsControl">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.SearchOptionsControl" /> class is used to pass flags to the server to control search behavior.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.SearchOptionsControl.#ctor">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.SearchOptionsControl.#ctor" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.SearchOptionsControl" /> class.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.SearchOptionsControl.#ctor(System.DirectoryServices.Protocols.SearchOption)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.SearchOptionsControl.#ctor(System.DirectoryServices.Protocols.SearchOption)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.SearchOptionsControl" /> class using the specified search options.</summary>
      <param name="flags">The <see cref="T:System.DirectoryServices.Protocols.SearchOption" /> enumeration value that specifies the search behavior.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.SearchOptionsControl.GetValue">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.SearchOptionsControl.GetValue" /> method returns search option for this object.</summary>
      <returns>The search option associated with this control.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.SearchOptionsControl.SearchOption">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.SearchOptionsControl.SearchOption" /> property contains one of the values of <see cref="T:System.DirectoryServices.Protocols.SearchOption" /> enumeration that specifies the search behavior.</summary>
      <returns>One of the values of <see cref="T:System.DirectoryServices.Protocols.SearchOption" /> enumeration that specifies the search behavior.</returns>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The value is not one of the values of <see cref="T:System.DirectoryServices.Protocols.SearchOption" />.</exception>
    </member>
    <member name="T:System.DirectoryServices.Protocols.SearchRequest">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.SearchRequest" /> class initiates a search operation.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.SearchRequest.#ctor">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.SearchRequest.#ctor" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.SearchRequest" /> class. This constructor creates an empty request.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.SearchRequest.#ctor(System.String,System.String,System.DirectoryServices.Protocols.SearchScope,System.String[])">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.SearchRequest.#ctor(System.String,System.String,System.DirectoryServices.Protocols.SearchScope,System.String[])" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.SearchRequest" /> class using the specified name, search filter, scope, and attributes.</summary>
      <param name="distinguishedName">The distinguished name of the object at which to start the search.</param>
      <param name="ldapFilter">An LDAP search filter.</param>
      <param name="searchScope">One of the values of <see cref="T:System.DirectoryServices.Protocols.SearchScope" /> that specifies the search scope.</param>
      <param name="attributeList">An array that contains the requested attributes in the result set.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.SearchRequest.#ctor(System.String,System.Xml.XmlDocument,System.DirectoryServices.Protocols.SearchScope,System.String[])">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.SearchRequest.#ctor(System.String,System.Xml.XmlDocument,System.DirectoryServices.Protocols.SearchScope,System.String[])" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.SearchRequest" /> class using the specified name, search filter, scope, and attributes.</summary>
      <param name="distinguishedName">The distinguished name of the object for which to search.</param>
      <param name="filter">A DSML v2 search filter.</param>
      <param name="searchScope">A <see cref="T:System.DirectoryServices.Protocols.SearchScope" /> value that specifies the search scope. The default value is <see cref="T:System.DirectoryServices.Protocols.SearchScope" />.</param>
      <param name="attributeList">An array that contains the requested attributes in the result set.</param>
    </member>
    <member name="P:System.DirectoryServices.Protocols.SearchRequest.Aliases">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.SearchRequest.Aliases" /> property contains one of the values of <see cref="T:System.DirectoryServices.Protocols.DereferenceAlias" /> that specifies the dereference alias behavior.</summary>
      <returns>A <see cref="T:System.DirectoryServices.Protocols.DereferenceAlias" /> value that specifies the dereference alias behavior.</returns>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The value is not a member of <see cref="T:System.DirectoryServices.Protocols.DereferenceAlias" />.</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.SearchRequest.Attributes">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.SearchRequest.Attributes" /> property contains the attributes of the requested object. </summary>
      <returns>The attributes of the requested object. Set this property to null to retrieve all attributes.</returns>
      <exception cref="T:System.ArgumentException">One of the strings in <see cref="T:System.Collections.Specialized.StringCollection" /> object is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.SearchRequest.DistinguishedName">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.SearchRequest.DistinguishedName" /> property contains the distinguished name of the requested object.</summary>
      <returns>The distinguished name of the requested object.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.SearchRequest.Filter">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.SearchRequest.Filter" /> property contains the search filter. </summary>
      <returns>The search filter. If the value is a string, this property is an LDAP search filter. If the value is an XML document, the property is a DSML v2 search filter. Any other type throws an exception.</returns>
      <exception cref="T:System.ArgumentException">The value is not a string or an XML document.</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.SearchRequest.Scope">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.SearchRequest.Scope" /> property contains one of the values of <see cref="T:System.DirectoryServices.SearchScope" /> that specifies the scope of the search.</summary>
      <returns>One of the values of <see cref="T:System.DirectoryServices.SearchScope" /> that specifies the scope of the search.</returns>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The value is not a member of <see cref="T:System.DirectoryServices.SearchScope" />.</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.SearchRequest.SizeLimit">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.SearchRequest.SizeLimit" /> property contains the maximum number of objects returned in the search request.</summary>
      <returns>The maximum number of objects returned in the search request.</returns>
      <exception cref="T:System.ArgumentException">The value is less than zero.</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.SearchRequest.TimeLimit">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.SearchRequest.TimeLimit" /> property contains a <see cref="T:System.TimeSpan" /> object that specifies the time span allowed, if the server processes the search request.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> object that specifies the time span allowed, if the server processes the search request.</returns>
      <exception cref="T:System.ArgumentException">The value is less than <see cref="F:System.TimeSpan.Zero" />.</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.SearchRequest.ToXmlNode(System.Xml.XmlDocument)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.SearchRequest.ToXmlNode(System.Xml.XmlDocument)" /> method creates an XML node from the specified <see cref="T:System.Xml.XmlDocument" /> object.</summary>
      <returns>The resulting <see cref="T:System.Xml.XmlElement" /> object.</returns>
      <param name="doc">A <see cref="T:System.Xml.XmlDocument" /> object.</param>
    </member>
    <member name="P:System.DirectoryServices.Protocols.SearchRequest.TypesOnly">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.SearchRequest.TypesOnly" /> property specifies whether the search returns only the attribute names and not the attribute values. </summary>
      <returns>If this property is true, the search returns only the attribute names. If this property is false, the search returns both the attribute names and values.</returns>
    </member>
    <member name="T:System.DirectoryServices.Protocols.SearchResponse">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.SearchResponse" /> class is sent by the server as a response to a <see cref="T:System.DirectoryServices.Protocols.SearchRequest" /> object. This response contains zero or more <see cref="T:System.DirectoryServices.Protocols.SearchResultEntry" /> objects, and zero or more <see cref="T:System.DirectoryServices.Protocols.SearchResultReference" /> objects.</summary>
    </member>
    <member name="P:System.DirectoryServices.Protocols.SearchResponse.Controls">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.SearchResponse.Controls" /> property contains the <see cref="T:System.DirectoryServices.Protocols.DirectoryControl" /> object returned by the server.</summary>
      <returns>The <see cref="T:System.DirectoryServices.Protocols.DirectoryControl" /> object returned by the server.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.SearchResponse.Entries">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.SearchResponse.Entries" /> property contains a <see cref="T:System.DirectoryServices.Protocols.SearchResultEntryCollection" /> object that contains the entries returned by the search.</summary>
      <returns>A <see cref="T:System.DirectoryServices.Protocols.SearchResultEntryCollection" /> object that contains the entries returned by the search.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.SearchResponse.ErrorMessage">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.SearchResponse.ErrorMessage" /> property contains the error message, if any, for this operation.</summary>
      <returns>The error message, if any, for this operation.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.SearchResponse.MatchedDN">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.SearchResponse.MatchedDN" /> property contains the matched distinguished name returned by the server.</summary>
      <returns>The matched distinguished name returned by the server.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.SearchResponse.References">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.SearchResponse.References" /> property contains a <see cref="T:System.DirectoryServices.Protocols.SearchResultReferenceCollection" /> object that contains search references returned by the server.</summary>
      <returns>A <see cref="T:System.DirectoryServices.Protocols.SearchResultReferenceCollection" /> object that contains search references returned by the server.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.SearchResponse.Referral">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.SearchResponse.Referral" /> property contains the server referrals.</summary>
      <returns>The server referrals.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.SearchResponse.ResultCode">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.SearchResponse.ResultCode" /> property contains a value of <see cref="T:System.DirectoryServices.Protocols.ResultCode" /> that specifies the result code for the operation.</summary>
      <returns>The result code for the operation.</returns>
    </member>
    <member name="T:System.DirectoryServices.Protocols.SearchResultAttributeCollection">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.SearchResultAttributeCollection" /> class is a collection of <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> objects.</summary>
    </member>
    <member name="P:System.DirectoryServices.Protocols.SearchResultAttributeCollection.AttributeNames">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.SearchResultAttributeCollection.AttributeNames" /> property contains names of attributes in this collection.</summary>
      <returns>Names of attributes in this collection.</returns>
    </member>
    <member name="M:System.DirectoryServices.Protocols.SearchResultAttributeCollection.Contains(System.String)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.SearchResultAttributeCollection.Contains(System.String)" /> method determines whether the collection contains the specified <paramref name="attributeName" />.</summary>
      <returns>true if the collection contains attributeName or false if it does not.</returns>
      <param name="attributeName">The name of the attribute to locate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeName" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.SearchResultAttributeCollection.CopyTo(System.DirectoryServices.Protocols.DirectoryAttribute[],System.Int32)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.SearchResultAttributeCollection.CopyTo(System.DirectoryServices.Protocols.DirectoryAttribute[],System.Int32)" /> method copies the entire collection to a one-dimensional array, starting at the specified index of the target array.</summary>
      <param name="array">A one-dimensional array that is the destination of the elements copied from the <see cref="T:System.DirectoryServices.Protocols.SearchResultAttributeCollection" /> object.</param>
      <param name="index">The zero-based index of <paramref name="array" /> where copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional-or-The number of elements in the source <see cref="T:System.DirectoryServices.Protocols.SearchResultAttributeCollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</exception>
      <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.DirectoryServices.Protocols.SearchResultAttributeCollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:System.DirectoryServices.Protocols.SearchResultAttributeCollection.Item(System.String)">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.SearchResultAttributeCollection.Item(System.String)" /> property contains the <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> object specified by <paramref name="attributeName" />.</summary>
      <returns>The <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> object specified by <paramref name="attributeName" />.</returns>
      <param name="attributeName">The name of this attribute.</param>
    </member>
    <member name="P:System.DirectoryServices.Protocols.SearchResultAttributeCollection.Values">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.SearchResultAttributeCollection.Values" /> property contains values of attributes in this collection.</summary>
      <returns>Values of attributes in this collection.</returns>
    </member>
    <member name="T:System.DirectoryServices.Protocols.SearchResultEntry">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.SearchResultEntry" /> class contains an object returned in the result set.</summary>
    </member>
    <member name="P:System.DirectoryServices.Protocols.SearchResultEntry.Attributes">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.SearchResultEntry.Attributes" /> property contains a collection of <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> objects.</summary>
      <returns>A collection of <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute" /> objects.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.SearchResultEntry.Controls">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.SearchResultEntry.Controls" /> property contains an array of <see cref="T:System.DirectoryServices.Protocols.DirectoryControl" /> objects.</summary>
      <returns>An array of <see cref="T:System.DirectoryServices.Protocols.DirectoryControl" /> objects.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.SearchResultEntry.DistinguishedName">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.SearchResultEntry.DistinguishedName" /> property contains the distinguished name of the returned entry.</summary>
      <returns>The distinguished name of the returned entry.</returns>
    </member>
    <member name="T:System.DirectoryServices.Protocols.SearchResultEntryCollection">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.SearchResultEntryCollection" /> class contains a collection of <see cref="T:System.DirectoryServices.Protocols.SearchResultEntry" /> objects returned in a result set.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.SearchResultEntryCollection.Contains(System.DirectoryServices.Protocols.SearchResultEntry)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.SearchResultEntryCollection.Contains(System.DirectoryServices.Protocols.SearchResultEntry)" /> method determines if the collection contains the specified <see cref="T:System.DirectoryServices.Protocols.SearchResultEntry" /> object.</summary>
      <returns>true if the collection contains <paramref name="value" /> or false if it does not.</returns>
      <param name="value">The <see cref="T:System.DirectoryServices.Protocols.SearchResultEntry" /> to locate.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.SearchResultEntryCollection.CopyTo(System.DirectoryServices.Protocols.SearchResultEntry[],System.Int32)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.SearchResultEntryCollection.CopyTo(System.DirectoryServices.Protocols.SearchResultEntry[],System.Int32)" /> method copies the entire collection to a one-dimensional array, starting at the specified index of the target array.</summary>
      <param name="values">A one-dimensional array that is the destination of the elements copied from the <see cref="T:System.DirectoryServices.Protocols.SearchResultEntryCollection" /> object.</param>
      <param name="index">The zero-based index of <paramref name="values" /> where copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="values" /> is multidimensional-or-The number of elements in the source <see cref="T:System.DirectoryServices.Protocols.SearchResultEntryCollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="values" />.</exception>
      <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.DirectoryServices.Protocols.SearchResultEntryCollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.SearchResultEntryCollection.IndexOf(System.DirectoryServices.Protocols.SearchResultEntry)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.SearchResultEntryCollection.IndexOf(System.DirectoryServices.Protocols.SearchResultEntry)" /> method returns the zero-based index of the first occurrence of the specified <see cref="T:System.DirectoryServices.Protocols.SearchResultEntry" /> object in <see cref="T:System.DirectoryServices.Protocols.SearchResultEntryCollection" />.</summary>
      <returns>The index value of the specified <see cref="T:System.DirectoryServices.Protocols.SearchResultEntry" /> object, if found, or -1 if it was not found.</returns>
      <param name="value">The <see cref="T:System.DirectoryServices.Protocols.SearchResultEntry" /> object for which the index is returned.</param>
    </member>
    <member name="P:System.DirectoryServices.Protocols.SearchResultEntryCollection.Item(System.Int32)">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.SearchResultEntryCollection.Item(System.Int32)" /> property contains the <see cref="T:System.DirectoryServices.Protocols.SearchResultEntry" /> object at the specified <paramref name="index" />.</summary>
      <returns>The <see cref="T:System.DirectoryServices.Protocols.SearchResultEntry" /> object at the specified <paramref name="index" />.</returns>
      <param name="index">The index value of the <see cref="T:System.DirectoryServices.Protocols.SearchResultEntry" /> object.</param>
    </member>
    <member name="T:System.DirectoryServices.Protocols.SearchResultReference">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.SearchResultReference" /> class contains a single search reference returned by the server.</summary>
    </member>
    <member name="P:System.DirectoryServices.Protocols.SearchResultReference.Controls">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.SearchResultReference.Controls" /> property contains an array of <see cref="T:System.DirectoryServices.Protocols.DirectoryControl" /> objects returned by the server in the search reference.</summary>
      <returns>An array of <see cref="T:System.DirectoryServices.Protocols.DirectoryControl" /> objects returned by the server in the search reference.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.SearchResultReference.Reference">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.SearchResultReference.Reference" /> property contains an array of <see cref="T:System.Uri" /> objects returned by the server in the search reference.</summary>
      <returns>An array of <see cref="T:System.Uri" /> objects returned by the server in the search reference.</returns>
    </member>
    <member name="T:System.DirectoryServices.Protocols.SearchResultReferenceCollection">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.SearchResultReferenceCollection" /> class contains a collection of <see cref="T:System.DirectoryServices.Protocols.SearchResultReference" /> objects.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.SearchResultReferenceCollection.Contains(System.DirectoryServices.Protocols.SearchResultReference)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.SearchResultReferenceCollection.Contains(System.DirectoryServices.Protocols.SearchResultReference)" /> method determines if the collection contains specified <see cref="T:System.DirectoryServices.Protocols.SearchResultReference" /> object.</summary>
      <returns>true if the collection contains <paramref name="value" /> or false if it does not.</returns>
      <param name="value">The <see cref="T:System.DirectoryServices.Protocols.SearchResultReference" /> object to locate.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.SearchResultReferenceCollection.CopyTo(System.DirectoryServices.Protocols.SearchResultReference[],System.Int32)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.SearchResultReferenceCollection.CopyTo(System.DirectoryServices.Protocols.SearchResultReference[],System.Int32)" /> method copies the entire collection to a one-dimensional array, starting at the specified index of the target array.</summary>
      <param name="values">A one-dimensional array that is the destination of the elements copied from the <see cref="T:System.DirectoryServices.Protocols.SearchResultReferenceCollection" /> object.</param>
      <param name="index">The zero-based index of <paramref name="values" /> where copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is a null reference (Nothing in Visual Basic). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="values" /> is multidimensional-or-The number of elements in the source <see cref="T:System.DirectoryServices.Protocols.SearchResultReferenceCollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="values" />.</exception>
      <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.DirectoryServices.Protocols.SearchResultReferenceCollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="M:System.DirectoryServices.Protocols.SearchResultReferenceCollection.IndexOf(System.DirectoryServices.Protocols.SearchResultReference)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.SearchResultReferenceCollection.IndexOf(System.DirectoryServices.Protocols.SearchResultReference)" /> method returns the zero-based index of the first occurrence of the specified <see cref="T:System.DirectoryServices.Protocols.SearchResultReference" /> object in <see cref="T:System.DirectoryServices.Protocols.SearchResultReferenceCollection" />.</summary>
      <returns>The index value of the specified <see cref="T:System.DirectoryServices.Protocols.SearchResultReference" /> object, if found. If the object is not found, this method returns -1.</returns>
      <param name="value">The <see cref="T:System.DirectoryServices.Protocols.SearchResultReference" /> object for which the index is returned.</param>
    </member>
    <member name="P:System.DirectoryServices.Protocols.SearchResultReferenceCollection.Item(System.Int32)">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.SearchResultReferenceCollection.Item(System.Int32)" /> property contains the <see cref="T:System.DirectoryServices.Protocols.SearchResultReference" /> object at the specified <paramref name="index" />.</summary>
      <returns>The <see cref="T:System.DirectoryServices.Protocols.SearchResultReference" /> object at the specified <paramref name="index" />.</returns>
      <param name="index">The index value of the <see cref="T:System.DirectoryServices.Protocols.SearchResultReference" /> object.</param>
    </member>
    <member name="T:System.DirectoryServices.Protocols.SearchScope">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.SearchScope" /> enumeration specifies the scope of a search.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.SearchScope.Base">
      <summary>Search only the specified base object. The value is equal to 0.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.SearchScope.OneLevel">
      <summary>Search the child objects of the base object, but not the base object itself. The value is equal to 1.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.SearchScope.Subtree">
      <summary>Search the base object and all child objects. The value is equal to 2.</summary>
    </member>
    <member name="T:System.DirectoryServices.Protocols.SecurityDescriptorFlagControl">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.SecurityDescriptorFlagControl" /> class is used to pass flags to the server to control various security descriptor behaviors.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.SecurityDescriptorFlagControl.#ctor">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.SecurityDescriptorFlagControl.#ctor" /> constructor creates a new instance of the <see cref="T:System.DirectoryServices.Protocols.SecurityDescriptorFlagControl" /> class.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.SecurityDescriptorFlagControl.#ctor(System.DirectoryServices.Protocols.SecurityMasks)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.SecurityDescriptorFlagControl.#ctor(System.DirectoryServices.Protocols.SecurityMasks)" /> constructor creates a new instance of the <see cref="T:System.DirectoryServices.Protocols.SecurityDescriptorFlagControl" /> class using the specified security masks.</summary>
      <param name="masks">A combination of <see cref="T:System.DirectoryServices.Protocols.SecurityMasks" /> values that specify security descriptor options.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.SecurityDescriptorFlagControl.GetValue">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.SecurityDescriptorFlagControl.GetValue" /> method returns the security descriptor options specified for this control.</summary>
      <returns>The security descriptor options specified for this control.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.SecurityDescriptorFlagControl.SecurityMasks">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.SecurityDescriptorFlagControl.SecurityMasks" /> property contains a combination of <see cref="T:System.DirectoryServices.Protocols.SecurityMasks" /> values that specify security descriptor options.</summary>
      <returns>A combination of <see cref="T:System.DirectoryServices.Protocols.SecurityMasks" /> values that specify security descriptor options.</returns>
    </member>
    <member name="T:System.DirectoryServices.Protocols.SecurityMasks">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.SecurityMasks" /> enumeration specifies various security descriptor options.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.SecurityMasks.None">
      <summary>No security descriptor flag is set. The value is equal to 0 or 0x0.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.SecurityMasks.Owner">
      <summary>The owner security descriptor flag. The value is equal to 1 or 0x1.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.SecurityMasks.Group">
      <summary>The primary group security descriptor flag. The value is equal to 2 or 0x2.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.SecurityMasks.Dacl">
      <summary>The discretionary access control list (DACL) security descriptor flag. The value is equal to 4 or 0x4.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.SecurityMasks.Sacl">
      <summary>The system access control list (SACL) security descriptor flag.  The value is equal to 8 or 0x8.</summary>
    </member>
    <member name="T:System.DirectoryServices.Protocols.SecurityPackageContextConnectionInformation">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.SecurityPackageContextConnectionInformation" /> class contains data about a secure connection.</summary>
    </member>
    <member name="P:System.DirectoryServices.Protocols.SecurityPackageContextConnectionInformation.AlgorithmIdentifier">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.SecurityPackageContextConnectionInformation.AlgorithmIdentifier" /> property contains the encryption algorithm used by the connection.</summary>
      <returns>The encryption algorithm used by the connection.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.SecurityPackageContextConnectionInformation.CipherStrength">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.SecurityPackageContextConnectionInformation.CipherStrength" /> property contains the cipher strength of the encryption algorithm used on this connection.</summary>
      <returns>The cipher strength of the encryption algorithm used on this connection.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.SecurityPackageContextConnectionInformation.ExchangeStrength">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.SecurityPackageContextConnectionInformation.ExchangeStrength" /> property contains the exchange strength for this connection.</summary>
      <returns>The exchange strength for this connection.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.SecurityPackageContextConnectionInformation.Hash">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.SecurityPackageContextConnectionInformation.Hash" /> property contains the hashing algorithm used by this connection.</summary>
      <returns>The hashing algorithm used by this connection.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.SecurityPackageContextConnectionInformation.HashStrength">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.SecurityPackageContextConnectionInformation.HashStrength" /> property contains the strength of the hashing algorithm used on this connection.</summary>
      <returns>The strength of the hashing algorithm used on this connection.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.SecurityPackageContextConnectionInformation.KeyExchangeAlgorithm">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.SecurityPackageContextConnectionInformation.KeyExchangeAlgorithm" /> property contains the key exchange algorithm used by this connection.</summary>
      <returns>The key exchange algorithm used by this connection.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.SecurityPackageContextConnectionInformation.Protocol">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.SecurityPackageContextConnectionInformation.Protocol" /> property contains the security protocol used by this connection.</summary>
      <returns>The security protocol used by this connection.</returns>
    </member>
    <member name="T:System.DirectoryServices.Protocols.SecurityProtocol">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.SecurityProtocol" /> enumeration is used to specify the security protocol used by a connection.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.SecurityProtocol.Pct1Server">
      <summary>Indicates that the server is using the PCT1 protocol. The value is equal to 1.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.SecurityProtocol.Pct1Client">
      <summary>Indicates that the client is using the PCT1 protocol. The value is equal to 2.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.SecurityProtocol.Ssl2Server">
      <summary>Indicates that the server is using the SSL2 protocol. The value is equal to 4.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.SecurityProtocol.Ssl2Client">
      <summary>Indicates that the client is using the SSL2 protocol. The value is equal to 8.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.SecurityProtocol.Ssl3Server">
      <summary>Indicates that the server is using the SSL3 protocol. The value is equal to 16.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.SecurityProtocol.Ssl3Client">
      <summary>Indicates that the client is using the SSL3 protocol. The value is equal to 32.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.SecurityProtocol.Tls1Server">
      <summary>Indicates that the server is using the TLS1 protocol. The value is equal to 64.</summary>
    </member>
    <member name="F:System.DirectoryServices.Protocols.SecurityProtocol.Tls1Client">
      <summary>Indicates that the client is using the TLS1 protocol. The value is equal to 128.</summary>
    </member>
    <member name="T:System.DirectoryServices.Protocols.ShowDeletedControl">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.ShowDeletedControl" /> class is used with <see cref="T:System.DirectoryServices.Protocols.SearchRequest" /> to specify that the search results should include any deleted objects that match the search filter.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.ShowDeletedControl.#ctor">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.ShowDeletedControl.#ctor" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.ShowDeletedControl" /> class.</summary>
    </member>
    <member name="T:System.DirectoryServices.Protocols.SortKey">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.SortKey" /> class stores sort criteria for use by sort controls.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.SortKey.#ctor">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.SortKey.#ctor" /> constructor creates and initializes a new instance of the <see cref="T:System.DirectoryServices.Protocols.SortKey" /> class.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.SortKey.#ctor(System.String,System.String,System.Boolean)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.SortKey.#ctor(System.String,System.String,System.Boolean)" /> constructor creates and initializes a new instance of the <see cref="T:System.DirectoryServices.Protocols.SortKey" /> class using the specified attribute name, matching rule, and sort order.</summary>
      <param name="attributeName">The name of the attribute to use as a sort key.</param>
      <param name="matchingRule">The object identifier (OID) of the matching rule for the sort.</param>
      <param name="reverseOrder">true if the sort is ordered from the lowest to highest or false if the sort order is from highest to lowest.</param>
    </member>
    <member name="P:System.DirectoryServices.Protocols.SortKey.AttributeName">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.SortKey.AttributeName" /> property specifies the name of the attribute to use as a sort key.</summary>
      <returns>The name of the attribute to use as a sort key.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.SortKey.MatchingRule">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.SortKey.MatchingRule" /> property specifies the object identifier (OID) of the matching rule for the sort.</summary>
      <returns>The OID of the matching rule for the sort.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.SortKey.ReverseOrder">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.SortKey.ReverseOrder" /> property specifies if the sort should be returned in reverse order. </summary>
      <returns>This property is true if the sort is ordered from the lowest to highest or false if the sort is ordered from highest to lowest.</returns>
    </member>
    <member name="T:System.DirectoryServices.Protocols.SortRequestControl">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.SortRequestControl" /> class is used with <see cref="T:System.DirectoryServices.Protocols.SearchRequest" /> to instruct the server to sort the search results before returning them to the client application.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.SortRequestControl.#ctor(System.DirectoryServices.Protocols.SortKey[])">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.SortRequestControl.#ctor(System.DirectoryServices.Protocols.SortKey[])" /> constructor creates and initializes a new instance of the <see cref="T:System.DirectoryServices.Protocols.SortRequestControl" /> class using the specified sort keys.</summary>
      <param name="sortKeys">An array of <see cref="T:System.DirectoryServices.Protocols.SortKey" /> objects used by the server to sort the search results before returning them to the client.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.SortRequestControl.#ctor(System.String,System.Boolean)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.SortRequestControl.#ctor(System.String,System.Boolean)" /> constructor creates a new instance of the <see cref="T:System.DirectoryServices.Protocols.SortRequestControl" /> class using the specified attribute name and sort order.</summary>
      <param name="attributeName">The name of the attribute on which the query is based.</param>
      <param name="reverseOrder">true if results should be returned in reverse order or false otherwise.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.SortRequestControl.#ctor(System.String,System.String,System.Boolean)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.SortRequestControl.#ctor(System.String,System.String,System.Boolean)" /> constructor creates a new instance of the <see cref="T:System.DirectoryServices.Protocols.SortRequestControl" /> class using the specified attribute name, matching rule, and sort order.</summary>
      <param name="attributeName">The name of the attribute on which the query is based.</param>
      <param name="matchingRule">Specifies the object identifier (OID) of the matching rule for the sort.</param>
      <param name="reverseOrder">true if the sort is ordered from lowest to highest or false if the sort is ordered from highest to lowest.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.SortRequestControl.GetValue">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.SortRequestControl.GetValue" /> method specifies the sort keys and matching rules for this control.</summary>
      <returns>The sort keys and matching rules for this control.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.SortRequestControl.SortKeys">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.SortRequestControl.SortKeys" /> property contains an array of <see cref="T:System.DirectoryServices.Protocols.SortKey" /> objects used by the server to sort the search results before returning them to the client.</summary>
      <returns>An array of <see cref="T:System.DirectoryServices.Protocols.SortKey" /> objects used by the server to sort the search results before returning them to the client.</returns>
    </member>
    <member name="T:System.DirectoryServices.Protocols.SortResponseControl">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.SortResponseControl" /> class is used to pass sort data from the server to the client.</summary>
    </member>
    <member name="P:System.DirectoryServices.Protocols.SortResponseControl.AttributeName">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.SortResponseControl.AttributeName" /> property contains the attribute name.</summary>
      <returns>The attribute name.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.SortResponseControl.Result">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.SortResponseControl.Result" /> property returns a <see cref="T:System.DirectoryServices.Protocols.ResultCode" /> object that contains the result code.</summary>
      <returns>A <see cref="T:System.DirectoryServices.Protocols.ResultCode" /> object that contains the result code.</returns>
    </member>
    <member name="T:System.DirectoryServices.Protocols.TlsOperationException">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.TlsOperationException" /> class is an exception that occurs in the <see cref="M:System.DirectoryServices.Protocols.LdapSessionOptions.StartTransportLayerSecurity(System.DirectoryServices.Protocols.DirectoryControlCollection)" /> method if the request fails.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.TlsOperationException.#ctor">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.TlsOperationException.#ctor" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.TlsOperationException" /> class.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.TlsOperationException.#ctor(System.DirectoryServices.Protocols.DirectoryResponse)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.TlsOperationException.#ctor(System.DirectoryServices.Protocols.DirectoryResponse)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.TlsOperationException" /> class using the specified response.</summary>
      <param name="response">A <see cref="T:System.DirectoryServices.Protocols.DirectoryResponse" /> object returned by the server.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.TlsOperationException.#ctor(System.DirectoryServices.Protocols.DirectoryResponse,System.String)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.TlsOperationException.#ctor(System.DirectoryServices.Protocols.DirectoryResponse,System.String)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.TlsOperationException" /> class using the specified response and message.</summary>
      <param name="response">A <see cref="T:System.DirectoryServices.Protocols.DirectoryResponse" /> object returned by the server.</param>
      <param name="message">The message displayed to the client when the exception occurs.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.TlsOperationException.#ctor(System.DirectoryServices.Protocols.DirectoryResponse,System.String,System.Exception)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.TlsOperationException.#ctor(System.DirectoryServices.Protocols.DirectoryResponse,System.String,System.Exception)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.TlsOperationException" /> class using the specified response, message, and inner exception.</summary>
      <param name="response">A <see cref="T:System.DirectoryServices.Protocols.DirectoryResponse" /> object returned by the server.</param>
      <param name="message">The message displayed to the client when the exception occurs.</param>
      <param name="inner">The <see cref="P:System.Exception.InnerException" />, if any, that threw the exception.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.TlsOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.TlsOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.TlsOperationException" /> class using the specified serialization data and streaming context.</summary>
      <param name="info">The data required to serialize the parameter.</param>
      <param name="context">The source and destination of the serialized stream associated with the parameter.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.TlsOperationException.#ctor(System.String)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.TlsOperationException.#ctor(System.String)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.TlsOperationException" /> class using the specified message.</summary>
      <param name="message">The message displayed to the client when the exception occurs.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.TlsOperationException.#ctor(System.String,System.Exception)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.TlsOperationException.#ctor(System.String,System.Exception)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.TlsOperationException" /> class using the specified message and inner exception.</summary>
      <param name="message">The message displayed to the client when the exception occurs.</param>
      <param name="inner">The <see cref="P:System.Exception.InnerException" />, if any, that threw the exception.</param>
    </member>
    <member name="T:System.DirectoryServices.Protocols.TreeDeleteControl">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.TreeDeleteControl" /> class is used with <see cref="T:System.DirectoryServices.Protocols.DeleteRequest" /> to delete an entire subtree in the directory.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.TreeDeleteControl.#ctor">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.TreeDeleteControl.#ctor" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.TreeDeleteControl" /> class.</summary>
    </member>
    <member name="T:System.DirectoryServices.Protocols.VerifyNameControl">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.VerifyNameControl" /> class is used with an LDAP search function to specify the server used to verify the existence of an object.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.VerifyNameControl.#ctor">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.VerifyNameControl.#ctor" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.VerifyNameControl" /> class.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.VerifyNameControl.#ctor(System.String)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.VerifyNameControl.#ctor(System.String)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.VerifyNameControl" /> class using the specified server name.</summary>
      <param name="serverName">The global catalog the performs the validation.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.VerifyNameControl.#ctor(System.String,System.Int32)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.VerifyNameControl.#ctor(System.String,System.Int32)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.VerifyNameControl" /> class using the specified server name and flags.</summary>
      <param name="serverName">The global catalog that performs the validation.</param>
      <param name="flag">The flags used for the validation.</param>
    </member>
    <member name="P:System.DirectoryServices.Protocols.VerifyNameControl.Flag">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.VerifyNameControl.Flag" /> property contains the flag used for validation.</summary>
      <returns>The flag used for validation.</returns>
    </member>
    <member name="M:System.DirectoryServices.Protocols.VerifyNameControl.GetValue">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.VerifyNameControl.GetValue" /> method returns the name of the validation server.</summary>
      <returns>The name of the validation server.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.VerifyNameControl.ServerName">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.VerifyNameControl.ServerName" /> property contains the name of the server that performs the validation.</summary>
      <returns>The name of the server that performs the validation.</returns>
    </member>
    <member name="T:System.DirectoryServices.Protocols.VerifyServerCertificateCallback">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.VerifyServerCertificateCallback" /> delegate gets or sets the default callback function used to verify server certificates when establishing an SSL connection.</summary>
      <returns>true if the client approves the server certificate; otherwise false.</returns>
      <param name="connection">A <see cref="T:System.DirectoryServices.Protocols.LdapConnection" /> object that specifies the connection.</param>
      <param name="certificate">A <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> object that specifies the server certificate.</param>
    </member>
    <member name="T:System.DirectoryServices.Protocols.VlvRequestControl">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.VlvRequestControl" /> class is used to request virtual list view (VLV) support from the server.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.VlvRequestControl.#ctor">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.VlvRequestControl.#ctor" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.VlvRequestControl" /> class.</summary>
    </member>
    <member name="M:System.DirectoryServices.Protocols.VlvRequestControl.#ctor(System.Int32,System.Int32,System.Byte[])">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.VlvRequestControl.#ctor(System.Int32,System.Int32,System.Byte[])" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.VlvRequestControl" /> class using the specified entry counts and target entry.</summary>
      <param name="beforeCount">The number of entries before the target entry that the client requests from the server to return in the list results.</param>
      <param name="afterCount">The number of entries after the target entry that the client requests from the server to return in the results.</param>
      <param name="target">The target entry for the search.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.VlvRequestControl.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.VlvRequestControl.#ctor(System.Int32,System.Int32,System.Int32)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.VlvRequestControl" /> class using the specified entry counts and offset.</summary>
      <param name="beforeCount">The number of entries before the target entry that the client requests from the server to send back in the list results.</param>
      <param name="afterCount">The number of entries after the target entry that the client requests from the server to send back in the results.</param>
      <param name="offset">The ratio between the offset value and the content count.</param>
    </member>
    <member name="M:System.DirectoryServices.Protocols.VlvRequestControl.#ctor(System.Int32,System.Int32,System.String)">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.VlvRequestControl.#ctor(System.Int32,System.Int32,System.String)" /> constructor creates an instance of the <see cref="T:System.DirectoryServices.Protocols.VlvRequestControl" /> class using the specified entry counts and target entry.</summary>
      <param name="beforeCount">The number of entries before the target entry that the client requests from the server to return in the list results.</param>
      <param name="afterCount">The number of entries after the target entry that the client requests from the server to return in the results.</param>
      <param name="target">The target entry for the search.</param>
    </member>
    <member name="P:System.DirectoryServices.Protocols.VlvRequestControl.AfterCount">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.VlvRequestControl.AfterCount" /> property specifies the number of entries after the target entry to return in the list results.</summary>
      <returns>The number of entries after the target entry to return in the list results.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.VlvRequestControl.BeforeCount">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.VlvRequestControl.BeforeCount" /> property specifies the number of entries before the target entry to return in the list results.</summary>
      <returns>The number of entries before the target entry to return in the list results.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.VlvRequestControl.ContextId">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.VlvRequestControl.ContextId" /> property contains the context ID assigned by the server to identify this search operation.</summary>
      <returns>The context ID assigned by the server to identify this search operation.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.VlvRequestControl.EstimateCount">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.VlvRequestControl.EstimateCount" /> property contains the content count of the list.</summary>
      <returns>The content count of the list.</returns>
    </member>
    <member name="M:System.DirectoryServices.Protocols.VlvRequestControl.GetValue">
      <summary>The <see cref="M:System.DirectoryServices.Protocols.VlvRequestControl.GetValue" /> method returns a BER-encoded sequence that specifies the control.</summary>
      <returns>A BER-encoded sequence that specifies this control.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.VlvRequestControl.Offset">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.VlvRequestControl.Offset" /> property contains the offset value of the target entry.</summary>
      <returns>The offset value of the target entry.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.VlvRequestControl.Target">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.VlvRequestControl.Target" /> property contains the target entry of the search.</summary>
      <returns>The target entry of the search.</returns>
    </member>
    <member name="T:System.DirectoryServices.Protocols.VlvResponseControl">
      <summary>The <see cref="T:System.DirectoryServices.Protocols.VlvResponseControl" /> class is used to pass virtual list view (VLV) data from the server to the client.</summary>
    </member>
    <member name="P:System.DirectoryServices.Protocols.VlvResponseControl.ContentCount">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.VlvResponseControl.ContentCount" /> property contains the number of items in the list.</summary>
      <returns>The number of items in the list.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.VlvResponseControl.ContextId">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.VlvResponseControl.ContextId" /> property contains the context ID assigned by the server to identify this search.</summary>
      <returns>The context ID assigned by the server to identify this search.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.VlvResponseControl.Result">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.VlvResponseControl.Result" /> property contains a result code in the form of a <see cref="T:System.DirectoryServices.Protocols.ResultCode" /> object.</summary>
      <returns>A result code in the form of a <see cref="T:System.DirectoryServices.Protocols.ResultCode" /> object.</returns>
    </member>
    <member name="P:System.DirectoryServices.Protocols.VlvResponseControl.TargetPosition">
      <summary>The <see cref="P:System.DirectoryServices.Protocols.VlvResponseControl.TargetPosition" /> property contains the list index position of the target entry.</summary>
      <returns>The list index position of the target entry.</returns>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\System.DirectoryServices.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.DirectoryServices</name>
  </assembly>
  <members>
    <member name="T:System.DirectoryServices.ActiveDirectoryAccessRule">
      <summary>The <see cref="T:System.DirectoryServices.ActiveDirectoryAccessRule" /> class is used to represent an access control entry (ACE) in the discretionary access control list (DACL) of an Active Directory Domain Services object.</summary>
    </member>
    <member name="M:System.DirectoryServices.ActiveDirectoryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.DirectoryServices.ActiveDirectoryRights,System.Security.AccessControl.AccessControlType)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.ActiveDirectoryAccessRule" /> class with the specified identity reference, Active Directory Domain Services rights, and access rule type.</summary>
      <param name="identity">An <see cref="T:System.Security.Principal.IdentityReference" /> object which identifies the trustee of the access rule.</param>
      <param name="adRights">A combination of one or more of the <see cref="T:System.DirectoryServices.ActiveDirectoryRights" /> enumeration values that specifies the rights of the access rule.</param>
      <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> enumeration values that specifies the access rule type.</param>
    </member>
    <member name="M:System.DirectoryServices.ActiveDirectoryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.DirectoryServices.ActiveDirectoryRights,System.Security.AccessControl.AccessControlType,System.DirectoryServices.ActiveDirectorySecurityInheritance)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.ActiveDirectoryAccessRule" /> class with the specified identity reference, Active Directory Domain Services rights, access rule type, and inheritance type.</summary>
      <param name="identity">An <see cref="T:System.Security.Principal.IdentityReference" /> object that identifies the trustee of the access rule.</param>
      <param name="adRights">A combination of one or more of the <see cref="T:System.DirectoryServices.ActiveDirectoryRights" /> enumeration values that specifies the rights of the access rule.</param>
      <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> enumeration values that specifies the access rule type.</param>
      <param name="inheritanceType">One of the <see cref="T:System.DirectoryServices.ActiveDirectorySecurityInheritance" /> enumeration values that specifies the inheritance type of the access rule.</param>
    </member>
    <member name="M:System.DirectoryServices.ActiveDirectoryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.DirectoryServices.ActiveDirectoryRights,System.Security.AccessControl.AccessControlType,System.DirectoryServices.ActiveDirectorySecurityInheritance,System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.ActiveDirectoryAccessRule" /> class with the specified identity reference, Active Directory Domain Services rights, access rule type, inheritance type, and inherited object type.</summary>
      <param name="identity">An <see cref="T:System.Security.Principal.IdentityReference" /> object which identifies the trustee of the access rule.</param>
      <param name="adRights">A combination of one or more of the <see cref="T:System.DirectoryServices.ActiveDirectoryRights" /> enumeration values that specifies the rights of the access rule.</param>
      <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> enumeration values that specifies the access rule type.</param>
      <param name="inheritanceType">One of the <see cref="T:System.DirectoryServices.ActiveDirectorySecurityInheritance" /> enumeration values that specifies the inheritance type of the access rule.</param>
      <param name="inheritedObjectType">The schema GUID of the child object type that can inherit this access rule.</param>
    </member>
    <member name="M:System.DirectoryServices.ActiveDirectoryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.DirectoryServices.ActiveDirectoryRights,System.Security.AccessControl.AccessControlType,System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.ActiveDirectoryAccessRule" /> class with the specified identity reference, Active Directory Domain Services rights, access rule type, and object type.</summary>
      <param name="identity">An <see cref="T:System.Security.Principal.IdentityReference" /> object that identifies the trustee of the access rule.</param>
      <param name="adRights">A combination of one or more of the <see cref="T:System.DirectoryServices.ActiveDirectoryRights" /> enumeration values that specifies the rights of the access rule.</param>
      <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> enumeration values that specifies the access rule type.</param>
      <param name="objectType">The schema GUID of the object to which the access rule applies.</param>
    </member>
    <member name="M:System.DirectoryServices.ActiveDirectoryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.DirectoryServices.ActiveDirectoryRights,System.Security.AccessControl.AccessControlType,System.Guid,System.DirectoryServices.ActiveDirectorySecurityInheritance)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.ActiveDirectoryAccessRule" /> class with the specified identity reference, Active Directory Domain Services rights, access rule type, object type, and inheritance type.</summary>
      <param name="identity">An <see cref="T:System.Security.Principal.IdentityReference" /> object that identifies the trustee of the access rule.</param>
      <param name="adRights">A combination of one or more of the <see cref="T:System.DirectoryServices.ActiveDirectoryRights" /> enumeration values that specifies the rights of the access rule.</param>
      <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> enumeration values that specifies the access rule type.</param>
      <param name="objectType">The schema GUID of the object to which the access rule applies.</param>
      <param name="inheritanceType">One of the <see cref="T:System.DirectoryServices.ActiveDirectorySecurityInheritance" /> enumeration values that specifies the inheritance type of the access rule.</param>
    </member>
    <member name="M:System.DirectoryServices.ActiveDirectoryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.DirectoryServices.ActiveDirectoryRights,System.Security.AccessControl.AccessControlType,System.Guid,System.DirectoryServices.ActiveDirectorySecurityInheritance,System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.ActiveDirectoryAccessRule" /> class with the specified identity reference, Active Directory Domain Services rights, access rule type, object type, inheritance type, and inherited object type.</summary>
      <param name="identity">An <see cref="T:System.Security.Principal.IdentityReference" /> object that identifies the trustee of the access rule.</param>
      <param name="adRights">A combination of one or more of the <see cref="T:System.DirectoryServices.ActiveDirectoryRights" /> enumeration values that specifies the rights of the access rule.</param>
      <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> enumeration values that specifies the access rule type.</param>
      <param name="objectType">The schema GUID of the object to which the access rule applies.</param>
      <param name="inheritanceType">One of the <see cref="T:System.DirectoryServices.ActiveDirectorySecurityInheritance" /> enumeration values that specifies the inheritance type of the access rule.</param>
      <param name="inheritedObjectType">The schema GUID of the child object type that can inherit this access rule.</param>
    </member>
    <member name="P:System.DirectoryServices.ActiveDirectoryAccessRule.ActiveDirectoryRights">
      <summary>Gets the Active Directory Domain Services rights for this access rule.</summary>
      <returns>A combination of one or more of the <see cref="T:System.DirectoryServices.ActiveDirectoryRights" /> enumeration values that specify the Active Directory Domain Services access rights that are included in this rule.</returns>
    </member>
    <member name="P:System.DirectoryServices.ActiveDirectoryAccessRule.InheritanceType">
      <summary>Gets the inheritance type for this access rule.</summary>
      <returns>One of the <see cref="T:System.DirectoryServices.ActiveDirectorySecurityInheritance" /> enumeration values that specifies the inheritance type for this access rule.</returns>
    </member>
    <member name="T:System.DirectoryServices.ActiveDirectoryAuditRule">
      <summary>The <see cref="T:System.DirectoryServices.ActiveDirectoryAuditRule" /> is used to set an access control entry (ACE) on a system access control list (SACL). The <see cref="T:System.DirectoryServices.ActiveDirectoryAccessRule" /> contains the trustee, which is represented as an <see cref="P:System.Security.AccessControl.AuthorizationRule.IdentityReference" /> object. It also contains information about the access control type, access mask, and other properties such as inheritance flags. This rule is set on an <see cref="T:System.DirectoryServices.ActiveDirectorySecurity" /> object. After the <see cref="T:System.DirectoryServices.ActiveDirectorySecurity" /> is committed to the directory store, it will modify the security descriptor object according to the rules that are set on <see cref="T:System.DirectoryServices.ActiveDirectoryAuditRule" />.</summary>
    </member>
    <member name="M:System.DirectoryServices.ActiveDirectoryAuditRule.#ctor(System.Security.Principal.IdentityReference,System.DirectoryServices.ActiveDirectoryRights,System.Security.AccessControl.AuditFlags)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.ActiveDirectoryAuditRule" /> class with the specified identity, rights, and flags.</summary>
      <param name="identity">Specifies an <see cref="T:System.Security.Principal.IdentityReference" /> object, such as an NTAccount object, that resolves to a security identifier (SID).</param>
      <param name="adRights">Specifies an <see cref="T:System.DirectoryServices.ActiveDirectoryRights" /> object, which is used to define all the rights that can be set on a directory object, as defined in the <see cref="T:System.DirectoryServices.ActiveDirectoryRights" /> enumeration.</param>
      <param name="auditFlags">Specifies an <see cref="T:System.Security.AccessControl.AuditFlags" /> object, which contains the combination of one or more audit flags to add to this <see cref="T:System.DirectoryServices.ActiveDirectoryAuditRule" />. The allowable flags are <see cref="F:System.Security.AccessControl.AuditFlags.Success" /> and <see cref="F:System.Security.AccessControl.AuditFlags.Failure" />. This parameter may not be zero.</param>
    </member>
    <member name="M:System.DirectoryServices.ActiveDirectoryAuditRule.#ctor(System.Security.Principal.IdentityReference,System.DirectoryServices.ActiveDirectoryRights,System.Security.AccessControl.AuditFlags,System.DirectoryServices.ActiveDirectorySecurityInheritance)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.ActiveDirectoryAuditRule" /> class with the specified identity, rights, flags, and inheritance type.</summary>
      <param name="identity">Specifies an <see cref="T:System.Security.Principal.IdentityReference" /> object, such as an NTAccount object, that resolves to a security identifier (SID).</param>
      <param name="adRights">Specifies an <see cref="T:System.DirectoryServices.ActiveDirectoryRights" /> object, which is used to define all the rights that can be set on a directory object, as defined in the <see cref="T:System.DirectoryServices.ActiveDirectoryRights" /> enumeration.</param>
      <param name="auditFlags">Specifies an <see cref="T:System.Security.AccessControl.AuditFlags" /> object, which contains a combination of one or more audit flags to add to this <see cref="T:System.DirectoryServices.ActiveDirectoryAuditRule" />. The allowable flags are <see cref="F:System.Security.AccessControl.AuditFlags.Success" /> and <see cref="F:System.Security.AccessControl.AuditFlags.Failure" />. This parameter can not be zero.</param>
      <param name="inheritanceType">Specifies the <see cref="T:System.DirectoryServices.ActiveDirectorySecurityInheritance" /> object that contains inheritance information. The allowable flags for this parameter are found in the <see cref="T:System.DirectoryServices.ActiveDirectorySecurityInheritance" /> enumeration.</param>
    </member>
    <member name="M:System.DirectoryServices.ActiveDirectoryAuditRule.#ctor(System.Security.Principal.IdentityReference,System.DirectoryServices.ActiveDirectoryRights,System.Security.AccessControl.AuditFlags,System.DirectoryServices.ActiveDirectorySecurityInheritance,System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.ActiveDirectoryAuditRule" /> class with the specified identity, rights, flags, inheritance type, and inherited object type.</summary>
      <param name="identity">Specifies an <see cref="T:System.Security.Principal.IdentityReference" /> object, such as an NTAccount object, that resolves to a security identifier (SID).</param>
      <param name="adRights">Specifies an <see cref="T:System.DirectoryServices.ActiveDirectoryRights" /> data type object, which is used to define all the rights that can be set on a directory object, as defined in the <see cref="T:System.DirectoryServices.ActiveDirectoryRights" /> enumeration.</param>
      <param name="auditFlags">Specifies an <see cref="T:System.Security.AccessControl.AuditFlags" /> object, which contains the combination of one or more audit flags to add to this <see cref="T:System.DirectoryServices.ActiveDirectoryAuditRule" />. The allowable flags are <see cref="F:System.Security.AccessControl.AuditFlags.Success" /> and <see cref="F:System.Security.AccessControl.AuditFlags.Failure" />. This parameter may not be zero.</param>
      <param name="inheritanceType">Specifies the <see cref="T:System.DirectoryServices.ActiveDirectorySecurityInheritance" /> object that contains inheritance information. The allowable flags for this parameter are found in the <see cref="T:System.DirectoryServices.ActiveDirectorySecurityInheritance" /> enumeration.</param>
      <param name="inheritedObjectType">Specifies the <see cref="T:System.Guid" /> object that identifies the type of child object that can inherit this access rule.</param>
    </member>
    <member name="M:System.DirectoryServices.ActiveDirectoryAuditRule.#ctor(System.Security.Principal.IdentityReference,System.DirectoryServices.ActiveDirectoryRights,System.Security.AccessControl.AuditFlags,System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.ActiveDirectoryAuditRule" /> class with the specified identity, rights, flags, and object type.</summary>
      <param name="identity">Specifies an <see cref="T:System.Security.Principal.IdentityReference" /> object, such as an NTAccount object, that resolves to a security identifier (SID).</param>
      <param name="adRights">Specifies an <see cref="T:System.DirectoryServices.ActiveDirectoryRights" /> object, which is used to define all the rights that can be set on a directory object, as defined in the <see cref="T:System.DirectoryServices.ActiveDirectoryRights" /> enumeration.</param>
      <param name="auditFlags">Specifies an <see cref="T:System.Security.AccessControl.AuditFlags" /> object, which contains the combination of one or more audit flags to add to this <see cref="T:System.DirectoryServices.ActiveDirectoryAuditRule" />. The allowable flags are <see cref="F:System.Security.AccessControl.AuditFlags.Success" /> and <see cref="F:System.Security.AccessControl.AuditFlags.Failure" />. This parameter can not be zero.</param>
      <param name="objectType">Specifies a <see cref="T:System.Guid" /> object that contains the GUID of the object to which the access permissions apply.</param>
    </member>
    <member name="M:System.DirectoryServices.ActiveDirectoryAuditRule.#ctor(System.Security.Principal.IdentityReference,System.DirectoryServices.ActiveDirectoryRights,System.Security.AccessControl.AuditFlags,System.Guid,System.DirectoryServices.ActiveDirectorySecurityInheritance)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.ActiveDirectoryAuditRule" /> class with the specified identity, rights, flags, object type, and inheritance type.</summary>
      <param name="identity">Specifies an <see cref="T:System.Security.Principal.IdentityReference" /> object, such as an NTAccount object, that resolves to a security identifier (SID).</param>
      <param name="adRights">Specifies an <see cref="T:System.DirectoryServices.ActiveDirectoryRights" /> object, which is used to define all the rights that can be set on a directory object, as defined in the <see cref="T:System.DirectoryServices.ActiveDirectoryRights" /> enumeration.</param>
      <param name="auditFlags">Specifies an <see cref="T:System.Security.AccessControl.AuditFlags" /> object, which contains the combination of one or more audit flags to add to this <see cref="T:System.DirectoryServices.ActiveDirectoryAuditRule" />. The allowable flags are <see cref="F:System.Security.AccessControl.AuditFlags.Success" /> and <see cref="F:System.Security.AccessControl.AuditFlags.Failure" />. This parameter may not be zero.</param>
      <param name="objectType">Specifies a <see cref="T:System.Guid" /> object which contains the GUID of the object to which the access permissions apply.</param>
      <param name="inheritanceType">Specifies the <see cref="T:System.DirectoryServices.ActiveDirectorySecurityInheritance" /> object that contains inheritance information. The allowable flags for this parameter are found in the <see cref="T:System.DirectoryServices.ActiveDirectorySecurityInheritance" /> enumeration.</param>
    </member>
    <member name="M:System.DirectoryServices.ActiveDirectoryAuditRule.#ctor(System.Security.Principal.IdentityReference,System.DirectoryServices.ActiveDirectoryRights,System.Security.AccessControl.AuditFlags,System.Guid,System.DirectoryServices.ActiveDirectorySecurityInheritance,System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.ActiveDirectoryAuditRule" /> class with the specified identity, rights, flags, object type, inheritance type, and inherited object type.</summary>
      <param name="identity">Specifies an <see cref="T:System.Security.Principal.IdentityReference" /> object, such as an NTAccount object, that resolves to a security identifier (SID).</param>
      <param name="adRights">Specifies an <see cref="T:System.DirectoryServices.ActiveDirectoryRights" /> object, which is used to define all the rights that can be set on a directory object, as defined in the <see cref="T:System.DirectoryServices.ActiveDirectoryRights" /> enumeration.</param>
      <param name="auditFlags">Specifies an <see cref="T:System.Security.AccessControl.AuditFlags" /> object, which contains the combination of one or more audit flags to add to this <see cref="T:System.DirectoryServices.ActiveDirectoryAuditRule" />. The allowable flags are <see cref="F:System.Security.AccessControl.AuditFlags.Success" /> and <see cref="F:System.Security.AccessControl.AuditFlags.Failure" />. This parameter may not be zero.</param>
      <param name="objectType">Specifies a <see cref="T:System.Guid" /> object that contains the GUID of the object to which the access permissions apply.</param>
      <param name="inheritanceType">Specifies the <see cref="T:System.DirectoryServices.ActiveDirectorySecurityInheritance" />  object that contains inheritance information. The allowable flags for this parameter are found in the <see cref="T:System.DirectoryServices.ActiveDirectorySecurityInheritance" /> enumeration.</param>
      <param name="inheritedObjectType">Specifies the <see cref="T:System.Guid" /> object that identifies the type of child object that can inherit this access rule.</param>
    </member>
    <member name="P:System.DirectoryServices.ActiveDirectoryAuditRule.ActiveDirectoryRights">
      <summary>Gets the rights for the audit rule.</summary>
      <returns>One or more of the <see cref="T:System.DirectoryServices.ActiveDirectoryRights" /> enumeration values that specifies the rights for the audit rule.</returns>
    </member>
    <member name="P:System.DirectoryServices.ActiveDirectoryAuditRule.InheritanceType">
      <summary>Gets the inheritance type of the audit rule.</summary>
      <returns>One of the <see cref="T:System.DirectoryServices.ActiveDirectorySecurityInheritance" /> enumeration values that specifies the inheritance type of the audit rule.</returns>
    </member>
    <member name="T:System.DirectoryServices.ActiveDirectoryRights">
      <summary>The <see cref="T:System.DirectoryServices.ActiveDirectoryRights" /> enumeration specifies the access rights that are assigned to an Active Directory Domain Services object.</summary>
    </member>
    <member name="F:System.DirectoryServices.ActiveDirectoryRights.Delete">
      <summary>The right to delete the object.</summary>
    </member>
    <member name="F:System.DirectoryServices.ActiveDirectoryRights.ReadControl">
      <summary>The right to read data from the security descriptor of the object, not including the data in the SACL.</summary>
    </member>
    <member name="F:System.DirectoryServices.ActiveDirectoryRights.WriteDacl">
      <summary>The right to modify the DACL in the object security descriptor.</summary>
    </member>
    <member name="F:System.DirectoryServices.ActiveDirectoryRights.WriteOwner">
      <summary>The right to assume ownership of the object. The user must be an object trustee. The user cannot transfer the ownership to other users.</summary>
    </member>
    <member name="F:System.DirectoryServices.ActiveDirectoryRights.Synchronize">
      <summary>The right to use the object for synchronization. This right enables a thread to wait until that object is in the signaled state.</summary>
    </member>
    <member name="F:System.DirectoryServices.ActiveDirectoryRights.AccessSystemSecurity">
      <summary>The right to get or set the SACL in the object security descriptor.</summary>
    </member>
    <member name="F:System.DirectoryServices.ActiveDirectoryRights.GenericRead">
      <summary>The right to read permissions on this object, read all the properties on this object, list this object name when the parent container is listed, and list the contents of this object if it is a container.</summary>
    </member>
    <member name="F:System.DirectoryServices.ActiveDirectoryRights.GenericWrite">
      <summary>The right to read permissions on this object, write all the properties on this object, and perform all validated writes to this object.</summary>
    </member>
    <member name="F:System.DirectoryServices.ActiveDirectoryRights.GenericExecute">
      <summary>The right to read permissions on, and list the contents of, a container object.</summary>
    </member>
    <member name="F:System.DirectoryServices.ActiveDirectoryRights.GenericAll">
      <summary>The right to create or delete children, delete a subtree, read and write properties, examine children and the object itself, add and remove the object from the directory, and read or write with an extended right.</summary>
    </member>
    <member name="F:System.DirectoryServices.ActiveDirectoryRights.CreateChild">
      <summary>The right to create children of the object.</summary>
    </member>
    <member name="F:System.DirectoryServices.ActiveDirectoryRights.DeleteChild">
      <summary>The right to delete children of the object.</summary>
    </member>
    <member name="F:System.DirectoryServices.ActiveDirectoryRights.ListChildren">
      <summary>The right to list children of this object. For more information about this right, see the topic "Controlling Object Visibility" in the MSDN Library http://msdn.microsoft.com/library.</summary>
    </member>
    <member name="F:System.DirectoryServices.ActiveDirectoryRights.Self">
      <summary>The right to perform an operation that is controlled by a validated write access right.</summary>
    </member>
    <member name="F:System.DirectoryServices.ActiveDirectoryRights.ReadProperty">
      <summary>The right to read properties of the object.</summary>
    </member>
    <member name="F:System.DirectoryServices.ActiveDirectoryRights.WriteProperty">
      <summary>The right to write properties of the object.</summary>
    </member>
    <member name="F:System.DirectoryServices.ActiveDirectoryRights.DeleteTree">
      <summary>The right to delete all children of this object, regardless of the permissions of the children.</summary>
    </member>
    <member name="F:System.DirectoryServices.ActiveDirectoryRights.ListObject">
      <summary>The right to list a particular object. For more information about this right, see the topic "Controlling Object Visibility" in the MSDN Library at http://msdn.microsoft.com/library.  </summary>
    </member>
    <member name="F:System.DirectoryServices.ActiveDirectoryRights.ExtendedRight">
      <summary>A customized control access right. For a list of possible extended rights, see the topic "Extended Rights" in the MSDN Library at http://msdn.microsoft.com. For more information about extended rights, see the topic "Control Access Rights" in the MSDN Library at http://msdn.microsoft.com.</summary>
    </member>
    <member name="T:System.DirectoryServices.ActiveDirectorySecurity">
      <summary>Uses the object security layer of the managed ACL library to wrap access control functionality for directory objects.</summary>
    </member>
    <member name="M:System.DirectoryServices.ActiveDirectorySecurity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.ActiveDirectorySecurity" /> class.</summary>
    </member>
    <member name="P:System.DirectoryServices.ActiveDirectorySecurity.AccessRightType">
      <summary>Gets the <see cref="T:System.Type" /> object that represents an access right for this object.</summary>
      <returns>The <see cref="T:System.Type" /> of the access right.</returns>
    </member>
    <member name="M:System.DirectoryServices.ActiveDirectorySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
      <summary>Creates an <see cref="T:System.Security.AccessControl.AccessRule" /> object with the specified values.</summary>
      <returns>The <see cref="T:System.Security.AccessControl.AccessRule" /> that corresponds to the <see cref="T:System.DirectoryServices.ActiveDirectorySecurity" /> object.</returns>
      <param name="identityReference">An <see cref="T:System.Security.Principal.IdentityReference" /> object such as an NTAccount object that resolves to a security identifier (SID).</param>
      <param name="accessMask">An <see cref="T:System.Int32" /> bitmask that shows the access privileges to use.</param>
      <param name="isInherited">A <see cref="T:System.Boolean" /> object that indicates whether ACEs are inherited. true if ACEs are inherited; otherwise, false.</param>
      <param name="inheritanceFlags">An <see cref="T:System.Security.AccessControl.InheritanceFlags" /> object that contains inheritance flags on a directory object.</param>
      <param name="propagationFlags">A <see cref="T:System.Security.AccessControl.PropagationFlags" /> object that contains inheritance propagation flags on a directory object.</param>
      <param name="type">An <see cref="T:System.Security.AccessControl.AccessControlType" /> object that contains the ACE type.</param>
    </member>
    <member name="M:System.DirectoryServices.ActiveDirectorySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType,System.Guid,System.Guid)">
      <summary>Creates an <see cref="T:System.Security.AccessControl.AccessRule" /> object with the specified values.</summary>
      <returns>The <see cref="T:System.Security.AccessControl.AccessRule" /> that corresponds to the <see cref="T:System.DirectoryServices.ActiveDirectorySecurity" /> object.</returns>
      <param name="identityReference">An <see cref="T:System.Security.Principal.IdentityReference" /> object, such as an NTAccount object, that resolves to a security identifier (SID).</param>
      <param name="accessMask">An <see cref="T:System.Int32" /> bitmask that shows the access privileges to use.</param>
      <param name="isInherited">A <see cref="T:System.Boolean" /> object that indicates if ACEs are inherited. true if ACEs are inherited; otherwise, false.</param>
      <param name="inheritanceFlags">An <see cref="T:System.Security.AccessControl.InheritanceFlags" /> object that contains inheritance flags for a directory object.</param>
      <param name="propagationFlags">A <see cref="T:System.Security.AccessControl.PropagationFlags" /> object that contains inheritance propagation flags for a directory object.</param>
      <param name="type">An <see cref="T:System.Security.AccessControl.AccessControlType" /> object that contains the ACE type.</param>
      <param name="objectGuid">A <see cref="T:System.Guid" /> object that contains the GUID of the directory object.</param>
      <param name="inheritedObjectGuid">A <see cref="T:System.Guid" /> object that contains the GUID of the inherited directory object.</param>
    </member>
    <member name="P:System.DirectoryServices.ActiveDirectorySecurity.AccessRuleType">
      <summary>Gets the <see cref="T:System.Type" /> that represents an access rule for this object.</summary>
      <returns>The <see cref="T:System.Type" /> of the access rule.</returns>
    </member>
    <member name="M:System.DirectoryServices.ActiveDirectorySecurity.AddAccessRule(System.DirectoryServices.ActiveDirectoryAccessRule)">
      <summary>Adds an access rule to the DACL of an object.</summary>
      <param name="rule">The <see cref="M:System.Security.AccessControl.DirectoryObjectSecurity.AddAccessRule(System.Security.AccessControl.ObjectAccessRule)" /> object to which this operation applies. </param>
    </member>
    <member name="M:System.DirectoryServices.ActiveDirectorySecurity.AddAuditRule(System.DirectoryServices.ActiveDirectoryAuditRule)">
      <summary>Adds an audit rule to the SACL of an object.</summary>
      <param name="rule">The <see cref="T:System.DirectoryServices.ActiveDirectoryAuditRule" /> object to which this operation applies.</param>
    </member>
    <member name="M:System.DirectoryServices.ActiveDirectorySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
      <summary>Creates an <see cref="T:System.Security.AccessControl.AuditRule" /> object with the specified values.</summary>
      <returns>The <see cref="T:System.Security.AccessControl.AuditRule" /> that corresponds to the <see cref="T:System.DirectoryServices.ActiveDirectorySecurity" /> object.</returns>
      <param name="identityReference">An <see cref="T:System.Security.Principal.IdentityReference" /> object such as an NTAccount object, that resolves to a security identifier (SID).</param>
      <param name="accessMask">An <see cref="T:System.Int32" /> bitmask that shows the access privileges to use.</param>
      <param name="isInherited">A <see cref="T:System.Boolean" /> object that indicates if ACEs are inherited. true if ACEs are inherited; otherwise, false.</param>
      <param name="inheritanceFlags">An <see cref="T:System.Security.AccessControl.InheritanceFlags" /> object that contains inheritance flags on a directory object.</param>
      <param name="propagationFlags">A <see cref="T:System.Security.AccessControl.PropagationFlags" /> object that contains inheritance propagation flags on a directory object.</param>
      <param name="flags">An <see cref="T:System.Security.AccessControl.AuditFlags" /> object that contains the audit flags for this <see cref="T:System.DirectoryServices.ActiveDirectorySecurity" /> object.</param>
    </member>
    <member name="M:System.DirectoryServices.ActiveDirectorySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags,System.Guid,System.Guid)">
      <summary>Creates an <see cref="T:System.Security.AccessControl.AuditRule" /> object with the specified values.</summary>
      <returns>The <see cref="T:System.Security.AccessControl.AuditRule" /> that corresponds to the <see cref="T:System.DirectoryServices.ActiveDirectorySecurity" /> object.</returns>
      <param name="identityReference">An <see cref="T:System.Security.Principal.IdentityReference" /> object such as an NTAccount object that resolves to a security identifier (SID).</param>
      <param name="accessMask">An <see cref="T:System.Int32" /> bitmask that shows the access privileges to use.</param>
      <param name="isInherited">A <see cref="T:System.Boolean" /> object that indicates whether ACEs are inherited. true if ACEs are inherited; otherwise, false.</param>
      <param name="inheritanceFlags">An <see cref="T:System.Security.AccessControl.InheritanceFlags" /> object that contains inheritance flags on a directory object.</param>
      <param name="propagationFlags">A <see cref="T:System.Security.AccessControl.PropagationFlags" /> object that contains inheritance propagation flags on a directory object.</param>
      <param name="flags">An <see cref="T:System.Security.AccessControl.AuditFlags" /> object that contains the audit flags for this <see cref="T:System.DirectoryServices.ActiveDirectorySecurity" /> object.</param>
      <param name="objectGuid">A <see cref="T:System.Guid" /> object that contains the Guido of the directory object.</param>
      <param name="inheritedObjectGuid">A <see cref="T:System.Guid" /> object that contains the Guido of the inherited directory object.</param>
    </member>
    <member name="P:System.DirectoryServices.ActiveDirectorySecurity.AuditRuleType">
      <summary>Gets the <see cref="T:System.Type" /> that represents an audit rule for this object.</summary>
      <returns>The <see cref="T:System.Type" /> of the audit rule.</returns>
    </member>
    <member name="M:System.DirectoryServices.ActiveDirectorySecurity.ModifyAccessRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)">
      <summary>Applies the specified modification to the specified <see cref="T:System.Security.AccessControl.AccessRule" />.</summary>
      <returns>true if successfully modified; otherwise, false.</returns>
      <param name="modification">The type of access control modification to perform.</param>
      <param name="rule">The access rule to modify.</param>
      <param name="modified">true if successfully modified; otherwise, false.</param>
    </member>
    <member name="M:System.DirectoryServices.ActiveDirectorySecurity.ModifyAuditRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)">
      <summary>Applies the specified modification to the specified <see cref="T:System.Security.AccessControl.AuditRule" />.</summary>
      <returns>true if successfully modified; otherwise, false.</returns>
      <param name="modification">The modification to apply.</param>
      <param name="rule">The audit rule to modify.</param>
      <param name="modified">true if successfully modified; otherwise, false.</param>
    </member>
    <member name="M:System.DirectoryServices.ActiveDirectorySecurity.PurgeAccessRules(System.Security.Principal.IdentityReference)">
      <summary>Removes all access rules associated with the specified <see cref="T:System.Security.Principal.IdentityReference" />.</summary>
      <param name="identity">The <see cref="T:System.Security.Principal.IdentityReference" /> for which to remove all access rules.</param>
      <exception cref="T:System.InvalidOperationException">All access rules are not in canonical order.</exception>
    </member>
    <member name="M:System.DirectoryServices.ActiveDirectorySecurity.PurgeAuditRules(System.Security.Principal.IdentityReference)">
      <summary>Removes all audit rules associated with the specified <see cref="T:System.Security.Principal.IdentityReference" />.</summary>
      <param name="identity">The <see cref="T:System.Security.Principal.IdentityReference" /> for which to remove all audit rules.</param>
      <exception cref="T:System.InvalidOperationException">All audit rules are not in canonical order.</exception>
    </member>
    <member name="M:System.DirectoryServices.ActiveDirectorySecurity.RemoveAccess(System.Security.Principal.IdentityReference,System.Security.AccessControl.AccessControlType)">
      <summary>Removes all access rules that have the specified <see cref="T:System.Security.Principal.IdentityReference" /> object and <see cref="T:System.Security.AccessControl.AccessControlType" /> object from the DACL of an object.</summary>
      <param name="identity">An <see cref="T:System.Security.Principal.IdentityReference" /> object such as an NTAccount object, that resolves to a security identifier (SID).</param>
      <param name="type">An <see cref="T:System.Security.AccessControl.AccessControlType" /> object that contains the ACE type.</param>
    </member>
    <member name="M:System.DirectoryServices.ActiveDirectorySecurity.RemoveAccessRule(System.DirectoryServices.ActiveDirectoryAccessRule)">
      <summary>Removes all access rules that contain the same security identifier and access mask as the specified access rule from the DACL of an object.</summary>
      <returns>true if the operation is successful; otherwise, false.</returns>
      <param name="rule">The <see cref="T:System.DirectoryServices.ActiveDirectoryAccessRule" /> object to which this operation applies.</param>
    </member>
    <member name="M:System.DirectoryServices.ActiveDirectorySecurity.RemoveAccessRuleSpecific(System.DirectoryServices.ActiveDirectoryAccessRule)">
      <summary>Removes all access rules that exactly match the specified access rule from the DACL of an object.</summary>
      <param name="rule">The <see cref="T:System.DirectoryServices.ActiveDirectoryAccessRule" /> object to which this operation applies.</param>
    </member>
    <member name="M:System.DirectoryServices.ActiveDirectorySecurity.RemoveAudit(System.Security.Principal.IdentityReference)">
      <summary> Removes all audit rules that have the specified <see cref="T:System.Security.Principal.IdentityReference" /> object from the SACL of an object.</summary>
      <param name="identity">An <see cref="T:System.Security.Principal.IdentityReference" /> object such as an NTAccount object, that resolves to a security identifier (SID).</param>
    </member>
    <member name="M:System.DirectoryServices.ActiveDirectorySecurity.RemoveAuditRule(System.DirectoryServices.ActiveDirectoryAuditRule)">
      <summary>Removes all audit rules that contain the same security identifier and access mask as the specified audit rule from the System Access Control List (SACL) of an object.</summary>
      <returns>true if the operation is successful; otherwise, false.</returns>
      <param name="rule">The <see cref="T:System.DirectoryServices.ActiveDirectoryAccessRule" /> object to which this operation applies.</param>
    </member>
    <member name="M:System.DirectoryServices.ActiveDirectorySecurity.RemoveAuditRuleSpecific(System.DirectoryServices.ActiveDirectoryAuditRule)">
      <summary>Removes all audit rules that exactly match the specified audit rule from the SACL of an object.</summary>
      <param name="rule">The <see cref="T:System.DirectoryServices.ActiveDirectoryAccessRule" /> object to which this operation applies.</param>
    </member>
    <member name="M:System.DirectoryServices.ActiveDirectorySecurity.ResetAccessRule(System.DirectoryServices.ActiveDirectoryAccessRule)">
      <summary>Searches an object's DACL for all access rules that contain a security identifier (SID) that matches the SID specified in the <paramref name="rule" /> object, and replaces all of those access rules with the access rules that are contained in the <paramref name="rule" /> object.</summary>
      <param name="rule">The <see cref="T:System.DirectoryServices.ActiveDirectoryAccessRule" /> object to which this operation applies.</param>
    </member>
    <member name="M:System.DirectoryServices.ActiveDirectorySecurity.SetAccessRule(System.DirectoryServices.ActiveDirectoryAccessRule)">
      <summary>Searches an object's DACL for all access rules that contain a security identifier (SID) that matches the SID specified in the <paramref name="rule" /> object, and an access control type (Allow or Deny) that matches the type specified in the <paramref name="rule" /> object, and replaces all of those access rules with the access rules that are contained in the <paramref name="rule" /> object.</summary>
      <param name="rule">The <see cref="T:System.DirectoryServices.ActiveDirectoryAccessRule" /> object to which this operation applies.</param>
    </member>
    <member name="M:System.DirectoryServices.ActiveDirectorySecurity.SetAuditRule(System.DirectoryServices.ActiveDirectoryAuditRule)">
      <summary> Replaces all audit rules that contain the same security identifier as the specified audit rule in the SACL of an object with the specified audit rule.</summary>
      <param name="rule">The <see cref="T:System.DirectoryServices.ActiveDirectoryAccessRule" /> object to which this operation applies.</param>
    </member>
    <member name="T:System.DirectoryServices.ActiveDirectorySecurityInheritance">
      <summary>The <see cref="T:System.DirectoryServices.ActiveDirectorySecurityInheritance" /> enumeration specifies if, and how, ACE information is applied to an object and its descendents.</summary>
    </member>
    <member name="F:System.DirectoryServices.ActiveDirectorySecurityInheritance.None">
      <summary>Indicates no inheritance. The ACE information is only used on the object on which the ACE is set.  ACE information is not inherited by any descendents of the object.</summary>
    </member>
    <member name="F:System.DirectoryServices.ActiveDirectorySecurityInheritance.All">
      <summary>Indicates inheritance that includes the object to which the ACE is applied, the object's immediate children, and the descendents of the object's children.</summary>
    </member>
    <member name="F:System.DirectoryServices.ActiveDirectorySecurityInheritance.Descendents">
      <summary>Indicates inheritance that includes the object's immediate children and the descendants of the object's children, but not the object itself. </summary>
    </member>
    <member name="F:System.DirectoryServices.ActiveDirectorySecurityInheritance.SelfAndChildren">
      <summary>Indicates inheritance that includes the object itself and its immediate children.  It does not include the descendents of its children.</summary>
    </member>
    <member name="F:System.DirectoryServices.ActiveDirectorySecurityInheritance.Children">
      <summary>Indicates inheritance that includes the object's immediate children only, not the object itself or the descendents of its children.</summary>
    </member>
    <member name="T:System.DirectoryServices.AuthenticationTypes">
      <summary>The <see cref="T:System.DirectoryServices.AuthenticationTypes" /> enumeration specifies the types of authentication used in <see cref="N:System.DirectoryServices" />. This enumeration has a <see cref="T:System.FlagsAttribute" /> attribute that allows a bitwise combination of its member values.</summary>
    </member>
    <member name="F:System.DirectoryServices.AuthenticationTypes.None">
      <summary>Equates to zero, which means to use basic authentication (simple bind) in the LDAP provider.</summary>
    </member>
    <member name="F:System.DirectoryServices.AuthenticationTypes.Secure">
      <summary>Requests secure authentication. When this flag is set, the WinNT provider uses NTLM to authenticate the client. Active Directory Domain Services uses Kerberos, and possibly NTLM, to authenticate the client. When the user name and password are a null reference (Nothing in Visual Basic), ADSI binds to the object using the security context of the calling thread, which is either the security context of the user account under which the application is running or of the client user account that the calling thread is impersonating.</summary>
    </member>
    <member name="F:System.DirectoryServices.AuthenticationTypes.Encryption">
      <summary>Attaches a cryptographic signature to the message that both identifies the sender and ensures that the message has not been modified in transit.</summary>
    </member>
    <member name="F:System.DirectoryServices.AuthenticationTypes.SecureSocketsLayer">
      <summary>Attaches a cryptographic signature to the message that both identifies the sender and ensures that the message has not been modified in transit. Active Directory Domain Services requires the Certificate Server be installed to support Secure Sockets Layer (SSL) encryption.</summary>
    </member>
    <member name="F:System.DirectoryServices.AuthenticationTypes.ReadonlyServer">
      <summary>For a WinNT provider, ADSI tries to connect to a domain controller. For Active Directory Domain Services, this flag indicates that a writable server is not required for a serverless binding.</summary>
    </member>
    <member name="F:System.DirectoryServices.AuthenticationTypes.Anonymous">
      <summary>No authentication is performed.</summary>
    </member>
    <member name="F:System.DirectoryServices.AuthenticationTypes.FastBind">
      <summary>Specifies that ADSI will not attempt to query the Active Directory Domain Services objectClass property.  Therefore, only the base interfaces that are supported by all ADSI objects will be exposed.  Other interfaces that the object supports will not be available. A user can use this option to boost the performance in a series of object manipulations that involve only methods of the base interfaces. However, ADSI does not verify if any of the request objects actually exist on the server. For more information, see the topic "Fast Binding Option for Batch Write/Modify Operations" in the MSDN Library at http://msdn.microsoft.com/library.  For more information about the objectClass property, see the "Object-Class" topic in the MSDN Library at http://msdn.microsoft.com/library.</summary>
    </member>
    <member name="F:System.DirectoryServices.AuthenticationTypes.Signing">
      <summary>Verifies data integrity to ensure that the data received is the same as the data sent. The <see cref="F:System.DirectoryServices.AuthenticationTypes.Secure" /> flag must also be set to use signing.</summary>
    </member>
    <member name="F:System.DirectoryServices.AuthenticationTypes.Sealing">
      <summary>Encrypts data using Kerberos. The <see cref="F:System.DirectoryServices.AuthenticationTypes.Secure" /> flag must also be set to use sealing.</summary>
    </member>
    <member name="F:System.DirectoryServices.AuthenticationTypes.Delegation">
      <summary>Enables Active Directory Services Interface (ADSI) to delegate the user's security context, which is necessary for moving objects across domains.</summary>
    </member>
    <member name="F:System.DirectoryServices.AuthenticationTypes.ServerBind">
      <summary>If your ADsPath includes a server name, specify this flag when using the LDAP provider. Do not use this flag for paths that include a domain name or for serverless paths. Specifying a server name without also specifying this flag results in unnecessary network traffic.</summary>
    </member>
    <member name="T:System.DirectoryServices.CreateChildAccessRule">
      <summary>The <see cref="T:System.DirectoryServices.CreateChildAccessRule" /> class represents a specific type of access rule that is used to allow or deny an Active Directory Domain Services object the right to create child objects.</summary>
    </member>
    <member name="M:System.DirectoryServices.CreateChildAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.AccessControlType)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.CreateChildAccessRule" /> class with the specified identity reference and access control type.</summary>
      <param name="identity">An <see cref="T:System.Security.Principal.IdentityReference" /> object that identifies the trustee of the access rule.</param>
      <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> enumeration values that specifies the access rule type.</param>
    </member>
    <member name="M:System.DirectoryServices.CreateChildAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.AccessControlType,System.DirectoryServices.ActiveDirectorySecurityInheritance)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.CreateChildAccessRule" /> class with the specified identity reference, access control type, and Active Directory Domain Services security inheritance information.</summary>
      <param name="identity">An <see cref="T:System.Security.Principal.IdentityReference" /> object that identifies the trustee of the access rule.</param>
      <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> enumeration values that specifies the access rule type.</param>
      <param name="inheritanceType">One of the <see cref="T:System.DirectoryServices.ActiveDirectorySecurityInheritance" /> enumeration values that specifies the inheritance type of the access rule.</param>
    </member>
    <member name="M:System.DirectoryServices.CreateChildAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.AccessControlType,System.DirectoryServices.ActiveDirectorySecurityInheritance,System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.CreateChildAccessRule" /> class with the specified identity reference, access control type, Active Directory Domain Services security inheritance information, and inherited object type.</summary>
      <param name="identity">An <see cref="T:System.Security.Principal.IdentityReference" /> object that identifies the trustee of the access rule.</param>
      <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> enumeration values that specifies the access rule type.</param>
      <param name="inheritanceType">One of the <see cref="T:System.DirectoryServices.ActiveDirectorySecurityInheritance" /> enumeration values that specifies the inheritance type of the access rule.</param>
      <param name="inheritedObjectType">The schema GUID of the child object type that can inherit this access rule.</param>
    </member>
    <member name="M:System.DirectoryServices.CreateChildAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.AccessControlType,System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.CreateChildAccessRule" /> class with the specified identity reference, access control type, and child object type.</summary>
      <param name="identity">An <see cref="T:System.Security.Principal.IdentityReference" /> object that identifies the trustee of the access rule.</param>
      <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> enumeration values that specifies the access rule type.</param>
      <param name="childType">The schema GUID of the type of child objects that can or cannot be created. If this is <see cref="F:System.Guid.Empty" />, then the access rule applies to all child types.</param>
    </member>
    <member name="M:System.DirectoryServices.CreateChildAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.AccessControlType,System.Guid,System.DirectoryServices.ActiveDirectorySecurityInheritance)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.CreateChildAccessRule" /> class with the specified identity reference, access control type, child object type, and Active Directory Domain Services security inheritance information.</summary>
      <param name="identity">An <see cref="T:System.Security.Principal.IdentityReference" /> object that identifies the trustee of the access rule.</param>
      <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> enumeration values that specifies the access rule type.</param>
      <param name="childType">The schema GUID of the type of child objects that can or cannot be created. If this is <see cref="F:System.Guid.Empty" />, then the access rule applies to all child types.</param>
      <param name="inheritanceType">One of the <see cref="T:System.DirectoryServices.ActiveDirectorySecurityInheritance" /> enumeration values that specifies the inheritance type of the access rule.</param>
    </member>
    <member name="M:System.DirectoryServices.CreateChildAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.AccessControlType,System.Guid,System.DirectoryServices.ActiveDirectorySecurityInheritance,System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.CreateChildAccessRule" /> class with the specified identity reference, access control type, child object type, Active Directory Domain Services security inheritance information, and inherited object type.</summary>
      <param name="identity">An <see cref="T:System.Security.Principal.IdentityReference" /> object that identifies the trustee of the access rule.</param>
      <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> enumeration values that specifies the access rule type.</param>
      <param name="childType">The schema GUID of the type of child objects that can or cannot be created. If this is <see cref="F:System.Guid.Empty" />, then the access rule applies to all child types.</param>
      <param name="inheritanceType">One of the <see cref="T:System.DirectoryServices.ActiveDirectorySecurityInheritance" /> enumeration values that specifies the inheritance type of the access rule.</param>
      <param name="inheritedObjectType">The schema GUID of the child object type that can inherit this access rule.</param>
    </member>
    <member name="T:System.DirectoryServices.DeleteChildAccessRule">
      <summary>The <see cref="T:System.DirectoryServices.DeleteChildAccessRule" /> class represents a specific type of access rule that is used to allow or deny an Active Directory Domain Services object the right to delete child objects.</summary>
    </member>
    <member name="M:System.DirectoryServices.DeleteChildAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.AccessControlType)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.DeleteChildAccessRule" /> class with the specified identity reference and access control type.</summary>
      <param name="identity">An <see cref="T:System.Security.Principal.IdentityReference" /> object that identifies the trustee of the access rule.</param>
      <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> enumeration values that specifies the access rule type.</param>
    </member>
    <member name="M:System.DirectoryServices.DeleteChildAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.AccessControlType,System.DirectoryServices.ActiveDirectorySecurityInheritance)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.DeleteChildAccessRule" /> class with the specified identity reference, access control type, and Active Directory Domain Services security inheritance.</summary>
      <param name="identity">An <see cref="T:System.Security.Principal.IdentityReference" /> object that identifies the trustee of the access rule.</param>
      <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> enumeration values that specifies the access rule type.</param>
      <param name="inheritanceType">One of the <see cref="T:System.DirectoryServices.ActiveDirectorySecurityInheritance" /> enumeration values that specifies the inheritance type of the access rule.</param>
    </member>
    <member name="M:System.DirectoryServices.DeleteChildAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.AccessControlType,System.DirectoryServices.ActiveDirectorySecurityInheritance,System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.DeleteChildAccessRule" /> class with the specified identity reference, access control type, Active Directory Domain Services security inheritance, and inherited object type.</summary>
      <param name="identity">An <see cref="T:System.Security.Principal.IdentityReference" /> object that identifies the trustee of the access rule.</param>
      <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> enumeration values that specifies the access rule type.</param>
      <param name="inheritanceType">One of the <see cref="T:System.DirectoryServices.ActiveDirectorySecurityInheritance" /> enumeration values that specifies the inheritance type of the access rule.</param>
      <param name="inheritedObjectType">The schema GUID of the child object type that can inherit this access rule.</param>
    </member>
    <member name="M:System.DirectoryServices.DeleteChildAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.AccessControlType,System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.DeleteChildAccessRule" /> class with the specified identity reference, access control type, and child type.</summary>
      <param name="identity">An <see cref="T:System.Security.Principal.IdentityReference" /> object that identifies the trustee of the access rule.</param>
      <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> enumeration values that specifies the access rule type.</param>
      <param name="childType">The schema GUID of the type of child objects that can or cannot be deleted. If this is <see cref="F:System.Guid.Empty" />, then the access rule applies to all child types.</param>
    </member>
    <member name="M:System.DirectoryServices.DeleteChildAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.AccessControlType,System.Guid,System.DirectoryServices.ActiveDirectorySecurityInheritance)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.DeleteChildAccessRule" /> class with the specified identity reference, access control type, child type, and Active Directory Domain Services security inheritance.</summary>
      <param name="identity">An <see cref="T:System.Security.Principal.IdentityReference" /> object that identifies the trustee of the access rule.</param>
      <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> enumeration values that specifies the access rule type.</param>
      <param name="childType">The schema GUID of the type of child objects that can or cannot be deleted. If this is <see cref="F:System.Guid.Empty" />, then the access rule applies to all child types.</param>
      <param name="inheritanceType">One of the <see cref="T:System.DirectoryServices.ActiveDirectorySecurityInheritance" /> enumeration values that specifies the inheritance type of the access rule.</param>
    </member>
    <member name="M:System.DirectoryServices.DeleteChildAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.AccessControlType,System.Guid,System.DirectoryServices.ActiveDirectorySecurityInheritance,System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.DeleteChildAccessRule" /> class with the specified identity reference, access control type, child type, Active Directory Domain Services security inheritance, and inherited object type.</summary>
      <param name="identity">An <see cref="T:System.Security.Principal.IdentityReference" /> object that identifies the trustee of the access rule.</param>
      <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> enumeration values that specifies the access rule type.</param>
      <param name="childType">The schema GUID of the type of child objects that can or cannot be deleted. If this is <see cref="F:System.Guid.Empty" />, then the access rule applies to all child types.</param>
      <param name="inheritanceType">One of the <see cref="T:System.DirectoryServices.ActiveDirectorySecurityInheritance" /> enumeration values that specifies the inheritance type of the access rule.</param>
      <param name="inheritedObjectType">The schema GUID of the child object type that can inherit this access rule.</param>
    </member>
    <member name="T:System.DirectoryServices.DeleteTreeAccessRule">
      <summary>The <see cref="T:System.DirectoryServices.DeleteTreeAccessRule" /> class represents a specific type of access rule that is used to allow or deny an Active Directory Domain Services object the right to delete all child objects, regardless of the permissions that the child objects have. </summary>
    </member>
    <member name="M:System.DirectoryServices.DeleteTreeAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.AccessControlType)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.DeleteTreeAccessRule" /> class with the specified identity reference and access control type.</summary>
      <param name="identity">An <see cref="T:System.Security.Principal.IdentityReference" /> object that identifies the trustee of the access rule.</param>
      <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> enumeration values that specifies the access rule type.</param>
    </member>
    <member name="M:System.DirectoryServices.DeleteTreeAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.AccessControlType,System.DirectoryServices.ActiveDirectorySecurityInheritance)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.DeleteTreeAccessRule" /> class with the specified identity reference, access control type, and Active Directory Domain Services security inheritance.</summary>
      <param name="identity">An <see cref="T:System.Security.Principal.IdentityReference" /> object that identifies the trustee of the access rule.</param>
      <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> enumeration values that specifies the access rule type.</param>
      <param name="inheritanceType">One of the <see cref="T:System.DirectoryServices.ActiveDirectorySecurityInheritance" /> enumeration values that specifies the inheritance type of the access rule.</param>
    </member>
    <member name="M:System.DirectoryServices.DeleteTreeAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.AccessControlType,System.DirectoryServices.ActiveDirectorySecurityInheritance,System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.DeleteTreeAccessRule" /> class with the specified identity reference, access control type, Active Directory Domain Services security inheritance, and inherited object type.</summary>
      <param name="identity">An <see cref="T:System.Security.Principal.IdentityReference" /> object that identifies the trustee of the access rule.</param>
      <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> enumeration values that specifies the access rule type.</param>
      <param name="inheritanceType">One of the <see cref="T:System.DirectoryServices.ActiveDirectorySecurityInheritance" /> enumeration values that specifies the inheritance type of the access rule.</param>
      <param name="inheritedObjectType">The schema GUID of the child object type that can inherit this access rule.</param>
    </member>
    <member name="T:System.DirectoryServices.DereferenceAlias">
      <summary>The <see cref="T:System.DirectoryServices.DereferenceAlias" /> enumeration specifies how aliases are resolved. This enumeration provides values for the <see cref="P:System.DirectoryServices.DirectorySearcher.DerefAlias" /> property.          </summary>
    </member>
    <member name="F:System.DirectoryServices.DereferenceAlias.Never">
      <summary>Indicates that the alias will not be dereferenced. If the <see cref="P:System.DirectoryServices.DirectorySearcher.DerefAlias" /> property is not set, the default value is <see cref="F:System.DirectoryServices.DereferenceAlias.Never" />.</summary>
    </member>
    <member name="F:System.DirectoryServices.DereferenceAlias.InSearching">
      <summary>Dereferences aliases when searching subordinates of the base object, but not when locating the base itself.</summary>
    </member>
    <member name="F:System.DirectoryServices.DereferenceAlias.FindingBaseObject">
      <summary>Dereferences aliases when locating the base object of the search, but not when searching its subordinates.</summary>
    </member>
    <member name="F:System.DirectoryServices.DereferenceAlias.Always">
      <summary>Dereferences aliases when both searching subordinates and locating the base objects of the search.</summary>
    </member>
    <member name="T:System.DirectoryServices.DirectoryEntries">
      <summary>Contains a collection of <see cref="T:System.DirectoryServices.DirectoryEntry" /> objects.</summary>
    </member>
    <member name="M:System.DirectoryServices.DirectoryEntries.Add(System.String,System.String)">
      <summary>Creates a new entry in the container.</summary>
      <returns>A <see cref="T:System.DirectoryServices.DirectoryEntry" /> object that represents the new entry.</returns>
      <param name="name"> The name of the new entry.</param>
      <param name="schemaClassName">The name of the schema that is used for the new entry.</param>
      <exception cref="T:System.Runtime.InteropServices.COMException">An error occurred during the call to the underlying interface.</exception>
    </member>
    <member name="M:System.DirectoryServices.DirectoryEntries.Find(System.String)">
      <summary>Returns the member of this collection with the specified name.</summary>
      <returns>A <see cref="T:System.DirectoryServices.DirectoryEntry" /> that represents the child object that was found.</returns>
      <param name="name">Contains the name of the child object for which to search.</param>
      <exception cref="T:System.InvalidOperationException">The Active Directory Domain Services object is not a container.</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">An error occurred during the call to the underlying interface.</exception>
    </member>
    <member name="M:System.DirectoryServices.DirectoryEntries.Find(System.String,System.String)">
      <summary>Returns the member of this collection with the specified name and of the specified type.</summary>
      <returns>A <see cref="T:System.DirectoryServices.DirectoryEntry" /> object that represents the child object that was found.</returns>
      <param name="name">The name of the child directory object for which to search.</param>
      <param name="schemaClassName">The class name of the child directory object for which to search.</param>
      <exception cref="T:System.InvalidOperationException">The Active Directory Domain Services object is not a container.</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">An error occurred during the call to the underlying interface.</exception>
    </member>
    <member name="M:System.DirectoryServices.DirectoryEntries.GetEnumerator">
      <summary> Returns an enumerator that iterates through the collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.DirectoryServices.DirectoryEntries.Remove(System.DirectoryServices.DirectoryEntry)">
      <summary>Deletes a member of this collection.</summary>
      <param name="entry">The name of the <see cref="T:System.DirectoryServices.DirectoryEntry" /> object to delete.</param>
      <exception cref="T:System.Runtime.InteropServices.COMException">An error occurred during the call to the underlying interface.</exception>
    </member>
    <member name="P:System.DirectoryServices.DirectoryEntries.SchemaFilter">
      <summary>Gets the schemas that specify which child objects are contained in the collection.</summary>
      <returns>A <see cref="T:System.DirectoryServices.SchemaNameCollection" /> that specifies which child objects are contained in the <see cref="T:System.DirectoryServices.DirectoryEntries" /> instance.</returns>
    </member>
    <member name="T:System.DirectoryServices.DirectoryEntry">
      <summary>The <see cref="T:System.DirectoryServices.DirectoryEntry" /> class encapsulates a node or object in the Active Directory Domain Services hierarchy.</summary>
    </member>
    <member name="M:System.DirectoryServices.DirectoryEntry.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.DirectoryEntry" /> class.</summary>
    </member>
    <member name="M:System.DirectoryServices.DirectoryEntry.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.DirectoryEntry" /> class that binds to the specified native Active Directory Domain Services object.</summary>
      <param name="adsObject">The name of the native Active Directory Domain Services object to bind to.</param>
    </member>
    <member name="M:System.DirectoryServices.DirectoryEntry.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.DirectoryEntry" /> class that binds this instance to the node in Active Directory Domain Services located at the specified path.</summary>
      <param name="path">The path at which to bind the <see cref="M:System.DirectoryServices.DirectoryEntry.#ctor(System.String)" /> to the directory. The <see cref="P:System.DirectoryServices.DirectoryEntry.Path" /> property is initialized to this value.</param>
    </member>
    <member name="M:System.DirectoryServices.DirectoryEntry.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.DirectoryEntry" /> class.</summary>
      <param name="path"></param>
      <param name="username">The user name to use when authenticating the client. The <see cref="P:System.DirectoryServices.DirectoryEntry.Username" /> property is initialized to this value.</param>
      <param name="password"></param>
    </member>
    <member name="M:System.DirectoryServices.DirectoryEntry.#ctor(System.String,System.String,System.String,System.DirectoryServices.AuthenticationTypes)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.DirectoryEntry" /> class.</summary>
      <param name="path"></param>
      <param name="username">The user name to use when authenticating the client. The <see cref="P:System.DirectoryServices.DirectoryEntry.Username" /> property is initialized to this value.</param>
      <param name="password"></param>
      <param name="authenticationType">One of the <see cref="T:System.DirectoryServices.AuthenticationTypes" /> values. The <see cref="P:System.DirectoryServices.DirectoryEntry.AuthenticationType" /> property is initialized to this value.</param>
    </member>
    <member name="P:System.DirectoryServices.DirectoryEntry.AuthenticationType">
      <summary>Gets or sets the type of authentication to use.</summary>
      <returns>One of the <see cref="T:System.DirectoryServices.AuthenticationTypes" /> values.</returns>
    </member>
    <member name="P:System.DirectoryServices.DirectoryEntry.Children">
      <summary>Gets the child entries of this node in the Active Directory Domain Services hierarchy.</summary>
      <returns>A <see cref="T:System.DirectoryServices.DirectoryEntries" /> object containing the child entries of this node in the Active Directory Domain Services hierarchy.</returns>
    </member>
    <member name="M:System.DirectoryServices.DirectoryEntry.Close">
      <summary>Closes the <see cref="T:System.DirectoryServices.DirectoryEntry" /> object and releases any system resources that are associated with this component.</summary>
    </member>
    <member name="M:System.DirectoryServices.DirectoryEntry.CommitChanges">
      <summary>Saves changes that are made to a directory entry to the underlying directory store.</summary>
    </member>
    <member name="M:System.DirectoryServices.DirectoryEntry.CopyTo(System.DirectoryServices.DirectoryEntry)">
      <summary>Creates a copy of this entry as a child of the specified parent.</summary>
      <returns>A <see cref="T:System.DirectoryServices.DirectoryEntry" /> object that represents the copy of this entry as a child of the new parent.</returns>
      <param name="newParent">The distinguished name of the <see cref="T:System.DirectoryServices.DirectoryEntry" /> object that will be the parent for the copy that is being created.</param>
      <exception cref="T:System.InvalidOperationException">The specified <see cref="T:System.DirectoryServices.DirectoryEntry" /> is not a container.</exception>
    </member>
    <member name="M:System.DirectoryServices.DirectoryEntry.CopyTo(System.DirectoryServices.DirectoryEntry,System.String)">
      <summary>Creates a copy of this <see cref="T:System.DirectoryServices.DirectoryEntry" /> object, as a child of the specified parent <see cref="T:System.DirectoryServices.DirectoryEntry" /> object, with the specified new name.</summary>
      <returns>A renamed copy of this entry as a child of the specified parent.</returns>
      <param name="newParent">The DN of the <see cref="T:System.DirectoryServices.DirectoryEntry" /> object that will be the parent for the copy that is being created.</param>
      <param name="newName">The name of the copy of this entry.</param>
      <exception cref="T:System.InvalidOperationException">The specified <see cref="T:System.DirectoryServices.DirectoryEntry" /> object is not a container.</exception>
    </member>
    <member name="M:System.DirectoryServices.DirectoryEntry.DeleteTree">
      <summary>Deletes this entry and its entire subtree from the Active Directory Domain Services hierarchy.</summary>
      <exception cref="T:System.InvalidOperationException">The specified <see cref="T:System.DirectoryServices.DirectoryEntry" /> is not a container.</exception>
    </member>
    <member name="M:System.DirectoryServices.DirectoryEntry.Dispose(System.Boolean)">
      <summary>Disposes of the resources (other than memory) that are used by the <see cref="T:System.DirectoryServices.DirectoryEntry" />.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.DirectoryServices.DirectoryEntry.Exists(System.String)">
      <summary>Determines if the specified path represents an actual entry in the directory service.</summary>
      <returns>true if the specified path represents a valid entry in the directory service; otherwise, false.</returns>
      <param name="path">The path of the entry to verify.</param>
    </member>
    <member name="P:System.DirectoryServices.DirectoryEntry.Guid">
      <summary>Gets the GUID of the <see cref="T:System.DirectoryServices.DirectoryEntry" />.</summary>
      <returns>A <see cref="T:System.Guid" /> structure that represents the GUID of the <see cref="T:System.DirectoryServices.DirectoryEntry" />.</returns>
    </member>
    <member name="M:System.DirectoryServices.DirectoryEntry.Invoke(System.String,System.Object[])">
      <summary>Calls a method on the native Active Directory Domain Services object.</summary>
      <returns>The return value of the invoked method.</returns>
      <param name="methodName">The name of the method to invoke.</param>
      <param name="args">An array of type <see cref="T:System.Object" /> objects that contains the arguments of the method to invoke.</param>
      <exception cref="T:System.DirectoryServices.DirectoryServicesCOMException">The native method threw a <see cref="T:System.Runtime.InteropServices.COMException" /> exception.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The native method threw a <see cref="T:System.Reflection.TargetInvocationException" /> exception. The <see cref="P:System.Exception.InnerException" /> property contains a <see cref="T:System.Runtime.InteropServices.COMException" /> exception that contains information about the actual error that occurred.</exception>
    </member>
    <member name="M:System.DirectoryServices.DirectoryEntry.InvokeGet(System.String)">
      <summary>Gets a property from the native Active Directory Domain Services object.</summary>
      <returns>An object that represents the requested property.</returns>
      <param name="propertyName">The name of the property to get.</param>
    </member>
    <member name="M:System.DirectoryServices.DirectoryEntry.InvokeSet(System.String,System.Object[])">
      <summary>Sets a property on the native Active Directory Domain Services object.</summary>
      <param name="propertyName">The name of the property to set.</param>
      <param name="args">The Active Directory Domain Services object to set.</param>
    </member>
    <member name="M:System.DirectoryServices.DirectoryEntry.MoveTo(System.DirectoryServices.DirectoryEntry)">
      <summary>Moves this <see cref="T:System.DirectoryServices.DirectoryEntry" /> object to the specified parent.</summary>
      <param name="newParent">The parent to which you want to move this entry.</param>
      <exception cref="T:System.InvalidOperationException">The specified <see cref="T:System.DirectoryServices.DirectoryEntry" /> is not a container.</exception>
    </member>
    <member name="M:System.DirectoryServices.DirectoryEntry.MoveTo(System.DirectoryServices.DirectoryEntry,System.String)">
      <summary>Moves this <see cref="T:System.DirectoryServices.DirectoryEntry" /> object to the specified parent and changes its name to the specified value.</summary>
      <param name="newParent">The parent to which you want to move this entry.</param>
      <param name="newName">The new name of this entry.</param>
      <exception cref="T:System.InvalidOperationException">The specified <see cref="T:System.DirectoryServices.DirectoryEntry" /> is not a container.</exception>
    </member>
    <member name="P:System.DirectoryServices.DirectoryEntry.Name">
      <summary>Gets the name of the object as named with the underlying directory service.</summary>
      <returns>The name of the object as named with the underlying directory service.</returns>
    </member>
    <member name="P:System.DirectoryServices.DirectoryEntry.NativeGuid">
      <summary>Gets the GUID of the <see cref="T:System.DirectoryServices.DirectoryEntry" />, as returned from the provider.</summary>
      <returns>A <see cref="T:System.Guid" /> structure that represents the GUID of the <see cref="T:System.DirectoryServices.DirectoryEntry" />, as returned from the provider.</returns>
    </member>
    <member name="P:System.DirectoryServices.DirectoryEntry.NativeObject">
      <summary>Gets the native Active Directory Service Interfaces (ADSI) object.</summary>
      <returns>The native ADSI object.</returns>
    </member>
    <member name="P:System.DirectoryServices.DirectoryEntry.ObjectSecurity">
      <summary>Gets or sets the security descriptor for this entry.</summary>
      <returns>An <see cref="T:System.DirectoryServices.ActiveDirectorySecurity" /> object that represents the security descriptor for this directory entry.</returns>
    </member>
    <member name="P:System.DirectoryServices.DirectoryEntry.Options">
      <summary>Gets the provider-specific options for this entry.</summary>
      <returns>A <see cref="T:System.DirectoryServices.DirectoryEntryConfiguration" /> object that contains the provider-specific options for this entry.</returns>
    </member>
    <member name="P:System.DirectoryServices.DirectoryEntry.Parent">
      <summary>Gets this entry's parent in the Active Directory Domain Services hierarchy.</summary>
      <returns>A <see cref="T:System.DirectoryServices.DirectoryEntry" /> object that represents the parent of this entry.</returns>
    </member>
    <member name="P:System.DirectoryServices.DirectoryEntry.Password">
      <summary>Sets the password to use when authenticating the client.</summary>
      <returns>The password to use when authenticating the client.</returns>
    </member>
    <member name="P:System.DirectoryServices.DirectoryEntry.Path">
      <summary>Gets or sets the path for this <see cref="T:System.DirectoryServices.DirectoryEntry" />.</summary>
      <returns>The path of this <see cref="T:System.DirectoryServices.DirectoryEntry" /> object. The default is an empty string ("").</returns>
    </member>
    <member name="P:System.DirectoryServices.DirectoryEntry.Properties">
      <summary>Gets the Active Directory Domain Services properties for this <see cref="T:System.DirectoryServices.DirectoryEntry" /> object.</summary>
      <returns>A <see cref="T:System.DirectoryServices.PropertyCollection" /> object that contains the properties that are set on this entry.</returns>
    </member>
    <member name="M:System.DirectoryServices.DirectoryEntry.RefreshCache">
      <summary>Loads the property values for this <see cref="T:System.DirectoryServices.DirectoryEntry" /> object into the property cache.</summary>
    </member>
    <member name="M:System.DirectoryServices.DirectoryEntry.RefreshCache(System.String[])">
      <summary>Loads the values of the specified properties into the property cache.</summary>
      <param name="propertyNames">An array of the specified properties.</param>
    </member>
    <member name="M:System.DirectoryServices.DirectoryEntry.Rename(System.String)">
      <summary>Changes the name of this <see cref="T:System.DirectoryServices.DirectoryEntry" /> object.</summary>
      <param name="newName">The new name of the entry.</param>
    </member>
    <member name="P:System.DirectoryServices.DirectoryEntry.SchemaClassName">
      <summary>Gets the name of the schema class for this <see cref="T:System.DirectoryServices.DirectoryEntry" /> object.</summary>
      <returns>The name of the schema class for this <see cref="T:System.DirectoryServices.DirectoryEntry" /> object.</returns>
    </member>
    <member name="P:System.DirectoryServices.DirectoryEntry.SchemaEntry">
      <summary>Gets the schema object for this entry.</summary>
      <returns>A <see cref="T:System.DirectoryServices.DirectoryEntry" /> object that represents the schema class for this entry.</returns>
    </member>
    <member name="P:System.DirectoryServices.DirectoryEntry.UsePropertyCache">
      <summary>Gets or sets a value indicating whether the cache should be committed after each operation.</summary>
      <returns>true if the cache should not be committed after each operation; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.DirectoryServices.DirectoryEntry.Username">
      <summary>Gets or sets the user name to use when authenticating the client.</summary>
      <returns>The user name to use when authenticating the client.</returns>
    </member>
    <member name="T:System.DirectoryServices.DirectoryEntryConfiguration">
      <summary>The <see cref="T:System.DirectoryServices.DirectoryEntryConfiguration" /> class provides a direct way to specify and obtain provider-specific options for manipulating a directory object. Typically, the options apply to search operations of the underlying directory store. The supported options are provider-specific.</summary>
    </member>
    <member name="M:System.DirectoryServices.DirectoryEntryConfiguration.GetCurrentServerName">
      <summary>Gets the host name of the server for the current binding to this directory object.</summary>
      <returns>The name of the server.</returns>
    </member>
    <member name="M:System.DirectoryServices.DirectoryEntryConfiguration.IsMutuallyAuthenticated">
      <summary>Determines if mutual authentication is performed by the SSPI layer.</summary>
      <returns>true if mutual authentication has been performed; otherwise, false. </returns>
    </member>
    <member name="P:System.DirectoryServices.DirectoryEntryConfiguration.PageSize">
      <summary>Gets or sets the page size in a paged search.</summary>
      <returns>The number of entries in a page.</returns>
    </member>
    <member name="P:System.DirectoryServices.DirectoryEntryConfiguration.PasswordEncoding">
      <summary>Gets or sets the password encoding method.</summary>
      <returns>One of the <see cref="T:System.DirectoryServices.PasswordEncodingMethod" /> enumeration members that indicates the type of password encoding.</returns>
    </member>
    <member name="P:System.DirectoryServices.DirectoryEntryConfiguration.PasswordPort">
      <summary>Gets or sets the port number to use to establish an SSL connection when the password is set or changed.</summary>
      <returns>The port number to use to establish an SSL connection when the password is set or changed.</returns>
    </member>
    <member name="P:System.DirectoryServices.DirectoryEntryConfiguration.Referral">
      <summary>Gets or sets a value that determines if and how referral chasing is pursued.</summary>
      <returns>A combination of one or more of the <see cref="T:System.DirectoryServices.ReferralChasingOption" /> enumeration members that specifies if and how referral chasing is pursued.</returns>
    </member>
    <member name="P:System.DirectoryServices.DirectoryEntryConfiguration.SecurityMasks">
      <summary>Gets or sets a security mask to use with <see cref="T:System.DirectoryServices.DirectoryEntryConfiguration" />.</summary>
      <returns>A combination of one or more of the <see cref="T:System.DirectoryServices.SecurityMasks" /> enumeration members that specifies the security mask.</returns>
    </member>
    <member name="M:System.DirectoryServices.DirectoryEntryConfiguration.SetUserNameQueryQuota(System.String)">
      <summary>Sets the name of a security principal so that when the principal is accessed, its quota information will also be returned.</summary>
      <param name="accountName">The account name that is being set to allow queries on its principal name.</param>
    </member>
    <member name="T:System.DirectoryServices.DirectorySearcher">
      <summary>Performs queries against Active Directory Domain Services.</summary>
    </member>
    <member name="M:System.DirectoryServices.DirectorySearcher.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.DirectorySearcher" /> class with default values.</summary>
    </member>
    <member name="M:System.DirectoryServices.DirectorySearcher.#ctor(System.DirectoryServices.DirectoryEntry)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.DirectorySearcher" /> class using the specified search root.</summary>
      <param name="searchRoot">The node in the Active Directory Domain Services hierarchy where the search starts. The <see cref="P:System.DirectoryServices.DirectorySearcher.SearchRoot" /> property is initialized to this value.</param>
    </member>
    <member name="M:System.DirectoryServices.DirectorySearcher.#ctor(System.DirectoryServices.DirectoryEntry,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.DirectorySearcher" /> class with the specified search root and search filter.  </summary>
      <param name="searchRoot">The node in the Active Directory Domain Services hierarchy where the search starts. The <see cref="P:System.DirectoryServices.DirectorySearcher.SearchRoot" /> property is initialized to this value.</param>
      <param name="filter">The search filter string in Lightweight Directory Access Protocol (LDAP) format. The <see cref="P:System.DirectoryServices.DirectorySearcher.Filter" /> property is initialized to this value.</param>
    </member>
    <member name="M:System.DirectoryServices.DirectorySearcher.#ctor(System.DirectoryServices.DirectoryEntry,System.String,System.String[])">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.DirectorySearcher" /> class with the specified search root, search filter, and properties to retrieve..</summary>
      <param name="searchRoot">The node in the Active Directory Domain Services hierarchy where the search starts. The <see cref="P:System.DirectoryServices.DirectorySearcher.SearchRoot" /> property is initialized to this value.</param>
      <param name="filter">The search filter string in Lightweight Directory Access Protocol (LDAP) format. The <see cref="P:System.DirectoryServices.DirectorySearcher.Filter" /> property is initialized to this value.</param>
      <param name="propertiesToLoad">The set of properties that are retrieved during the search. The <see cref="P:System.DirectoryServices.DirectorySearcher.PropertiesToLoad" /> property is initialized to this value.</param>
    </member>
    <member name="M:System.DirectoryServices.DirectorySearcher.#ctor(System.DirectoryServices.DirectoryEntry,System.String,System.String[],System.DirectoryServices.SearchScope)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.DirectorySearcher" /> class with the specified search root, search filter, properties to retrieve, and search scope. </summary>
      <param name="searchRoot">The node in the Active Directory Domain Services hierarchy where the search starts. The <see cref="P:System.DirectoryServices.DirectorySearcher.SearchRoot" /> property is initialized to this value.</param>
      <param name="filter">The search filter string in Lightweight Directory Access Protocol (LDAP) format. The <see cref="P:System.DirectoryServices.DirectorySearcher.Filter" /> property is initialized to this value.</param>
      <param name="propertiesToLoad">The set of properties to retrieve during the search. The <see cref="P:System.DirectoryServices.DirectorySearcher.PropertiesToLoad" /> property is initialized to this value.</param>
      <param name="scope">The scope of the search that is observed by the server. The <see cref="T:System.DirectoryServices.SearchScope" /> property is initialized to this value.</param>
    </member>
    <member name="M:System.DirectoryServices.DirectorySearcher.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.DirectorySearcher" /> class with the specified search filter.  </summary>
      <param name="filter">The search filter string in Lightweight Directory Access Protocol (LDAP) format. The <see cref="P:System.DirectoryServices.DirectorySearcher.Filter" /> property is initialized to this value.</param>
    </member>
    <member name="M:System.DirectoryServices.DirectorySearcher.#ctor(System.String,System.String[])">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.DirectorySearcher" /> class with the specified search filter and properties to retrieve. </summary>
      <param name="filter">The search filter string in Lightweight Directory Access Protocol (LDAP) format. The  <see cref="P:System.DirectoryServices.DirectorySearcher.Filter" /> property is initialized to this value.</param>
      <param name="propertiesToLoad">The set of properties to retrieve during the search. The <see cref="P:System.DirectoryServices.DirectorySearcher.PropertiesToLoad" /> property is initialized to this value.</param>
    </member>
    <member name="M:System.DirectoryServices.DirectorySearcher.#ctor(System.String,System.String[],System.DirectoryServices.SearchScope)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.DirectorySearcher" /> class with the specified search filter, properties to retrieve, and search scope. </summary>
      <param name="filter">The search filter string in Lightweight Directory Access Protocol (LDAP) format. The <see cref="P:System.DirectoryServices.DirectorySearcher.Filter" /> property is initialized to this value.</param>
      <param name="propertiesToLoad">The set of properties to retrieve during the search. The <see cref="P:System.DirectoryServices.DirectorySearcher.PropertiesToLoad" /> property is initialized to this value.</param>
      <param name="scope">The scope of the search that is observed by the server. The <see cref="T:System.DirectoryServices.SearchScope" /> property is initialized to this value.</param>
    </member>
    <member name="P:System.DirectoryServices.DirectorySearcher.Asynchronous">
      <summary>Gets or sets a value that indicates if the search is performed asynchronously.</summary>
      <returns>true if the search is asynchronous; false otherwise.</returns>
    </member>
    <member name="P:System.DirectoryServices.DirectorySearcher.AttributeScopeQuery">
      <summary>Gets or sets the LDAP display name of the distinguished name attribute to search in. Only one attribute can be used for this type of search.</summary>
      <returns>The LDAP display name of the attribute to perform the search against, or an empty string of no attribute scope query is set.</returns>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.DirectoryServices.DirectorySearcher.SearchScope" /> property is set to a value other than <see cref="F:System.DirectoryServices.SearchScope.Base" />.</exception>
    </member>
    <member name="P:System.DirectoryServices.DirectorySearcher.CacheResults">
      <summary>Gets or sets a value indicating whether the result is cached on the client computer.</summary>
      <returns>true if the result is cached on the client computer; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.DirectoryServices.DirectorySearcher.ClientTimeout">
      <summary>Gets or sets the maximum amount of time that the client waits for the server to return results. If the server does not respond within this time, the search is aborted and no results are returned.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> structure that contains the maximum amount of time for the client to wait for the server to return results.The default value is -1 second, which means to wait indefinitely.</returns>
    </member>
    <member name="P:System.DirectoryServices.DirectorySearcher.DerefAlias">
      <summary>Gets or sets a value indicating how the aliases of objects that are found during a search should be resolved.</summary>
      <returns>A <see cref="T:System.DirectoryServices.DereferenceAlias" /> value that specifies the behavior in which aliases are dereferenced. The default setting for this property is <see cref="F:System.DirectoryServices.DereferenceAlias.Never" />.</returns>
    </member>
    <member name="P:System.DirectoryServices.DirectorySearcher.DirectorySynchronization">
      <summary>Gets or sets an object that represents the directory synchronization control to use with the search.</summary>
      <returns>The <see cref="T:System.DirectoryServices.DirectorySynchronization" /> object for the search. null if the directory synchronization control should not be used.</returns>
    </member>
    <member name="M:System.DirectoryServices.DirectorySearcher.Dispose(System.Boolean)">
      <summary>Releases the managed resources that are used by the <see cref="T:System.DirectoryServices.DirectorySearcher" /> object and, optionally, releases unmanaged resources.</summary>
      <param name="disposing">true if this method releases both managed and unmanaged resources; false if it releases only unmanaged resources.</param>
    </member>
    <member name="P:System.DirectoryServices.DirectorySearcher.ExtendedDN">
      <summary>Gets or sets a value that indicates the format of the distinguished names.</summary>
      <returns>One of the <see cref="T:System.DirectoryServices.ExtendedDN" /> values.</returns>
    </member>
    <member name="P:System.DirectoryServices.DirectorySearcher.Filter">
      <summary>Gets or sets a value indicating the Lightweight Directory Access Protocol (LDAP) format filter string.</summary>
      <returns>The search filter string in LDAP format, such as "(objectClass=user)". The default is "(objectClass=*)", which retrieves all objects.</returns>
    </member>
    <member name="M:System.DirectoryServices.DirectorySearcher.FindAll">
      <summary>Executes the search and returns a collection of the entries that are found.</summary>
      <returns>A <see cref="T:System.DirectoryServices.SearchResultCollection" /> object that contains the results of the search.</returns>
      <exception cref="T:System.InvalidOperationException">The specified <see cref="T:System.DirectoryServices.DirectoryEntry" /> is not a container.</exception>
      <exception cref="T:System.NotSupportedException">Searching is not supported by the provider that is being used.</exception>
    </member>
    <member name="M:System.DirectoryServices.DirectorySearcher.FindOne">
      <summary>Executes the search and returns only the first entry that is found.</summary>
      <returns>A <see cref="T:System.DirectoryServices.SearchResult" /> object that contains the first entry that is found during the search.</returns>
    </member>
    <member name="P:System.DirectoryServices.DirectorySearcher.PageSize">
      <summary>Gets or sets a value indicating the page size in a paged search.</summary>
      <returns>The maximum number of objects the server can return in a paged search. The default is zero, which means do not do a paged search.</returns>
      <exception cref="T:System.ArgumentException">The new value is less than zero.</exception>
    </member>
    <member name="P:System.DirectoryServices.DirectorySearcher.PropertiesToLoad">
      <summary>Gets a value indicating the list of properties to retrieve during the search.</summary>
      <returns>A <see cref="T:System.Collections.Specialized.StringCollection" /> object that contains the set of properties to retrieve during the search.The default is an empty <see cref="T:System.Collections.Specialized.StringCollection" />, which retrieves all properties.</returns>
    </member>
    <member name="P:System.DirectoryServices.DirectorySearcher.PropertyNamesOnly">
      <summary>Gets or sets a value indicating whether the search retrieves only the names of attributes to which values have been assigned.</summary>
      <returns>true if the search obtains only the names of attributes to which values have been assigned; false if the search obtains the names and values for all the requested attributes. The default value is false.</returns>
    </member>
    <member name="P:System.DirectoryServices.DirectorySearcher.ReferralChasing">
      <summary>Gets or sets a value indicating how referrals are chased.</summary>
      <returns>One of the <see cref="T:System.DirectoryServices.ReferralChasingOption" /> values. The default is <see cref="F:System.DirectoryServices.ReferralChasingOption.External" />.</returns>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The value is not one of the <see cref="T:System.DirectoryServices.ReferralChasingOption" /> values.</exception>
    </member>
    <member name="P:System.DirectoryServices.DirectorySearcher.SearchRoot">
      <summary>Gets or sets a value indicating the node in the Active Directory Domain Services hierarchy where the search starts.</summary>
      <returns>The <see cref="T:System.DirectoryServices.DirectoryEntry" /> object in the Active Directory Domain Services hierarchy where the search starts. The default is a null reference (Nothing in Visual Basic).</returns>
    </member>
    <member name="P:System.DirectoryServices.DirectorySearcher.SearchScope">
      <summary>Gets or sets a value indicating the scope of the search that is observed by the server.</summary>
      <returns>One of the <see cref="T:System.DirectoryServices.SearchScope" /> values. The default is <see cref="F:System.DirectoryServices.SearchScope.Subtree" />.</returns>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The value is not one of the <see cref="T:System.DirectoryServices.ReferralChasingOption" /> values.</exception>
    </member>
    <member name="P:System.DirectoryServices.DirectorySearcher.SecurityMasks">
      <summary>Gets or sets a value indicating which security access information for the specified attributes should be returned by the search.</summary>
      <returns>One of the <see cref="T:System.DirectoryServices.SecurityMasks" /> values.</returns>
    </member>
    <member name="P:System.DirectoryServices.DirectorySearcher.ServerPageTimeLimit">
      <summary>Gets or sets a value indicating the maximum amount of time the server should search for an individual page of results. This is not the same as the time limit for the entire search.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> that represents the amount of time the server should search for a page of results.The default value is -1 seconds, which means to search indefinitely.</returns>
    </member>
    <member name="P:System.DirectoryServices.DirectorySearcher.ServerTimeLimit">
      <summary>The <see cref="P:System.DirectoryServices.DirectorySearcher.ServerTimeLimit" /> property gets or sets a value indicating the maximum amount of time the server spends searching. If the time limit is reached, only entries that are found up to that point are returned.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> that represents the amount of time that the server should search.The default value is -1 seconds, which means to use the server-determined default of 120 seconds.</returns>
    </member>
    <member name="P:System.DirectoryServices.DirectorySearcher.SizeLimit">
      <summary>Gets or sets a value indicating the maximum number of objects that the server returns in a search.</summary>
      <returns>The maximum number of objects that the server returns in a search. The default value is zero, which means to use the server-determined default size limit of 1000 entries.</returns>
      <exception cref="T:System.ArgumentException">The new value is less than zero.</exception>
    </member>
    <member name="P:System.DirectoryServices.DirectorySearcher.Sort">
      <summary>Gets or sets a value indicating the property on which the results are sorted.</summary>
      <returns>A <see cref="T:System.DirectoryServices.SortOption" /> object that specifies the property and direction that the search results should be sorted on.</returns>
      <exception cref="T:System.ArgumentNullException">The property value is null (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.DirectoryServices.DirectorySearcher.Tombstone">
      <summary>Gets or sets a value indicating whether the search should also return deleted objects that match the search filter.</summary>
      <returns>true if deleted objects should be included in the search; false otherwise. The default value is false.</returns>
    </member>
    <member name="P:System.DirectoryServices.DirectorySearcher.VirtualListView">
      <summary>Gets or sets a value indicating the virtual list view options for the search.</summary>
      <returns>A <see cref="T:System.DirectoryServices.DirectoryVirtualListView" /> object that contains the virtual list view search information. The default value for this property is null, which means do not use the virtual list view search option.</returns>
    </member>
    <member name="T:System.DirectoryServices.DirectoryServicesCOMException">
      <summary>Contains extended error information about an error that occurred when the <see cref="M:System.DirectoryServices.DirectoryEntry.Invoke(System.String,System.Object[])" /> method is called. </summary>
    </member>
    <member name="M:System.DirectoryServices.DirectoryServicesCOMException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.DirectoryServicesCOMException" /> class. </summary>
    </member>
    <member name="M:System.DirectoryServices.DirectoryServicesCOMException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.DirectoryServicesCOMException" /> class with the specified serialization information and streaming context.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> destination for this serialization.</param>
    </member>
    <member name="M:System.DirectoryServices.DirectoryServicesCOMException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.DirectoryServicesCOMException" /> class with the specified string.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.DirectoryServices.DirectoryServicesCOMException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.DirectoryServicesCOMException" /> class with the specified string and exception.</summary>
      <param name="message">The message that describes the error.</param>
      <param name="inner">The exception that is the cause of the current exception.</param>
    </member>
    <member name="P:System.DirectoryServices.DirectoryServicesCOMException.ExtendedError">
      <summary>Gets the extended error code.</summary>
      <returns>The extended error code.</returns>
    </member>
    <member name="P:System.DirectoryServices.DirectoryServicesCOMException.ExtendedErrorMessage">
      <summary>Gets the extended error message.</summary>
      <returns>The extended error message.</returns>
    </member>
    <member name="M:System.DirectoryServices.DirectoryServicesCOMException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the data needed to serialize the <see cref="T:System.DirectoryServices.DirectoryServicesCOMException" /> object.          </summary>
      <param name="serializationInfo">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object to populate with data.</param>
      <param name="streamingContext">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that is the destination for this serialization.</param>
    </member>
    <member name="T:System.DirectoryServices.DirectoryServicesPermission">
      <summary>The <see cref="T:System.DirectoryServices.DirectoryServicesPermission" /> class allows you to control code access security permissions for <see cref="N:System.DirectoryServices" />.</summary>
    </member>
    <member name="M:System.DirectoryServices.DirectoryServicesPermission.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.DirectoryServicesPermission" /> class. </summary>
    </member>
    <member name="M:System.DirectoryServices.DirectoryServicesPermission.#ctor(System.DirectoryServices.DirectoryServicesPermissionAccess,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.DirectoryServicesPermission" /> class with the specified access levels and specified path to an Active Directory Domain Services node.</summary>
      <param name="permissionAccess">One of the <see cref="T:System.DirectoryServices.DirectoryServicesPermissionAccess" /> values.</param>
      <param name="path">The path of the Active Directory Domain Services object, otherwise known as the ADsPath, to which the permissions apply.</param>
    </member>
    <member name="M:System.DirectoryServices.DirectoryServicesPermission.#ctor(System.DirectoryServices.DirectoryServicesPermissionEntry[])">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.DirectoryServicesPermission" /> class with the specified permission access level entries.</summary>
      <param name="permissionAccessEntries">An array of <see cref="T:System.DirectoryServices.DirectoryServicesPermissionEntry" /> objects. The <see cref="P:System.DirectoryServices.DirectoryServicesPermission.PermissionEntries" /> property is set to this value.</param>
      <exception cref="T:System.ArgumentNullException">The specified value for the <paramref name="permissionAccessEntries" /> parameter is null.</exception>
    </member>
    <member name="M:System.DirectoryServices.DirectoryServicesPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.DirectoryServicesPermission" /> class with the specified permission state.</summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState" /> values.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="State" /> parameter is not a valid value of <see cref="T:System.Security.Permissions.PermissionState" />.</exception>
    </member>
    <member name="P:System.DirectoryServices.DirectoryServicesPermission.PermissionEntries">
      <summary>Gets the collection of permission entries for this permission.</summary>
      <returns>A <see cref="T:System.DirectoryServices.DirectoryServicesPermissionEntryCollection" /> object that contains the permission entries for this permission.</returns>
    </member>
    <member name="T:System.DirectoryServices.DirectoryServicesPermissionAccess">
      <summary>The <see cref="T:System.DirectoryServices.DirectoryServicesPermissionAccess" /> enumeration defines access levels that are used by <see cref="N:System.DirectoryServices" /> permission classes. This enumeration has a <see cref="T:System.FlagsAttribute" /> attribute that allows a bitwise combination of its member values.</summary>
    </member>
    <member name="F:System.DirectoryServices.DirectoryServicesPermissionAccess.None">
      <summary>No permissions are allowed.</summary>
    </member>
    <member name="F:System.DirectoryServices.DirectoryServicesPermissionAccess.Browse">
      <summary>Reading the Active Directory Domain Services tree is allowed.</summary>
    </member>
    <member name="F:System.DirectoryServices.DirectoryServicesPermissionAccess.Write">
      <summary>Reading, writing, deleting, changing, and adding to the Active Directory Domain Srevices tree are allowed.</summary>
    </member>
    <member name="T:System.DirectoryServices.DirectoryServicesPermissionAttribute">
      <summary>Allows declarative <see cref="N:System.DirectoryServices" /> permission checks.          </summary>
    </member>
    <member name="M:System.DirectoryServices.DirectoryServicesPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="M:System.DirectoryServices.DirectoryServicesPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)" /> class.          </summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction" /> values.</param>
    </member>
    <member name="M:System.DirectoryServices.DirectoryServicesPermissionAttribute.CreatePermission">
      <summary>Creates permissions based on the attribute's specifications.          </summary>
      <returns>An <see cref="T:System.Security.IPermission" /> that represents the created permission.</returns>
    </member>
    <member name="P:System.DirectoryServices.DirectoryServicesPermissionAttribute.Path">
      <summary>Gets or sets a path to an Active Directory Domain Services node to which the permissions apply.          </summary>
      <returns>The path to an Active Directory Domain Services node. The default is "*".</returns>
      <exception cref="T:System.ArgumentNullException">The property value is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.DirectoryServices.DirectoryServicesPermissionAttribute.PermissionAccess">
      <summary>Gets or sets the access levels that are used in creating permissions.          </summary>
      <returns>One of the <see cref="T:System.DirectoryServices.DirectoryServicesPermissionAccess" /> values. The default is Browse.</returns>
    </member>
    <member name="T:System.DirectoryServices.DirectoryServicesPermissionEntry">
      <summary>The <see cref="T:System.DirectoryServices.DirectoryServicesPermissionEntry" /> class defines the smallest unit of a code access security permission set for <see cref="N:System.DirectoryServices" />.</summary>
    </member>
    <member name="M:System.DirectoryServices.DirectoryServicesPermissionEntry.#ctor(System.DirectoryServices.DirectoryServicesPermissionAccess,System.String)">
      <summary>The <see cref="M:System.DirectoryServices.DirectoryServicesPermissionEntry.#ctor(System.DirectoryServices.DirectoryServicesPermissionAccess,System.String)" /> constructor initializes a new instance of the <see cref="M:System.DirectoryServices.DirectoryServicesPermissionEntry.#ctor(System.DirectoryServices.DirectoryServicesPermissionAccess,System.String)" /> class.</summary>
      <param name="permissionAccess">One of the <see cref="T:System.DirectoryServices.DirectoryServicesPermissionAccess" /> values.</param>
      <param name="path">The path of the Active Directory Domain Services node to which the permissions apply.</param>
    </member>
    <member name="P:System.DirectoryServices.DirectoryServicesPermissionEntry.Path">
      <summary>The <see cref="P:System.DirectoryServices.DirectoryServicesPermissionEntry.Path" /> property gets a path to an Active Directory Domain Services node to which the permissions apply.</summary>
      <returns>The path to an Active Directory Domain Services node.</returns>
    </member>
    <member name="P:System.DirectoryServices.DirectoryServicesPermissionEntry.PermissionAccess">
      <summary>The <see cref="P:System.DirectoryServices.DirectoryServicesPermissionEntry.PermissionAccess" /> property gets the access levels used in creating permissions.</summary>
      <returns>One of the <see cref="T:System.DirectoryServices.DirectoryServicesPermissionAccess" /> values.</returns>
    </member>
    <member name="T:System.DirectoryServices.DirectoryServicesPermissionEntryCollection">
      <summary>Contains a strongly-typed collection of <see cref="T:System.DirectoryServices.DirectoryServicesPermissionEntry" /> objects.          </summary>
    </member>
    <member name="M:System.DirectoryServices.DirectoryServicesPermissionEntryCollection.Add(System.DirectoryServices.DirectoryServicesPermissionEntry)">
      <summary>Appends the specified <see cref="T:System.DirectoryServices.DirectoryServicesPermissionEntry" /> object to this collection.          </summary>
      <returns>The zero-based index of the added <see cref="T:System.DirectoryServices.DirectoryServicesPermissionEntry" /> object that is appended to this collection.</returns>
      <param name="value">The <see cref="T:System.DirectoryServices.DirectoryServicesPermissionEntry" /> object to add to this collection.</param>
    </member>
    <member name="M:System.DirectoryServices.DirectoryServicesPermissionEntryCollection.AddRange(System.DirectoryServices.DirectoryServicesPermissionEntry[])">
      <summary>Appends the contents of the specified <see cref="T:System.DirectoryServices.DirectoryServicesPermissionEntry" /> array to this collection.          </summary>
      <param name="value">
        <see cref="T:System.DirectoryServices.DirectoryServicesPermissionEntry" /> array that contains the objects to append to this collection.</param>
    </member>
    <member name="M:System.DirectoryServices.DirectoryServicesPermissionEntryCollection.AddRange(System.DirectoryServices.DirectoryServicesPermissionEntryCollection)">
      <summary>Appends the contents of the specified <see cref="T:System.DirectoryServices.DirectoryServicesPermissionEntryCollection" /> object to this collection.          </summary>
      <param name="value">The <see cref="T:System.DirectoryServices.DirectoryServicesPermissionEntryCollection" /> object that contains the objects to append to this collection.</param>
    </member>
    <member name="M:System.DirectoryServices.DirectoryServicesPermissionEntryCollection.Contains(System.DirectoryServices.DirectoryServicesPermissionEntry)">
      <summary>Determines if the specified <see cref="T:System.DirectoryServices.DirectoryServicesPermissionEntry" /> object is in this collection.          </summary>
      <returns>true if the specified <see cref="T:System.DirectoryServices.DirectoryServicesPermissionEntry" /> object is in this collection; otherwise, false.</returns>
      <param name="value">The <see cref="T:System.DirectoryServices.DirectoryServicesPermissionEntry" /> object to search for in this collection.</param>
    </member>
    <member name="M:System.DirectoryServices.DirectoryServicesPermissionEntryCollection.CopyTo(System.DirectoryServices.DirectoryServicesPermissionEntry[],System.Int32)">
      <summary>Copies all <see cref="T:System.DirectoryServices.DirectoryServicesPermissionEntry" /> objects in this collection to the specified array, starting at the specified index in the target array.          </summary>
      <param name="array">The array of <see cref="T:System.DirectoryServices.DirectoryServicesPermissionEntry" /> objects that receives the elements of this collection.</param>
      <param name="index">The zero-based index in the array where this method starts copying this collection.</param>
    </member>
    <member name="M:System.DirectoryServices.DirectoryServicesPermissionEntryCollection.IndexOf(System.DirectoryServices.DirectoryServicesPermissionEntry)">
      <summary>Returns the index of the first occurrence of the specified <see cref="T:System.DirectoryServices.DirectoryServicesPermissionEntry" /> object in this collection.          </summary>
      <returns>The zero-based index of the first matching object.  Returns -1 if no member of this collection is identical to the <see cref="T:System.DirectoryServices.DirectoryServicesPermissionEntry" /> object.</returns>
      <param name="value">The <see cref="T:System.DirectoryServices.DirectoryServicesPermissionEntry" /> object to search for in this collection.</param>
    </member>
    <member name="M:System.DirectoryServices.DirectoryServicesPermissionEntryCollection.Insert(System.Int32,System.DirectoryServices.DirectoryServicesPermissionEntry)">
      <summary>Inserts the specified <see cref="T:System.DirectoryServices.DirectoryServicesPermissionEntry" /> into this collection at the specified index.          </summary>
      <param name="index">The zero-based index in this collection where the object is inserted.</param>
      <param name="value">The <see cref="T:System.DirectoryServices.DirectoryServicesPermissionEntry" /> object to insert into this collection.</param>
    </member>
    <member name="P:System.DirectoryServices.DirectoryServicesPermissionEntryCollection.Item(System.Int32)">
      <summary>Gets or sets a <see cref="T:System.DirectoryServices.DirectoryServicesPermissionEntry" /> object in this collection.          </summary>
      <returns>The <see cref="T:System.DirectoryServices.DirectoryServicesPermissionEntry" /> object that exists at the specified index.</returns>
      <param name="index">The zero-based index of the <see cref="T:System.DirectoryServices.DirectoryServicesPermissionEntry" /> object to get or set.</param>
    </member>
    <member name="M:System.DirectoryServices.DirectoryServicesPermissionEntryCollection.OnClear">
      <summary>Overrides the <see cref="M:System.Collections.CollectionBase.OnClear" /> method.         </summary>
    </member>
    <member name="M:System.DirectoryServices.DirectoryServicesPermissionEntryCollection.OnInsert(System.Int32,System.Object)">
      <summary>Overrides the <see cref="M:System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)" /> method.          </summary>
      <param name="index">The zero-based index at which to insert <paramref name="value" />.</param>
      <param name="value">The new value of the element at <paramref name="index" />.</param>
    </member>
    <member name="M:System.DirectoryServices.DirectoryServicesPermissionEntryCollection.OnRemove(System.Int32,System.Object)">
      <summary>Overrides the <see cref="M:System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)" /> method.          </summary>
      <param name="index">The zero-based index at which <paramref name="value" /> can be found.</param>
      <param name="value">The value of the element to remove from <paramref name="index" />.</param>
    </member>
    <member name="M:System.DirectoryServices.DirectoryServicesPermissionEntryCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>Overrides the <see cref="M:System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)" /> method.          </summary>
      <param name="index">The zero-based index at which <paramref name="oldValue" /> can be found. </param>
      <param name="oldValue">The value to replace with <paramref name="newValue" />. </param>
      <param name="newValue">The new value of the element at <paramref name="index" />.</param>
    </member>
    <member name="M:System.DirectoryServices.DirectoryServicesPermissionEntryCollection.Remove(System.DirectoryServices.DirectoryServicesPermissionEntry)">
      <summary>Removes the first occurrence of an object in this collection that is identical to the specified <see cref="T:System.DirectoryServices.DirectoryServicesPermissionEntry" /> object.          </summary>
      <param name="value">The specified <see cref="T:System.DirectoryServices.DirectoryServicesPermissionEntry" /> object to remove from this collection.</param>
    </member>
    <member name="T:System.DirectoryServices.DirectorySynchronization">
      <summary>Specifies how to synchronize a directory within a domain.    </summary>
    </member>
    <member name="M:System.DirectoryServices.DirectorySynchronization.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.DirectorySynchronization" /> object.          </summary>
    </member>
    <member name="M:System.DirectoryServices.DirectorySynchronization.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.DirectorySynchronization" /> object with a cookie.          </summary>
      <param name="cookie">A Byte data type object that specifies the directory synchronization search cookie.</param>
    </member>
    <member name="M:System.DirectoryServices.DirectorySynchronization.#ctor(System.DirectoryServices.DirectorySynchronization)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.DirectorySynchronization" /> object with a directory synchronization object.          </summary>
      <param name="sync">A <see cref="T:System.DirectoryServices.DirectorySynchronization" /> data type object.</param>
    </member>
    <member name="M:System.DirectoryServices.DirectorySynchronization.#ctor(System.DirectoryServices.DirectorySynchronizationOptions)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.DirectorySynchronization" /> object with a directory synchronization option.     </summary>
      <param name="option">A <see cref="T:System.DirectoryServices.DirectorySynchronizationOptions" /> data type object that specifies how a directory synchronization search is performed.</param>
    </member>
    <member name="M:System.DirectoryServices.DirectorySynchronization.#ctor(System.DirectoryServices.DirectorySynchronizationOptions,System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.DirectorySynchronization" /> object with a directory synchronization option and cookie.          </summary>
      <param name="option">A <see cref="T:System.DirectoryServices.DirectorySynchronizationOptions" /> data type object that specifies how a directory synchronization search is performed.</param>
      <param name="cookie">A Byte data type object that specifies the directory synchronization search cookie.</param>
    </member>
    <member name="M:System.DirectoryServices.DirectorySynchronization.Copy">
      <summary>Returns a copy of the current <see cref="T:System.DirectoryServices.DirectorySynchronization" /> instance.          </summary>
      <returns>Returns a <see cref="T:System.DirectoryServices.DirectorySynchronization" /> object.</returns>
    </member>
    <member name="M:System.DirectoryServices.DirectorySynchronization.GetDirectorySynchronizationCookie">
      <summary>Gets the directory synchronization search cookie.          </summary>
      <returns>The directory synchronization search cookie object.</returns>
    </member>
    <member name="P:System.DirectoryServices.DirectorySynchronization.Option">
      <summary>Gets or sets the options for the directory synchronization search. </summary>
      <returns>A <see cref="T:System.DirectoryServices.DirectorySynchronizationOptions" /> object.</returns>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The value is not one of the <see cref="T:System.DirectoryServices.DirectorySynchronizationOptions" /> values.</exception>
    </member>
    <member name="M:System.DirectoryServices.DirectorySynchronization.ResetDirectorySynchronizationCookie">
      <summary>Resetss the directory synchronization search cookie.          </summary>
    </member>
    <member name="M:System.DirectoryServices.DirectorySynchronization.ResetDirectorySynchronizationCookie(System.Byte[])">
      <summary>Resets the directory synchronization search cookie.          </summary>
      <param name="cookie">A Byte data type object that contains a directory synchronization search cookie.  This method resets the cookie for this <see cref="T:System.DirectoryServices.DirectorySynchronization" /> object instance to this value.</param>
    </member>
    <member name="T:System.DirectoryServices.DirectorySynchronizationOptions">
      <summary>Contains flags that determine how directories within a domain will be synchronized.  These options can be set for the <see cref="P:System.DirectoryServices.DirectorySynchronization.Option" /> property.</summary>
    </member>
    <member name="F:System.DirectoryServices.DirectorySynchronizationOptions.None">
      <summary>No flags are set.</summary>
    </member>
    <member name="F:System.DirectoryServices.DirectorySynchronizationOptions.ObjectSecurity">
      <summary>If this flag is not present, the caller must have the right to replicate changes. If this flag is present, the caller requires no rights, but is allowed to see only objects and attributes that are accessible to the caller.</summary>
    </member>
    <member name="F:System.DirectoryServices.DirectorySynchronizationOptions.ParentsFirst">
      <summary>Return parents before children, when parents would otherwise appear later in the replication stream.</summary>
    </member>
    <member name="F:System.DirectoryServices.DirectorySynchronizationOptions.PublicDataOnly">
      <summary>Do not return private data in the search results.</summary>
    </member>
    <member name="F:System.DirectoryServices.DirectorySynchronizationOptions.IncrementalValues">
      <summary>If this flag is not present, all of the values, up to a server-specified limit, in a multi-valued attribute are returned when any value changes. If this flag is present, only the changed values are returned.</summary>
    </member>
    <member name="T:System.DirectoryServices.DirectoryVirtualListView">
      <summary>The <see cref="T:System.DirectoryServices.DirectoryVirtualListView" /> class specifies how to conduct a virtual list view search. A virtual list view search enables users to view search results as address-book style virtual list views. It is specifically designed for very large result sets. Search data is retrieved in contiguous subsets of a sorted directory search.          </summary>
    </member>
    <member name="M:System.DirectoryServices.DirectoryVirtualListView.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.DirectoryVirtualListView" /> class.          </summary>
    </member>
    <member name="M:System.DirectoryServices.DirectoryVirtualListView.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.DirectoryVirtualListView" /> class with the after count set.          </summary>
      <param name="afterCount">A <see cref="T:System.Int32" /> data type object that gets or sets a value to indicate the number of entries after the target entry that the client is requesting from the server.</param>
    </member>
    <member name="M:System.DirectoryServices.DirectoryVirtualListView.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.DirectoryVirtualListView" /> class with the before count, after count, and offset set.          </summary>
      <param name="beforeCount">A <see cref="T:System.Int32" /> data type objects that gets or sets a value to indicate the number of entries after the target entry that the client is requesting from the server.</param>
      <param name="afterCount">A <see cref="T:System.Int32" /> data type object that gets or sets a value to indicate the number of entries after the target entry that the client is requesting from the server.</param>
      <param name="offset">An <see cref="T:System.Int32" /> data type that gets or sets a value to indicate the estimated target entry's requested offset within the list.</param>
    </member>
    <member name="M:System.DirectoryServices.DirectoryVirtualListView.#ctor(System.Int32,System.Int32,System.Int32,System.DirectoryServices.DirectoryVirtualListViewContext)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.DirectoryVirtualListView" /> class with the before count, after count, offset and context set.          </summary>
      <param name="beforeCount">A <see cref="T:System.Int32" /> data type objects that gets or sets a value to indicate the number of entries after the target entry that the client is requesting from the server.</param>
      <param name="afterCount">A <see cref="T:System.Int32" /> data type object that gets or sets a value to indicate the number of entries after the target entry that the client is requesting from the server.</param>
      <param name="offset">An <see cref="T:System.Int32" /> data type that gets or sets a value to indicate the estimated target entry's requested offset within the list.</param>
      <param name="context">A <see cref="T:System.DirectoryServices.DirectoryVirtualListViewContext" /> data type objects that gets or sets a value to indicate the virtual list view search response.</param>
    </member>
    <member name="M:System.DirectoryServices.DirectoryVirtualListView.#ctor(System.Int32,System.Int32,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.DirectoryVirtualListView" /> class with the before count, after count, and target set.          </summary>
      <param name="beforeCount">A <see cref="T:System.Int32" /> data type objects that gets or sets a value to indicate the number of entries after the target entry that the client is requesting from the server.</param>
      <param name="afterCount">A <see cref="T:System.Int32" /> data type object that gets or sets a value to indicate the number of entries after the target entry that the client is requesting from the server.</param>
      <param name="target">A <see cref="T:System.String" /> that gets or sets a value to indicate the desired target entry requested by the client.</param>
    </member>
    <member name="M:System.DirectoryServices.DirectoryVirtualListView.#ctor(System.Int32,System.Int32,System.String,System.DirectoryServices.DirectoryVirtualListViewContext)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.DirectoryVirtualListView" /> class with the before count, after count, target and context set.          </summary>
      <param name="beforeCount">A <see cref="T:System.Int32" /> data type objects that gets or sets a value to indicate the number of entries after the target entry that the client is requesting from the server.</param>
      <param name="afterCount">A <see cref="T:System.Int32" /> data type object that gets or sets a value to indicate the number of entries after the target entry that the client is requesting from the server.</param>
      <param name="target">A <see cref="T:System.String" /> that gets or sets a value to indicate the desired target entry requested by the client.</param>
      <param name="context">A <see cref="T:System.DirectoryServices.DirectoryVirtualListViewContext" /> data type objects that gets or sets a value to indicate the virtual list view search response.</param>
    </member>
    <member name="P:System.DirectoryServices.DirectoryVirtualListView.AfterCount">
      <summary>Gets or sets a value to indicate the number of entries after the target entry that the client is requesting from the server.          </summary>
      <returns>An integer value that represents the number of entries after the target entry that the client is requesting from the server.</returns>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.DirectoryServices.DirectoryVirtualListView.AfterCount" /> property is set to a value less than zero.</exception>
    </member>
    <member name="P:System.DirectoryServices.DirectoryVirtualListView.ApproximateTotal">
      <summary>Gets or sets a value to indicate the estimated total count of items in the list.          </summary>
      <returns>An integer value that represents the estimated total count of items in the list.</returns>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.DirectoryServices.DirectoryVirtualListView.ApproximateTotal" /> property is set to a value less than zero.</exception>
    </member>
    <member name="P:System.DirectoryServices.DirectoryVirtualListView.BeforeCount">
      <summary>Gets or sets a value to indicate the number of entries before the target entry that the client is requesting from the server.          </summary>
      <returns>An integer value that represents the number of entries before the target entry that the client is requesting from the server.</returns>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.DirectoryServices.DirectoryVirtualListView.BeforeCount" /> property is set to a value less than 0.</exception>
    </member>
    <member name="P:System.DirectoryServices.DirectoryVirtualListView.DirectoryVirtualListViewContext">
      <summary>Gets or sets a value to indicate the virtual list view search response.          </summary>
      <returns>A <see cref="T:System.DirectoryServices.DirectoryVirtualListViewContext" /> that indicates the virtual list view search response.</returns>
    </member>
    <member name="P:System.DirectoryServices.DirectoryVirtualListView.Offset">
      <summary>Gets or sets a value to indicate the target entry's offset within the list.  </summary>
      <returns>An integer value that represents the target entry's estimated offset within the list.</returns>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.DirectoryServices.DirectoryVirtualListView.Offset" /> property is set to a value less than 0.</exception>
    </member>
    <member name="P:System.DirectoryServices.DirectoryVirtualListView.Target">
      <summary>The <see cref="P:System.DirectoryServices.DirectoryVirtualListView.Target" /> property gets or sets a value to indicate the target entry that was requested by the client.          </summary>
      <returns>A string that contains the target entry that was requested by the client.</returns>
    </member>
    <member name="P:System.DirectoryServices.DirectoryVirtualListView.TargetPercentage">
      <summary>The <see cref="P:System.DirectoryServices.DirectoryVirtualListView.TargetPercentage" /> property gets or sets a value to indicate the estimated target entry's requested offset within the list, as a percentage of the total number of items in the list.  </summary>
      <returns>An integer value that represents the estimated percentage offset within the list of the target entry.</returns>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.DirectoryServices.DirectoryVirtualListView.TargetPercentage" /> property is set to a value greater than 100 or less than 0.</exception>
    </member>
    <member name="T:System.DirectoryServices.DirectoryVirtualListViewContext">
      <summary>Specifies how to construct directory virtual list view response.          </summary>
    </member>
    <member name="M:System.DirectoryServices.DirectoryVirtualListViewContext.#ctor">
      <summary>Initializes a new instance of the <see cref="M:System.DirectoryServices.DirectoryVirtualListViewContext.#ctor" /> class.          </summary>
    </member>
    <member name="M:System.DirectoryServices.DirectoryVirtualListViewContext.Copy">
      <summary>Returns a copy of the current <see cref="T:System.DirectoryServices.DirectoryVirtualListViewContext" /> instance.          </summary>
      <returns>Returns a <see cref="T:System.DirectoryServices.DirectoryVirtualListViewContext" /> object.</returns>
    </member>
    <member name="T:System.DirectoryServices.DSDescriptionAttribute">
      <summary>Supports the .NET Framework infrastructure and is not intended to be used directly from code.          </summary>
    </member>
    <member name="M:System.DirectoryServices.DSDescriptionAttribute.#ctor(System.String)">
      <summary>Supports the .NET Framework infrastructure and is not intended to be used directly from code.</summary>
      <param name="description">The description text.</param>
    </member>
    <member name="P:System.DirectoryServices.DSDescriptionAttribute.Description">
      <summary>Supports the .NET Framework infrastructure and is not intended to be used directly from code.          </summary>
      <returns>A string that contains a description of a property or other element.  The <see cref="P:System.DirectoryServices.DSDescriptionAttribute.Description" /> property contains a description that is meaningful to the user.</returns>
    </member>
    <member name="T:System.DirectoryServices.ExtendedDN">
      <summary>The <see cref="T:System.DirectoryServices.ExtendedDN" /> enumeration specifies the format in which to return the extended distinguished name. This enumeration is used with the <see cref="P:System.DirectoryServices.DirectorySearcher.ExtendedDN" /> property.</summary>
    </member>
    <member name="F:System.DirectoryServices.ExtendedDN.None">
      <summary>Indicates that the distinguished name uses the distinguished name format.</summary>
    </member>
    <member name="F:System.DirectoryServices.ExtendedDN.HexString">
      <summary>Indicates that the distinguished name uses the hexadecimal format.</summary>
    </member>
    <member name="F:System.DirectoryServices.ExtendedDN.Standard">
      <summary>Indicates that the distinguished name uses the standard string format.</summary>
    </member>
    <member name="T:System.DirectoryServices.ExtendedRightAccessRule">
      <summary>Represents a specific type of access rule that is used to allow or deny an Active Directory object an extended right. Extended rights are special operations that are not covered by the standard set of access rights. An example of an extended right is Send-As, which gives a user the right to send e-mail for another user. For a list of possible extended rights, see the topic Extended Rights in the MSDN Library at http://msdn.microsoft.com/library.  For more information about extended rights, see the topic Control Access Rights, also in the MSDN Library. </summary>
    </member>
    <member name="M:System.DirectoryServices.ExtendedRightAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.AccessControlType)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.ExtendedRightAccessRule" /> class with the specified identity reference and access control type.</summary>
      <param name="identity">An <see cref="T:System.Security.Principal.IdentityReference" /> object that  identifies the trustee of the access rule.</param>
      <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> enumeration values that specifies the access rule type.</param>
    </member>
    <member name="M:System.DirectoryServices.ExtendedRightAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.AccessControlType,System.DirectoryServices.ActiveDirectorySecurityInheritance)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.ExtendedRightAccessRule" /> class with the specified identity reference, access control type, and Active Directory security inheritance.</summary>
      <param name="identity">An <see cref="T:System.Security.Principal.IdentityReference" /> object that identifies the trustee of the access rule.</param>
      <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> enumeration values that specifies the access rule type.</param>
      <param name="inheritanceType">One of the <see cref="T:System.DirectoryServices.ActiveDirectorySecurityInheritance" /> enumeration values that specifies the inheritance type of the access rule.</param>
    </member>
    <member name="M:System.DirectoryServices.ExtendedRightAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.AccessControlType,System.DirectoryServices.ActiveDirectorySecurityInheritance,System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.ExtendedRightAccessRule" /> class with the specified identity reference, access control type, Active Directory security inheritance, and inherited object type.</summary>
      <param name="identity">An <see cref="T:System.Security.Principal.IdentityReference" /> object that identifies the trustee of the access rule.</param>
      <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> enumeration values that specifies the access rule type.</param>
      <param name="inheritanceType">One of the <see cref="T:System.DirectoryServices.ActiveDirectorySecurityInheritance" /> enumeration values that specifies the inheritance type of the access rule.</param>
      <param name="inheritedObjectType">The schema GUID of the child object type that can inherit this access rule.</param>
    </member>
    <member name="M:System.DirectoryServices.ExtendedRightAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.AccessControlType,System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.ExtendedRightAccessRule" /> class with the specified identity reference, access control type, and extended right identifier.</summary>
      <param name="identity">An <see cref="T:System.Security.Principal.IdentityReference" /> object that identifies the trustee of the access rule.</param>
      <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> enumeration values that specifies the access rule type.</param>
      <param name="extendedRightType">The Rights-Guid of the extended right that this access rule applies to. For more information, see the topic Rights-Guid in the MSDN Library at http://msdn.microsoft.com/library.  In the Active Directory schema documentation, this information can be found in the Rights-GUID row on the reference page for each extended right. If this parameter is <see cref="F:System.Guid.Empty" />, the access rule applies to all extended rights. For a list of extended rights, see the topic Extended Rights in the MSDN Library.</param>
    </member>
    <member name="M:System.DirectoryServices.ExtendedRightAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.AccessControlType,System.Guid,System.DirectoryServices.ActiveDirectorySecurityInheritance)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.ExtendedRightAccessRule" /> class with the specified identity reference, access control type, extended right identifier, and Active Directory security inheritance.</summary>
      <param name="identity">An <see cref="T:System.Security.Principal.IdentityReference" /> object that identifies the trustee of the access rule.</param>
      <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> enumeration values that specifies the access rule type.</param>
      <param name="extendedRightType">The Rights-Guid of the extended right that this access rule applies to. For more information, see the topic Rights-Guid in the MSDN Library at http://msdn.microsoft.com/library.  In the Active Directory schema documentation, this information can be found in the Rights-GUID row on the reference page for each extended right. If this parameter is <see cref="F:System.Guid.Empty" />, the access rule applies to all extended rights. For a list of extended rights, see the topic Extended Rights in the MSDN Library.</param>
      <param name="inheritanceType">One of the <see cref="T:System.DirectoryServices.ActiveDirectorySecurityInheritance" /> enumeration values that specifies the inheritance type of the access rule.</param>
    </member>
    <member name="M:System.DirectoryServices.ExtendedRightAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.AccessControlType,System.Guid,System.DirectoryServices.ActiveDirectorySecurityInheritance,System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.ExtendedRightAccessRule" /> class with the specified identity reference, access control type, extended right identifier, Active Directory security inheritance, and inherited object type.</summary>
      <param name="identity">An <see cref="T:System.Security.Principal.IdentityReference" /> object that identifies the trustee of the access rule.</param>
      <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> enumeration values that specifies the access rule type.</param>
      <param name="extendedRightType">The Rights-Guid attribute of the extended right that this access rule applies to. For more information, see the topic Rights-Guid in the MSDN Library at http://msdn.microsoft.com/library. In the Active Directory schema documentation, this information can be found in the Rights-GUID row on the reference page for each extended right. If this parameter is <see cref="F:System.Guid.Empty" />, the access rule applies to all extended rights. For a list of extended rights, see the topic Extended Rights in the MSDN Library.</param>
      <param name="inheritanceType">One of the <see cref="T:System.DirectoryServices.ActiveDirectorySecurityInheritance" /> enumeration values that specifies the inheritance type of the access rule.</param>
      <param name="inheritedObjectType">The schema GUID of the child object type that can inherit this access rule.</param>
    </member>
    <member name="T:System.DirectoryServices.ListChildrenAccessRule">
      <summary>The <see cref="T:System.DirectoryServices.ListChildrenAccessRule" /> class represents a specific type of access rule that is used to allow or deny an Active Directory Domain Services object the right to list child objects.</summary>
    </member>
    <member name="M:System.DirectoryServices.ListChildrenAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.AccessControlType)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.ListChildrenAccessRule" /> class with the specified identity reference and access control type.</summary>
      <param name="identity">An <see cref="T:System.Security.Principal.IdentityReference" /> object that identifies the trustee of the access rule.</param>
      <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> enumeration values that specifies the access rule type.</param>
    </member>
    <member name="M:System.DirectoryServices.ListChildrenAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.AccessControlType,System.DirectoryServices.ActiveDirectorySecurityInheritance)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.ListChildrenAccessRule" /> class with the specified identity reference, access control type, and Active Directory Domain Services security inheritance information.</summary>
      <param name="identity">An <see cref="T:System.Security.Principal.IdentityReference" /> object that identifies the trustee of the access rule.</param>
      <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> enumeration values that specifies the access rule type.</param>
      <param name="inheritanceType">One of the <see cref="T:System.DirectoryServices.ActiveDirectorySecurityInheritance" /> enumeration values that specifies the inheritance type of the access rule.</param>
    </member>
    <member name="M:System.DirectoryServices.ListChildrenAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.AccessControlType,System.DirectoryServices.ActiveDirectorySecurityInheritance,System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.ListChildrenAccessRule" /> class with the specified identity reference, access control type, Active Directory Domain Services security inheritance information, and inherited object type.</summary>
      <param name="identity">An <see cref="T:System.Security.Principal.IdentityReference" /> object that identifies the trustee of the access rule.</param>
      <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> enumeration values that specifies the access rule type.</param>
      <param name="inheritanceType">One of the <see cref="T:System.DirectoryServices.ActiveDirectorySecurityInheritance" /> enumeration values that specifies the inheritance type of the access rule.</param>
      <param name="inheritedObjectType">The schema GUID of the child object type that can inherit this access rule.</param>
    </member>
    <member name="T:System.DirectoryServices.PasswordEncodingMethod">
      <summary>Specifies whether SSL is used when you set or change a password. This enumeration is used with the <see cref="P:System.DirectoryServices.DirectoryEntryConfiguration.PasswordEncoding" /> property.          </summary>
    </member>
    <member name="F:System.DirectoryServices.PasswordEncodingMethod.PasswordEncodingSsl">
      <summary>Passwords are encoded using SSL.</summary>
    </member>
    <member name="F:System.DirectoryServices.PasswordEncodingMethod.PasswordEncodingClear">
      <summary>Passwords are not encoded and are transmitted in plain text.</summary>
    </member>
    <member name="T:System.DirectoryServices.PropertyAccess">
      <summary>The <see cref="T:System.DirectoryServices.PropertyAccess" /> enumeration is used with the <see cref="T:System.DirectoryServices.PropertyAccessRule" /> and <see cref="T:System.DirectoryServices.PropertySetAccessRule" /> classes to indicate the type of access that is applied to an Active Directory property or property set. </summary>
    </member>
    <member name="F:System.DirectoryServices.PropertyAccess.Read">
      <summary>Indicates permission to read properties.</summary>
    </member>
    <member name="F:System.DirectoryServices.PropertyAccess.Write">
      <summary>Indicates permission to write properties.</summary>
    </member>
    <member name="T:System.DirectoryServices.PropertyAccessRule">
      <summary>The <see cref="T:System.DirectoryServices.PropertyAccessRule" /> class represents a specific type of access rule that is used to allow or deny access to an Active Directory Domain Services property.</summary>
    </member>
    <member name="M:System.DirectoryServices.PropertyAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.AccessControlType,System.DirectoryServices.PropertyAccess)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.PropertyAccessRule" /> class with the specified identity reference, access control type, and property access.</summary>
      <param name="identity">An <see cref="T:System.Security.Principal.IdentityReference" /> object that identifies the trustee of the access rule.</param>
      <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> enumeration values that specifies the access rule type.</param>
      <param name="access">One of the <see cref="T:System.DirectoryServices.PropertyAccess" /> enumeration values that specifies the property access type.</param>
    </member>
    <member name="M:System.DirectoryServices.PropertyAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.AccessControlType,System.DirectoryServices.PropertyAccess,System.DirectoryServices.ActiveDirectorySecurityInheritance)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.PropertyAccessRule" /> class with the specified identity reference, access control type, property access, and Active Directory Domain Services security inheritance.</summary>
      <param name="identity">An <see cref="T:System.Security.Principal.IdentityReference" /> object that identifies the trustee of the access rule.</param>
      <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> enumeration values that specifies the access rule type.</param>
      <param name="access">One of the <see cref="T:System.DirectoryServices.PropertyAccess" /> enumeration values that specifies the property access type.</param>
      <param name="inheritanceType">One of the <see cref="T:System.DirectoryServices.ActiveDirectorySecurityInheritance" /> enumeration values that specifies the inheritance type of the access rule.</param>
    </member>
    <member name="M:System.DirectoryServices.PropertyAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.AccessControlType,System.DirectoryServices.PropertyAccess,System.DirectoryServices.ActiveDirectorySecurityInheritance,System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.PropertyAccessRule" /> class with the specified identity reference, access control type, property access, Active Directory Domain Services security inheritance, and inherited object type.</summary>
      <param name="identity">An <see cref="T:System.Security.Principal.IdentityReference" /> object that identifies the trustee of the access rule.</param>
      <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> enumeration values that specifies the access rule type.</param>
      <param name="access">One of the <see cref="T:System.DirectoryServices.PropertyAccess" /> enumeration values that specifies the property access type.</param>
      <param name="inheritanceType">One of the <see cref="T:System.DirectoryServices.ActiveDirectorySecurityInheritance" /> enumeration values that specifies the inheritance type of the access rule.</param>
      <param name="inheritedObjectType">The schema GUID of the child object type that can inherit this access rule.</param>
    </member>
    <member name="M:System.DirectoryServices.PropertyAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.AccessControlType,System.DirectoryServices.PropertyAccess,System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.PropertyAccessRule" /> class with the specified identity reference, access control type, property access, and property type.</summary>
      <param name="identity">An <see cref="T:System.Security.Principal.IdentityReference" /> object that identifies the trustee of the access rule.</param>
      <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> enumeration values that specifies the access rule type.</param>
      <param name="access">One of the <see cref="T:System.DirectoryServices.PropertyAccess" /> enumeration values that specifies the property access type.</param>
      <param name="propertyType">The schema GUID of the property that this access rule applies to. If this is <see cref="F:System.Guid.Empty" />, then the access rule applies to all property types.</param>
    </member>
    <member name="M:System.DirectoryServices.PropertyAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.AccessControlType,System.DirectoryServices.PropertyAccess,System.Guid,System.DirectoryServices.ActiveDirectorySecurityInheritance)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.PropertyAccessRule" /> class with the specified identity reference, access control type, property access, property type, and Active Directory Domain Services security inheritance.</summary>
      <param name="identity">An <see cref="T:System.Security.Principal.IdentityReference" /> object that identifies the trustee of the access rule.</param>
      <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> enumeration values that specifies the access rule type.</param>
      <param name="access">One of the <see cref="T:System.DirectoryServices.PropertyAccess" /> enumeration values that specifies the property access type.</param>
      <param name="propertyType">The schema GUID of the property that this access rule applies to. If this is <see cref="F:System.Guid.Empty" />, then the access rule applies to all property types.</param>
      <param name="inheritanceType">One of the <see cref="T:System.DirectoryServices.ActiveDirectorySecurityInheritance" /> enumeration values that specifies the inheritance type of the access rule.</param>
    </member>
    <member name="M:System.DirectoryServices.PropertyAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.AccessControlType,System.DirectoryServices.PropertyAccess,System.Guid,System.DirectoryServices.ActiveDirectorySecurityInheritance,System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.PropertyAccessRule" /> class with the specified identity reference, access control type, property access, property type, Active Directory Domain Services security inheritance, and inherited object type.</summary>
      <param name="identity">An <see cref="T:System.Security.Principal.IdentityReference" /> object which identifies the trustee of the access rule.</param>
      <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> enumeration values which specifies the access rule type.</param>
      <param name="access">One of the <see cref="T:System.DirectoryServices.PropertyAccess" /> enumeration values that specifies the property access type.</param>
      <param name="propertyType">The schema GUID of the property that this access rule applies to. If this is <see cref="F:System.Guid.Empty" />, then the access rule applies to all property types.</param>
      <param name="inheritanceType">One of the <see cref="T:System.DirectoryServices.ActiveDirectorySecurityInheritance" /> enumeration values that specifies the inheritance type of the access rule.</param>
      <param name="inheritedObjectType">The schema GUID of the child object type that can inherit this access rule.</param>
    </member>
    <member name="T:System.DirectoryServices.PropertyCollection">
      <summary>The <see cref="T:System.DirectoryServices.PropertyCollection" /> class contains the properties of a <see cref="T:System.DirectoryServices.DirectoryEntry" />.</summary>
    </member>
    <member name="M:System.DirectoryServices.PropertyCollection.Contains(System.String)">
      <summary>Determines whether the specified property is in this collection.</summary>
      <returns>The return value is true if the specified property belongs to this collection; otherwise, false.</returns>
      <param name="propertyName">The name of the property to find.</param>
    </member>
    <member name="M:System.DirectoryServices.PropertyCollection.CopyTo(System.DirectoryServices.PropertyValueCollection[],System.Int32)">
      <summary>Copies the all objects in this collection to an array, starting at the specified index in the target array.</summary>
      <param name="array">The array of <see cref="T:System.DirectoryServices.PropertyValueCollection" /> objects that receives the elements of this collection.</param>
      <param name="index">The zero-based index in <paramref name="array" /> where this method starts copying this collection.</param>
      <exception cref="T:System.Runtime.InteropServices.COMException">An error occurred during the call to the underlying interface.</exception>
    </member>
    <member name="P:System.DirectoryServices.PropertyCollection.Count">
      <summary>Gets the number of properties in this collection.</summary>
      <returns>The number of properties in this collection.</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException">An error occurred during the call to the underlying interface.</exception>
      <exception cref="T:System.NotSupportedException">The directory cannot report the number of properties.</exception>
    </member>
    <member name="M:System.DirectoryServices.PropertyCollection.GetEnumerator">
      <summary>Returns an enumerator that you can use to iterate through this collection.</summary>
      <returns>An <see cref="T:System.Collections.IDictionaryEnumerator" /> that you can use to iterate through this collection.</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException">An error occurred during the call to the underlying interface.</exception>
    </member>
    <member name="P:System.DirectoryServices.PropertyCollection.Item(System.String)">
      <summary>Gets the specified property.</summary>
      <returns>The value of the specified property.</returns>
      <param name="propertyName">The name of the property to retrieve.</param>
    </member>
    <member name="P:System.DirectoryServices.PropertyCollection.PropertyNames">
      <summary>Gets the names of the properties in this collection.</summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> object that contains the names of the properties in this collection.</returns>
    </member>
    <member name="M:System.DirectoryServices.PropertyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing. </param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or- The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />. </exception>
      <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />. </exception>
    </member>
    <member name="P:System.DirectoryServices.PropertyCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</summary>
      <returns>true if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="P:System.DirectoryServices.PropertyCollection.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary" /> object.</summary>
      <param name="key">The <see cref="T:System.Object" /> to use as the key of the element to add. </param>
      <param name="value">The <see cref="T:System.Object" /> to use as the value of the element to add. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null. </exception>
      <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.IDictionary" /> object. </exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary" /> is read-only.-or- The <see cref="T:System.Collections.IDictionary" /> has a fixed size. </exception>
    </member>
    <member name="M:System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Clear">
      <summary>Removes all elements from the <see cref="T:System.Collections.IDictionary" /> object.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary" /> object is read-only. </exception>
    </member>
    <member name="M:System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Determines whether the <see cref="T:System.Collections.IDictionary" /> object contains an element with the specified key.</summary>
      <returns>true if the <see cref="T:System.Collections.IDictionary" /> contains an element with the key; otherwise, false.</returns>
      <param name="value"></param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null. </exception>
    </member>
    <member name="P:System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsFixedSize">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IDictionary" /> object has a fixed size.</summary>
      <returns>true if the <see cref="T:System.Collections.IDictionary" /> object has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IDictionary" /> object is read-only.</summary>
      <returns>true if the <see cref="T:System.Collections.IDictionary" /> object is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Item(System.Object)">
      <summary>Gets or sets the element with the specified key.</summary>
      <returns>The element with the specified key.</returns>
      <param name="key">The key of the element to get or set. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null. </exception>
      <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.IDictionary" /> object is read-only.-or- The property is set, <paramref name="key" /> does not exist in the collection, and the <see cref="T:System.Collections.IDictionary" /> has a fixed size. </exception>
    </member>
    <member name="P:System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Keys">
      <summary>Gets an <see cref="T:System.Collections.ICollection" /> object containing the keys of the <see cref="T:System.Collections.IDictionary" /> object.</summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> object containing the keys of the <see cref="T:System.Collections.IDictionary" /> object.</returns>
    </member>
    <member name="M:System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary" /> object.</summary>
      <param name="key">The key of the element to remove. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null. </exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary" /> object is read-only.-or- The <see cref="T:System.Collections.IDictionary" /> has a fixed size. </exception>
    </member>
    <member name="M:System.DirectoryServices.PropertyCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an <see cref="T:System.Collections.IEnumerable" /> object.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerable" />.object.</returns>
    </member>
    <member name="P:System.DirectoryServices.PropertyCollection.Values">
      <summary>Gets the values of the properties in this collection.</summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> that contains the values of the properties in this collection.</returns>
    </member>
    <member name="T:System.DirectoryServices.PropertySetAccessRule">
      <summary>The <see cref="T:System.DirectoryServices.PropertySetAccessRule" /> class represents a specific type of access rule that is used to allow or deny access to an Active Directory Domain Services property set. For a list of property sets that are defined for Active Directory Domain Services, see the topic Property Sets in the MSDN Library at http://msdn.microsoft.com/library.</summary>
    </member>
    <member name="M:System.DirectoryServices.PropertySetAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.AccessControlType,System.DirectoryServices.PropertyAccess,System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.PropertySetAccessRule" /> class with the specified identity reference, access control type, property access type, and property set identifier.</summary>
      <param name="identity">An <see cref="T:System.Security.Principal.IdentityReference" /> object that identifies the trustee of the access rule.</param>
      <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> enumeration values that specifies the access rule type.</param>
      <param name="access">One of the <see cref="T:System.DirectoryServices.PropertyAccess" /> enumeration values that specifies the property access type.</param>
      <param name="propertySetType">The Rights-Guid of the property set that this access rule applies to. In the Active Directory Domain Services schema documentation, this information can be found in the Rights-GUID row on the reference page for each property set. For more information, see the topic Rights-GUID in the MSDN Library at http://msdn.microsoft.com/library.For a list of property sets, see the topic Property Sets in the MSDN Library.</param>
    </member>
    <member name="M:System.DirectoryServices.PropertySetAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.AccessControlType,System.DirectoryServices.PropertyAccess,System.Guid,System.DirectoryServices.ActiveDirectorySecurityInheritance)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.PropertySetAccessRule" /> class with the specified identity reference, access control type, property access type, property set identifier, and Active Directory Domain Services security inheritance information.</summary>
      <param name="identity">An <see cref="T:System.Security.Principal.IdentityReference" /> object that identifies the trustee of the access rule.</param>
      <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> enumeration values that specifies the access rule type.</param>
      <param name="access">One of the <see cref="T:System.DirectoryServices.PropertyAccess" /> enumeration values that specifies the property access type.</param>
      <param name="propertySetType">The Rights-Guid of the property set that this access rule applies to. In the Active Directory Domain Services schema documentation, this information can be found in the Rights-GUID row on the reference page for each property set. For more information, see the topic Rights-GUID in the MSDN Library at http://msdn.microsoft.com/library.For a list of property sets, see the topic Property Sets in the MSDN Library.</param>
      <param name="inheritanceType">One of the <see cref="T:System.DirectoryServices.ActiveDirectorySecurityInheritance" /> enumeration values that specifies the inheritance type of the access rule.</param>
    </member>
    <member name="M:System.DirectoryServices.PropertySetAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.AccessControlType,System.DirectoryServices.PropertyAccess,System.Guid,System.DirectoryServices.ActiveDirectorySecurityInheritance,System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.PropertySetAccessRule" /> class with the specified identity reference, access control type, property access type, property set identifier, inheritance type, and inherited object type.</summary>
      <param name="identity">An <see cref="T:System.Security.Principal.IdentityReference" /> object that identifies the trustee of the access rule.</param>
      <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> enumeration values that specifies the access rule type.</param>
      <param name="access">One of the <see cref="T:System.DirectoryServices.PropertyAccess" /> enumeration values that specifies the property access type.</param>
      <param name="propertySetType">The Rights-Guid of the property set that this access rule applies to. In the Active Directory Domain Services schema documentation, this information can be found in the Rights-GUID row on the reference page for each property set. For more information, see the topic Rights-GUID in the MSDN Library at http://msdn.microsoft.com/library.For a list of property sets, see the topic Property Sets in the MSDN Library.</param>
      <param name="inheritanceType">One of the <see cref="T:System.DirectoryServices.ActiveDirectorySecurityInheritance" /> enumeration values that specifies the inheritance type of the access rule.</param>
      <param name="inheritedObjectType">The schema GUID of the child object type that can inherit this access rule.</param>
    </member>
    <member name="T:System.DirectoryServices.PropertyValueCollection">
      <summary>Contains the values of a <see cref="T:System.DirectoryServices.DirectoryEntry" /> property.</summary>
    </member>
    <member name="M:System.DirectoryServices.PropertyValueCollection.Add(System.Object)">
      <summary>Appends the specified <see cref="T:System.DirectoryServices.PropertyValueCollection" /> object to this collection.</summary>
      <returns>The zero-based index of the <see cref="T:System.DirectoryServices.PropertyValueCollection" /> object that is appended to this collection.</returns>
      <param name="value">The <see cref="T:System.DirectoryServices.PropertyValueCollection" />  object to append to this collection.</param>
      <exception cref="T:System.Runtime.InteropServices.COMException">An error occurred during the call to the underlying interface.</exception>
      <exception cref="T:System.ArgumentNullException">The property value is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.DirectoryServices.PropertyValueCollection.AddRange(System.DirectoryServices.PropertyValueCollection)">
      <summary>Appends the contents of the <see cref="T:System.DirectoryServices.PropertyValueCollection" /> object to this collection.</summary>
      <param name="value">A <see cref="T:System.DirectoryServices.PropertyValueCollection" /> object that contains the objects to append to this collection.</param>
      <exception cref="T:System.ArgumentNullException">The property value is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.DirectoryServices.PropertyValueCollection.AddRange(System.Object[])">
      <summary>Appends the contents of the specified <see cref="T:System.DirectoryServices.PropertyValueCollection" /> object to this collection.</summary>
      <param name="value">The <see cref="T:System.DirectoryServices.PropertyValueCollection" /> array that contains the objects to append to this collection.</param>
      <exception cref="T:System.ArgumentNullException">The property value is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.DirectoryServices.PropertyValueCollection.Contains(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.DirectoryServices.PropertyValueCollection" /> object is in this collection.</summary>
      <returns>true if the specified property belongs to this collection; otherwise, false.</returns>
      <param name="value">The <see cref="T:System.DirectoryServices.PropertyValueCollection" /> object to search for in this collection.</param>
    </member>
    <member name="M:System.DirectoryServices.PropertyValueCollection.CopyTo(System.Object[],System.Int32)">
      <summary>Copies all <see cref="T:System.DirectoryServices.PropertyValueCollection" /> objects in this collection to the specified array, starting at the specified index in the target array.</summary>
      <param name="array">The array of <see cref="T:System.DirectoryServices.PropertyValueCollection" /> objects that receives the elements of this collection.</param>
      <param name="index">The zero-based index in <paramref name="array" /> where this method starts copying this collection.</param>
    </member>
    <member name="M:System.DirectoryServices.PropertyValueCollection.IndexOf(System.Object)">
      <summary>Retrieves the index of a specified property value in this collection.</summary>
      <returns>The zero-based index of the specified property value. If the object is not found, the return value is -1.</returns>
      <param name="value">The property value to find.</param>
    </member>
    <member name="M:System.DirectoryServices.PropertyValueCollection.Insert(System.Int32,System.Object)">
      <summary>Inserts a property value into this collection at a specified index.</summary>
      <param name="index">The zero-based index at which to insert the property value.</param>
      <param name="value">The property value to insert.</param>
      <exception cref="T:System.ArgumentNullException">The property value is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">An error occurred during the call to the underlying interface.</exception>
      <exception cref="T:System.IndexOutOfRangeException">The index is less than 0 (zero) or greater than the size of the collection.</exception>
    </member>
    <member name="P:System.DirectoryServices.PropertyValueCollection.Item(System.Int32)">
      <summary>Gets or sets the property value that is located at a specified index of this collection.</summary>
      <returns>The property value at the specified index.</returns>
      <param name="index">The zero-based index of the property value.</param>
      <exception cref="T:System.ArgumentNullException">The property value is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.IndexOutOfRangeException">The index is less than zero (0) or greater than the size of the collection.</exception>
    </member>
    <member name="M:System.DirectoryServices.PropertyValueCollection.OnClearComplete">
      <summary>Overrides the <see cref="M:System.Collections.CollectionBase.OnClearComplete" /> method.</summary>
    </member>
    <member name="M:System.DirectoryServices.PropertyValueCollection.OnInsertComplete(System.Int32,System.Object)">
      <summary>Overrides the <see cref="M:System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)" /> method.</summary>
      <param name="index">The zero-based index at which to insert <paramref name="value" />.</param>
      <param name="value">The new value of the element at <paramref name="index" />.</param>
    </member>
    <member name="M:System.DirectoryServices.PropertyValueCollection.OnRemoveComplete(System.Int32,System.Object)">
      <summary>Overrides the <see cref="M:System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)" /> method.</summary>
      <param name="index">The zero-based index at which value can be found.</param>
      <param name="value">The value of the element to remove from <paramref name="index" />.</param>
    </member>
    <member name="M:System.DirectoryServices.PropertyValueCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
      <summary>Overrides the <see cref="M:System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)" /> method.</summary>
      <param name="index">The zero-based index at which <paramref name="oldValue" /> can be found.</param>
      <param name="oldValue">The value to replace with <paramref name="newValue" />. </param>
      <param name="newValue">The new value of the element at <paramref name="index" />. </param>
    </member>
    <member name="P:System.DirectoryServices.PropertyValueCollection.PropertyName">
      <summary>Gets the property name for the attributes in the value collection.</summary>
      <returns>A string that contains the name of the property with the values that are included in this <see cref="T:System.DirectoryServices.PropertyValueCollection" /> object.</returns>
    </member>
    <member name="M:System.DirectoryServices.PropertyValueCollection.Remove(System.Object)">
      <summary>Removes a specified property value from this collection.</summary>
      <param name="value"></param>
      <exception cref="T:System.ArgumentNullException">The property value is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">An error occurred during the call to the underlying interface.</exception>
    </member>
    <member name="P:System.DirectoryServices.PropertyValueCollection.Value">
      <summary>Gets or sets the values of the collection.</summary>
      <returns>If the collection is empty, the property value is a null reference (Nothing in Visual Basic). If the collection contains one value, the property value is that value. If the collection contains multiple values, the property value equals a copy of an array of those values.If setting this property, the value or values are added to the <see cref="T:System.DirectoryServices.PropertyValueCollection" />. Setting this property to a null reference (Nothing) clears the collection.</returns>
    </member>
    <member name="T:System.DirectoryServices.ReferralChasingOption">
      <summary>The <see cref="T:System.DirectoryServices.ReferralChasingOption" /> enumeration specifies if and how referral chasing is pursued.          </summary>
    </member>
    <member name="F:System.DirectoryServices.ReferralChasingOption.None">
      <summary>Never chase the referred-to server. Setting this option prevents a client from contacting other servers in a referral process.</summary>
    </member>
    <member name="F:System.DirectoryServices.ReferralChasingOption.Subordinate">
      <summary>Chase only subordinate referrals that are a subordinate naming context in a directory tree. The ADSI LDAP provider always turns off this flag for paged searches.</summary>
    </member>
    <member name="F:System.DirectoryServices.ReferralChasingOption.External">
      <summary>Chase external referrals.  If no referral chasing option is specified for a directory search, the type of referral chasing performed is  <see cref="F:System.DirectoryServices.ReferralChasingOption.External" />.</summary>
    </member>
    <member name="F:System.DirectoryServices.ReferralChasingOption.All">
      <summary>Chase referrals of either the subordinate or external type.</summary>
    </member>
    <member name="T:System.DirectoryServices.ResultPropertyCollection">
      <summary>Contains the properties of a <see cref="T:System.DirectoryServices.SearchResult" /> instance.          </summary>
    </member>
    <member name="M:System.DirectoryServices.ResultPropertyCollection.Contains(System.String)">
      <summary>Determines whether the property that has the specified name belongs to this collection.          </summary>
      <returns>The return value is true if the specified property belongs to this collection; otherwise, false.</returns>
      <param name="propertyName">The name of the property to find.</param>
    </member>
    <member name="M:System.DirectoryServices.ResultPropertyCollection.CopyTo(System.DirectoryServices.ResultPropertyValueCollection[],System.Int32)">
      <summary>Copies the properties from this collection to an array, starting at a particular index of the array.          </summary>
      <param name="array">An array of type <see cref="T:System.DirectoryServices.ResultPropertyValueCollection" /> that receives this collection's properties.</param>
      <param name="index">The zero-based array index at which to begin copying the properties.</param>
    </member>
    <member name="P:System.DirectoryServices.ResultPropertyCollection.Item(System.String)">
      <summary>Gets the property from this collection that has the specified name.          </summary>
      <returns>A <see cref="T:System.DirectoryServices.ResultPropertyValueCollection" /> that has the specified name.</returns>
      <param name="name">The name of the property to retrieve.</param>
    </member>
    <member name="P:System.DirectoryServices.ResultPropertyCollection.PropertyNames">
      <summary>Gets the names of the properties in this collection.          </summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> that contains the names of the properties in this collection.</returns>
    </member>
    <member name="P:System.DirectoryServices.ResultPropertyCollection.Values">
      <summary>Gets the values of the properties in this collection.          </summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> that contains the values of the properties in this collection.</returns>
    </member>
    <member name="T:System.DirectoryServices.ResultPropertyValueCollection">
      <summary>Contains the values of a <see cref="T:System.DirectoryServices.SearchResult" /> property.          </summary>
    </member>
    <member name="M:System.DirectoryServices.ResultPropertyValueCollection.Contains(System.Object)">
      <summary>The <see cref="M:System.DirectoryServices.ResultPropertyValueCollection.Contains(System.Object)" /> method determines whether a specified property value is in this collection.          </summary>
      <returns>The return value is true if the specified property belongs to this collection; otherwise, false.</returns>
      <param name="value">The property value to find.</param>
    </member>
    <member name="M:System.DirectoryServices.ResultPropertyValueCollection.CopyTo(System.Object[],System.Int32)">
      <summary>The <see cref="M:System.DirectoryServices.ResultPropertyValueCollection.CopyTo(System.Object[],System.Int32)" /> method copies the property values from this collection to an array, starting at a particular index of the array.          </summary>
      <param name="values">An array of type <see cref="T:System.Object" /> that receives this collection's property values.</param>
      <param name="index">The zero-based array index at which to begin copying the property values.</param>
    </member>
    <member name="M:System.DirectoryServices.ResultPropertyValueCollection.IndexOf(System.Object)">
      <summary>The <see cref="M:System.DirectoryServices.ResultPropertyValueCollection.IndexOf(System.Object)" /> method retrieves the index of a specified property value in this collection.          </summary>
      <returns>The zero-based index of the specified property value. If the object is not found, the return value is -1.</returns>
      <param name="value">The property value to find.</param>
    </member>
    <member name="P:System.DirectoryServices.ResultPropertyValueCollection.Item(System.Int32)">
      <summary>The <see cref="P:System.DirectoryServices.ResultPropertyValueCollection.Item(System.Int32)" /> property gets the property value that is located at a specified index.          </summary>
      <returns>The property value that is located at the specified index.</returns>
      <param name="index">The zero-based index of the property value to retrieve.</param>
    </member>
    <member name="T:System.DirectoryServices.SchemaNameCollection">
      <summary>Contains a list of the schema names that the <see cref="P:System.DirectoryServices.DirectoryEntries.SchemaFilter" /> property of a <see cref="T:System.DirectoryServices.DirectoryEntries" /> object can use.          </summary>
    </member>
    <member name="M:System.DirectoryServices.SchemaNameCollection.Add(System.String)">
      <summary>Appends a specified schema name to this collection.          </summary>
      <returns>The zero-based index of the specified property value. If the object is not found, the return value is -1.</returns>
      <param name="value">The schema name to add to this collection.</param>
    </member>
    <member name="M:System.DirectoryServices.SchemaNameCollection.AddRange(System.DirectoryServices.SchemaNameCollection)">
      <summary>Appends a set of specified schema names to this collection.          </summary>
      <param name="value">A <see cref="T:System.DirectoryServices.SchemaNameCollection" /> that contains the schema names to add.</param>
    </member>
    <member name="M:System.DirectoryServices.SchemaNameCollection.AddRange(System.String[])">
      <summary>Appends a set of specified schema names to this collection.          </summary>
      <param name="value">An array of type <see cref="T:System.String" /> that contains the schema names to add.</param>
    </member>
    <member name="M:System.DirectoryServices.SchemaNameCollection.Clear">
      <summary>Removes all objects from this collection.          </summary>
    </member>
    <member name="M:System.DirectoryServices.SchemaNameCollection.Contains(System.String)">
      <summary>Determines whether this collection contains a specified schema name.          </summary>
      <returns>The return value is true if the specified property belongs to this collection; otherwise, false.</returns>
      <param name="value">The schema name to search for.</param>
    </member>
    <member name="M:System.DirectoryServices.SchemaNameCollection.CopyTo(System.String[],System.Int32)">
      <summary>Copies the schema names from this collection to an array, starting at a particular index of the array.          </summary>
      <param name="stringArray">An array of type <see cref="T:System.String" /> that receives this collection's schema names.</param>
      <param name="index">The zero-based array index at which to begin copying the schema names.</param>
    </member>
    <member name="P:System.DirectoryServices.SchemaNameCollection.Count">
      <summary>The <see cref="P:System.DirectoryServices.SchemaNameCollection.Count" /> property gets the number of objects in this collection.          </summary>
      <returns>The number of objects in this collection.</returns>
    </member>
    <member name="M:System.DirectoryServices.SchemaNameCollection.GetEnumerator">
      <summary>Returns an enumerator that you can use to iterate through this collection.          </summary>
      <returns>An enumerator that you can used to iterate through this collection.</returns>
    </member>
    <member name="M:System.DirectoryServices.SchemaNameCollection.IndexOf(System.String)">
      <summary>Determines the index of a specified schema name in this collection.          </summary>
      <returns>The zero-based index of the specified schema name, or -1 if the schema name was not found in the collection.</returns>
      <param name="value">The schema name to search for.</param>
    </member>
    <member name="M:System.DirectoryServices.SchemaNameCollection.Insert(System.Int32,System.String)">
      <summary>Inserts a schema name into this collection at a specified index.          </summary>
      <param name="index">The zero-based index into the collection at which to insert the schema name.</param>
      <param name="value">The schema name to insert into this collection.</param>
    </member>
    <member name="P:System.DirectoryServices.SchemaNameCollection.Item(System.Int32)">
      <summary>Gets or sets the object that exists at a specified index.          </summary>
      <returns>The object that exists at the specified index.</returns>
      <param name="index">The zero-based index into the collection.</param>
    </member>
    <member name="M:System.DirectoryServices.SchemaNameCollection.Remove(System.String)">
      <summary>Removes a specified schema name from this collection.          </summary>
      <param name="value">The schema name to remove.</param>
    </member>
    <member name="M:System.DirectoryServices.SchemaNameCollection.RemoveAt(System.Int32)">
      <summary>Removes the schema name that is at a specified index from this collection.          </summary>
      <param name="index">The zero-based index of the schema name to remove.</param>
      <exception cref="T:System.IndexOutOfRangeException">The zero-based index is either less than zero or equal to the size of the collection.</exception>
    </member>
    <member name="M:System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing. </param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or- The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />. </exception>
      <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />. </exception>
    </member>
    <member name="P:System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</summary>
      <returns>true if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="P:System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Add(System.Object)">
      <summary>Adds an item to the list.</summary>
      <returns>The position into which the new item was inserted.</returns>
      <param name="value">The item to add to the list.</param>
    </member>
    <member name="M:System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Contains(System.Object)">
      <summary>Determines whether the list contains a specified value.</summary>
      <returns>true if the value is found in the list, otherwise false.</returns>
      <param name="value">The value to locate in the list.</param>
    </member>
    <member name="M:System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determines the index of a specified item in the list.</summary>
      <returns>The index of <paramref name="value" /> if found in the list; otherwise, -1.</returns>
      <param name="value">The item to locate in the list.</param>
    </member>
    <member name="M:System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserts an item to the list at the specified index.</summary>
      <param name="index">The zero-based index at which value should be inserted.</param>
      <param name="value">The item to insert into the list.</param>
    </member>
    <member name="P:System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsFixedSize">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size.</summary>
      <returns>true if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList" /> is read-only.</summary>
      <returns>true if the <see cref="T:System.Collections.IList" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />. </exception>
      <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.IList" /> is read-only. </exception>
    </member>
    <member name="M:System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Remove(System.Object)">
      <summary>Removes the first occurrence of a specific <paramref name="value" /> from the list.</summary>
      <param name="value">The <paramref name="value" /> to remove from the list.</param>
    </member>
    <member name="T:System.DirectoryServices.SearchResult">
      <summary>The <see cref="T:System.DirectoryServices.SearchResult" /> class encapsulates a node in the Active Directory Domain Services hierarchy that is returned during a search through <see cref="T:System.DirectoryServices.DirectorySearcher" />.</summary>
    </member>
    <member name="M:System.DirectoryServices.SearchResult.GetDirectoryEntry">
      <summary>Retrieves the <see cref="T:System.DirectoryServices.DirectoryEntry" /> that corresponds to the <see cref="T:System.DirectoryServices.SearchResult" /> from the Active Directory Domain Services hierarchy.</summary>
      <returns>The <see cref="T:System.DirectoryServices.DirectoryEntry" /> that corresponds to the <see cref="T:System.DirectoryServices.SearchResult" />.</returns>
    </member>
    <member name="P:System.DirectoryServices.SearchResult.Path">
      <summary>Gets the path for this <see cref="T:System.DirectoryServices.SearchResult" />.</summary>
      <returns>The path of this <see cref="T:System.DirectoryServices.SearchResult" />.</returns>
    </member>
    <member name="P:System.DirectoryServices.SearchResult.Properties">
      <summary>Gets a <see cref="T:System.DirectoryServices.ResultPropertyCollection" /> collection of properties for this object.</summary>
      <returns>A <see cref="T:System.DirectoryServices.ResultPropertyCollection" /> of properties set on this object.</returns>
    </member>
    <member name="T:System.DirectoryServices.SearchResultCollection">
      <summary>The <see cref="T:System.DirectoryServices.SearchResultCollection" /> class contains the <see cref="T:System.DirectoryServices.SearchResult" /> instances that the Active Directory hierarchy returned during a <see cref="T:System.DirectoryServices.DirectorySearcher" /> query.</summary>
    </member>
    <member name="M:System.DirectoryServices.SearchResultCollection.Contains(System.DirectoryServices.SearchResult)">
      <summary>Determines if a specified <see cref="T:System.DirectoryServices.SearchResult" /> object is in this collection.</summary>
      <returns>true if the specified property belongs to this collection; otherwise, false.</returns>
      <param name="result"></param>
    </member>
    <member name="M:System.DirectoryServices.SearchResultCollection.CopyTo(System.DirectoryServices.SearchResult[],System.Int32)">
      <summary>Copies all <see cref="T:System.DirectoryServices.SearchResult" /> objects in this collection to the specific array, starting at the specified index in the target array.</summary>
      <param name="results"></param>
      <param name="index"></param>
    </member>
    <member name="P:System.DirectoryServices.SearchResultCollection.Count">
      <summary>Gets the number of <see cref="T:System.DirectoryServices.SearchResult" /> objects in this collection.</summary>
      <returns>The number of <see cref="T:System.DirectoryServices.SearchResult" /> objects in this collection.</returns>
    </member>
    <member name="M:System.DirectoryServices.SearchResultCollection.Dispose">
      <summary>Releases all resources that are used by the <see cref="T:System.DirectoryServices.SearchResultCollection" /> object.</summary>
    </member>
    <member name="M:System.DirectoryServices.SearchResultCollection.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources that are used by the <see cref="T:System.DirectoryServices.SearchResultCollection" /> object and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.DirectoryServices.SearchResultCollection.Finalize">
      <summary>Overrides the <see cref="M:System.Object.Finalize" /> method.</summary>
    </member>
    <member name="M:System.DirectoryServices.SearchResultCollection.GetEnumerator">
      <summary>Returns an enumerator that you can use to iterate through this collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that you can use to iterate through this collection.</returns>
    </member>
    <member name="P:System.DirectoryServices.SearchResultCollection.Handle">
      <summary>Gets the handle that is returned by the IDirectorySearch::ExecuteSearch method that performs the actual search. For more information, see the IDirectorySearch::ExecuteSearch topic in the MSDN Library at http://msdn.microsoft.com/library.</summary>
      <returns>The ADS_SEARCH_HANDLE value that this collection uses.</returns>
    </member>
    <member name="M:System.DirectoryServices.SearchResultCollection.IndexOf(System.DirectoryServices.SearchResult)">
      <summary>Returns the index of the first occurrence of the specified <see cref="T:System.DirectoryServices.SearchResult" /> object in this collection.</summary>
      <returns>The zero-based index of the first matching object. Returns -1 if no member of this collection is identical to the <see cref="T:System.DirectoryServices.SearchResult" /> object.</returns>
      <param name="result">The <see cref="T:System.DirectoryServices.SearchResult" /> object to search for in this collection.</param>
    </member>
    <member name="P:System.DirectoryServices.SearchResultCollection.Item(System.Int32)">
      <summary>Gets the <see cref="T:System.DirectoryServices.SearchResult" /> object that is located at a specified index in this collection.</summary>
      <returns>The <see cref="T:System.DirectoryServices.SearchResult" /> object that is located at the specified index.</returns>
      <param name="index">The zero-based index of the <see cref="T:System.DirectoryServices.SearchResult" /> object to retrieve.</param>
    </member>
    <member name="P: