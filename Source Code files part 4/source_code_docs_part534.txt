 /> object.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)">
      <summary>Returns a service object given the specified <see cref="T:System.ServiceModel.InstanceContext" /> object.</summary>
      <returns>The service object.</returns>
      <param name="instanceContext">The current <see cref="T:System.ServiceModel.InstanceContext" /> object.</param>
      <param name="message">The message that triggered the creation of a service object.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)">
      <summary>Called when an <see cref="T:System.ServiceModel.InstanceContext" /> object recycles a service object.</summary>
      <param name="instanceContext">The service's instance context.</param>
      <param name="instance">The service object to be recycled.</param>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer">
      <summary>Defines the methods that enable a client application to display a user interface to collect identity information prior to creating the channel.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer.BeginDisplayInitializationUI(System.ServiceModel.IClientChannel,System.AsyncCallback,System.Object)">
      <summary>An asynchronous call to begin using a user interface to obtain credential information.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> to use to call back when processing has completed.</returns>
      <param name="channel">The client channel.</param>
      <param name="callback">The callback object.</param>
      <param name="state">Any state data.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer.EndDisplayInitializationUI(System.IAsyncResult)">
      <summary>Called when the <see cref="M:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer.BeginDisplayInitializationUI(System.ServiceModel.IClientChannel,System.AsyncCallback,System.Object)" /> has finished.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" />.</param>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.IMessageFilterTable`1">
      <summary>An interface that defines the contract that a filter table must implement to inspect messages with query criteria derived from one or more filters.</summary>
      <typeparam name="TFilterData">The type of data associated with each filter in the table.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IMessageFilterTable`1.GetMatchingFilter(System.ServiceModel.Channels.Message,System.ServiceModel.Dispatcher.MessageFilter@)">
      <summary>Returns a value that indicates whether the match criterion of exactly one filter in the table is satisfied by the specified message, and returns that filter in an out parameter.</summary>
      <returns>true if the match criterion of at least one filter in the table is satisfied by <paramref name="message" />; false if no filter is satisfied.</returns>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> to test.</param>
      <param name="filter">out parameter that stores the filter that is satisfied by the <paramref name="message" />. If no filter was found, the parameter is set to its default value.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IMessageFilterTable`1.GetMatchingFilter(System.ServiceModel.Channels.MessageBuffer,System.ServiceModel.Dispatcher.MessageFilter@)">
      <summary>Returns a value that indicates whether the match criterion of exactly one filter in the table is satisfied by the specified message or buffered message, and returns that filter in an out parameter.</summary>
      <returns>true if the match criterion of at least one filter in the table is satisfied by <paramref name="messageBuffer" />; false if no filter is satisfied.</returns>
      <param name="messageBuffer">The <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> to test.</param>
      <param name="filter">out parameter that stores the filter that is satisfied by the <paramref name="message" />. If no filter was found, the parameter is set to its default value.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IMessageFilterTable`1.GetMatchingFilters(System.ServiceModel.Channels.Message,System.Collections.Generic.ICollection{System.ServiceModel.Dispatcher.MessageFilter})">
      <summary>Returns a value that indicates whether the match criterion of a filter in the table is satisfied by the specified message, and adds the matching filters to a collection.</summary>
      <returns>true if the match criterion of at least one filter in the table is satisfied by <paramref name="message" />; false if no filter is satisfied.</returns>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> to test.</param>
      <param name="results">Reference parameter that stores the <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> objects that match in <see cref="T:System.Collections.Generic.ICollection`1" />&lt;Filter&gt;.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IMessageFilterTable`1.GetMatchingFilters(System.ServiceModel.Channels.MessageBuffer,System.Collections.Generic.ICollection{System.ServiceModel.Dispatcher.MessageFilter})">
      <summary>Returns a value that indicates whether the match criterion of a filter in the table is satisfied by the specified buffered message, and adds the matching filters to a collection.</summary>
      <returns>true if the match criterion of at least one filter in the table is satisfied by <paramref name="messageBuffer" />; false if no filter is satisfied.</returns>
      <param name="messageBuffer">The <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> to test.</param>
      <param name="results">Reference parameter that stores the <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> objects that match in <see cref="T:System.Collections.Generic.ICollection`1" />&lt;Filter&gt;.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IMessageFilterTable`1.GetMatchingValue(System.ServiceModel.Channels.Message,`0@)">
      <summary>Returns a value that indicates whether the match criterion of exactly one filter in the table is satisfied by the specified message, and adds the matching filter data to a collection.</summary>
      <returns>true if the match criterion of exactly one filter in the table is satisfied by the message; false if no filter is satisfied.</returns>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> to test.</param>
      <param name="value">out parameter that stores the <paramref name="FilterData" /> that matches the <paramref name="message" />.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IMessageFilterTable`1.GetMatchingValue(System.ServiceModel.Channels.MessageBuffer,`0@)">
      <summary>Returns a value that indicates whether the match criterion of exactly one filter in the table is satisfied by the specified buffered message, and adds the matching filter data to a collection.</summary>
      <returns>true if the match criterion of exactly one filter in the table is satisfied by the message; false if no filter is satisfied.</returns>
      <param name="messageBuffer">The <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> to test.</param>
      <param name="value">out parameter that stores the <paramref name="FilterData" /> that matches the <paramref name="messageBuffer" />.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IMessageFilterTable`1.GetMatchingValues(System.ServiceModel.Channels.Message,System.Collections.Generic.ICollection{`0})">
      <summary>Returns a value that indicates whether the match criterion of at least one filter in the table is satisfied by the specified message, and adds the <paramref name="FilterData" /> of the matching filters to a collection.</summary>
      <returns>true if the match criterion of at least one filter in the table is satisfied by <paramref name="message" />; false if no filter is satisfied.</returns>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> to test.</param>
      <param name="results">Reference parameter that stores the filter data of the matching filters in a generic collection.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IMessageFilterTable`1.GetMatchingValues(System.ServiceModel.Channels.MessageBuffer,System.Collections.Generic.ICollection{`0})">
      <summary>Returns a value that indicates whether the match criterion of at least one filter in the table is satisfied by the specified buffered message, and adds the <paramref name="FilterData" /> of the matching filters to a collection.</summary>
      <returns>true if the match criterion of at least one filter in the table is satisfied by <paramref name="messageBuffer" />; false if no filter is satisfied.</returns>
      <param name="messageBuffer">The <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> to test.</param>
      <param name="results">Reference parameter that stores the filter data of the matching filters in a generic <see cref="T:System.Collections.Generic.ICollection`1" />&lt;<paramref name="FilterData" />&gt;.</param>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.InstanceContextIdleCallback">
      <summary>Represents the method that is called when an <see cref="T:System.ServiceModel.InstanceContext" /> object has finished processing. </summary>
      <param name="instanceContext">The instance context that has finished processing.</param>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.InvalidBodyAccessException">
      <summary>An abstract base class for the exceptions that are thrown if an attempt is made to access the body of a message when it is not allowed.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.InvalidBodyAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.InvalidBodyAccessException" /> class with serialized and contextual information specified.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.InvalidBodyAccessException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.InvalidBodyAccessException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.InvalidBodyAccessException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.InvalidBodyAccessException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception.</param>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.IOperationInvoker">
      <summary>Declares methods that take an object and an array of parameters extracted from a message, invoke a method on that object with those parameters, and return the method's return value and output parameters.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IOperationInvoker.AllocateInputs">
      <summary>Returns an <see cref="T:System.Array" /> of parameter objects.</summary>
      <returns>The parameters that are to be used as arguments to the operation.</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IOperationInvoker.Invoke(System.Object,System.Object[],System.Object[]@)">
      <summary>Returns an object and a set of output objects from an instance and set of input objects.  </summary>
      <returns>The return value.</returns>
      <param name="instance">The object to be invoked.</param>
      <param name="inputs">The inputs to the method.</param>
      <param name="outputs">The outputs from the method.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IOperationInvoker.InvokeBegin(System.Object,System.Object[],System.AsyncCallback,System.Object)">
      <summary>An asynchronous implementation of the <see cref="M:System.ServiceModel.Dispatcher.IOperationInvoker.Invoke(System.Object,System.Object[],System.Object[]@)" /> method.</summary>
      <returns>A <see cref="T:System.IAsyncResult" /> used to complete the asynchronous call.</returns>
      <param name="instance">The object to be invoked.</param>
      <param name="inputs">The inputs to the method.</param>
      <param name="callback">The asynchronous callback object.</param>
      <param name="state">Associated state data.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IOperationInvoker.InvokeEnd(System.Object,System.Object[]@,System.IAsyncResult)">
      <summary>The asynchronous end method.</summary>
      <returns>The return value.</returns>
      <param name="instance">The object invoked.</param>
      <param name="outputs">The outputs from the method.</param>
      <param name="result">The <see cref="T:System.IAsyncResult" /> object.</param>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.IOperationInvoker.IsSynchronous">
      <summary>Gets a value that specifies whether the <see cref="M:System.ServiceModel.Dispatcher.IOperationInvoker.Invoke(System.Object,System.Object[],System.Object[]@)" /> or <see cref="M:System.ServiceModel.Dispatcher.IOperationInvoker.InvokeBegin(System.Object,System.Object[],System.AsyncCallback,System.Object)" /> method is called by the dispatcher.</summary>
      <returns>true if the dispatcher invokes the synchronous operation; otherwise, false.</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.IParameterInspector">
      <summary>Defines the contract implemented by custom parameter inspectors that enables inspection or modification of information prior to and subsequent to calls on either the client or the service.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)">
      <summary>Called after client calls are returned and before service responses are sent.</summary>
      <param name="operationName">The name of the invoked operation.</param>
      <param name="outputs">Any output objects.</param>
      <param name="returnValue">The return value of the operation.</param>
      <param name="correlationState">Any correlation state returned from the <see cref="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])" /> method, or null. </param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])">
      <summary>Called before client calls are sent and after service responses are returned.</summary>
      <returns>The correlation state that is returned as the <paramref name="correlationState" /> parameter in <see cref="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)" />. Return null if you do not intend to use correlation state.</returns>
      <param name="operationName">The name of the operation.</param>
      <param name="inputs">The objects passed to the method by the client.</param>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.MatchAllMessageFilter">
      <summary>Represents a query that is satisfied by every non-null message that it tests.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MatchAllMessageFilter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.MatchAllMessageFilter" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MatchAllMessageFilter.Match(System.ServiceModel.Channels.Message)">
      <summary>This method returns true for every message that is not null.</summary>
      <returns>Returns true.</returns>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> object to test.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MatchAllMessageFilter.Match(System.ServiceModel.Channels.MessageBuffer)">
      <summary>The <see cref="M:System.ServiceModel.Dispatcher.MatchAllMessageFilter.Match(System.ServiceModel.MessageBuffer)" /> method returns true for every message that is not null.</summary>
      <returns>Returns true.</returns>
      <param name="messageBuffer">The <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> object to test.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="messageBuffer" /> is null.</exception>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.MatchNoneMessageFilter">
      <summary>Represents a query that is never satisfied by a message that it tests.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MatchNoneMessageFilter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.MatchNoneMessageFilter" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MatchNoneMessageFilter.Match(System.ServiceModel.Channels.Message)">
      <summary>This method returns false for every message that is not null.</summary>
      <returns>Returns false.</returns>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> object to test.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MatchNoneMessageFilter.Match(System.ServiceModel.Channels.MessageBuffer)">
      <summary>This method returns false for every message that is not null.</summary>
      <returns>Returns false.</returns>
      <param name="messageBuffer">The <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> object to test.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="messageBuffer" /> is null.</exception>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.MessageFilter">
      <summary>abstract base class for different classes of filters used to query messages.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilter.#ctor">
      <summary>When called in a derived class, initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilter.CreateFilterTable``1">
      <summary>Creates a filter table for a filter that has a specified type of data associated with it.</summary>
      <returns>An <see cref="T:System.ServiceModel.Dispatcher.IMessageFilterTable`1" /> object to which filters associated with <paramref name="FilterData" /> can be added.</returns>
      <typeparam name="FilterData">Data associated with the filters in the table.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilter.Match(System.ServiceModel.Channels.Message)">
      <summary>When overridden in a derived class, tests whether a message satisfies the filter criteria. The body cannot be examined.</summary>
      <returns>true if the <see cref="T:System.ServiceModel.Channels.Message" /> object satisfies the filter criteria; otherwise, false.</returns>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> object to test. </param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilter.Match(System.ServiceModel.Channels.MessageBuffer)">
      <summary>When overridden in a derived class, tests whether a buffered message satisfies the criteria of a filter.</summary>
      <returns>true if the <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> object satisfies the filter criteria; otherwise, false.</returns>
      <param name="buffer">The <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> object to test. </param>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.MessageFilterException">
      <summary>The base class for the exceptions that are thrown when the quota of nodes inspected by a filter is exceeded.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.MessageFilterException" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.MessageFilterException" /> class with a specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" />.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that contains all the data required to deserialize the exception.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that specifies the source and destination of the stream.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.MessageFilterException" /> class.</summary>
      <param name="message">The message to accompany the exception.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterException.#ctor(System.String,System.Collections.ObjectModel.Collection{System.ServiceModel.Dispatcher.MessageFilter})">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.MessageFilterException" /> class with a specified error message and a collection of the filters that exceeded the quota of nodes.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="filters">The collection of <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" />s that exceeded the quota of nodes.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.MessageFilterException" /> class with a specified error message and the inner exception that caused the current exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that caused the current exception to be thrown.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterException.#ctor(System.String,System.Exception,System.Collections.ObjectModel.Collection{System.ServiceModel.Dispatcher.MessageFilter})">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.MessageFilterException" /> class, the inner exception that caused the current exception, and a collection of the filters that exceeded the quota of nodes.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that caused the current exception to be thrown.</param>
      <param name="filters">The collection of <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" />s that exceeded the quota of nodes.</param>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.MessageFilterException.Filters">
      <summary>Gets the collection of <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" />s that exceeded the quota of nodes.</summary>
      <returns>The collection of <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" />s that exceeded the quota of nodes.</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.MessageFilterTable`1">
      <summary>Provides the generic implementation of a filter table.</summary>
      <typeparam name="TFilterData">The type of the <paramref name="FilterData" /> associated with the filter.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterTable`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.MessageFilterTable`1" /> class with a default priority of 0.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterTable`1.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.MessageFilterTable`1" /> class with the specified initial default priority.</summary>
      <param name="defaultPriority">The default priority for filter table.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterTable`1.Add(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageFilter,`0})">
      <summary>Adds a filter/<paramref name="FilterData" /> (key/value) pair to the filter table.</summary>
      <param name="item">The <see cref="T:System.Collections.Generic.KeyValuePair`2" /> &lt;Filter, <paramref name="FilterData" />&gt; added to the table.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterTable`1.Add(System.ServiceModel.Dispatcher.MessageFilter,`0)">
      <summary>Adds a filter and its associated <paramref name="FilterData" /> to the filter table.</summary>
      <param name="filter">The <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> used as the key of the pair added.</param>
      <param name="data">The <paramref name="FilterData" /> associated with the filter used as the value of the pair added.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filter" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="filter" /> is already in the table.</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterTable`1.Add(System.ServiceModel.Dispatcher.MessageFilter,`0,System.Int32)">
      <summary>Adds a filter and its associated <paramref name="FilterData" /> to the action filter table with a specified priority.</summary>
      <param name="filter">The <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> used as the key of the pair added.</param>
      <param name="data">The <paramref name="FilterData" /> associated with the filter used as the value of the pair added.</param>
      <param name="priority">The priority of the filter added.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filter" /> cannot be null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="filter" /> already exists in the table.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="filter" /> type does not match table type.</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterTable`1.Clear">
      <summary>Removes all filters and their associated data from the filter table.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterTable`1.Contains(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageFilter,`0})">
      <summary>Determines whether the filter table contains a specified filter and its associated <paramref name="FilterData" />.</summary>
      <returns>true if the <paramref name="filter" />/<paramref name="FilterData" /> pair is contained in the filter table; otherwise false.</returns>
      <param name="item">The <see cref="T:System.Collections.Generic.KeyValuePair`2" /> &lt;<see cref="T:System.ServiceModel.Dispatcher.MessageFilter" />, <paramref name="FilterData" />&gt; to find in the table.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterTable`1.ContainsKey(System.ServiceModel.Dispatcher.MessageFilter)">
      <summary>Determines whether the filter table contains a specified filter.</summary>
      <returns>true if the <paramref name="filter" /> is contained in the filter table; otherwise false.</returns>
      <param name="filter">The <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> being tested for.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterTable`1.CopyTo(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageFilter,`0}[],System.Int32)">
      <summary>Copies the filter/<paramref name="FilterData" /> pairs to an array that starts at a specified index.</summary>
      <param name="array">The zero-based array of type <see cref="T:System.Collections.Generic.KeyValuePair`2" /> &lt;Filter, <paramref name="FilterData" />&gt; to which the pairs are being copied.</param>
      <param name="arrayIndex">The index at which to begin copying.</param>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.MessageFilterTable`1.Count">
      <summary>Gets the number of filter/<paramref name="FilterData" /> pairs in the filter table.</summary>
      <returns>The number of filter/<paramref name="FilterData" /> pairs items in the filter table.</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterTable`1.CreateFilterTable(System.ServiceModel.Dispatcher.MessageFilter)">
      <summary>Instantiates a filter table for a specified type of filter.</summary>
      <returns>The <see cref="T:System.ServiceModel.Dispatcher.IMessageFilterTable`1" /> that is created that contains the specified filter.</returns>
      <param name="filter">The <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> to be contained in the filter table created.</param>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.MessageFilterTable`1.DefaultPriority">
      <summary>Gets or sets the default priority for the filter table.</summary>
      <returns>The default priority assigned by filters added to the filter table. The default value for the default priority is 0.</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterTable`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through the filter table.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" />&lt;KeyValuePair&lt;Filter, <paramref name="FilterData" />&gt;&gt; that can be used to iterate through the filter table.</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingFilter(System.ServiceModel.Channels.Message,System.ServiceModel.Dispatcher.MessageFilter@)">
      <summary>Returns a value that indicates whether the match criterion of exactly one filter in the table is satisfied by the specified message and returns that filter in an out parameter.</summary>
      <returns>true if match criterion of one <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> in the table is satisfied by the message; false if no filter is satisfied.</returns>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> to test.</param>
      <param name="filter">The out parameter that stores the filter that is satisfied by the <paramref name="message" />. If no filter was found, the parameter is set to its default value.</param>
      <exception cref="T:System.ServiceModel.Dispatcher.MultipleFilterMatchesException">More than one <see cref="T:System.ServiceModel.Dispatcher.ActionMessageFilter" /> matches the <paramref name="messageBuffer" />.</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingFilter(System.ServiceModel.Channels.MessageBuffer,System.ServiceModel.Dispatcher.MessageFilter@)">
      <summary>Returns a value that indicates whether the match criterion of exactly one filter in the table is satisfied by the specified message and returns that filter in an out parameter.</summary>
      <returns>true if match criterion of exactly one filter in the table is satisfied by the message; false if no filter is satisfied.</returns>
      <param name="buffer">The <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> to test.</param>
      <param name="filter">The out parameter that stores the filter that is satisfied by the <paramref name="messageBuffer" />.</param>
      <exception cref="T:System.ServiceModel.Dispatcher.MultipleFilterMatchesException">More than one <see cref="T:System.ServiceModel.Dispatcher.ActionMessageFilter" /> matches the <paramref name="messageBuffer" />.</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingFilters(System.ServiceModel.Channels.Message,System.Collections.Generic.ICollection{System.ServiceModel.Dispatcher.MessageFilter})">
      <summary>Returns a value that indicates whether the match criterion of an <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> in the table is satisfied by the specified message, and adds the matching filters to a collection.</summary>
      <returns>true if match criterion of at least one <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> in the table is satisfied by <paramref name="message" />; false if no filter is satisfied.</returns>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> to test.</param>
      <param name="results">The reference parameter that stores the <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> objects that match in <see cref="T:System.Collections.Generic.ICollection`1" />&lt;Filter&gt;.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="results" /> is null.</exception>
      <exception cref="T:System.ServiceModel.Dispatcher.InvalidBodyAccessException">A filter attempted to examine the contents of the message body.</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingFilters(System.ServiceModel.Channels.MessageBuffer,System.Collections.Generic.ICollection{System.ServiceModel.Dispatcher.MessageFilter})">
      <summary>Returns a value that indicates whether the match criterion of at least one filter in the table is satisfied by the specified buffered message and adds the matching filters from the highest priority set of filters in which at least one match is found to a collection. </summary>
      <returns>true if match criterion of at least one filter in the table is satisfied by <paramref name="message" />; false if no filter is satisfied.</returns>
      <param name="buffer">The <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> to test.</param>
      <param name="results">The reference parameter that stores the <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> objects that match in <see cref="T:System.Collections.Generic.ICollection`1" />&lt;Filter&gt;.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="results" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingValue(System.ServiceModel.Channels.Message,`0@)">
      <summary>Returns a value that indicates whether the match criterion of exactly one <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> in the table is satisfied by the specified message and adds the matching filter data to a collection.</summary>
      <returns>true if the match criterion of one filter in the table is satisfied by the message; false if no filter is satisfied.</returns>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> to test.</param>
      <param name="data">The out parameter that stores the <paramref name="FilterData" /> that matches the <paramref name="message" />.</param>
      <exception cref="T:System.ServiceModel.Dispatcher.MultipleFilterMatchesException">More than one filter matches the <paramref name="message" />.</exception>
      <exception cref="T:System.ServiceModel.Dispatcher.InvalidBodyAccessException">A filter attempted to examine the contents of the message body.</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingValue(System.ServiceModel.Channels.MessageBuffer,`0@)">
      <summary>Returns a value that indicates whether the match criterion of exactly one filter in the table is satisfied by the specified buffered message and adds the matching filter data to a collection.</summary>
      <returns>true if the match criterion of one filter in the table is satisfied by the buffered message; false if no filter is satisfied.</returns>
      <param name="buffer">The <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> to test.</param>
      <param name="data">The out parameter that stores the <paramref name="FilterData" /> that matches the <paramref name="messageBuffer" />.</param>
      <exception cref="T:System.ServiceModel.Dispatcher.MultipleFilterMatchesException">More than one filter matches the <paramref name="messageBuffer" />.</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingValues(System.ServiceModel.Channels.Message,System.Collections.Generic.ICollection{`0})">
      <summary>Returns a value that indicates whether the match criterion of at least one filter in the table is satisfied by the specified message or buffered message and adds the <paramref name="FilterData" /> of the matching filters to a collection.</summary>
      <returns>true if match criterion of exactly one filter in the table is satisfied by the message; false if no filter is satisfied.</returns>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> to test.</param>
      <param name="results">The reference parameter that stores the <paramref name="FilterData" /> of the matching action filters in a generic <see cref="T:System.Collections.Generic.ICollection`1" />&lt;<paramref name="FilterData" />&gt;.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="results" /> is null.</exception>
      <exception cref="T:System.ServiceModel.Dispatcher.InvalidBodyAccessException">A filter attempted to examine the contents of the message body.</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingValues(System.ServiceModel.Channels.MessageBuffer,System.Collections.Generic.ICollection{`0})">
      <summary>Returns a value that indicates whether the match criterion of exactly one filter in the table is satisfied by the specified message buffer and adds the <paramref name="FilterData" /> of the matching filters to the <paramref name="results" /> collection.</summary>
      <returns>true if the match criterion of exactly one <see cref="T:System.ServiceModel.Dispatcher.ActionMessageFilter" /> in the table is satisfied by the buffered message; false if no filter is satisfied.</returns>
      <param name="buffer">The <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> to test.</param>
      <param name="results">The reference parameter that stores the filter data of the filters that are satisfied by the <paramref name="messageBuffer" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="results" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterTable`1.GetPriority(System.ServiceModel.Dispatcher.MessageFilter)">
      <summary>Returns the priority of a given filter in the table.</summary>
      <returns>The priority of the <paramref name="filter" />.</returns>
      <param name="filter">The <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> contained in the filter table created.</param>
      <exception cref="T:System.InvalidOperationException">The specified filter does not exist in the filter table.</exception>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.MessageFilterTable`1.IsReadOnly">
      <summary>Gets a value that indicates whether the filter table is read-only.</summary>
      <returns>false for all filter tables.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.MessageFilterTable`1.Item(System.ServiceModel.Dispatcher.MessageFilter)">
      <summary>Gets or sets the filter data associated with the specified <paramref name="filter" />.</summary>
      <returns>The filter data associated with the <paramref name="filter" />. If the specified <paramref name="filter" /> is not found, a get operation throws a <see cref="T:System.Collections.Generic.KeyNotFoundException" />, and a set operation creates a new filter data element with the specified <paramref name="filter" /> as the key.</returns>
      <param name="filter">The <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> associated with the filter data to get or set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filter" /> is null.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved, and the <paramref name="filter" /> is not in the table.</exception>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.MessageFilterTable`1.Keys">
      <summary>Gets a collection of all the filters contained in the filter table.</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> of all the filters contained in the filter table.</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterTable`1.Remove(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageFilter,`0})">
      <summary>Removes a specified filter/<paramref name="FilterData" /> pair from the filter table.</summary>
      <returns>true if the filter/<paramref name="FilterData" /> pair was found and removed; false if it was not found.</returns>
      <param name="item">The <see cref="T:System.Collections.Generic.KeyValuePair`2" /> &lt;Filter, <paramref name="FilterData" />&gt; to remove from the table.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filter" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterTable`1.Remove(System.ServiceModel.Dispatcher.MessageFilter)">
      <summary>Removes a filter and its associated <paramref name="FilterData" /> from the filter table.</summary>
      <returns>true if the filter was found and removed; false if it was not found.</returns>
      <param name="filter">The <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filter" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterTable`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the filter table.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the filter table.</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterTable`1.TryGetValue(System.ServiceModel.Dispatcher.MessageFilter,`0@)">
      <summary>Checks whether a filter is stored in the filter table.</summary>
      <returns>true if there is a filter in the filter table that has data associated with it; otherwise false.</returns>
      <param name="filter">The <paramref name="filter" /> that is used as a key to retrieve the data.</param>
      <param name="data">The <paramref name="data" /> associated with the <paramref name="filter" />.</param>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.MessageFilterTable`1.Values">
      <summary>Gets a collection of all the <paramref name="FilterData" /> contained in the filter table.</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> of all the <paramref name="FilterData" /> contained in the filter table.</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.MessageQuery">
      <summary>Defines the core behavior of classes used to search for specific correlating data in a message.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageQuery.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.MessageQuery" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageQuery.CreateMessageQueryCollection">
      <summary>Creates a collection of queries that returns a specific type of data associated with it.</summary>
      <returns>
        <see cref="T:System.ServiceModel.Dispatcher.MessageQueryCollection" /> The collection of queries associated with the data type.</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageQuery.Evaluate``1(System.ServiceModel.Channels.Message)">
      <summary>When overridden in a derived class, runs a query against the message and returns a result. The body cannot be queried.</summary>
      <returns>
        <see cref="T:System.ServiceModel.Dispatcher.MessageQueryCollection" />An enumerable collection of results that satisfy the query.</returns>
      <param name="message">The message to query.</param>
      <typeparam name="TResult">The type of the value to return.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageQuery.Evaluate``1(System.ServiceModel.Channels.MessageBuffer)">
      <summary>When overridden in a derived class, runs a query against the message and returns a result.</summary>
      <returns>
        <see cref="T:System.ServiceModel.Dispatcher.MessageQueryCollection" />An enumerable collection of results that satisfy the query.</returns>
      <param name="buffer">The message to query.</param>
      <typeparam name="TResult">The type of the object to return.</typeparam>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.MessageQueryCollection">
      <summary>A collection of message query objects.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageQueryCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.MessageQueryCollection" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageQueryCollection.Evaluate``1(System.ServiceModel.Channels.Message)">
      <summary>Runs a query against the message and returns a result. The body cannot be queried.</summary>
      <returns>The result of the query. The type is determined by the generic <paramref name="TResult" /> argument.</returns>
      <param name="message">The message to run the query against.</param>
      <typeparam name="TResult">The type of the result of the query.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageQueryCollection.Evaluate``1(System.ServiceModel.Channels.MessageBuffer)">
      <summary>Runs a query against the message and returns a result.</summary>
      <returns>The result of the query. The type is determined by the generic <paramref name="TResult" /> argument.</returns>
      <param name="buffer">The message to run the query against.</param>
      <typeparam name="TResult">The type of the object to return.</typeparam>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.MessageQueryTable`1">
      <summary>Manages a collection of message query objects.</summary>
      <typeparam name="TItem">The type of the values returned by the queries.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageQueryTable`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.MessageQueryTable`1" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageQueryTable`1.Add(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,`0})">
      <summary>Adds an item defined as a key/value pair.</summary>
      <param name="item">The generic <see cref="T:System.Collections.Generic.KeyValuePair`2" /> to add.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageQueryTable`1.Add(System.ServiceModel.Dispatcher.MessageQuery,`0)">
      <summary>Adds an item to the collection using a key/value system.</summary>
      <param name="key">A <see cref="T:System.ServiceModel.Dispatcher.MessageQuery" /> that acts as a key.</param>
      <param name="value">The value to add, associated with the key.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageQueryTable`1.Clear">
      <summary>Removes all members from the collection.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageQueryTable`1.Contains(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,`0})">
      <summary>Determines whether the collection contains a specific item formatted as a key/value structure.</summary>
      <returns>
        <see cref="T:System.Boolean" />true if the item is found in the collection; otherwise, false.</returns>
      <param name="item">The key of the object to locate.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageQueryTable`1.ContainsKey(System.ServiceModel.Dispatcher.MessageQuery)">
      <summary>Determines whether the collection contains an element with the specified key.</summary>
      <returns>
        <see cref="T:System.Boolean" />true if the collection contains an element with the key; otherwise, false.</returns>
      <param name="key">The key to locate.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageQueryTable`1.CopyTo(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,`0}[],System.Int32)">
      <summary>Copies the elements of the collection to an <see cref="T:System.Array" />, starting at the specified index. </summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the collection. The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in the array at which copying begins.</param>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.MessageQueryTable`1.Count">
      <summary>Gets the number of query/data pairs in the table.</summary>
      <returns>Returns <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageQueryTable`1.Evaluate``1(System.ServiceModel.Channels.Message)">
      <summary>Runs a query against the message and returns a collection of results. The body cannot be queried.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />The enumerable collection of results.</returns>
      <param name="message">The message to query.</param>
      <typeparam name="TResult">The type of the result to return.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageQueryTable`1.Evaluate``1(System.ServiceModel.Channels.MessageBuffer)">
      <summary>Runs a query against the message and returns the result.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />The result of the query. Multiple results can be enumerated through.</returns>
      <param name="buffer">The message to query.</param>
      <typeparam name="TResult">The type of the result to return.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageQueryTable`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerator`1" />The enumerator object that can be used to iterate through the collection.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.MessageQueryTable`1.IsReadOnly">
      <summary>Gets a value that indicates whether the table is read-only.</summary>
      <returns>
        <see cref="T:System.Boolean" />false for all tables.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.MessageQueryTable`1.Item(System.ServiceModel.Dispatcher.MessageQuery)">
      <summary>Gets or sets the query object associated with the data type.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
      <param name="key">The query object to get or set.</param>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.MessageQueryTable`1.Keys">
      <summary>Returns a collection of all the collection keys contained in the table.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" />A collection of all of the query objects contained in the table.</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageQueryTable`1.Remove(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,`0})">
      <summary>Removes the first occurrence of the specified object from the collection.</summary>
      <returns>
        <see cref="T:System.Boolean" />true if the item was successfully removed from the collection; otherwise, false. This method also returns false if the item is not found in the collection.</returns>
      <param name="item">The <see cref="T:System.Collections.Generic.KeyValuePair" /> object to remove from the collection.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageQueryTable`1.Remove(System.ServiceModel.Dispatcher.MessageQuery)">
      <summary>Removes the item associated with the specified key from the collection.</summary>
      <returns>
        <see cref="T:System.Boolean" />true if the item was found and removed; false if the item was not found.</returns>
      <param name="key">The key of the element to remove.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageQueryTable`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that can be used to iterate through the collection.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />The enumerator used to iterate through the collection.</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageQueryTable`1.TryGetValue(System.ServiceModel.Dispatcher.MessageQuery,`0@)">
      <summary>Checks whether a matching query is stored in the table.</summary>
      <returns>
        <see cref="T:System.Boolean" />true if there is a matching query in the table (the value associated with the query is found in the out<paramref name="value" /> parameter); otherwise, false.</returns>
      <param name="key">The query that is used as a key to retrieve the data.</param>
      <param name="value">The value associated with the query.</param>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.MessageQueryTable`1.Values">
      <summary>Gets a collection of the result values contained in the table.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" />All of the result values contained in the table.</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.MultipleFilterMatchesException">
      <summary>The exception that is thrown when multiple filters match, but only one was expected.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MultipleFilterMatchesException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.MultipleFilterMatchesException" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MultipleFilterMatchesException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.MultipleFilterMatchesException" /> class with serialization information and streaming context specified.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that contains all the data required to serialize the exception.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that specifies the source and destination of the stream.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MultipleFilterMatchesException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.MultipleFilterMatchesException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MultipleFilterMatchesException.#ctor(System.String,System.Collections.ObjectModel.Collection{System.ServiceModel.Dispatcher.MessageFilter})">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.MultipleFilterMatchesException" /> class with a specified error message and a collection of filters. </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="filters">A collection of message filters.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MultipleFilterMatchesException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.MultipleFilterMatchesException" /> class. </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that caused the current exception to be thrown.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MultipleFilterMatchesException.#ctor(System.String,System.Exception,System.Collections.ObjectModel.Collection{System.ServiceModel.Dispatcher.MessageFilter})">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.MultipleFilterMatchesException" /> class with a specified error message, an exception, and a collection of filters.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that caused the current exception to be thrown.</param>
      <param name="filters">A collection of message filters.</param>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.MultipleFilterMatchesException.Filters">
      <summary>Gets the collection of filters that caused the exception to be thrown.</summary>
      <returns>The <see cref="T:System.Collections.ObjectModel.Collection`1" /> of type <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> that contains the filters that caused the exception to be thrown.</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.NavigatorInvalidBodyAccessException">
      <summary>The exception that is thrown when an <see cref="T:System.Xml.XPath.XPathNavigator" /> is directed to examine the body of an unbuffered message.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.NavigatorInvalidBodyAccessException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.NavigatorInvalidBodyAccessException" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.NavigatorInvalidBodyAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.NavigatorInvalidBodyAccessException" /> class with data that specifies the source and destination of the stream and the information required to serialize the exception.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that contains all the data required to serialize the exception.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that specifies the source and destination of the stream.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.NavigatorInvalidBodyAccessException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.NavigatorInvalidBodyAccessException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.NavigatorInvalidBodyAccessException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.NavigatorInvalidBodyAccessException" /> class with a specified error message and the inner exception that caused the current exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that caused the current exception to be thrown.</param>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter">
      <summary>Represents a query that tests whether a message matches an EndpointAddress using a Longest-Prefix Match for the URI component.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.#ctor(System.ServiceModel.EndpointAddress)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" /> class. </summary>
      <param name="address">The <see cref="T:System.ServiceModel.EndpointAddress" /> against which messages are tested.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.#ctor(System.ServiceModel.EndpointAddress,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" /> class. </summary>
      <param name="address">The <see cref="T:System.ServiceModel.EndpointAddress" /> against which messages are tested.</param>
      <param name="includeHostNameInComparison">true if the host name is included in the endpoint address comparison; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.Address">
      <summary>Gets the Endpoint Address that the <see cref="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" /> tests messages against.</summary>
      <returns>The <see cref="T:System.ServiceModel.EndpointAddress" /> that the <see cref="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" /> tests messages against.</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.CreateFilterTable``1">
      <summary>Creates a new filter table that tests a message against multiple endpoint addresses simultaneously.</summary>
      <returns>An object that implements the <see cref="T:System.ServiceModel.Dispatcher.IMessageFilterTable`1" /> interface that can contain <see cref="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" />s with associated <paramref name="FilterData" />. </returns>
      <typeparam name="FilterData">Data associated with the filters in the table.</typeparam>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.IncludeHostNameInComparison">
      <summary>Gets a value that indicates whether the host name is included in the endpoint address comparison.</summary>
      <returns>true if the host name is included in the endpoint address comparison; otherwise, false.</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.Match(System.ServiceModel.Channels.Message)">
      <summary>Tests whether a message satisfies the specified endpoint address.</summary>
      <returns>true if the <see cref="T:System.ServiceModel.Channels.Message" /> object satisfies the endpoint address specified in the filter; otherwise, false. </returns>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> object to test.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.Match(System.ServiceModel.Channels.MessageBuffer)">
      <summary>Tests whether a buffered message satisfies the specified endpoint address.</summary>
      <returns>true if the <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> object satisfies the endpoint address; otherwise, false. </returns>
      <param name="messageBuffer">The <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> object to test.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="messageBuffer" /> is null.</exception>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.SeekableXPathNavigator">
      <summary>Provides read-only, random access to data contained in XML documents and enables efficient querying for specified nodes.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.SeekableXPathNavigator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.SeekableXPathNavigator" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.SeekableXPathNavigator.ComparePosition(System.Int64,System.Int64)">
      <summary>When overridden in a derived class, returns a value that describes the document order of the two specified positions.</summary>
      <returns>One of the <see cref="T:System.Xml.XmlNodeOrder" /> values that describes the relation of <paramref name="firstPosition" /> to <paramref name="secondPosition" /> in the document.</returns>
      <param name="firstPosition">The first position in the comparison.</param>
      <param name="secondPosition">The second position in the comparison.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="firstPosition" /> or <paramref name="secondPosition" /> is not valid.</exception>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.SeekableXPathNavigator.CurrentPosition">
      <summary>When overridden in a derived class, gets or sets a value associated with the node in the data where the XPath navigator is positioned.</summary>
      <returns>A value that is associated with the navigator’s current position. </returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.SeekableXPathNavigator.GetLocalName(System.Int64)">
      <summary>When overridden in a derived class, returns the local name of the node at the position specified.</summary>
      <returns>The local name of the node at the specified position. <see cref="F:System.String.Empty" /> is returned if the node does not have a local name, for example if the current position references a text node.</returns>
      <param name="nodePosition">The position of the node whose local name is being retrieved.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="nodePosition" /> is invalid.</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.SeekableXPathNavigator.GetName(System.Int64)">
      <summary>When overridden in a derived class, returns the name of the node at the specified position.</summary>
      <returns>The name of the node at <paramref name="nodePosition" />. <see cref="F:System.String.Empty" /> is returned if the node does not have a name.</returns>
      <param name="nodePosition">The position of the node whose name is being retrieved.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="nodePosition" /> is invalid.</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.SeekableXPathNavigator.GetNamespace(System.Int64)">
      <summary>When overridden in a derived class, returns the namespace of the node at the specified position.</summary>
      <returns>The namespace of the node at <paramref name="nodePosition" />. <see cref="F:System.String.Empty" /> is returned if the node does not have a namespace.</returns>
      <param name="nodePosition">The position of the node whose namespace is being retrieved.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="nodePosition" /> is invalid.</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.SeekableXPathNavigator.GetNodeType(System.Int64)">
      <summary>When overridden in a derived class, returns the type of the node at the specified position.</summary>
      <returns>One of the <see cref="T:System.Xml.XPath.XPathNodeType" /> values that indicate the type of the XML node.</returns>
      <param name="nodePosition">The position of the node whose node type is being retrieved.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="nodePosition" /> is invalid.</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.SeekableXPathNavigator.GetValue(System.Int64)">
      <summary>When overridden in a derived class, returns the text value of the node at the specified position.</summary>
      <returns>The text value of the node at <paramref name="nodePosition" />. <see cref="F:System.String.Empty" /> is returned if the node does not have a text value.</returns>
      <param name="nodePosition">The position of the node whose text value is being retrieved.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="nodePosition" /> is invalid.</exception>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.ServiceThrottle">
      <summary>Controls the throughput of a service to optimize availability and performance.</summary>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentCalls">
      <summary>Gets or sets the maximum number of messages actively processing across all dispatcher objects in a <see cref="T:System.ServiceModel.ServiceHost" />.</summary>
      <returns>The upper limit of active messages in the service. The default is 16.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances">
      <summary>Gets or sets the maximum number of service objects that can execute at one time.</summary>
      <returns>The maximum number of <see cref="T:System.ServiceModel.InstanceContext" /> objects in the service at one time. The default is 26.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentSessions">
      <summary>Gets or sets a value that specifies the maximum number of sessions a <see cref="T:System.ServiceModel.ServiceHost" /> object can accept at one time.</summary>
      <returns>The maximum number of sessions a service host accepts. The default is 10.</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.XPathMessageContext">
      <summary>Defines several XPath functions and namespace mappings commonly used when evaluating XPath expressions against SOAP documents.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageContext.#ctor">
      <summary>Creates an instance of <see cref="T:System.ServiceModel.Dispatcher.XPathMessageContext" />.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageContext.#ctor(System.Xml.NameTable)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.XPathMessageContext" /> class with the specified <see cref="T:System.Xml.NameTable" />.</summary>
      <param name="table">A <see cref="T:System.Xml.NameTable" /> class used internally to store strings.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageContext.CompareDocument(System.String,System.String)">
      <summary>Compares the base Uniform Resource Identifiers (URIs) of two documents based upon the order the documents were loaded by the XSLT processor.</summary>
      <returns>Always returns 0.</returns>
      <param name="baseUri">The base URI of the first document to compare.</param>
      <param name="nextBaseUri">The base URI of the second document to compare.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageContext.PreserveWhitespace(System.Xml.XPath.XPathNavigator)">
      <summary>Evaluates whether to preserve white space nodes or strip them for the given context.</summary>
      <returns>Always returns false.</returns>
      <param name="node">The white space node that is to be preserved or stripped in the current context.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageContext.ResolveFunction(System.String,System.String,System.Xml.XPath.XPathResultType[])">
      <summary>Resolves a function reference and returns an T:System.Xml.Xsl.IXsltContextFunction that represents the function.</summary>
      <returns>An T:System.Xml.Xsl.IXsltContextFunction that represents the function.</returns>
      <param name="prefix">The prefix of the function as it appears in the XPath expression.</param>
      <param name="name">The name of the function.</param>
      <param name="argTypes">An array of argument types for the function being resolved. This allows you to select between methods with the same name (for example, overloaded methods).</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argTypes" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageContext.ResolveVariable(System.String,System.String)">
      <summary>Resolves a variable reference and returns an <see cref="T:System.Xml.Xsl.IXsltContextVariable" /> that represents the variable.</summary>
      <returns>An <see cref="T:System.Xml.Xsl.IXsltContextVariable" /> that represents the variable at runtime.</returns>
      <param name="prefix">The prefix of the variable as it appears in the XPath expression.</param>
      <param name="name">The name of the variable.</param>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.XPathMessageContext.Whitespace">
      <summary>Gets a value that indicates whether to include white space nodes in the output.</summary>
      <returns>Always returns false.</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.XPathMessageFilter">
      <summary>Represents a query on an XML document defined by an XPath 1.0 expression.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilter" /> class that matches all well-formed XML documents.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilter.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilter" /> class using an XPath expression to specify query criteria for the filter.</summary>
      <param name="xpath">A <see cref="T:System.String" /> that contains an XPath 1.0 expression. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xpath" /> is null. </exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilter.#ctor(System.String,System.Xml.XmlNamespaceManager)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilter" /> class using the specified XPath expression and namespace manager.</summary>
      <param name="xpath">An XPath 1.0 expression. </param>
      <param name="namespaces">An <see cref="T:System.Xml.XmlNamespaceManager" /> that resolves any namespace prefixes in <paramref name="xpath" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xpath" /> is null. </exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilter.#ctor(System.String,System.Xml.Xsl.XsltContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilter" /> class using a specified XPath expression and <see cref="T:System.Xml.Xsl.XsltContext" />.</summary>
      <param name="xpath">The XPath 1.0 expression for the filter. </param>
      <param name="context">An <see cref="T:System.Xml.Xsl.XsltContext" /> that resolves any namespace prefixes, custom functions or variables in <paramref name="xpath" />. </param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilter.#ctor(System.Xml.XmlReader)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilter" /> class by reading a streamed XPath with the specified XML reader.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read the streamed XPath expression. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null. </exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilter.#ctor(System.Xml.XmlReader,System.Xml.XmlNamespaceManager)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilter" /> class by reading in a streamed XPath with a specified XML reader and using the specified namespace manager.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read the streamed XPath expression. </param>
      <param name="namespaces">An <see cref="T:System.Xml.XmlNamespaceManager" /> that resolves any namespace prefixes in the XPath expression from <paramref name="reader" />. This can also be an <see cref="T:System.Xml.Xsl.XsltContext" /> that defines custom functions or variables. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="reader" /> is not positioned on the starting element.</exception>
      <exception cref="T:System.InvalidOperationException">There were problems reading the dialect attribute, namespace URI, or duplicate attributes were found.</exception>
      <exception cref="T:System.InvalidOperationException">An invalid dialect attribute was read: it was not XPath.</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilter.#ctor(System.Xml.XmlReader,System.Xml.Xsl.XsltContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilter" /> class by reading a streamed XPath with a specified XML reader and using the <see cref="T:System.Xml.Xsl.XsltContext" /> to resolve namespaces, custom functions, and variables.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read the streamed XPath expression. </param>
      <param name="context">An <see cref="T:System.Xml.Xsl.XsltContext" /> that resolves any namespace prefixes, functions, and variables in the XPath expression from <paramref name="reader" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null. </exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilter.CreateFilterTable``1">
      <summary>Creates an <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1" /> that has a specified type of data associated with it.</summary>
      <returns>An <see cref="T:System.ServiceModel.Dispatcher.IMessageFilterTable`1" /> object to which filters associated with <paramref name="FilterData" /> can be added.</returns>
      <typeparam name="FilterData">Data associated with the filters in the table.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilter.Match(System.ServiceModel.Channels.Message)">
      <summary>Tests whether a specified message satisfies the criteria of the XPath filter. This form is not allowed to access the body of the message.</summary>
      <returns>true if the <see cref="T:System.ServiceModel.Channels.Message" /> satisfies the filter criteria; otherwise, false. </returns>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> to test. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> is null. </exception>
      <exception cref="T:System.ServiceModel.Dispatcher.InvalidBodyAccessException">The XPath evaluation attempted to examine the body of the message.</exception>
      <exception cref="T:System.Xml.XPath.XPathException">A compiler error occurred. </exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilter.Match(System.ServiceModel.Channels.MessageBuffer)">
      <summary>Determines whether a buffered message satisfies the query criteria of the XPath filter.</summary>
      <returns>true if the <see cref="M:System.ServiceModel.Dispatcher.XPathMessageFilter.Match(System.ServiceModel.MessageBuffer)" /> satisfies the filter criteria; otherwise false. </returns>
      <param name="messageBuffer">The <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> to test. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> is null. </exception>
      <exception cref="T:System.Xml.XPath.XPathException">A compiler error occurred. </exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilter.Match(System.ServiceModel.Dispatcher.SeekableXPathNavigator)">
      <summary>Determines whether the XML document provided by the specified optimized XPath navigator satisfies the query criteria of the XPath filter.</summary>
      <returns>true if the data from the <see cref="T:System.ServiceModel.Dispatcher.SeekableXPathNavigator" /> satisfies the filter criteria; otherwise, false. </returns>
      <param name="navigator">The <see cref="T:System.ServiceModel.Dispatcher.SeekableXPathNavigator" /> that provides data to test. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="navigator" /> is null. </exception>
      <exception cref="T:System.Xml.XPath.XPathException">A compiler error occurred. </exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilter.Match(System.Xml.XPath.XPathNavigator)">
      <summary>Evaluates the filter over the specified XPath navigator.</summary>
      <returns>true if the data from the <see cref="T:System.Xml.XPath.XPathNavigator" /> satisfies the filter criteria; false otherwise. </returns>
      <param name="navigator">The <see cref="T:System.Xml.XPath.XPathNavigator" /> that provides data to test. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="navigator" /> is null. </exception>
      <exception cref="T:System.Xml.XPath.XPathException">A compiler error occurred. </exception>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.XPathMessageFilter.Namespaces">
      <summary>Gets the manager that resolves namespace prefixes in the XPath expression that defines the filter.</summary>
      <returns>The <see cref="T:System.Xml.XmlNamespaceManager" /> for the current <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilter" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.XPathMessageFilter.NodeQuota">
      <summary>Gets or sets the maximum number of nodes that should be looked at during filter evaluation.</summary>
      <returns>The maximum number of nodes that should be looked at during filter evaluation.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The quota is zero or negative. </exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilter.OnGetSchema">
      <summary>Gets the schema for the current XML document.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchema" /> that represents the current document.</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilter.OnReadXml(System.Xml.XmlReader)">
      <summary>Reads the current XML node.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> used to read the XML document.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="reader" /> is not positioned on the starting element.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="reader" /> encountered an empty element.</exception>
      <exception cref="T:System.InvalidOperationException">Content of a node is invalid.</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilter.OnWriteXml(System.Xml.XmlWriter)">
      <summary>Writes a node using <paramref name="writer" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> used to write the node.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null. </exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilter.ReadXPath(System.Xml.XmlReader,System.Xml.XmlNamespaceManager)">
      <summary>Initializes the current instance of the <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilter" /> with an XPath obtained from a specified XML reader using a specified namespace manager.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> used to deserialize the XPath filter.</param>
      <param name="namespaces">The <see cref="T:System.Xml.XmlNamespaceManager" /> used to manage the namespaces being read from.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilter.StaticGetSchema(System.Xml.Schema.XmlSchemaSet)">
      <summary>Gets the type of XML schema used to serialize the XPath filter.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmLSchemaType" /> used to serialize the XPath filter.</returns>
      <param name="schemas">The <see cref="T:System.Xml.Schema.XmLSchemaSet" /> that contains the cache of XML Schema definition language (XSD) schemas.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemas" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilter.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>An explicit interface implementation that gets the current schema.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchema" /> that represents the current document.</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilter.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>An explicit interface implementation that reads the current XML node.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> used to read the XML document.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilter.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>An explicit interface implementation that writes an XML node using <paramref name="writer" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> used to write the node.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilter.TrimToSize">
      <summary>Compacts the XPath filter, which releases all unused memory.</summary>
      <exception cref="T:System.NotImplementedException">In all cases. </exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilter.WriteXPath(System.Xml.XmlWriter,System.Xml.IXmlNamespaceResolver)">
      <summary>Serializes the XPath filter to an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> used to serialize the XPath filter.</param>
      <param name="resolver">The <see cref="T:System.Xml.IXmlNamespaceResolver" /> used to resolve any namespace conflict for the XPath filter.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilter.WriteXPathTo(System.Xml.XmlWriter,System.String,System.String,System.String,System.Boolean)">
      <summary>Writes the XML XPath element with a specified XML writer.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> used to write the <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilter" />. </param>
      <param name="prefix">The namespace prefix of the XPath XML element. </param>
      <param name="localName">The local name of the XPath XML element. </param>
      <param name="ns">The namespace URI to associate with the XML element. </param>
      <param name="writeNamespaces">true if namespaces should be serialized out separately as attributes; otherwise, false. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localName" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="localName" /> has length = 0. </exception>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.XPathMessageFilter.XPath">
      <summary>Gets the XPath expression that defines the query criteria for the filter.</summary>
      <returns>The XPath expression for the filter.</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1">
      <summary>Holds a collection of filter/data pairs for efficient matching.</summary>
      <typeparam name="TFilterData">The type of the filter data associated with each filter in the table.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1" /> class.</summary>
      <param name="capacity">Initial capacity of the table.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.Add(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageFilter,`0})">
      <summary>Adds a filter/<paramref name="FilterData" /> (key/value) pair to the <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1" />.</summary>
      <param name="item">The <see cref="T:System.Collections.Generic.KeyValuePair`2" /> &lt;Filter, <paramref name="FilterData" />&gt; to add to the table.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filter" /> is null.</exception>
      <exception cref="T:System.Xml.XPath.XPathException">A compiler error occurred. </exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.Add(System.ServiceModel.Dispatcher.MessageFilter,`0)">
      <summary>Adds a filter/data pair to the filter table.</summary>
      <param name="filter">The <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> used as the key of the pair added. Must be an instance of <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilter" />.</param>
      <param name="data">The <paramref name="FilterData" /> associated with the filter used as the value of the pair added.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filter" /> is null.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="filter" /> is not an <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilter" />.</exception>
      <exception cref="T:System.Xml.XPath.XPathException">A compiler error occurred. </exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.Add(System.ServiceModel.Dispatcher.XPathMessageFilter,`0)">
      <summary>Adds a filter/data pair to the filter table.</summary>
      <param name="filter">The <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilter" /> used as the key of the pair added.</param>
      <param name="data">The <paramref name="FilterData" /> associated with the filter; used as the value of the pair added.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filter" /> is null.</exception>
      <exception cref="T:System.Xml.XPath.XPathException">A compiler error occurred. </exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.Clear">
      <summary>Removes all filter/data pairs from the filter table.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.Contains(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageFilter,`0})">
      <summary>Determines whether the filter table contains a specified filter and its associated <paramref name="FilterData" />.</summary>
      <returns>true if the filter/FilterData pair is contained in the filter table; otherwise false.</returns>
      <param name="item">The <see cref="T:System.Collections.Generic.KeyValuePair`2" /> &lt;<see cref="T:System.ServiceModel.Dispatcher.MessageFilter" />, <paramref name="FilterData" />&gt; to find in the table.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.ContainsKey(System.ServiceModel.Dispatcher.MessageFilter)">
      <summary>Determines whether the filter table contains a specified filter.</summary>
      <returns>true if the <paramref name="filter" /> is contained in the filter table; otherwise false.</returns>
      <param name="filter">The <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> being tested for.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.CopyTo(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageFilter,`0}[],System.Int32)">
      <summary>Copies the filter/<paramref name="FilterData" /> pairs to an array that starts at a specified index.</summary>
      <param name="array">The array of type <see cref="T:System.Collections.Generic.KeyValuePair`2" /> &lt;Filter, <paramref name="FilterData" />&gt; to which the pairs are being copied.</param>
      <param name="arrayIndex">The index at which to begin copying.</param>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.Count">
      <summary>Gets the number of filter/data pairs currently in the filter table.</summary>
      <returns>The number of filter/data pairs currently in the filter table.</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the filter table.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" />&lt;KeyValuePair&lt;Filter, FilterData&gt;&gt; that can be used to iterate through the filter table.</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.GetMatchingFilter(System.ServiceModel.Channels.Message,System.ServiceModel.Dispatcher.MessageFilter@)">
      <summary>Returns a value that indicates whether the match criterion of exactly one filter in the table is satisfied by the specified message and returns that filter in an out parameter.</summary>
      <returns>The <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> whose query criteria are satisfied by the message; or null if no filters are found to match.</returns>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> to test.</param>
      <param name="filter">The out parameter that stores the filter that is satisfied by the <paramref name="message" />. If no filter was found, the parameter is set to its default value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> is null.</exception>
      <exception cref="T:System.ServiceModel.Dispatcher.MultipleFilterMatchesException">More than one filter matches the <paramref name="message" />.</exception>
      <exception cref="T:System.ServiceModel.Dispatcher.InvalidBodyAccessException">A filter attempted to examine the contents of the message body.</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.GetMatchingFilter(System.ServiceModel.Channels.MessageBuffer,System.ServiceModel.Dispatcher.MessageFilter@)">
      <summary>Returns a value that indicates whether the match criterion of exactly one filter in the table is satisfied by the specified message or buffered message and returns that filter in an out parameter.</summary>
      <returns>The <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> whose query criteria are satisfied by the buffered message; or null if no filters are found to match.</returns>
      <param name="messageBuffer">The <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> to test.</param>
      <param name="filter">The out parameter that stores the filter that is satisfied by the <paramref name="message" />. If no filter was found, the parameter is set to its default value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="messageBuffer" /> is null.</exception>
      <exception cref="T:System.ServiceModel.Dispatcher.MultipleFilterMatchesException">More than one filter matches the <paramref name="messageBuffer" />.</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.GetMatchingFilter(System.ServiceModel.Dispatcher.SeekableXPathNavigator,System.ServiceModel.Dispatcher.MessageFilter@)">
      <summary>Returns a value that indicates whether the match criterion of exactly one <see cref="T:System.ServiceModel.Dispatcher.SeekableXPathNavigator" /> in the table is satisfied by the specified message or buffered message and returns that filter in an out parameter.</summary>
      <returns>The <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> whose query criteria are satisfied by the navigator; or null if no filters are found to match.</returns>
      <param name="navigator">The <see cref="T:System.ServiceModel.Dispatcher.SeekableXPathNavigator" /> to test.</param>
      <param name="filter">The out parameter that stores the filter that is satisfied by the <paramref name="message" />. If no filter was found, the parameter is set to its default value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="navigator" /> is null.</exception>
      <exception cref="T:System.ServiceModel.Dispatcher.MultipleFilterMatchesException">More than one filter matches the <paramref name="navigator" />.</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.GetMatchingFilter(System.Xml.XPath.XPathNavigator,System.ServiceModel.Dispatcher.MessageFilter@)">
      <summary>Returns a value that indicates whether the match criterion of exactly one <see cref="T:System.Xml.XPath.XPathNavigator" /> in the table is satisfied by the specified message or buffered message and returns that filter in an out parameter.</summary>
      <returns>The <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> whose query criteria are satisfied by the navigator; or null if no filters are found to match.</returns>
      <param name="navigator">The <see cref="T:System.Xml.XPath.XPathNavigator" /> to test.</param>
      <param name="filter">The out parameter that stores the filter that is satisfied by the <paramref name="navigator" />. If no filter was found, the parameter is set to its default value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="navigator" /> is null.</exception>
      <exception cref="T:System.ServiceModel.Dispatcher.MultipleFilterMatchesException">More than one filter matches the <paramref name="navigator" />.</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.GetMatchingFilters(System.ServiceModel.Channels.Message,System.Collections.Generic.ICollection{System.ServiceModel.Dispatcher.MessageFilter})">
      <summary>Returns a value that indicates whether the match criterion of at least one <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilter" /> in the table is satisfied by the specified message and adds the matching filters to a collection.</summary>
      <returns>true if the match criterion of at least one filter in the table is satisfied by <paramref name="message" />; false if no filter is satisfied.</returns>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> to test.</param>
      <param name="results">The reference parameter that stores the <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> objects that match in <see cref="T:System.Collections.Generic.ICollection`1" />&lt;Filter&gt;.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="results" /> is null.</exception>
      <exception cref="T:System.ServiceModel.Dispatcher.InvalidBodyAccessException">A filter attempted to examine the contents of the message body.</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.GetMatchingFilters(System.ServiceModel.Channels.MessageBuffer,System.Collections.Generic.ICollection{System.ServiceModel.Dispatcher.MessageFilter})">
      <summary>Returns a value that indicates whether the match criterion of at least one <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilter" /> in the table is satisfied by the specified buffered message and adds the matching filters to a collection.</summary>
      <returns>true if the match criterion of at least one filter in the table is satisfied by <paramref name="messageBuffer" />; false if no filter is satisfied.</returns>
      <param name="messageBuffer">The <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> to test.</param>
      <param name="results">The reference parameter that stores the <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> objects that match in <see cref="T:System.Collections.Generic.ICollection`1" />&lt;Filter&gt;.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="results" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.GetMatchingFilters(System.ServiceModel.Dispatcher.SeekableXPathNavigator,System.Collections.Generic.ICollection{System.ServiceModel.Dispatcher.MessageFilter})">
      <summary>Returns a value that indicates whether the match criterion of at least one <see cref="T:System.ServiceModel.Dispatcher.SeekableXPathNavigator" /> in the table is satisfied by the specified buffered message and adds the matching filters to a collection.</summary>
      <returns>true if the match criterion of at least one filter in the table is satisfied by <paramref name="messageBuffer" />; false if no filter is satisfied.</returns>
      <param name="navigator">The <see cref="T:System.ServiceModel.Dispatcher.SeekableXPathNavigator" /> to test.</param>
      <param name="results">The reference parameter that stores the <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> objects that match in <see cref="T:System.Collections.Generic.ICollection`1" />&lt;Filter&gt;.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="results" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.GetMatchingFilters(System.Xml.XPath.XPathNavigator,System.Collections.Generic.ICollection{System.ServiceModel.Dispatcher.MessageFilter})">
      <summary>Returns a value that indicates whether the match criterion of at least one <see cref="T:System.Xml.XPath.XPathNavigator" /> in the table is satisfied by the specified buffered message and adds the matching filters to a collection.</summary>
      <returns>true if the match criterion of at least one filter in the table is satisfied by <paramref name="messageBuffer" />; false if no filter is satisfied.</returns>
      <param name="navigator">The <see cref="T:System.Xml.XPath.XPathNavigator" /> to test.</param>
      <param name="results">The reference parameter that stores the <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> objects that match in <see cref="T:System.Collections.Generic.ICollection`1" />&lt;Filter&gt;.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="navigator" /> is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matches" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.GetMatchingValue(System.ServiceModel.Channels.Message,`0@)">
      <summary>Returns a value that indicates whether the match criterion of exactly one <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilter" /> in the table is satisfied by the specified message and returns the matching filter data.</summary>
      <returns>true if the match criterion of one filter in the table is satisfied by the message; false if no filter is satisfied.</returns>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> to test.</param>
      <param name="data">The out parameter that stores the <paramref name="FilterData" /> for the filter that matches the <paramref name="message" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> is null.</exception>
      <exception cref="T:System.ServiceModel.Dispatcher.MultipleFilterMatchesException">More than one filter matches the <paramref name="message" />.</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.GetMatchingValue(System.ServiceModel.Channels.MessageBuffer,`0@)">
      <summary>Returns a value that indicates whether the match criterion of exactly one <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilter" /> in the table is satisfied by the specified buffered message and returns the matching filter data.</summary>
      <returns>true if the match criterion of one filter in the table is satisfied by the buffered message; false if no filter is satisfied.</returns>
      <param name="messageBuffer">The <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> to test.</param>
      <param name="data">The out parameter that stores the <paramref name="FilterData" /> for the filter that matches the <paramref name="messageBuffer" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> is null.</exception>
      <exception cref="T:System.ServiceModel.Dispatcher.MultipleFilterMatchesException">More than one filter matches the <paramref name="messageBuffer" />.</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.GetMatchingValue(System.ServiceModel.Dispatcher.SeekableXPathNavigator,`0@)">
      <summary>Returns a value that indicates whether the match criterion of exactly one <see cref="T:System.ServiceModel.Dispatcher.SeekableXPathNavigator" /> in the table is satisfied by the <paramref name="navigator" /> and returns the filter data of the matching filter in an out parameter.</summary>
      <returns>true if the match criterion of exactly one filter in the table is satisfied by the <paramref name="navigator" />; false if no filter is satisfied.</returns>
      <param name="navigator">The <see cref="T:System.ServiceModel.Dispatcher.SeekableXPathNavigator" /> to test.</param>
      <param name="data">The out parameter that stores the <paramref name="FilterData" /> that matches the <paramref name="navigator" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="navigator" /> is null.</exception>
      <exception cref="T:System.ServiceModel.Dispatcher.MultipleFilterMatchesException">More than one filter matches the <paramref name="navigator" />.</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.GetMatchingValue(System.Xml.XPath.XPathNavigator,`0@)">
      <summary>Returns a value that indicates whether the match criterion of exactly one <see cref="T:System.Xml.Xpath.XPathNavigator" /> in the table is satisfied by the <paramref name="navigator" /> and returns the filter data of the matching filter in an out parameter.</summary>
      <returns>true if the match criterion of exactly one filter in the table is satisfied by the <paramref name="navigator" />; false if no filter is satisfied.</returns>
      <param name="navigator">The <see cref="T:System.Xml.XPath.XPathNavigator" /> to test.</param>
      <param name="data">The out parameter that stores the <paramref name="FilterData" /> that matches the <paramref name="navigator" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="navigator" /> is null.</exception>
      <exception cref="T:System.ServiceModel.Dispatcher.MultipleFilterMatchesException">More than one filter matches the <paramref name="navigator" />.</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.GetMatchingValues(System.ServiceModel.Channels.Message,System.Collections.Generic.ICollection{`0})">
      <summary>Returns a value that indicates whether the match criterion of at least one filter in the table is satisfied by the specified message and adds the filter data of the matching filters to a collection.</summary>
      <returns>true if match criterion of at least one filter in the table is satisfied by <paramref name="message" />; false if no filter is satisfied.</returns>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> to test.</param>
      <param name="results">The reference parameter that stores the filter data of the matching filters in a generic <see cref="T:System.Collections.Generic.ICollection`1" />&lt;<paramref name="FilterData" />&gt;.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="results" /> is null.</exception>
      <exception cref="T:System.ServiceModel.Dispatcher.InvalidBodyAccessException">A filter attempted to examine the contents of the message body.</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.GetMatchingValues(System.ServiceModel.Channels.MessageBuffer,System.Collections.Generic.ICollection{`0})">
      <summary>Returns a value that indicates whether the match criterion of at least one filter in the table is satisfied by the specified buffered message and adds the filter data of the matching filters to a collection.</summary>
      <returns>true if the match criterion of at least one filter in the table is satisfied by <paramref name="message" />; false if no filter is satisfied.</returns>
      <param name="messageBuffer">The <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> to test.</param>
      <param name="results">The reference parameter that stores the filter data of the matching filters in a generic <see cref="T:System.Collections.Generic.ICollection`1" />&lt;<paramref name="FilterData" />&gt;.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="results" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.GetMatchingValues(System.ServiceModel.Dispatcher.SeekableXPathNavigator,System.Collections.Generic.ICollection{`0})">
      <summary>Returns a value that indicates whether the match criterion of at least one <see cref="T:System.ServiceModel.Dispatcher.SeekableXPathNavigator" /> in the table is satisfied by the <paramref name="navigator" /> and adds the filter data of the matching filters to a collection.</summary>
      <returns>true if the match criterion of at least one filter in the table is satisfied by the <paramref name="navigator" />; false if no filter is satisfied.</returns>
      <param name="navigator">The <see cref="T:System.ServiceModel.Dispatcher.SeekableXPathNavigator" /> to test.</param>
      <param name="results">The reference parameter that stores the filter data of the matching filters in a generic <see cref="T:System.Collections.Generic.ICollection`1" />&lt;<paramref name="FilterData" />&gt;.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="navigator" /> is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="results" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.GetMatchingValues(System.Xml.XPath.XPathNavigator,System.Collections.Generic.ICollection{`0})">
      <summary>Returns a value that indicates whether the match criterion of at least one <see cref="T:System.Xml.Xpath.XPathNavigator" /> in the table is satisfied by the <paramref name="navigator" /> and adds the filter data of the matching filters to a collection.</summary>
      <returns>true if the match criterion of at least one filter in the table is satisfied by the <paramref name="navigator" />; false if no filter is satisfied.</returns>
      <param name="navigator">The <see cref="T:System.Xml.Xpath.XPathNavigator" /> to test.</param>
      <param name="results">The reference parameter that stores the filter data of the matching filters in a generic <see cref="T:System.Collections.Generic.ICollection`1" />&lt;<paramref name="FilterData" />&gt;.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="navigator" /> is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="results" /> is null.</exception>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.IsReadOnly">
      <summary>The <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1" /> is not read-only.</summary>
      <returns>Always returns false.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.Item(System.ServiceModel.Dispatcher.MessageFilter)">
      <summary>Gets or sets the filter data associated with the specified <paramref name="filter" />.</summary>
      <returns>The filter data associated with the <paramref name="filter" />. If the specified <paramref name="filter" /> is not found, a get operation throws a <see cref="T:System.Collections.Generic.KeyNotFoundException" /> and a set operation creates a new filter data element with the specified <paramref name="filter" /> as key.</returns>
      <param name="filter">The <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> associated with the filter data to get or set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filter" /> is null.</exception>
      <exception cref="T:System.Xml.XPath.XPathException">A compiler error occurred. </exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and the <paramref name="filter" /> is not in the table.</exception>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.Keys">
      <summary>Gets a collection of all the filters contained in the <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> of all the <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilter" />s contained in the filter table.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.NodeQuota">
      <summary>Gets or sets the maximum number of XML document nodes that can be examined by the individual filters during a single call to a Match method. This value applies for each filter.</summary>
      <returns>The number of nodes that can be examined.</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.Remove(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageFilter,`0})">
      <summary>Removes a filter and its associated filter data from the filter table.</summary>
      <returns>true if the filter/<paramref name="FilterData" /> pair was found and removed; false if it was not found.</returns>
      <param name="item">The <see cref="T:System.Collections.Generic.KeyValuePair`2" /> &lt;Filter, <paramref name="FilterData" />&gt; to remove from the table.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.Remove(System.ServiceModel.Dispatcher.MessageFilter)">
      <summary>Removes a filter and its associated filter data from the filter table.</summary>
      <returns>true if the filter was found and removed; otherwise, false. </returns>
      <param name="filter">The <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filter" /> is null.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="filter" /> is not a <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilter" />.</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.Remove(System.ServiceModel.Dispatcher.XPathMessageFilter)">
      <summary>Removes an <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilter" /> and its associated filter data from the filter table.</summary>
      <returns>true if the <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilter" /> was found and removed; otherwise, false.</returns>
      <param name="filter">The <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilter" /> to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filter" /> is null.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="filter" /> is not an <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilter" />.</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that can iterate through the filter table.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" />&lt;KeyValuePair&lt;Filter, FilterData&gt;&gt; that can be used to iterate through the filter table.</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.TrimToSize">
      <summary>Compacts the filter table, purging any excess allocations or buffers.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.TryGetValue(System.ServiceModel.Dispatcher.MessageFilter,`0@)">
      <summary>Checks whether a filter is stored in the filter table.</summary>
      <returns>true if the <paramref name="filter" /> is present in the filter table; false otherwise.</returns>
      <param name="filter">A key to retrieve the data.</param>
      <param name="data">The <paramref name="data" /> associated with the <paramref name="filter" /> when this method returns true; otherwise, the default value for the type of the <paramref name="data" /> parameter.</param>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.Values">
      <summary>Gets a collection of all the <paramref name="FilterData" /> contained in the <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> of all the <paramref name="FilterData" /> contained in the filter table.</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.XPathMessageQueryCollection">
      <summary>Contains a collection of <see cref="T:System.ServiceModel.XPathMessageQuery" /> objects.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageQueryCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.XPathMessageQueryCollection" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageQueryCollection.Evaluate``1(System.ServiceModel.Channels.Message)">
      <summary>Runs a query against the message. The body cannot be queried.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />An enumerable collection of results that satisfy the query.</returns>
      <param name="message">The message to query.</param>
      <typeparam name="TResult">The type of the object to return.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageQueryCollection.Evaluate``1(System.ServiceModel.Channels.MessageBuffer)">
      <summary>Runs an XPath query against the message.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />An enumerable collection of results that satisfy the query.</returns>
      <param name="buffer">The message to query.</param>
      <typeparam name="TResult">The type of result to return.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageQueryCollection.InsertItem(System.Int32,System.ServiceModel.Dispatcher.MessageQuery)">
      <summary>Inserts the XPath query object into the collection at the specified index.</summary>
      <param name="index">The location in the collection to insert the item.</param>
      <param name="item">The XPath query object to insert.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageQueryCollection.RemoveItem(System.Int32)">
      <summary>Removes the item from the collection at the specified index.</summary>
      <param name="index">The location from which to remove the item.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageQueryCollection.SetItem(System.Int32,System.ServiceModel.Dispatcher.MessageQuery)">
      <summary>Replaces the element at the specified index.</summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">The new value for the element at the specified index.</param>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.XPathNavigatorException">
      <summary>The exception that is thrown when the quota of nodes allowed to be inspected by an XPathNavigator is exceeded.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathNavigatorException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.XPathNavigatorException" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathNavigatorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.XPathNavigatorException" /> class with data that specifies the source and destination of the stream and the information required to serialize the exception.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that contains all the data required to serialize the exception.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that specifies the source and destination of the stream.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathNavigatorException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.XPathNavigatorException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathNavigatorException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.XPathNavigatorException" /> class with a specified error message and the inner exception that caused the current exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that caused the current exception to be thrown.</param>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.XPathResult">
      <summary>Contains the value returned by an XPath query.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathResult.Dispose">
      <summary>Releases all resources owed by the object.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathResult.GetResultAsBoolean">
      <summary>Returns the result of the XPath query as a Boolean value.</summary>
      <returns>
        <see cref="T:System.Boolean" />
      </returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathResult.GetResultAsNodeset">
      <summary>Returns the result of the XPath query as an enumerable set of nodes.</summary>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNodeIterator" />A collection of XPath nodes that can be iterated over. </returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathResult.GetResultAsNumber">
      <summary>Returns the result of the XPath query as a number.</summary>
      <returns>
        <see cref="T:System.Double" />
      </returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathResult.GetResultAsString">
      <summary>Returns the result of the XPath query as a string.</summary>
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.XPathResult.ResultType">
      <summary>Returns the type of the value returned by the XPath query.</summary>
      <returns>
        <see cref="T:System.Xml.XPath.XPathResultType" />One of the enumeration values. To get the actual result, use the corresponding method. For example, if the value is <see cref="M:System.Xml.XPath.XPathResultType.Number" />, use the <see cref="M:System.ServiceModel.Dispatcher.XPathResult.GetResultAsNumber" /> method.</returns>
    </member>
    <member name="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationBinding">
      <summary>The <see cref="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationBinding" /> class maps Microsoft Message Queuing (MSMQ) messages to  messages.</summary>
    </member>
    <member name="M:System.ServiceModel.MsmqIntegration.MsmqIntegrationBinding.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationBinding" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.MsmqIntegration.MsmqIntegrationBinding.#ctor(System.ServiceModel.MsmqIntegration.MsmqIntegrationSecurityMode)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationBinding" /> class by using the specified <see cref="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationSecurityMode" />.</summary>
      <param name="securityMode">The security mode supported by the Message Queuing (MSMQ) integration channel</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The value is not within the range of <see cref="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationSecurityMode" /> values.</exception>
    </member>
    <member name="M:System.ServiceModel.MsmqIntegration.MsmqIntegrationBinding.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationBinding" /> class from the settings of a specified configuration binding element.</summary>
      <param name="configurationName">The value of the configurationName attribute that identifies the binding element whose settings are used to initialize the binding.</param>
    </member>
    <member name="M:System.ServiceModel.MsmqIntegration.MsmqIntegrationBinding.CreateBindingElements">
      <summary>Returns the binding elements in the basic profile stack.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.BindingElementCollection" /> that contains the stack of binding elements in the basic profile stack.</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationBinding.Security">
      <summary>Gets the <see cref="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationSecurity" /> that is associated with this binding.</summary>
      <returns>The <see cref="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationSecurity" /> that is associated with this binding.</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationBinding.SerializationFormat">
      <summary>Gets or sets the serialization format to be used to serialize or deserialize the message.</summary>
      <returns>A <see cref="T:System.ServiceModel.MsmqIntegration.MsmqMessageSerializationFormat" /> object that represents the type of serialization to use.</returns>
    </member>
    <member name="M:System.ServiceModel.MsmqIntegration.MsmqIntegrationBinding.ShouldSerializeSecurity">
      <summary>Gets a value that specifies whether security information should be serialized.</summary>
      <returns>true if security information should be serialized; otherwise false.</returns>
    </member>
    <member name="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationBindingElement">
      <summary>This binding element can be used to enable  applications to send messages to and receive messages from existing MSMQ applications that use either COM, MSMQ native APIs, or the APIs in <see cref="N:System.Messaging" />. Use this class to send and receive messages from MSMQ-based messaging applications.</summary>
    </member>
    <member name="M:System.ServiceModel.MsmqIntegration.MsmqIntegrationBindingElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationBindingElement" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.MsmqIntegration.MsmqIntegrationBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Builds a channel factory using the context provided.</summary>
      <returns>An MSMQ integration channel factory that can be used to create channels to send messages to existing MSMQ applications.</returns>
      <param name="context">The <see cref="T:System.ServiceModel.Channels.BindingContext" /> with which to build the channel factory.</param>
      <typeparam name="TChannel">The type of channel.</typeparam>
      <exception cref="T:System.ArgumentNullException">The context value is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="TChannel" /> is not IOutputChannel.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="ExactlyOnce" /> is true and <paramref name="Durable" /> is false.</exception>
      <exception cref="T:System.InvalidOperationException">CustomDeadLetterQueue is not null and DeadLetterQueue is not Custom.</exception>
      <exception cref="T:System.InvalidOperationException">DeadLetterQueue is set to Custom on Windows 2003/XP.</exception>
      <exception cref="T:System.InvalidOperationException">ExactlyOnce is false and DeadLetterQueue is Custom.</exception>
      <exception cref="T:System.InvalidOperationException">CustomDeadLetterQueue is set and if there is no write permission to write to queue or if queue does not exist.</exception>
      <exception cref="T:System.InvalidOperationException">If CustomDeadLetterQueue is non-transactional.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ServiceModel.MsmqTransportSecurity.MsmqAuthenticationMode" /> is set to WindowsDomain and if MSMQ is installed without Active Directory integration.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ServiceModel.MsmqTransportSecurity.MsmqAuthenticationMode" /> is None and <see cref="P:System.ServiceModel.MsmqTransportSecurity.MsmqProtectionLevel" /> is not None.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ServiceModel.MsmqTransportSecurity.MsmqAuthenticationMode" /> is Certificate or WindowsDomain and <see cref="P:System.ServiceModel.MsmqTransportSecurity.MsmqProtectionLevel" /> is None.</exception>
    </member>
    <member name="M:System.ServiceModel.MsmqIntegration.MsmqIntegrationBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Builds a channel listener using the context provided.</summary>
      <returns>An MSMQ integration channel listener that can be used to create channels to receive messages from existing MSMQ applications.</returns>
      <param name="context">The <see cref="T:System.ServiceModel.Channels.BindingContext" /> with which to build the channel listener.</param>
      <typeparam name="TChannel">The type of channel.</typeparam>
      <exception cref="T:System.ArgumentNullException">The context value is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="TChannel" /> is not IInputChannel.</exception>
      <exception cref="T:System.InvalidOperationException">ExactlyOnce is true and Durable is false.</exception>
      <exception cref="T:System.InvalidOperationException">Queue not readable.</exception>
      <exception cref="T:System.InvalidOperationException">ExactlyOnce is true and queue is non-transactional.</exception>
      <exception cref="T:System.InvalidOperationException">ExactlyOnce is false and queue is transactional.</exception>
      <exception cref="T:System.InvalidOperationException">ReceiveErrorHandling is set to Move and queue name contains a ";" in Windows Vista.</exception>
      <exception cref="T:System.InvalidOperationException">ExactlyOnce is set to true and cannot open retry sub-queue in Windows Vista.</exception>
      <exception cref="T:System.InvalidOperationException">ReceiveErrorHandling is set to Reject or Move and the platform is Windows Vista.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ServiceModel.MsmqTransportSecurity.MsmqAuthenticationMode" /> is set to WindowsDomain and if MSMQ is installed without Active Directory integration.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ServiceModel.MsmqTransportSecurity.MsmqAuthenticationMode" /> is None and <see cref="P:System.ServiceModel.MsmqTransportSecurity.MsmqProtectionLevel" /> is not None.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ServiceModel.MsmqTransportSecurity.MsmqAuthenticationMode" /> is Certificate or WindowsDomain and <see cref="P:System.ServiceModel.MsmqTransportSecurity.MsmqProtectionLevel" /> is None.</exception>
    </member>
    <member name="M:System.ServiceModel.MsmqIntegration.MsmqIntegrationBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Returns a value that indicates whether you can build a channel factory with the context provided.</summary>
      <returns>true if you can build a channel factory with the context provided; otherwise, false. This method returns true only if <paramref name="TChannel" /> is <see cref="T:System.ServiceModel.Channels.IOutputChannel" />.</returns>
      <param name="context">The <see cref="T:System.ServiceModel.Channels.BindingContext" /> with which to build the channel factory.</param>
      <typeparam name="TChannel">The type of channel.</typeparam>
    </member>
    <member name="M:System.ServiceModel.MsmqIntegration.MsmqIntegrationBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Returns a value that indicates whether you can build a channel listener with the context provided.</summary>
      <returns>true if you can build a channel listener with the context provided; otherwise, false.This method returns true only if <paramref name="TChannel" /> is <see cref="T:System.ServiceModel.Channels.IInputChannel" />.</returns>
      <param name="context">The <see cref="T:System.ServiceModel.Channels.BindingContext" /> with which to build the channel listener.</param>
      <typeparam name="TChannel">The type of channel.</typeparam>
    </member>
    <member name="M:System.ServiceModel.MsmqIntegration.MsmqIntegrationBindingElement.Clone">
      <summary>Returns a clone of the binding element.</summary>
      <returns>A clone of the binding element.</returns>
    </member>
    <member name="M:System.ServiceModel.MsmqIntegration.MsmqIntegrationBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Gets a property of the requested type from the specified BindingContext.</summary>
      <returns>An object of type <paramref name="T" />.</returns>
      <param name="context">The binding context.</param>
      <typeparam name="T">The type of property.</typeparam>
      <exception cref="T:System.ArgumentNullException">Context is null.</exception>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationBindingElement.Scheme">
      <summary>Gets a <see cref="T:System.String" /> that contains the scheme used by the binding element.</summary>
      <returns>The <see cref="T:System.String" /> that contains the scheme used by the binding element.</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationBindingElement.SerializationFormat">
      <summary>Gets or sets the <see cref="T:System.ServiceModel.MsmqIntegration.MsmqMessageSerializationFormat" /> to be used when serializing MSMQ messages.</summary>
      <returns>The <see cref="T:System.ServiceModel.MsmqIntegration.MsmqMessageSerializationFormat" /> to be used when serializing MSMQ messages.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is not within the values of <see cref="T:System.ServiceModel.MsmqIntegration.MsmqMessageSerializationFormat" />.</exception>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationBindingElement.TargetSerializationTypes">
      <summary>Gets or sets an array of <see cref="T:System.Type" /> objects that contain the types to which messages should be deserialized.</summary>
      <returns>An array of <see cref="T:System.Type" /> that contains the types to which messages should be deserialized.</returns>
    </member>
    <member name="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty">
      <summary>Represents the Message Queuing (MSMQ) integration properties for a message.</summary>
    </member>
    <member name="M:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty.AcknowledgeType">
      <summary>Gets or sets the acknowledgment type to return to the sending application.</summary>
      <returns>The acknowledgment type to return to the sending application.</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty.Acknowledgment">
      <summary>Gets the acknowledgment message that Message Queuing (MSMQ) generates.</summary>
      <returns>The acknowledgment message that Message Queuing generates.</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty.AdministrationQueue">
      <summary>Gets or sets the queue that receives the acknowledgment messages that Message Queuing (MSMQ) generates.</summary>
      <returns>The queue that receives the acknowledgment messages that Message Queuing generates.</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty.AppSpecific">
      <summary>Specifies additional application-specific information.</summary>
      <returns>An integer value that represents additional application-specific information.</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty.ArrivedTime">
      <summary>Gets or sets the time that the message arrived in the destination queue.</summary>
      <returns>The time that the message arrived in the destination queue.</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty.Authenticated">
      <summary>Gets or sets whether the message was authenticated.</summary>
      <returns>true if the message was authenticated; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty.Body">
      <summary>Gets or sets the content of the message.</summary>
      <returns>The content of the MSMQ message body.</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty.BodyType">
      <summary>Gets or sets the type of data that the message body contains.</summary>
      <returns>The type of data that the message body contains.</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty.CorrelationId">
      <summary>Gets or sets the message identifier used by acknowledgment, report, and response messages to reference the original message.</summary>
      <returns>The message identifier used by acknowledgment, report, and response messages to reference the original message.</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty.DestinationQueue">
      <summary>Gets or sets the intended destination queue for the message.</summary>
      <returns>The intended destination queue for the message.</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty.Extension">
      <summary>Gets or sets additional, application-defined information associated with the message.</summary>
      <returns>A byte array that contains additional, application-defined information associated with the message.</returns>
    </member>
    <member name="M:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty.Get(System.ServiceModel.Channels.Message)">
      <summary>Gets the <see cref="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty" /> for a given message.</summary>
      <returns>A <see cref="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty" /> object that contains the Message Queuing integration properties for the specified message.</returns>
      <param name="message">The message for which the Message Queuing (MSMQ) integration message properties are to be retrieved.</param>
      <exception cref="T:System.ArgumentNullException">The message is null.</exception>
      <exception cref="T:System.ArgumentNullException">The property collection on the message is null.</exception>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty.Id">
      <summary>Gets the message's identifier.</summary>
      <returns>The message's identifier.</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty.Label">
      <summary>Gets or sets an application-defined Unicode string that describes the message.</summary>
      <returns>An application-defined Unicode string that describes the message.</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty.MessageType">
      <summary>Gets the message type: Normal, Acknowledgment, or Report.</summary>
      <returns>The message type: Normal, Acknowledgment, or Report.</returns>
    </member>
    <member name="F:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty.Name">
      <summary>The constant value "MsmqIntegrationMessageProperty".</summary>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty.Priority">
      <summary>Gets or sets the message priority, which determines where in the queue the message is placed.</summary>
      <returns>The message priority. The values are defined by <see cref="T:System.Messaging.MessagePriority" />.</returns>
      <exception cref="T:System.ArgumentNullException">The value is not null and is not within the range of <see cref="T:System.Messaging.MessagePriority" /> values.</exception>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty.ResponseQueue">
      <summary>Gets or sets the queue that receives application-generated response messages.</summary>
      <returns>The URI for the queue that receives application-generated response messages.</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty.SenderId">
      <summary>Gets the identifier of the sending user.</summary>
      <returns>The identifier of the sending user.</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty.SentTime">
      <summary>Gets the date and time on the sending computer that the message was sent by the source queue manager.</summary>
      <returns>The date and time on the sending computer that the message was sent by the source queue manager.</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty.TimeToReachQueue">
      <summary>Gets or sets the maximum amount of time for the message to reach the queue.</summary>
      <returns>The maximum amount of time for the message to reach the queue.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is not null and is less than zero.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is not infinite and is greater than Int32.MaxValue milliseconds.</exception>
    </member>
    <member name="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationSecurity">
      <summary>The <see cref="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationSecurity" /> class encapsulates the transport security settings for the Message Queuing (MSMQ) integration channel.</summary>
    </member>
    <member name="M:System.ServiceModel.MsmqIntegration.MsmqIntegrationSecurity.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationSecurity" />.</summary>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationSecurity.Mode">
      <summary>Gets or sets the <see cref="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationSecurityMode" /> that is associated with the Message Queuing (MSMQ) integration channel.</summary>
      <returns>The <see cref="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationSecurityMode" /> that is associated with the Message Queuing integration channel.</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationSecurity.Transport">
      <summary>Gets the <see cref="T:System.ServiceModel.MsmqTransportSecurity" /> that is associated with the Message Queuing (MSMQ) integration channel.</summary>
      <returns>The <see cref="T:System.ServiceModel.MsmqTransportSecurity" /> that is associated with the Message Queuing integration channel.</returns>
    </member>
    <member name="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationSecurityMode">
      <summary>
        <see cref="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationSecurityMode" /> is an enumeration that specifies the security modes supported by the MSMQ integration channel.</summary>
    </member>
    <member name="F:System.ServiceModel.MsmqIntegration.MsmqIntegrationSecurityMode.None">
      <summary>No security.</summary>
    </member>
    <member name="F:System.ServiceModel.MsmqIntegration.MsmqIntegrationSecurityMode.Transport">
      <summary>Use the MSMQ transport security.</summary>
    </member>
    <member name="T:System.ServiceModel.MsmqIntegration.MsmqMessage`1">
      <summary>The <see cref="T:System.ServiceModel.MsmqIntegration.MsmqMessage`1" /> class encapsulates aMessage Queuing (MSMQ) message that is sent and received, over a Message Queuing integration channel, to and from an existing Message Queuing application.</summary>
      <typeparam name="T">Represents the message body.</typeparam>
      <exception cref="T:System.ArgumentNullException">Message body is null.</exception>
    </member>
    <member name="M:System.ServiceModel.MsmqIntegration.MsmqMessage`1.#ctor(`0)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.MsmqIntegration.MsmqMessage`1" /> class with the provided message body.</summary>
      <param name="body">The message body with which to initialize the new instance of the <see cref="T:System.ServiceModel.MsmqIntegration.MsmqMessage`1" /> class.</param>
      <exception cref="T:System.ArgumentNullException">Message body is null.</exception>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqMessage`1.AcknowledgeType">
      <summary>Gets or sets the <see cref="T:System.Messaging.AcknowledgeTypes" /> that is associated with this message.</summary>
      <returns>The <see cref="T:System.Messaging.AcknowledgeTypes" /> that is associated with this message. May be null.</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqMessage`1.Acknowledgment">
      <summary>Gets the <see cref="T:System.Messaging.Acknowledgment" /> that is associated with this message.</summary>
      <returns>The <see cref="T:System.Messaging.Acknowledgment" /> that is associated with this message. The default value is Acknowledgement.None.</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqMessage`1.AdministrationQueue">
      <summary>Gets or sets the <see cref="T:System.Uri" /> of the administration queue that is associated with this message.</summary>
      <returns>The <see cref="T:System.Uri" /> of the administration queue that is associated with this message. The default value is null.</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqMessage`1.AppSpecific">
      <summary>Gets or sets an <see cref="T:System.Int32" /> value that represents any additional application-specific information that is associated with this message.</summary>
      <returns>An <see cref="T:System.Int32" /> value that represents any additional application-specific information that is associated with this message. The default value is null when accessed by the sending application and 0 when accessed by the receiving application.</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqMessage`1.ArrivedTime">
      <summary>Gets or sets a <see cref="T:System.DateTime" /> that indicates when the message arrived in the destination queue.</summary>
      <returns>A <see cref="T:System.DateTime" /> that indicates when the message arrived in the destination queue.</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqMessage`1.Authenticated">
      <summary>Gets a Boolean value that indicates whether the message is authenticated.</summary>
      <returns>true if the message is authenticated; otherwise, false. </returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqMessage`1.Body">
      <summary>Gets or sets the body of the message.</summary>
      <returns>The body of the message.</returns>
      <exception cref="T:System.ArgumentNullException">Message body is null.</exception>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqMessage`1.BodyType">
      <summary>Gets or sets an <see cref="T:System.Int32" /> value that indicates the type of the body of the message.</summary>
      <returns>An <see cref="T:System.Int32" /> value that indicates the type of the body of the message. May be null.</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqMessage`1.CorrelationId">
      <summary>Gets or sets a <see cref="T:System.String" /> that contains the correlation identifier for this message.</summary>
      <returns>A <see cref="T:System.String" /> that contains the correlation identifier for this message.</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqMessage`1.DestinationQueue">
      <summary>Gets the <see cref="T:System.Uri" /> of the destination queue for this message.</summary>
      <returns>The <see cref="T:System.Uri" /> of the destination queue for this message.</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqMessage`1.Extension">
      <summary>Gets or sets an array of <see cref="T:System.Byte" /> that contains any additional, application-defined information that is associated with this message.</summary>
      <returns>An array of <see cref="T:System.Byte" /> that contains any additional, application-defined information that is associated with this message.</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqMessage`1.Id">
      <summary>Gets a <see cref="T:System.String" /> that contains the message identifier for this message.</summary>
      <returns>A <see cref="T:System.String" /> that contains the message identifier for this message.</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqMessage`1.Label">
      <summary>Gets or sets a <see cref="T:System.String" /> that contains the message label.</summary>
      <returns>A <see cref="T:System.String" /> that contains the message label.</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqMessage`1.MessageType">
      <summary>Gets the <see cref="T:System.Messaging.MessageType" /> that is associated with this message.</summary>
      <returns>The <see cref="T:System.Messaging.MessageType" /> that is associated with this message. May be null.</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqMessage`1.Priority">
      <summary>Gets or sets the <see cref="T:System.Messaging.MessagePriority" /> that is associated with this message.</summary>
      <returns>The <see cref="T:System.Messaging.MessagePriority" /> that is associated with this message. May be null.</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqMessage`1.ResponseQueue">
      <summary>Gets or sets the <see cref="T:System.Uri" /> of the message queue that receives response messages from the receiving application.</summary>
      <returns>This property defaults to null.This property identifies the queue that receives response messages that the receiving application returns to the sending application. The sending application specifies the response queue when it sends messages to the receiving application. The sending application can specify any available queue as the response queue.</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqMessage`1.SenderId">
      <summary>Gets an array of <see cref="T:System.Byte" /> that contains the sender identifier of the sending application.</summary>
      <returns>An array of <see cref="T:System.Byte" /> that contains the sender identifier of the sending application.</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqMessage`1.SentTime">
      <summary>Gets a <see cref="T:System.DateTime" /> that indicates when the message was sent by the queue manager of the sending application's computer.</summary>
      <returns>A <see cref="T:System.DateTime" /> that indicates when the message was sent by the queue manager of the sending application's computer. May be null.</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqMessage`1.TimeToReachQueue">
      <summary>Gets or sets a <see cref="T:System.TimeSpan" /> that indicates the maximum amount of time allowed for the message to reach the destination queue.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> that indicates the maximum amount of time allowed for the message to reach the destination queue. May be null.</returns>
    </member>
    <member name="T:System.ServiceModel.MsmqIntegration.MsmqMessageSerializationFormat">
      <summary>Indicates the formatter that is used to serialize objects that are sent as the body of an MSMQ message.</summary>
    </member>
    <member name="F:System.ServiceModel.MsmqIntegration.MsmqMessageSerializationFormat.Xml">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> is used to serialize the object.</summary>
    </member>
    <member name="F:System.ServiceModel.MsmqIntegration.MsmqMessageSerializationFormat.Binary">
      <summary>The <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter" /> is used to serialize the object.</summary>
    </member>
    <member name="F:System.ServiceModel.MsmqIntegration.MsmqMessageSerializationFormat.ActiveX">
      <summary>The ActiveX formatter is used to serialize the object.</summary>
    </member>
    <member name="F:System.ServiceModel.MsmqIntegration.MsmqMessageSerializationFormat.ByteArray">
      <summary>Serializes the object to an array of bytes.</summary>
    </member>
    <member name="F:System.ServiceModel.MsmqIntegration.MsmqMessageSerializationFormat.Stream">
      <summary>Serializes the object to a stream.</summary>
    </member>
    <member name="T:System.ServiceModel.PeerResolvers.CustomPeerResolverService">
      <summary>Provides a basic implementation of a custom peer resolver service.</summary>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.CustomPeerResolverService.#ctor">
      <summary>Initializes a new default instance of the <see cref="T:System.ServiceModel.PeerResolvers.CustomPeerResolverService" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.CustomPeerResolverService.CleanupInterval">
      <summary>Gets or sets the recurring length of time after which stale entries are deleted from the peer resolver service's registration lookup table.</summary>
      <returns>
        <see cref="T:System.TimeSpan" /> that specifies the time interval after which stale entries are deleted from the peer resolver service's registration lookup table.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The interval is either zero or greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.InvalidOperationException">An attempt to set the property was made after a call to <see cref="M:System.ServiceModel.PeerResolvers.CustomPeerResolverService.Open" />.</exception>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.CustomPeerResolverService.Close">
      <summary>Closes the peer resolver service.</summary>
      <exception cref="T:System.InvalidOperationException">The service has been closed by a previous call to this method.</exception>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.CustomPeerResolverService.ControlShape">
      <summary>Gets or sets whether referrals are shared by the peer resolver service.</summary>
      <returns>True if referrals are shared by the peer resolver service; false if they are not.</returns>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.CustomPeerResolverService.GetServiceSettings">
      <summary>Obtains the specific response settings for the peer resolver service.</summary>
      <returns>
        <see cref="T:System.ServiceModel.PeerResolvers.ServiceSettingsResponseInfo" /> that contains the specific response settings for the custom peer resolver service, including cleanup and refresh interval settings.</returns>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.CustomPeerResolverService.Open">
      <summary>Opens the peer resolver service.</summary>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.ServiceModel.PeerResolvers.CustomPeerResolverService.CleanupInterval" /> or <see cref="P:System.ServiceModel.PeerResolvers.CustomPeerResolverService.RefreshInterval" /> are set to a time span interval of 0.</exception>
      <exception cref="T:System.InvalidOperationException">The service has been started by a previous call to this method.</exception>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.CustomPeerResolverService.Refresh(System.ServiceModel.PeerResolvers.RefreshInfo)">
      <summary>Refreshes the expiry of an entry in the peer resolver service's registration lookup table.</summary>
      <returns>
        <see cref="T:System.ServiceModel.PeerResolvers.RefreshResponseInfo" /> that contains the newly refreshed registration entry.</returns>
      <param name="refreshInfo">
        <see cref="T:System.ServiceModel.PeerResolvers.RefreshInfo" /> object that contains the mesh ID and the registration ID of the entry to refresh in the peer resolver service's registration lookup table.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="refreshInfo" /> is set to null.</exception>
      <exception cref="T:System.InvalidOperationException">The custom peer resolver service has not been started with a previous call to <see cref="M:System.ServiceModel.PeerResolvers.CustomPeerResolverService.Open" />.</exception>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.CustomPeerResolverService.RefreshInterval">
      <summary>Gets or sets the length of time that entries remain valid in a peer resolver service's registration lookup table.</summary>
      <returns>
        <see cref="T:System.TimeSpan" /> that specifies the length of time that entries remain valid in a peer resolver service's registration lookup table.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The interval is either zero or greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.InvalidOperationException">An attempt to set the property was made after a call to <see cref="M:System.ServiceModel.PeerResolvers.CustomPeerResolverService.Open" />.</exception>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.CustomPeerResolverService.Register(System.Guid,System.String,System.ServiceModel.PeerNodeAddress)">
      <summary>Adds a new entry to the registration lookup table of the peer resolver service.</summary>
      <returns>A <see cref="T:System.ServiceModel.PeerResolvers.RegisterResponseInfo" /> that contains a copy of the entry added to the peer resolver service's registration lookup table.</returns>
      <param name="clientId">A <see cref="T:System.Guid" /> that specifies a unique identifier for the registration entry to register with the resolver service.</param>
      <param name="meshId">A <see cref="T:System.String" /> that specifies the mesh ID of the peer mesh in which the registration entry participates.</param>
      <param name="address">A <see cref="T:System.ServiceModel.PeerNodeAddress" /> that contains the endpoint address of the registration entry.</param>
      <exception cref="T:System.InvalidOperationException">A registration entry with the same GUID already exists in the lookup table, or the custom peer resolver service has not been started with a previous call to <see cref="M:System.ServiceModel.PeerResolvers.CustomPeerResolverService.Open" />.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.ServiceModel.PeerResolvers.RegisterInfo" /> object supplied to this method was either null or not correctly formed.</exception>
      <exception cref="T:System.ArgumentNullException">The MeshId and/or the RegistrationId property of object supplied to the <paramref name="refreshInfo" /> parameter was null.</exception>
      <exception cref="T:System.NullReferenceException">The MeshId property of the object supplied to the <paramref name="refreshInfo" /> parameter is unknown.</exception>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.CustomPeerResolverService.Register(System.ServiceModel.PeerResolvers.RegisterInfo)">
      <summary>Adds a new entry to the registration lookup table of the peer resolver service.</summary>
      <returns>
        <see cref="T:System.ServiceModel.PeerResolvers.RegisterResponseInfo" /> that contains a copy of the entry added to the peer resolver service's registration lookup table.</returns>
      <param name="registerInfo">
        <see cref="T:System.ServiceModel.PeerResolvers.RegisterInfo" />  that contains information about the registration entry to register with the peer resolver service.</param>
      <exception cref="T:System.InvalidOperationException">A registration entry with the same GUID already exists in the lookup table, or the custom peer resolver service has not been started with a previous call to <see cref="M:System.ServiceModel.PeerResolvers.CustomPeerResolverService.Open" />.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.ServiceModel.PeerResolvers.RegisterInfo" /> object supplied to this method was either null or not correctly formed.</exception>
      <exception cref="T:System.NullReferenceException">The AddressInfo property of the object supplied to the <paramref name="registerInfo" /> parameter was null.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="meshId" /> value supplied to this method is set to null.</exception>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.CustomPeerResolverService.Resolve(System.ServiceModel.PeerResolvers.ResolveInfo)">
      <summary>Returns a list of known endpoints for a registration entry.</summary>
      <returns>
        <see cref="T:System.ServiceModel.PeerResolvers.ResolveResponseInfo" /> that contains the endpoints for the registration entry in the lookup table that matches the information supplied in the <paramref name="resolveInfo" /> parameter. </returns>
      <param name="resolveInfo">
        <see cref="T:System.ServiceModel.PeerResolvers.ResolveInfo" /> that contains information on the registration entry for which endpoints, if known, are to be looked up by the peer resolver service.</param>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.ServiceModel.PeerResolvers.ResolveInfo" /> object is null or is not correctly formed.</exception>
      <exception cref="T:System.InvalidOperationException">A registration entry with the same GUID already exists in the lookup table, or the custom peer resolver service has not been started with a previous call to <see cref="M:System.ServiceModel.PeerResolvers.CustomPeerResolverService.Open" />.</exception>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.CustomPeerResolverService.Unregister(System.ServiceModel.PeerResolvers.UnregisterInfo)">
      <summary>Removes a specific entry from the registration lookup table of the peer resolver service.</summary>
      <param name="unregisterInfo">
        <see cref="T:System.ServiceModel.PeerResolvers.UnregisterInfo" /> that contains the information used to uniquely identify the registration entry to remove from the registration lookup table.</param>
      <exception cref="T:System.ArgumentException">An entry for the specified registration entry could not be found, or the supplied <see cref="T:System.ServiceModel.PeerResolvers.UnregisterInfo" /> object is null or not correctly formed.</exception>
      <exception cref="T:System.InvalidOperationException">A registration entry with the same GUID already exists in the lookup table, or the custom peer resolver service has not been started with a previous call to <see cref="M:System.ServiceModel.PeerResolvers.CustomPeerResolverService.Open" />.</exception>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.CustomPeerResolverService.Update(System.ServiceModel.PeerResolvers.UpdateInfo)">
      <summary>Updates an existing registration entry entry in the registration lookup table of the peer resolver service.</summary>
      <returns>
        <see cref="T:System.ServiceModel.PeerResolvers.UpdateInfo" /> that contains a copy of the updated registration entry entry.</returns>
      <param name="updateInfo">
        <see cref="T:System.ServiceModel.PeerResolvers.UpdateInfo" /> that uniquely identifies a specific registration entry and provides updated information for it.</param>
      <exception cref="T:System.ArgumentException">An entry for the specified registration entry could not be found, or the supplied <see cref="T:System.ServiceModel.PeerResolvers.UpdateInfo" /> object was not correctly formed.</exception>
      <exception cref="T:System.InvalidOperationException">A registration entry with the same GUID already exists in the lookup table, or the custom peer resolver service has not been started with a previous call to <see cref="M:System.ServiceModel.PeerResolvers.CustomPeerResolverService.Open" />.</exception>
    </member>
    <member name="T:System.ServiceModel.PeerResolvers.IPeerResolverContract">
      <summary>Defines a contract for the basic operations of a peer resolver service.</summary>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.IPeerResolverContract.GetServiceSettings">
      <summary>Obtains the settings for a peer resolver service.</summary>
      <returns>
        <see cref="T:System.ServiceModel.PeerResolvers.ServiceSettingsResponseInfo" /> that contains information about the peer resolver service.</returns>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.IPeerResolverContract.Refresh(System.ServiceModel.PeerResolvers.RefreshInfo)">
      <summary>Refreshes the expiry for an entry in the peer resolver service's registration lookup table.</summary>
      <returns>
        <see cref="T:System.ServiceModel.PeerResolvers.RefreshResponseInfo" /> that contains the newly refreshed registration entry.</returns>
      <param name="refreshInfo">
        <see cref="T:System.ServiceModel.PeerResolvers.RefreshInfo" /> object that contains the mesh ID and the registration ID of the entry to refresh in the peer resolver service's registration lookup table.</param>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.IPeerResolverContract.Register(System.ServiceModel.PeerResolvers.RegisterInfo)">
      <summary>Registers a peer node with the custom peer resolver service.</summary>
      <returns>
        <see cref="T:System.ServiceModel.PeerResolvers.RegisterResponseInfo" /> that contains a copy of the entry added to the peer resolver service's registration lookup table.</returns>
      <param name="registerInfo">
        <see cref="T:System.ServiceModel.PeerResolvers.RegisterInfo" />  that contains information about the peer node to register with the peer resolver service.</param>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.IPeerResolverContract.Resolve(System.ServiceModel.PeerResolvers.ResolveInfo)">
      <summary>Returns a list of known endpoints for a registration entry.</summary>
      <returns>
        <see cref="T:System.ServiceModel.PeerResolvers.ResolveResponseInfo" /> that contains the endpoints for the registration entry in the lookup table that matches the information supplied in the <paramref name="resolveInfo" /> parameter. </returns>
      <param name="resolveInfo">
        <see cref="T:System.ServiceModel.PeerResolvers.ResolveInfo" /> that contains information on the peer node for which endpoints, if known, are to be looked up by the peer resolver service.</param>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.IPeerResolverContract.Unregister(System.ServiceModel.PeerResolvers.UnregisterInfo)">
      <summary>Removes a registration from the lookup table for a peer resolver service.</summary>
      <param name="unregisterInfo">
        <see cref="T:System.ServiceModel.PeerResolvers.UnregisterInfo" /> that contains the information used to uniquely identify the peer node to remove from the registration lookup table.</param>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.IPeerResolverContract.Update(System.ServiceModel.PeerResolvers.UpdateInfo)">
      <summary>Updates the entry for a specific peer node in the peer resolver service's lookup table.</summary>
      <returns>
        <see cref="T:System.ServiceModel.PeerResolvers.UpdateInfo" /> that contains a copy of the updated peer node entry.</returns>
      <param name="updateInfo">
        <see cref="T:System.ServiceModel.PeerResolvers.UpdateInfo" /> that uniquely identifies a specific peer node entry and provides updated information for it.</param>
    </member>
    <member name="T:System.ServiceModel.PeerResolvers.PeerCustomResolverSettings">
      <summary>Contains the specific settings for an instance of a custom peer resolver service.</summary>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.PeerCustomResolverSettings.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.PeerResolvers.PeerCustomResolverSettings" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.PeerCustomResolverSettings.Address">
      <summary>Gets or sets the endpoint address of the peer node hosting the custom peer resolver service.</summary>
      <returns>
        <see cref="T:System.ServiceModel.EndpointAddress" /> that contains the endpoint address of the peer node running the custom peer resolver service.</returns>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.PeerCustomResolverSettings.Binding">
      <summary>Gets or sets the channel binding used by the custom peer resolver service.</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.Binding" /> that contains the binding settings for this service.</returns>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.PeerCustomResolverSettings.IsBindingSpecified">
      <summary>Gets whether the <see cref="P:System.ServiceModel.PeerResolvers.PeerCustomResolverSettings.Binding" /> property is set.</summary>
      <returns>True if the <see cref="P:System.ServiceModel.PeerResolvers.PeerCustomResolverSettings.Binding" /> property is set; false if it is not. </returns>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.PeerCustomResolverSettings.Resolver">
      <summary>Gets or sets the custom peer resolver instance for this service.</summary>
      <returns>
        <see cref="T:System.ServiceModel.PeerResolver" /> instance used by the service.</returns>
    </member>
    <member name="T:System.ServiceModel.PeerResolvers.PeerReferralPolicy">
      <summary>Specifies the policy on sharing referrals between peers.</summary>
    </member>
    <member name="F:System.ServiceModel.PeerResolvers.PeerReferralPolicy.Service">
      <summary>Referral policy is determined by the resolver service.</summary>
    </member>
    <member name="F:System.ServiceModel.PeerResolvers.PeerReferralPolicy.Share">
      <summary>Referrals are shared.</summary>
    </member>
    <member name="F:System.ServiceModel.PeerResolvers.PeerReferralPolicy.DoNotShare">
      <summary>Referrals are not shared.</summary>
    </member>
    <member name="T:System.ServiceModel.PeerResolvers.PeerResolverMode">
      <summary>Determines the type of peer resolver being used.</summary>
    </member>
    <member name="F:System.ServiceModel.PeerResolvers.PeerResolverMode.Auto">
      <summary>Automatically determines the type of resolver to use from the information set on the binding. </summary>
    </member>
    <member name="F:System.ServiceModel.PeerResolvers.PeerResolverMode.Pnrp">
      <summary>The PNRP resolver is used.</summary>
    </member>
    <member name="F:System.ServiceModel.PeerResolvers.PeerResolverMode.Custom">
      <summary>A custom resolver is used.</summary>
    </member>
    <member name="T:System.ServiceModel.PeerResolvers.PeerResolverSettings">
      <summary>Defines the settings for a peer resolver service.</summary>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.PeerResolverSettings.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.PeerResolvers.PeerResolverSettings" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.PeerResolverSettings.Custom">
      <summary>Gets the specific settings for a custom peer resolver.</summary>
      <returns>
        <see cref="T:System.ServiceModel.PeerResolvers.PeerCustomResolverSettings" /> that contains the settings and resolver instance for the associated custom peer resolver service.</returns>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.PeerResolverSettings.Mode">
      <summary>Gets or sets whether the peer resolver instance associated with this service is either PNRP-specific, a custom resolver, or automatically determined.</summary>
      <returns>
        <see cref="T:System.ServiceModel.PeerResolvers.PeerResolverMode" /> enumeration value that specifies the mode of the peer resolver service.</returns>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.PeerResolverSettings.ReferralPolicy">
      <summary>Gets or sets the specific referral policy used by the peer resolver service.</summary>
      <returns>
        <see cref="T:System.ServiceModel.PeerResolvers.PeerReferralPolicy" /> that specifies whether peer referrals are shared or not.</returns>
    </member>
    <member name="T:System.ServiceModel.PeerResolvers.RefreshInfo">
      <summary>Defines the information for the refresh of a registration entry by a peer resolver service.</summary>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.RefreshInfo.#ctor">
      <summary>Initializes a new default instance of the <see cref="T:System.ServiceModel.PeerResolvers.RefreshInfo" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.RefreshInfo.#ctor(System.String,System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.PeerResolvers.RefreshInfo" /> class with the provided mesh ID and unique registration ID.</summary>
      <param name="meshId">A <see cref="T:System.String" /> that identifies the mesh in which the peer node participates.</param>
      <param name="regId">A <see cref="T:System.Guid" /> that uniquely identifies the registration entry for the peer node.</param>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.RefreshInfo.HasBody">
      <summary>Indicates whether the body of the message containing a serialized instance of this type is correctly formed.</summary>
      <returns>True if the refresh information message body is correctly formed by the sender (the service client); false if it is not.</returns>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.RefreshInfo.MeshId">
      <summary>Gets the mesh ID of the registration entry to refresh.</summary>
      <returns>
        <see cref="T:System.String" /> that contains the mesh ID of the registration entry that will be refreshed in the peer resolver registration lookup table.</returns>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.RefreshInfo.RegistrationId">
      <summary>Gets the unique registration ID of the registration entry to refresh.</summary>
      <returns>
        <see cref="T:System.Guid" /> that contains the registration ID of the peer node whose entry will be refreshed in the peer resolver registration lookup table.</returns>
    </member>
    <member name="T:System.ServiceModel.PeerResolvers.RefreshResponseInfo">
      <summary>Contains response information returned as a result of a registration lookup table refresh operation on the peer resolver.</summary>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.RefreshResponseInfo.#ctor">
      <summary>Initializes a new default instance of the <see cref="T:System.ServiceModel.PeerResolvers.RefreshResponseInfo" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.RefreshResponseInfo.#ctor(System.TimeSpan,System.ServiceModel.PeerResolvers.RefreshResult)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.PeerResolvers.RefreshResponseInfo" /> class with the provided registration lifetime and refresh results.</summary>
      <param name="registrationLifetime">
        <see cref="T:System.TimeSpan" /> that specifies the new lifetime of the peer's registration.</param>
      <param name="result">
        <see cref="T:System.ServiceModel.PeerResolvers.RefreshResult" /> that specifies the result of the refresh.</param>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.RefreshResponseInfo.HasBody">
      <summary>Indicates whether the body of the message containing a serialized instance of this type is correctly formed.</summary>
      <returns>True if the refresh response information body is correctly-formed by the sender; false if it is not.</returns>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.RefreshResponseInfo.RegistrationLifetime">
      <summary>Gets or sets amount of time before a registration expires and is removed by the resolver service. </summary>
      <returns>
        <see cref="T:System.TimeSpan" /> that specifies the new amount of time before the registration entry expires and is removed by the resolver service. </returns>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.RefreshResponseInfo.Result">
      <summary>Gets or sets the result of a refresh operation.</summary>
      <returns>
        <see cref="T:System.ServiceModel.PeerResolvers.RefreshResult" /> enumeration value that indicates the result of a refresh operation on the peer resolver.</returns>
    </member>
    <member name="T:System.ServiceModel.PeerResolvers.RefreshResult">
      <summary>Specifies the results of an attempt to update the expiry of a registration entry in a running peer resolver service.</summary>
    </member>
    <member name="F:System.ServiceModel.PeerResolvers.RefreshResult.Success">
      <summary>Registration entry was successfully refreshed.</summary>
    </member>
    <member name="F:System.ServiceModel.PeerResolvers.RefreshResult.RegistrationNotFound">
      <summary>Registration entry was not found.</summary>
    </member>
    <member name="T:System.ServiceModel.PeerResolvers.RegisterInfo">
      <summary>Defines the  peer registration information to be supplied to a peer resolver service.</summary>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.RegisterInfo.#ctor">
      <summary>Initializes a new default instance of the <see cref="T:System.ServiceModel.PeerResolvers.RegisterInfo" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.RegisterInfo.#ctor(System.Guid,System.String,System.ServiceModel.PeerNodeAddress)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.PeerResolvers.RegisterInfo" /> class with the supplied client ID, mesh ID, and endpoint address(es).</summary>
      <param name="client">
        <see cref="T:System.Guid" /> that uniquely identifies the peer node to be registered.</param>
      <param name="meshId">
        <see cref="T:System.String" /> that specifies the ID of the mesh in which the peer node participates.</param>
      <param name="address">
        <see cref="T:System.ServiceModel.PeerNodeAddress" /> that specifies the endpoint address(es) of the peer node to be registered.</param>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.RegisterInfo.ClientId">
      <summary>Gets a <see cref="T:System.Guid" /> that uniquely identifies the registration entry for a peer node.</summary>
      <returns>
        <see cref="T:System.Guid" /> that uniquely identifies the registration entry of a peer node.</returns>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.RegisterInfo.HasBody">
      <summary>Indicates whether the body of the message containing a serialized instance of this type is correctly formed.</summary>
      <returns>True if the registration information body is correctly-formed by the sender; false if it is not.</returns>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.RegisterInfo.MeshId">
      <summary>Gets a mesh ID associated with the registration entry.</summary>
      <returns>
        <see cref="T:System.String" /> that contains the mesh ID (or mesh name) associated with the registration entry.</returns>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.RegisterInfo.NodeAddress">
      <summary>Gets the endpoint address(es) to associate with the node that is registering with the resolver service.</summary>
      <returns>
        <see cref="T:System.ServiceModel.PeerNodeAddress" /> that contains the endpoint address(es) to associate with the node that is registering with the resolver service. The address or addresses contained in this instance can be used to connect with the peer node within the mesh.</returns>
    </member>
    <member name="T:System.ServiceModel.PeerResolvers.RegisterResponseInfo">
      <summary>Contains response information returned by a peer resolver as the result of a registration operation.</summary>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.RegisterResponseInfo.#ctor">
      <summary>Initializes a new default instance of the <see cref="T:System.ServiceModel.PeerResolvers.RegisterResponseInfo" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.RegisterResponseInfo.#ctor(System.Guid,System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.PeerResolvers.RegisterResponseInfo" /> class with the supplied registration ID and lifetime.</summary>
      <param name="registrationId">
        <see cref="T:System.Guid" /> that uniquely identifies the newly-registered peer.</param>
      <param name="registrationLifetime">
        <see cref="T:System.TimeSpan" /> that specifies the lifetime of the peer's registration.</param>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.RegisterResponseInfo.HasBody">
      <summary>Indicates whether the body of the message containing a serialized instance of this type is correctly formed.</summary>
      <returns>True if the registration response information body is correctly-formed by the sender; false if it is not.</returns>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.RegisterResponseInfo.RegistrationId">
      <summary>Gets or sets a GUID that uniquely identifies the newly-registered peer.</summary>
      <returns>
        <see cref="T:System.Guid" /> that uniquely identifies the newly-registered peer.</returns>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.RegisterResponseInfo.RegistrationLifetime">
      <summary>Gets or sets the amount of time before a registration expires and is removed by the resolver service. </summary>
      <returns>
        <see cref="T:System.TimeSpan" /> that specifies the lifetime of the peer's registration.</returns>
    </member>
    <member name="T:System.ServiceModel.PeerResolvers.ResolveInfo">
      <summary>Defines the information for the endpoint resolution of a registration entry by a peer resolver service.</summary>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.ResolveInfo.#ctor">
      <summary>Initializes a new default instance of the <see cref="T:System.ServiceModel.PeerResolvers.ResolveInfo" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.ResolveInfo.#ctor(System.Guid,System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.PeerResolvers.ResolveInfo" /> class with the provided client ID and mesh ID, as well as the maximum number of endpoint addresses to return.</summary>
      <param name="clientId">
        <see cref="T:System.Guid" /> that contains a unique ID for the client for which endpoints are to be resolved.</param>
      <param name="meshId">
        <see cref="T:System.String" /> that contains the ID of the mesh in which the client is participating.</param>
      <param name="maxAddresses">
        <see cref="T:System.Int32" /> that contains the maximum number of client endpoint addresses to be returned by the resolve operation.</param>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.ResolveInfo.ClientId">
      <summary>Gets the ID for the registration entry to resolve.</summary>
      <returns>
        <see cref="T:System.Guid" /> that contains the unique ID for a registration entry.</returns>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.ResolveInfo.HasBody">
      <summary>Indicates whether the body of the message containing a serialized instance of this type is correctly formed.</summary>
      <returns>True if the resolve request information message body is correctly formed by the sender (the service client); false if it is not.</returns>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.ResolveInfo.MaxAddresses">
      <summary>Gets the maximum number of client endpoint addresses to be returned by the resolve operation.</summary>
      <returns>
        <see cref="T:System.Int32" /> that contains the maximum number of client endpoint addresses to be returned by the resolve operation.</returns>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.ResolveInfo.MeshId">
      <summary>Gets the mesh ID for the entry whose endpoint addresses will be resolved.</summary>
      <returns>
        <see cref="T:System.String" /> that contains the ID of the mesh in which the client is participating.</returns>
    </member>
    <member name="T:System.ServiceModel.PeerResolvers.ResolveResponseInfo">
      <summary>Contains response information returned as a result of a peer endpoint resolution operation on the peer resolver.</summary>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.ResolveResponseInfo.#ctor">
      <summary>Initializes a new default instance of the <see cref="T:System.ServiceModel.PeerResolvers.ResolveResponseInfo" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.ResolveResponseInfo.#ctor(System.ServiceModel.PeerNodeAddress[])">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.PeerResolvers.ResolveResponseInfo" /> class with the provided set of peer endpoint addresses.</summary>
      <param name="addresses">Array of <see cref="T:System.ServiceModel.PeerNodeAddress" /> objects that contain the endpoint addresses registered to the peer whose endpoints were requested in a previous resolution operation.</param>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.ResolveResponseInfo.Addresses">
      <summary>Gets or sets a collection of peer node addresses.</summary>
      <returns>Generic list &lt;IList&gt; of <see cref="T:System.ServiceModel.PeerNodeAddress" /> objects that contain the endpoint addresses registered to the peer whose endpoints were requested in a previous resolution operation.</returns>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.ResolveResponseInfo.HasBody">
      <summary>Indicates whether the body of the message containing a serialized instance of this type is correctly formed.</summary>
      <returns>True if the resolution response information body is correctly-formed by the sender; false if it is not.</returns>
    </member>
    <member name="T:System.ServiceModel.PeerResolvers.ServiceSettingsResponseInfo">
      <summary>Contains the information returned when a peer requests the settings for a peer resolver service.</summary>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.ServiceSettingsResponseInfo.#ctor">
      <summary>Initializes a new default instance of the <see cref="T:System.ServiceModel.PeerResolvers.ServiceSettingsResponseInfo" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.ServiceSettingsResponseInfo.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.PeerResolvers.ServiceSettingsResponseInfo" /> class with the supplied referral policy value.</summary>
      <param name="control">
        <see cref="T:System.Boolean" /> that indicates whether referrals are passed by the resolver service.</param>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.ServiceSettingsResponseInfo.ControlMeshShape">
      <summary>Gets or sets whether referrals are passed by the resolver service.</summary>
      <returns>True if referrals from peers participating in the mesh are passed; false if they are ignored.</returns>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.ServiceSettingsResponseInfo.HasBody">
      <summary>Indicates whether the body of the message containing a serialized instance of this type is correctly formed.</summary>
      <returns>True if the service settings response information body is correctly-formed by the sender; false if it is not.</returns>
    </member>
    <member name="T:System.ServiceModel.PeerResolvers.UnregisterInfo">
      <summary>Contains the information used to remove a registration entry from a peer resolver service.</summary>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.UnregisterInfo.#ctor">
      <summary>Initializes a new default instance of the <see cref="T:System.ServiceModel.PeerResolvers.UnregisterInfo" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.UnregisterInfo.#ctor(System.String,System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.PeerResolvers.UnregisterInfo" /> class with mesh and registration ID of the peer to remove from the registration lookup table in the resolver service.</summary>
      <param name="meshId">
        <see cref="T:System.String" /> that specifies the mesh ID of the peer whose entry is to be removed.</param>
      <param name="registrationId">
        <see cref="T:System.Guid" /> that uniquely identifies the entry to remove from the lookup table of the resolver service.</param>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.UnregisterInfo.HasBody">
      <summary>Indicates whether the body of the message containing a serialized instance of this type is correctly formed.</summary>
      <returns>True if the registration removal information body is correctly-formed by the sender; false if it is not.</returns>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.UnregisterInfo.MeshId">
      <summary>Gets the mesh ID of the peer whose entry is to be removed.</summary>
      <returns>
        <see cref="T:System.String" /> that specifies the mesh ID of the peer whose entry is to be removed.</returns>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.UnregisterInfo.RegistrationId">
      <summary>Gets the unique ID of the entry to remove from the lookup table of the resolver service.</summary>
      <returns>
        <see cref="T:System.Guid" /> that uniquely identifies the entry to remove from the lookup table of the resolver service.</returns>
    </member>
    <member name="T:System.ServiceModel.PeerResolvers.UpdateInfo">
      <summary>Contains the information used to update the endpoint address of a specific registration entry in the lookup table of a peer resolver service.</summary>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.UpdateInfo.#ctor">
      <summary>Initializes a new default instance of the <see cref="T:System.ServiceModel.PeerResolvers.UpdateInfo" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.UpdateInfo.#ctor(System.Guid,System.Guid,System.String,System.ServiceModel.PeerNodeAddress)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.PeerResolvers.UpdateInfo" /> class with the supplied peer client ID, registration ID, peer mesh ID, and peer endpoint address.</summary>
      <param name="registrationId">
        <see cref="T:System.Guid" /> that specifies the unique ID of the registration entry to update.</param>
      <param name="client">
        <see cref="T:System.Guid" /> that specifies the unique ID of the peer client that submitted the updated registration entry information.</param>
      <param name="meshId">
        <see cref="T:System.String" /> that contains the mesh ID of the entry.</param>
      <param name="address">
        <see cref="T:System.ServiceModel.PeerNodeAddress" /> that contains the endpoint address to update for the registration entry.</param>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.UpdateInfo.ClientId">
      <summary>Gets the unique ID of the peer client that submitted the updated registration entry information.</summary>
      <returns>
        <see cref="T:System.Guid" /> that specifies the unique ID of the peer client that submitted the updated registration entry information.</returns>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.UpdateInfo.HasBody">
      <summary>Indicates whether the body of the message containing a serialized instance of this type is correctly formed.</summary>
      <returns>True if the registration update information body is correctly-formed by the sender; false if it is not.</returns>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.UpdateInfo.MeshId">
      <summary>Gets the mesh ID of the registration entry.</summary>
      <returns>
        <see cref="T:System.String" /> that contains the mesh ID of the updated registration entry.</returns>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.UpdateInfo.NodeAddress">
      <summary>Gets the endpoint address to update for the registration entry.</summary>
      <returns>
        <see cref="T:System.ServiceModel.PeerNodeAddress" /> that contains the endpoint address to update for the registration entry.</returns>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.UpdateInfo.RegistrationId">
      <summary>Gets the unique ID of the registration entry to update.</summary>
      <returns>
        <see cref="T:System.Guid" /> that specifies the unique ID of the registration entry to update.</returns>
    </member>
    <member name="T:System.ServiceModel.Security.Basic128SecurityAlgorithmSuite">
      <summary>The basic 128-bit security algorithm suite.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Basic128SecurityAlgorithmSuite.#ctor">
      <summary>Creates and initializes an instance of <see cref="T:System.ServiceModel.Security.Basic128SecurityAlgorithmSuite" />.</summary>
    </member>
    <member name="P:System.ServiceModel.Security.Basic128SecurityAlgorithmSuite.DefaultAsymmetricKeyWrapAlgorithm">
      <summary>Gets the default asymmetric key wrap algorithm, RsaOaepKeyWrap.</summary>
      <returns>The default asymmetric key wrap algorithm, RsaOaepKeyWrap.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic128SecurityAlgorithmSuite.DefaultAsymmetricSignatureAlgorithm">
      <summary>Gets the default asymmetric signature algorithm, RsaSha1Signature.</summary>
      <returns>The default asymmetric signature algorithm, RsaSha1Signature.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic128SecurityAlgorithmSuite.DefaultCanonicalizationAlgorithm">
      <summary>Gets the default canonicalization algorithm, ExclusiveC14n.</summary>
      <returns>The default canonicalization algorithm, ExclusiveC14n.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic128SecurityAlgorithmSuite.DefaultDigestAlgorithm">
      <summary>Gets the default digest algorithm, Sha1Digest.</summary>
      <returns>The default digest algorithm, Sha1Digest.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic128SecurityAlgorithmSuite.DefaultEncryptionAlgorithm">
      <summary>Gets the default encryption algorithm, Aes128Encryption.</summary>
      <returns>The default encryption algorithm, Aes128Encryption.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic128SecurityAlgorithmSuite.DefaultEncryptionKeyDerivationLength">
      <summary>Gets the default encryption key derivation length, 128.</summary>
      <returns>The default encryption key derivation length, 128.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic128SecurityAlgorithmSuite.DefaultSignatureKeyDerivationLength">
      <summary>Gets the default signature key derivation length, 128.</summary>
      <returns>The default signature key derivation length, 128.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic128SecurityAlgorithmSuite.DefaultSymmetricKeyLength">
      <summary>Gets the default symmetric key length, 128.</summary>
      <returns>The default symmetric key length, 128.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic128SecurityAlgorithmSuite.DefaultSymmetricKeyWrapAlgorithm">
      <summary>Gets the default symmetric key wrap algorithm, Aes128KeyWrap.</summary>
      <returns>The default symmetric key wrap algorithm, Aes128KeyWrap.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic128SecurityAlgorithmSuite.DefaultSymmetricSignatureAlgorithm">
      <summary>Gets the default symmetric signature algorithm, HmacSha1Signature.</summary>
      <returns>The default symmetric signature algorithm, HmacSha1Signature.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Basic128SecurityAlgorithmSuite.IsAsymmetricKeyLengthSupported(System.Int32)">
      <summary>Returns true if the specified asymmetric key length is supported; otherwise, returns false. Valid lengths range from 1024 to 4096.</summary>
      <returns>true if the specified asymmetric key length is supported; otherwise, false.</returns>
      <param name="length">The asymmetric key length.</param>
    </member>
    <member name="M:System.ServiceModel.Security.Basic128SecurityAlgorithmSuite.IsSymmetricKeyLengthSupported(System.Int32)">
      <summary>Returns true if the specified symmetric key length is supported; otherwise, returns false. Valid lengths range from 128 to 256.</summary>
      <returns>true if the specified symmetric key length is supported; otherwise, false.</returns>
      <param name="length">The symmetric key length.</param>
    </member>
    <member name="M:System.ServiceModel.Security.Basic128SecurityAlgorithmSuite.ToString">
      <summary>Returns the string representation of the <see cref="T:System.ServiceModel.Security.Basic128SecurityAlgorithmSuite" />.</summary>
      <returns>The string representation of the <see cref="T:System.ServiceModel.Security.Basic128SecurityAlgorithmSuite" />.</returns>
    </member>
    <member name="T:System.ServiceModel.Security.Basic192SecurityAlgorithmSuite">
      <summary>The basic 192-bit security algorithm suite.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Basic192SecurityAlgorithmSuite.#ctor">
      <summary>Creates and initializes an instance of <see cref="T:System.ServiceModel.Security.Basic192SecurityAlgorithmSuite" />.</summary>
    </member>
    <member name="P:System.ServiceModel.Security.Basic192SecurityAlgorithmSuite.DefaultAsymmetricKeyWrapAlgorithm">
      <summary>Gets the default asymmetric key wrap algorithm, RsaOaepKeyWrap.</summary>
      <returns>The default asymmetric key wrap algorithm, RsaOaepKeyWrap.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic192SecurityAlgorithmSuite.DefaultAsymmetricSignatureAlgorithm">
      <summary>Gets the default asymmetric signature algorithm, RsaSha1Signature.</summary>
      <returns>The default asymmetric signature algorithm, RsaSha1Signature.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic192SecurityAlgorithmSuite.DefaultCanonicalizationAlgorithm">
      <summary>Gets the default canonicalization algorithm, ExclusiveC14n.</summary>
      <returns>The default canonicalization algorithm, ExclusiveC14n.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic192SecurityAlgorithmSuite.DefaultDigestAlgorithm">
      <summary>Gets the default digest algorithm, Sha1Digest.</summary>
      <returns>The default digest algorithm, Sha1Digest.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic192SecurityAlgorithmSuite.DefaultEncryptionAlgorithm">
      <summary>Gets the default encryption algorithm, Aes192Encryption.</summary>
      <returns>The default encryption algorithm, Aes192Encryption.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic192SecurityAlgorithmSuite.DefaultEncryptionKeyDerivationLength">
      <summary>Gets the default encryption key derivation length, 192.</summary>
      <returns>The default encryption key derivation length, 192.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic192SecurityAlgorithmSuite.DefaultSignatureKeyDerivationLength">
      <summary>Gets the default signature key derivation length, 192.</summary>
      <returns>The default signature key derivation length, 192.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic192SecurityAlgorithmSuite.DefaultSymmetricKeyLength">
      <summary>Gets the default symmetric key length, 192.</summary>
      <returns>The default symmetric key length, 192.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic192SecurityAlgorithmSuite.DefaultSymmetricKeyWrapAlgorithm">
      <summary>Gets the default symmetric key wrap algorithm, Aes192KeyWrap.</summary>
      <returns>The default symmetric key wrap algorithm, Aes192KeyWrap.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic192SecurityAlgorithmSuite.DefaultSymmetricSignatureAlgorithm">
      <summary>Gets the default symmetric signature algorithm, HmacSha1Signature.</summary>
      <returns>The default symmetric signature algorithm, HmacSha1Signature.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Basic192SecurityAlgorithmSuite.IsAsymmetricKeyLengthSupported(System.Int32)">
      <summary>Returns true if the specified asymmetric key length is supported; otherwise, returns false. Valid lengths are from 1024 to 4096.</summary>
      <returns>true if the specified asymmetric key length is supported; otherwise, false.</returns>
      <param name="length">The asymmetric key length.</param>
    </member>
    <member name="M:System.ServiceModel.Security.Basic192SecurityAlgorithmSuite.IsSymmetricKeyLengthSupported(System.Int32)">
      <summary>Returns true if the specified symmetric key length is supported; otherwise, returns false. Valid lengths range from 192 to 256.</summary>
      <returns>true if the specified symmetric key length is supported; otherwise, false.</returns>
      <param name="length">The symmetric key length.</param>
    </member>
    <member name="M:System.ServiceModel.Security.Basic192SecurityAlgorithmSuite.ToString">
      <summary>Returns the string representation of the <see cref="T:System.ServiceModel.Security.Basic192SecurityAlgorithmSuite" />.</summary>
      <returns>The string representation of the <see cref="T:System.ServiceModel.Security.Basic192SecurityAlgorithmSuite" />.</returns>
    </member>
    <member name="T:System.ServiceModel.Security.Basic256SecurityAlgorithmSuite">
      <summary>The basic 256-bit security algorithm suite.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Basic256SecurityAlgorithmSuite.#ctor">
      <summary>Creates and initializes an instance of <see cref="T:System.ServiceModel.Security.Basic256SecurityAlgorithmSuite" />.</summary>
    </member>
    <member name="P:System.ServiceModel.Security.Basic256SecurityAlgorithmSuite.DefaultAsymmetricKeyWrapAlgorithm">
      <summary>Gets the default asymmetric key wrap algorithm, RsaOaepKeyWrap.</summary>
      <returns>The default asymmetric key wrap algorithm, RsaOaepKeyWrap.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic256SecurityAlgorithmSuite.DefaultAsymmetricSignatureAlgorithm">
      <summary>Gets the default asymmetric signature algorithm, RsaSha1Signature.</summary>
      <returns>The default asymmetric signature algorithm, RsaSha1Signature.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic256SecurityAlgorithmSuite.DefaultCanonicalizationAlgorithm">
      <summary>Gets the default canonicalization algorithm, ExclusiveC14n.</summary>
      <returns>The default canonicalization algorithm, ExclusiveC14n.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic256SecurityAlgorithmSuite.DefaultDigestAlgorithm">
      <summary>Gets the default digest algorithm, Sha1Digest.</summary>
      <returns>The default digest algorithm, Sha1Digest.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic256SecurityAlgorithmSuite.DefaultEncryptionAlgorithm">
      <summary>Gets the default encryption algorithm, Aes256Encryption.</summary>
      <returns>The default encryption algorithm, Aes256Encryption.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic256SecurityAlgorithmSuite.DefaultEncryptionKeyDerivationLength">
      <summary>Gets the default encryption key derivation length, 256.</summary>
      <returns>The default encryption key derivation length, 256.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic256SecurityAlgorithmSuite.DefaultSignatureKeyDerivationLength">
      <summary>Gets the default signature key derivation length, 192.</summary>
      <returns>The default signature key derivation length, 192.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic256SecurityAlgorithmSuite.DefaultSymmetricKeyLength">
      <summary>Gets the default symmetric key length, 256.</summary>
      <returns>The default symmetric key length, 256.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic256SecurityAlgorithmSuite.DefaultSymmetricKeyWrapAlgorithm">
      <summary>Gets the default symmetric key wrap algorithm, Aes256KeyWrap.</summary>
      <returns>The default symmetric key wrap algorithm, Aes256KeyWrap.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic256SecurityAlgorithmSuite.DefaultSymmetricSignatureAlgorithm">
      <summary>Gets the default symmetric signature algorithm, HmacSha1Signature.</summary>
      <returns>The default symmetric signature algorithm, HmacSha1Signature.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Basic256SecurityAlgorithmSuite.IsAsymmetricKeyLengthSupported(System.Int32)">
      <summary>Returns true if the specified asymmetric key length is supported; otherwise, returns false. Valid lengths range from 1024 to 4096.</summary>
      <returns>true if the specified asymmetric key length is supported; otherwise, false.</returns>
      <param name="length">The asymmetric key length.</param>
    </member>
    <member name="M:System.ServiceModel.Security.Basic256SecurityAlgorithmSuite.IsSymmetricKeyLengthSupported(System.Int32)">
      <summary>Returns true if the specified symmetric key length is supported; otherwise, returns false. The only valid length is 256.</summary>
      <returns>true if the specified symmetric key length is supported; otherwise, false.</returns>
      <param name="length">The symmetric key length.</param>
    </member>
    <member name="M:System.ServiceModel.Security.Basic256SecurityAlgorithmSuite.ToString">
      <summary>Returns the string representation of the <see cref="T:System.ServiceModel.Security.Basic256SecurityAlgorithmSuite" />.</summary>
      <returns>The string representation of the <see cref="T:System.ServiceModel.Security.Basic256SecurityAlgorithmSuite" />.</returns>
    </member>
    <member name="T:System.ServiceModel.Security.BasicSecurityProfileVersion">
      <summary>Provides a message version that corresponds to the Basic Security Profile specification.</summary>
    </member>
    <member name="P:System.ServiceModel.Security.BasicSecurityProfileVersion.BasicSecurityProfile10">
      <summary>Provides a message version that corresponds to the Basic Security Profile specification.</summary>
      <returns>A class that has a ToString method that returns the version in text form.</returns>
    </member>
    <member name="T:System.ServiceModel.Security.BinarySecretKeyIdentifierClause">
      <summary>Represents the key identifier clause in a binary secret security token.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.BinarySecretKeyIdentifierClause.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.BinarySecretKeyIdentifierClause" /> class. </summary>
      <param name="key">A <see cref="T:System.Byte" /> array that represents the key.</param>
    </member>
    <member name="M:System.ServiceModel.Security.BinarySecretKeyIdentifierClause.#ctor(System.Byte[],System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.BinarySecretKeyIdentifierClause" /> class. </summary>
      <param name="key">The key.</param>
      <param name="cloneBuffer">A value that specifies whether to clone the buffer.</param>
    </member>
    <member name="M:System.ServiceModel.Security.BinarySecretKeyIdentifierClause.#ctor(System.Byte[],System.Boolean,System.Byte[],System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.BinarySecretKeyIdentifierClause" /> class. </summary>
      <param name="key">The key.</param>
      <param name="cloneBuffer">A value that specifies whether to clone the buffer.</param>
      <param name="derivationNonce">The "number used once" (nonce) used to derive the key.</param>
      <param name="derivationLength">Length of the key to be derived.</param>
    </member>
    <member name="P:System.ServiceModel.Security.BinarySecretKeyIdentifierClause.CanCreateKey">
      <summary>Gets a value that indicates whether this instance of the class can create a security key. </summary>
      <returns>Always true.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.BinarySecretKeyIdentifierClause.CreateKey">
      <summary>Creates a security key.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityKey" />. </returns>
    </member>
    <member name="M:System.ServiceModel.Security.BinarySecretKeyIdentifierClause.GetKeyBytes">
      <summary>Gets an array of bytes that represents the key.</summary>
      <returns>The key.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.BinarySecretKeyIdentifierClause.Matches(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>Compares whether the key of a specified clause matches this instance's key.</summary>
      <returns>true if there is a match; otherwise, false. </returns>
      <param name="keyIdentifierClause">The <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> to match.</param>
    </member>
    <member name="T:System.ServiceModel.Security.ChannelProtectionRequirements">
      <summary>Describes encryption and signature requirements that apply to different parts of messages that are transmitted on this channel.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.ChannelProtectionRequirements.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.ChannelProtectionRequirements" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Security.ChannelProtectionRequirements.#ctor(System.ServiceModel.Security.ChannelProtectionRequirements)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.ChannelProtectionRequirements" /> class from another instance of this class. </summary>
      <param name="other">The other instance of <see cref="T:System.ServiceModel.Security.ChannelProtectionRequirements" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Security.ChannelProtectionRequirements.Add(System.ServiceModel.Security.ChannelProtectionRequirements)">
      <summary>Adds the parts collections in the specified <see cref="T:System.ServiceModel.Security.ChannelProtectionRequirements" /> to the current instance of this class.</summary>
      <param name="protectionRequirements">The specified <see cref="T:System.ServiceModel.Security.ChannelProtectionRequirements" />.</param>
    </member>
    <member name="M:System.ServiceModel.Security.ChannelProtectionRequirements.Add(System.ServiceModel.Security.ChannelProtectionRequirements,System.Boolean)">
      <summary>Adds the various parts collections in the specified <see cref="T:System.ServiceModel.Security.ChannelProtectionRequirements" /> to the current instance of this class.</summary>
      <param name="protectionRequirements">The specified <see cref="T:System.ServiceModel.Security.ChannelProtectionRequirements" />.</param>
      <param name="channelScopeOnly">Specifies whether the scope is channel-only.</param>
    </member>
    <member name="M:System.ServiceModel.Security.ChannelProtectionRequirements.CreateInverse">
      <summary>Creates a new instance of this class with incoming and outgoing parts reversed.</summary>
      <returns>A new instance of this class with incoming and outgoing parts reversed.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.ChannelProtectionRequirements.IncomingEncryptionParts">
      <summary>Gets a collection of message parts that are encrypted for messages from client to server.</summary>
      <returns>A <see cref="T:System.ServiceModel.Security.ScopedMessagePartSpecification" /> collection.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.ChannelProtectionRequirements.IncomingSignatureParts">
      <summary>Gets a collection of message parts that are signed for messages from client to server.</summary>
      <returns>A <see cref="T:System.ServiceModel.Security.ScopedMessagePartSpecification" /> collection.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.ChannelProtectionRequirements.IsReadOnly">
      <summary>Gets a value that indicates whether this instance of the class is read-only. </summary>
      <returns>true if this instance of the class is read-only; otherwise, false. The default is false.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.ChannelProtectionRequirements.MakeReadOnly">
      <summary>Sets this class and its part collections to read-only.</summary>
    </member>
    <member name="P:System.ServiceModel.Security.ChannelProtectionRequirements.OutgoingEncryptionParts">
      <summary>Gets a collection of message parts that are encrypted for messages from server to client.</summary>
      <returns>A <see cref="T:System.ServiceModel.Security.ScopedMessagePartSpecification" /> collection.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.ChannelProtectionRequirements.OutgoingSignatureParts">
      <summary>Gets a collection of message parts that are signed for messages from server to client.</summary>
      <returns>A <see cref="T:System.ServiceModel.Security.ScopedMessagePartSpecification" /> collection.</returns>
    </member>
    <member name="T:System.ServiceModel.Security.DataProtectionSecurityStateEncoder">
      <summary>Provides encoding and decoding mechanisms for the security state using the Windows DataProtection API functionality. </summary>
    </member>
    <member name="M:System.ServiceModel.Security.DataProtectionSecurityStateEncoder.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.DataProtectionSecurityStateEncoder.#ctor(System.Boolean)">
      <summary>Initializes a new instance of this class. </summary>
      <param name="useCurrentUserProtectionScope">Indicates whether to use the current user protection scope.</param>
    </member>
    <member name="M:System.ServiceModel.Security.DataProtectionSecurityStateEncoder.#ctor(System.Boolean,System.Byte[])">
      <summary>Initializes a new instance of this class. </summary>
      <param name="useCurrentUserProtectionScope">Indicates whether to use the current user protection scope.</param>
      <param name="entropy">A byte array that specifies the entropy, which indicates additional randomness that the encoder could use to encode the security state.</param>
    </member>
    <member name="M:System.ServiceModel.Security.DataProtectionSecurityStateEncoder.DecodeSecurityState(System.Byte[])">
      <summary>Decodes the security state.</summary>
      <returns>A byte array that represents the decoded security state.</returns>
      <param name="data">A byte array that represents the encoded security state.</param>
    </member>
    <member name="M:System.ServiceModel.Security.DataProtectionSecurityStateEncoder.EncodeSecurityState(System.Byte[])">
      <summary>Encodes the security state.</summary>
      <returns>A byte array that represents the encoded security state.</returns>
      <param name="data">A byte array representing the decoded security state.</param>
    </member>
    <member name="M:System.ServiceModel.Security.DataProtectionSecurityStateEncoder.GetEntropy">
      <summary>Indicates the randomness of this encoder.</summary>
      <returns>An array of type <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.DataProtectionSecurityStateEncoder.ToString">
      <summary>Returns a string that represents the current <see cref="T:System.ServiceModel.Security.DataProtectionSecurityStateEncoder" /> instance.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.ServiceModel.Security.DataProtectionSecurityStateEncoder" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.DataProtectionSecurityStateEncoder.UseCurrentUserProtectionScope">
      <summary>Gets a value that indicates whether to use the current user protection scope. </summary>
      <returns>true if the current user protection scope will be used; otherwise, false. </returns>
    </member>
    <member name="T:System.ServiceModel.Security.ExpiredSecurityTokenException">
      <summary>Exception thrown when a  security token expires.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.ExpiredSecurityTokenException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.ExpiredSecurityTokenException" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Security.ExpiredSecurityTokenException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.ExpiredSecurityTokenException" /> class. </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> for the exception.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> for the exception.</param>
    </member>
    <member name="M:System.ServiceModel.Security.ExpiredSecurityTokenException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.ExpiredSecurityTokenException" /> class. </summary>
      <param name="message">The message to display.</param>
    </member>
    <member name="M:System.ServiceModel.Security.ExpiredSecurityTokenException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.ExpiredSecurityTokenException" /> class. </summary>
      <param name="message">The message to display.</param>
      <param name="innerException">The inner <see cref="T:System.Exception" /> for this instance.</param>
    </member>
    <member name="T:System.ServiceModel.Security.HttpDigestClientCredential">
      <summary>Used for digest authentication of HTTP clients.</summary>
    </member>
    <member name="P:System.ServiceModel.Security.HttpDigestClientCredential.AllowedImpersonationLevel">
      <summary>Gets or sets the level of impersonation that the client allows with the client credential provided.</summary>
      <returns>The <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> that the client grants the server as part of HTTP digest authentication.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.HttpDigestClientCredential.ClientCredential">
      <summary>Gets or sets the network credential to be used for digest-based authentication.</summary>
      <returns>The <see cref="T:System.Net.NetworkCredential" /> to be used for digest-based authentication.</returns>
    </member>
    <member name="T:System.ServiceModel.Security.IdentityVerifier">
      <summary>An abstract base class that can be implemented to verify an expected identity against an authorization context that represents a remote endpoint, or to create an identity from an endpoint address.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.IdentityVerifier.#ctor">
      <summary>Creates an instance of this class.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.IdentityVerifier.CheckAccess(System.ServiceModel.EndpointIdentity,System.IdentityModel.Policy.AuthorizationContext)">
      <summary>Implements a method to verify an identity.</summary>
      <returns>true if the identity is verified; otherwise, false. The default is false.</returns>
      <param name="identity">The <see cref="T:System.ServiceModel.EndpointIdentity" /> to verify.</param>
      <param name="authContext">The <see cref="T:System.IdentityModel.Policy.AuthorizationContext" /> to test the <paramref name="identity" /> against.</param>
    </member>
    <member name="M:System.ServiceModel.Security.IdentityVerifier.CreateDefault">
      <summary>Creates a default instance of this class.</summary>
      <returns>A default instance of <see cref="T:System.ServiceModel.Security.IdentityVerifier" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.IdentityVerifier.TryGetIdentity(System.ServiceModel.EndpointAddress,System.ServiceModel.EndpointIdentity@)">
      <summary>Tries to create an identity from an endpoint.</summary>
      <returns>true if the identity is returned; otherwise, false. The default is false. </returns>
      <param name="reference">The <see cref="T:System.ServiceModel.EndpointAddress" /> to use for creating the identity.</param>
      <param name="identity">The <see cref="T:System.ServiceModel.EndpointIdentity" /> that is returned.</param>
    </member>
    <member name="T:System.ServiceModel.Security.IEndpointIdentityProvider">
      <summary>Provides the identity of an endpoint. </summary>
    </member>
    <member name="M:System.ServiceModel.Security.IEndpointIdentityProvider.GetIdentityOfSelf(System.IdentityModel.Selectors.SecurityTokenRequirement)">
      <summary>Gets the identity of the current endpoint, based on the security token requirements passed in.</summary>
      <returns>The <see cref="T:System.ServiceModel.EndpointIdentity" /> of the current endpoint.</returns>
      <param name="tokenRequirement">The <see cref="T:System.IdentityModel.Selectors.SecurityTokenRequirement" /> that describes security token requirements.</param>
    </member>
    <member name="T:System.ServiceModel.Security.InfocardInteractiveChannelInitializer">
      <summary>Initializes a  interactive channel.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.InfocardInteractiveChannelInitializer.#ctor(System.ServiceModel.Description.ClientCredentials,System.ServiceModel.Channels.Binding)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.InfocardInteractiveChannelInitializer" /> class. </summary>
      <param name="credentials">The <see cref="T:System.ServiceModel.Description.ClientCredentials" /> from which this method is called.</param>
      <param name="binding">The binding on the service endpoint.</param>
    </member>
    <member name="M:System.ServiceModel.Security.InfocardInteractiveChannelInitializer.BeginDisplayInitializationUI(System.ServiceModel.IClientChannel,System.AsyncCallback,System.Object)">
      <summary>Begins the asynchronous method to display the initialization user interface (UI).</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> from this method.</returns>
      <param name="channel">The channel.</param>
      <param name="callback">The asynchronous callback method called when this method completes.</param>
      <param name="state">Holds the current state.</param>
    </member>
    <member name="P:System.ServiceModel.Security.InfocardInteractiveChannelInitializer.Binding">
      <summary>Gets the binding on the service endpoint.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.Binding" /> on the service endpoint.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.InfocardInteractiveChannelInitializer.EndDisplayInitializationUI(System.IAsyncResult)">
      <summary>The asynchronous callback method related to displaying the initialization user interface (UI).</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> from the corresponding Begin method.</param>
    </member>
    <member name="T:System.ServiceModel.Security.ISecureConversationSession">
      <summary>Represents a secure conversation security session. The communicating parties secure all messages on the session using a SecurityContextToken that is issued by the server as part of session establishment.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.ISecureConversationSession.TryReadSessionTokenIdentifier(System.Xml.XmlReader)">
      <summary>Tries to read the session token identifier pointed to by the XML reader.</summary>
      <returns>true if the XML pointed to by the XML reader corresponds to a SecurityKeyIdentifierClause that matches the security session's token; otherwise, false.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> with which to try to read the token.</param>
    </member>
    <member name="M:System.ServiceModel.Security.ISecureConversationSession.WriteSessionTokenIdentifier(System.Xml.XmlDictionaryWriter)">
      <summary>Tries to write the SecurityKeyIdentifierClause corresponding to the security session's token. This method is useful for sessions like WS-RM sessions that build on top of the security session and refer to the security session token's identifier as part of their session establishment protocol.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> with which to try to write the token.</param>
    </member>
    <member name="T:System.ServiceModel.Security.ISecuritySession">
      <summary>Represents a kind of ISession that enforces the requirement that all messages exchanged on the session are between the same communicating parties that established the session.</summary>
    </member>
    <member name="P:System.ServiceModel.Security.ISecuritySession.RemoteIdentity">
      <summary>Gets the identity of the remote principal.</summary>
      <returns>The <see cref="T:System.ServiceModel.EndpointIdentity" /> of the remote principal.</returns>
    </member>
    <member name="T:System.ServiceModel.Security.IssuedTokenClientCredential">
      <summary>Represents information used to obtain an issued token from a security token service.</summary>
    </member>
    <member name="P:System.ServiceModel.Security.IssuedTokenClientCredential.CacheIssuedTokens">
      <summary>Gets or sets a Boolean that specifies whether issued tokens are to be cached by the channel.</summary>
      <returns>true if tokens are to be cached; otherwise, false. The default value is true.</returns>
      <exception cref="T:System.InvalidOperationException">Attempt to set a read-only credential.</exception>
    </member>
    <member name="P:System.ServiceModel.Security.IssuedTokenClientCredential.DefaultKeyEntropyMode">
      <summary>Gets or sets the default value of <see cref="T:System.ServiceModel.Security.SecurityKeyEntropyMode" />.</summary>
      <returns>The value of <see cref="T:System.ServiceModel.Security.SecurityKeyEntropyMode" />. The default is <see cref="F:System.ServiceModel.Security.SecurityKeyEntropyMode.CombinedEntropy" />.</returns>
      <exception cref="T:System.InvalidOperationException">An attempt was made to set a read-only credential.</exception>
    </member>
    <member name="P:System.ServiceModel.Security.IssuedTokenClientCredential.IssuedTokenRenewalThresholdPercentage">
      <summary>Gets or sets the renewal threshold percentage for issued tokens.</summary>
      <returns>The renewal threshold percentage for issued tokens. The default value is 60.</returns>
      <exception cref="T:System.InvalidOperationException">An attempt was made to set a read-only credential.</exception>
    </member>
    <member name="P:System.ServiceModel.Security.IssuedTokenClientCredential.IssuerChannelBehaviors">
      <summary>Gets a collection of issuer channel behaviors.</summary>
      <returns>A <see cref="T:System.Collections.Generic.Dictionary`2" /> of <see cref="T:System.ServiceModel.Description.IEndpointBehavior" />s. </returns>
    </member>
    <member name="P:System.ServiceModel.Security.IssuedTokenClientCredential.LocalIssuerAddress">
      <summary>Gets or sets the address of the local issuer.</summary>
      <returns>The <see cref="T:System.ServiceModel.EndpointAddress" /> of the local issuer.</returns>
      <exception cref="T:System.InvalidOperationException">An attempt was made to set a read-only credential.</exception>
    </member>
    <member name="P:System.ServiceModel.Security.IssuedTokenClientCredential.LocalIssuerBinding">
      <summary>Gets or sets the binding of the local issuer.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.Binding" /> of the local issuer.</returns>
      <exception cref="T:System.InvalidOperationException">An attempt was made to set a read-only credential.</exception>
    </member>
    <member name="P:System.ServiceModel.Security.IssuedTokenClientCredential.LocalIssuerChannelBehaviors">
      <summary>Gets a collection of local issuer channel behaviors.</summary>
      <returns>A <see cref="T:System.Collections.Generic.KeyedByTypeCollection`1" /> of <see cref="T:System.ServiceModel.Description.IEndpointBehavior" />s.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.IssuedTokenClientCredential.MaxIssuedTokenCachingTime">
      <summary>Gets or sets the maximum caching time for an issued token.</summary>
      <returns>A <see cref="T:System.Timespan" /> that represents the maximum caching time for an issued token. The default value is <see cref="F:System.TimeSpan.MaxValue" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of set is less than zero.</exception>
      <exception cref="T:System.InvalidOperationException">An attempt was made to set a read-only credential.</exception>
    </member>
    <member name="T:System.ServiceModel.Security.IssuedTokenServiceCredential">
      <summary>Allows a service to configure properties associated with the federated credential presented by the client.</summary>
    </member>
    <member name="P:System.ServiceModel.Security.IssuedTokenServiceCredential.AllowedAudienceUris">
      <summary>Gets a collection of strings that specify named users of a service.</summary>
      <returns>A generic list of URIs.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.IssuedTokenServiceCredential.AllowUntrustedRsaIssuers">
      <summary>Gets or sets a value indicating whether to allow untrusted RSA token issuers. </summary>
      <returns>true if untrusted RSA token issuers are allowed; otherwise, false. The default is false.</returns>
      <exception cref="T:System.InvalidOperationException">Trying to change a read-only token.</exception>
    </member>
    <member name="P:System.ServiceModel.Security.IssuedTokenServiceCredential.AudienceUriMode">
      <summary>Gets an enumerated value that indicates whether the audience restriction condition should be validated.</summary>
      <returns>true if the audience restriction condition should be validated; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.IssuedTokenServiceCredential.CertificateValidationMode">
      <summary>Gets or sets the certificate validation mode. </summary>
      <returns>A <see cref="T:System.ServiceModel.Security.X509CertificateValidationMode" /> enumeration entry that specifies how the certificate is to be validated.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.IssuedTokenServiceCredential.CustomCertificateValidator">
      <summary>Gets or sets a custom X.509 certificate validator. </summary>
      <returns>A custom X.509 certificate validator.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.IssuedTokenServiceCredential.KnownCertificates">
      <summary>Gets a list of known certificates. </summary>
      <returns>A list of known certificates.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.IssuedTokenServiceCredential.RevocationMode">
      <summary>Gets or sets the revocation mode. </summary>
      <returns>The revocation mode.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.IssuedTokenServiceCredential.SamlSerializer">
      <summary>Gets or sets the custom <see cref="T:System.IdentityModel.Tokens.SamlSerializer" /> for issued service credentials.</summary>
      <returns>The custom <see cref="T:System.IdentityModel.Tokens.SamlSerializer" /> for the service.</returns>
      <exception cref="T:System.InvalidOperationException">Attempted to set a read-only credential.</exception>
    </member>
    <member name="P:System.ServiceModel.Security.IssuedTokenServiceCredential.TrustedStoreLocation">
      <summary>Gets or sets the trusted store location. </summary>
      <returns>A trusted store location.</returns>
    </member>
    <member name="T:System.ServiceModel.Security.KeyNameIdentifierClause">
      <summary>Represents the key name identifier clause in a security token.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.KeyNameIdentifierClause.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.KeyNameIdentifierClause" /> class. </summary>
      <param name="keyName">The key name.</param>
    </member>
    <member name="P:System.ServiceModel.Security.KeyNameIdentifierClause.KeyName">
      <summary>Gets the key name.</summary>
      <returns>The key name.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.KeyNameIdentifierClause.Matches(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>Checks whether a <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> matches the current instance of this class.</summary>
      <returns>true if there is a match; otherwise, false. </returns>
      <param name="keyIdentifierClause">The <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />  that is to be compared.</param>
    </member>
    <member name="M:System.ServiceModel.Security.KeyNameIdentifierClause.Matches(System.String)">
      <summary>Checks whether the specified key name matches the current instance's key name.</summary>
      <returns>true if there is a match; otherwise, false. </returns>
      <param name="keyName">The security key name clause.</param>
    </member>
    <member name="M:System.ServiceModel.Security.KeyNameIdentifierClause.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current Object. (Inherited from <see cref="T:System.Object" />)</summary>
      <returns>The current Object.</returns>
    </member>
    <member name="T:System.ServiceModel.Security.MessagePartSpecification">
      <summary>Specifies which parts are included in a message.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.MessagePartSpecification.#ctor">
      <summary>Initializes an empty <see cref="T:System.ServiceModel.Security.MessagePartSpecification" />.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.MessagePartSpecification.#ctor(System.Boolean)">
      <summary>Initializes a new <see cref="T:System.ServiceModel.Security.MessagePartSpecification" /> and specifies whether the message body is included.</summary>
      <param name="isBodyIncluded">Initializes whether the message body is included in the specification.</param>
    </member>
    <member name="M:System.ServiceModel.Security.MessagePartSpecification.#ctor(System.Boolean,System.Xml.XmlQualifiedName[])">
      <summary>Initializes a new <see cref="T:System.ServiceModel.Security.MessagePartSpecification" /> with an array of message headers.  </summary>
      <param name="isBodyIncluded">Initializes whether the message body is included in the specification.</param>
      <param name="headerTypes">The array of header types to use.</param>
    </member>
    <member name="M:System.ServiceModel.Security.MessagePartSpecification.#ctor(System.Xml.XmlQualifiedName[])">
      <summary>Initializes a new <see cref="T:System.ServiceModel.Security.MessagePartSpecification" /> with an array of message headers.</summary>
      <param name="headerTypes">The array of header types to use.</param>
    </member>
    <member name="M:System.ServiceModel.Security.MessagePartSpecification.Clear">
      <summary>Clears the list of headers in this specification.</summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.ServiceModel.Security.MessagePartSpecification" /> is read only.</exception>
    </member>
    <member name="P:System.ServiceModel.Security.MessagePartSpecification.HeaderTypes">
      <summary>Gets the header types for this specification.</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> that holds the header types for this message specification.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.MessagePartSpecification.IsBodyIncluded">
      <summary>Gets or sets a value that indicates whether the message body is included in this specification.</summary>
      <returns>true if the message body is included in this specification; otherwise, false.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.ServiceModel.Security.MessagePartSpecification" /> is read only.</exception>
    </member>
    <member name="P:System.ServiceModel.Security.MessagePartSpecification.IsReadOnly">
      <summary>Gets a value that indicates whether the specification is read only.</summary>
      <returns>true if the specification is read only; otherwise, false.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.MessagePartSpecification.MakeReadOnly">
      <summary>Sets the specification to read only.</summary>
    </member>
    <member name="P:System.ServiceModel.Security.MessagePartSpecification.NoParts">
      <summary> Gets an empty instance of this class.</summary>
      <returns>An empty instance of this class. </returns>
    </member>
    <member name="M:System.ServiceModel.Security.MessagePartSpecification.Union(System.ServiceModel.Security.MessagePartSpecification)">
      <summary>Merges two message part specifications.</summary>
      <param name="specification">The <see cref="T:System.ServiceModel.Security.MessagePartSpecification" /> to merge.</param>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:System.ServiceModel.Security.MessagePartSpecification" /> is read only.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="specification" /> is null.</exception>
    </member>
    <member name="T:System.ServiceModel.Security.MessageProtectionOrder">
      <summary>Specifies the order of operations that protect a message.</summary>
    </member>
    <member name="F:System.ServiceModel.Security.MessageProtectionOrder.SignBeforeEncrypt">
      <summary>Specifies that a digital signature is generated for the SOAP message before any portion of the SOAP message is encrypted, but the digital signature is not encrypted.</summary>
    </member>
    <member name="F:System.ServiceModel.Security.MessageProtectionOrder.SignBeforeEncryptAndEncryptSignature">
      <summary>Specifies that a digital signature is generated for the SOAP message before any portion of the SOAP message is encrypted, and the digital signature is encrypted.</summary>
    </member>
    <member name="F:System.ServiceModel.Security.MessageProtectionOrder.EncryptBeforeSign">
      <summary>Specifies that the SOAP message is encrypted before a digital signature is generated for the SOAP message.</summary>
    </member>
    <member name="T:System.ServiceModel.Security.MessageSecurityException">
      <summary>Represents an exception that occurred when there is something wrong with the security applied on a message. </summary>
    </member>
    <member name="M:System.ServiceModel.Security.MessageSecurityException.#ctor">
      <summary>Initializes an empty instance of the <see cref="T:System.ServiceModel.Security.MessageSecurityException" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.MessageSecurityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.MessageSecurityException" /> class from the specified instances of the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" /> classes.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that contains the information required to serialize the new <see cref="T:System.ServiceModel.Security.MessageSecurityException" /> instance.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains the source of the serialized stream associated with the new <see cref="T:System.ServiceModel.Security.MessageSecurityException" /> instance.</param>
    </member>
    <member name="M:System.ServiceModel.Security.MessageSecurityException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.MessageSecurityException" /> class with an error string.</summary>
      <param name="message">The error message.</param>
    </member>
    <member name="M:System.ServiceModel.Security.MessageSecurityException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.MessageSecurityException" /> class with an error string and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message.</param>
      <param name="innerException">The inner exception reference.</param>
    </member>
    <member name="T:System.ServiceModel.Security.PeerCredential">
      <summary>Contains the credentials used when authenticating a peer node within a peer mesh.</summary>
    </member>
    <member name="P:System.ServiceModel.Security.PeerCredential.Certificate">
      <summary>Gets or sets an X509 certificate for the peer.</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> that contains the X509 certificate for the peer.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.PeerCredential.MeshPassword">
      <summary>Gets or sets the password used by the peer to authenticate with the peer mesh.</summary>
      <returns>String value that specifies the password used by the peer to authenticate with the peer mesh.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.PeerCredential.MessageSenderAuthentication">
      <summary>Gets or sets the message sender authentication validator.</summary>
      <returns>
        <see cref="T:System.ServiceModel.Security.X509PeerCertificateAuthentication" /> that contains the message sender authentication validator.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.PeerCredential.PeerAuthentication">
      <summary>Gets or sets the peer authentication object.</summary>
      <returns>
        <see cref="T:System.ServiceModel.Security.X509PeerCertificateAuthentication" /> that contains the peer authentication object.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.PeerCredential.SetCertificate(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.X509FindType,System.Object)">
      <summary>Sets the certificate with specific search criteria.</summary>
      <param name="storeLocation">
        <see cref="T:System.Security.Cryptography.X509Certificates.StoreLocation" /> that contains the location of the certificate store.</param>
      <param name="storeName">
        <see cref="T:System.Security.Cryptography.X509Certificates.StoreName" /> that contains the certificate name.</param>
      <param name="findType">
        <see cref="T:System.Security.Cryptography.X509Certificates.X509FindType" /> that contains the search criteria. </param>
      <param name="findValue">
        <see cref="T:System.Object" /> that contains the value to search on.</param>
    </member>
    <member name="M:System.ServiceModel.Security.PeerCredential.SetCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName)">
      <summary>Sets the certificate.</summary>
      <param name="subjectName">The subject name of the certificate.</param>
      <param name="storeLocation">
        <see cref="T:System.Security.Cryptography.X509Certificates.StoreLocation" /> that contains the location of the certificate store.</param>
      <param name="storeName">
        <see cref="T:System.Security.Cryptography.X509Certificates.StoreName" /> that contains the certificate name.</param>
    </member>
    <member name="T:System.ServiceModel.Security.ScopedMessagePartSpecification">
      <summary>Specifies which parts are included in a message.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.ScopedMessagePartSpecification.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.ScopedMessagePartSpecification" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Security.ScopedMessagePartSpecification.#ctor(System.ServiceModel.Security.ScopedMessagePartSpecification)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.ScopedMessagePartSpecification" /> class from another instance of this class. </summary>
      <param name="other">The other <see cref="T:System.ServiceModel.Security.ScopedMessagePartSpecification" />.</param>
    </member>
    <member name="P:System.ServiceModel.Security.ScopedMessagePartSpecification.Actions">
      <summary>Gets a collection of action keys.</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> of type <see cref="T:System.String" /> that contains the keys of a collection of action parts.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.ScopedMessagePartSpecification.AddParts(System.ServiceModel.Security.MessagePartSpecification)">
      <summary>Adds channel message parts to the collections in the instance of this class.</summary>
      <param name="parts">The <see cref="T:System.ServiceModel.Security.MessagePartSpecification" /> that contains the parts to be added.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parts" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.ServiceModel.Security.MessagePartSpecification" /> is read-only.</exception>
    </member>
    <member name="M:System.ServiceModel.Security.ScopedMessagePartSpecification.AddParts(System.ServiceModel.Security.MessagePartSpecification,System.String)">
      <summary>Adds message parts to the MessagePartSpecification that corresponds to the specified action.</summary>
      <param name="parts">The <see cref="T:System.ServiceModel.Security.MessagePartSpecification" /> that contains the parts to be added.</param>
      <param name="action">The action key to match to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parts" /> or <paramref name="action" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.ServiceModel.Security.MessagePartSpecification" /> is read-only.</exception>
    </member>
    <member name="P:System.ServiceModel.Security.ScopedMessagePartSpecification.ChannelParts">
      <summary>Gets a message part specification that contains the channel parts.</summary>
      <returns>A <see cref="T:System.ServiceModel.Security.MessagePartSpecification" /> that contains the channel parts.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.ScopedMessagePartSpecification.IsReadOnly">
      <summary>Indicates whether the specification is read-only.</summary>
      <returns>true if the specification is read-only; otherwise, false.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.ScopedMessagePartSpecification.MakeReadOnly">
      <summary>Sets the specification to read-only.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.ScopedMessagePartSpecification.TryGetParts(System.String,System.Boolean,System.ServiceModel.Security.MessagePartSpecification@)">
      <summary>Checks whether there are parts that match a given action key.</summary>
      <returns>true if matching parts were found; otherwise, false.</returns>
      <param name="action">The action key.</param>
      <param name="excludeChannelScope">When true, restricts the parts to the current channel.</param>
      <param name="parts">When this method returns, contains a <see cref="T:System.ServiceModel.Security.MessagePartSpecification" /> that contains the parts found. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.ServiceModel.Security.ScopedMessagePartSpecification.TryGetParts(System.String,System.ServiceModel.Security.MessagePartSpecification@)">
      <summary>Checks whether there are parts that match a given action key.</summary>
      <returns>true if matching parts were found; otherwise, false. </returns>
      <param name="action">The action key.</param>
      <param name="parts">When this method returns, contains a <see cref="T:System.ServiceModel.Security.MessagePartSpecification" /> that contains the parts found. This parameter is passed uninitialized. </param>
    </member>
    <member name="T:System.ServiceModel.Security.SecureConversationServiceCredential">
      <summary>Provides credential settings for a secure conversation service.</summary>
    </member>
    <member name="P:System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes">
      <summary>Gets a collection of the <see cref="T:System.Type" /> claims for cookie serialization. </summary>
      <returns>A collection of the <see cref="T:System.Type" /> claims for cookie serialization.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder">
      <summary>Gets or sets a customized <see cref="T:System.ServiceModel.Security.SecurityStateEncoder" /> for encoding and decoding cookie serialization. </summary>
      <returns>A <see cref="T:System.ServiceModel.Security.SecurityStateEncoder" /> object, which is a customization of <see cref="T:System.ServiceModel.Security.DataProtectionSecurityStateEncoder" />.</returns>
    </member>
    <member name="T:System.ServiceModel.Security.SecureConversationVersion">
      <summary>Contains the set of supported WS-SecureConversation versions. This is an abstract class.</summary>
    </member>
    <member name="P:System.ServiceModel.Security.SecureConversationVersion.Default">
      <summary>Returns the default version.</summary>
      <returns>A <see cref="T:System.ServiceModel.Security.SecureConversationVersion" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecureConversationVersion.Namespace">
      <summary>Returns the namespace for this WS-SecureConversation version.</summary>
      <returns>The <see cref="T:System.Xml.XmlDictionaryString" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecureConversationVersion.Prefix">
      <summary>Returns the prefix.</summary>
      <returns>The <see cref="T:System.Xml.XmlDictionaryString" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecureConversationVersion.WSSecureConversation13">
      <summary>Gets version 1.3 of WS-SecureConversation.</summary>
      <returns>A <see cref="T:System.ServiceModel.Security.SecureConversationVersion" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecureConversationVersion.WSSecureConversationFeb2005">
      <summary>Gets the February 2005 version of WS-SecureConversation.</summary>
      <returns>A <see cref="T:System.ServiceModel.Security.SecureConversationVersion" />.</returns>
    </member>
    <member name="T:System.ServiceModel.Security.SecurityAccessDeniedException">
      <summary>Represents the security exception that is thrown when a security authorization request fails.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityAccessDeniedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.SecurityAccessDeniedException" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityAccessDeniedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.SecurityAccessDeniedException" /> class using the specified serialization information and context objects. </summary>
      <param name="info">Information relevant to the deserialization process.</param>
      <param name="context">The context of the deserialization process.</param>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityAccessDeniedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.SecurityAccessDeniedException" /> class using the specified message. </summary>
      <param name="message">The description of the error condition.</param>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityAccessDeniedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.SecurityAccessDeniedException" /> class using the specified message and the inner exception. </summary>
      <param name="message">The description of the error condition.</param>
      <param name="innerException">The inner exception to be used.</param>
    </member>
    <member name="T:System.ServiceModel.Security.SecurityAlgorithmSuite">
      <summary>Specifies properties of algorithms. This is an abstract class.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityAlgorithmSuite.#ctor">
      <summary>Initializes a new <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" />.</summary>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Basic128">
      <summary>Gets the Basic128 algorithm suite.</summary>
      <returns>The 128-bit Basic <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Basic128Rsa15">
      <summary>Gets an algorithm suite that uses RSA15 as the key wrap algorithm and 128-bit Basic as the message encryption algorithm.</summary>
      <returns>A <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Basic128Sha256">
      <summary>Gets an algorithm suite that uses SHA256 for the signature digest and 128-bit Basic as the message encryption algorithm.</summary>
      <returns>A <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Basic128Sha256Rsa15">
      <summary>Gets an algorithm suite that uses RSA15 as the key wrap algorithm, SHA256 for the signature digest, and 128-bit Basic as the message encryption algorithm.</summary>
      <returns>A <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Basic192">
      <summary>Gets an algorithm suite that uses 192-bit Basic as the message encryption algorithm.</summary>
      <returns>A <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" /> .</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Basic192Rsa15">
      <summary>Gets an algorithm suite that uses RSA15 as the key wrap algorithm and 192-bit Basic as the message encryption algorithm.</summary>
      <returns>A <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Basic192Sha256">
      <summary>Gets an algorithm suite which uses SHA256 for the signature digest and 192-bit Basic as the message encryption algorithm.</summary>
      <returns>A <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Basic192Sha256Rsa15">
      <summary>Gets an algorithm suite that uses RSA15 as the key wrap algorithm, SHA256 for the signature digest, and 192-bit Basic as the message encryption algorithm.</summary>
      <returns>A <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" /> .</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Basic256">
      <summary>Gets an algorithm suite that uses 256-bit Basic as the message encryption algorithm.</summary>
      <returns>A <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Basic256Rsa15">
      <summary>Gets an algorithm suite that uses RSA15 as the key wrap algorithm and 256-bit Basic as the message encryption algorithm.</summary>
      <returns>A <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Basic256Sha256">
      <summary>Gets an algorithm suite that uses SHA256 for the signature digest and 256-bit Basic as the message encryption algorithm.</summary>
      <returns>A <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Basic256Sha256Rsa15">
      <summary>Gets an algorithm suite that uses RSA15 as the key wrap algorithm, SHA256 for the signature digest, and 128-bit Basic as the message encryption algorithm.</summary>
      <returns>A <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Default">
      <summary>Gets the default algorithm suite.</summary>
      <returns>The default <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" /> is <see cref="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Basic256" />, which specifies 256-bit Advanced Encryption Standard (AES) as the symmetric encryption algorithm.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.DefaultAsymmetricKeyWrapAlgorithm">
      <summary>Gets the default asymmetric key wrap algorithm as a string.</summary>
      <returns>A <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.DefaultAsymmetricSignatureAlgorithm">
      <summary>Gets the default asymmetric signature algorithm as a string.</summary>
      <returns>A <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.DefaultCanonicalizationAlgorithm">
      <summary>Gets the default canonicalization algorithm as a string.</summary>
      <returns>A <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.DefaultDigestAlgorithm">
      <summary>Gets the default digest algorithm as a string.</summary>
      <returns>A <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.DefaultEncryptionAlgorithm">
      <summary>Gets the default encryption algorithm as a string.</summary>
      <returns>A <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.DefaultEncryptionKeyDerivationLength">
      <summary>Gets the default encryption key derivation length as an <see cref="T:System.Int32" /> value.</summary>
      <returns>An <see cref="T:System.Int32" /> value.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.DefaultSignatureKeyDerivationLength">
      <summary>Gets the default signature key derivation length as an <see cref="T:System.Int32" /> value.</summary>
      <returns>An <see cref="T:System.Int32" /> value.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.DefaultSymmetricKeyLength">
      <summary>Gets the default symmetric key length as an <see cref="T:System.Int32" /> value.</summary>
      <returns>An <see cref="T:System.Int32" /> value.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.DefaultSymmetricKeyWrapAlgorithm">
      <summary>Gets the default symmetric key wrap algorithm as a string.</summary>
      <returns>A <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.DefaultSymmetricSignatureAlgorithm">
      <summary>Gets the default symmetric algorithm as a string.</summary>
      <returns>A <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityAlgorithmSuite.IsAsymmetricKeyLengthSupported(System.Int32)">
      <summary>Indicates whether a particular key length is supported by the asymmetric algorithm.</summary>
      <returns>true if the key length is supported by the asymmetric algorithm; otherwise, false.</returns>
      <param name="length">The key length to check.</param>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityAlgorithmSuite.IsAsymmetricKeyWrapAlgorithmSupported(System.String)">
      <summary>Indicates whether an asymmetric key wrap algorithm is supported.</summary>
      <returns>true if the asymmetric key wrap algorithm is supported; otherwise, false.</returns>
      <param name="algorithm">The algorithm to check.</param>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityAlgorithmSuite.IsAsymmetricSignatureAlgorithmSupported(System.String)">
      <summary>Indicates whether an asymmetric signature algorithm is supported.</summary>
      <returns>true if the asymmetric signature algorithm is supported; otherwise, false.</returns>
      <param name="algorithm">The algorithm name to check.</param>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityAlgorithmSuite.IsCanonicalizationAlgorithmSupported(System.String)">
      <summary>Indicates whether a canonicalization algorithm is supported.</summary>
      <returns>true if the canonicalization algorithm is supported; otherwise, false.</returns>
      <param name="algorithm">The algorithm name to check.</param>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityAlgorithmSuite.IsDigestAlgorithmSupported(System.String)">
      <summary>Indicates whether a digest algorithm is supported.</summary>
      <returns>true if the digest algorithm is supported; otherwise, false.</returns>
      <param name="algorithm">The algorithm name to check.</param>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityAlgorithmSuite.IsEncryptionAlgorithmSupported(System.String)">
      <summary>Indicates whether an encryption algorithm is supported.</summary>
      <returns>true if the encryption algorithm is supported; otherwise, false.</returns>
      <param name="algorithm">The algorithm name to check.</param>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityAlgorithmSuite.IsEncryptionKeyDerivationAlgorithmSupported(System.String)">
      <summary>Indicates whether an encryption key derivation algorithm is supported.</summary>
      <returns>true if the encryption key derivation algorithm is supported; otherwise, false.</returns>
      <param name="algorithm">The algorithm name to check.</param>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityAlgorithmSuite.IsSignatureKeyDerivationAlgorithmSupported(System.String)">
      <summary>Indicates whether a signature key derivation algorithm is supported.</summary>
      <returns>true if the signature key derivation algorithm is supported; otherwise, false.</returns>
      <param name="algorithm">The algorithm name to check.</param>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityAlgorithmSuite.IsSymmetricKeyLengthSupported(System.Int32)">
      <summary>When overridden in a derived class, indicates whether a particular symmetric key length is supported.</summary>
      <returns>true if the symmetric key length is supported; otherwise, false.</returns>
      <param name="length">The key length to check.</param>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityAlgorithmSuite.IsSymmetricKeyWrapAlgorithmSupported(System.String)">
      <summary>Indicates whether a symmetric key wrap algorithm is supported.</summary>
      <returns>true if the symmetric key wrap algorithm is supported; otherwise, false.</returns>
      <param name="algorithm">The algorithm name to check.</param>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityAlgorithmSuite.IsSymmetricSignatureAlgorithmSupported(System.String)">
      <summary>Indicates whether a symmetric signature algorithm is supported.</summary>
      <returns>true if the symmetric signature algorithm is supported; otherwise, false.</returns>
      <param name="algorithm">The algorithm name to check.</param>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.TripleDes">
      <summary>Gets the Triple Data Encryption Standard (DES) algorithm suite.</summary>
      <returns>The Triple DES <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.TripleDesRsa15">
      <summary>Gets an algorithm suite that uses RSA15 as the key wrap algorithm and 192-bit Triple Data Encryption Standard (DES) as the message encryption algorithm.</summary>
      <returns>A <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.TripleDesSha256">
      <summary>Gets an algorithm suite that uses SHA256 for the signature digest and 192-bit Triple Data Encryption Standard (DES) as the message encryption algorithm.</summary>
      <returns>A <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.TripleDesSha256Rsa15">
      <summary>Gets an algorithm suite that uses RSA15 as the key wrap algorithm, SHA256 for the signature digest, and 192-bit Triple Data Encryption Standard (DES) as the message encryption algorithm.</summary>
      <returns>A <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" />.</returns>
    </member>
    <member name="T:System.ServiceModel.Security.SecurityContextKeyIdentifierClause">
      <summary>Represents the key identifier clause for a security context token.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityContextKeyIdentifierClause.#ctor(System.Xml.UniqueId)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.SecurityContextKeyIdentifierClause" /> class. </summary>
      <param name="contextId">A <see cref="T:System.Xml.UniqueId" />.</param>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityContextKeyIdentifierClause.#ctor(System.Xml.UniqueId,System.Xml.UniqueId)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.SecurityContextKeyIdentifierClause" /> class. </summary>
      <param name="contextId">A <see cref="T:System.Xml.UniqueId" /> that represents the Context ID of the security context.</param>
      <param name="generation">A <see cref="T:System.Xml.UniqueId" /> that refers to the Key generation of the Security Context Token.</param>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityContextKeyIdentifierClause.#ctor(System.Xml.UniqueId,System.Xml.UniqueId,System.Byte[],System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.SecurityContextKeyIdentifierClause" /> class. </summary>
      <param name="contextId">The context ID part of the identifier clause.</param>
      <param name="generation">The generation part of the identifier clause.</param>
      <param name="derivationNonce">The nonce ("number used once") used to derive the token.</param>
      <param name="derivationLength">Length of the key being derived.</param>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityContextKeyIdentifierClause.ContextId">
      <summary>Gets the ID of the security context.</summary>
      <returns>A <see cref="T:System.Xml.UniqueId" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityContextKeyIdentifierClause.Generation">
      <summary>Gets the generation.</summary>
      <returns>A <see cref="T:System.Xml.UniqueId" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityContextKeyIdentifierClause.Matches(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>Compares a specified <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> to the current instance of the <see cref="T:System.ServiceModel.Security.SecurityContextKeyIdentifierClause" /> class.</summary>
      <returns>true if the two instances are equal; otherwise, false.</returns>
      <param name="keyIdentifierClause">The <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> to be compared.</param>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityContextKeyIdentifierClause.Matches(System.Xml.UniqueId,System.Xml.UniqueId)">
      <summary>Compares a specified <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> to the current instance of the <see cref="T:System.ServiceModel.Security.SecurityContextKeyIdentifierClause" /> class.</summary>
      <returns>true if the two instances are equal; otherwise, false.</returns>
      <param name="contextId">The context ID part of the identifier clause.</param>
      <param name="generation">The generation part of the identifier clause.</param>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityContextKeyIdentifierClause.ToString">
      <summary>Provides a text representation of this instance of the class.</summary>
      <returns>A text representation of this instance of the class.</returns>
    </member>
    <member name="T:System.ServiceModel.Security.SecurityCredentialsManager">
      <summary>An abstract class that when implemented represents a security credentials manager.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityCredentialsManager.#ctor">
      <summary>Initializes a new <see cref="T:System.ServiceModel.Security.SecurityCredentialsManager" />.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityCredentialsManager.CreateSecurityTokenManager">
      <summary>When overridden in a derived class, creates a new <see cref="T:System.IdentityModel.Selectors.SecurityTokenManager" />.</summary>
      <returns>A <see cref="T:System.IdentityModel.Selectors.SecurityTokenManager" />.</returns>
    </member>
    <member name="T:System.ServiceModel.Security.SecurityKeyEntropyMode">
      <summary>Describes the source of entropy used for key generation.</summary>
    </member>
    <member name="F:System.ServiceModel.Security.SecurityKeyEntropyMode.ClientEntropy">
      <summary>The client provides the key used for the issued token.</summary>
    </member>
    <member name="F:System.ServiceModel.Security.SecurityKeyEntropyMode.ServerEntropy">
      <summary>The server provides the key for the issued token.</summary>
    </member>
    <member name="F:System.ServiceModel.Security.SecurityKeyEntropyMode.CombinedEntropy">
      <summary>The client and server both provide entropy that is combined using the P-SHA1 function to derive the key of the issued token.</summary>
    </member>
    <member name="T:System.ServiceModel.Security.SecurityMessageProperty">
      <summary>Contains security-related properties and is attached to a message.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityMessageProperty.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.SecurityMessageProperty" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityMessageProperty.CreateCopy">
      <summary>Clones the current instance of this class.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.IMessageProperty" /> cloned from the current instance of this class.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityMessageProperty.Dispose">
      <summary>Disposes of the current instance of this class.</summary>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityMessageProperty.ExternalAuthorizationPolicies">
      <summary>Gets or sets a collection of external authorization policies. </summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of type <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityMessageProperty.GetOrCreate(System.ServiceModel.Channels.Message)">
      <summary>Gets or creates an instance of this class from the specified message.</summary>
      <returns>An instance of <see cref="T:System.ServiceModel.Security.SecurityMessageProperty" />.</returns>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" />.</param>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityMessageProperty.HasIncomingSupportingTokens">
      <summary>Indicates whether the incoming message contains at least one supporting security token.</summary>
      <returns>true if <see cref="P:System.ServiceModel.Security.SecurityMessageProperty.IncomingSupportingTokens" /> contains at least one entry; otherwise, false. </returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityMessageProperty.IncomingSupportingTokens">
      <summary>Gets or sets a collection of incoming supporting tokens. </summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.Collection`1" /> of type <see cref="T:System.ServiceModel.Security.SupportingTokenSpecification" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityMessageProperty.InitiatorToken">
      <summary>Gets or sets the <see cref="T:System.ServiceModel.Security.SecurityTokenSpecification" /> initiator token for this message.</summary>
      <returns>The <see cref="T:System.ServiceModel.Security.SecurityTokenSpecification" /> initiator token for this message.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityMessageProperty.OutgoingSupportingTokens">
      <summary>Gets a collection of outgoing <see cref="T:System.ServiceModel.Security.SupportingTokenSpecification" /> objects. </summary>
      <returns>A collection of outgoing supporting tokens.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityMessageProperty.ProtectionToken">
      <summary>Gets or sets the <see cref="T:System.ServiceModel.Security.SecurityTokenSpecification" /> protection token for this message.</summary>
      <returns>The <see cref="T:System.ServiceModel.Security.SecurityTokenSpecification" /> protection token for this message.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityMessageProperty.RecipientToken">
      <summary>Gets or sets the <see cref="T:System.ServiceModel.Security.SecurityTokenSpecification" /> recipient token for this message.</summary>
      <returns>The <see cref="T:System.ServiceModel.Security.SecurityTokenSpecification" /> recipient token for this message.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityMessageProperty.SenderIdPrefix">
      <summary>Gets or sets the sender ID prefix for this message.</summary>
      <returns>The sender ID prefix for this message.</returns>
      <exception cref="T:System.ArgumentNullException">The property value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of the property value is 0.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The first character of the property value is not alphabetic and not equal to "_".</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">No character of the property value is alphabetic, numeric, or equal to "_", ".", or "-".</exception>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityMessageProperty.ServiceSecurityContext">
      <summary>Gets or sets the <see cref="T:System.ServiceModel.ServiceSecurityContext" /> for this message.</summary>
      <returns>The <see cref="T:System.ServiceModel.ServiceSecurityContext" /> object for this message.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityMessageProperty.TransportToken">
      <summary>Gets or sets the <see cref="T:System.ServiceModel.Security.SecurityTokenSpecification" /> transport token for this message.</summary>
      <returns>The <see cref="T:System.ServiceModel.Security.SecurityTokenSpecification" /> transport token for this message.</returns>
    </member>
    <member name="T:System.ServiceModel.Security.SecurityNegotiationException">
      <summary>Indicates that an error occurred while negotiating the security context for a message.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityNegotiationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.SecurityNegotiationException" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityNegotiationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.SecurityNegotiationException" /> class with serialization information and streaming context specified.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that contains all the data required to serialize the exception.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that specifies the source and destination of the stream.</param>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityNegotiationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.SecurityNegotiationException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityNegotiationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.SecurityNegotiationException" /> class with serialization information and inner exception specified.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that caused the current exception to be thrown.</param>
    </member>
    <member name="T:System.ServiceModel.Security.SecurityPolicyVersion">
      <summary>Contains the set of supported WS-SecurityPolicy versions. This is an abstract class.</summary>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityPolicyVersion.Namespace">
      <summary>Returns the namespace for this WS-SecurityPolicy version.</summary>
      <returns>The WS-SecurityPolicy version.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityPolicyVersion.Prefix">
      <summary>Returns the prefix.</summary>
      <returns>The prefix.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityPolicyVersion.WSSecurityPolicy11">
      <summary>Gets version 1.1 of WS-SecurityPolicy.</summary>
      <returns>A <see cref="T:System.ServiceModel.Security.SecurityPolicyVersion" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityPolicyVersion.WSSecurityPolicy12">
      <summary>Gets version 1.2 of WS-SecurityPolicy.</summary>
      <returns>A <see cref="T:System.ServiceModel.Security.SecurityPolicyVersion" />.</returns>
    </member>
    <member name="T:System.ServiceModel.Security.SecurityStateEncoder">
      <summary>An abstract class that can be implemented to encode the security state.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityStateEncoder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.SecurityStateEncoder" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityStateEncoder.DecodeSecurityState(System.Byte[])">
      <summary>Decodes the security state.</summary>
      <returns>A byte array that represents the security state.</returns>
      <param name="data">Security data.</param>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityStateEncoder.EncodeSecurityState(System.Byte[])">
      <summary>Encodes the security state.</summary>
      <returns>A byte array that results from encoding the security state.</returns>
      <param name="data">The security state data.</param>
    </member>
    <member name="T:System.ServiceModel.Security.SecurityTokenAttachmentMode">
      <summary>An enumeration that lists the ways in which security tokens are attached.</summary>
    </member>
    <member name="F:System.ServiceModel.Security.SecurityTokenAttachmentMode.Signed">
      <summary>The token is included in the message signature.</summary>
    </member>
    <member name="F:System.ServiceModel.Security.SecurityTokenAttachmentMode.Endorsing">
      <summary>The token is used to sign the message signature.</summary>
    </member>
    <member name="F:System.ServiceModel.Security.SecurityTokenAttachmentMode.SignedEndorsing">
      <summary>The token is included in and signs the message signature.</summary>
    </member>
    <member name="F:System.ServiceModel.Security.SecurityTokenAttachmentMode.SignedEncrypted">
      <summary>The token is included in the message signature and is encrypted.</summary>
    </member>
    <member name="T:System.ServiceModel.Security.SecurityTokenSpecification">
      <summary>Represents a security token and its authorization policies.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityTokenSpecification.#ctor(System.IdentityModel.Tokens.SecurityToken,System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy})">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.SecurityTokenSpecification" /> class. </summary>
      <param name="token">The <see cref="T:System.IdentityModel.Tokens.SecurityToken" />.</param>
      <param name="tokenPolicies">A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />of type <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokenPolicies" /> is null.</exception>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityTokenSpecification.SecurityToken">
      <summary>Gets the security token.</summary>
      <returns>The <see cref="T:System.IdentityModel.Tokens.SecurityToken" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityTokenSpecification.SecurityTokenPolicies">
      <summary>Get the collection of security token policies.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />of type <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" />.</returns>
    </member>
    <member name="T:System.ServiceModel.Security.SecurityVersion">
      <summary>Contains the set of supported WS-Security versions. This is an abstract class.</summary>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityVersion.WSSecurity10">
      <summary>Gets version 1.0 of WS-Security.</summary>
      <returns>A <see cref="T:System.ServiceModel.Security.SecurityVersion" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityVersion.WSSecurity11">
      <summary>Gets version 1.1 of WS-Security.</summary>
      <returns>A <see cref="T:System.ServiceModel.Security.SecurityVersion" />.</returns>
    </member>
    <member name="T:System.ServiceModel.Security.ServiceCredentialsSecurityTokenManager">
      <summary>Represents a <see cref="T:System.IdentityModel.Selectors.SecurityTokenManager" /> implementation that provides security token serializers based on the <see cref="T:System.ServiceModel.Description.ServiceCredentials" /> configured on the service.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.ServiceCredentialsSecurityTokenManager.#ctor(System.ServiceModel.Description.ServiceCredentials)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.ServiceCredentialsSecurityTokenManager" /> class based on the <see cref="T:System.ServiceModel.Description.ServiceCredentials" /> passed in.</summary>
      <param name="parent">The service credentials.</param>
    </member>
    <member name="M:System.ServiceModel.Security.ServiceCredentialsSecurityTokenManager.CreateSecureConversationTokenAuthenticator(System.ServiceModel.Security.Tokens.RecipientServiceModelSecurityTokenRequirement,System.Boolean,System.IdentityModel.Selectors.SecurityTokenResolver@)">
      <summary>Creates a secure conversation token authenticator based on the property requirements passed in.</summary>
      <returns>A security token authenticator.</returns>
      <param name="recipientRequirement">Represents security property requirements specific to the listener. </param>
      <param name="preserveBootstrapTokens">true if the bootstrap tokens should be preserved; Otherwise false.</param>
      <param name="sctResolver">A security token resolver object that can retrieve security tokens or keys when you have a key identifier or key identifier clause.</param>
    </member>
    <member name="M:System.ServiceModel.Security.ServiceCredentialsSecurityTokenManager.CreateSecurityTokenAuthenticator(System.IdentityModel.Selectors.SecurityTokenRequirement,System.IdentityModel.Selectors.SecurityTokenResolver@)">
      <summary>Creates a security token authenticator based on the <see cref="T:System.IdentityModel.Selectors.SecurityTokenRequirement" />.</summary>
      <returns>The security token authenticator.</returns>
      <param name="tokenRequirement">The security token requirement.</param>
      <param name="outOfBandTokenResolver">When this method returns, contains a <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />. This parameter is passed uninitialized. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokenRequirement" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">A security token authenticator cannot be created for the <paramref name=" tokenRequirement" /> that was passed in.</exception>
    </member>
    <member name="M:System.ServiceModel.Security.ServiceCredentialsSecurityTokenManager.CreateSecurityTokenProvider(System.IdentityModel.Selectors.SecurityTokenRequirement)">
      <summary>Creates a security token provider based on the <see cref="T:System.IdentityModel.Selectors.SecurityTokenRequirement" />.</summary>
      <returns>The security token provider.</returns>
      <param name="requirement">The security token requirement.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requirement" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">A security token provider cannot be created for the <paramref name="requirement" /> that was passed in.</exception>
    </member>
    <member name="M:System.ServiceModel.Security.ServiceCredentialsSecurityTokenManager.CreateSecurityTokenSerializer(System.IdentityModel.Selectors.SecurityTokenVersion)">
      <summary>Creates a security token serializer based on the security token version passed in.</summary>
      <returns>The security token serializer.</returns>
      <param name="version">The version of the security token.</param>
      <exception cref="T:System.NotSupportedException">A security token serializer cannot be created for the  <paramref name="version" /> that was passed in.</exception>
    </member>
    <member name="M:System.ServiceModel.Security.ServiceCredentialsSecurityTokenManager.GetIdentityOfSelf(System.IdentityModel.Selectors.SecurityTokenRequirement)">
      <summary>Gets the <see cref="T:System.ServiceModel.EndpointIdentity" /> based on the security token requirement. </summary>
      <returns>The endpoint identity that corresponds to the <paramref name="tokenRequirement" />. null is returned if an identity cannot be created from the <paramref name="tokenRequirement" />.</returns>
      <param name="tokenRequirement">The security toke requirement.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokenRequirement" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Security.ServiceCredentialsSecurityTokenManager.IsIssuedSecurityTokenRequirement(System.IdentityModel.Selectors.SecurityTokenRequirement)">
      <summary>Determines whether the security token requirement is for an issued token.</summary>
      <returns>true if the security token requirement is for an issued token; otherwise, false. </returns>
      <param name="requirement">The security token requirement.</param>
    </member>
    <member name="P:System.ServiceModel.Security.ServiceCredentialsSecurityTokenManager.ServiceCredentials">
      <summary>Gets the service credentials used to construct this instance of this class.</summary>
      <returns>The service credentials.</returns>
    </member>
    <member name="T:System.ServiceModel.Security.SspiSecurityTokenProvider">
      <summary>Represents a security token provider that provides an SSPI security token.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.SspiSecurityTokenProvider.#ctor(System.Net.NetworkCredential,System.Boolean,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.SspiSecurityTokenProvider" /> class. </summary>
      <param name="credential">The <see cref="T:System.Net.NetworkCredential" /> that represents the server identity.</param>
      <param name="extractGroupsForWindowsAccounts">If true, expand users to include Windows Groups.</param>
      <param name="allowUnauthenticatedCallers">If true, allow unauthenticated callers.</param>
    </member>
    <member name="M:System.ServiceModel.Security.SspiSecurityTokenProvider.#ctor(System.Net.NetworkCredential,System.Boolean,System.Security.Principal.TokenImpersonationLevel)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.SspiSecurityTokenProvider" /> class. </summary>
      <param name="credential">The <see cref="T:System.Net.NetworkCredential" /> that represents the client identity.</param>
      <param name="allowNtlm">If true, allow NTLM authentication.</param>
      <param name="impersonationLevel">The <see cref="T:System.Security.Principal.TokenImpersonationLevel" />  granted to the server.</param>
    </member>
    <member name="M:System.ServiceModel.Security.SspiSecurityTokenProvider.GetTokenCore(System.TimeSpan)">
      <summary>Gets the security token.</summary>
      <returns>The <see cref="T:System.IdentityModel.Tokens.SecurityToken" />.</returns>
      <param name="timeout">A <see cref="T:System.Timespan" /> that represents the time-out interval.</param>
    </member>
    <member name="T:System.ServiceModel.Security.SupportingTokenSpecification">
      <summary>Represents a supporting security token and its authorization policies.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.SupportingTokenSpecification.#ctor(System.IdentityModel.Tokens.SecurityToken,System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy},System.ServiceModel.Security.SecurityTokenAttachmentMode)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.SupportingTokenSpecification" /> class. </summary>
      <param name="token">The <see cref="T:System.IdentityModel.Tokens.SecurityToken" />.</param>
      <param name="tokenPolicies">A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />of type <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" />.</param>
      <param name="attachmentMode">The <see cref="T:System.ServiceModel.Security.SecurityTokenAttachmentMode" />.</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="attachmentMode" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Security.SupportingTokenSpecification.#ctor(System.IdentityModel.Tokens.SecurityToken,System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy},System.ServiceModel.Security.SecurityTokenAttachmentMode,System.ServiceModel.Security.Tokens.SecurityTokenParameters)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.SupportingTokenSpecification" /> class. </summary>
      <param name="token">The <see cref="T:System.IdentityModel.Tokens.SecurityToken" />.</param>
      <param name="tokenPolicies">A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />of type <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" />.</param>
      <param name="attachmentMode">The <see cref="T:System.ServiceModel.Security.SecurityTokenAttachmentMode" />.</param>
      <param name="tokenParameters">Represents parameters to binding elements that control security tokens.</param>
    </member>
    <member name="P:System.ServiceModel.Security.SupportingTokenSpecification.SecurityTokenAttachmentMode">
      <summary>Gets the security token attachment mode.</summary>
      <returns>The <see cref="T:System.ServiceModel.Security.SecurityTokenAttachmentMode" />.</returns>
    </member>
    <member name="T:System.ServiceModel.Security.TripleDesSecurityAlgorithmSuite">
      <summary>The triple-DES security algorithm suite.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.TripleDesSecurityAlgorithmSuite.#ctor">
      <summary>Creates and initializes an instance of <see cref="T:System.ServiceModel.Security.TripleDesSecurityAlgorithmSuite" />.</summary>
    </member>
    <member name="P:System.ServiceModel.Security.TripleDesSecurityAlgorithmSuite.DefaultAsymmetricKeyWrapAlgorithm">
      <summary>Gets the default asymmetric key wrap algorithm, RsaOaepKeyWrap.</summary>
      <returns>The default asymmetric key wrap algorithm, RsaOaepKeyWrap.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.TripleDesSecurityAlgorithmSuite.DefaultAsymmetricSignatureAlgorithm">
      <summary>Gets the default asymmetric signature algorithm, RsaSha1Signature.</summary>
      <returns>The default asymmetric signature algorithm, RsaSha1Signature.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.TripleDesSecurityAlgorithmSuite.DefaultCanonicalizationAlgorithm">
      <summary>Gets the default canonicalization algorithm, ExclusiveC14n.</summary>
      <returns>The default canonicalization algorithm, ExclusiveC14n.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.TripleDesSecurityAlgorithmSuite.DefaultDigestAlgorithm">
      <summary>Gets the default digest algorithm, Sha1Digest.</summary>
      <returns>The default digest algorithm, Sha1Digest.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.TripleDesSecurityAlgorithmSuite.DefaultEncryptionAlgorithm">
      <summary>Gets the default encryption algorithm, TripleDesEncryption.</summary>
      <returns>The default encryption algorithm, TripleDesEncryption.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.TripleDesSecurityAlgorithmSuite.DefaultEncryptionKeyDerivationLength">
      <summary>Gets the default encryption key derivation length, 192.</summary>
      <returns>The default encryption key derivation length, 192.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.TripleDesSecurityAlgorithmSuite.DefaultSignatureKeyDerivationLength">
      <summary>Gets the default signature key derivation length, 192.</summary>
      <returns>The default signature key derivation length, 192.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.TripleDesSecurityAlgorithmSuite.DefaultSymmetricKeyLength">
      <summary>Gets the default symmetric key length, 192.</summary>
      <returns>The default symmetric key length, 192.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.TripleDesSecurityAlgorithmSuite.DefaultSymmetricKeyWrapAlgorithm">
      <summary>Gets the default symmetric key wrap algorithm, TripleDesKeyWrap.</summary>
      <returns>The default symmetric key wrap algorithm, TripleDesKeyWrap.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.TripleDesSecurityAlgorithmSuite.DefaultSymmetricSignatureAlgorithm">
      <summary>Gets the default symmetric signature algorithm, HmacSha1Signature.</summary>
      <returns>The default symmetric signature algorithm, HmacSha1Signature.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.TripleDesSecurityAlgorithmSuite.IsAsymmetricKeyLengthSupported(System.Int32)">
      <summary>Returns true if the specified asymmetric key length is supported; otherwise, returns false. Valid lengths range from 1024 to 4096.</summary>
      <returns>true if the specified asymmetric key length is supported; otherwise, false.</returns>
      <param name="length">The asymmetric key length.</param>
    </member>
    <member name="M:System.ServiceModel.Security.TripleDesSecurityAlgorithmSuite.IsSymmetricKeyLengthSupported(System.Int32)">
      <summary>Returns true if the specified symmetric key length is supported; otherwise, returns false. Valid lengths range from 192 to 256.</summary>
      <returns>true if the specified symmetric key length is supported; otherwise, false.</returns>
      <param name="length">The symmetric key length.</param>
    </member>
    <member name="M:System.ServiceModel.Security.TripleDesSecurityAlgorithmSuite.ToString">
      <summary>Returns the string representation of the <see cref="T:System.ServiceModel.Security.TripleDesSecurityAlgorithmSuite" />.</summary>
      <returns>The string representation of the <see cref="T:System.ServiceModel.Security.TripleDesSecurityAlgorithmSuite" />.</returns>
    </member>
    <member name="T:System.ServiceModel.Security.TrustVersion">
      <summary>Contains the set of supported WS-Trust versions. This is an abstract class.</summary>
    </member>
    <member name="P:System.ServiceModel.Security.TrustVersion.Default">
      <summary>Returns the default version.</summary>
      <returns>A <see cref="T:System.ServiceModel.Security.TrustVersion" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.TrustVersion.Namespace">
      <summary>Returns the namespace for this trust version.</summary>
      <returns>The <see cref="T:System.Xml.XmlDictionaryString" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.TrustVersion.Prefix">
      <summary>Returns the prefix.</summary>
      <returns>The <see cref="T:System.Xml.XmlDictionaryString" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.TrustVersion.WSTrust13">
      <summary>Gets version 1.3 of WS-Trust.</summary>
      <returns>A <see cref="T:System.ServiceModel.Security.TrustVersion" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.TrustVersion.WSTrustFeb2005">
      <summary>Gets the February 2005 version of WS-Trust.</summary>
      <returns>A <see cref="T:System.ServiceModel.Security.TrustVersion" />.</returns>
    </member>
    <member name="T:System.ServiceModel.Security.UserNamePasswordClientCredential">
      <summary>Represents a client credential based on user name and password.</summary>
    </member>
    <member name="P:System.ServiceModel.Security.UserNamePasswordClientCredential.Password">
      <summary>Gets or sets the password.</summary>
      <returns>The password.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.UserNamePasswordClientCredential.UserName">
      <summary>Gets or sets the user name.</summary>
      <returns>The user name.</returns>
    </member>
    <member name="T:System.ServiceModel.Security.UserNamePasswordServiceCredential">
      <summary>This class is used to configure how the service authenticates users that use user name/password authentication and to configure the caching of logon tokens.</summary>
    </member>
    <member name="P:System.ServiceModel.Security.UserNamePasswordServiceCredential.CachedLogonTokenLifetime">
      <summary>Gets or sets the maximum length of time that a token is cached. </summary>
      <returns>A <see cref="T:System.Timespan" /> that represents the maximum length of time that a token is cached. The default is 15 minutes.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.UserNamePasswordServiceCredential.CacheLogonTokens">
      <summary>Gets or sets a value that indicates whether logon tokens are cached. </summary>
      <returns>true if logon tokens are cached; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.UserNamePasswordServiceCredential.CustomUserNamePasswordValidator">
      <summary>Gets or sets a custom user name and password validator.</summary>
      <returns>A <see cref="T:System.IdentityModel.Selectors.UserNamePasswordValidator" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.UserNamePasswordServiceCredential.IncludeWindowsGroups">
      <summary>Gets or sets a value that indicates whether Windows groups are included in the security context. </summary>
      <returns>true if Windows groups are included in the security context; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.UserNamePasswordServiceCredential.MaxCachedLogonTokens">
      <summary>Gets or sets the maximum number of logon tokens to cache. </summary>
      <returns>The maximum number of logon tokens to cache.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.UserNamePasswordServiceCredential.MembershipProvider">
      <summary>Gets or sets the membership provider.</summary>
      <returns>The <see cref="T:System.Web.Security.MembershipProvider" /> for this service. The default is the <see cref="T:System.Web.Security.SqlMembershipProvider" />.</returns>
      <exception cref="T:System.InvalidOperationException">An attempt is made to set this property when the credential is read-only.</exception>
    </member>
    <member name="P:System.ServiceModel.Security.UserNamePasswordServiceCredential.UserNamePasswordValidationMode">
      <summary>Gets or sets the method of validating the user name and password. </summary>
      <returns>A value from the enumeration in <see cref="T:System.ServiceModel.Security.UserNamePasswordValidationMode" />.</returns>
    </member>
    <member name="T:System.ServiceModel.Security.UserNamePasswordValidationMode">
      <summary>Lists ways to validate in username/password mode.</summary>
    </member>
    <member name="F:System.ServiceModel.Security.UserNamePasswordValidationMode.Windows">
      <summary>Usernames are mapped to Windows users.</summary>
    </member>
    <member name="F:System.ServiceModel.Security.UserNamePasswordValidationMode.MembershipProvider">
      <summary>Provides password validation based on a configured <see cref="T:System.Web.Security.MembershipProvider" />.</summary>
    </member>
    <member name="F:System.ServiceModel.Security.UserNamePasswordValidationMode.Custom">
      <summary>Custom authentication based on a configured custom <see cref="T:System.IdentityModel.Selectors.UsernamePasswordValidator" />.</summary>
    </member>
    <member name="T:System.ServiceModel.Security.WindowsClientCredential">
      <summary>Allows you to specify properties related to Windows credentials to be used to represent the client.</summary>
    </member>
    <member name="P:System.ServiceModel.Security.WindowsClientCredential.AllowedImpersonationLevel">
      <summary>Gets or sets the allowed impersonation level. </summary>
      <returns>One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.WindowsClientCredential.AllowNtlm">
      <summary>Gets or sets a value that indicates whether NTLM authentication should be allowed as Windows SSPI Negotiate authentication. </summary>
      <returns>true if NTLM authentication should be allowed as Windows SSPI Negotiate authentication, false otherwise. The default is true.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.WindowsClientCredential.ClientCredential">
      <summary>Gets or sets the Windows client credential.</summary>
      <returns>The <see cref="T:System.Net.NetworkCredential" /> for the client.</returns>
    </member>
    <member name="T:System.ServiceModel.Security.WindowsServiceCredential">
      <summary>Provides properties that describe the service credentials used for Windows authentication.</summary>
    </member>
    <member name="P:System.ServiceModel.Security.WindowsServiceCredential.AllowAnonymousLogons">
      <summary>Gets or sets a value that indicates whether to allowanonymous users access (applies only to message-level security). </summary>
      <returns>true if anonymous users are allowed access; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.WindowsServiceCredential.IncludeWindowsGroups">
      <summary>Gets or sets a value that indicates whether the Windows groups that a client belongs to are included in the security context.</summary>
      <returns>true if Windows groups are included in the security context; otherwise, false. The default is true.</returns>
    </member>
    <member name="T:System.ServiceModel.Security.WSSecurityTokenSerializer">
      <summary>The class used for serializing and deserializing security tokens, security key identifiers, and security key identifier clauses defined in the WS-Security, WS-Trust, and WS-SecureConversation security specifications.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.WSSecurityTokenSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.WSSecurityTokenSerializer" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Security.WSSecurityTokenSerializer.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.WSSecurityTokenSerializer" /> class. </summary>
      <param name="emitBspRequiredAttributes">The value to use for the <see cref="P:System.ServiceModel.Security.WSSecurityTokenSerializer.EmitBspRequiredAttributes" /> property. When true, this includes ValueType and EncodingType attributes where applicable during security token serialization.</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSSecurityTokenSerializer.#ctor(System.ServiceModel.Security.SecurityVersion)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.WSSecurityTokenSerializer" /> class. </summary>
      <param name="securityVersion">The security version.</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSSecurityTokenSerializer.#ctor(System.ServiceModel.Security.SecurityVersion,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.WSSecurityTokenSerializer" /> class. </summary>
      <param name="securityVersion">The security version.</param>
      <param name="emitBspRequiredAttributes">The value to use for the <see cref="P:System.ServiceModel.Security.WSSecurityTokenSerializer.EmitBspRequiredAttributes" /> property.</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSSecurityTokenSerializer.#ctor(System.ServiceModel.Security.SecurityVersion,System.Boolean,System.IdentityModel.Tokens.SamlSerializer)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.WSSecurityTokenSerializer" /> class. </summary>
      <param name="securityVersion">The security version.</param>
      <param name="emitBspRequiredAttributes">The value to use for the <see cref="P:System.ServiceModel.Security.WSSecurityTokenSerializer.EmitBspRequiredAttributes" /> property.</param>
      <param name="samlSerializer">The extensibility point used for serializing and deserializing SAML tokens.</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSSecurityTokenSerializer.#ctor(System.ServiceModel.Security.SecurityVersion,System.Boolean,System.IdentityModel.Tokens.SamlSerializer,System.ServiceModel.Security.SecurityStateEncoder,System.Collections.Generic.IEnumerable{System.Type})">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.WSSecurityTokenSerializer" /> class.</summary>
      <param name="securityVersion">The security version.</param>
      <param name="emitBspRequiredAttributes">The value to use for the <see cref="P:System.ServiceModel.Security.WSSecurityTokenSerializer.EmitBspRequiredAttributes" /> property.</param>
      <param name="samlSerializer">The extensibility point used for serializing and deserializing SAML tokens.</param>
      <param name="securityStateEncoder">The encoder used for encoding and decoding security state that is attached as a cookie to security context tokens.</param>
      <param name="knownTypes">A collection of types. These known types must be declared to include custom claims as part of the security context token's cookie.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="securityVersion" /> is null. </exception>
    </member>
    <member name="M:System.ServiceModel.Security.WSSecurityTokenSerializer.#ctor(System.ServiceModel.Security.SecurityVersion,System.Boolean,System.IdentityModel.Tokens.SamlSerializer,System.ServiceModel.Security.SecurityStateEncoder,System.Collections.Generic.IEnumerable{System.Type},System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.WSSecurityTokenSerializer" /> class.</summary>
      <param name="securityVersion">The security version.</param>
      <param name="emitBspRequiredAttributes">The value to use for the <see cref="P:System.ServiceModel.Security.WSSecurityTokenSerializer.EmitBspRequiredAttributes" /> property.</param>
      <param name="samlSerializer">The extensibility point used for serializing and deserializing SAML tokens.</param>
      <param name="securityStateEncoder">The encoder used for encoding and decoding security state that is attached as a cookie to security context tokens.</param>
      <param name="knownTypes">A collection of known types. These known types must be declared to include custom claims as part of the security context token's cookie.</param>
      <param name="maximumKeyDerivationOffset">The maximum key derivation offset. This setting places a bound on the amount of processing the server does when deserializing Derived Key Tokens.</param>
      <param name="maximumKeyDerivationLabelLength">The maximum key derivation label length. This setting places a bound on the amount of processing the server does when deserializing Derived Key Tokens.</param>
      <param name="maximumKeyDerivationNonceLength">The maximum key derivation nonce length. This setting places a bound on the amount of processing the server does when deserializing Derived Key Tokens.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="securityVersion" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="maximumKeyDerivationOffset" /> is less than 0, <paramref name="maximumKeyDerivationLabelLength" /> is less than 0, or <paramref name="maximumKeyDerivationNonceLength" /> is less than or equal to 0.</exception>
    </member>
    <member name="M:System.ServiceModel.Security.WSSecurityTokenSerializer.#ctor(System.ServiceModel.Security.SecurityVersion,System.ServiceModel.Security.TrustVersion,System.ServiceModel.Security.SecureConversationVersion,System.Boolean,System.IdentityModel.Tokens.SamlSerializer,System.ServiceModel.Security.SecurityStateEncoder,System.Collections.Generic.IEnumerable{System.Type})">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.WSSecurityTokenSerializer" /> class. </summary>
      <param name="securityVersion">The security version.</param>
      <param name="trustVersion">The set of supported versions of the WS-Trust specification.</param>
      <param name="secureConversationVersion">The set of supported versions of the WS-SecureConversation specification.</param>
      <param name="emitBspRequiredAttributes">The value to use for the <see cref="P:System.ServiceModel.Security.WSSecurityTokenSerializer.EmitBspRequiredAttributes" /> property.</param>
      <param name="samlSerializer">The extensibility point used for serializing and deserializing SAML tokens.</param>
      <param name="securityStateEncoder">The encoder used for encoding and decoding security state that is attached as a cookie to security context tokens.</param>
      <param name="knownTypes">A collection of known types. These known types must be declared to include custom claims as part of the security context token's cookie.</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSSecurityTokenSerializer.#ctor(System.ServiceModel.Security.SecurityVersion,System.ServiceModel.Security.TrustVersion,System.ServiceModel.Security.SecureConversationVersion,System.Boolean,System.IdentityModel.Tokens.SamlSerializer,System.ServiceModel.Security.SecurityStateEncoder,System.Collections.Generic.IEnumerable{System.Type},System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.WSSecurityTokenSerializer" /> class. </summary>
      <param name="securityVersion">The security version.</param>
      <param name="trustVersion">The set of supported versions of the WS-Trust specification.</param>
      <param name="secureConversationVersion">The set of supported versions of the WS-SecureConversation specification.</param>
      <param name="emitBspRequiredAttributes">The value to use for the <see cref="P:System.ServiceModel.Security.WSSecurityTokenSerializer.EmitBspRequiredAttributes" /> property.</param>
      <param name="samlSerializer">The extensibility point used for serializing and deserializing SAML tokens.</param>
      <param name="securityStateEncoder">The encoder used for encoding and decoding security state that is attached as a cookie to security context tokens.</param>
      <param name="knownTypes">A collection of known types. These known types must be declared to include custom claims as part of the security context token's cookie.</param>
      <param name="maximumKeyDerivationOffset">The maximum key derivation offset. This setting places a bound on the amount of processing the server does when deserializing Derived Key Tokens.</param>
      <param name="maximumKeyDerivationLabelLength">The maximum key derivation label length. This setting places a bound on the amount of processing the server does when deserializing Derived Key Tokens.</param>
      <param name="maximumKeyDerivationNonceLength">The maximum key derivation nonce length. This setting places a bound on the amount of processing the server does when deserializing Derived Key Tokens.</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSSecurityTokenSerializer.CanReadKeyIdentifierClauseCore(System.Xml.XmlReader)">
      <summary>Gets a value that indicates whether the key identifier clause core can be read using the specified reader. </summary>
      <returns>true if the key identifier clause core can be read using the specified reader; otherwise, false. </returns>
      <param name="reader">The XmlReader.</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSSecurityTokenSerializer.CanReadKeyIdentifierCore(System.Xml.XmlReader)">
      <summary>Gets a value that indicates whether the key identifier core can be read using the specified reader.</summary>
      <returns>true if the key identifier core can be read using the specified reader; otherwise, false.</returns>
      <param name="reader">The XmlReader.</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSSecurityTokenSerializer.CanReadTokenCore(System.Xml.XmlReader)">
      <summary>Gets a value that indicates whether the token core can be read using the specified reader.</summary>
      <returns>true if the token core can be read using the specified reader; otherwise, false.</returns>
      <param name="reader">The XmlReader.</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSSecurityTokenSerializer.CanWriteKeyIdentifierClauseCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>Gets a value that indicates whether the key identifier clause core with a specified key identifier clause can be written.</summary>
      <returns>true if the key identifier clause core with the specified key identifier clause can be written; otherwise, false.</returns>
      <param name="keyIdentifierClause">The security key identifier clause.</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSSecurityTokenSerializer.CanWriteKeyIdentifierCore(System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>Gets a value that indicates whether the key identifier core with a specified key identifier clause can be written.</summary>
      <returns>true if the key identifier core with the specified key identifier clause can be written; otherwise, false.</returns>
      <param name="keyIdentifier">The security key identifier.</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSSecurityTokenSerializer.CanWriteTokenCore(System.IdentityModel.Tokens.SecurityToken)">
      <summary>Gets a value that indicates whether the token core with a specified security token can be written.</summary>
      <returns>true if the token core with the specified security token can be written; otherwise, false.</returns>
      <param name="token">The security token.</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSSecurityTokenSerializer.CreateKeyIdentifierClauseFromTokenXml(System.Xml.XmlElement,System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle)">
      <summary>Creates a key identifier clause from a token expressed as XML.</summary>
      <returns>The created security key identifier.</returns>
      <param name="element">The security token.</param>
      <param name="tokenReferenceStyle">The <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle" />.</param>
      <exception cref="T:System.Xml.XmlException">An error occurred when deserializing the key identifier clause or the key identifier clause could not be read.</exception>
    </member>
    <member name="P:System.ServiceModel.Security.WSSecurityTokenSerializer.DefaultInstance">
      <summary>Gets a default instance of this class.</summary>
      <returns>A default instance of this class.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.WSSecurityTokenSerializer.EmitBspRequiredAttributes">
      <summary>Gets a value that indicates whether to emit BSP required attributes. </summary>
      <returns>true if BSP required attributes are to be emitted; otherwise, false. </returns>
    </member>
    <member name="M:System.ServiceModel.Security.WSSecurityTokenSerializer.GetTokenTypeUri(System.Type)">
      <summary>Gets the URI of the security token of the specified type.</summary>
      <returns>The URI of the security token of the specified type.</returns>
      <param name="tokenType">The type of the security token.</param>
    </member>
    <member name="P:System.ServiceModel.Security.WSSecurityTokenSerializer.MaximumKeyDerivationLabelLength">
      <summary>Gets the maximum key derivation label length.</summary>
      <returns>The maximum key derivation label length.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.WSSecurityTokenSerializer.MaximumKeyDerivationNonceLength">
      <summary>Gets the maximum key derivation nonce length.</summary>
      <returns>The maximum key derivation nonce length.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.WSSecurityTokenSerializer.MaximumKeyDerivationOffset">
      <summary>Gets the maximum key derivation offset.</summary>
      <returns>The maximum key derivation offset.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.WSSecurityTokenSerializer.ReadKeyIdentifierClauseCore(System.Xml.XmlReader)">
      <summary>Reads the key identifier clause core using the specified <see cref="T:System.Xml.XmlReader" />.</summary>
      <returns>The security key identifier clause that was read.</returns>
      <param name="reader">The specified XmlReader.</param>
      <exception cref="T:System.Xml.XmlException">An error occurred when deserializing the key identifier clause or the key identifier clause could not be read.</exception>
    </member>
    <member name="M:System.ServiceModel.Security.WSSecurityTokenSerializer.ReadKeyIdentifierCore(System.Xml.XmlReader)">
      <summary>Reads the key identifier core using the specified <see cref="T:System.Xml.XmlReader" />.</summary>
      <returns>The security key identifier that was read.</returns>
      <param name="reader">The specified XmlReader.</param>
      <exception cref="T:System.Xml.XmlException">An error occurred when deserializing the key identifier or the key identifier could not be read.</exception>
    </member>
    <member name="M:System.ServiceModel.Security.WSSecurityTokenSerializer.ReadTokenCore(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>Reads the token core using the specified <see cref="T:System.Xml.XmlReader" />.</summary>
      <returns>The security token that was read.</returns>
      <param name="reader">The specified XmlReader.</param>
      <param name="tokenResolver">The security token resolver. </param>
      <exception cref="T:System.Xml.XmlException">An error occurred when deserializing the token or the token could not be read.</exception>
    </member>
    <member name="P:System.ServiceModel.Security.WSSecurityTokenSerializer.SecurityVersion">
      <summary>Gets the security version.</summary>
      <returns>The security version.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.WSSecurityTokenSerializer.TryCreateKeyIdentifierClauseFromTokenXml(System.Xml.XmlElement,System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle,System.IdentityModel.Tokens.SecurityKeyIdentifierClause@)">
      <summary>Attempts to create a key identifier clause from a token expressed as XML.</summary>
      <returns>true if the key identifier clause was created; otherwise, false.</returns>
      <param name="element">The security token.</param>
      <param name="tokenReferenceStyle">The <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle" />.</param>
      <param name="securityKeyIdentifierClause">A sub-unit of an element that contains a security key identifier token.</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSSecurityTokenSerializer.WriteKeyIdentifierClauseCore(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>Writes the key identifier clause core with a specified key identifier clause using the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The specified XmlWriter.</param>
      <param name="keyIdentifierClause">The security key identifier clause.</param>
      <exception cref="T:System.Xml.XmlException">An error occurred when serializing the key identifier clause.</exception>
      <exception cref="T:System.InvalidOperationException">The key identifier clause was not successfully written.</exception>
    </member>
    <member name="M:System.ServiceModel.Security.WSSecurityTokenSerializer.WriteKeyIdentifierCore(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>Writes the key identifier core with a specified key identifier clause using the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The specified XmlWriter.</param>
      <param name="keyIdentifier">The security key identifier clause.</param>
      <exception cref="T:System.Xml.XmlException">An error occurred when serializing the key identifier.</exception>
      <exception cref="T:System.InvalidOperationException">The key identifier was not successfully written.</exception>
    </member>
    <member name="M:System.ServiceModel.Security.WSSecurityTokenSerializer.WriteTokenCore(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
      <summary>Writes the token core with a specified security token using the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The specified XmlWriter.</param>
      <param name="token">The security token.</param>
      <exception cref="T:System.Xml.XmlException">An error occurred when serializing the security token.</exception>
      <exception cref="T:System.InvalidOperationException">The token was not successfully written.</exception>
    </member>
    <member name="T:System.ServiceModel.Security.X509CertificateInitiatorClientCredential">
      <summary>Defines a certificate used by a client to identify itself.</summary>
    </member>
    <member name="P:System.ServiceModel.Security.X509CertificateInitiatorClientCredential.Certificate">
      <summary>Gets or sets the certificate to use to represent the service when communicating back to the client.</summary>
      <returns>The <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> to use to represent the service when communicating back to the client.</returns>
      <exception cref="T:System.InvalidOperationException">A set method was used when the credential is read-only.</exception>
    </member>
    <member name="M:System.ServiceModel.Security.X509CertificateInitiatorClientCredential.SetCertificate(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.X509FindType,System.Object)">
      <summary>Allows you to specify the certificate to use to represent the client by specifying query parameters such as <paramref name="storeLocation" />, <paramref name="storeName" />, <paramref name="findType" /> and <paramref name="findValue" />.</summary>
      <param name="storeLocation">The location of the certificate store the client uses to obtain the client certificate.</param>
      <param name="storeName">Specifies the name of the X.509 certificate store to open.</param>
      <param name="findType">Defines the type of X.509 search to be executed.</param>
      <param name="findValue">The value to search for in the X.509 certificate store.</param>
    </member>
    <member name="M:System.ServiceModel.Security.X509CertificateInitiatorClientCredential.SetCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName)">
      <summary>Allows you to specify the certificate to use to represent the service by specifying the subject distinguished name.</summary>
      <param name="subjectName">Subject distinguished name.</param>
      <param name="storeLocation">The location of the certificate store the service uses to obtain the service certificate.</param>
      <param name="storeName">Specifies the name of the X.509 certificate store to open.</param>
    </member>
    <member name="T:System.ServiceModel.Security.X509CertificateInitiatorServiceCredential">
      <summary>Represents the settings used by the service to validate the certificate presented by the clients. It also contains a certificate for the service to use for encrypting responses or callbacks for clients when MutualCertificateDuplex message security authentication mode is used.</summary>
    </member>
    <member name="P:System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.Authentication">
      <summary>Gets the settings used to validate the certificate presented by the client during authentication.</summary>
      <returns>The <see cref="T:System.ServiceModel.Security.X509ClientCertificateAuthentication" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.Certificate">
      <summary>Gets or sets the certificate to use in MutualCertificateDuplex message security authentication mode. </summary>
      <returns>The <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> to use to encrypt messages sent to the client by the service in the uncorrelated duplex transport case if the MutualCertificateDuplex message security authentication mode is used.</returns>
      <exception cref="T:System.InvalidOperationException">An attempt was made to set a read-only credential.</exception>
    </member>
    <member name="M:System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.SetCertificate(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.X509FindType,System.Object)">
      <summary>Specifies the certificate to use for encrypting messages for the client. This setting is used only by bindings that are configured with the MutualCertificateDuplex message security authentication mode.</summary>
      <param name="storeLocation">The location of the certificate store that the service uses to obtain the certificate.</param>
      <param name="storeName">The name of the X.509 certificate store to open.</param>
      <param name="findType">The type of X.509 search to be executed.</param>
      <param name="findValue">The value to search for in the X.509 certificate store.</param>
    </member>
    <member name="M:System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.SetCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName)">
      <summary>Enables you to specify the certificate to use for encrypting messages for the client by specifying the subject distinguished name. This setting is used only by bindings that are configured with the MutualCertificateDuplex message security authentication mode.</summary>
      <param name="subjectName">Subject distinguished name.</param>
      <param name="storeLocation">The location of the certificate store that the service uses to obtain the certificate.</param>
      <param name="storeName">The name of the X.509 certificate store to open.</param>
    </member>
    <member name="T:System.ServiceModel.Security.X509CertificateRecipientClientCredential">
      <summary>Represents the settings used by the client to validate the certificate presented by the service using SSL authentication. It also contains any certificate for the service that is explicitly configured on the client to use for encrypting messages to the service using message security.</summary>
    </member>
    <member name="P:System.ServiceModel.Security.X509CertificateRecipientClientCredential.Authentication">
      <summary>Gets the settings used to validate the service certificate obtained using SSL authentication.</summary>
      <returns>The <see cref="T:System.ServiceModel.Security.X509ServiceCertificateAuthentication" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.X509CertificateRecipientClientCredential.DefaultCertificate">
      <summary>Gets or sets the default certificate to use for the service. </summary>
      <returns>The <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> to use to secure messages sent to the service.</returns>
      <exception cref="T:System.InvalidOperationException">Attempted to set when the credential is read-only.</exception>
    </member>
    <member name="P:System.ServiceModel.Security.X509CertificateRecipientClientCredential.ScopedCertificates">
      <summary>Gets or sets a scoped certificate to use to represent the service that the client is communicating with. </summary>
      <returns>The <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> to use to secure messages sent to the service.</returns>
      <exception cref="T:System.InvalidOperationException">Attempted to set when the credential is read-only.</exception>
    </member>
    <member name="M:System.ServiceModel.Security.X509CertificateRecipientClientCredential.SetDefaultCertificate(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.X509FindType,System.Object)">
      <summary>Specifies the default certificate to use for the service. For bindings that use certificate-based message security, this certificate is used to encrypt messages to the service and is expected to be used by the service for signing replies to the client.</summary>
      <param name="storeLocation">The location of the certificate store the service uses to obtain the service certificate.</param>
      <param name="storeName">Specifies the name of the X.509 certificate store to open.</param>
      <param name="findType">Defines the type of X.509 search to be executed.</param>
      <param name="findValue">The value to search for in the X.509 certificate store.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="findValue" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">Attempted to set when the credential is read-only.</exception>
    </member>
    <member name="M:System.ServiceModel.Security.X509CertificateRecipientClientCredential.SetDefaultCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName)">
      <summary>Specifies the default certificate to use for the service. For bindings that use certificate-based message security, this certificate is used to encrypt messages to the service and is expected to be used by the service for signing replies to the client.</summary>
      <param name="subjectName">Subject distinguished name.</param>
      <param name="storeLocation">The location of the certificate store that the service uses to obtain the service certificate.</param>
      <param name="storeName">Specifies the name of the X.509 certificate store to open.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subjectName" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">Attempted to set when the credential is read-only.</exception>
    </member>
    <member name="M:System.ServiceModel.Security.X509CertificateRecipientClientCredential.SetScopedCertificate(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Uri)">
      <summary>Gets a certificate by certificate store location, certificate store name, type of X.509 search, and value to search for, and stores it in a collection to be used for the URL that sets the scope.</summary>
      <param name="storeLocation">The location of the certificate store that the service uses to obtain the service certificate.</param>
      <param name="storeName">The name of the X.509 certificate store to open.</param>
      <param name="findType">The type of X.509 search to be executed.</param>
      <param name="findValue">The value to search for in the X.509 certificate store.</param>
      <param name="targetService">The URL that sets the scope.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="findValue" /> is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetService" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">Attempted to set when the credential is read-only.</exception>
    </member>
    <member name="M:System.ServiceModel.Security.X509CertificateRecipientClientCredential.SetScopedCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Uri)">
      <summary>Gets a certificate by subject name, certificate store location, and certificate store name, and stores it in a collection to be used for the URL that sets the scope.</summary>
      <param name="subjectName">The fully qualified subject name.</param>
      <param name="storeLocation">The location of the certificate store that the service uses to obtain the service certificate.</param>
      <param name="storeName">The name of the X.509 certificate store to open.</param>
      <param name="targetService">The URL that sets the scope.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subjectName" /> is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetService" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">Attempted to set when the credential is read-only.</exception>
    </member>
    <member name="T:System.ServiceModel.Security.X509CertificateRecipientServiceCredential">
      <summary>Defines a certificate used by a service to identify itself.</summary>
    </member>
    <member name="P:System.ServiceModel.Security.X509CertificateRecipientServiceCredential.Certificate">
      <summary>Gets or sets the certificate to use for representing the service when communicating back to the client.</summary>
      <returns>The <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> to use for representing the service when communicating back to the client.</returns>
      <exception cref="T:System.InvalidOperationException">Attempted to set when credential is read-only.</exception>
    </member>
    <member name="M:System.ServiceModel.Security.X509CertificateRecipientServiceCredential.SetCertificate(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.X509FindType,System.Object)">
      <summary>Specifies the certificate to use for representing the service by specifying query parameters such as <paramref name="storeLocation" />, <paramref name="storeName" />, <paramref name="findType" /> and <paramref name="findValue" />.</summary>
      <param name="storeLocation">The location of the certificate store the client uses to obtain the client certificate.</param>
      <param name="storeName">Specifies the name of the X.509 certificate store to open.</param>
      <param name="findType">Defines the type of X.509 search to be executed.</param>
      <param name="findValue">The value to search for in the X.509 certificate store.</param>
    </member>
    <member name="M:System.ServiceModel.Security.X509CertificateRecipientServiceCredential.SetCertificate(System.String)">
      <summary>Specifies the certificate to use for representing the service by specifying the subject distinguished name.</summary>
      <param name="subjectName">Subject distinguished name.</param>
    </member>
    <member name="M:System.ServiceModel.Security.X509CertificateRecipientServiceCredential.SetCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName)">
      <summary>Specifies the certificate to use for representing the service by specifying the subject distinguished name, the certificate store name and store location.</summary>
      <param name="subjectName">Subject distinguished name.</param>
      <param name="storeLocation">The location of the certificate store the service uses to obtain the service certificate.</param>
      <param name="storeName">Specifies the name of the X.509 certificate store to open.</param>
    </member>
    <member name="T:System.ServiceModel.Security.X509CertificateValidationMode">
      <summary>An enumeration that lists the ways of validating a certificate.</summary>
    </member>
    <member name="F:System.ServiceModel.Security.X509CertificateValidationMode.None">
      <summary>No validation of the certificate is done. </summary>
    </member>
    <member name="F:System.ServiceModel.Security.X509CertificateValidationMode.PeerTrust">
      <summary>The certificate is valid if it is in the trusted people store.</summary>
    </member>
    <member name="F:System.ServiceModel.Security.X509CertificateValidationMode.ChainTrust">
      <summary>The certificate is valid if the chain builds to a certification authority in the trusted root store.</summary>
    </member>
    <member name="F:System.ServiceModel.Security.X509CertificateValidationMode.PeerOrChainTrust">
      <summary>The certificate is valid if it is in the trusted people store, or if the chain builds to a certification authority in the trusted root store.</summary>
    </member>
    <member name="F:System.ServiceModel.Security.X509CertificateValidationMode.Custom">
      <summary>The user must plug in a custom <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" /> to validate the certificate.</summary>
    </member>
    <member name="T:System.ServiceModel.Security.X509ClientCertificateAuthentication">
      <summary>Specifies authentication properties for validating the client certificate.</summary>
    </member>
    <member name="P:System.ServiceModel.Security.X509ClientCertificateAuthentication.CertificateValidationMode">
      <summary>Gets the certificate validation mode.</summary>
      <returns>One of the <see cref="T:System.ServiceModel.Security.X509CertificateValidationMode" /> values.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.X509ClientCertificateAuthentication.CustomCertificateValidator">
      <summary>Gets or sets a custom client certificate validator.</summary>
      <returns>The custom <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" />.</returns>
      <exception cref="T:System.InvalidOperationException">set when credential is read-only.</exception>
    </member>
    <member name="P:System.ServiceModel.Security.X509ClientCertificateAuthentication.IncludeWindowsGroups">
      <summary>Gets or sets a value that indicates whether Windows groups are included in the authorization context.</summary>
      <returns>true if Windows groups are included in the authorization context; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.X509ClientCertificateAuthentication.MapClientCertificateToWindowsAccount">
      <summary>Gets or sets a value that indicates whether the certificate is mapped to Windows accounts. </summary>
      <returns>true if the certificate is mapped to Windows accounts; otherwise, false. The default is false.</returns>
      <exception cref="T:System.InvalidOperationException">set when credential is read-only.</exception>
    </member>
    <member name="P:System.ServiceModel.Security.X509ClientCertificateAuthentication.RevocationMode">
      <summary>Gets or sets the certificate revocation mode for ChainTrust and PeerOrChainTrust X.509 certificate validation.</summary>
      <returns>One of the values in <see cref="T:System.Security.Cryptography.X509Certificates.X509RevocationMode" />: NoCheck, Online, or Offline. The default is Online.</returns>
      <exception cref="T:System.InvalidOperationException">set when credential is read-only.</exception>
    </member>
    <member name="P:System.ServiceModel.Security.X509ClientCertificateAuthentication.TrustedStoreLocation">
      <summary>Gets or sets the trusted store location under which context the client certificate chain is validated.</summary>
      <returns>The <see cref="T:System.Security.Cryptography.X509Certificates.StoreLocation" />.</returns>
      <exception cref="T:System.InvalidOperationException">set when credential is read-only.</exception>
    </member>
    <member name="T:System.ServiceModel.Security.X509PeerCertificateAuthentication">
      <summary>Specifies authentication properties for the peer certificate.</summary>
    </member>
    <member name="P:System.ServiceModel.Security.X509PeerCertificateAuthentication.CertificateValidationMode">
      <summary>Gets the certificate validation mode.</summary>
      <returns>A value from the enumeration in <see cref="T:System.ServiceModel.Security.X509CertificateValidationMode" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.X509PeerCertificateAuthentication.CustomCertificateValidator">
      <summary>Gets or sets a custom client certificate validator.</summary>
      <returns>The custom <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" />.</returns>
      <exception cref="T:System.InvalidOperationException">Set when credential is read-only.</exception>
    </member>
    <member name="P:System.ServiceModel.Security.X509PeerCertificateAuthentication.RevocationMode">
      <summary>Gets or sets the certificate revocation mode.</summary>
      <returns>One of the values in <see cref="P:System.ServiceModel.Security.X509PeerCertificateAuthentication.RevocationMode" />: None, Online, or Cached.</returns>
      <exception cref="T:System.InvalidOperationException">Set when credential is read-only.</exception>
    </member>
    <member name="P:System.ServiceModel.Security.X509PeerCertificateAuthentication.TrustedStoreLocation">
      <summary>Gets or sets the trusted store location where the client certificate is validated.</summary>
      <returns>The <see cref="T:System.Security.Cryptography.X509Certificates.StoreLocation" />.</returns>
      <exception cref="T:System.InvalidOperationException">Set when credential is read-only.</exception>
    </member>
    <member name="T:System.ServiceModel.Security.X509ServiceCertificateAuthentication">
      <summary>Represents the settings used by the client proxy to authenticate service certificates that are obtained using SSL/TLS negotiation.</summary>
    </member>
    <member name="P:System.ServiceModel.Security.X509ServiceCertificateAuthentication.CertificateValidationMode">
      <summary>Gets the certificate validation mode.</summary>
      <returns>A value from the enumeration in <see cref="T:System.ServiceModel.Security.X509CertificateValidationMode" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.X509ServiceCertificateAuthentication.CustomCertificateValidator">
      <summary>Gets or sets a custom client certificate validator.</summary>
      <returns>The custom <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" />.</returns>
      <exception cref="T:System.InvalidOperationException">Attempted to set when credential is read-only.</exception>
    </member>
    <member name="P:System.ServiceModel.Security.X509ServiceCertificateAuthentication.RevocationMode">
      <summary>Gets or sets the certificate revocation mode for ChainTrust and PeerOrChainTrust X.509 certificate validation mode.</summary>
      <returns>One of the values in <see cref="P:System.ServiceModel.Security.X509ServiceCertificateAuthentication.RevocationMode" />: NoCheck, Online, or Offline.</returns>
      <exception cref="T:System.InvalidOperationException">Attempted to set when credential is read-only.</exception>
    </member>
    <member name="P:System.ServiceModel.Security.X509ServiceCertificateAuthentication.TrustedStoreLocation">
      <summary>Gets or sets the trusted store location under which context the client certificate chain is validated.</summary>
      <returns>The <see cref="T:System.Security.Cryptography.X509Certificates.StoreLocation" />.</returns>
      <exception cref="T:System.InvalidOperationException">Attempted to set when credential is read-only.</exception>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken">
      <summary>Represents a binary secret security token.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken" /> class. </summary>
      <param name="key">A byte-array that represents the key.</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken" /> class. </summary>
      <param name="keySizeInBits">The key size in bits.</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken.#ctor(System.String,System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken" /> class. </summary>
      <param name="id">The token ID.</param>
      <param name="key">A byte-array that represents the key.</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken.#ctor(System.String,System.Byte[],System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken" /> class. </summary>
      <param name="id">The token ID.</param>
      <param name="key">A byte-array that represents the key.</param>
      <param name="allowCrypto">A <see cref="T:System.Boolean" /> that indicates whether to allow cryptography.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken" /> class. </summary>
      <param name="id">The token ID.</param>
      <param name="keySizeInBits">The key size in bits.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Either <paramref name="keySizeInBits" /> is less than or equal to zero, or it is greater than or equal to 512, or it is not a multiple of 8.</exception>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken.#ctor(System.String,System.Int32,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken" /> class. </summary>
      <param name="id">The token ID.</param>
      <param name="keySizeInBits">The key size in bits.</param>
      <param name="allowCrypto">A <see cref="T:System.Boolean" /> that indicates whether to allow cryptography.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Either <paramref name="keySizeInBits" /> is less than or equal to zero, or it is greater than or equal to 512, or it is not a multiple of 8.</exception>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken.GetKeyBytes">
      <summary>Gets the bytes that represent the key.</summary>
      <returns>The key.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken.Id">
      <summary>Gets the token ID.</summary>
      <returns>The token ID.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken.KeySize">
      <summary>Gets the token key size.</summary>
      <returns>The token key size.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken.SecurityKeys">
      <summary>Gets a collection of security keys.</summary>
      <returns>A collection of  <see cref="T:System.IdentityModel.Tokens.SecurityKey" />s.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken.ValidFrom">
      <summary>Gets the token effective start time.</summary>
      <returns>A <see cref="T:System.DateTime" /> that represents the token effective start time. </returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken.ValidTo">
      <summary>Gets the token effective start time.</summary>
      <returns>A <see cref="T:System.DateTime" /> that represents the token effective start time.</returns>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.ClaimTypeRequirement">
      <summary>Specifies the types of required and optional claims expected to appear in the federated credential.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.ClaimTypeRequirement.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.ClaimTypeRequirement" /> class for a required claim of the specified type. </summary>
      <param name="claimType">The claim type.</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.ClaimTypeRequirement.#ctor(System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.ClaimTypeRequirement" /> class for a claim of the specified type. </summary>
      <param name="claimType">The claim type.</param>
      <param name="isOptional">If false, the claim is required; otherwise, it is optional.</param>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ClaimTypeRequirement.ClaimType">
      <summary>Gets the claim type that was specified in the constructor.</summary>
      <returns>The claim type.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ClaimTypeRequirement.IsOptional">
      <summary>Gets a value that indicates whether the claim is optional.</summary>
      <returns>true if this instance of the class is for an optional claim; false if it specifies a required claim.</returns>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.IIssuanceSecurityTokenAuthenticator">
      <summary>Specifies the contract that should be implemented by a custom security token authenticator that issues tokens to the client.</summary>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IIssuanceSecurityTokenAuthenticator.IssuedSecurityTokenHandler">
      <summary>Gets or sets a handler for when the token is issued.</summary>
      <returns>A delegate that handles the event when a token is issued.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IIssuanceSecurityTokenAuthenticator.RenewedSecurityTokenHandler">
      <summary>Gets or sets a handler for when the token is renewed.</summary>
      <returns>A delegate that handles the event when a token is renewed.</returns>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.ILogonTokenCacheManager">
      <summary>This interface enables an application to clear the Windows token cache on demand.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.ILogonTokenCacheManager.FlushLogonTokenCache">
      <summary>Removes all tokens from the logon cache.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.ILogonTokenCacheManager.RemoveCachedLogonToken(System.String)">
      <summary>Removes the specified token from the logon cache.</summary>
      <returns>true if the user's token was successfully removed; otherwise, false. </returns>
      <param name="username">The user name on the token to remove.</param>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.InitiatorServiceModelSecurityTokenRequirement">
      <summary>Specifies security property requirements specific to channel creation in the .</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.InitiatorServiceModelSecurityTokenRequirement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.InitiatorServiceModelSecurityTokenRequirement" /> class. </summary>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.InitiatorServiceModelSecurityTokenRequirement.TargetAddress">
      <summary>Gets and sets the target address.</summary>
      <returns>The <see cref="T:System.ServiceModel.EndpointAddress" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.InitiatorServiceModelSecurityTokenRequirement.ToString">
      <summary>Outputs a text representation of this instance of the class.</summary>
      <returns>A text representation of this instance of the class.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.InitiatorServiceModelSecurityTokenRequirement.Via">
      <summary>Gets and sets the Via.</summary>
      <returns>The <see cref="T:System.Uri" /> that represents the Via.</returns>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.ISecurityContextSecurityTokenCache">
      <summary>When implemented, this interface specifies a contract for a security context token cache.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.ISecurityContextSecurityTokenCache.AddContext(System.ServiceModel.Security.Tokens.SecurityContextSecurityToken)">
      <summary>Adds a security context security token to the token cache.</summary>
      <param name="token">The <see cref="T:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken" />.</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.ISecurityContextSecurityTokenCache.ClearContexts">
      <summary>Clears the token cache of content.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.ISecurityContextSecurityTokenCache.GetAllContexts(System.Xml.UniqueId)">
      <summary>Gets a collection of security context security token IDs that match a specified context ID.</summary>
      <returns>A generic collection of <see cref="T:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken" />s.</returns>
      <param name="contextId">The specified security context ID.</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.ISecurityContextSecurityTokenCache.GetContext(System.Xml.UniqueId,System.Xml.UniqueId)">
      <summary>Gets the security context security token ID that matches a specified context ID and generation.</summary>
      <returns>The matching <see cref="T:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken" />.</returns>
      <param name="contextId">The specified security context ID.</param>
      <param name="generation">A <see cref="T:System.Xml.UniqueId" /> that represents the generation.</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.ISecurityContextSecurityTokenCache.RemoveAllContexts(System.Xml.UniqueId)">
      <summary>Removes all tokens from the cache that match a given context ID.</summary>
      <param name="contextId">The specified security context ID.</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.ISecurityContextSecurityTokenCache.RemoveContext(System.Xml.UniqueId,System.Xml.UniqueId)">
      <summary>Removes the token from the cache that matches a given context ID and generation.</summary>
      <param name="contextId">The specified security context ID.</param>
      <param name="generation">A <see cref="T:System.Xml.UniqueId" /> that represents the generation.</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.ISecurityContextSecurityTokenCache.TryAddContext(System.ServiceModel.Security.Tokens.SecurityContextSecurityToken)">
      <summary>Tries to add a token to the cache.</summary>
      <returns>true if the token was added successfully to the cache; otherwise, false. </returns>
      <param name="token">The <see cref="T:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="token" /> date or time is outside limits.</exception>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.ISecurityContextSecurityTokenCache.UpdateContextCachingTime(System.ServiceModel.Security.Tokens.SecurityContextSecurityToken,System.DateTime)">
      <summary>Updates the expiration date for a token in the cache.</summary>
      <param name="context">The <see cref="T:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken" />.</param>
      <param name="expirationTime">The new expiration time and date.</param>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.IssuedSecurityTokenHandler">
      <summary>This delegate points to a method that when implemented will be called by the Authenticators before the token is issued to the client.</summary>
      <param name="issuedToken">The token to be issued to the client.</param>
      <param name="tokenRequestor">The endpoint for which the token is requested. This is the endpoint to which the client will present the issued token.</param>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters">
      <summary>Represents the parameters for a security token issued in a Federated security scenario.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters.#ctor(System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters" /> class. </summary>
      <param name="other">The other instance of this class.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters" /> class. </summary>
      <param name="tokenType">The token type.</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters.#ctor(System.String,System.ServiceModel.EndpointAddress)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters" /> class. </summary>
      <param name="tokenType">The token type.</param>
      <param name="issuerAddress">The address of the endpoint that issues the token.</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters.#ctor(System.String,System.ServiceModel.EndpointAddress,System.ServiceModel.Channels.Binding)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters" /> class. </summary>
      <param name="tokenType">The token type.</param>
      <param name="issuerAddress">The address of the endpoint that issues the token.</param>
      <param name="issuerBinding">The binding of the issuer.</param>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters.AdditionalRequestParameters">
      <summary>A collection of additional request parameters</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.Collection`1" /> of type <see cref="T:System.Xml.XmlElement" /> that holds the additional request parameters.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters.ClaimTypeRequirements">
      <summary>Gets a collection of claim type requirements.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.Collection`1" /> of type <see cref="T:System.ServiceModel.Security.Tokens.ClaimTypeRequirement" /> that holds the additional claim type requirements.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters.CloneCore">
      <summary>Clones another instance of this instance of the class.</summary>
      <returns>A <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenParameters" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters.CreateKeyIdentifierClause(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle)">
      <summary>Creates a key identifier clause for a token.</summary>
      <returns>The <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />.</returns>
      <param name="token">The token.</param>
      <param name="referenceStyle">The <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="referenceStyle" /> is not External or Internal.</exception>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters.CreateRequestParameters(System.ServiceModel.MessageSecurityVersion,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>Creates a collection of issued token request parameter XML elements that get included in the request sent by the client to the security token service.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.Collection`1" /> that contains <see cref="T:System.Xml.XmlElement" />s that represent the request parameters.</returns>
      <param name="messageSecurityVersion">The <see cref="T:System.ServiceModel.MessageSecurityVersion" />.</param>
      <param name="securityTokenSerializer">The <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />.</param>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters.DefaultMessageSecurityVersion">
      <summary>Gets the default set of security specifications versions.</summary>
      <returns>A <see cref="T:System.ServiceModel.MessageSecurityVersion" /> that represents the default set of security specifications versions.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters.HasAsymmetricKey">
      <summary>Gets a value that indicates whether the issued token has an asymmetric key.</summary>
      <returns>true if the token has an asymmetric key; otherwise, false.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters.InitializeSecurityTokenRequirement(System.IdentityModel.Selectors.SecurityTokenRequirement)">
      <summary>When implemented, initializes a security token requirement based on the properties set on the IssuedSecurityTokenParameters.</summary>
      <param name="requirement">The <see cref="T:System.IdentityModel.Selectors.SecurityTokenRequirement" />.</param>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters.IssuerAddress">
      <summary>Gets or sets the token issuer's address.</summary>
      <returns>The <see cref="T:System.ServiceModel.EndpointAddress" /> of the token issuer.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters.IssuerBinding">
      <summary>Gets or sets the token issuer's binding, to be used by the client.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.Binding" /> of the token issuer, to be used by the client.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters.IssuerMetadataAddress">
      <summary>Gets or sets the token issuer's metadata address.</summary>
      <returns>The <see cref="T:System.ServiceModel.EndpointAddress" /> of the token issuer.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters.KeySize">
      <summary>Gets or sets the issued token key size.</summary>
      <returns>The size of the token key.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">An attempt was made to set a value less than 0.</exception>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters.KeyType">
      <summary>Gets or sets the issued token key type.</summary>
      <returns>One of the <see cref="T:System.IdentityModel.Tokens.SecurityKeyType" /> values.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters.SupportsClientAuthentication">
      <summary>When implemented, gets a value that indicates whether the token supports client authentication.</summary>
      <returns>true if the token supports client authentication; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters.SupportsClientWindowsIdentity">
      <summary>When implemented, gets a value that indicates whether the token supports a Windows identity for authentication.</summary>
      <returns>true if the token supports a Windows identity for authentication; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters.SupportsServerAuthentication">
      <summary>When implemented, gets a value that indicates whether the token supports server authentication.</summary>
      <returns>true if the token supports server authentication; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters.TokenType">
      <summary>Gets or sets the issued token type.</summary>
      <returns>The token type.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters.ToString">
      <summary>Displays a text representation of this instance of the class.</summary>
      <returns>A text representation of this instance of this class.</returns>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider">
      <summary>Token provider for issued security tokens.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.#ctor">
      <summary>Creates a new instance of this class.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.Abort">
      <summary>Aborts the provider.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.BeginClose(System.AsyncCallback,System.Object)">
      <summary>Asynchronously begins closing the provider.</summary>
      <returns>An <see cref="T:System.IAsyncResult" />.</returns>
      <param name="callback">The <see cref="T:System.AsyncCallback" />.</param>
      <param name="state">A <see cref="T:System.Object" /> that represents the state.</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Asynchronously begins closing the provider.</summary>
      <returns>An <see cref="T:System.IAsyncResult" />.</returns>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> after which the call times out.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" />.</param>
      <param name="state">A <see cref="T:System.Object" /> that represents the state.</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.BeginGetTokenCore(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Asynchronously begins getting the token core.</summary>
      <returns>An <see cref="T:System.IAsyncResult" />.</returns>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> after which the call times out.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" />.</param>
      <param name="state">A <see cref="T:System.Object" /> that represents the state.</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.BeginOpen(System.AsyncCallback,System.Object)">
      <summary>Asynchronously begins opening the provider.</summary>
      <returns>An <see cref="T:System.IAsyncResult" />.</returns>
      <param name="callback">The <see cref="T:System.AsyncCallback" />.</param>
      <param name="state">A <see cref="T:System.Object" /> that represents the state.</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Asynchronously begins opening the provider.</summary>
      <returns>An <see cref="T:System.IAsyncResult" />.</returns>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> after which the call times out.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" />.</param>
      <param name="state">A <see cref="T:System.Object" /> that represents the state.</param>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.CacheIssuedTokens">
      <summary>Gets or sets a value that indicates whether to cache issued tokens. </summary>
      <returns>true if issued tokens are cached; otherwise, false.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.Close">
      <summary>Closes the provider.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.Close(System.TimeSpan)">
      <summary>Closes the provider.</summary>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> after which the call times out.</param>
    </member>
    <member name="E:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.Closed">
      <summary>Provides registration and deregistration for the Closed event.</summary>
    </member>
    <member name="E:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.Closing">
      <summary>Provides registration and deregistration for the Closing event.</summary>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.DefaultCloseTimeout">
      <summary>Gets the default time-out for closing the connection.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> that represents the default time-out for closing the connection.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.DefaultOpenTimeout">
      <summary>Gets the default time-out for opening the connection.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> that represents the default time-out for opening the connection.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.Dispose">
      <summary>Disposes of this instance of the object.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.EndClose(System.IAsyncResult)">
      <summary>The asynchronous callback for closing the provider.</summary>
      <param name="result">An <see cref="T:System.IAsyncResult" />.</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.EndGetTokenCore(System.IAsyncResult)">
      <summary>The asynchronous callback for getting the token core.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityToken" />.</returns>
      <param name="result">An <see cref="T:System.IAsyncResult" />.</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.EndOpen(System.IAsyncResult)">
      <summary>The asynchronous callback for opening the provider.</summary>
      <param name="result">An <see cref="T:System.IAsyncResult" />.</param>
    </member>
    <member name="E:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.Faulted">
      <summary>Provides registration and deregistration for the Faulted event.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.GetTokenCore(System.TimeSpan)">
      <summary>Gets the token core.</summary>
      <returns>The <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> that represents the token core.</returns>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> after which the call times out.</param>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.IdentityVerifier">
      <summary>Gets or sets the identity verifier.</summary>
      <returns>The <see cref="T:System.ServiceModel.Security.IdentityVerifier" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.IssuedTokenRenewalThresholdPercentage">
      <summary>Gets or sets the issued token renewal threshold percentage.</summary>
      <returns>The issued token renewal threshold percentage.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.IssuerAddress">
      <summary>Gets or sets the issuer address.</summary>
      <returns>The <see cref="T:System.ServiceModel.EndpointAddress" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.IssuerBinding">
      <summary>Gets or sets the issuer binding.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.Binding" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.IssuerChannelBehaviors">
      <summary>Gets or sets the issuer channel behaviors.</summary>
      <returns>A <see cref="T:System.Collections.Generic.KeyedByTypeCollection`1" /> that contains the <see cref="T:System.ServiceModel.Description.IEndpointBehavior" />s for the issuer channel.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.KeyEntropyMode">
      <summary>Gets or sets the key entropy mode.</summary>
      <returns>The <see cref="T:System.ServiceModel.Security.SecurityKeyEntropyMode" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.MaxIssuedTokenCachingTime">
      <summary>Gets or sets the maximum time that an issued token will be cached.</summary>
      <returns>A <see cref="T:System.Timespan" /> that represents the maximum time that an issued token will be cached.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.MessageSecurityVersion">
      <summary>Gets or sets the message security version.</summary>
      <returns>The <see cref="T:System.ServiceModel.MessageSecurityVersion" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.Open">
      <summary>Opens the provider.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.Open(System.TimeSpan)">
      <summary>Opens the provider.</summary>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> after which the call times out.</param>
    </member>
    <member name="E:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.Opened">
      <summary>Provides registration and deregistration for the Opened event.</summary>
    </member>
    <member name="E:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.Opening">
      <summary>Provides registration and deregistration for the Opening event.</summary>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.SecurityAlgorithmSuite">
      <summary>Gets or sets the security algorithm suite.</summary>
      <returns>The <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.SecurityTokenSerializer">
      <summary>Gets or sets the security token serializer.</summary>
      <returns>The <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.State">
      <summary>Gets the communication state.</summary>
      <returns>The <see cref="T:System.ServiceModel.CommunicationState" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.SupportsTokenCancellation">
      <summary>Gets a value that indicates whether token cancellation is supported. </summary>
      <returns>true if token cancellation is supported; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.TargetAddress">
      <summary>Gets or sets the target address.</summary>
      <returns>The <see cref="T:System.ServiceModel.EndpointAddress" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.TokenRequestParameters">
      <summary>Gets the token request parameters.</summary>
      <returns>A collection of <see cref="T:System.Xml.XmlElement" />s that represent the token request parameters.</returns>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.KerberosSecurityTokenParameters">
      <summary>Represents the parameters for a Kerberos security token.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.KerberosSecurityTokenParameters.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.KerberosSecurityTokenParameters" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.KerberosSecurityTokenParameters.#ctor(System.ServiceModel.Security.Tokens.KerberosSecurityTokenParameters)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.KerberosSecurityTokenParameters" /> class.</summary>
      <param name="other">The other instance of this class.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.KerberosSecurityTokenParameters.CloneCore">
      <summary>Clones another instance of this instance of the class.</summary>
      <returns>A <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenParameters" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.KerberosSecurityTokenParameters.CreateKeyIdentifierClause(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle)">
      <summary>Creates a key identifier clause for a token.</summary>
      <returns>The <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />.</returns>
      <param name="token">The token.</param>
      <param name="referenceStyle">The <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle" />.</param>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.KerberosSecurityTokenParameters.HasAsymmetricKey">
      <summary>Gets a value that indicates whether the token has an asymmetric key.</summary>
      <returns>true if the token has an asymmetric key; otherwise, false.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.KerberosSecurityTokenParameters.InitializeSecurityTokenRequirement(System.IdentityModel.Selectors.SecurityTokenRequirement)">
      <summary>Initializes a security token requirement.</summary>
      <param name="requirement">The <see cref="T:System.IdentityModel.Selectors.SecurityTokenRequirement" />.</param>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.KerberosSecurityTokenParameters.SupportsClientAuthentication">
      <summary>When implemented, gets a value that indicates whether the token supports client authentication.</summary>
      <returns>true if the token supports client authentication; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.KerberosSecurityTokenParameters.SupportsClientWindowsIdentity">
      <summary>When implemented, gets a value that indicates whether the token supports a Windows identity for authentication.</summary>
      <returns>true if the token supports a Windows identity for authentication; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.KerberosSecurityTokenParameters.SupportsServerAuthentication">
      <summary>When implemented, gets a value that indicates whether the token supports server authentication.</summary>
      <returns>true if the token supports server authentication; otherwise, false.</returns>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.RecipientServiceModelSecurityTokenRequirement">
      <summary>Specifies security property requirements specific to the listener service in the .</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.RecipientServiceModelSecurityTokenRequirement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.RecipientServiceModelSecurityTokenRequirement" /> class. </summary>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.RecipientServiceModelSecurityTokenRequirement.AuditLogLocation">
      <summary>Gets and sets the audit log location.</summary>
      <returns>The <see cref="T:System.ServiceModel.AuditLogLocation" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.RecipientServiceModelSecurityTokenRequirement.ListenUri">
      <summary>Gets and sets the listener URI.</summary>
      <returns>The listener <see cref="T:System.Uri" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.RecipientServiceModelSecurityTokenRequirement.MessageAuthenticationAuditLevel">
      <summary>Gets and sets the message authentication audit level.</summary>
      <returns>The <see cref="T:System.ServiceModel.AuditLevel" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.RecipientServiceModelSecurityTokenRequirement.SuppressAuditFailure">
      <summary>Gets or sets a value that indicates whether to suppress an audit failure. </summary>
      <returns>true if audit failures are suppressed; otherwise, false.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.RecipientServiceModelSecurityTokenRequirement.ToString">
      <summary>Displays a text representation of this instance of the class.</summary>
      <returns>A text representation of this instance of the class.</returns>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.RenewedSecurityTokenHandler">
      <summary>The delegate when implemented is called before a renewed token is returned to the client. </summary>
      <param name="newSecurityToken">The renewed token.</param>
      <param name="oldSecurityToken">The expired security token.</param>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.RsaSecurityTokenParameters">
      <summary>Represents the parameters for an RSA security token.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.RsaSecurityTokenParameters.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.RsaSecurityTokenParameters" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.RsaSecurityTokenParameters.#ctor(System.ServiceModel.Security.Tokens.RsaSecurityTokenParameters)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.RsaSecurityTokenParameters" /> class.</summary>
      <param name="other">The other instance of this class.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.RsaSecurityTokenParameters.CloneCore">
      <summary>Clones another instance of this instance of the class.</summary>
      <returns>An <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenParameters" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.RsaSecurityTokenParameters.CreateKeyIdentifierClause(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle)">
      <summary>Creates a key identifier clause for a token.</summary>
      <returns>The <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />.</returns>
      <param name="token">The token.</param>
      <param name="referenceStyle">The <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle" />.</param>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.RsaSecurityTokenParameters.HasAsymmetricKey">
      <summary>Gets a value that indicates whether the token has an asymmetric key.</summary>
      <returns>true if the token has an asymmetric key; otherwise, false.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.RsaSecurityTokenParameters.InitializeSecurityTokenRequirement(System.IdentityModel.Selectors.SecurityTokenRequirement)">
      <summary>Initializes a security token requirement.</summary>
      <param name="requirement">The <see cref="T:System.IdentityModel.Selectors.SecurityTokenRequirement" />.</param>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.RsaSecurityTokenParameters.SupportsClientAuthentication">
      <summary>When implemented, gets a value that indicates whether the token supports client authentication.</summary>
      <returns>true if the token supports client authentication; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.RsaSecurityTokenParameters.SupportsClientWindowsIdentity">
      <summary>When implemented, gets a value that indicates whether the token supports a Windows identity for authentication.</summary>
      <returns>true if the token supports a Windows identity for authentication; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.RsaSecurityTokenParameters.SupportsServerAuthentication">
      <summary>When implemented, gets a value that indicates whether the token supports server authentication.</summary>
      <returns>true if the token supports server authentication; otherwise, false.</returns>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters">
      <summary>Represents the parameters for a secure conversation security token.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters.#ctor(System.ServiceModel.Channels.SecurityBindingElement)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters" /> class from the properties of a specified <see cref="T:System.ServiceModel.Channels.SecurityBindingElement" />. </summary>
      <param name="bootstrapSecurityBindingElement">The <see cref="T:System.ServiceModel.Channels.SecurityBindingElement" />.</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters.#ctor(System.ServiceModel.Channels.SecurityBindingElement,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters" /> class from the properties of a specified <see cref="T:System.ServiceModel.Channels.SecurityBindingElement" />. </summary>
      <param name="bootstrapSecurityBindingElement">The <see cref="T:System.ServiceModel.Channels.SecurityBindingElement" />.</param>
      <param name="requireCancellation">true if cancellation is required; otherwise, false. </param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters.#ctor(System.ServiceModel.Channels.SecurityBindingElement,System.Boolean,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters" /> class from the properties of a specified <see cref="T:System.ServiceModel.Channels.SecurityBindingElement" />.</summary>
      <param name="bootstrapSecurityBindingElement">A security binding element object that secures the message exchanged as part of the secure conversation token issuance.</param>
      <param name="requireCancellation">true if cancellation is required; otherwise, false. </param>
      <param name="canRenewSession">true if the communications session can be renewed; otherwise, false. </param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters.#ctor(System.ServiceModel.Channels.SecurityBindingElement,System.Boolean,System.Boolean,System.ServiceModel.Security.ChannelProtectionRequirements)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters" /> class from the properties of a specified <see cref="T:System.ServiceModel.Channels.SecurityBindingElement" /> with specified <see cref="T:System.ServiceModel.Security.ChannelProtectionRequirements" />.</summary>
      <param name="bootstrapSecurityBindingElement">A security binding element object that secures the message exchanged as part of the secure conversation token issuance.</param>
      <param name="requireCancellation">true if cancellation is required; otherwise, false. </param>
      <param name="canRenewSession">true if the communications session can be renewed; otherwise, false. </param>
      <param name="bootstrapProtectionRequirements">The channel protection requirements.</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters.#ctor(System.ServiceModel.Channels.SecurityBindingElement,System.Boolean,System.ServiceModel.Security.ChannelProtectionRequirements)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters" /> class from the properties of a specified <see cref="T:System.ServiceModel.Channels.SecurityBindingElement" /> with specified <see cref="T:System.ServiceModel.Security.ChannelProtectionRequirements" />. </summary>
      <param name="bootstrapSecurityBindingElement">The <see cref="T:System.ServiceModel.Channels.SecurityBindingElement" />.</param>
      <param name="requireCancellation">true if cancellation is required; otherwise, false. </param>
      <param name="bootstrapProtectionRequirements">The <see cref="T:System.ServiceModel.Security.ChannelProtectionRequirements" />.</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters.#ctor(System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters" /> class from another instance of this class. </summary>
      <param name="other">Another instance of this class.</param>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters.BootstrapProtectionRequirements">
      <summary>Gets the bootstrap protection requirements.</summary>
      <returns>
        <see cref="T:System.ServiceModel.Security.ChannelProtectionRequirements" />
      </returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters.BootstrapSecurityBindingElement">
      <summary>Gets or sets the <see cref="T:System.ServiceModel.Channels.SecurityBindingElement" />.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.SecurityBindingElement" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters.CanRenewSession">
      <summary>Gets or sets a value that indicates whether the communications session can be renewed.</summary>
      <returns>true if communications session can be renewed; otherwise, false.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters.CloneCore">
      <summary>Clones another instance of this instance of the class.</summary>
      <returns>A <see cref="T:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters.CreateKeyIdentifierClause(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle)">
      <summary>Creates a key identifier clause for a token.</summary>
      <returns>The <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />.</returns>
      <param name="token">The token.</param>
      <param name="referenceStyle">The <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="referenceStyle" /> is not External or Internal.</exception>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters.HasAsymmetricKey">
      <summary>Gets a value that indicates whether the security token has an asymmetric key. </summary>
      <returns>This property always returns false.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters.InitializeSecurityTokenRequirement(System.IdentityModel.Selectors.SecurityTokenRequirement)">
      <summary>Initializes a security token requirement.</summary>
      <param name="requirement">The <see cref="T:System.IdentityModel.Selectors.SecurityTokenRequirement" />.</param>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters.RequireCancellation">
      <summary>Gets or sets a value that indicates whether cancellation is required. </summary>
      <returns>true if cancellation is required; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters.SupportsClientAuthentication">
      <summary>Gets a value that indicates whether the token supports client authentication.</summary>
      <returns>true if the token supports client authentication; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters.SupportsClientWindowsIdentity">
      <summary>Gets a value that indicates whether the token supports a Windows identity for authentication.</summary>
      <returns>true if the token supports a Windows identity for authentication; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters.SupportsServerAuthentication">
      <summary>Gets a value that indicates whether the token supports server authentication.</summary>
      <returns>true if the token supports server authentication; otherwise, false.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters.ToString">
      <summary>Displays a text representation of this instance of the class.</summary>
      <returns>A text representation of this instance of this class.</returns>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken">
      <summary>Represents the token defined by the WS-SecureConversation specification.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken.#ctor(System.Xml.UniqueId,System.Byte[],System.DateTime,System.DateTime)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken" /> class. </summary>
      <param name="contextId">A <see cref="T:System.Xml.UniqueId" /> that represents the context id.</param>
      <param name="key">A byte array that represents the key.</param>
      <param name="validFrom">The effective start time.</param>
      <param name="validTo">The expiration time.</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken.#ctor(System.Xml.UniqueId,System.String,System.Byte[],System.DateTime,System.DateTime)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken" /> class. </summary>
      <param name="contextId">A <see cref="T:System.Xml.UniqueId" /> that represents the context id.</param>
      <param name="id">The token id.</param>
      <param name="key">A byte array that represents the key.</param>
      <param name="validFrom">The effective start time.</param>
      <param name="validTo">The expiration time.</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken.#ctor(System.Xml.UniqueId,System.String,System.Byte[],System.DateTime,System.DateTime,System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy})">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken" /> class. </summary>
      <param name="contextId">A <see cref="T:System.Xml.UniqueId" /> that represents the context id.</param>
      <param name="id">The token id.</param>
      <param name="key">A byte array that represents the key.</param>
      <param name="validFrom">The effective start time.</param>
      <param name="validTo">The expiration time.</param>
      <param name="authorizationPolicies">A read-only collection of <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" /> instances that represents the party to whom the token is issued.</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken.#ctor(System.Xml.UniqueId,System.String,System.Byte[],System.DateTime,System.DateTime,System.Xml.UniqueId,System.DateTime,System.DateTime,System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy})">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken" /> class. </summary>
      <param name="contextId">A <see cref="T:System.Xml.UniqueId" /> that represents the context id.</param>
      <param name="id">The token id.</param>
      <param name="key">A byte array that represents the key.</param>
      <param name="validFrom">The effective start time.</param>
      <param name="validTo">The expiration time.</param>
      <param name="keyGeneration">A <see cref="T:System.Xml.UniqueId" /> that represents the key generation.</param>
      <param name="keyEffectiveTime">The key effective start time.</param>
      <param name="keyExpirationTime">The key expiration time.</param>
      <param name="authorizationPolicies">A read-only collection of <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" />   instances that represents the party to whom the token is issued.</param>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken.AuthorizationPolicies">
      <summary>Gets a read-only collection of token authorization policies.</summary>
      <returns>A read-only collection of <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" /> instances.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken.BootstrapMessageProperty">
      <summary>Gets or sets the <see cref="T:System.ServiceModel.Security.SecurityMessageProperty" /> extracted from the bootstrap message.</summary>
      <returns>A security message property..</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken.CanCreateKeyIdentifierClause``1">
      <summary>Gets a value that indicates whether a specified key identifier clause type can be created. </summary>
      <returns>true if the specified key identifier clause type can be created; otherwise, false.</returns>
      <typeparam name="T">The specified key identifier clause type.</typeparam>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken.ContextId">
      <summary>Gets the context id.</summary>
      <returns>A <see cref="T:System.Xml.UniqueId" /> that represents the context id.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken.CreateCookieSecurityContextToken(System.Xml.UniqueId,System.String,System.Byte[],System.DateTime,System.DateTime,System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy},System.ServiceModel.Security.SecurityStateEncoder)">
      <summary>Creates a security context token cookie.</summary>
      <returns>A <see cref="T:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken" />.</returns>
      <param name="contextId">A <see cref="T:System.Xml.UniqueId" /> that represents the context id.</param>
      <param name="id">The token id.</param>
      <param name="key">A byte array that represents the key.</param>
      <param name="validFrom">The effective start time.</param>
      <param name="validTo">The expiration time.</param>
      <param name="authorizationPolicies">A read-only collection of <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" /> instances.</param>
      <param name="securityStateEncoder">The <see cref="T:System.ServiceModel.Security.SecurityStateEncoder" />.</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken.CreateCookieSecurityContextToken(System.Xml.UniqueId,System.String,System.Byte[],System.DateTime,System.DateTime,System.Xml.UniqueId,System.DateTime,System.DateTime,System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy},System.ServiceModel.Security.SecurityStateEncoder)">
      <summary>Creates a security context token cookie.</summary>
      <returns>A <see cref="T:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken" />.</returns>
      <param name="contextId">A <see cref="T:System.Xml.UniqueId" /> that represents the context id.</param>
      <param name="id">The token id.</param>
      <param name="key">A byte array that represents the key.</param>
      <param name="validFrom">The effective start time.</param>
      <param name="validTo">The expiration time.</param>
      <param name="keyGeneration">A <see cref="T:System.Xml.UniqueId" /> that represents the key generation.</param>
      <param name="keyEffectiveTime">The key effective start time.</param>
      <param name="keyExpirationTime">The key expiration time.</param>
      <param name="authorizationPolicies">A read-only collection of <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" /> instances.</param>
      <param name="securityStateEncoder">The <see cref="T:System.ServiceModel.Security.SecurityStateEncoder" />.</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken.CreateKeyIdentifierClause``1">
      <summary>Creates a key identifier clause of a specified type.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> cast to type <paramref name="T" />.</returns>
      <typeparam name="T">The specified type.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken.Dispose">
      <summary>Releases unmanaged resources used by this instance of this object.</summary>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken.Id">
      <summary>Gets the token id.</summary>
      <returns>The token id.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken.IsCookieMode">
      <summary>Returns a value that indicates whether a security context token (SCT) with a mode setting that specifies how cookies are handled is read in.</summary>
      <returns>true if a cookie mode SCT is read in; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken.KeyEffectiveTime">
      <summary>Gets the key effective start time.</summary>
      <returns>A <see cref="T:System.DateTime" /> that represents the key effective start time.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken.KeyExpirationTime">
      <summary>Gets the key expiration time.</summary>
      <returns>A <see cref="T:System.DateTime" /> that represents the key expiration time.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken.KeyGeneration">
      <summary>Gets the key generation.</summary>
      <returns>A <see cref="T:System.Xml.UniqueId" /> that represents the key generation.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>Gets a value that indicates whether the current token's key identifier clause matches a specified key identifier clause. </summary>
      <returns>true if the current token's key identifier clause matches a specified key identifier clause; otherwise, false. The default is false.</returns>
      <param name="keyIdentifierClause">The specified key identifier clause.</param>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken.SecurityKeys">
      <summary>Gets a read-only collection of security keys.</summary>
      <returns>A read-only collection of <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> instances.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken.ToString">
      <summary>Generates a text representation of the current instance of this object.</summary>
      <returns>A text representation of the current instance of this object.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken.ValidFrom">
      <summary>Gets the token effective start time.</summary>
      <returns>A <see cref="T:System.DateTime" /> that represents the token effective start time.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken.ValidTo">
      <summary>Gets the token expiration time.</summary>
      <returns>A <see cref="T:System.DateTime" /> that represents the token expiration time.</returns>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenAuthenticator">
      <summary>Validates tokens and extracts claims.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenAuthenticator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenAuthenticator" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenAuthenticator.CanValidateTokenCore(System.IdentityModel.Tokens.SecurityToken)">
      <summary>Gets a value that indicates whether a specified token can be validated. </summary>
      <returns>true if the specified token can be validated; otherwise, false.</returns>
      <param name="token">The <see cref="T:System.IdentityModel.Tokens.SecurityToken" />.</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenAuthenticator.ValidateTokenCore(System.IdentityModel.Tokens.SecurityToken)">
      <summary>Validates a specified token.</summary>
      <returns>A collection of <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" /> instances.</returns>
      <param name="token">The <see cref="T:System.IdentityModel.Tokens.SecurityToken" />.</param>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver">
      <summary>Resolves security context tokens.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.#ctor(System.Int32,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver" /> class. </summary>
      <param name="securityContextCacheCapacity">The size of the security context cache.</param>
      <param name="removeOldestTokensOnCacheFull">true if the oldest tokens should be removed when the cache is full; otherwise, false.</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.#ctor(System.Int32,System.Boolean,System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver" /> class with the specified security context cache capacity and clock skew maximum.</summary>
      <param name="securityContextCacheCapacity">The size of the security context cache.</param>
      <param name="removeOldestTokensOnCacheFull">true if the oldest tokens should be removed when the cache is full; otherwise, false.</param>
      <param name="clockSkew">The maximum allowable time difference between client and server clock settings.</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.AddContext(System.ServiceModel.Security.Tokens.SecurityContextSecurityToken)">
      <summary>Adds a security context security token to the token cache.</summary>
      <param name="token">The security context token.</param>
      <exception cref="T:System.ServiceModel.QuotaExceededException">The <see cref="P:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveOldestTokensOnCacheFull" /> property is false and the cache capacity has been reached or exceeded.</exception>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.ClearContexts">
      <summary>Clears the token cache of content.</summary>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.ClockSkew">
      <summary>Returns the maximum allowable time difference between client and server clock settings.</summary>
      <returns>The maximum allowable time difference between client and server clock settings.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.GetAllContexts(System.Xml.UniqueId)">
      <summary>Gets a collection of security context security token IDs that match a specified context ID.</summary>
      <returns>A generic collection of security context tokens.</returns>
      <param name="contextId">The specified security context ID.</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.GetContext(System.Xml.UniqueId,System.Xml.UniqueId)">
      <summary>Gets the security context security token ID that matches a specified context ID and generation.</summary>
      <returns>The matching security context token.</returns>
      <param name="contextId">The specified security context ID.</param>
      <param name="generation">The generation.</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveAllContexts(System.Xml.UniqueId)">
      <summary>Removes all tokens from the cache that match a given context ID.</summary>
      <param name="contextId">The specified security context ID.</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveContext(System.Xml.UniqueId,System.Xml.UniqueId)">
      <summary>Removes the token from the cache that matches a given context ID and generation.</summary>
      <param name="contextId">The specified security context ID.</param>
      <param name="generation">The generation.</param>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveOldestTokensOnCacheFull">
      <summary>Gets a value that indicates whether the oldest tokens should be removed when the cache is full. </summary>
      <returns>true if the oldest tokens should be removed when the cache is full; otherwise, false. </returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.SecurityContextTokenCacheCapacity">
      <summary>Gets the security context token cache size.</summary>
      <returns>The security context token cache size.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryAddContext(System.ServiceModel.Security.Tokens.SecurityContextSecurityToken)">
      <summary>Attempts to add a token to the cache.</summary>
      <returns>true if the token was added successfully to the cache; otherwise, false. </returns>
      <param name="token">The security context token.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="token" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="token" /> date or time is outside limits.</exception>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveSecurityKeyCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKey@)">
      <summary>Attempts to resolve the security key core, given a specified key identifier clause.</summary>
      <returns>true if the key core was successfully resolved; otherwise, false.</returns>
      <param name="keyIdentifierClause">The security key identifier clause.</param>
      <param name="key">When this method returns, contains resolved key core. This parameter is passed uninitialized. </param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken@)">
      <summary>Attempts to resolve the token, given a specified key identifier.</summary>
      <returns>true if the key token was successfully resolved; otherwise, false.</returns>
      <param name="keyIdentifier">The security key identifier.</param>
      <param name="token">When this method returns, contains the resolved key core. This parameter is passed uninitialized. </param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityToken@)">
      <summary>Attempts to resolve the token, given a specified key identifier clause.</summary>
      <returns>true if the key token was successfully resolved; otherwise, false.</returns>
      <param name="keyIdentifierClause">The security key identifier clause.</param>
      <param name="token">When this method returns, contains the resolved key core. This parameter is passed uninitialized. </param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.UpdateContextCachingTime(System.ServiceModel.Security.Tokens.SecurityContextSecurityToken,System.DateTime)">
      <summary>Updates the expiration date for a token in the cache.</summary>
      <param name="context">The security context.</param>
      <param name="expirationTime">The new expiration time and date.</param>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.SecurityTokenInclusionMode">
      <summary>A list of token inclusion requirements for messages.</summary>
    </member>
    <member name="F:System.ServiceModel.Security.Tokens.SecurityTokenInclusionMode.AlwaysToRecipient">
      <summary>Token is always included in messages to the recipient and never to the initiator.</summary>
    </member>
    <member name="F:System.ServiceModel.Security.Tokens.SecurityTokenInclusionMode.Never">
      <summary>The token is never included in messages but is referenced. The token must be known to the recipient out of band. The option does not work out of the box. You need to include custom credentials for this to work.</summary>
    </member>
    <member name="F:System.ServiceModel.Security.Tokens.SecurityTokenInclusionMode.Once">
      <summary>Token is included once.</summary>
    </member>
    <member name="F:System.ServiceModel.Security.Tokens.SecurityTokenInclusionMode.AlwaysToInitiator">
      <summary>Token is always included in messages to the initiator and never to the recipient.</summary>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.SecurityTokenParameters">
      <summary>An abstract class that when implemented represents security token parameters.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityTokenParameters.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenParameters" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityTokenParameters.#ctor(System.ServiceModel.Security.Tokens.SecurityTokenParameters)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenParameters" /> class from another instance.</summary>
      <param name="other">The other instance of this class.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityTokenParameters.Clone">
      <summary>Clones another instance of this instance of the class.</summary>
      <returns>A <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenParameters" />.</returns>
      <exception cref="T:System.InvalidOperationException">Unable to clone this instance of the class.</exception>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityTokenParameters.CloneCore">
      <summary>Clones another instance of this instance of the class.</summary>
      <returns>An <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenParameters" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityTokenParameters.CreateKeyIdentifierClause(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle)">
      <summary>Creates a key identifier clause for a token.</summary>
      <returns>The <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />.</returns>
      <param name="token">The token.</param>
      <param name="referenceStyle">The <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle" />.</param>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecurityTokenParameters.HasAsymmetricKey">
      <summary>When implemented, gets a value that indicates whether the token has an asymmetric key. </summary>
      <returns>true if the token has an asymmetric key; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecurityTokenParameters.InclusionMode">
      <summary>Gets or sets the token inclusion requirements.</summary>
      <returns>The <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenInclusionMode" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityTokenParameters.InitializeSecurityTokenRequirement(System.IdentityModel.Selectors.SecurityTokenRequirement)">
      <summary>When implemented, initializes a security token requirement.</summary>
      <param name="requirement">The <see cref="T:System.IdentityModel.Selectors.SecurityTokenRequirement" />.</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityTokenParameters.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityToken,System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle)">
      <summary>Gets a value that indicates whether a token matches a key identifier clause.</summary>
      <returns>true if the token matches the key identifier clause; otherwise, false.</returns>
      <param name="token">The <see cref="T:System.IdentityModel.Tokens.SecurityToken" />.</param>
      <param name="keyIdentifierClause">The <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />.</param>
      <param name="referenceStyle">The <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="referenceStyle" /> is not <see cref="F:System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle.External" /> or <see cref="F:System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle.Internal" />.</exception>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecurityTokenParameters.ReferenceStyle">
      <summary>Gets or sets the token reference style.</summary>
      <returns>The <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle" /> for the token.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">An invalid token reference style was set.</exception>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecurityTokenParameters.RequireDerivedKeys">
      <summary>Gets or sets a value that indicates whether keys can be derived from the original proof keys. </summary>
      <returns>true if keys need to be derived from the token's key; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecurityTokenParameters.SupportsClientAuthentication">
      <summary>When implemented, gets a value that indicates whether the token supports client authentication. </summary>
      <returns>true if the token supports client authentication; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecurityTokenParameters.SupportsClientWindowsIdentity">
      <summary>When implemented, gets a value that indicates whether the token supports a Windows identity for authentication.</summary>
      <returns>true if the token supports a Windows identity for authentication; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecurityTokenParameters.SupportsServerAuthentication">
      <summary>When implemented, gets a value that indicates whether the token supports server authentication.</summary>
      <returns>true if the token supports server authentication; otherwise, false.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityTokenParameters.ToString">
      <summary>Displays a text representation of this instance of the class.</summary>
      <returns>A text representation of this instance of this class.</returns>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle">
      <summary>This enumeration sets the desired referencing style that is used to generate security token references (STR) to the security tokens from the signature and encryption elements in the message.</summary>
    </member>
    <member name="F:System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle.Internal">
      <summary>The generated STR will reference the token as if it were included in the message.</summary>
    </member>
    <member name="F:System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle.External">
      <summary>The generated STR will reference the token as if it were not attached to the message itself.</summary>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement">
      <summary>An abstract class that when implemented specifies security property requirements of the token being requested or authenticated that are specific to . The security token manager constructs security token providers and security token authenticators that are used by the  security processor based on the token requirement.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement" /> class. </summary>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.AuditLogLocationProperty">
      <summary>Gets the token requirement property name whose value is the location of the audit log to use when recording the results of the authentication (service only).</summary>
      <returns>The key for the AuditLogLocation in the token requirement's Properties dictionary.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.ChannelParametersCollectionProperty">
      <summary>Gets the token requirement property name whose value is the channel parameters collection (client only).</summary>
      <returns>The key for the ChannelParametersCollection in the token requirement's Properties dictionary.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.DuplexClientLocalAddressProperty">
      <summary>Gets a value that specifies the name of the index in the <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties" /> collection for the DuplexClientLocalAddress property.</summary>
      <returns>The name of the index in the <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties" /> collection for the DuplexClientLocalAddress property.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.EndpointFilterTableProperty">
      <summary>Gets the key for the token requirement property whose value is the endpoint filter table that contains the filters for messages that a service endpoint accepts. This is a service property.</summary>
      <returns>The key for the endpoint filter table property of the token requirement.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.ExtendedProtectionPolicy">
      <summary>Gets the protection policy used by the server to validate incoming client connections.</summary>
      <returns>The protection policy used by the server.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.HttpAuthenticationSchemeProperty">
      <summary>Gets the key of the token requirement property whose value is the HTTP authentication scheme if this request is for a token provider or token authenticator to be used in HTTP authentication.</summary>
      <returns>The key of the token requirement's HTTP authentication scheme property.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.IsInitiator">
      <summary>Gets a value that indicates whether the endpoint that is creating the security token requirement is an initiator or a recipient. </summary>
      <returns>true if the request is made by the initiator of the channel; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.IsInitiatorProperty">
      <summary>Gets the key for the token requirement property whose value indicates whether the request is made by the initiator of the channel or the recipient of the channel.</summary>
      <returns>The key for the token requirement property whose value indicates whether the endpoint that creates the requirement is the initiator or recipient.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.IsOutOfBandTokenProperty">
      <summary>Gets the key for the token requirement property whose value indicates whether this is the request for a token that is configured on the client or service.</summary>
      <returns>The key for the token requirement property whose value indicates whether this is the request for a token that is configured on the client or service.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.IssuedSecurityTokenParametersProperty">
      <summary>Gets the key for the token requirement property whose value is the <see cref="T:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters" /> that contains information about the token if the requirement is for an issued token.</summary>
      <returns>The key for the token requirement property whose value is the <see cref="T:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters" /> that contains information about the token if the requirement is for an issued token.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.IssuerAddress">
      <summary>If the token requirement is for an issued token, this property contains the endpoint address of the issuer.</summary>
      <returns>The endpoint address for the token issuer. This is used for issued token types.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.IssuerAddressProperty">
      <summary>Gets the key for the token requirement property whose value is the <see cref="T:System.ServiceModel.EndpointAddress" /> of the issuing party if the requirement is for an issued token.</summary>
      <returns>The key for the token requirement property whose value is the <see cref="T:System.ServiceModel.EndpointAddress" /> of the issuing party.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.IssuerBinding">
      <summary>If the token requirement is for an issued token, this property contains the binding to use to communicate with the issuer.</summary>
      <returns>The binding used to communicate with the user.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.IssuerBindingContextProperty">
      <summary>Gets the key for the token requirement property whose value is the <see cref="T:System.ServiceModel.Channels.BindingContext" /> to use to talk to the issuing party if the requirement is for an issued token.</summary>
      <returns>The key for the token requirement property whose value is <see cref="T:System.ServiceModel.Channels.BindingContext" /> to use to talk to the issuing party.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.IssuerBindingProperty">
      <summary>Gets the key for the token requirement property whose value is the binding to use to talk to the issuing party when the requirement is for an issued token.</summary>
      <returns>The key for the token requirement property whose value is the binding to use to talk to the issuing party.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.ListenUriProperty">
      <summary>Gets the key for the token requirement property whose value is the URI that the service endpoint making the request is listening at (service only).</summary>
      <returns>The key for the token requirement property whose value is the URI that the service endpoint making the request is listening at.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.MessageAuthenticationAuditLevelProperty">
      <summary>Gets the key for the token requirement property whose value is the audit level to use when recording the results of the authentication (service only).</summary>
      <returns>Gets the key for the token requirement property whose value is the audit level to use when recording the results of the authentication.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.MessageDirectionProperty">
      <summary>Gets the key for the token requirement property whose value is the member of the <see cref="T:System.ServiceModel.Description.MessageDirection" /> enumeration to use and that indicates whether the token provider is needed for messages sent from client to server or server to client. </summary>
      <returns>Gets the key for the token requirement property whose value is the member of the <see cref="T:System.ServiceModel.Description.MessageDirection" /> enumeration to use.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.MessageSecurityVersion">
      <summary>Gets or sets the message security version to be used (if necessary).</summary>
      <returns>The message security version.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.MessageSecurityVersionProperty">
      <summary>Gets the key for the token requirement property whose value is the <see cref="T:System.ServiceModel.Channels.MessageVersion" /> that the channel is configured with.</summary>
      <returns>The key for the token requirement property whose value is the <see cref="T:System.ServiceModel.Channels.MessageVersion" /> that the channel is configured with.</returns>
    </member>
    <member name="F:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.Namespace">
      <summary>The current namespace.</summary>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.PrivacyNoticeUriProperty">
      <summary>Gets the key for the token requirement property whose value is the link to the URI that points to the service's privacy policy if the service has one.</summary>
      <returns>The key for the token requirement property whose value is a link to the URI that points to the service's privacy policy.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.PrivacyNoticeVersionProperty">
      <summary>Gets the key for the token requirement property whose value is a string that represents the privacy notice version.</summary>
      <returns>The key for the token requirement property whose value represents the privacy notice version.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.SecureConversationSecurityBindingElement">
      <summary>Gets or sets a security binding element used for securing the secure conversation bootstrap messages. </summary>
      <returns>A security binding element.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.SecureConversationSecurityBindingElementProperty">
      <summary>Gets the key for the token requirement property whose value is the security binding element used to secure the secure conversation bootstrap messages.</summary>
      <returns>The key for the token requirement property whose value represents the security binding element to be used for securing the secure conversation bootstrap messages.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.SecurityAlgorithmSuite">
      <summary>Gets or sets the security algorithm suite to be used (if necessary).</summary>
      <returns>The security algorithm suite to be used.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.SecurityAlgorithmSuiteProperty">
      <summary>Gets the key for the token requirement property whose value is the algorithm suite that the channel uses to perform message security.</summary>
      <returns>The key for the token requirement property whose value is <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.SecurityBindingElement">
      <summary>Gets or sets the security binding element.</summary>
      <returns>The security binding element.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.SecurityBindingElementProperty">
      <summary>Gets the key for the token requirement property whose value is the security binding element used to create the channel.</summary>
      <returns>The key for the token requirement property whose value is the <see cref="T:System.ServiceModel.Channels.SecurityBindingElement" /> used to create the channel.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.SupportingTokenAttachmentModeProperty">
      <summary>Gets the key for the token requirement property whose value is the associated <see cref="T:System.ServiceModel.Security.SecurityTokenAttachmentMode" /> enumeration member if the request is for a supporting token. </summary>
      <returns>The key for the token requirement property whose value is the associated <see cref="T:System.ServiceModel.Security.SecurityTokenAttachmentMode" /> enumeration member.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.SupportSecurityContextCancellationProperty">
      <summary>Gets the key for the token requirement property whose value indicates whether the secure conversation token is for a security session (in which case its lifetime is tied to the lifetime of the user’s channel) or for a datagram security channel.</summary>
      <returns>The key for the token requirement property whose value indicates whether the secure conversation token should be cancelable.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.SuppressAuditFailureProperty">
      <summary>Gets the key for the token requirement property whose value indicates whether to ignore errors that occur when recording the results of the authentication (service only).</summary>
      <returns>The key for the token requirement property whose value indicates whether to ignore errors that occur when recording the results of the authentication.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.TargetAddressProperty">
      <summary>Gets the key for the token requirement property whose value is the endpoint address that the channel is talking to (client only).</summary>
      <returns>The key for the token requirement property whose value is the <see cref="T:System.ServiceModel.EndpointAddress" /> that the channel is talking to.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.TransportScheme">
      <summary>Gets or sets the transport scheme.</summary>
      <returns>The transport scheme.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.TransportSchemeProperty">
      <summary>If the request is made for a token provider/authenticator to be used with transport security, this string is the key for the token requirement property whose value is the transport scheme.</summary>
      <returns>The key for the token requirement property whose value is the transport scheme.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.ViaProperty">
      <summary>Gets the key for the token requirement property whose value is the Via URI that the channel is connecting to (client only).</summary>
      <returns>The key for the token requirement property whose value is the Via URI that the channel is connecting to.</returns>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenTypes">
      <summary>Represents the types of security tokens recognized by .</summary>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenTypes.AnonymousSslnego">
      <summary>Gets a string that indicates that the initiator is anonymous but the responder certificate is available as part of a SOAP SSL negotiation.</summary>
      <returns>A string that indicates that the initiator is anonymous but the responder certificate is available as part of a SOAP SSL negotiation.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenTypes.MutualSslnego">
      <summary>Gets a string that indicates that the initiator and responder mutually authenticate each other using X.509 certificates.</summary>
      <returns>A string that indicates that the initiator and responder mutually authenticate each other using X.509 certificates.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenTypes.SecureConversation">
      <summary>Gets a string that indicates whether the service uses WS-SecureConversation authentication.</summary>
      <returns>A string that indicates whether the service uses WS-SecureConversation authentication.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenTypes.SecurityContext">
      <summary>Gets a string that indicates whether the service uses SOAP SecurityContext authentication.</summary>
      <returns>A string that indicates whether the service uses SOAP SecurityContext authentication.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenTypes.Spnego">
      <summary>Gets a string that indicates whether authentication is done via the Windows Services SP Negotiation (SPNEGO) protocol.</summary>
      <returns>A string that indicates whether authentication is done via the Windows Services SPNEGO protocol.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenTypes.SspiCredential">
      <summary>Gets a string that indicates whether client authentication is by means of a Windows credential.</summary>
      <returns>A string that indicates whether client authentication is by means of a Windows credential.</returns>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.SslSecurityTokenParameters">
      <summary>Represents the parameters for an SSL security token that is obtained when doing the SOAP-level SSL protocol with the server.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SslSecurityTokenParameters.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.SslSecurityTokenParameters" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SslSecurityTokenParameters.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.SslSecurityTokenParameters" /> class. </summary>
      <param name="requireClientCertificate">A <see cref="T:System.Boolean" /> that determines whether a client certificate is required.</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SslSecurityTokenParameters.#ctor(System.Boolean,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.SslSecurityTokenParameters" /> class. </summary>
      <param name="requireClientCertificate">A <see cref="T:System.Boolean" /> that determines whether a client certificate is required.</param>
      <param name="requireCancellation">A <see cref="T:System.Boolean" /> that determines whether cancellation is required.</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SslSecurityTokenParameters.#ctor(System.ServiceModel.Security.Tokens.SslSecurityTokenParameters)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.SslSecurityTokenParameters" /> class. </summary>
      <param name="other">The other instance of this class.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SslSecurityTokenParameters.CloneCore">
      <summary>Clones another instance of this instance of the class.</summary>
      <returns>A <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenParameters" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SslSecurityTokenParameters.CreateKeyIdentifierClause(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle)">
      <summary>Creates a key identifier clause for a token.</summary>
      <returns>The <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />.</returns>
      <param name="token">The token.</param>
      <param name="referenceStyle">The <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="referenceStyle" /> is not External or Internal.</exception>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SslSecurityTokenParameters.HasAsymmetricKey">
      <summary>Gets a value that indicates whether the token has an asymmetric key.</summary>
      <returns>true if the token has an asymmetric key; otherwise, false.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SslSecurityTokenParameters.InitializeSecurityTokenRequirement(System.IdentityModel.Selectors.SecurityTokenRequirement)">
      <summary>Initializes a security token requirement.</summary>
      <param name="requirement">The <see cref="T:System.IdentityModel.Selectors.SecurityTokenRequirement" />.</param>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SslSecurityTokenParameters.RequireCancellation">
      <summary>Gets or sets a value that indicates whether cancellation is required. </summary>
      <returns>true if cancellation is required; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SslSecurityTokenParameters.RequireClientCertificate">
      <summary>Gets or sets a value that indicates whether a client certificate is required.</summary>
      <returns>true if a client certificate is required; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SslSecurityTokenParameters.SupportsClientAuthentication">
      <summary>When implemented, gets a value that indicates whether the token supports client authentication.</summary>
      <returns>true if the token supports client authentication; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SslSecurityTokenParameters.SupportsClientWindowsIdentity">
      <summary>When implemented, gets a value that indicates whether the token supports a Windows identity for authentication.</summary>
      <returns>true if the token supports a Windows identity for authentication; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SslSecurityTokenParameters.SupportsServerAuthentication">
      <summary>When implemented, gets a value that indicates whether the token supports server authentication.</summary>
      <returns>true if the token supports server authentication; otherwise, false.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SslSecurityTokenParameters.ToString">
      <summary>Displays a text representation of this instance of the class.</summary>
      <returns>A text representation of this instance of the class.</returns>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.SspiSecurityToken">
      <summary>Represents an SSPI security token.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SspiSecurityToken.#ctor(System.Net.NetworkCredential,System.Boolean,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.SspiSecurityToken" /> class. </summary>
      <param name="networkCredential">The <see cref="T:System.Net.NetworkCredential" />.</param>
      <param name="extractGroupsForWindowsAccounts">true if the groups to which the Windows accounts belong are extracted; otherwise, false.</param>
      <param name="allowUnauthenticatedCallers">true if unauthenticated (anonymous) callers are allowed; otherwise, false.</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SspiSecurityToken.#ctor(System.Security.Principal.TokenImpersonationLevel,System.Boolean,System.Net.NetworkCredential)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.SspiSecurityToken" /> class. </summary>
      <param name="impersonationLevel">The <see cref="T:System.Security.Principal.TokenImpersonationLevel" />.</param>
      <param name="allowNtlm">true if NTLM authentication is allowed; otherwise, false.</param>
      <param name="networkCredential">The <see cref="T:System.Net.NetworkCredential" />.</param>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SspiSecurityToken.AllowNtlm">
      <summary>Gets a value that indicates whether to allow NTLM authentication. </summary>
      <returns>true if NTLM authentication is allowed; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SspiSecurityToken.AllowUnauthenticatedCallers">
      <summary>Gets a value that indicates whether to allow anonymous callers. </summary>
      <returns>true if anonymous callers are allowed; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SspiSecurityToken.ExtractGroupsForWindowsAccounts">
      <summary>Gets a value that indicates whether to extract the groups to which the Windows accounts belong. </summary>
      <returns>true if the groups to which the Windows accounts belong are extracted; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SspiSecurityToken.Id">
      <summary>Gets the token ID.</summary>
      <returns>The token ID.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SspiSecurityToken.ImpersonationLevel">
      <summary>Gets the token impersonation level.</summary>
      <returns>The <see cref="T:System.Security.Principal.TokenImpersonationLevel" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SspiSecurityToken.NetworkCredential">
      <summary>Gets the network credential.</summary>
      <returns>The <see cref="T:System.Net.NetworkCredential" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SspiSecurityToken.SecurityKeys">
      <summary>Gets a collection of security keys.</summary>
      <returns>A collection of <see cref="T:System.IdentityModel.Tokens.SecurityKey" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SspiSecurityToken.ValidFrom">
      <summary>Gets the starting effective date for the token.</summary>
      <returns>A <see cref="T:System.DateTime" /> that represents the starting effective date for the token.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SspiSecurityToken.ValidTo">
      <summary>Gets the expiration date for the token.</summary>
      <returns>A <see cref="T:System.DateTime" /> that represents the expiration date for the token.</returns>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.SspiSecurityTokenParameters">
      <summary>Represents the parameters for an SSPI security token that is obtained during the SOAP-level SPNEGO protocol with the server.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SspiSecurityTokenParameters.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.SspiSecurityTokenParameters" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SspiSecurityTokenParameters.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.SspiSecurityTokenParameters" /> class.</summary>
      <param name="requireCancellation">Whether the token requires cancellation.</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SspiSecurityTokenParameters.#ctor(System.ServiceModel.Security.Tokens.SspiSecurityTokenParameters)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.SspiSecurityTokenParameters" /> class.</summary>
      <param name="other">The other instance of this class.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SspiSecurityTokenParameters.CloneCore">
      <summary>Clones another instance of this instance of the class.</summary>
      <returns>An <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenParameters" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SspiSecurityTokenParameters.CreateKeyIdentifierClause(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle)">
      <summary>Creates a key identifier clause for a token.</summary>
      <returns>The <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />.</returns>
      <param name="token">The token.</param>
      <param name="referenceStyle">The <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle" />.</param>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SspiSecurityTokenParameters.HasAsymmetricKey">
      <summary>Gets a value that indicates whether the token has an asymmetric key.</summary>
      <returns>Always returns false.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SspiSecurityTokenParameters.InitializeSecurityTokenRequirement(System.IdentityModel.Selectors.SecurityTokenRequirement)">
      <summary>Initializes a security token requirement.</summary>
      <param name="requirement">The <see cref="T:System.IdentityModel.Selectors.SecurityTokenRequirement" />.</param>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SspiSecurityTokenParameters.RequireCancellation">
      <summary>Gets or sets a value that indicates whether the token requires cancellation. </summary>
      <returns>true if the token requires cancellation; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SspiSecurityTokenParameters.SupportsClientAuthentication">
      <summary>When implemented, gets a value that indicates whether the token supports client authentication.</summary>
      <returns>Always returns true.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SspiSecurityTokenParameters.SupportsClientWindowsIdentity">
      <summary>When implemented, gets a value that indicates whether the token supports a Windows identity for authentication.</summary>
      <returns>Always returns true.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SspiSecurityTokenParameters.SupportsServerAuthentication">
      <summary>When implemented, gets a value that indicates whether the token supports server authentication.</summary>
      <returns>Always returns true.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SspiSecurityTokenParameters.ToString">
      <summary>Displays a text representation of this instance of the class.</summary>
      <returns>A text representation of this instance of this class.</returns>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.SupportingTokenParameters">
      <summary>Represents the parameters for supporting security tokens required by the security binding element.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SupportingTokenParameters.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.SupportingTokenParameters" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SupportingTokenParameters.Clone">
      <summary>Clones another instance of this instance of the class.</summary>
      <returns>A <see cref="T:System.ServiceModel.Security.Tokens.SupportingTokenParameters" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SupportingTokenParameters.Endorsing">
      <summary>Gets a collection of security token parameters for endorsing supporting tokens required by the security binding element.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenParameters" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SupportingTokenParameters.SetKeyDerivation(System.Boolean)">
      <summary>Sets a value that indicates whether all endorsing or signed endorsing token parameters require derived keys. </summary>
      <param name="requireDerivedKeys">A <see cref="T:System.Boolean" /> that determines whether parameters require derived keys.</param>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SupportingTokenParameters.Signed">
      <summary>Gets a collection of security token parameters for signed supporting tokens required by the security binding element</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenParameters" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SupportingTokenParameters.SignedEncrypted">
      <summary>Gets a collection of security token parameters for signed and encrypted supporting tokens required by the security binding element.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenParameters" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SupportingTokenParameters.SignedEndorsing">
      <summary>Gets a collection of security token parameters for signed and endorsing supporting tokens required by the security binding element.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenParameters" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SupportingTokenParameters.ToString">
      <summary>Displays a text representation of this instance of the class.</summary>
      <returns>A text representation of this instance of this class.</returns>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.UserNameSecurityTokenParameters">
      <summary>Represents the parameters for a user name security token.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.UserNameSecurityTokenParameters.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.UserNameSecurityTokenParameters" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.UserNameSecurityTokenParameters.#ctor(System.ServiceModel.Security.Tokens.UserNameSecurityTokenParameters)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.UserNameSecurityTokenParameters" /> class.</summary>
      <param name="other">The other instance of this class.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.UserNameSecurityTokenParameters.CloneCore">
      <summary>Clones another instance of this instance of the class.</summary>
      <returns>An <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenParameters" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.UserNameSecurityTokenParameters.CreateKeyIdentifierClause(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle)">
      <summary>Creates a key identifier clause for a token.</summary>
      <returns>The <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />.</returns>
      <param name="token">The token.</param>
      <param name="referenceStyle">The <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="referenceStyle" /> is not External or Internal.</exception>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.UserNameSecurityTokenParameters.HasAsymmetricKey">
      <summary>Gets a value that indicates whether the token has an asymmetric key.</summary>
      <returns>Always returns false.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.UserNameSecurityTokenParameters.InitializeSecurityTokenRequirement(System.IdentityModel.Selectors.SecurityTokenRequirement)">
      <summary>Initializes a security token requirement.</summary>
      <param name="requirement">The <see cref="T:System.IdentityModel.Selectors.SecurityTokenRequirement" />.</param>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.UserNameSecurityTokenParameters.SupportsClientAuthentication">
      <summary>When implemented, gets a value that indicates whether the token supports client authentication.</summary>
      <returns>Always returns true.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.UserNameSecurityTokenParameters.SupportsClientWindowsIdentity">
      <summary>When implemented, gets a value that indicates whether the token supports a Windows identity for authentication.</summary>
      <returns>Always returns true.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.UserNameSecurityTokenParameters.SupportsServerAuthentication">
      <summary>When implemented, gets a value that indicates whether the token supports server authentication.</summary>
      <returns>Always returns false.</returns>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken">
      <summary>Represents a security token whose key is wrapped inside another token.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken.#ctor(System.String,System.Byte[],System.String,System.IdentityModel.Tokens.SecurityToken,System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken" /> class. </summary>
      <param name="id">The ID of the key token.</param>
      <param name="keyToWrap">The key to be wrapped.</param>
      <param name="wrappingAlgorithm">The algorithm used to do the wrapping.</param>
      <param name="wrappingToken">A <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> that represents the wrapping token.</param>
      <param name="wrappingTokenReference">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> that represents a reference to the wrapping token.</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken.CanCreateKeyIdentifierClause``1">
      <summary>Gets a value that indicates whether the token can create a key identifier clause.</summary>
      <returns>true if the token can create a key identifier clause; otherwise, false. The default is false.</returns>
      <typeparam name="T">The type of the <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken.CreateKeyIdentifierClause``1">
      <summary>Create a key identifier clause.</summary>
      <returns>The type of the <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />.</returns>
      <typeparam name="T">The type of the <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken.GetWrappedKey">
      <summary>Gets the wrapped key.</summary>
      <returns>The wrapped key.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken.Id">
      <summary>Gets the token ID.</summary>
      <returns>The token ID.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>Compares the current security key identifier clause to a specified one for equality.</summary>
      <returns>true if the current security key identifier clause equals the specified one; otherwise, false. The default is false.</returns>
      <param name="keyIdentifierClause">The specified security key identifier clause.</param>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken.SecurityKeys">
      <summary>Gets a collection of security keys.</summary>
      <returns>A collection of <see cref="T:System.IdentityModel.Tokens.SecurityKey" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken.ValidFrom">
      <summary>Gets the token effective start date.</summary>
      <returns>A <see cref="T:System.DateTime" /> that represents the token effective start date.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken.ValidTo">
      <summary>Gets the token expiration date.</summary>
      <returns>A <see cref="T:System.DateTime" /> that represents the token expiration date.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken.WrappingAlgorithm">
      <summary>Gets the wrapping algorithm.</summary>
      <returns>A <see cref="T:System.String" /> that specifies the wrapping algorithm or the algorithm used to encrypt the symmetric key.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken.WrappingToken">
      <summary>Gets the wrapping token.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> that represents the wrapping token.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken.WrappingTokenReference">
      <summary>Gets the wrapping token reference.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> that represents a reference to the wrapping token.</returns>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.X509KeyIdentifierClauseType">
      <summary>An enumeration listing the possible types of X.509 key identifier clauses.</summary>
    </member>
    <member name="F:System.ServiceModel.Security.Tokens.X509KeyIdentifierClauseType.Any">
      <summary>
        <see cref="F:System.ServiceModel.Security.Tokens.X509KeyIdentifierClauseType.SubjectKeyIdentifier" /> is used if present in the X.509 certificate, otherwise <see cref="F:System.ServiceModel.Security.Tokens.X509KeyIdentifierClauseType.IssuerSerial" /> is used.</summary>
    </member>
    <member name="F:System.ServiceModel.Security.Tokens.X509KeyIdentifierClauseType.Thumbprint">
      <summary>The X.509 Thumbprint is used.</summary>
    </member>
    <member name="F:System.ServiceModel.Security.Tokens.X509KeyIdentifierClauseType.IssuerSerial">
      <summary>The IssuerSerial reference is used: the issuer identifier plus a serial number that is unique for an issuer.</summary>
    </member>
    <member name="F:System.ServiceModel.Security.Tokens.X509KeyIdentifierClauseType.SubjectKeyIdentifier">
      <summary>Reference is based on the subject key identifier extension of an X.509 certificate (not all certificates have one, it is an optional property).</summary>
    </member>
    <member name="F:System.ServiceModel.Security.Tokens.X509KeyIdentifierClauseType.RawDataKeyIdentifier">
      <summary>The reference contains the raw data for the entire X.509 certificate.</summary>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.X509SecurityTokenParameters">
      <summary>Represents the parameters for an X.509 security token.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.X509SecurityTokenParameters.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.X509SecurityTokenParameters" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.X509SecurityTokenParameters.#ctor(System.ServiceModel.Security.Tokens.X509KeyIdentifierClauseType)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.X509SecurityTokenParameters" /> class.</summary>
      <param name="x509ReferenceStyle">An <see cref="T:System.ServiceModel.Security.Tokens.X509KeyIdentifierClauseType" />.</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.X509SecurityTokenParameters.#ctor(System.ServiceModel.Security.Tokens.X509KeyIdentifierClauseType,System.ServiceModel.Security.Tokens.SecurityTokenInclusionMode)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.X509SecurityTokenParameters" /> class.</summary>
      <param name="x509ReferenceStyle">An <see cref="T:System.ServiceModel.Security.Tokens.X509KeyIdentifierClauseType" />.</param>
      <param name="inclusionMode">A <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenInclusionMode" />.</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.X509SecurityTokenParameters.#ctor(System.ServiceModel.Security.Tokens.X509SecurityTokenParameters)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.Tokens.X509SecurityTokenParameters" /> class.</summary>
      <param name="other">The other instance of this class.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.X509SecurityTokenParameters.CloneCore">
      <summary>Clones another instance of this instance of the class.</summary>
      <returns>A <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenParameters" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.X509SecurityTokenParameters.CreateKeyIdentifierClause(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle)">
      <summary>Creates a key identifier clause for a token.</summary>
      <returns>The <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />.</returns>
      <param name="token">The token.</param>
      <param name="referenceStyle">The <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle" />.</param>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.X509SecurityTokenParameters.HasAsymmetricKey">
      <summary>Gets a value that indicates whether the token has an asymmetric key.</summary>
      <returns>Always returns false.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.X509SecurityTokenParameters.InitializeSecurityTokenRequirement(System.IdentityModel.Selectors.SecurityTokenRequirement)">
      <summary>Initializes a security token requirement.</summary>
      <param name="requirement">The <see cref="T:System.IdentityModel.Selectors.SecurityTokenRequirement" />.</param>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.X509SecurityTokenParameters.SupportsClientAuthentication">
      <summary>When implemented, gets a value that indicates whether the token supports client authentication.</summary>
      <returns>Always returns true.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.X509SecurityTokenParameters.SupportsClientWindowsIdentity">
      <summary>When implemented, gets a value that indicates whether the token supports a Windows identity for authentication.</summary>
      <returns>Always returns true.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.X509SecurityTokenParameters.SupportsServerAuthentication">
      <summary>When implemented, gets a value that indicates whether the token supports server authentication.</summary>
      <returns>Always returns true.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.X509SecurityTokenParameters.ToString">
      <summary>Displays a text representation of this instance of the class.</summary>
      <returns>A text representation of this instance of this class.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.X509SecurityTokenParameters.X509ReferenceStyle">
      <summary>Gets and set the X.509 reference style.</summary>
      <returns>An <see cref="T:System.ServiceModel.Security.Tokens.X509KeyIdentifierClauseType" />.</returns>
    </member>
    <member name="T:System.ServiceModel.Syndication.Atom10FeedFormatter">
      <summary>A class that serializes a <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance to and from Atom 1.0 format.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.#ctor(System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</summary>
      <param name="feedToWrite">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> to serialize.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.#ctor(System.Type)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter" /> class.</summary>
      <param name="feedTypeToCreate">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> derived instance to be serialized.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.CanRead(System.Xml.XmlReader)">
      <summary>Verifies whether the specified <see cref="T:System.Xml.XmlReader" /> contains a valid Atom 1.0 syndication feed.</summary>
      <returns>A value that specifies whether the <see cref="T:System.Xml.XmlReader" /> contains a valid Atom 1.0 syndication feed.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.CreateFeedInstance">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" />.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Atom10FeedFormatter.FeedType">
      <summary>The instance derived from <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> that is associated with the <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter" /> instance.</summary>
      <returns>The instance derived from <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> that is associated with the <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Atom10FeedFormatter.PreserveAttributeExtensions">
      <summary>Gets and sets a value that specifies whether to preserve attribute extensions during serialization.</summary>
      <returns>A value that specifies whether to preserve attribute extensions during serialization.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Atom10FeedFormatter.PreserveElementExtensions">
      <summary>Gets and sets a value that specifies whether to preserve element extensions during serialization.</summary>
      <returns>A value that specifies whether to preserve element extensions during serialization.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.ReadFrom(System.Xml.XmlReader)">
      <summary>Reads an Atom 1.0 syndication feed from the specified <see cref="T:System.Xml.XmlReader" /> instance.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.ReadItem(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>Reads a syndication item from <see cref="T:System.Xml.XmlReader" /> instance using the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> used to create the new <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.ReadItems(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationFeed,System.Boolean@)">
      <summary>Reads in a collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instances from the specified <see cref="T:System.Xml.XmlReader" />.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instances.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance to use to create the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instances.</param>
      <param name="areAllItemsRead">A value that specifies whether all of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instances have been read from the <see cref="T:System.Xml.XmlReader" /> instance.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>Implements the <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" /> method.</summary>
      <returns>Null.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>Implements the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> method.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>Implements the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> method.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.Atom10FeedFormatter.Version">
      <summary>Gets the syndication version used by the formatter.</summary>
      <returns>The syndication version used by the formatter.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.WriteItem(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationItem,System.Uri)">
      <summary>Writes the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to write.</param>
      <param name="feedBaseUri">The base URI for the feed.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.WriteItems(System.Xml.XmlWriter,System.Collections.Generic.IEnumerable{System.ServiceModel.Syndication.SyndicationItem},System.Uri)">
      <summary>Writes a collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instances to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="items">A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instances to write.</param>
      <param name="feedBaseUri">The base URI for the feed.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> associated with the <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter" /> to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.Atom10FeedFormatter`1">
      <summary>A class that serializes <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" />-derived classes to and from Atom 1.0 format.</summary>
      <typeparam name="TSyndicationFeed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> -derived type to serialize.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter`1" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter`1.#ctor(`0)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter`1" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" />-derived instance.</summary>
      <param name="feedToWrite">The feed to serialize.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter`1.CreateFeedInstance">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> derived class.</summary>
      <returns>A new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> class.</returns>
    </member>
    <member name="T:System.ServiceModel.Syndication.Atom10ItemFormatter">
      <summary>A class that serializes a <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to and from Atom 1.0 format.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Atom10ItemFormatter" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter.#ctor(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Atom10ItemFormatter" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />.</summary>
      <param name="itemToWrite">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to serialize.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.Atom10ItemFormatter" /> class.</summary>
      <param name="itemTypeToCreate">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> derived instance to associate with the <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter" /></param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter.CanRead(System.Xml.XmlReader)">
      <summary>Verifies whether the specified <see cref="T:System.Xml.XmlReader" /> contains a valid Atom 1.0 syndication item.</summary>
      <returns>A value that specifies whether the <see cref="T:System.Xml.XmlReader" /> contains a valid Atom 1.0 syndication item.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter.CreateItemInstance">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Atom10ItemFormatter.ItemType">
      <summary>Gets the type of the syndication item associated with the <see cref="T:System.ServiceModel.Syndication.Atom10ItemFormatter" />.</summary>
      <returns>The type of the syndication item associated with the <see cref="T:System.ServiceModel.Syndication.Atom10ItemFormatter" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Atom10ItemFormatter.PreserveAttributeExtensions">
      <summary>Gets or sets a value that specifies whether to preserve attribute extensions during serialization.</summary>
      <returns>A value that specifies whether to preserve attribute extensions during serialization.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Atom10ItemFormatter.PreserveElementExtensions">
      <summary>Gets or sets a value that specifies whether to preserve element extensions during serialization.</summary>
      <returns>A value that specifies whether to preserve element extensions during serialization.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter.ReadFrom(System.Xml.XmlReader)">
      <summary>Reads an Atom 1.0 syndication item from the specified <see cref="T:System.Xml.XmlReader" /> instance.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>Implements the <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" /> method.</summary>
      <returns>Null.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>Implements the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> method.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>Implements the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> method.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.Atom10ItemFormatter.Version">
      <summary>Gets the syndication version used by the formatter.</summary>
      <returns>The syndication version used by the formatter.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> associated with the <see cref="T:System.ServiceModel.Syndication.Atom10ItemFormatter" /> to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.Atom10ItemFormatter`1">
      <summary>A class that serializes <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />-derived classes to and from Atom 1.0 format.</summary>
      <typeparam name="TSyndicationItem">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> -derived class to serialize.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Atom10ItemFormatter`1" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter`1.#ctor(`0)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Atom10ItemFormatter`1" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />-derived instance.</summary>
      <param name="itemToWrite">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to serialize.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter`1.CreateItemInstance">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />-derived class.</summary>
      <returns>A new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> class.</returns>
    </member>
    <member name="T:System.ServiceModel.Syndication.AtomPub10CategoriesDocumentFormatter">
      <summary>A class that serializes a <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" /> instance to and from Atom 1.0 format.
</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.AtomPub10CategoriesDocumentFormatter.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.AtomPub10CategoriesDocumentFormatter" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.AtomPub10CategoriesDocumentFormatter.#ctor(System.ServiceModel.Syndication.CategoriesDocument)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.AtomPub10CategoriesDocumentFormatter" /> class with the specified <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" />.</summary>
      <param name="documentToWrite">The <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" /> to serialize.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.AtomPub10CategoriesDocumentFormatter.#ctor(System.Type,System.Type)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.AtomPub10CategoriesDocumentFormatter" /> class with the specified <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" />.</summary>
      <param name="inlineDocumentType">An <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" /> that can be serialized into an &lt;atom:categories&gt; element within a service document and the set of categories are specified within the element.</param>
      <param name="referencedDocumentType">An <see cref="T:System.ServiceModel.Syndication.ReferencedCategoriesDocument" /> that can be serialized into an &lt;atom:categories&gt; element within a service document and the set of categories are referenced using an URI.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.AtomPub10CategoriesDocumentFormatter.CanRead(System.Xml.XmlReader)">
      <summary>Verifies whether the specified <see cref="T:System.Xml.XmlReader" /> contains a valid Atom 1.0 categories document.</summary>
      <returns>A value that specifies whether the <see cref="T:System.Xml.XmlReader" /> contains a valid Atom 1.0 categories document.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.AtomPub10CategoriesDocumentFormatter.CreateInlineCategoriesDocument">
      <summary>Creates a <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" /> that can be serialized into a &lt;atom:categories&gt; element within a service document and contains the set of categories within the element.</summary>
      <returns>
Returns an <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" /> that can be serialized into a &lt;atom:categories&gt; element within a service document.
</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.AtomPub10CategoriesDocumentFormatter.CreateReferencedCategoriesDocument">
      <summary>Creates a <see cref="T:System.ServiceModel.Syndication.ReferencedCategoriesDocument" /> that can be serialized into a &lt;atom:categories&gt; element within a service document and contains a URI reference to the set of categories within the element. </summary>
      <returns>
Returns a <see cref="T:System.ServiceModel.Syndication.ReferencedCategoriesDocument" /> that can be serialized into a &lt;atom:categories&gt; element within a service document.
</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.AtomPub10CategoriesDocumentFormatter.ReadFrom(System.Xml.XmlReader)">
      <summary>Reads an Atom 1.0 &lt;atom:categories&gt; element from the specified <see cref="T:System.Xml.XmlReader" /> instance.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.AtomPub10CategoriesDocumentFormatter.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>Implements the <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" /> method.</summary>
      <returns>Null.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.AtomPub10CategoriesDocumentFormatter.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>Implements the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> method.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.AtomPub10CategoriesDocumentFormatter.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>Implements the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> method.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.AtomPub10CategoriesDocumentFormatter.Version">
      <summary>Gets the syndication version used by the formatter.</summary>
      <returns>
The syndication version used by the formatter.
</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.AtomPub10CategoriesDocumentFormatter.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes the <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" />associated with the <see cref="T:System.ServiceModel.Syndication.AtomPub10CategoriesDocumentFormatter" /> to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.AtomPub10ServiceDocumentFormatter">
      <summary>A formatter that serializes a <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> instance to and from XML using Atom 1.0 formats.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.AtomPub10ServiceDocumentFormatter.#ctor">
      <summary>Creates a new instance of the Atom 1.0-based <see cref="T:System.ServiceModel.Syndication.ServiceDocumentFormatter" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.AtomPub10ServiceDocumentFormatter.#ctor(System.ServiceModel.Syndication.ServiceDocument)">
      <summary>Creates a new instance of the Atom 1.0-based <see cref="T:System.ServiceModel.Syndication.ServiceDocumentFormatter" /> class to serialize a specified service document.</summary>
      <param name="documentToWrite">The <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> associated with the Atom 1.0 formatter.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="documentToWrite" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.AtomPub10ServiceDocumentFormatter.#ctor(System.Type)">
      <summary>Creates a new instance of the Atom 1.0-based <see cref="T:System.ServiceModel.Syndication.ServiceDocumentFormatter" /> class.</summary>
      <param name="documentTypeToCreate">The instance of an object that is derived from a <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> type that is associated with the Atom 1.0 formatter.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="documentTypeToCreate" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="documentTypeToCreate" /> specified is not valid.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.AtomPub10ServiceDocumentFormatter.CanRead(System.Xml.XmlReader)">
      <summary>Tests whether the specified XML reader contains a valid service document.</summary>
      <returns>true if the XML reader does contain a valid service document; otherwise false.
</returns>
      <param name="reader">The XML reader.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.AtomPub10ServiceDocumentFormatter.CreateDocumentInstance">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> instance associated with the Atom 1.0 formatter.</summary>
      <returns>
Returns an instance of a <see cref="T:System.ServiceModel.Syndication.ServiceDocument" />.
</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.AtomPub10ServiceDocumentFormatter.ReadFrom(System.Xml.XmlReader)">
      <summary>Generates a <see cref="T:System.ServiceModelSyndication.ServiceDocument" /> object from a specified XML reader.</summary>
      <param name="reader">The XML reader from which to read the syndication feed.</param>
      <exception cref="T:System.XmlException">
        <paramref name="reader" /> is null.</exception>
      <exception cref="T:System.ArgumentNullException">The XML could not be parsed.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.AtomPub10ServiceDocumentFormatter.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>This method is reserved and should not be used.</summary>
      <returns>
Returns null.
</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.AtomPub10ServiceDocumentFormatter.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>Generates a <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> from its XML representation.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> stream from which the <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> object is deserialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.AtomPub10ServiceDocumentFormatter.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>Converts the <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> into its XML representation.</summary>
      <param name="writer">The XML writer stream to which the object is serialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">There is no instance of a <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> associated with the formatter.</exception>
    </member>
    <member name="P:System.ServiceModel.Syndication.AtomPub10ServiceDocumentFormatter.Version">
      <summary>Gets the name of Atom Publishing Protocol namespace.</summary>
      <returns>
Returns “http://www.w3.org/2007/app”.
</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.AtomPub10ServiceDocumentFormatter.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes a <see cref="T:System.ServiceModelSyndication.ServiceDocument" /> object associated with the formatter to a specified XML writer.</summary>
      <param name="writer">The  XML writer written to by the formatter.</param>
      <exception cref="T:System.XmlException">
        <paramref name="writer" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The service document associated with the formatter is null.</exception>
    </member>
    <member name="T:System.ServiceModel.Syndication.AtomPub10ServiceDocumentFormatter`1">
      <summary>A formatter that serializes classes derived from a <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> instance to and from XML using Atom 1.0 formats.</summary>
      <typeparam name="TServiceDocument">The class derived from a <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> instance that is to be serialized to XML or deserialized from XML using Atom 1.0 formatting.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Syndication.AtomPub10ServiceDocumentFormatter`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.ServiceDocumentFormatter`1" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.AtomPub10ServiceDocumentFormatter`1.#ctor(`0)">
      <summary>Creates a new instance of the Atom 1.0-based <see cref="T:System.ServiceModel.Syndication.ServiceDocumentFormatter`1" /> class.</summary>
      <param name="documentToWrite">The <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> associated with the Atom 1.0 formatter.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="documentToWrite" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.AtomPub10ServiceDocumentFormatter`1.CreateDocumentInstance">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> instance associated with the Atom 1.0 formatter.</summary>
      <returns>
Returns an instance of <see cref="T:System.ServiceModel.Syndication.ServiceDocument" />.
</returns>
    </member>
    <member name="T:System.ServiceModel.Syndication.CategoriesDocument">
      <summary>Represents a categories document.</summary>
    </member>
    <member name="P:System.ServiceModel.Syndication.CategoriesDocument.AttributeExtensions">
      <summary>Gets a collection of attribute extensions.</summary>
      <returns>
Returns <see cref="T:System.Collections.Generic.Dictionary`2" />.
</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.CategoriesDocument.BaseUri">
      <summary>The base URI of the <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" />.</summary>
      <returns>
Returns <see cref="T:System.Uri" />.
</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.CategoriesDocument.Create(System.Collections.ObjectModel.Collection{System.ServiceModel.Syndication.SyndicationCategory})">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" /> instance.</summary>
      <returns>
Returns <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" />.
</returns>
      <param name="categories">A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instances used to initialize the new <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" /> instance. </param>
    </member>
    <member name="M:System.ServiceModel.Syndication.CategoriesDocument.Create(System.Collections.ObjectModel.Collection{System.ServiceModel.Syndication.SyndicationCategory},System.Boolean,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" /> class.</summary>
      <returns>
Returns <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" />.
</returns>
      <param name="categories">A collection of categories.</param>
      <param name="isFixed">A value that specifies whether a user can add a category to the categories document.</param>
      <param name="scheme">The scheme of the categories document.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.CategoriesDocument.Create(System.Uri)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" /> initializing it with the specified <see cref="T:System.Uri" />.</summary>
      <returns>
Returns <see cref="T:System.ServiceModel.Syndication.ReferencedCategoriesDocument" />.
</returns>
      <param name="linkToCategoriesDocument">The URI of the categories document.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.CategoriesDocument.ElementExtensions">
      <summary>Gets the element extensions for the <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" />.</summary>
      <returns>
Returns <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtensionCollection" />.
</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.CategoriesDocument.GetFormatter">
      <summary>Gets a new <see cref="T:System.ServiceModel.Syndication.AtomPub10CategoriesDocumentFormatter" /> instance initialized with the <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" /> on which this method is called.</summary>
      <returns>
Returns <see cref="T:System.ServiceModel.Syndication.CategoriesDocumentFormatter" />.
</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.CategoriesDocument.Language">
      <summary>Gets and sets the language of the <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" />.</summary>
      <returns>
Returns <see cref="T:System.String" />.
</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.CategoriesDocument.Load(System.Xml.XmlReader)">
      <summary>Loads a <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" /> instance from an <see cref="T:System.Xml.XmlReader" />.</summary>
      <returns>
Returns <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" />.
</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.CategoriesDocument.Save(System.Xml.XmlWriter)">
      <summary>Saves the <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" /> to a <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.CategoriesDocument.TryParseAttribute(System.String,System.String,System.String,System.String)">
      <summary>Attempts to parse an attribute extension.</summary>
      <returns>
Returns <see cref="T:System.Boolean" />.
</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.CategoriesDocument.TryParseElement(System.Xml.XmlReader,System.String)">
      <summary>Attempts to parse an element extension.</summary>
      <returns>
Returns <see cref="T:System.Boolean" />.
</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.CategoriesDocument.WriteAttributeExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the attribute extensions to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="version">The syndication version to use when writing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.CategoriesDocument.WriteElementExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the element extension to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="version">The syndication version to use when writing.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.CategoriesDocumentFormatter">
      <summary>An abstract class used as a base class for other formatters, (for example, <see cref="T:System.ServiceModel.Syndication.AtomPub10CategoriesDocumentFormatter" />).</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.CategoriesDocumentFormatter.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.CategoriesDocumentFormatter" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.CategoriesDocumentFormatter.#ctor(System.ServiceModel.Syndication.CategoriesDocument)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.CategoriesDocumentFormatter" /> class with the specified <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" />. </summary>
      <param name="documentToWrite">The <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" /> to serialize.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.CategoriesDocumentFormatter.CanRead(System.Xml.XmlReader)">
      <summary>Verifies whether the specified <see cref="T:System.Xml.XmlReader" /> contains a valid Atom 1.0 categories document.</summary>
      <returns>A value that specifies whether the <see cref="T:System.Xml.XmlReader" /> contains a valid Atom 1.0 categories document.
</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.CategoriesDocumentFormatter.CreateInlineCategoriesDocument">
      <summary>Creates a <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" /> that can be serialized into a &lt;atom:categories&gt; element within a service document and contains the set of categories within the element.</summary>
      <returns>
Returns an <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" /> that can be serialized into a &lt;atom:categories&gt; element within a service document.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.CategoriesDocumentFormatter.CreateReferencedCategoriesDocument">
      <summary>Creates a <see cref="T:System.ServiceModel.Syndication.ReferencedCategoriesDocument" /> that can be serialized into a &lt;atom:categories&gt; element within a service document and contains a URI reference to the set of categories within the element.</summary>
      <returns>
Returns a <see cref="T:System.ServiceModel.Syndication.ReferencedCategoriesDocument" /> that can be serialized into a &lt;atom:categories&gt; element within a service document.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.CategoriesDocumentFormatter.Document">
      <summary>Gets the categories document.</summary>
      <returns>
Returns the <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" /> that is associated with this <see cref="T:System.ServiceModel.Syndication.CategoriesDocumentFormatter" />.
</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.CategoriesDocumentFormatter.ReadFrom(System.Xml.XmlReader)">
      <summary>Reads an Atom 1.0 &lt;atom:categories&gt; element from the specified <see cref="T:System.Xml.XmlReader" /> instance.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.CategoriesDocumentFormatter.SetDocument(System.ServiceModel.Syndication.CategoriesDocument)">
      <summary>Specifies the <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" /> to associate with the <see cref="T:System.ServiceModel.Syndication.CategoriesDocumentFormatter" />.</summary>
      <param name="document">The <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" /> to associate with the <see cref="T:System.ServiceModel.Syndication.CategoriesDocumentFormatter" />.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.CategoriesDocumentFormatter.Version">
      <summary>Gets the syndication version used by the formatter.</summary>
      <returns>The syndication version used by the formatter.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.CategoriesDocumentFormatter.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes the <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" /> associated with the <see cref="T:System.ServiceModel.Syndication.CategoriesDocumentFormatter" /> to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.InlineCategoriesDocument">
      <summary>Represents a &lt;atom:categories&gt; element within a service document.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.InlineCategoriesDocument.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.InlineCategoriesDocument.#ctor(System.Collections.Generic.IEnumerable{System.ServiceModel.Syndication.SyndicationCategory})">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" /> class.</summary>
      <param name="categories">A collection of syndication categories.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.InlineCategoriesDocument.#ctor(System.Collections.Generic.IEnumerable{System.ServiceModel.Syndication.SyndicationCategory},System.Boolean,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" /> class.</summary>
      <param name="categories">A collection of syndication categories.</param>
      <param name="isFixed">Specifies whether syndication categories can be added to the <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" />.</param>
      <param name="scheme">The scheme of the <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" />.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.InlineCategoriesDocument.Categories">
      <summary>Gets the collection of syndication categories associated with the <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" />.</summary>
      <returns>
Returns a collection of syndication categories.
</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.InlineCategoriesDocument.CreateCategory">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</summary>
      <returns>
Returns a new  <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.
</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.InlineCategoriesDocument.IsFixed">
      <summary>Gets and sets a value that specifies whether syndication categories can be added to the <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" />.</summary>
      <returns>
Returns a <see cref="T:System.Boolean" /> that specifies if new syndication categories can be added.
</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.InlineCategoriesDocument.Scheme">
      <summary>Gets and sets the scheme of the <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" />.</summary>
      <returns>
Returns the scheme of the <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" />.
</returns>
    </member>
    <member name="T:System.ServiceModel.Syndication.ReferencedCategoriesDocument">
      <summary>Represents a reference to a categories document.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.ReferencedCategoriesDocument.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.ReferencedCategoriesDocument" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.ReferencedCategoriesDocument.#ctor(System.Uri)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.ReferencedCategoriesDocument" /> class.</summary>
      <param name="link">The URL to the referenced categories document.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.ReferencedCategoriesDocument.Link">
      <summary>Gets and sets the URI for the categories document.</summary>
      <returns>
Returns <see cref="T:System.Uri" />.
</returns>
    </member>
    <member name="T:System.ServiceModel.Syndication.ResourceCollectionInfo">
      <summary>Represents a collection of resources represented by &lt;atom:collection&gt; element.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.ResourceCollectionInfo.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.ResourceCollectionInfo" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.ResourceCollectionInfo.#ctor(System.ServiceModel.Syndication.TextSyndicationContent,System.Uri)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.ResourceCollectionInfo" /> class.</summary>
      <param name="title">The title of the collection.</param>
      <param name="link">The URI of the collection.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ResourceCollectionInfo.#ctor(System.ServiceModel.Syndication.TextSyndicationContent,System.Uri,System.Collections.Generic.IEnumerable{System.ServiceModel.Syndication.CategoriesDocument},System.Boolean)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.ResourceCollectionInfo" /> class.</summary>
      <param name="title">The title of the collection.</param>
      <param name="link">The URI of the collection.</param>
      <param name="categories">A collection of categories documents.</param>
      <param name="allowsNewEntries">A value that specifies whether new &lt;accept&gt; elements can be added to the collection.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ResourceCollectionInfo.#ctor(System.ServiceModel.Syndication.TextSyndicationContent,System.Uri,System.Collections.Generic.IEnumerable{System.ServiceModel.Syndication.CategoriesDocument},System.Collections.Generic.IEnumerable{System.String})">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.ResourceCollectionInfo" /> class.</summary>
      <param name="title">The title of the collection.</param>
      <param name="link">The URI of the collection.</param>
      <param name="categories">A collection of categories documents.</param>
      <param name="accepts">A collection of resource types that can be added to the collection.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ResourceCollectionInfo.#ctor(System.String,System.Uri)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.ResourceCollectionInfo" /> class.</summary>
      <param name="title">The title of the collection.</param>
      <param name="link">The URI of the collection.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.ResourceCollectionInfo.Accepts">
      <summary>Gets a collection of resource types that can be added to the collection.</summary>
      <returns>
Returns <see cref="T:System.Collections.ObjectModel.Collection`1" />.
</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.ResourceCollectionInfo.AttributeExtensions">
      <summary>Gets a collection of attribute extensions.</summary>
      <returns>
Returns <see cref="T:System.Collections.Generic.Dictionary`2" />.
</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.ResourceCollectionInfo.BaseUri">
      <summary>Gets and sets the base URI for the <see cref="T:System.ServiceModel.Syndication.ResourceCollectionInfo" /> instance.</summary>
      <returns>
Returns <see cref="T:System.Uri" />.
</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.ResourceCollectionInfo.Categories">
      <summary>Gets a collection of <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" /> objects.</summary>
      <returns>
Returns <see cref="T:System.Collections.ObjectModel.Collection`1" />.
</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.ResourceCollectionInfo.CreateInlineCategoriesDocument">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" /> instance.</summary>
      <returns>
Returns <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" />.
</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.ResourceCollectionInfo.CreateReferencedCategoriesDocument">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.ReferencedCategoriesDocument" /> instance.</summary>
      <returns>
Returns <see cref="T:System.ServiceModel.Syndication.ReferencedCategoriesDocument" />.
</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.ResourceCollectionInfo.ElementExtensions">
      <summary>Gets the element extensions for the service document.</summary>
      <returns>
Returns <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtensionCollection" />.
</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.ResourceCollectionInfo.Link">
      <summary>Gets and sets the URI for the collection.</summary>
      <returns>
Returns <see cref="T:System.Uri" />.
</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.ResourceCollectionInfo.Title">
      <summary>The title of the collection.</summary>
      <returns>
Returns <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" />.
</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.ResourceCollectionInfo.TryParseAttribute(System.String,System.String,System.String,System.String)">
      <summary>Attempts to parse an attribute extension.</summary>
      <returns>
Returns <see cref="T:System.Boolean" />.
</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ResourceCollectionInfo.TryParseElement(System.Xml.XmlReader,System.String)">
      <summary>Attempts to parse an element extension.</summary>
      <returns>
Returns <see cref="T:System.Boolean" />.
</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ResourceCollectionInfo.WriteAttributeExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the attribute extensions to the specified <see cref="T:System.Xml.XmlWriter" /> using the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlReader" /> to write to.</param>
      <param name="version">The syndication version to use when writing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ResourceCollectionInfo.WriteElementExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the element extensions to the specified <see cref="T:System.Xml.XmlWriter" /> using the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="version">The syndication version to use when writing.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.Rss20FeedFormatter">
      <summary>A class that serializes a <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance to and from RSS 2.0 format.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.#ctor(System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</summary>
      <param name="feedToWrite">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> to serialize.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.#ctor(System.ServiceModel.Syndication.SyndicationFeed,System.Boolean)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</summary>
      <param name="feedToWrite">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> to serialize.</param>
      <param name="serializeExtensionsAsAtom">A value that specifies whether to serialize elements that are defined in the Atom 1.0 specification but not in the RSS 2.0 specification. The default value is true.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.#ctor(System.Type)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> class.</summary>
      <param name="feedTypeToCreate">The instance derived from <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> to be serialized.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.CanRead(System.Xml.XmlReader)">
      <summary>Verifies whether the specified <see cref="T:System.Xml.XmlReader" /> contains a valid RSS 2.0 syndication feed.</summary>
      <returns>A value that specifies whether the <see cref="T:System.Xml.XmlReader" /> contains a valid RSS 2.0 syndication feed.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.CreateFeedInstance">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" />.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Rss20FeedFormatter.FeedType">
      <summary>The instance derived from <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> that is associated with the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> instance.</summary>
      <returns>The instance derived from <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> that is associated with the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Rss20FeedFormatter.PreserveAttributeExtensions">
      <summary>Gets and sets a value that specifies whether to preserve attribute extensions during serialization.</summary>
      <returns>A value that specifies whether to preserve attribute extensions during serialization.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Rss20FeedFormatter.PreserveElementExtensions">
      <summary>Gets and sets a value that specifies whether to preserve element extensions during serialization.</summary>
      <returns>A value that specifies whether to preserve element extensions during serialization.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.ReadFrom(System.Xml.XmlReader)">
      <summary>Reads an RSS 2.0 syndication feed from the specified <see cref="T:System.Xml.XmlReader" /> instance.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.ReadItem(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>Reads a syndication item from <see cref="T:System.Xml.XmlReader" /> instance using the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> used to create the new <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.ReadItems(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationFeed,System.Boolean@)">
      <summary>Reads in a collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instances from the specified <see cref="T:System.Xml.XmlReader" />.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instances.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance to use to create the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instances.</param>
      <param name="areAllItemsRead">A value that specifies whether all of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instances have been read from the <see cref="T:System.Xml.XmlReader" /> instance.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.Rss20FeedFormatter.SerializeExtensionsAsAtom">
      <summary>Gets and sets a value that specifies whether to serialize extensions within the Atom 1.0 namespace.</summary>
      <returns>A value that specifies whether to serialize extensions within the Atom 1.0 namespace.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.SetFeed(System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>Sets the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance associated with the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" />.</summary>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> to associate with the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>Implements the <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" /> method.</summary>
      <returns>Null.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>Implements the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> method.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>Implements the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> method.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.Rss20FeedFormatter.Version">
      <summary>Gets the syndication version used by the formatter.</summary>
      <returns>The syndication version used by the formatter.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.WriteItem(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationItem,System.Uri)">
      <summary>Writes the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to write.</param>
      <param name="feedBaseUri">The base URI for the feed.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.WriteItems(System.Xml.XmlWriter,System.Collections.Generic.IEnumerable{System.ServiceModel.Syndication.SyndicationItem},System.Uri)">
      <summary>Writes a collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instances to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="items">A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instances to write.</param>
      <param name="feedBaseUri">The base URI for the feed.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> associated with the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.Rss20FeedFormatter`1">
      <summary>A class that serializes <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" />-derived classes to RSS 2.0 format.</summary>
      <typeparam name="TSyndicationFeed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" />-derived type to serialize.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter`1" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter`1.#ctor(`0)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter`1" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> derived instance.</summary>
      <param name="feedToWrite">The feed to serialize.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter`1.#ctor(`0,System.Boolean)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter`1" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> derived instance.</summary>
      <param name="feedToWrite">The feed to serialize.</param>
      <param name="serializeExtensionsAsAtom">A value that specifies whether to serialize elements that are defined in the Atom 1.0 specification, but not in the RSS 2.0 specification. The default is true.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter`1.CreateFeedInstance">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> derived class.</summary>
      <returns>A new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> class.</returns>
    </member>
    <member name="T:System.ServiceModel.Syndication.Rss20ItemFormatter">
      <summary>A class that serializes a <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to and from RSS 2.0 format.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.#ctor(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter" /> class.</summary>
      <param name="itemToWrite">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to serialize.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.#ctor(System.ServiceModel.Syndication.SyndicationItem,System.Boolean)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter" /> class.</summary>
      <param name="itemToWrite">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to serialize.</param>
      <param name="serializeExtensionsAsAtom">A value that specifies whether to serialize elements that are defined in the Atom 1.0 specification but not in the RSS 2.0 specification. The default value is true.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.#ctor(System.Type)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter" /> class.</summary>
      <param name="itemTypeToCreate">The instance derived from <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to associate with the <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.CanRead(System.Xml.XmlReader)">
      <summary>Verifies whether the specified <see cref="T:System.Xml.XmlReader" /> contains a valid RSS 2.0 syndication item.</summary>
      <returns>A value that specifies if the <see cref="T:System.Xml.XmlReader" /> contains a valid RSS 2.0 syndication item.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.CreateItemInstance">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Rss20ItemFormatter.ItemType">
      <summary>Gets the type of the syndication item associated with the <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter" />.</summary>
      <returns>The type of the syndication item associated with the <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Rss20ItemFormatter.PreserveAttributeExtensions">
      <summary>Gets or sets a value that specifies whether to preserve attribute extensions during serialization.</summary>
      <returns>A value that specifies whether to preserve attribute extensions during serialization.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Rss20ItemFormatter.PreserveElementExtensions">
      <summary>Gets or sets a value that specifies whether to preserve element extensions during serialization.</summary>
      <returns>A value that specifies whether to preserve element extensions during serialization.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.ReadFrom(System.Xml.XmlReader)">
      <summary>Reads an RSS 2.0 syndication item from the specified <see cref="T:System.Xml.XmlReader" /> instance.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.Rss20ItemFormatter.SerializeExtensionsAsAtom">
      <summary>Gets and sets a value that specifies whether to serialize extensions within the Atom 1.0 namespace.</summary>
      <returns>A value that specifies whether to serialize extensions within the Atom 1.0 namespace.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>Implements the <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" /> method.</summary>
      <returns>Null.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>Implements the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> method.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>Implements the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> method.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.Rss20ItemFormatter.Version">
      <summary>Gets the syndication version used by the formatter.</summary>
      <returns>The syndication version used by the formatter.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> associated with the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.Rss20ItemFormatter`1">
      <summary>A class that serializes <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />-derived classes to and from RSS 2.0 format.</summary>
      <typeparam name="TSyndicationItem">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />-derived type to serialize.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter`1" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter`1.#ctor(`0)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter`1" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> derived instance.</summary>
      <param name="itemToWrite">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to serialize.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter`1.#ctor(`0,System.Boolean)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter`1" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> derived instance.</summary>
      <param name="itemToWrite">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to serialize.</param>
      <param name="serializeExtensionsAsAtom">A value that specifies whether to serialize elements that are defined in the Atom 1.0 specification but not in the RSS 2.0 specification. The default value is true.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter`1.CreateItemInstance">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> derived class.</summary>
      <returns>A new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> class.</returns>
    </member>
    <member name="T:System.ServiceModel.Syndication.ServiceDocument">
      <summary>Represents a service document.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocument.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocument.#ctor(System.Collections.Generic.IEnumerable{System.ServiceModel.Syndication.Workspace})">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> class, initializing it with the specified collection of <see cref="T:System.ServiceModel.Syndication.Workspace" /> instances.</summary>
      <param name="workspaces">A collection of workspaces.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.ServiceDocument.AttributeExtensions">
      <summary>Gets a collection of attribute extensions.</summary>
      <returns>
A <see cref="T:System.Collections.Generic.Dictionary`2" /> instance.
</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.ServiceDocument.BaseUri">
      <summary>Gets and sets the base URI for the <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> instance.</summary>
      <returns>
The base URI.
</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocument.CreateWorkspace">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.Workspace" /> instance.</summary>
      <returns>
A new workspace.
</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.ServiceDocument.ElementExtensions">
      <summary>Gets the element extensions for the service document.</summary>
      <returns>
A <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtensionCollection" /> instance containing the element extensions.
</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocument.GetFormatter">
      <summary>Gets a <see cref="T:System.ServiceModel.Syndication.AtomPub10ServiceDocumentFormatter" /> instance.</summary>
      <returns>
A <see cref="T:System.ServiceModel.Syndication.ServiceDocumentFormatter" /> instance.
</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.ServiceDocument.Language">
      <summary>Gets and sets the language of the service document.</summary>
      <returns>
The language of the service document.
</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocument.Load``1(System.Xml.XmlReader)">
      <summary>Loads a service document from the specified <see cref="T:System.Xml.XmlReader" /> into a <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> derived instance.</summary>
      <returns>A<see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> instance.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read the service document from.</param>
      <typeparam name="TServiceDocument">The type of the service document.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocument.Load(System.Xml.XmlReader)">
      <summary>Loads a service document from the specified <see cref="T:System.Xml.XmlReader" /> into a <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> instance.</summary>
      <returns>
A <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> instance.
</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read the service document from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocument.Save(System.Xml.XmlWriter)">
      <summary>Saves the <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> instance to the specified <see cref="T:System.Xml.XmlReader" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlReader" /> to save the service document to.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocument.TryParseAttribute(System.String,System.String,System.String,System.String)">
      <summary>Attempts to parse an attribute extension.</summary>
      <returns>true if the attribute is successfully parsed; otherwise, false.
Returns <see cref="T:System.Boolean" />.
</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocument.TryParseElement(System.Xml.XmlReader,System.String)">
      <summary>Attempts to parse an element extension.</summary>
      <returns>true if the element is successfully parsed; otherwise, false.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.ServiceDocument.Workspaces">
      <summary>Gets a collection of workspaces contained within the service document.</summary>
      <returns>
A collection of workspaces.
</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocument.WriteAttributeExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the attribute extensions to the specified <see cref="T:System.Xml.XmlWriter" /> using the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlReader" /> to write to.</param>
      <param name="version">The syndication version to use when writing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocument.WriteElementExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the element extensions to the specified <see cref="T:System.Xml.XmlWriter" /> using the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="version">The syndication version to use when writing.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.ServiceDocumentFormatter">
      <summary>An abstract class used as a base class for other formatters, such as <see cref="T:System.ServiceModel.Syndication.AtomPub10ServiceDocumentFormatter" />.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.ServiceDocumentFormatter" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.#ctor(System.ServiceModel.Syndication.ServiceDocument)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.ServiceDocumentFormatter" /> class.</summary>
      <param name="documentToWrite">The <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> to serialize.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.CanRead(System.Xml.XmlReader)">
      <summary>Verifies whether the specified <see cref="T:System.Xml.XmlReader" /> contains a valid service document.</summary>
      <returns>true, if the XML reader contains a valid service document, otherwise false.
</returns>
      <param name="reader">An XML reader to check.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.CreateCategory(System.ServiceModel.Syndication.InlineCategoriesDocument)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> class.</summary>
      <returns>
Returns a new <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.
</returns>
      <param name="inlineCategories">An <see cref="T:System.ServiceModel.Syndication.InlineCategories" /> instance used to create the new categories document.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.CreateCollection(System.ServiceModel.Syndication.Workspace)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.ResourceCollectionInfo" /> instance.</summary>
      <returns>
Returns a new <see cref="T:System.ServiceModel.Syndication.ResourceCollectionInfo" /> instance.
</returns>
      <param name="workspace">A <see cref="T:System.ServiceModel.Syndication.Workspace" /> instance used to create the new collection.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.CreateDocumentInstance">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> instance.</summary>
      <returns>
Returns a new <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> instance.
</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.CreateInlineCategories(System.ServiceModel.Syndication.ResourceCollectionInfo)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" />.</summary>
      <returns>
Returns a new <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" /> instance.
</returns>
      <param name="collection">The <see cref="T:System.ServiceModel.Syndication.ResourceCollectionInfo" /> to use to create the new <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.CreateReferencedCategories(System.ServiceModel.Syndication.ResourceCollectionInfo)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.ReferencedCategoriesDocument" />.</summary>
      <returns>
Returns a new <see cref="T:System.ServiceModel.Syndication.ReferencedCategoriesDocument" />.
</returns>
      <param name="collection">The <see cref="T:System.ServiceModel.Syndication.ResourceCollectionInfo" /> instance to use to create the new <see cref="T:System.ServiceModel.Syndication.ReferencedCategoriesDocument" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.CreateWorkspace(System.ServiceModel.Syndication.ServiceDocument)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.Workspace" /></summary>
      <returns>
Returns a new <see cref="T:System.ServiceModel.Syndication.Workspace" />.
</returns>
      <param name="document">The <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> to use to create the new workspace.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.ServiceDocumentFormatter.Document">
      <summary>Gets the <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> associated with the formatter.</summary>
      <returns>
Returns the <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> associated with the formatter.
</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.CategoriesDocument,System.Int32)">
      <summary>Loads element extensions.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="categories">The <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" /> to use to read the element extensions.</param>
      <param name="maxExtensionSize">The maximum size of an element extension to be loaded.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.ResourceCollectionInfo,System.Int32)">
      <summary>Loads element extensions.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="collection">The <see cref="T:System.ServiceModel.Syndication.ResourceCollectionInfo" /> to use to load the element extensions.</param>
      <param name="maxExtensionSize">The maximum size of an extension to load.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.ServiceDocument,System.Int32)">
      <summary>Loads element extensions.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="document">The <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> to use to read the element extensions.</param>
      <param name="maxExtensionSize">The maximum size of an extension to load.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.Workspace,System.Int32)">
      <summary>Loads element extensions.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="workspace">The <see cref="T:System.ServiceModel.Syndication.Workspace" /> to use to load the element extensions.</param>
      <param name="maxExtensionSize">The maximum size of an extension to load.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.ReadFrom(System.Xml.XmlReader)">
      <summary>Reads a service document from the specified <see cref="T:System.Xml.XmlReader" />.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.SetDocument(System.ServiceModel.Syndication.ServiceDocument)">
      <summary>Sets the <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> to write.</summary>
      <param name="document">The <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> to write.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.CategoriesDocument,System.String)">
      <summary>Attempts to parse an attribute extension.</summary>
      <returns>
Returns a <see cref="T:System.Boolean" /> that indicates whether the attribute extension was successfully parsed.
</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="categories">The <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" /> to use to parse the attribute extension.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.ResourceCollectionInfo,System.String)">
      <summary>Attempts to parse an attribute extension.</summary>
      <returns>
Returns a <see cref="T:System.Boolean" /> that indicates whether the attribute extension was parsed successfully.
</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="collection">The <see cref="T:System.ServiceModel.Syndication.ResourceCollectionInfo" /> to use to parse the attribute.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.ServiceDocument,System.String)">
      <summary>Attempts to parse an attribute extensions.</summary>
      <returns>
Returns a <see cref="T:System.Boolean" /> that indicates whether the attribute extension was parsed successfully.
</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute extension to parse.</param>
      <param name="document">The <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> to use to parse the attribute extension.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.Workspace,System.String)">
      <summary>Attempts to parse an attribute extension</summary>
      <returns>
Returns a <see cref="T:System.Boolean" /> that indicates whether the attribute extension was parsed successfully.
</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="workspace">The <see cref="T:System.ServiceModel.Syndication.Workspace" /> to use to parse the attribute.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.CategoriesDocument,System.String)">
      <summary>Attempts to parse an element extension.</summary>
      <returns>
Returns a <see cref="T:System.Boolean" /> that indicates whether the element extension was parsed successfully.
</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="categories">The <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" /> to use to parse the element extension.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.ResourceCollectionInfo,System.String)">
      <summary>Attempts to parse an element extension.</summary>
      <returns>
Returns a <see cref="T:System.Boolean" /> that indicates whether the element extension was parsed successfully.
</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="collection">The <see cref="T:System.ServiceModel.Syndication.ResourceCollectionInfo" /> to use to parse the element extension.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.ServiceDocument,System.String)">
      <summary>Attempts to parse an element extension.</summary>
      <returns>
Returns a <see cref="T:System.Boolean" /> that indicates whether the element extension was successfully parsed.
</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="document">The <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> to use to parse the element extension.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.Workspace,System.String)">
      <summary>Attempts to parse an element extension.</summary>
      <returns>
Returns a <see cref="T:System.Boolean" /> that indicates whether the element extension was parsed successfully.
</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="workspace">The <see cref="T:System.ServiceModel.Syndication.Workspace" /> to use to parse the element extension.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.ServiceDocumentFormatter.Version">
      <summary>Gets the version of the formatter.</summary>
      <returns>
Returns a <see cref="T:System.String" /> that contains the version of the formatter.
</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.CategoriesDocument,System.String)">
      <summary>Writes attribute extensions.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="categories">The <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" /> to use to write the element extensions.</param>
      <param name="version">The syndication version to use when writing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.ResourceCollectionInfo,System.String)">
      <summary>Writes attribute extensions.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="collection">The <see cref="T:System.ServiceModel.Syndication.ResourceCollectionInfo" /> to use to write the attribute extensions.</param>
      <param name="version">The syndication version to use when writing the attribute extensions.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.ServiceDocument,System.String)">
      <summary>Writes attribute extensions.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="document">The <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> to use to write the attribute extensions.</param>
      <param name="version">The syndication version to use when writing the attribute extensions.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.Workspace,System.String)">
      <summary>Writes attribute extensions.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="workspace">The <see cref="T:System.ServiceModel.Syndication.Workspace" /> to use to write the attribute extensions.</param>
      <param name="version">The syndication version to use when writing the attribute extensions.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.CategoriesDocument,System.String)">
      <summary>Writes element extensions.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="categories">The  <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" /> to use to write the element extensions.</param>
      <param name="version">The syndication version to use when writing the element extensions.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.ResourceCollectionInfo,System.String)">
      <summary>Writes element extensions.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="collection">The <see cref="T:System.ServiceModel.Syndication.ResourceCollectionInfo" /> to use to write the element extensions.</param>
      <param name="version">The syndication version to use when writing the element extensions.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.ServiceDocument,System.String)">
      <summary>Writes element extensions.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="document">The <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> to use to write the element extensions.</param>
      <param name="version">The syndication version to use when writing the element extensions.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.Workspace,System.String)">
      <summary>Writes element extensions.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="workspace">The <see cref="T:System.ServiceModel.Syndication.Workspace" /> to use to write the element extensions.</param>
      <param name="version">The syndication version to use when writing the element extensions.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes a service document to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationCategory">
      <summary>A class that represents the category of a syndication feed. </summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationCategory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationCategory.#ctor(System.ServiceModel.Syndication.SyndicationCategory)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</summary>
      <param name="source">The <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance to initialize the new <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationCategory.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> class with the given name.</summary>
      <param name="name">The name of the category.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationCategory.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> class with the specified name, scheme, and label.</summary>
      <param name="name">The name of the category.</param>
      <param name="scheme">A Uniform Resource Identifier (URI) that represents the categorization scheme to which this category belongs.</param>
      <param name="label">A human-readable attribute that describes the category.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationCategory.AttributeExtensions">
      <summary>Gets the attribute extensions for this category.</summary>
      <returns>The attribute extensions for this category.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationCategory.Clone">
      <summary>Creates a copy of a <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationCategory.ElementExtensions">
      <summary>Gets the element extensions for this category.</summary>
      <returns>A collection of element extensions.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationCategory.Label">
      <summary>Gets and sets the label of the category.</summary>
      <returns>The label of the category.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationCategory.Name">
      <summary>Gets and sets the name of the category.</summary>
      <returns>The name of the category.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationCategory.Scheme">
      <summary>Gets and sets the scheme of the category.</summary>
      <returns>The scheme of the category.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationCategory.TryParseAttribute(System.String,System.String,System.String,System.String)">
      <summary>Attempts to parse an attribute extension.</summary>
      <returns>A value that specifies whether the attribute extension was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="version">The syndication version to use when parsing.</param>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationCategory.TryParseElement(System.Xml.XmlReader,System.String)">
      <summary>Attempts to parse an element extension.</summary>
      <returns>A value that specifies whether the element extension has been parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="version">The syndication version to use while parsing.</param>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationCategory.WriteAttributeExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the attribute extensions to the specified writer.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="version">The syndication version to use while writing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationCategory.WriteElementExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the element extensions to the specified writer.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="version">The syndication version to use while writing.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationContent">
      <summary>A base class that represents syndication content.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.#ctor(System.ServiceModel.Syndication.SyndicationContent)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> instance.</summary>
      <param name="source">The <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> instance to use to initialize the new instance.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationContent.AttributeExtensions">
      <summary>Gets the attribute extensions for this content.</summary>
      <returns>A dictionary that contains the attribute extensions for this object.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.Clone">
      <summary>Creates a copy of the <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> instance.</summary>
      <returns>A copy of the <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.CreateHtmlContent(System.String)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> instance with the specified HTML content.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> instance.</returns>
      <param name="content">The text of the content.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.CreatePlaintextContent(System.String)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> instance with the specified plain text content.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> instance.</returns>
      <param name="content">The plain text content.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.CreateUrlContent(System.Uri,System.String)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" /> instance with the specified <see cref="T:System.Uri" /> and media type.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" /> instance.</returns>
      <param name="url">The <see cref="T:System.Uri" /> of the content.</param>
      <param name="mediaType">The media type of the content.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.CreateXhtmlContent(System.String)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> instance with the specified XHTML content.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> instance.</returns>
      <param name="content">The XHTML content.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.CreateXmlContent(System.Object)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> instance with the specified data contract object.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> instance.</returns>
      <param name="dataContractObject">The data contract object.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.CreateXmlContent(System.Object,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> instance with the specified data contract object and data contract serializer.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> instance.</returns>
      <param name="dataContractObject">The data contract object.</param>
      <param name="dataContractSerializer">The data contract serializer.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.CreateXmlContent(System.Object,System.Xml.Serialization.XmlSerializer)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> instance with the specified object and XML serializer.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> instance.</returns>
      <param name="xmlSerializerObject">The object.</param>
      <param name="serializer">The XML serializer.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.CreateXmlContent(System.Xml.XmlReader)">
      <summary>Creates XML syndication content.</summary>
      <returns>An instance of the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> class that contains the new content.</returns>
      <param name="xmlReader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationContent.Type">
      <summary>Gets the syndication content type.</summary>
      <returns>The name of the type of syndication content.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.WriteContentsTo(System.Xml.XmlWriter)">
      <summary>Writes the contents of this <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> object to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.WriteTo(System.Xml.XmlWriter,System.String,System.String)">
      <summary>Writes the contents of this object to the specified <see cref="T:System.Xml.XmlWriter" /> within the specified element and element namespace.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="outerElementName">The name of the element.</param>
      <param name="outerElementNamespace">The namespace of the element.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationElementExtension">
      <summary>A class that represents a syndication element extension.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> class with the specified object.</summary>
      <param name="dataContractExtension">The data contract object used to initialize the extension. </param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.#ctor(System.Object,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> class with the specified object and data contract serializer.</summary>
      <param name="dataContractExtension">The data contract object used to initialize the extension.</param>
      <param name="dataContractSerializer">The data contract serializer to use.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.#ctor(System.Object,System.Xml.Serialization.XmlSerializer)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> class with the specified object and XML serializer.</summary>
      <param name="xmlSerializerExtension">The object used to initialize the extension.</param>
      <param name="serializer">The XML serializer to use.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.#ctor(System.String,System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> class with the specified outer name, outer namespace, and object.</summary>
      <param name="outerName">The name of the enclosing XML element.</param>
      <param name="outerNamespace">The namespace of the enclosing XML element.</param>
      <param name="dataContractExtension">The object used to initialize the extension.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.#ctor(System.String,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> class with the specified outer name, outer namespace, object, and data contract serializer.</summary>
      <param name="outerName">The name of the enclosing XML element.</param>
      <param name="outerNamespace">The namespace of the enclosing XML element.</param>
      <param name="dataContractExtension">The object used to initialize the extension.</param>
      <param name="dataContractSerializer">The data contract serializer to use.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.#ctor(System.Xml.XmlReader)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> class.</summary>
      <param name="xmlReader">The <see cref="T:System.Xml.XmlReader" /> that contains the content of the new <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.GetObject``1">
      <summary>Gets the object that represents the element extension.</summary>
      <returns>An object of the specified type that contains the element extension.</returns>
      <typeparam name="TExtension">The type of the extension to retrieve.</typeparam>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type is not a valid data contract.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The input XML cannot be deserialized into the requested type.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.GetObject``1(System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Gets the object that represents the element extension.</summary>
      <returns>An object of the specified type that contains the element extension.</returns>
      <param name="serializer">The <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> to use.</param>
      <typeparam name="TExtension">The type of the extension to retrieve.</typeparam>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type is not a valid data contract.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The input XML cannot be deserialized into the requested type.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.GetObject``1(System.Xml.Serialization.XmlSerializer)">
      <summary>Gets the object that represents the element extension.</summary>
      <returns>An object of the specified type that contains the element extension.</returns>
      <param name="serializer">The <see cref="T:System.Xml.Serialization.XmlSerializer" /> to use.</param>
      <typeparam name="TExtension">The type of the extension to retrieve.</typeparam>
      <exception cref="T:System.InvalidOperationException">The input XML cannot be deserialized into the requested type.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.GetReader">
      <summary>Gets the <see cref="T:System.Xml.XmlReader" /> associated with the <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" />.</summary>
      <returns>The <see cref="T:System.Xml.XmlReader" /> associated with the <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationElementExtension.OuterName">
      <summary>Gets the outer name of the element extension.</summary>
      <returns>The outer name of the element extension.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationElementExtension.OuterNamespace">
      <summary>Gets the outer namespace of the element extension.</summary>
      <returns>The outer namespace of the element extension.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes the current extension to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationElementExtensionCollection">
      <summary>A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> objects.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtensionCollection.Add(System.Object)">
      <summary>Adds the specified <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> object to the collection.</summary>
      <param name="extension">The <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> object to add.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtensionCollection.Add(System.Object,System.Runtime.Serialization.DataContractSerializer)">
      <summary>Adds the specified object to the collection using the specified data contract serializer.</summary>
      <param name="dataContractExtension">The object to add to the collection.</param>
      <param name="serializer">The serializer to use.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtensionCollection.Add(System.Object,System.Xml.Serialization.XmlSerializer)">
      <summary>Adds the specified object to the collection using the specified XML serializer.</summary>
      <param name="xmlSerializerExtension">The object to add to the collection.</param>
      <param name="serializer">The XML serializer to use.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtensionCollection.Add(System.String,System.String,System.Object)">
      <summary>Adds the specified object to the collection with the specified outer name and outer namespace.</summary>
      <param name="outerName">The outer name.</param>
      <param name="outerNamespace">The outer namespace.</param>
      <param name="dataContractExtension">The object to add to the collection.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtensionCollection.Add(System.String,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Adds the specified object to the collection with the specified outer name and outer namespace using the specified data contract serializer.</summary>
      <param name="outerName">The outer name.</param>
      <param name="outerNamespace">The outer namespace.</param>
      <param name="dataContractExtension">The object to add to the collection.</param>
      <param name="dataContractSerializer">The serializer to use.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtensionCollection.Add(System.Xml.XmlReader)">
      <summary>Adds a new syndication element extension to the collection.</summary>
      <param name="xmlReader">The <see cref="T:System.Xml.XmlReader" /> to read the syndication element extension from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtensionCollection.GetReaderAtElementExtensions">
      <summary>Gets an <see cref="T:System.Xml.XmlReader" /> with the element extensions.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> that contains the element extensions.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtensionCollection.ReadElementExtensions``1(System.String,System.String)">
      <summary>Reads the element extensions with the specified name and namespace.</summary>
      <returns>A collection of element extension objects.</returns>
      <param name="extensionName">The name of the element extension.</param>
      <param name="extensionNamespace">The namespace of the element extension.</param>
      <typeparam name="TExtension">The type of the extension to read.</typeparam>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type is not a valid data contract.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The input XML cannot be deserialized into the requested type.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtensionCollection.ReadElementExtensions``1(System.String,System.String,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Reads the element extensions with the specified name and namespace.</summary>
      <returns>A collection of element extension objects.</returns>
      <param name="extensionName">The name of the element extension.</param>
      <param name="extensionNamespace">The namespace of the element extension.</param>
      <param name="serializer">The <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> to use.</param>
      <typeparam name="TExtension">The type of the extension to read.</typeparam>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type is not a valid data contract.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The input XML cannot be deserialized into the requested type.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtensionCollection.ReadElementExtensions``1(System.String,System.String,System.Xml.Serialization.XmlSerializer)">
      <summary>Reads the element extensions with the specified name and namespace.</summary>
      <returns>A collection of element extension objects.</returns>
      <param name="extensionName">The name of the element extension.</param>
      <param name="extensionNamespace">The namespace of the element extension.</param>
      <param name="serializer">The <see cref="T:System.Xml.Serialization.XmlSerializer" /> to use.</param>
      <typeparam name="TExtension">The type of the extension to read.</typeparam>
      <exception cref="T:System.InvalidOperationException">The input XML cannot be deserialized into the requested type.</exception>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationFeed">
      <summary>Represents a top-level feed object, &lt;feed&gt; in Atom 1.0 and &lt;rss&gt; in RSS 2.0.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.#ctor(System.Collections.Generic.IEnumerable{System.ServiceModel.Syndication.SyndicationItem})">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> class with the specified collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> objects.</summary>
      <param name="items">A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> objects.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.#ctor(System.ServiceModel.Syndication.SyndicationFeed,System.Boolean)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> class with the specified feed.</summary>
      <param name="source">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> used to initialize the new instance.</param>
      <param name="cloneItems">A value that specifies whether to clone the items in the source instance.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.#ctor(System.String,System.String,System.Uri)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> class with the specified title, description, and Uniform Resource Identifier (URI).</summary>
      <param name="title">The title of the feed.</param>
      <param name="description">The description of the feed.</param>
      <param name="feedAlternateLink">The URI for the feed.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.#ctor(System.String,System.String,System.Uri,System.Collections.Generic.IEnumerable{System.ServiceModel.Syndication.SyndicationItem})">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> class with the specified title, description, URI, and collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> objects.</summary>
      <param name="title">The title of the feed.</param>
      <param name="description">The description of the feed.</param>
      <param name="feedAlternateLink">The URI for the feed.</param>
      <param name="items">A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> objects.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.#ctor(System.String,System.String,System.Uri,System.String,System.DateTimeOffset)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> class.</summary>
      <param name="title">The syndication feed title.</param>
      <param name="description">The syndication feed description.</param>
      <param name="feedAlternateLink">The alternate URI for the syndication feed.</param>
      <param name="id">The ID of the syndication feed.</param>
      <param name="lastUpdatedTime">The <see cref="T:System.DateTimeOffset" /> that contains the last time the syndication feed was updated.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.#ctor(System.String,System.String,System.Uri,System.String,System.DateTimeOffset,System.Collections.Generic.IEnumerable{System.ServiceModel.Syndication.SyndicationItem})">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> class.</summary>
      <param name="title">The syndication feed title.</param>
      <param name="description">The syndication feed description.</param>
      <param name="feedAlternateLink">The alternate URI for the syndication feed.</param>
      <param name="id">The ID of the syndication feed.</param>
      <param name="lastUpdatedTime">The <see cref="T:System.DateTimeOffset" /> that contains the last time the syndication feed was updated.</param>
      <param name="items">A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> objects.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.AttributeExtensions">
      <summary>Gets a collection of attribute extensions.</summary>
      <returns>A dictionary that contains a collection of attribute extensions.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Authors">
      <summary>Gets a collection of authors of the feed.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> objects that represents the authors of the feed.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.BaseUri">
      <summary>Gets and sets the base URI for the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</summary>
      <returns>The base URI for the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Categories">
      <summary>Gets a collection of categories for the feed.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> objects that represent the categories for the feed.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.Clone(System.Boolean)">
      <summary>Creates a copy of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</summary>
      <returns>A duplicate <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> object.</returns>
      <param name="cloneItems">A value that specifies whether the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> objects are cloned.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Contributors">
      <summary>Gets a collection of the contributors to the feed.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> objects that represents the contributors to the feed.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Copyright">
      <summary>Gets and sets copyright information for the feed.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> object that represents copyright information for the feed.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.CreateCategory">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.CreateItem">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.CreateLink">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.CreatePerson">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Description">
      <summary>Gets and sets a description of the feed.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> object that represents the description of the feed.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.ElementExtensions">
      <summary>Gets the element extensions for the feed.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtensionCollection" /> instance that contains the element extensions in the feed.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Generator">
      <summary>Gets and sets the generator of the feed.</summary>
      <returns>The name of the tool that generated the feed.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.GetAtom10Formatter">
      <summary>Gets an <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter" /> instance.</summary>
      <returns>An <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.GetRss20Formatter">
      <summary>Gets an <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> instance.</summary>
      <returns>An <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.GetRss20Formatter(System.Boolean)">
      <summary>Gets a new <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> instance.</summary>
      <returns>An <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> instance.</returns>
      <param name="serializeExtensionsAsAtom">A value that specifies whether to serialize element and attribute extensions with an Atom 1.0 namespace.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Id">
      <summary>Gets and sets the ID of the feed.</summary>
      <returns>The ID of the feed.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.ImageUrl">
      <summary>Gets and sets the image URL for the feed.</summary>
      <returns>The URL for the image for the feed.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Items">
      <summary>Gets a collection of the feed items contained in the feed.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> objects.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Language">
      <summary>Gets and sets the language of the feed.</summary>
      <returns>The name of the language the feed is written in. </returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.LastUpdatedTime">
      <summary>Gets and sets the time the feed was last updated.</summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> instance set to the time the feed was last updated.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Links">
      <summary>Gets the links associated with the feed.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> objects.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.Load(System.Xml.XmlReader)">
      <summary>Loads a syndication feed from the specified XML reader.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> that contains the loaded contents.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to load the feed from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.Load``1(System.Xml.XmlReader)">
      <summary>Loads a <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" />-derived instance from the specified <see cref="T:System.Xml.XmlReader" />.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" />-derived instance that contains the feed.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <typeparam name="TSyndicationFeed">The syndication feed type.</typeparam>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.SaveAsAtom10(System.Xml.XmlWriter)">
      <summary>Write the syndication feed to the specified <see cref="T:System.Xml.XmlWriter" /> in Atom 1.0 format.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.SaveAsRss20(System.Xml.XmlWriter)">
      <summary>Write the syndication feed to the specified <see cref="T:System.Xml.XmlWriter" /> in RSS 2.0 format.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Title">
      <summary>Gets and sets the title of the feed.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> instance that contains the title of the feed.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.TryParseAttribute(System.String,System.String,System.String,System.String)">
      <summary>Attempts to parse an attribute extension.</summary>
      <returns>A value that specifies whether the attribute extension was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="version">The syndication version to use when parsing.</param>
      <exception cref="T:System.Xml.XmlException">Invalid XML Encountered during read.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.TryParseElement(System.Xml.XmlReader,System.String)">
      <summary>Attempts to parse an element extension.</summary>
      <returns>A value that specifies whether the element extension was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="version">The syndication version to use while parsing.</param>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.WriteAttributeExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the attribute extensions to the specified <see cref="T:System.Xml.XmlWriter" /> using the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlReader" /> to write to.</param>
      <param name="version">The syndication version to use while writing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.WriteElementExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the element extensions to the specified <see cref="T:System.Xml.XmlWriter" /> using the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlReader" /> to write to.</param>
      <param name="version">The syndication version to use while writing.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationFeedFormatter">
      <summary>An abstract class used as a base class for other formatters, (for example <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter" />).</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeedFormatter" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.#ctor(System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeedFormatter" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</summary>
      <param name="feedToWrite">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> to write. </param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.CanRead(System.Xml.XmlReader)">
      <summary>Verifies whether the specified <see cref="T:System.Xml.XmlReader" /> contains a valid syndication feed.</summary>
      <returns>true, if the XML reader contains a valid syndication feed, otherwise false.</returns>
      <param name="reader">An XML reader to check.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.CreateCategory(System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> class using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</returns>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> used to create the new <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.CreateCategory(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> class using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</returns>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> used to create the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.CreateFeedInstance">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> class.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.CreateItem(System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> class using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</returns>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> used to create the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.CreateLink(System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" />.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</returns>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> to use to create the new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.CreateLink(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</returns>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to use to create the new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.CreatePerson(System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</returns>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance used to create the new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.CreatePerson(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</returns>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance used to create the new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeedFormatter.Feed">
      <summary>Gets the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> associated with the formatter.</summary>
      <returns>The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> associated with the formatter.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationCategory,System.Int32)">
      <summary>Loads element extensions into the specified <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> using the specified <see cref="T:System.Xml.XmlReader" /> and maximum extension size.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="category">The <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> to load the element extensions into.</param>
      <param name="maxExtensionSize">The maximum allowable size for an element extension (in bytes).</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationFeed,System.Int32)">
      <summary>Loads element extensions into the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> using the specified <see cref="T:System.Xml.XmlReader" /> and maximum extension size.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> to load the element extensions into.</param>
      <param name="maxExtensionSize">The maximum allowable size for an element extension (in bytes).</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationItem,System.Int32)">
      <summary>Loads element extensions into the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> using the specified <see cref="T:System.Xml.XmlReader" /> and maximum extension size.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to load the element extensions into.</param>
      <param name="maxExtensionSize">The maximum allowable size for an element extension (in bytes).</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationLink,System.Int32)">
      <summary>Loads element extensions into the specified <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> using the specified <see cref="T:System.Xml.XmlReader" /> and maximum extension size.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="link">The <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> to load the element extensions into.</param>
      <param name="maxExtensionSize">The maximum allowable size for an element extension (in bytes).</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationPerson,System.Int32)">
      <summary>Loads element extensions into the specified <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> using the specified <see cref="T:System.Xml.XmlReader" /> and maximum extension size.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="person">The <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> to load the element extensions into.</param>
      <param name="maxExtensionSize">The maximum allowable size for an element extension (in bytes).</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.ReadFrom(System.Xml.XmlReader)">
      <summary>Reads in a <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> from the specified <see cref="T:System.Xml.XmlReader" />.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.SetFeed(System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>Associates a <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance with the <see cref="T:System.ServiceModel.Syndication.SyndicationFeedFormatter" />.</summary>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> to associate with the <see cref="T:System.ServiceModel.Syndication.SyndicationFeedFormatter" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.ToString">
      <summary>Gets a string representation of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeedFormatter" /> instance.</summary>
      <returns>The <see cref="T:System.ServiceModel.Syndication.SyndicationFeedFormatter" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.SyndicationCategory,System.String)">
      <summary>Attempts to parse an attribute extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</summary>
      <returns>A value that indicates whether the attribute was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="category">The <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.SyndicationFeed,System.String)">
      <summary>Attempts to parse an attribute extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</summary>
      <returns>A value that indicates whether the attribute was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.SyndicationItem,System.String)">
      <summary>Attempts to parse an attribute extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A value that indicates whether the attribute was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.SyndicationLink,System.String)">
      <summary>Attempts to parse an attribute extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</summary>
      <returns>A value that indicates whether the attribute was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="link">The <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.SyndicationPerson,System.String)">
      <summary>Attempts to parse an attribute extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</summary>
      <returns>A value that indicates whether the attribute was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="person">The <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseContent(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationItem,System.String,System.String,System.ServiceModel.Syndication.SyndicationContent@)">
      <summary>Attempts to parse syndication item content using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A value that indicates whether the content was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to use.</param>
      <param name="contentType">The content type.</param>
      <param name="version">The syndication version to use while parsing.</param>
      <param name="content">The content to parse.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationCategory,System.String)">
      <summary>Attempts to parse an element extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</summary>
      <returns>A value that indicates whether the element was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="category">The <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationFeed,System.String)">
      <summary>Attempts to parse an element extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</summary>
      <returns>A value that indicates whether the element was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationItem,System.String)">
      <summary>Attempts to parse an element extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A value that indicates whether the element was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationLink,System.String)">
      <summary>Attempts to parse an element extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</summary>
      <returns>A value that indicates whether the element was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="link">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationPerson,System.String)">
      <summary>Attempts to parse an element extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</summary>
      <returns>A value that indicates whether the element was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="person">The <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeedFormatter.Version">
      <summary>Gets the syndication version of the formatter.</summary>
      <returns>The syndication version of the formatter.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationCategory,System.String)">
      <summary>Writes the attribute extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="category">The <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance that contains the attribute extensions to be written.</param>
      <param name="version">The syndication version to write the attribute extensions in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationFeed,System.String)">
      <summary>Writes the attribute extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance that contains the attribute extensions to be written.</param>
      <param name="version">The syndication version to write the attribute extensions in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationItem,System.String)">
      <summary>Writes the attribute extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance that contains the attribute extensions to be written.</param>
      <param name="version">The syndication version to write the attribute extensions in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationLink,System.String)">
      <summary>Writes the attribute extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="link">The <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance that contains the attribute extensions to be written.</param>
      <param name="version">The syndication version to write the attribute extensions in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationPerson,System.String)">
      <summary>Writes the attribute extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="person">The <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance that contains the attribute extensions to be written.</param>
      <param name="version">The syndication version to write the attribute extensions in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationCategory,System.String)">
      <summary>Writes the element extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="category">The <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance that contains the element extensions to be written.</param>
      <param name="version">The syndication version the extensions are written in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationFeed,System.String)">
      <summary>Writes the element extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance that contains the element extensions to be written.</param>
      <param name="version">The syndication version the extensions are written in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationItem,System.String)">
      <summary>Writes the element extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance that contains the element extensions to be written.</param>
      <param name="version">The syndication version the extensions are written in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationLink,System.String)">
      <summary>Writes the element extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="link">The <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance that contains the element extensions to be written.</param>
      <param name="version">The syndication version the extensions are written in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationPerson,System.String)">
      <summary>Writes the element extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="person">The <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance that contains the element extensions to be written.</param>
      <param name="version">The syndication version the extensions are written in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> to the specified <see cref="T:System.Xml.XmlWriter" /> instance.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> to.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationItem">
      <summary>Represents a feed item, for example an RSS &lt;item&gt; or an Atom &lt;entry&gt;.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.#ctor(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <param name="source">A <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance used to initialize the new <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.#ctor(System.String,System.ServiceModel.Syndication.SyndicationContent,System.Uri,System.String,System.DateTimeOffset)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> class.</summary>
      <param name="title">The title of the syndication item.</param>
      <param name="content">A <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> instance containing the content of the syndication item.</param>
      <param name="itemAlternateLink">The alternate URI for the syndication item.</param>
      <param name="id">The ID of the syndication item.</param>
      <param name="lastUpdatedTime">The <see cref="T:System.DateTimeOffset" /> that contains the last time the syndication item was last updated.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.#ctor(System.String,System.String,System.Uri)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> class with the specified title, content, and link.</summary>
      <param name="title">The item title.</param>
      <param name="content">The item content.</param>
      <param name="itemAlternateLink">The item URL.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.#ctor(System.String,System.String,System.Uri,System.String,System.DateTimeOffset)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> class.</summary>
      <param name="title">The title of the syndication item.</param>
      <param name="content">The content of the syndication item.</param>
      <param name="itemAlternateLink">The alternate URI for the syndication item.</param>
      <param name="id">The ID of the syndication item.</param>
      <param name="lastUpdatedTime">The <see cref="T:System.DateTimeOffset" /> that contains the last time the syndication item was last updated.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.AddPermalink(System.Uri)">
      <summary>Adds a permalink to the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />.</summary>
      <param name="permalink">The <see cref="T:System.Uri" /> that points to the content.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.AttributeExtensions">
      <summary>Gets the attribute extensions for the syndication item.</summary>
      <returns>A dictionary that contains a collection of attribute extensions.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.Authors">
      <summary>Gets the authors of the syndication item.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> objects that represent the authors of the syndication item.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.BaseUri">
      <summary>Gets and sets the base Uniform Resource Identifier (URI) for the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>The base URI of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.Categories">
      <summary>Gets the syndication categories for the syndication item.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> objects that represent the categories of the syndication item.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.Clone">
      <summary>Creates a copy of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.Content">
      <summary>Gets and sets the content of the syndication item.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> instance that contains the content of the syndication item.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.Contributors">
      <summary>Gets the contributors of the syndication item.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> objects that represent the contributors of the syndication item.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.Copyright">
      <summary>Gets and sets the copyright information for the syndication item.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> instance that represents copyright information.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.CreateCategory">
      <summary>Creates a new category.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> object.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.CreateLink">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.CreatePerson">
      <summary>Creates a new person.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> object.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.ElementExtensions">
      <summary>Gets the element extensions contained in the syndication item.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtensionCollection" /> that contains the element extensions.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.GetAtom10Formatter">
      <summary>Gets an <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter" /> instance.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.GetRss20Formatter">
      <summary>Gets an <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> instance.</summary>
      <returns>An <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.GetRss20Formatter(System.Boolean)">
      <summary>Gets an <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> instance.</summary>
      <returns>An <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> instance.</returns>
      <param name="serializeExtensionsAsAtom">A value that specifies whether to serialize element and attribute extensions with an Atom 1.0 namespace.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.Id">
      <summary>Gets and sets the ID of the syndication item.</summary>
      <returns>The ID of the syndication item.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.LastUpdatedTime">
      <summary>Gets and sets the last updated time for the syndication item.</summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> instance that represents the time the syndication item was last updated.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.Links">
      <summary>Gets the links contained in the syndication item.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> objects.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.Load``1(System.Xml.XmlReader)">
      <summary>Loads a <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> derived object from the specified <see cref="T:System.Xml.XmlReader" />.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> derived object that contains the syndication item.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <typeparam name="TSyndicationItem">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />-derived class to load.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.Load(System.Xml.XmlReader)">
      <summary>Loads a <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance from the specified <see cref="T:System.Xml.XmlReader" />.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from. </param>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.PublishDate">
      <summary>Gets and sets the publish date for the syndication item.</summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> object that represents the publish date for the syndication item.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.SaveAsAtom10(System.Xml.XmlWriter)">
      <summary>Write the syndication item to the specified <see cref="T:System.Xml.XmlWriter" /> in Atom 1.0 format.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.SaveAsRss20(System.Xml.XmlWriter)">
      <summary>Write the syndication item to the specified <see cref="T:System.Xml.XmlWriter" /> in RSS 2.0 format.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.SourceFeed">
      <summary>Gets and sets the source feed of the syndication item.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance where the syndication item is located.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.Summary">
      <summary>Gets and sets the summary of the syndication item.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> that contains a summary of the item.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.Title">
      <summary>Gets and sets the title of the syndication item.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> object that contains the title of the syndication item.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.TryParseAttribute(System.String,System.String,System.String,System.String)">
      <summary>Attempts to parse an attribute extension.</summary>
      <returns>A value that specifies whether the attribute extension was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="version">The syndication version to use when parsing.</param>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.TryParseContent(System.Xml.XmlReader,System.String,System.String,System.ServiceModel.Syndication.SyndicationContent@)">
      <summary>Attempts to parse content.</summary>
      <returns>A value that specifies whether the content was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="contentType">The content type of the content.</param>
      <param name="version">The syndication version to use while parsing.</param>
      <param name="content">The <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> instance to load the parsed content into.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.TryParseElement(System.Xml.XmlReader,System.String)">
      <summary>Attempts to parse an element extension.</summary>
      <returns>A value that specifies whether the element extension was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="version">The syndication version to use while parsing.</param>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.WriteAttributeExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the attribute extensions to the specified <see cref="T:System.Xml.XmlWriter" /> using the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlReader" /> to write to.</param>
      <param name="version">The syndication version to use while writing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.WriteElementExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the element extensions to the specified <see cref="T:System.Xml.XmlWriter" /> using the specific syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlReader" /> to write to.</param>
      <param name="version">The syndication version to use while writing.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationItemFormatter">
      <summary>An abstract class used as a base class for other formatters, (for example, <see cref="T:System.ServiceModel.Syndication.Atom10ItemFormatter" />).</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationItemFormatter" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.#ctor(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationItemFormatter" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <param name="itemToWrite">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to write.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.CanRead(System.Xml.XmlReader)">
      <summary>Verifies whether the specified <see cref="T:System.Xml.XmlReader" /> contains a valid syndication item.</summary>
      <returns>true, if the XML reader contains a valid syndication item, otherwise false.</returns>
      <param name="reader">An XML reader to check.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.CreateCategory(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> class using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</returns>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> used to create the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.CreateItemInstance">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> class.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.CreateLink(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> class.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</returns>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to use to create the new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.CreatePerson(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</returns>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance used to create the new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItemFormatter.Item">
      <summary>Gets the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> associated with the formatter.</summary>
      <returns>The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> associated with the formatter.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationCategory,System.Int32)">
      <summary>Loads element extensions into the specified <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> using the specified <see cref="T:System.Xml.XmlReader" /> and maximum extension size.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="category">The <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> to load the element extensions into.</param>
      <param name="maxExtensionSize">The maximum allowable size for an element extension (in bytes).</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationItem,System.Int32)">
      <summary>Loads element extensions into the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> using the specified <see cref="T:System.Xml.XmlReader" /> and maximum extension size.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to load the element extensions into.</param>
      <param name="maxExtensionSize">The maximum allowable size for an element extension (in bytes).</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationLink,System.Int32)">
      <summary>Loads element extensions into the specified <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> using the specified <see cref="T:System.Xml.XmlReader" /> and maximum extension size.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="link">The <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> to load the element extensions into.</param>
      <param name="maxExtensionSize">The maximum allowable size for an element extension (in bytes).</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationPerson,System.Int32)">
      <summary>Loads element extensions into the specified <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> using the specified <see cref="T:System.Xml.XmlReader" /> and maximum extension size.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="person">The <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> to load the element extensions into.</param>
      <param name="maxExtensionSize">The maximum allowable size for an element extension (in bytes).</param>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.ReadFrom(System.Xml.XmlReader)">
      <summary>Reads in a <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> from the specified <see cref="T:System.Xml.XmlReader" />.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.SetItem(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>Associates a <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance with the <see cref="T:System.ServiceModel.Syndication.SyndicationItemFormatter" />.</summary>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to associate with the <see cref="T:System.ServiceModel.Syndication.SyndicationItemFormatter" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.ToString">
      <summary>Gets a string representation of the <see cref="T:System.ServiceModel.Syndication.SyndicationItemFormatter" /> instance.</summary>
      <returns>The <see cref="T:System.ServiceModel.Syndication.SyndicationItemFormatter" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.SyndicationCategory,System.String)">
      <summary>Attempts to parse an attribute extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</summary>
      <returns>A value that indicates whether the attribute was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="category">The <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.SyndicationItem,System.String)">
      <summary>Attempts to parse an attribute extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A value that indicates whether the attribute was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.SyndicationLink,System.String)">
      <summary>Attempts to parse an attribute extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</summary>
      <returns>A value that indicates whether the attribute was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="link">The <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.SyndicationPerson,System.String)">
      <summary>Attempts to parse an attribute extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</summary>
      <returns>A value that indicates whether the attribute was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="person">The <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.TryParseContent(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationItem,System.String,System.String,System.ServiceModel.Syndication.SyndicationContent@)">
      <summary>Attempts to parse syndication item content using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A value that indicates whether the content was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to use.</param>
      <param name="contentType">The content type.</param>
      <param name="version">The syndication version to use while parsing.</param>
      <param name="content">The content to parse.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationCategory,System.String)">
      <summary>Attempts to parse an element extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</summary>
      <returns>A value that indicates whether the element was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="category">The <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationItem,System.String)">
      <summary>Attempts to parse an element extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A value that indicates whether the element was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationLink,System.String)">
      <summary>Attempts to parse an element extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</summary>
      <returns>A value that indicates whether the element was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="link">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationPerson,System.String)">
      <summary>Attempts to parse an element extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</summary>
      <returns>A value that indicates whether the element was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="person">The <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItemFormatter.Version">
      <summary>Gets the syndication version of the formatter.</summary>
      <returns>The syndication version of the formatter.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationCategory,System.String)">
      <summary>Writes the attribute extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="category">The <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance that contains the attribute extensions to be written.</param>
      <param name="version">The syndication version to write the attribute extensions in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationItem,System.String)">
      <summary>Writes the attribute extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance that contains the attribute extensions to be written.</param>
      <param name="version">The syndication version to write the attribute extensions in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationLink,System.String)">
      <summary>Writes the attribute extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="link">The <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance that contains the attribute extensions to be written.</param>
      <param name="version">The syndication version to write the attribute extensions in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationPerson,System.String)">
      <summary>Writes the attribute extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="person">The <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance that contains the attribute extensions to be written.</param>
      <param name="version">The syndication version to write the attribute extensions in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationCategory,System.String)">
      <summary>Writes the element extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="category">The <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance that contains the element extensions to be written.</param>
      <param name="version">The syndication version the extensions are written in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationItem,System.String)">
      <summary>Writes the element extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance that contains the element extensions to be written.</param>
      <param name="version">The syndication version the extensions are written in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationLink,System.String)">
      <summary>Writes the element extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="link">The <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance that contains the element extensions to be written.</param>
      <param name="version">The syndication version the extensions are written in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationPerson,System.String)">
      <summary>Writes the element extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="person">The <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance that contains the element extensions to be written.</param>
      <param name="version">The syndication version the extensions are written in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to the specified <see cref="T:System.Xml.XmlWriter" /> instance.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationLink">
      <summary>Represents a link within a syndication feed or item.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.#ctor(System.ServiceModel.Syndication.SyndicationLink)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> class with the specified instance.</summary>
      <param name="source">The <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance used to initialize the new instance.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.#ctor(System.Uri)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> class with the specified <see cref="T:System.Uri" />.</summary>
      <param name="uri">The URI to the linked resource.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.#ctor(System.Uri,System.String,System.String,System.String,System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> class with the specified <see cref="T:System.Uri" />, relation type, title, media type, and length.</summary>
      <param name="uri">The URI to the linked resource.</param>
      <param name="relationshipType">The relationship type.</param>
      <param name="title">The title of the link.</param>
      <param name="mediaType">The media type of the link.</param>
      <param name="length">The length of the linked content.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationLink.AttributeExtensions">
      <summary>Gets the attribute extensions of the link.</summary>
      <returns>A dictionary that contains a collection of attribute extensions.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationLink.BaseUri">
      <summary>Gets and sets the base URI of the syndication link.</summary>
      <returns>A <see cref="T:System.Uri" /> instance that contains the base URI of the syndication link.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.Clone">
      <summary>Creates a copy of the current <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.CreateAlternateLink(System.Uri)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> object with the specified <see cref="T:System.Uri" />.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</returns>
      <param name="uri">The URI of the linked resource.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.CreateAlternateLink(System.Uri,System.String)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> object with the specified <see cref="T:System.Uri" /> and media type.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</returns>
      <param name="uri">The URI of the linked resource.</param>
      <param name="mediaType">The media type of the link.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.CreateMediaEnclosureLink(System.Uri,System.String,System.Int64)">
      <summary>Creates a media enclosure link with the specified URI, media type, and length.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</returns>
      <param name="uri">The URI of the linked resource.</param>
      <param name="mediaType">The media type of the link.</param>
      <param name="length">The length of the linked content.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.CreateSelfLink(System.Uri)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> with the specified URI and relationship type set to self.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</returns>
      <param name="uri">The URI to the linked resource.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.CreateSelfLink(System.Uri,System.String)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> with the specified URI, media type, and relationship type set to self.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</returns>
      <param name="uri">The URI to the linked resource.</param>
      <param name="mediaType">The media type of the link.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationLink.ElementExtensions">
      <summary>Gets the element extensions for the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" />.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtensionCollection" /> that contains the element extensions for the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.GetAbsoluteUri">
      <summary>Gets the absolute URI for the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" />.</summary>
      <returns>A <see cref="T:System.Uri" /> instance that contains the absolute URI of the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationLink.Length">
      <summary>Gets and sets the length of the linked resource in bytes.</summary>
      <returns>The length of the linked resource.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationLink.MediaType">
      <summary>Gets and sets the media type of the linked resource.</summary>
      <returns>The media type of the linked resource.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationLink.RelationshipType">
      <summary>Gets and sets the relationship type of the linked resource.</summary>
      <returns>The relationship type of the linked resource.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationLink.Title">
      <summary>Gets and sets the title of the linked resource.</summary>
      <returns>The title of the linked resource.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.TryParseAttribute(System.String,System.String,System.String,System.String)">
      <summary>Attempts to parse an attribute extension.</summary>
      <returns>A value that specifies whether the attribute extension was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="version">The syndication version to use when parsing.</param>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.TryParseElement(System.Xml.XmlReader,System.String)">
      <summary>Attempts to parse an element extension.</summary>
      <returns>A value that specifies whether the element extension was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="version">The syndication version to use while parsing.</param>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationLink.Uri">
      <summary>Gets and sets the URI for the linked resource.</summary>
      <returns>A <see cref="T:System.Uri" /> instance that contains the URI for the linked resource.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.WriteAttributeExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the attribute extensions to the specified <see cref="T:System.Xml.XmlWriter" /> using the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlReader" /> to write to.</param>
      <param name="version">The syndication version to use while writing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.WriteElementExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the element extensions to the specified <see cref="T:System.Xml.XmlWriter" /> using the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlReader" /> to write to.</param>
      <param name="version">The syndication version to use while writing.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationPerson">
      <summary>Represents an author or contributor of syndication content.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationPerson.#ctor">
      <summary>Initializes a new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationPerson.#ctor(System.ServiceModel.Syndication.SyndicationPerson)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> class with the specified instance.</summary>
      <param name="source">The <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance to initialize the new instance.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationPerson.#ctor(System.String)">
      <summary>Initializes a new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance with the specified e-mail address.</summary>
      <param name="email">The e-mail address of the person.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationPerson.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance with the specified e-mail address, name, and Uniform Resource Identifier (URI).</summary>
      <param name="email">The e-mail address of the person.</param>
      <param name="name">The name of the person.</param>
      <param name="uri">The URI of the person's Web page.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationPerson.AttributeExtensions">
      <summary>Gets the attribute extensions for the <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" />.</summary>
      <returns>A dictionary that contains a collection of attribute extensions.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationPerson.Clone">
      <summary>Creates a copy of the existing <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationPerson.ElementExtensions">
      <summary>Gets the element extensions for the <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" />.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtensionCollection" /> that contains the element extensions.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationPerson.Email">
      <summary>Gets and sets the e-mail address of the <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" />.</summary>
      <returns>The e-mail address of the person.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationPerson.Name">
      <summary>Gets and sets the name of the <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" />.</summary>
      <returns>The name of the person.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationPerson.TryParseAttribute(System.String,System.String,System.String,System.String)">
      <summary>Attempts to parse an attribute extension.</summary>
      <returns>A value that specifies whether the attribute extension was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="version">The syndication version to use when parsing.</param>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationPerson.TryParseElement(System.Xml.XmlReader,System.String)">
      <summary>Attempts to parse an element extension.</summary>
      <returns>A value that specifies whether the element extension was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="version">The syndication version to use while parsing.</param>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationPerson.Uri">
      <summary>Gets and sets the URI of the <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" />.</summary>
      <returns>The URI of the person's Web site.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationPerson.WriteAttributeExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the attribute extensions to the specified <see cref="T:System.Xml.XmlWriter" /> using the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlReader" /> to write to.</param>
      <param name="version">The syndication version to use while writing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationPerson.WriteElementExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the element extensions to the specified <see cref="T:System.Xml.XmlWriter" /> using the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlReader" /> to write to.</param>
      <param name="version">The syndication version to use while writing.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationVersions">
      <summary>A class that represents the syndication versions supported by .</summary>
    </member>
    <member name="F:System.ServiceModel.Syndication.SyndicationVersions.Atom10">
      <summary>Represents support for the Atom 1.0 specification.</summary>
    </member>
    <member name="F:System.ServiceModel.Syndication.SyndicationVersions.Rss20">
      <summary>Represents support for the RSS 2.0 specification.</summary>
    </member>
    <member name="T:System.ServiceModel.Syndication.TextSyndicationContent">
      <summary>Represents any <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> content intended to be displayed to an end user.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.TextSyndicationContent.#ctor(System.ServiceModel.Syndication.TextSyndicationContent)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> with the specified <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> instance.</summary>
      <param name="source">The <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> instance.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.TextSyndicationContent.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> with the specified text.</summary>
      <param name="text">The text of the content.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.TextSyndicationContent.#ctor(System.String,System.ServiceModel.Syndication.TextSyndicationContentKind)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> with the specified text and <see cref="T:System.ServiceModel.Syndication.TextSyndicationContentKind" />.</summary>
      <param name="text">The text of the content.</param>
      <param name="textKind">The <see cref="T:System.ServiceModel.Syndication.TextSyndicationContentKind" /> that describes the content.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.TextSyndicationContent.Clone">
      <summary>Creates a copy of the existing <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.TextSyndicationContent.Text">
      <summary>Gets the text of the <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" />.</summary>
      <returns>The text of the <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.TextSyndicationContent.Type">
      <summary>Gets the content type of the <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" />.</summary>
      <returns>A <see cref="T:System.String" /> that represents the kind of Text Syndication Content.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.TextSyndicationContent.WriteContentsTo(System.Xml.XmlWriter)">
      <summary>Writes the contents of the <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.TextSyndicationContentKind">
      <summary>An enumeration that represents the supported types of text syndication content.</summary>
    </member>
    <member name="F:System.ServiceModel.Syndication.TextSyndicationContentKind.Plaintext">
      <summary>Plain text</summary>
    </member>
    <member name="F:System.ServiceModel.Syndication.TextSyndicationContentKind.Html">
      <summary>HTML (escaped markup)</summary>
    </member>
    <member name="F:System.ServiceModel.Syndication.TextSyndicationContentKind.XHtml">
      <summary>XML (not escaped)</summary>
    </member>
    <member name="T:System.ServiceModel.Syndication.UrlSyndicationContent">
      <summary>Represents syndication content that consists of a URL to another resource.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.UrlSyndicationContent.#ctor(System.ServiceModel.Syndication.UrlSyndicationContent)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" /> class with the specified <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" /> instance.</summary>
      <param name="source">The <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" /> instance.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.UrlSyndicationContent.#ctor(System.Uri,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" /> class with the specified <see cref="T:System.Uri" /> and media type.</summary>
      <param name="url">The <see cref="T:System.Uri" />.</param>
      <param name="mediaType">The media type of the resource referenced by the <see cref="T:System.Uri" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.UrlSyndicationContent.Clone">
      <summary>Creates a copy of the existing <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> instance that contains the new copy of the <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.UrlSyndicationContent.Type">
      <summary>Gets the content type of the <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" />.</summary>
      <returns>The content type of the <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.UrlSyndicationContent.Url">
      <summary>Gets the <see cref="T:System.Uri" /> for the <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" />.</summary>
      <returns>A <see cref="T:System.Uri" /> instance that contains the URI for the <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.UrlSyndicationContent.WriteContentsTo(System.Xml.XmlWriter)">
      <summary>Writes the contents of the <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" /> instance to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.Workspace">
      <summary>Represents a workspace within a service document.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Workspace.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Workspace" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Workspace.#ctor(System.ServiceModel.Syndication.TextSyndicationContent,System.Collections.Generic.IEnumerable{System.ServiceModel.Syndication.ResourceCollectionInfo})">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Workspace" /> class and initializes it with the specified title and collection.</summary>
      <param name="title">The title of the workspace.</param>
      <param name="collections">The collection the workspace contains.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Workspace.#ctor(System.String,System.Collections.Generic.IEnumerable{System.ServiceModel.Syndication.ResourceCollectionInfo})">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Workspace" /> class and initializes it with the specified title and collection.</summary>
      <param name="title">The workspace title.</param>
      <param name="collections">The collection the workspace contains.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.Workspace.AttributeExtensions">
      <summary>Gets a collection of attribute extensions.</summary>
      <returns>
Returns <see cref="T:System.Collections.Generic.Dictionary`2" />.
</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Workspace.BaseUri">
      <summary>Gets and sets the base URI for the <see cref="T:System.ServiceModel.Syndication.Workspace" /> instance.</summary>
      <returns>
Returns <see cref="T:System.Uri" />.
</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Workspace.Collections">
      <summary>Gets the collection associated with the workspace.</summary>
      <returns>
Returns <see cref="T:System.Collections.ObjectModel.Collection`1" />.
</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Workspace.CreateResourceCollection">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.ResourceCollectionInfo" /> instance.</summary>
      <returns>
Returns <see cref="T:System.ServiceModel.Syndication.ResourceCollectionInfo" />.
</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Workspace.ElementExtensions">
      <summary>Gets the element extensions contained within the <see cref="T:System.ServiceModel.Syndication.Workspace" /> instance.</summary>
      <returns>
Returns <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtensionCollection" />.
</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Workspace.Title">
      <summary>The title of the <see cref="T:System.ServiceModel.Syndication.Workspace" /> instance.</summary>
      <returns>
Returns <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" />.
</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Workspace.TryParseAttribute(System.String,System.String,System.String,System.String)">
      <summary>Attempts to parse an attribute extension.</summary>
      <returns>
Returns <see cref="T:System.Boolean" />.
</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Workspace.TryParseElement(System.Xml.XmlReader,System.String)">
      <summary>Attempts to parse an element extension.</summary>
      <returns>
Returns <see cref="T:System.Boolean" />.
</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Workspace.WriteAttributeExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the attribute extensions to the specified <see cref="T:System.Xml.XmlWriter" /> using the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="version">The syndication version to use when writing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Workspace.WriteElementExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the element extensions to the specified <see cref="T:System.Xml.XmlWriter" /> using the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="version">The syndication version to use when writing.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.XmlSyndicationContent">
      <summary>Represents XML syndication content that is not intended to be displayed in a browser.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.#ctor(System.ServiceModel.Syndication.XmlSyndicationContent)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> with the specified <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> instance.</summary>
      <param name="source">The <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> instance.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.#ctor(System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> with the specified type, object, and <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />.</summary>
      <param name="type">The type of content.</param>
      <param name="dataContractExtension">The data contract extension.</param>
      <param name="dataContractSerializer">The <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> to use.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.#ctor(System.String,System.Object,System.Xml.Serialization.XmlSerializer)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> with the specified type, object and <see cref="T:System.Xml.Serialization.XmlSerializer" />.</summary>
      <param name="type">The type of content.</param>
      <param name="xmlSerializerExtension">The XML serializer extension.</param>
      <param name="serializer">The <see cref="T:System.Xml.Serialization.XmlSerializer" /> to use.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.#ctor(System.String,System.ServiceModel.Syndication.SyndicationElementExtension)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> with the specified type and <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" />.</summary>
      <param name="type">The type of the content, typically expressed as a MIME content type, for example application/xml or application/xml+customer.</param>
      <param name="extension">The <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> to place in the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.#ctor(System.Xml.XmlReader)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> class.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.Clone">
      <summary>Creates a copy of the existing <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.XmlSyndicationContent.Extension">
      <summary>Gets the <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" />.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.GetReaderAtContent">
      <summary>Gets a reader from the content of the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" />.</summary>
      <returns>An <see cref="T:System.Xml.XmlDictionaryReader" /> from the content of the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.ReadContent``1">
      <summary>Reads the content of the specified type into the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" />.</summary>
      <returns>An object of the specified type.</returns>
      <typeparam name="TContent">The type of content to read.</typeparam>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The input XML cannot be deserialized into the requested type.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.ReadContent``1(System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Reads the content of the specified type into the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> using the specified serializer.</summary>
      <returns>An object of the specified type.</returns>
      <param name="dataContractSerializer">The <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> to use.</param>
      <typeparam name="TContent">The type of content to read.</typeparam>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The input XML cannot be deserialized into the requested type.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.ReadContent``1(System.Xml.Serialization.XmlSerializer)">
      <summary>Reads the content of the specified type into the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> using the specified serializer.</summary>
      <returns>An object of the specified type.</returns>
      <param name="serializer">The <see cref="T:System.Xml.Serialization.XmlSerializer" /> to use.</param>
      <typeparam name="TContent">The type of content to read.</typeparam>
      <exception cref="T:System.InvalidOperationException">The input XML cannot be deserialized into the requested type.</exception>
    </member>
    <member name="P:System.ServiceModel.Syndication.XmlSyndicationContent.Type">
      <summary>Gets the type of the XML syndication content.</summary>
      <returns>The XML syndication content type.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.WriteContentsTo(System.Xml.XmlWriter)">
      <summary>Write the contents of the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="T:System.ServiceModel.XamlIntegration.XPathMessageContextMarkupExtension">
      <summary>Provides an extension of the <see cref="T:System.ServiceModel.Dispatcher.XPathMessageContext" /> to contain namespaces when serializing XPath message queries into XAML.</summary>
    </member>
    <member name="M:System.ServiceModel.XamlIntegration.XPathMessageContextMarkupExtension.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.XamlIntegration.XPathMessageContextMarkupExtension" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.XamlIntegration.XPathMessageContextMarkupExtension.#ctor(System.ServiceModel.Dispatcher.XPathMessageContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.XamlIntegration.XPathMessageContextMarkupExtension" /> class with the <see cref="T:System.ServiceModel.Dispatcher.XPathMessageContext" /> to convert.</summary>
      <param name="context">The XPath message context to convert.</param>
    </member>
    <member name="P:System.ServiceModel.XamlIntegration.XPathMessageContextMarkupExtension.Namespaces">
      <summary>Gets the namespaces contained in this instance.</summary>
      <returns>A collection of namespaces and prefixes.</returns>
    </member>
    <member name="M:System.ServiceModel.XamlIntegration.XPathMessageContextMarkupExtension.ProvideValue(System.IServiceProvider)">
      <summary>Provides the namespaces used in the XPath message query.</summary>
      <returns>The namespaces.</returns>
      <param name="serviceProvider">A service provider that is not used in the operation.</param>
    </member>
    <member name="T:System.ServiceModel.XamlIntegration.XPathMessageContextTypeConverter">
      <summary>Provides a way to convert an <see cref="T:System.ServiceModel.Dispatcher.XPathMessageContext" /> to a format that can be serialized as XAML.</summary>
    </member>
    <member name="M:System.ServiceModel.XamlIntegration.XPathMessageContextTypeConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.XamlIntegration.XPathMessageContextTypeConverter" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.XamlIntegration.XPathMessageContextTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Tests whether a context can be converted from one type to the type of this converter.</summary>
      <returns>true if the type can be converted; otherwise, false.</returns>
      <param name="context">A type that provides the format context.</param>
      <param name="sourceType">The type to convert from.</param>
    </member>
    <member name="M:System.ServiceModel.XamlIntegration.XPathMessageContextTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Tests whether a type can be converted into a target type.</summary>
      <returns>true if the conversion can be performed; otherwise, false.</returns>
      <param name="context">A type that provides the format context.</param>
      <param name="destinationType">A type that provides the format context.</param>
    </member>
    <member name="M:System.ServiceModel.XamlIntegration.XPathMessageContextTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the provided context object into the XAML-serializable type of this converter, using the specified context and culture information.</summary>
      <returns>The result of the conversion process.</returns>
      <param name="context">A type that provides the format context.</param>
      <param name="culture">The information about a specific culture, such as calendars, and number formats.</param>
      <param name="value">The object to convert.</param>
    </member>
    <member name="M:System.ServiceModel.XamlIntegration.XPathMessageContextTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the provided context object into the XAML-serializable type of this converter, using the specified context and culture information.</summary>
      <returns>The converted context.</returns>
      <param name="context">A type that provides the format context.</param>
      <param name="culture">The information about a specific culture, such as calendars, and number formats.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The type to convert the <paramref name="value" /> argument to.</param>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\System.Windows.Input.Manipulations.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Windows.Input.Manipulations</name>
  </assembly>
  <members>
    <member name="T:System.Windows.Input.Manipulations.InertiaExpansionBehavior2D">
      <summary>Describes desired expansion behavior of an inertia processor.</summary>
    </member>
    <member name="M:System.Windows.Input.Manipulations.InertiaExpansionBehavior2D.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.Manipulations.InertiaExpansionBehavior2D" /> class.</summary>
    </member>
    <member name="P:System.Windows.Input.Manipulations.InertiaExpansionBehavior2D.DesiredDeceleration">
      <summary>Gets or sets the desired expansion deceleration, in coordinate units per millisecond squared.</summary>
      <returns>The desired expansion deceleration, in coordinate units per millisecond squared.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.InertiaExpansionBehavior2D.DesiredExpansionX">
      <summary>Gets or sets the desired expansion along the x-axis, in coordinate units.</summary>
      <returns>The desired expansion along the x-axis, in coordinate units.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.InertiaExpansionBehavior2D.DesiredExpansionY">
      <summary>Gets or sets the desired expansion along the y-axis, in coordinate units.</summary>
      <returns>The desired expansion along the y-axis, in coordinate units.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.InertiaExpansionBehavior2D.InitialRadius">
      <summary>Gets or sets the initial average radius, in coordinate units.</summary>
      <returns>The initial average radius, in coordinate units.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.InertiaExpansionBehavior2D.InitialVelocityX">
      <summary>Gets or sets the initial expansion velocity along the x-axis, in coordinate units per millisecond.</summary>
      <returns>The initial expansion velocity along the x-axis, in coordinate units per millisecond.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.InertiaExpansionBehavior2D.InitialVelocityY">
      <summary>Gets or sets the initial expansion velocity along the y-axis, in coordinate units per millisecond.</summary>
      <returns>The initial expansion velocity along the y-axis, in coordinate units per millisecond.</returns>
    </member>
    <member name="T:System.Windows.Input.Manipulations.InertiaParameters2D">
      <summary>Base class from which all inertia parameter classes are derived.</summary>
    </member>
    <member name="T:System.Windows.Input.Manipulations.InertiaProcessor2D">
      <summary>Implements the extrapolation of a manipulation's position, orientation, and average radius.</summary>
    </member>
    <member name="M:System.Windows.Input.Manipulations.InertiaProcessor2D.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.Manipulations.InertiaProcessor2D" /> class.</summary>
    </member>
    <member name="M:System.Windows.Input.Manipulations.InertiaProcessor2D.Complete(System.Int64)">
      <summary>Completes final extrapolation by using the specified timestamp and raises the <see cref="E:System.Windows.Input.Manipulations.InertiaProcessor2D.Completed" /> event.</summary>
      <param name="timestamp"></param>
      <exception cref="T:System.ArgumentOutOfRangeException">The timestamp parameter is less than the initial or previous timestamp.</exception>
    </member>
    <member name="E:System.Windows.Input.Manipulations.InertiaProcessor2D.Completed">
      <summary>Occurs when extrapolation has completed.</summary>
    </member>
    <member name="E:System.Windows.Input.Manipulations.InertiaProcessor2D.Delta">
      <summary>Occurs when the extrapolation origin has changed or when translation, scaling, or rotation have occurred.</summary>
    </member>
    <member name="P:System.Windows.Input.Manipulations.InertiaProcessor2D.ExpansionBehavior">
      <summary>Gets or sets the expansion behavior of the inertia processor.</summary>
      <returns>The expansion behavior of the inertia processor.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginX">
      <summary>Gets or sets the x-coordinate for the initial origin, in coordinate units.</summary>
      <returns>The x-coordinate for the initial origin, in coordinate units.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginY">
      <summary>Gets or sets the y-coordinate for the initial origin, in coordinate units.</summary>
      <returns>The y-coordinate for the initial origin, in coordinate units.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.InertiaProcessor2D.IsRunning">
      <summary>Gets whether inertia is currently in progress.</summary>
      <returns>A Boolean value indicating whether inertia is currently in progress.</returns>
    </member>
    <member name="M:System.Windows.Input.Manipulations.InertiaProcessor2D.Process(System.Int64)">
      <summary>Extrapolates the manipulation's position, orientation, and average radius at the specified time.</summary>
      <returns>The manipulation's position, orientation, and average radius at the specified time. true if extrapolation is in progress; otherwise, false if extrapolation has completed.</returns>
      <param name="timestamp"></param>
      <exception cref="T:System.ArgumentOutOfRangeException">The timestamp parameter is less than the initial or previous timestamp.</exception>
    </member>
    <member name="P:System.Windows.Input.Manipulations.InertiaProcessor2D.RotationBehavior">
      <summary>Gets or sets the rotation behavior of the inertia processor.</summary>
      <returns>The rotation behavior of the inertia processor.</returns>
    </member>
    <member name="M:System.Windows.Input.Manipulations.InertiaProcessor2D.SetParameters(System.Windows.Input.Manipulations.InertiaParameters2D)">
      <summary>Sets parameters on the inertia processor.</summary>
      <param name="parameters"></param>
    </member>
    <member name="P:System.Windows.Input.Manipulations.InertiaProcessor2D.TranslationBehavior">
      <summary>Gets or sets the translation behavior of the inertia processor.</summary>
      <returns>The translation behavior of the inertia processor.</returns>
    </member>
    <member name="T:System.Windows.Input.Manipulations.InertiaRotationBehavior2D">
      <summary>Describes desired rotation behavior of an inertia processor.</summary>
    </member>
    <member name="M:System.Windows.Input.Manipulations.InertiaRotationBehavior2D.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.Manipulations.InertiaRotationBehavior2D" /> class.</summary>
    </member>
    <member name="P:System.Windows.Input.Manipulations.InertiaRotationBehavior2D.DesiredDeceleration">
      <summary>Gets or sets the desired angular deceleration, in radians per millisecond squared.</summary>
      <returns>The desired angular deceleration, in radians per millisecond squared.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.InertiaRotationBehavior2D.DesiredRotation">
      <summary>Gets or sets the desired rotation, in radians.</summary>
      <returns>The desired rotation, in radians.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.InertiaRotationBehavior2D.InitialVelocity">
      <summary>Gets or sets the initial rotational velocity, in radians per millisecond.</summary>
      <returns>The initial rotational velocity, in radians per millisecond.</returns>
    </member>
    <member name="T:System.Windows.Input.Manipulations.InertiaTranslationBehavior2D">
      <summary>Describes desired translation behavior of an inertia processor.</summary>
    </member>
    <member name="M:System.Windows.Input.Manipulations.InertiaTranslationBehavior2D.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.Manipulations.InertiaTranslationBehavior2D" /> class.</summary>
    </member>
    <member name="P:System.Windows.Input.Manipulations.InertiaTranslationBehavior2D.DesiredDeceleration">
      <summary>Gets or sets the desired deceleration, in coordinate units per millisecond squared.</summary>
      <returns>The desired deceleration, in coordinate units per millisecond squared.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.InertiaTranslationBehavior2D.DesiredDisplacement">
      <summary>Gets or sets the absolute distance that the object needs to travel along the velocity vector, in coordinate units.</summary>
      <returns>The absolute distance that the object needs to travel along the velocity vector, in coordinate units.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.InertiaTranslationBehavior2D.InitialVelocityX">
      <summary>Gets or sets the initial velocity along the x-axis, in coordinate units per millisecond.</summary>
      <returns>The initial velocity along the x-axis, in coordinate units per millisecond.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.InertiaTranslationBehavior2D.InitialVelocityY">
      <summary>Gets or sets the initial velocity along the x-axis, in coordinate units per millisecond.</summary>
      <returns>The initial velocity along the x-axis, in coordinate units per millisecond.</returns>
    </member>
    <member name="T:System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs">
      <summary>Represents data that is sent with a ManipulationProcessor2D.Completed event or an InertiaProcessor2D.Completed event.</summary>
    </member>
    <member name="P:System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs.OriginX">
      <summary>Gets the new x-coordinate of the composite position of the manipulation.</summary>
      <returns>The new x-coordinate of the composite position of the manipulation.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs.OriginY">
      <summary>Gets the new y-coordinate of the composite position of the manipulation.</summary>
      <returns>The new y-coordinate of the composite position of the manipulation.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs.Total">
      <summary>Gets the total amount of change since the manipulation started.</summary>
      <returns>The total amount of change since the manipulation started.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs.Velocities">
      <summary>Gets the current velocities of the manipulation.</summary>
      <returns>The current velocities of the manipulation.</returns>
    </member>
    <member name="T:System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs">
      <summary>Represents data that is sent with a <see cref="E:System.Windows.Input.Manipulations.ManipulationProcessor2D.Delta" /> event or an <see cref="E:System.Windows.Input.Manipulations.InertiaProcessor2D.Delta" /> event.</summary>
    </member>
    <member name="P:System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs.Cumulative">
      <summary>Gets the total amount of change since the manipulation started.</summary>
      <returns>The total amount of change since the manipulation started.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs.Delta">
      <summary>Gets the amount of change since the last event.</summary>
      <returns>The amount of change since the last event.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs.OriginX">
      <summary>Gets the new x-coordinate of the composite position of the manipulation.</summary>
      <returns>The new x-coordinate of the composite position of the manipulation.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs.OriginY">
      <summary>Gets the new y-coordinate of the composite position of the manipulation.</summary>
      <returns>The new y-coordinate of the composite position of the manipulation.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs.Velocities">
      <summary>Gets the current velocities of the manipulation.</summary>
      <returns>The current velocities of the manipulation.</returns>
    </member>
    <member name="T:System.Windows.Input.Manipulations.Manipulation2DStartedEventArgs">
      <summary>Represents data that is sent with a <see cref="E:System.Windows.Input.Manipulations.ManipulationProcessor2D.Started" /> event.</summary>
    </member>
    <member name="P:System.Windows.Input.Manipulations.Manipulation2DStartedEventArgs.OriginX">
      <summary>Gets the x-coordinate of the origin.</summary>
      <returns>The x-coordinate of the origin.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.Manipulation2DStartedEventArgs.OriginY">
      <summary>Gets the y-coordinate of the origin.</summary>
      <returns>The y-coordinate of the origin.</returns>
    </member>
    <member name="T:System.Windows.Input.Manipulations.ManipulationDelta2D">
      <summary>Represents the result of a 2D manipulation.</summary>
    </member>
    <member name="P:System.Windows.Input.Manipulations.ManipulationDelta2D.ExpansionX">
      <summary>Gets the amount of expansion along the x-axis, in coordinate units.</summary>
      <returns>The amount of expansion along the x-axis, in coordinate units.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.ManipulationDelta2D.ExpansionY">
      <summary>Gets the amount of expansion along the y-axis, in coordinate units.</summary>
      <returns>The amount of expansion along the y-axis, in coordinate units.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.ManipulationDelta2D.Rotation">
      <summary>Gets the amount of rotation, in radians.</summary>
      <returns>The amount of rotation, in radians.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.ManipulationDelta2D.ScaleX">
      <summary>Gets the scale factor along the x-axis.</summary>
      <returns>The scale factor along the x-axis.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.ManipulationDelta2D.ScaleY">
      <summary>Gets the scale factor along the y-axis.</summary>
      <returns>The scale factor along the y-axis.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.ManipulationDelta2D.TranslationX">
      <summary>Gets the translation along the x-axis, in coordinate units.</summary>
      <returns>The translation along the x-axis, in coordinate units.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.ManipulationDelta2D.TranslationY">
      <summary>Gets the translation along the y-axis, in coordinate units.</summary>
      <returns>The translation along the y-axis, in coordinate units.</returns>
    </member>
    <member name="T:System.Windows.Input.Manipulations.ManipulationParameters2D">
      <summary>Base class from which all manipulation parameter classes are derived.</summary>
    </member>
    <member name="T:System.Windows.Input.Manipulations.ManipulationPivot2D">
      <summary>Represents pivot information used by a manipulation processor for single-manipulator rotations.</summary>
    </member>
    <member name="M:System.Windows.Input.Manipulations.ManipulationPivot2D.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.Manipulations.ManipulationPivot2D" /> class.</summary>
    </member>
    <member name="P:System.Windows.Input.Manipulations.ManipulationPivot2D.Radius">
      <summary>Gets or sets the distance from the pivot point to the edge of the manipulatable region.</summary>
      <returns>The distance from the pivot point to the edge of the manipulatable region.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.ManipulationPivot2D.X">
      <summary>Gets or sets the X position of the pivot.</summary>
      <returns>The X position of the pivot.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.ManipulationPivot2D.Y">
      <summary>Gets or sets the Y position of the pivot.</summary>
      <returns>The Y position of the pivot.</returns>
    </member>
    <member name="T:System.Windows.Input.Manipulations.ManipulationProcessor2D">
      <summary>Implements a multiple-input, single-output compositor for two-dimensional (2-D) transformations in a shared coordinate space.</summary>
    </member>
    <member name="M:System.Windows.Input.Manipulations.ManipulationProcessor2D.#ctor(System.Windows.Input.Manipulations.Manipulations2D)">
      <summary>Creates a new <see cref="T:System.Windows.Input.Manipulations.ManipulationProcessor2D" /> object.</summary>
      <param name="supportedManipulations">The initial set of supported manipulations.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="supportedManipulations" /> parameter is not a valid combination of the <see cref="T:System.Windows.Input.Manipulations.Manipulations2D" /> enumeration values.</exception>
    </member>
    <member name="M:System.Windows.Input.Manipulations.ManipulationProcessor2D.#ctor(System.Windows.Input.Manipulations.Manipulations2D,System.Windows.Input.Manipulations.ManipulationPivot2D)">
      <summary>Creates a new <see cref="T:System.Windows.Input.Manipulations.ManipulationProcessor2D" /> object.</summary>
      <param name="supportedManipulations">The initial set of supported manipulations.</param>
      <param name="pivot">Pivot information for single-manipulator rotations.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="supportedManipulations" /> parameter is not a valid combination of the <see cref="T:System.Windows.Input.Manipulations.Manipulations2D" /> enumeration values.</exception>
    </member>
    <member name="E:System.Windows.Input.Manipulations.ManipulationProcessor2D.Completed">
      <summary>Occurs when a manipulation has competed.</summary>
    </member>
    <member name="M:System.Windows.Input.Manipulations.ManipulationProcessor2D.CompleteManipulation(System.Int64)">
      <summary>Forces the current manipulation to complete and raises the <see cref="E:System.Windows.Input.Manipulations.ManipulationProcessor2D.Completed" /> event.</summary>
      <param name="timestamp">The timestamp to complete the manipulation, in 100-nanosecond ticks.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The timestamp is less than the previous timestamp for the current manipulation.</exception>
    </member>
    <member name="E:System.Windows.Input.Manipulations.ManipulationProcessor2D.Delta">
      <summary>Occurs when the manipulation origin has changed or when translation, scaling, or rotation have occurred.</summary>
    </member>
    <member name="P:System.Windows.Input.Manipulations.ManipulationProcessor2D.MinimumScaleRotateRadius">
      <summary>Gets or sets the minimum radius, in coordinate units, necessary for a manipulator to participate in scaling and rotation.</summary>
      <returns>The minimum radius, in coordinate units, necessary for a manipulator to participate in scaling and rotation.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.ManipulationProcessor2D.Pivot">
      <summary>Gets or sets the pivot information for the manipulation processor.</summary>
      <returns>The pivot information for the manipulation processor.</returns>
    </member>
    <member name="M:System.Windows.Input.Manipulations.ManipulationProcessor2D.ProcessManipulators(System.Int64,System.Collections.Generic.IEnumerable{System.Windows.Input.Manipulations.Manipulator2D})">
      <summary>Processes the specified manipulators as a single batch action.</summary>
      <param name="timestamp">The timestamp for the batch, in 100-nanosecond ticks.</param>
      <param name="manipulators">The set of manipulators that are currently in scope.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The timestamp is less than the previous timestamp for the current manipulation.</exception>
    </member>
    <member name="M:System.Windows.Input.Manipulations.ManipulationProcessor2D.SetParameters(System.Windows.Input.Manipulations.ManipulationParameters2D)">
      <summary>Sets parameters on the manipulation processor.</summary>
      <param name="parameters">Parameters to set.</param>
    </member>
    <member name="E:System.Windows.Input.Manipulations.ManipulationProcessor2D.Started">
      <summary>Occurs when a new manipulation has started.</summary>
    </member>
    <member name="P:System.Windows.Input.Manipulations.ManipulationProcessor2D.SupportedManipulations">
      <summary>Gets or sets the current set of supported manipulations.</summary>
      <returns>The current set of supported manipulations.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The property tries to set a value that is not a valid combination of the <see cref="T:System.Windows.Input.Manipulations.Manipulations2D" />enumeration values.</exception>
    </member>
    <member name="T:System.Windows.Input.Manipulations.Manipulations2D">
      <summary>Represents the possible affine two-dimensional (2-D) manipulations.</summary>
    </member>
    <member name="F:System.Windows.Input.Manipulations.Manipulations2D.None">
      <summary>No manipulations. </summary>
    </member>
    <member name="F:System.Windows.Input.Manipulations.Manipulations2D.TranslateX">
      <summary>A translation in the x-axis.</summary>
    </member>
    <member name="F:System.Windows.Input.Manipulations.Manipulations2D.TranslateY">
      <summary>A translation in the y-axis.</summary>
    </member>
    <member name="F:System.Windows.Input.Manipulations.Manipulations2D.Translate">
      <summary>A translation in the x and/or y axes.</summary>
    </member>
    <member name="F:System.Windows.Input.Manipulations.Manipulations2D.Scale">
      <summary>A scale in both directions.</summary>
    </member>
    <member name="F:System.Windows.Input.Manipulations.Manipulations2D.Rotate">
      <summary>A rotation.</summary>
    </member>
    <member name="F:System.Windows.Input.Manipulations.Manipulations2D.All">
      <summary>All available manipulations. </summary>
    </member>
    <member name="T:System.Windows.Input.Manipulations.ManipulationVelocities2D">
      <summary>Represents a set of velocities calculated by the manipulation and inertia processors.</summary>
    </member>
    <member name="P:System.Windows.Input.Manipulations.ManipulationVelocities2D.AngularVelocity">
      <summary>Gets the angular velocity, in radians per millisecond.</summary>
      <returns>The angular velocity, in radians per millisecond.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.ManipulationVelocities2D.ExpansionVelocityX">
      <summary>Gets the expansion velocity along the x-axis, in coordinate units per millisecond.</summary>
      <returns>The expansion velocity along the x-axis, in coordinate units per millisecond.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.ManipulationVelocities2D.ExpansionVelocityY">
      <summary>Gets the expansion velocity along the y-axis, in coordinate units per millisecond.</summary>
      <returns>The expansion velocity along the y-axis, in coordinate units per millisecond.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.ManipulationVelocities2D.LinearVelocityX">
      <summary>Gets the velocity along the x-axis, in coordinate units per millisecond.</summary>
      <returns>The velocity along the x-axis, in coordinate units per millisecond.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.ManipulationVelocities2D.LinearVelocityY">
      <summary>Gets the velocity along the y-axis, in coordinate units per millisecond.</summary>
      <returns>The velocity along the y-axis, in coordinate units per millisecond.</returns>
    </member>
    <member name="F:System.Windows.Input.Manipulations.ManipulationVelocities2D.Zero">
      <summary>Gets a <see cref="T:System.Windows.Input.Manipulations.ManipulationVelocities2D" /> with all velocities set to zero.</summary>
    </member>
    <member name="T:System.Windows.Input.Manipulations.Manipulator2D">
      <summary>Represents a 2D manipulator at an instant in time.</summary>
    </member>
    <member name="M:System.Windows.Input.Manipulations.Manipulator2D.#ctor(System.Int32,System.Single,System.Single)">
      <summary>Creates a new <see cref="T:System.Windows.Input.Manipulations.Manipulator2D" /> object with the specified properties.</summary>
      <param name="id">The unique ID for this manipulator.</param>
      <param name="x">The x-coordinate of the manipulator.</param>
      <param name="y">The y-coordinate of the manipulator.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="x" />-coordinate or <paramref name="y" />-coordinate are float.NaN, float.PositiveInfinity, or float.NegativeInfinity. These values are all invalid.</exception>
    </member>
    <member name="M:System.Windows.Input.Manipulations.Manipulator2D.Equals(System.Object)">
      <summary>Determines whether this <see cref="T:System.Windows.Input.Manipulations.Manipulator2D" /> object has the same value as the specified <see cref="T:System.Windows.Input.Manipulations.Manipulator2D" /> object.</summary>
      <returns>true if the two <see cref="T:System.Windows.Input.Manipulations.Manipulator2D" /> objects are the same type and represent the same value; otherwise, false.</returns>
      <param name="obj"></param>
    </member>
    <member name="M:System.Windows.Input.Manipulations.Manipulator2D.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>The hash code for this instance.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.Manipulator2D.Id">
      <summary>Gets or sets the unique ID for this <see cref="T:System.Windows.Input.Manipulations.Manipulator2D" /> object.</summary>
      <returns>The unique ID for this <see cref="T:System.Windows.Input.Manipulations.Manipulator2D" /> object.</returns>
    </member>
    <member name="M:System.Windows.Input.Manipulations.Manipulator2D.op_Equality(System.Windows.Input.Manipulations.Manipulator2D,System.Windows.Input.Manipulations.Manipulator2D)">
      <summary>Determines whether two specified <see cref="T:System.Windows.Input.Manipulations.Manipulator2D" /> objects have the same value.</summary>
      <returns>true if the two <see cref="T:System.Windows.Input.Manipulations.Manipulator2D" /> objects have the same value; otherwise, false.</returns>
      <param name="manipulator1">The first <see cref="T:System.Windows.Input.Manipulations.Manipulator2D" /> object to compare.</param>
      <param name="manipulator2">The second <see cref="T:System.Windows.Input.Manipulations.Manipulator2D" /> object to compare.</param>
    </member>
    <member name="M:System.Windows.Input.Manipulations.Manipulator2D.op_Inequality(System.Windows.Input.Manipulations.Manipulator2D,System.Windows.Input.Manipulations.Manipulator2D)">
      <summary>Determines whether two specified <see cref="T:System.Windows.Input.Manipulations.Manipulator2D" /> objects have different values.</summary>
      <returns>true if the two <see cref="T:System.Windows.Input.Manipulations.Manipulator2D" /> objects have different values; otherwise, false.</returns>
      <param name="manipulator1">The first <see cref="T:System.Windows.Input.Manipulations.Manipulator2D" /> object to compare.</param>
      <param name="manipulator2">The second <see cref="T:System.Windows.Input.Manipulations.Manipulator2D" /> object to compare.</param>
    </member>
    <member name="P:System.Windows.Input.Manipulations.Manipulator2D.X">
      <summary>Gets or sets the x-coordinate of this <see cref="T:System.Windows.Input.Manipulations.Manipulator2D" /> object.</summary>
      <returns>The x-coordinate of this <see cref="T:System.Windows.Input.Manipulations.Manipulator2D" /> object.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.Manipulator2D.Y">
      <summary>Gets or sets the y-coordinate of this <see cref="T:System.Windows.Input.Manipulations.Manipulator2D" /> object.</summary>
      <returns>The y-coordinate of this <see cref="T:System.Windows.Input.Manipulations.Manipulator2D" /> object.</returns>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\System.Windows.Forms.DataVisualization.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Windows.Forms.DataVisualization</name>
  </assembly>
  <members>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.Annotation">
      <summary>Defines properties and methods common to all annotations. This is an abstract class.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Annotation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Annotation" /> class. This is the default constructor and should not be used.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Annotation.Alignment">
      <summary>Gets or sets the content alignment of an annotation.</summary>
      <returns>A <see cref="T:System.Drawing.ContentAlignment" /> enumeration value that represents the content alignment.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Annotation.AllowAnchorMoving">
      <summary>Gets or sets a flag that specifies whether the end user is allowed to move the annotation anchor using a mouse.</summary>
      <returns>True if the annotation anchor may be moved, otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Annotation.AllowMoving">
      <summary>Gets or sets a flag that specifies whether the end user is allowed to move an annotation using a mouse.</summary>
      <returns>True if the annotation may be moved, otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Annotation.AllowPathEditing">
      <summary>Gets or sets a flag that specifies whether the end user is allowed to move the points of a polygon annotation using a mouse.</summary>
      <returns>True if the polygon annotation's points may be moved, otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Annotation.AllowResizing">
      <summary>Gets or sets a flag that specifies whether the end user is allowed to resize an annotation using a mouse.</summary>
      <returns>True if the annotation may be resized, otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Annotation.AllowSelecting">
      <summary>Gets or sets a flag that specifies whether the end user is allowed to select an annotation using a mouse.</summary>
      <returns>True if the annotation may be selected, otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Annotation.AllowTextEditing">
      <summary>Gets or sets a flag that specifies whether the text in an annotation may be edited when the end user double clicks the text.</summary>
      <returns>True if the annotation text may be edited, otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Annotation.AnchorAlignment">
      <summary>Gets or sets the alignment of an annotation to the anchor point.</summary>
      <returns>A <see cref="T:System.Drawing.ContentAlignment" /> enumeration value that represents the alignment of the annotation to the anchor point.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Annotation.AnchorDataPoint">
      <summary>Gets or sets the data point to which an annotation is anchored.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" /> object to which an annotation is anchored.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Annotation.AnchorDataPointName">
      <summary>Gets or sets the name of a data point to which an annotation is anchored.</summary>
      <returns>A string value that represents the name of the data point that an annotation is anchored to.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Annotation.AnchorOffsetX">
      <summary>Gets or sets the offset from the anchor point for the X position of an annotation.</summary>
      <returns>A double value that represents the offset of the X position from the anchor point.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Annotation.AnchorOffsetY">
      <summary>Gets or sets the offset from the anchor point for the Y position of an annotation.</summary>
      <returns>A double value that represents the offset of the Y position from the anchor point.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Annotation.AnchorX">
      <summary>Gets or sets the X coordinate to which the annotation is anchored.</summary>
      <returns>A double value that represents the X coordinate an annotation is anchored to.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Annotation.AnchorY">
      <summary>Gets or sets the Y coordinate to which the annotation is anchored.</summary>
      <returns>A double value that represents the Y coordinate an annotation is anchored to.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Annotation.AnnotationGroup">
      <summary>Gets the group, if any, to which the annotation belongs.</summary>
      <returns>An <see cref="T:System.Windows.Forms.DataVisualization.Charting.AnnotationGroup" /> object.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Annotation.AnnotationType">
      <summary>Gets or sets an annotation's type name. </summary>
      <returns>The annotation type.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Annotation.AxisX">
      <summary>Gets or sets the X axis to which an annotation is attached.</summary>
      <returns>An <see cref="T:System.Windows.Forms.DataVisualization.Charting.Axis" /> object to which the annotation is attached.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Annotation.AxisXName">
      <summary>Gets or sets the name of the X axis to which an annotation is attached. </summary>
      <returns>A string value that represents the name of the X axis which an annotation is attached to.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Annotation.AxisY">
      <summary>Gets or sets the Y axis to which an annotation is attached.</summary>
      <returns>An <see cref="T:System.Windows.Forms.DataVisualization.Charting.Axis" /> object to which this annotation is attached.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Annotation.AxisYName">
      <summary>Gets or sets the name of the Y axis which an annotation is attached to.</summary>
      <returns>A string value that represents the name of the Y axis that an annotation is attached to.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Annotation.BackColor">
      <summary>Gets or sets the color of an annotation background.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value used to draw an annotation background.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Annotation.BackGradientStyle">
      <summary>Gets or sets the gradient style of an annotation background.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.GradientStyle" /> value used to draw an annotation background.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Annotation.BackHatchStyle">
      <summary>Gets or sets the hatching style of an annotation background.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle" /> value used to draw the background.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Annotation.BackSecondaryColor">
      <summary>Gets or sets the secondary color of an annotation background.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value used to draw an annotation background with hatching or gradient fill.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Annotation.BeginPlacement">
      <summary>Begins the end user placement of an annotation using the mouse.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Annotation.Bottom">
      <summary>Gets or sets the bottom boundary of an annotation position.</summary>
      <returns>A double value that represents the position of the bottom boundary of an annotation.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Annotation.BringToFront">
      <summary>Brings an annotation to the front of all annotations.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Annotation.ClipToChartArea">
      <summary>Gets or sets the name of the chart area to which an annotation is clipped.</summary>
      <returns>A string that represents the name of an existing chart area.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Annotation.Dispose(System.Boolean)">
      <summary>Releases unmanaged resources and, optionally, managed resources.</summary>
      <param name="disposing">True to release both unmanaged and managed resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Annotation.EndPlacement">
      <summary>Ends the end user placement of an annotation.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Annotation.Font">
      <summary>Gets or sets the font to use for the text of an annotation.</summary>
      <returns>A <see cref="T:System.Drawing.Font" /> object used to draw the annotation text.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Annotation.ForeColor">
      <summary>Gets or sets the text color of an annotation.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value used for the text color of an annotation.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Annotation.Height">
      <summary>Gets or sets the height of an annotation.</summary>
      <returns>A double value that represents the height of an annotation.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Annotation.IsSelected">
      <summary>Gets or sets a flag that determines if an annotation is selected.</summary>
      <returns>True if the annotation is selected, otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Annotation.IsSizeAlwaysRelative">
      <summary>Gets or sets a flag that specifies whether the size of an annotation is always defined in relative chart coordinates.</summary>
      <returns>True if the <see cref="P:System.Windows.Forms.DataVisualization.Charting.Annotation.Width" /> and <see cref="P:System.Windows.Forms.DataVisualization.Charting.Annotation.Height" /> of an annotation are always expressed in relative chart coordinates, otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Annotation.LineColor">
      <summary>Gets or sets the line color of an annotation.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value used to draw an annotation's line.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Annotation.LineDashStyle">
      <summary>Gets or sets the line style of an annotation.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartDashStyle" /> value used to draw the line style of an annotation.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Annotation.LineWidth">
      <summary>Gets or sets the line width of an annotation.</summary>
      <returns>An integer value that defines the line width, in pixels, of an annotation.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Annotation.Name">
      <summary>Gets or sets the unique name of an annotation.</summary>
      <returns>A string that represents the unique name of an annotation.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Annotation.ResizeToContent">
      <summary>Resizes an annotation according to its content size.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Annotation.Right">
      <summary>Gets or sets the right boundary position of an annotation.</summary>
      <returns>A double value that represents the position of the right boundary of an annotation.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Annotation.SendToBack">
      <summary>Sends an annotation to the back of all the annotations.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Annotation.SetAnchor(System.Windows.Forms.DataVisualization.Charting.DataPoint)">
      <summary>Anchors an annotation to the specified data point.</summary>
      <param name="dataPoint">The <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" /> to which the annotation will be anchored.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Annotation.SetAnchor(System.Windows.Forms.DataVisualization.Charting.DataPoint,System.Windows.Forms.DataVisualization.Charting.DataPoint)">
      <summary>Anchors an annotation to two data points.</summary>
      <param name="dataPoint1">The first anchor <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" />.</param>
      <param name="dataPoint2">The second anchor <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" />.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Annotation.ShadowColor">
      <summary>Gets or sets the color of an annotation's shadow.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value used to draw the annotation shadow.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Annotation.ShadowOffset">
      <summary>Gets or sets the size of an annotation's shadow.</summary>
      <returns>An integer value that represents the size of the shadow.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Annotation.SmartLabelStyle">
      <summary>Gets or sets the smart label style of an annotation.</summary>
      <returns>An <see cref="T:System.Windows.Forms.DataVisualization.Charting.AnnotationSmartLabelStyle" /> object that represents an annotation's smart labels style properties.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Annotation.TextStyle">
      <summary>Gets or sets the text style of an annotation.</summary>
      <returns>A <see cref="P:System.Windows.Forms.DataVisualization.Charting.Annotation.TextStyle" /> value used to draw the text of an annotation.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Annotation.ToolTip">
      <summary>Gets or sets the tooltip text for an annotation.</summary>
      <returns>A string value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Annotation.Visible">
      <summary>Gets or sets a flag that specifies whether an annotation is visible.</summary>
      <returns>True if the annotation is visible, otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Annotation.Width">
      <summary>Gets or sets the width, in pixels, of an annotation.</summary>
      <returns>A double value that represents the width of an annotation.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Annotation.X">
      <summary>Gets or sets the X coordinate of an annotation.</summary>
      <returns>A double value that represents the X coordinate of an annotation's position.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Annotation.Y">
      <summary>Gets or sets the Y coordinate of the annotation.</summary>
      <returns>A double value that represents the Y coordinate of an annotation's position.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Annotation.YAxisName">
      <summary>Gets or sets the name of the Y axis to which an annotation is attached.</summary>
      <returns>A string value that represents the name of the Y axis which an annotation is attached to.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.AnnotationCollection">
      <summary>Stores chart annotation objects.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.AnnotationCollection.FindByName(System.String)">
      <summary>Finds an annotation in the collection by name.</summary>
      <returns>An <see cref="T:System.Windows.Forms.DataVisualization.Charting.Annotation" /> object, or null if the object does not exist.</returns>
      <param name="name">The name of the annotation to find.</param>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.AnnotationGroup">
      <summary>Represents a group of annotations.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.AnnotationGroup.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.AnnotationGroup" /> class.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnnotationGroup.Alignment">
      <summary>Gets or sets the content alignment of an annotation.</summary>
      <returns>A <see cref="T:System.Drawing.ContentAlignment" /> value that represents the content alignment of an annotation.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnnotationGroup.AllowAnchorMoving">
      <summary>Gets or sets a flag that specifies whether an annotation anchor may be moved with a mouse by the end user.</summary>
      <returns>True if the annotation anchor may be moved, otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnnotationGroup.AllowMoving">
      <summary>Gets or sets a flag that specifies whether an annotation may be moved with a mouse by the end user.</summary>
      <returns>True if the annotation may be moved, otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnnotationGroup.AllowPathEditing">
      <summary>Gets or sets a flag that specifies whether the points of a polygon annotation may be moved with a mouse by the end user.</summary>
      <returns>True if the points of the polygon annotation may be moved, otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnnotationGroup.AllowResizing">
      <summary>Gets or sets a flag that specifies whether an annotation may be resized with a mouse by the end user.</summary>
      <returns>True if the annotation may be resized, otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnnotationGroup.AllowSelecting">
      <summary>Gets or sets a flag that specifies whether an annotation may be selected with a mouse by the end user.</summary>
      <returns>True if the annotation may be selected, otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnnotationGroup.AllowTextEditing">
      <summary>Gets or sets a flag that specifies whether an annotation's text may be edited when the end user double clicks the text.</summary>
      <returns>True if the annotation text may be edited, otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnnotationGroup.Annotations">
      <summary>Gets the collection of annotations in the group.</summary>
      <returns>An <see cref="T:System.Windows.Forms.DataVisualization.Charting.AnnotationCollection" /> object.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnnotationGroup.AnnotationType">
      <summary>Gets the annotation type. </summary>
      <returns>The annotation type.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnnotationGroup.BackColor">
      <summary>Gets or sets the background color of an annotation.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value used for the background of an annotation.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnnotationGroup.BackGradientStyle">
      <summary>Gets or sets the background gradient style of an annotation.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.GradientStyle" /> value used to draw the background of an annotation.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnnotationGroup.BackHatchStyle">
      <summary>Gets or sets the hatch style of an annotation background.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle" /> value used to draw the background of an annotation.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnnotationGroup.BackSecondaryColor">
      <summary>Gets or sets the secondary color for the background of an annotation.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value used to draw the background with hatching or gradient fill.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnnotationGroup.ClipToChartArea">
      <summary>Gets or sets the name of the chart area to which the annotation is clipped.</summary>
      <returns>A string that represents the name of an existing chart area.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.AnnotationGroup.Dispose(System.Boolean)">
      <summary>Releases unmanaged and, optionally, managed resources.</summary>
      <param name="disposing">True to release both unmanaged and managed resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnnotationGroup.Font">
      <summary>Gets or sets the font to use for the text of an annotation.</summary>
      <returns>A <see cref="T:System.Drawing.Font" /> object used for the text of an annotation.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnnotationGroup.ForeColor">
      <summary>Gets or sets the text color for an annotation.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value used for the text color of an annotation.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnnotationGroup.IsSelected">
      <summary>Gets or sets a flag that determines if an annotation is selected.</summary>
      <returns>True if the annotation is selected, otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnnotationGroup.IsSizeAlwaysRelative">
      <summary>Gets or sets a flag that specifies whether the size of an annotation is always defined in relative chart coordinates.</summary>
      <returns>True if the <see cref="P:System.Windows.Forms.DataVisualization.Charting.Annotation.Width" /> and <see cref="P:System.Windows.Forms.DataVisualization.Charting.Annotation.Height" /> of an annotation are always in chart relative coordinates, otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnnotationGroup.LineColor">
      <summary>Gets or sets the line color of the annotation.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value used to draw an annotation line.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnnotationGroup.LineDashStyle">
      <summary>Gets or sets the line style of the annotation.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartDashStyle" /> value used to draw an annotation line.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnnotationGroup.LineWidth">
      <summary>Gets or sets the line width, in pixels, of the annotation.</summary>
      <returns>An integer value defining the width, in pixels, of an annotation line.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnnotationGroup.ShadowColor">
      <summary>Gets or sets the color of the annotation's shadow.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value used to draw the shadow of an annotation.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnnotationGroup.ShadowOffset">
      <summary>Gets or sets the size of the annotation's shadow.</summary>
      <returns>An integer value that represents the offset between an annotation and its shadow.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnnotationGroup.TextStyle">
      <summary>Gets or sets the text style of an annotation.</summary>
      <returns>A <see cref="P:System.Windows.Forms.DataVisualization.Charting.AnnotationGroup.TextStyle" /> enumeration value used to draw the text of an annotation.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnnotationGroup.Visible">
      <summary>Gets or sets a flag that indicates whether the annotation is visible.</summary>
      <returns>True if the annotation is visible, otherwise false.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.AnnotationPathPoint">
      <summary>Represents a path point of a <see cref="T:System.Windows.Forms.DataVisualization.Charting.PolylineAnnotation" /> or <see cref="T:System.Windows.Forms.DataVisualization.Charting.PolygonAnnotation" />, which is stored in their PathPoints property.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.AnnotationPathPoint.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.AnnotationPathPoint" /> class.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.AnnotationPathPoint.#ctor(System.Single,System.Single)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.AnnotationPathPoint" /> class with the specified <paramref name="x" /> and <paramref name="y" /> values.</summary>
      <param name="x">Point X-value.</param>
      <param name="y">Point Y-value.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.AnnotationPathPoint.#ctor(System.Single,System.Single,System.Byte)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.AnnotationPathPoint" /> class with the specified <paramref name="x" />, <paramref name="y" /> and point <paramref name="type" /> values.</summary>
      <param name="x">Point X-value.</param>
      <param name="y">Point Y-value.</param>
      <param name="type">Point type.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnnotationPathPoint.Name">
      <summary>Gets the name for the path point of an annotation.</summary>
      <returns>A string value that represents the name of the path point.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnnotationPathPoint.PointType">
      <summary>Gets or sets the type for the path point of an annotation.</summary>
      <returns>A byte value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnnotationPathPoint.X">
      <summary>Gets or sets the X coordinate for the path point of an annotation.</summary>
      <returns>A float that represents the X value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnnotationPathPoint.Y">
      <summary>Gets or sets the Y coordinate for the path point of an annotation.</summary>
      <returns>A float that represents the Y value.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.AnnotationPathPointCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.Forms.DataVisualization.Charting.PolylineAnnotation" /> or <see cref="T:System.Windows.Forms.DataVisualization.Charting.PolygonAnnotation" /> path points, which can be accessed using the GraphicPathPoints property.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.AnnotationPathPointCollection.#ctor(System.Windows.Forms.DataVisualization.Charting.PolylineAnnotation)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.AnnotationPathPointCollection" /> class with the specified polyline annotation.</summary>
      <param name="annotation">A polyline annotation.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.AnnotationPathPointCollection.Dispose(System.Boolean)">
      <summary>Releases unmanaged and, optionally, managed resources</summary>
      <param name="disposing">True to release both unmanaged and managed resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.AnnotationPathPointCollection.Invalidate">
      <summary>Forces the invalidation of the chart element.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.AnnotationPositionChangingEventArgs">
      <summary>Provides data for the events in the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" /> control that change the position of the annotation.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.AnnotationPositionChangingEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.AnnotationPositionChangingEventArgs" /> class.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnnotationPositionChangingEventArgs.Annotation">
      <summary>Gets or sets the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Annotation" /> object.</summary>
      <returns>The <see cref="T:System.Windows.Forms.DataVisualization.Charting.Annotation" /> object.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnnotationPositionChangingEventArgs.NewAnchorLocation">
      <summary>Gets or sets the new anchor location of the annotation.</summary>
      <returns>A <see cref="T:System.Drawing.PointF" /> object that represents the new anchor position.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnnotationPositionChangingEventArgs.NewAnchorLocationX">
      <summary>Gets or sets the new annotation anchor point X location.</summary>
      <returns>A double value that represents the new annotation anchor point X location.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnnotationPositionChangingEventArgs.NewAnchorLocationY">
      <summary>Gets or sets the new annotation anchor point Y location.</summary>
      <returns>A double value representing the new annotation anchor point Y location.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnnotationPositionChangingEventArgs.NewLocationX">
      <summary>Gets or sets the new X coordinate location of the annotation.</summary>
      <returns>A double value that represents the new X coordinate location of the annotation.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnnotationPositionChangingEventArgs.NewLocationY">
      <summary>Gets or sets the new Y coordinate of the annotation location.</summary>
      <returns>A double value that represents the new Y coordinate of the annotation location.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnnotationPositionChangingEventArgs.NewPosition">
      <summary>Gets or sets the new location and size of the annotation.</summary>
      <returns>A <see cref="T:System.Drawing.RectangleF" /> object.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnnotationPositionChangingEventArgs.NewSizeHeight">
      <summary>Gets or sets the new height of the annotation.</summary>
      <returns>A double value that represents the new height of the annotation.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnnotationPositionChangingEventArgs.NewSizeWidth">
      <summary>Gets or sets the new width of the annotation.</summary>
      <returns>A double value that represents the new width of the annotation.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.AnnotationSmartLabelStyle">
      <summary>Stores the smart label properties of an annotation. </summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.AnnotationSmartLabelStyle.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.AnnotationSmartLabelStyle" /> class.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.AnnotationSmartLabelStyle.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.AnnotationSmartLabelStyle" /> class with the specified chart element.</summary>
      <param name="chartElement">Chart element that this style belongs to.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnnotationSmartLabelStyle.CalloutBackColor">
      <summary>Gets or sets the back color of the label callout. This property is only applicable when the <see cref="P:System.Windows.Forms.DataVisualization.Charting.AnnotationSmartLabelStyle.CalloutStyle" /> property is set to a value of <see cref="F:System.Windows.Forms.DataVisualization.Charting.LabelCalloutStyle.Box" />.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> object.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnnotationSmartLabelStyle.CalloutLineAnchorCapStyle">
      <summary>Gets or sets the anchor cap style for the label callout line.</summary>
      <returns>A <see cref="P:System.Windows.Forms.DataVisualization.Charting.AnnotationSmartLabelStyle.CalloutLineAnchorCapStyle" /> object.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnnotationSmartLabelStyle.CalloutLineColor">
      <summary>Gets or sets the color of the label callout line.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> object.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnnotationSmartLabelStyle.CalloutLineDashStyle">
      <summary>Gets or sets the style of the label callout line.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartDashStyle" /> object.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnnotationSmartLabelStyle.CalloutLineWidth">
      <summary>Gets or sets the width of the label callout line.</summary>
      <returns>The width of the callout line.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnnotationSmartLabelStyle.CalloutStyle">
      <summary>Gets or sets the callout style of the repositioned smart labels.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.LabelCalloutStyle" /> object.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.AnovaResult">
      <summary>Represents the results of an ANOVA statistical test.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.AnovaResult.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.AnovaResult" /> class.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnovaResult.DegreeOfFreedomBetweenGroups">
      <summary>Gets the degree of freedom between groups.</summary>
      <returns>A double value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnovaResult.DegreeOfFreedomTotal">
      <summary>Gets the total degree of freedom.</summary>
      <returns>A double value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnovaResult.DegreeOfFreedomWithinGroups">
      <summary>Gets the degree of freedom within groups.</summary>
      <returns>A double value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnovaResult.FCriticalValue">
      <summary>Gets the F critical value.</summary>
      <returns>A double value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnovaResult.FRatio">
      <summary>Gets the F ratio.</summary>
      <returns>A double value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnovaResult.MeanSquareVarianceBetweenGroups">
      <summary>Gets the mean square variance between groups.</summary>
      <returns>A double value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnovaResult.MeanSquareVarianceWithinGroups">
      <summary>Gets the mean square variance within groups.</summary>
      <returns>A double value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnovaResult.SumOfSquaresBetweenGroups">
      <summary>Gets the sum of the squares between groups.</summary>
      <returns>A double value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnovaResult.SumOfSquaresTotal">
      <summary>Gets the total sum of the squares.</summary>
      <returns>A double value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AnovaResult.SumOfSquaresWithinGroups">
      <summary>Gets the sum of the squares within groups.</summary>
      <returns>A double value.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.AntiAliasingStyles">
      <summary>Specifies the anti-aliasing options for the chart.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.AntiAliasingStyles.None">
      <summary>Do not use anti-aliasing.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.AntiAliasingStyles.Text">
      <summary>Use anti-aliasing when drawing text.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.AntiAliasingStyles.Graphics">
      <summary>Use anti-aliasing when drawing graphics primitives such as circles or rectangles.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.AntiAliasingStyles.All">
      <summary>Use anti-aliasing for text and graphics.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.AreaAlignmentOrientations">
      <summary>Specifies the alignment orientation of a chart area.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.AreaAlignmentOrientations.None">
      <summary>Chart areas are not automatically aligned.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.AreaAlignmentOrientations.Vertical">
      <summary>Chart areas are aligned vertically.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.AreaAlignmentOrientations.Horizontal">
      <summary>Chart areas are aligned horizontally.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.AreaAlignmentOrientations.All">
      <summary>Chart areas are aligned horizontally and vertically.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.AreaAlignmentStyles">
      <summary>Specifies the alignment styles of chart areas.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.AreaAlignmentStyles.None">
      <summary>Chart areas are not automatically aligned.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.AreaAlignmentStyles.Position">
      <summary>Chart areas are aligned by the chart area position.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.AreaAlignmentStyles.PlotPosition">
      <summary>Chart areas are aligned by their inner plot position.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.AreaAlignmentStyles.AxesView">
      <summary>Chart areas are aligned by their data view.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.AreaAlignmentStyles.Cursor">
      <summary>Chart areas are aligned using their cursors.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.AreaAlignmentStyles.All">
      <summary>Chart areas are aligned using all values.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.ArrowAnnotation">
      <summary>Represents an arrow annotation.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ArrowAnnotation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.ArrowAnnotation" /> class.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ArrowAnnotation.AnchorAlignment">
      <summary>Gets or sets the position alignment of the annotation to the anchor point.</summary>
      <returns>A <see cref="T:System.Drawing.ContentAlignment" /> enumeration value that represents the alignment of the annotation to the anchor point.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ArrowAnnotation.AnnotationType">
      <summary>Gets the name of the annotation type. For internal use, should not be used.</summary>
      <returns>A string value that represents the name of the annotation type.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ArrowAnnotation.ArrowSize">
      <summary>Gets or sets an arrow size, in pixels.</summary>
      <returns>An integer value that represents arrow size—that is, its thickness—in pixels.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ArrowAnnotation.ArrowStyle">
      <summary>Gets or sets the arrow style.</summary>
      <returns>The <see cref="T:System.Windows.Forms.DataVisualization.Charting.ArrowStyle" /> of an annotation.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.ArrowStyle">
      <summary>Specifies styles for an arrow annotation. </summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ArrowStyle.Simple">
      <summary>A simple one-pointed arrow.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ArrowStyle.DoubleArrow">
      <summary>An arrow that points in two directions.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ArrowStyle.Tailed">
      <summary>An arrow with a tail.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.Axis">
      <summary>Provides methods and properties that manage axes in the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" /> control.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Axis.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Axis" /> class.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Axis.#ctor(System.Windows.Forms.DataVisualization.Charting.ChartArea,System.Windows.Forms.DataVisualization.Charting.AxisName)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Axis" /> class with the specified <paramref name="ChartArea" /> and <paramref name="axisTypeName" /> values.</summary>
      <param name="chartArea"></param>
      <param name="axisTypeName">The axis name.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Axis.ArrowStyle">
      <summary>Gets or sets the arrow style of a 2D axis; this style is not applied to 3D chart areas.</summary>
      <returns>An <see cref="T:System.Windows.Forms.DataVisualization.Charting.AxisArrowStyle" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Axis.AxisName">
      <summary>Gets the name of the axis, which can be either X, Y, X2 or Y2.</summary>
      <returns>An <see cref="T:System.Windows.Forms.DataVisualization.Charting.AxisName" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Axis.Crossing">
      <summary>Gets or sets the location at which an axis is crossed by its associated axis.</summary>
      <returns>A double value that represents where an axis is crossed by its associated axis. The default value is <see cref="F:System.Double.NaN" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Axis.CustomLabels">
      <summary>Gets a <see cref="T:System.Windows.Forms.DataVisualization.Charting.CustomLabelsCollection" /> object used to store <see cref="T:System.Windows.Forms.DataVisualization.Charting.CustomLabel" /> objects.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.CustomLabelsCollection" /> object.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Axis.Dispose(System.Boolean)">
      <summary>Releases unmanaged and, optionally, managed resources.</summary>
      <param name="disposing">True to release both unmanaged and managed resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Axis.Enabled">
      <summary>Gets or sets a value that indicates whether an axis is enabled.</summary>
      <returns>An <see cref="T:System.Windows.Forms.DataVisualization.Charting.AxisEnabled" /> enumeration value. The default value is <see cref="F:System.Windows.Forms.DataVisualization.Charting.AxisEnabled.Auto" />.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Axis.GetPosition(System.Double)">
      <summary>Converts an axis value to a relative position (0-100%). If an axis is logarithmic, the value is converted to a linear scale.</summary>
      <returns>A double value that represents the relative position (0-100%).</returns>
      <param name="axisValue">The axis value.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Axis.InterlacedColor">
      <summary>Gets or sets the color of interlaced strip lines.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> object that represents the color of interlaced strip lines.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Axis.Interval">
      <summary>Gets or sets the interval of an axis.</summary>
      <returns>A double value that represents the interval of an axis. The default value is "Auto", which is represented by a value of zero (0).</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Axis.IntervalAutoMode">
      <summary>Gets or sets a flag that determines if a fixed number of intervals is used on the axis, or if the number of intervals depends on the axis size.</summary>
      <returns>An <see cref="T:System.Windows.Forms.DataVisualization.Charting.IntervalAutoMode" /> enumeration value. The default value is <see cref="F:System.Windows.Forms.DataVisualization.Charting.IntervalAutoMode.FixedCount" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Axis.IntervalOffset">
      <summary>Gets or sets the interval offset of an axis.</summary>
      <returns>A double value that represents the interval offset of an axis. The default value is "Auto", which is represented by a value of zero (0).</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Axis.IntervalOffsetType">
      <summary>Gets or sets the interval offset type of an axis.</summary>
      <returns>The interval offset type of an axis. The default value is <see cref="F:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType.Auto" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Axis.IntervalType">
      <summary>Gets or sets the interval type of an axis.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType" /> that represents the interval type of an axis. The default value is <see cref="F:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType.Auto" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Axis.IsInterlaced">
      <summary>Gets or sets a flag that determines if interlaced strip lines are displayed for an axis.</summary>
      <returns>True if interlaced strip lines are displayed for an axis; otherwise, False.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Axis.IsLabelAutoFit">
      <summary>Gets or sets a flag that determines whether axis labels are automatically fitted.</summary>
      <returns>True if axis labels are automatically fitted; otherwise, False.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Axis.IsLogarithmic">
      <summary>Gets or sets a flag which indicates whether the axis is logarithmic. Zeros or negative data values are not allowed on logarithmic charts.</summary>
      <returns>True if the axis is logarithmic; otherwise, False.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Axis.IsMarginVisible">
      <summary>Gets or sets a flag that determines whether to add a margin to the axis. </summary>
      <returns>True if a space is added between the first or last data point and the border of chart area.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Axis.IsMarksNextToAxis">
      <summary>Gets or sets a flag that determines whether tick marks and axis labels move with an axis if the crossing point of an axis changes.</summary>
      <returns>True if tick marks and axis labels move with an axis when the crossing point of an axis changes; otherwise, False.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Axis.IsReversed">
      <summary>Gets or sets a flag which indicates whether the axis is reversed.</summary>
      <returns>True if the axis is reversed; otherwise, False.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Axis.IsStartedFromZero">
      <summary>Gets or sets a flag which indicates whether the minimum value of the axis will be automatically set to zero if all data point values are positive. If there are negative data point values, the minimum value of the data points will be used.</summary>
      <returns>True if the minimum value of the axis is automatically set to zero when all data point values are positive; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Axis.LabelAutoFitMaxFontSize">
      <summary>Gets or sets the maximum font size that can be used by the label auto-fitting algorithm.</summary>
      <returns>An integer value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Axis.LabelAutoFitMinFontSize">
      <summary>Gets or sets the minimum font size that can be used by the label auto-fitting algorithm.</summary>
      <returns>An integer value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Axis.LabelAutoFitStyle">
      <summary>Gets or sets the allowable label changes that can be made to enable the label to be fit along an axis.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.LabelAutoFitStyles" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Axis.LabelStyle">
      <summary>Gets or sets the <see cref="T:System.Windows.Forms.DataVisualization.Charting.LabelStyle" /> properties of an axis.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.LabelStyle" /> object, which defines the axis label style.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Axis.LineColor">
      <summary>Gets or sets the line color of an axis.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> object that represents the line color used to draw the axis. The default is <see cref="P:System.Drawing.Color.Black" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Axis.LineDashStyle">
      <summary>Gets or sets the line style of an axis.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartDashStyle" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Axis.LineWidth">
      <summary>Gets or sets the line width of an axis, in pixels.</summary>
      <returns>An integer value that represents the width of an axis line. The default value is one (1) pixel.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Axis.LogarithmBase">
      <summary>Gets or sets a value for the logarithm base for the logarithmic axis.</summary>
      <returns>A double value. The default value is base 10.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Axis.MajorGrid">
      <summary>Gets or sets a <see cref="T:System.Windows.Forms.DataVisualization.Charting.Grid" /> object used to set the major grid line properties for an axis.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.Grid" /> object used to get or set the major grid properties of an axis.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Axis.MajorTickMark">
      <summary>Gets or sets a <see cref="T:System.Windows.Forms.DataVisualization.Charting.TickMark" /> object used to set the major tick mark properties of an axis.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.TickMark" /> object used to set the properties of a major tick mark of an axis.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Axis.Maximum">
      <summary>Gets or sets the maximum value of an axis.</summary>
      <returns>A double value that represents the maximum value of an axis. The default value is <see cref="F:System.Double.NaN" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Axis.MaximumAutoSize">
      <summary>Gets or sets the maximum size of the axis, measured as a percentage of the chart area. This value is used by the automatic layout algorithm.</summary>
      <returns>A float value that represents the maximum size of the axis.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Axis.Minimum">
      <summary>Gets or sets the minimum value of an axis.</summary>
      <returns>A double value that represents the minimum value of an axis. The default value is <see cref="F:System.Double.NaN" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Axis.MinorGrid">
      <summary>Gets or sets a <see cref="T:System.Windows.Forms.DataVisualization.Charting.Grid" /> object used to specify the minor grid lines attributes of an axis.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.Grid" /> object used to get or set the attributes of the minor grid lines of an axis.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Axis.MinorTickMark">
      <summary>Gets or sets a <see cref="T:System.Windows.Forms.DataVisualization.Charting.TickMark" /> object used to set the minor tick mark properties of an axis.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.TickMark" /> object used for the minor tick mark properties of an axis.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Axis.Name">
      <summary>Gets or sets the name of the axis.</summary>
      <returns>A string value that represents the text name of the axis.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Axis.PixelPositionToValue(System.Double)">
      <summary>Converts an absolute pixel position along an axis to an axis value. This method only works in paint events.</summary>
      <returns>A double value that represents the axis value.</returns>
      <param name="position">The pixel position.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Axis.PositionToValue(System.Double)">
      <summary>Converts a relative coordinate along an axis to an axis value. This method only works in paint events.</summary>
      <returns>A double value that represents the axis value.</returns>
      <param name="position">The relative position (0-100%).</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Axis.RoundAxisValues">
      <summary>Automatically rounds axis values.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Axis.ScaleBreakStyle">
      <summary>Gets or sets the axis scale break style.</summary>
      <returns>An <see cref="T:System.Windows.Forms.DataVisualization.Charting.AxisScaleBreakStyle" /> object, which represents the scale break style of the chart axis.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Axis.ScaleView">
      <summary>Gets or sets the view of an axis.</summary>
      <returns>An <see cref="T:System.Windows.Forms.DataVisualization.Charting.AxisScaleView" /> object, which represents the scale view of an axis.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Axis.ScrollBar">
      <summary>Gets or sets an axis scrollbar.</summary>
      <returns>An <see cref="T:System.Windows.Forms.DataVisualization.Charting.AxisScrollbar" /> object, which represents the scrollbar of an axis.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Axis.StripLines">
      <summary>Gets a <see cref="T:System.Windows.Forms.DataVisualization.Charting.StripLinesCollection" /> collection object.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.StripLinesCollection" /> collection object, which stores all <see cref="T:System.Windows.Forms.DataVisualization.Charting.StripLine" /> objects for an axis.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Axis.TextOrientation">
      <summary>Gets or sets the orientation of the text in the axis title.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.TextOrientation" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Axis.Title">
      <summary>Gets or sets the title of the axis.</summary>
      <returns>A string value that represents the title of the axis.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Axis.TitleAlignment">
      <summary>Gets or sets the alignment of an axis title.</summary>
      <returns>A <see cref="T:System.Drawing.StringAlignment" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Axis.TitleFont">
      <summary>Gets or sets the title font properties of an axis.</summary>
      <returns>A <see cref="T:System.Drawing.Font" /> object used for the font properties of a title.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Axis.TitleForeColor">
      <summary>Gets or sets the text color of the axis title.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> structure. The default color is <see cref="P:System.Drawing.Color.Black" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Axis.ToolTip">
      <summary>Gets or sets the tooltip used for the axis.</summary>
      <returns>A string value.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Axis.ValueToPixelPosition(System.Double)">
      <summary>Converts an axis value to an absolute coordinate along an axis. Measured in pixels. This method only works in paint events.</summary>
      <returns>A double value that represents the pixel position.</returns>
      <param name="axisValue">The axis value.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Axis.ValueToPosition(System.Double)">
      <summary>Converts an axis value to its relative position (0-100%). If an axis has a logarithmic scale, the value is converted to a linear scale. This method only works in paint events.</summary>
      <returns>A double value that represents the relative position (0-100%).</returns>
      <param name="axisValue">The axis value.</param>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.AxisArrowStyle">
      <summary>An enumeration of axis arrow styles.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.AxisArrowStyle.None">
      <summary>No arrow is used for the relevant axis.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.AxisArrowStyle.Triangle">
      <summary>A triangular arrow is used for the relevant axis.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.AxisArrowStyle.SharpTriangle">
      <summary>A sharp triangular arrow is used for the relevant axis.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.AxisArrowStyle.Lines">
      <summary>A line-shaped arrow is used for the relevant axis.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.AxisEnabled">
      <summary>Specifies the state of an axis.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.AxisEnabled.Auto">
      <summary>The axis is only enabled if it used to plot a <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.AxisEnabled.True">
      <summary>The axis is always enabled.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.AxisEnabled.False">
      <summary>The axis is never enabled.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.AxisName">
      <summary>Specifies the name of an axis.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.AxisName.X">
      <summary>Primary X-axis.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.AxisName.Y">
      <summary>Primary Y-axis.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.AxisName.X2">
      <summary>Secondary X-axis.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.AxisName.Y2">
      <summary>Secondary Y-axis.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.AxisScaleBreakStyle">
      <summary>Represents a scale break on the Y-axis of the chart.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.AxisScaleBreakStyle.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.AxisScaleBreakStyle" /> class.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AxisScaleBreakStyle.BreakLineStyle">
      <summary>Gets or sets the style of the break line that will be used to draw the scale break.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.BreakLineStyle" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AxisScaleBreakStyle.CollapsibleSpaceThreshold">
      <summary>Gets or sets the threshold of space on the chart at which scale breaks are drawn.</summary>
      <returns>An integer value that specifies the threshold of space on the chart at which scale breaks are drawn.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AxisScaleBreakStyle.Enabled">
      <summary>Gets or sets a flag that indicates whether scale breaks are enabled.</summary>
      <returns>A Boolean value that specifies whether scale breaks are enabled.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AxisScaleBreakStyle.LineColor">
      <summary>Gets or sets the color of the scale break line.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value that represents the color of the scale break line.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AxisScaleBreakStyle.LineDashStyle">
      <summary>Gets or sets the style of the scale break line.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartDashStyle" /> value that represents the style of the scale break line.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AxisScaleBreakStyle.LineWidth">
      <summary>Gets or sets the width of the scale break line.</summary>
      <returns>An integer value that represents the width of the scale break line.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AxisScaleBreakStyle.MaxNumberOfBreaks">
      <summary>Gets or sets the maximum number of scale breaks to be displayed on the chart.</summary>
      <returns>An integer value that represents the maximum number of scale breaks to be displayed on the chart.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AxisScaleBreakStyle.Spacing">
      <summary>Gets or sets the spacing gap between the lines of the scale break. The spacing gap is represented as a percentage of the Y-axis.</summary>
      <returns>A double value that represents the spacing gap between the lines of the scale break.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AxisScaleBreakStyle.StartFromZero">
      <summary>Gets or sets a <see cref="T:System.Windows.Forms.DataVisualization.Charting.StartFromZero" /> enumeration value that indicates whether to start the scale break from zero.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.StartFromZero" /> enumeration value that indicates whether to start the scale break from zero.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.AxisScaleView">
      <summary>Represents a scaled view of the chart. </summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.AxisScaleView.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.AxisScaleView" /> class.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AxisScaleView.IsZoomed">
      <summary>Gets a flag that indicates whether the axis is zoomed in.</summary>
      <returns>True if the axis is zoomed in, otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AxisScaleView.MinSize">
      <summary>Gets or sets the minimum size of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.AxisScaleView" /> object.</summary>
      <returns>A double that represents the minimum size.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AxisScaleView.MinSizeType">
      <summary>Gets or sets the unit of measurement of the <see cref="P:System.Windows.Forms.DataVisualization.Charting.AxisScaleView.MinSize" /> property.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AxisScaleView.Position">
      <summary>Gets or sets the position of the scale view.</summary>
      <returns>A double that represents the position of the scale view.-</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.AxisScaleView.Scroll(System.DateTime)">
      <summary>Scrolls to a position along an axis specified by the <paramref name="newPosition" /> parameter, which is expressed as a <see cref="T:System.DateTime" /> value.</summary>
      <param name="newPosition">The new position.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.AxisScaleView.Scroll(System.Double)">
      <summary>Scrolls to a position along an axis specified by the <paramref name="newPosition" /> parameter.</summary>
      <param name="newPosition">The new position.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.AxisScaleView.Scroll(System.Windows.Forms.DataVisualization.Charting.ScrollType)">
      <summary>Scrolls along an axis according to the direction and size indicated by the <paramref name="scrollType" /> parameter.</summary>
      <param name="scrollType">The direction and size to scroll.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AxisScaleView.Size">
      <summary>Gets or sets the size of the scale view.</summary>
      <returns>A double that represents the size of the scale view.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AxisScaleView.SizeType">
      <summary>Gets or sets the unit of measurement for the <see cref="P:System.Windows.Forms.DataVisualization.Charting.AxisScaleView.Size" /> property.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AxisScaleView.SmallScrollMinSize">
      <summary>Gets or sets the minimum small scrolling size. Used only if the small scrolling size is not set.</summary>
      <returns>A double that represents the small scrolling size.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AxisScaleView.SmallScrollMinSizeType">
      <summary>Gets or sets the unit of measurement for the <see cref="P:System.Windows.Forms.DataVisualization.Charting.AxisScaleView.SmallScrollMinSize" /> property.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AxisScaleView.SmallScrollSize">
      <summary>Gets or sets the small scrolling size.</summary>
      <returns>A double value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AxisScaleView.SmallScrollSizeType">
      <summary>Gets or sets the unit of measurement for the <see cref="P:System.Windows.Forms.DataVisualization.Charting.AxisScaleView.SmallScrollMinSize" /> property.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AxisScaleView.ViewMaximum">
      <summary>Gets the maximum axis value of a data view.</summary>
      <returns>A double that represents the maximum axis value for the data view.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AxisScaleView.ViewMinimum">
      <summary>Gets the minimum axis value of a data view.</summary>
      <returns>A double that represents the minimum axis value for the data view.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.AxisScaleView.Zoom(System.Double,System.Double)">
      <summary>Sets a new axis data view and/or position based on the specified start and end values.</summary>
      <param name="viewStart">The new start position for the axis scale view.</param>
      <param name="viewEnd">The new end position for the axis scale view.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.AxisScaleView.Zoom(System.Double,System.Double,System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType)">
      <summary>Sets a new axis data view and/or position based on the specified start position, view size and unit of measurement.</summary>
      <param name="viewPosition">The new start position for the axis scale view.</param>
      <param name="viewSize">The new size for the axis scale view.</param>
      <param name="viewSizeType">The new unit of measurement of the size.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.AxisScaleView.Zoom(System.Double,System.Double,System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType,System.Boolean)">
      <summary>Sets a new axis data view and/or position based on the specified start position, view size, unit of measurement and save state.</summary>
      <param name="viewPosition">The new start position for the axis scale view.</param>
      <param name="viewSize">The new size for the axis scale view.</param>
      <param name="viewSizeType">The new unit of measurement of the size.</param>
      <param name="saveState">Indicates whether the current size and/or position must be saved.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AxisScaleView.Zoomable">
      <summary>Gets or sets a flag that indicates whether the zooming user interface is enabled.</summary>
      <returns>True if the zooming user interface is enabled; otherwise, False.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.AxisScaleView.ZoomReset">
      <summary>Resets one zoom operation by restoring the axis data view.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.AxisScaleView.ZoomReset(System.Int32)">
      <summary>Resets the specified number of zoom operations by restoring the axis data view.</summary>
      <param name="numberOfViews">Number of zoom operations to reset.</param>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.AxisScrollBar">
      <summary>Represents the scrollbar of a chart axis.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.AxisScrollBar.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.AxisScrollBar" /> class.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AxisScrollBar.Axis">
      <summary>Gets the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Axis" /> object that uses the scrollbar.</summary>
      <returns>An <see cref="T:System.Windows.Forms.DataVisualization.Charting.Axis" /> object.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AxisScrollBar.BackColor">
      <summary>Gets or sets the background color of a scrollbar.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value that represents the background color of the scrollbar. The default value is <see cref="F:System.Drawing.Color.Empty" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AxisScrollBar.ButtonColor">
      <summary>Gets or sets the color of the scrollbar buttons.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value that represents the color of the scrollbar buttons.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AxisScrollBar.ButtonStyle">
      <summary>Gets or sets the style of the scrollbar button.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ScrollBarButtonStyles" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AxisScrollBar.ChartArea">
      <summary>Gets the chart area that contains this scrollbar.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> object.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.AxisScrollBar.Dispose">
      <summary>Performs application-defined tasks that free, release, or reset unmanaged resources.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.AxisScrollBar.Dispose(System.Boolean)">
      <summary>Releases unmanaged and, optionally, managed resources</summary>
      <param name="disposing">True to release both unmanaged and managed resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AxisScrollBar.Enabled">
      <summary>Gets or sets a flag that determines whether a scrollbar is enabled.</summary>
      <returns>True if the scrollbar is enabled for an axis, false if the scrollbar is not enabled. The default value is true.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AxisScrollBar.IsPositionedInside">
      <summary>Gets or sets a flag that indicates whether scroll bar is positioned inside or outside the chart area.</summary>
      <returns>True if the scroll bar is positioned inside or outside the chart area; otherwise, False.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AxisScrollBar.IsVisible">
      <summary>Gets a flag that indicates whether the scrollbar is visible.</summary>
      <returns>True if the scrollbar is visible.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AxisScrollBar.LineColor">
      <summary>Gets or sets the line color of a scrollbar.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value that represents the line color of the scrollbar. The default value is <see cref="F:System.Drawing.Color.Empty" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.AxisScrollBar.Size">
      <summary>Gets or sets the width of a scrollbar, in pixels.</summary>
      <returns>A double value that represents the width of a scrollbar in pixels. The default value is 14 pixels. The value can range from 5 to 20 pixels.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.AxisType">
      <summary>Specifies the axis type for the X and Y-axes of a <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.AxisType.Primary">
      <summary>Designates an axis as the primary axis.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.AxisType.Secondary">
      <summary>Designates an axis as the secondary axis.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.Border3DAnnotation">
      <summary>Represents an annotation with a 3D border.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Border3DAnnotation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Border3DAnnotation" /> class.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Border3DAnnotation.AnnotationType">
      <summary>Gets or sets the annotation type name.</summary>
      <returns>The annotation type.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Border3DAnnotation.BorderSkin">
      <summary>Gets or sets the skin attributes of the 3D border.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.BorderSkin" /> object, which determines the attributes of the 3D border.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.BorderSkin">
      <summary>Represents the drawing properties of the 3D border skin.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.BorderSkin.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.BorderSkin" /> class.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.BorderSkin.BackColor">
      <summary>Gets or sets the background color of a skin frame.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.BorderSkin.BackGradientStyle">
      <summary>Gets or sets the background gradient style of a skin frame.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.GradientStyle" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.BorderSkin.BackHatchStyle">
      <summary>Gets or sets the background hatch style of a skin frame.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.BorderSkin.BackImage">
      <summary>Gets or sets the background image of a skin frame.</summary>
      <returns>A string value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.BorderSkin.BackImageAlignment">
      <summary>Gets or sets the background image alignment of a skin frame.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartImageAlignmentStyle" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.BorderSkin.BackImageTransparentColor">
      <summary>Gets or sets a color that is replaced with a transparent color when the background image of a border skin frame is drawn.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.BorderSkin.BackImageWrapMode">
      <summary>Gets or sets the drawing mode for the background image of a border skin frame.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartImageWrapMode" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.BorderSkin.BackSecondaryColor">
      <summary>Gets or sets the secondary background color of a border skin frame.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.BorderSkin.BorderColor">
      <summary>Gets or sets the border color of a skin frame.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.BorderSkin.BorderDashStyle">
      <summary>Gets or sets the style of the border line of a border skin frame.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartDashStyle" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.BorderSkin.BorderWidth">
      <summary>Gets or sets the width of the border line of a border skin frame.</summary>
      <returns>An integer value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.BorderSkin.PageColor">
      <summary>Gets or sets the page color of a border skin.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.BorderSkin.SkinStyle">
      <summary>Gets or sets the style of a border skin.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.BorderSkinStyle" /> enumeration value.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.BorderSkinStyle">
      <summary>Specifies a style for the border skin of a chart.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.BorderSkinStyle.None">
      <summary>No border skin is used.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.BorderSkinStyle.Emboss">
      <summary>Use an embossed border skin.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.BorderSkinStyle.Raised">
      <summary>Use a raised border skin.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.BorderSkinStyle.Sunken">
      <summary>Use a sunken border skin.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.BorderSkinStyle.FrameThin1">
      <summary>Use a thin border skin with rounded corners.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.BorderSkinStyle.FrameThin2">
      <summary>Use a thin border skin with rounded top corners.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.BorderSkinStyle.FrameThin3">
      <summary>Use a thin border skin with square corners.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.BorderSkinStyle.FrameThin4">
      <summary>Use a thin border skin with square outside corners and rounded inside corners.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.BorderSkinStyle.FrameThin5">
      <summary>Use a thin border skin with rounded corners and screws.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.BorderSkinStyle.FrameThin6">
      <summary>Use a thin border skin with square inside corners and rounded outside corners.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.BorderSkinStyle.FrameTitle1">
      <summary>Use a border skin with rounded corners. </summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.BorderSkinStyle.FrameTitle2">
      <summary>Use a border skin with rounded top corners. </summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.BorderSkinStyle.FrameTitle3">
      <summary>Use a border skin with square corners. </summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.BorderSkinStyle.FrameTitle4">
      <summary>Use a border skin with rounded inside corners and square outside corners. </summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.BorderSkinStyle.FrameTitle5">
      <summary>Use a border skin with rounded corners and screws. </summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.BorderSkinStyle.FrameTitle6">
      <summary>Use a border skin with rounded outside corners and square inside corners. </summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.BorderSkinStyle.FrameTitle7">
      <summary>Use a border skin with rounded corners. No border on the right side. </summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.BorderSkinStyle.FrameTitle8">
      <summary>Use a border skin with rounded corners on top and bottom sides only. </summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.BreakLineStyle">
      <summary>Specifies line styles for axis scale breaks.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.BreakLineStyle.None">
      <summary>Scale break is not displayed.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.BreakLineStyle.Straight">
      <summary>Scale break is displayed as a straight line.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.BreakLineStyle.Wave">
      <summary>Scale break is displayed as a wavy line.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.BreakLineStyle.Ragged">
      <summary>Scale break is displayed as a ragged line.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.CalloutAnnotation">
      <summary>Represents a callout annotation.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.CalloutAnnotation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.CalloutAnnotation" /> class.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.CalloutAnnotation.AnchorAlignment">
      <summary>Gets or sets the annotation position alignment to the anchor point.</summary>
      <returns>A <see cref="T:System.Drawing.ContentAlignment" /> value that represents the alignment of the annotation to the anchor point.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.CalloutAnnotation.AnchorOffsetX">
      <summary>Gets or sets the offset that the X-position of the annotation has from the anchor point.</summary>
      <returns>A double value that represents the offset of the annotation's X-position from the anchor point.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.CalloutAnnotation.AnchorOffsetY">
      <summary>Gets or sets the offset that the Y-position of the annotation has from the anchor point.</summary>
      <returns>A double value that represents the offset of the annotation's Y-position from the anchor point.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.CalloutAnnotation.AnnotationType">
      <summary>Gets or sets the annotation type name. For internal use, should not be used.</summary>
      <returns>The annotation type.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.CalloutAnnotation.BackColor">
      <summary>Gets or sets the background color of the annotation.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> enumeration value used for the background of an annotation.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.CalloutAnnotation.BackGradientStyle">
      <summary>Gets or sets the annotation background gradient style.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.GradientStyle" /> enumeration value used to draw the annotation background.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.CalloutAnnotation.BackHatchStyle">
      <summary>Gets or sets the background hatch style of the annotation.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle" /> value used to draw the annotation background.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.CalloutAnnotation.BackSecondaryColor">
      <summary>Gets or sets the secondary color for the annotation background.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> enumeration value used in conjunction with a primary color to draw the annotation background with hatching or gradient fill.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.CalloutAnnotation.CalloutAnchorCap">
      <summary>Gets or sets the style of the callout line anchor cap.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.LineAnchorCapStyle" /> enumeration value that represents the style to use for a callout line anchor cap.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.CalloutAnnotation.CalloutStyle">
      <summary>Gets or sets the annotation callout style.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.CalloutStyle" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.CalloutAnnotation.LineColor">
      <summary>Gets or sets the annotation line color.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value used to draw the annotation line.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.CalloutAnnotation.LineDashStyle">
      <summary>Gets or sets the annotation line style.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartDashStyle" /> enumeration value used to draw the annotation line.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.CalloutAnnotation.LineWidth">
      <summary>Gets or sets the line width of the annotation.</summary>
      <returns>An integer value that represents the annotation line width, in pixels.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.CalloutStyle">
      <summary>Represents the available callout styles. Applicable only to callout annotations.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.CalloutStyle.SimpleLine">
      <summary>Callout text is underlined and a line points to the anchor point.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.CalloutStyle.Borderline">
      <summary>A border is drawn around the callout text and a line points to the anchor point.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.CalloutStyle.Cloud">
      <summary>Callout text is inside the cloud and smaller clouds point to the anchor point.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.CalloutStyle.Rectangle">
      <summary>A rectangle is drawn around the callout text, which is connected to the anchor point.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.CalloutStyle.RoundedRectangle">
      <summary>A rounded rectangle is drawn around the callout text, which is connected to the anchor point.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.CalloutStyle.Ellipse">
      <summary>An ellipse is drawn around the callout text, which is connected to the anchor point.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.CalloutStyle.Perspective">
      <summary>A perspective rectangle is drawn around the callout text, which is connected to the anchor point.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.Chart">
      <summary>Serves as the root class of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" /> control.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Chart.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" /> class.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Chart.AlignDataPointsByAxisLabel">
      <summary>Aligns data points along the X axis using their axis labels. Applicable when multiple series are indexed and their X-values are strings.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Chart.AlignDataPointsByAxisLabel(System.String)">
      <summary>Aligns data points from different series along the X axis using their axis labels. The specified series in the chart are aligned using an ascending sort order.</summary>
      <param name="series">A comma-separated list of series that will have their data points aligned to the X axis using the data point axis labels.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Chart.AlignDataPointsByAxisLabel(System.String,System.Windows.Forms.DataVisualization.Charting.PointSortOrder)">
      <summary>Aligns data points using their axis labels.</summary>
      <param name="series">A comma-separated list of series that should be aligned by axis label.</param>
      <param name="sortingOrder">A <see cref="T:System.Windows.Forms.DataVisualization.Charting.PointSortOrder" /> enumeration value that determines if ascending or descending sort order is used on axis labels, which in turn determines the order by which points that previously occupied the same axis space are displayed.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Chart.AlignDataPointsByAxisLabel(System.Windows.Forms.DataVisualization.Charting.PointSortOrder)">
      <summary>Aligns data points using their axis labels. All series in the chart are aligned, using the specified sort order.</summary>
      <param name="sortingOrder">A <see cref="T:System.Windows.Forms.DataVisualization.Charting.PointSortOrder" /> object that indicates if ascending or descending sort order is used on axis labels, which in turn determines the order by which points that previously occupied the same axis space are displayed.</param>
    </member>
    <member name="E:System.Windows.Forms.DataVisualization.Charting.Chart.AnnotationPlaced">
      <summary>Occurs when the end-user places an annotation on the chart.</summary>
    </member>
    <member name="E:System.Windows.Forms.DataVisualization.Charting.Chart.AnnotationPositionChanged">
      <summary>Occurs when the annotation position is changed.</summary>
    </member>
    <member name="E:System.Windows.Forms.DataVisualization.Charting.Chart.AnnotationPositionChanging">
      <summary>Occurs when the annotation position is about to change.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Chart.Annotations">
      <summary>Stores the chart annotations.</summary>
      <returns>An <see cref="T:System.Windows.Forms.DataVisualization.Charting.AnnotationCollection" /> object that is used to store chart annotations.</returns>
    </member>
    <member name="E:System.Windows.Forms.DataVisualization.Charting.Chart.AnnotationSelectionChanged">
      <summary>Occurs when a selection of the annotation is changed.</summary>
    </member>
    <member name="E:System.Windows.Forms.DataVisualization.Charting.Chart.AnnotationTextChanged">
      <summary>Occurs when the annotation text is changed.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Chart.AntiAliasing">
      <summary>Gets or sets a value that determines whether anti-aliasing is used when text and graphics are drawn.</summary>
      <returns>An <see cref="T:System.Windows.Forms.DataVisualization.Charting.AntiAliasingStyles" /> enumeration value.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Chart.ApplyPaletteColors">
      <summary>Sets the automatically assigned series and data point colors, to allow programmatic access at run time.</summary>
    </member>
    <member name="E:System.Windows.Forms.DataVisualization.Charting.Chart.AxisScrollBarClicked">
      <summary>Occurs when the axis scroll bar is clicked by the end-user.</summary>
    </member>
    <member name="E:System.Windows.Forms.DataVisualization.Charting.Chart.AxisViewChanged">
      <summary>Called when the axis scale view position or size is changed.</summary>
    </member>
    <member name="E:System.Windows.Forms.DataVisualization.Charting.Chart.AxisViewChanging">
      <summary>Occurs when the axis scale view position or size is about to change.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Chart.BackColor">
      <summary>Gets or sets the background color of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" /> object.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value. The default color is <see cref="System.Drawing.Color.White" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Chart.BackGradientStyle">
      <summary>Gets or sets the orientation for the background gradient of a <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" /> control. Also determines whether a gradient is used.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.GradientStyle" /> enumeration. The default value is <see cref="F:System.Windows.Forms.DataVisualization.Charting.GradientStyle.None" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Chart.BackgroundImage">
      <summary>The <see cref="P:System.Windows.Forms.DataVisualization.Charting.Chart.BackgroundImage" /> property is not used. Use the <see cref="P:System.Windows.Forms.DataVisualization.Charting.Chart.BackImage" /> property instead.</summary>
      <returns>An <see cref="T:System.Drawing.Image" /> object.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Chart.BackHatchStyle">
      <summary>Gets or sets the hatching style of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" /> control. </summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle" /> enumeration. The default value is <see cref="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.None" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Chart.BackImage">
      <summary>Gets or sets the background image of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" /> control.</summary>
      <returns>A string value that represents the URL of an image file. The default value is an empty string.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Chart.BackImageAlignment">
      <summary>Gets or sets the background image alignment used for the <see cref="F:System.Windows.Forms.DataVisualization.Charting.ChartImageWrapMode.Unscaled" /> drawing mode.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartImageAlignmentStyle" /> enumeration value. The default value is <see cref="F:System.Windows.Forms.DataVisualization.Charting.ChartImageAlignmentStyle.TopLeft" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Chart.BackImageTransparentColor">
      <summary>Gets or sets the color of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" /> control that will be displayed as transparent.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value that will be displayed as transparent when the chart image is drawn. The default value is <see cref="F:System.Drawing.Color.Empty" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Chart.BackImageWrapMode">
      <summary>Gets or sets the drawing mode for the background image of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" /> control.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartImageWrapMode" /> enumeration value. The default value is <see cref="F:System.Windows.Forms.DataVisualization.Charting.ChartImageWrapMode.Tile" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Chart.BackSecondaryColor">
      <summary>Gets or sets the secondary color of the chart background.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value. The default value is <see cref="F:System.Drawing.Color.Empty" />.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Chart.BeginInit">
      <summary>Signals to the object that initialization is starting.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Chart.BorderColor">
      <summary>Gets or sets the color of the chart border.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Chart.BorderDashStyle">
      <summary>Gets or sets the style of the border.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartDashStyle" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Chart.BorderlineColor">
      <summary>Gets or sets the color of the border line.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Chart.BorderlineDashStyle">
      <summary>Gets or sets the style of the border line.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartDashStyle" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Chart.BorderlineWidth">
      <summary>Gets or sets the width of the border line.</summary>
      <returns>An integer value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Chart.BorderSkin">
      <summary>Gets or sets a <see cref="T:System.Windows.Forms.DataVisualization.Charting.BorderSkin" /> object, which provides border skin functionality for the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" /> control.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.BorderSkin" /> object.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Chart.BorderWidth">
      <summary>Gets or set s the width of the chart border.</summary>
      <returns>An integer value that determines the border width, in pixels, of the chart.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Chart.BuildNumber">
      <summary>Gets the build number of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" /> control.</summary>
      <returns>A string that represents the build number.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Chart.ChartAreas">
      <summary>Gets a read-only <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartAreaCollection" /> object that is used to store <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> objects.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartAreaCollection" /> object.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Chart.CreateAccessibilityInstance">
      <summary>Overridden to return the custom <see cref="T:System.Windows.Forms.AccessibleObject" /> for the entire chart.</summary>
      <returns>The <see cref="T:System.Windows.Forms.AccessibleObject" /> for the chart.</returns>
    </member>
    <member name="E:System.Windows.Forms.DataVisualization.Charting.Chart.CursorPositionChanged">
      <summary>Occurs when the cursor position is changed.</summary>
    </member>
    <member name="E:System.Windows.Forms.DataVisualization.Charting.Chart.CursorPositionChanging">
      <summary>Occurs when the cursor position is about to change.</summary>
    </member>
    <member name="E:System.Windows.Forms.DataVisualization.Charting.Chart.Customize">
      <summary>Occurs just before the chart image is drawn. Use this event to customize the chart picture.</summary>
    </member>
    <member name="E:System.Windows.Forms.DataVisualization.Charting.Chart.CustomizeLegend">
      <summary>Occurs when the chart legend must be customized.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Chart.DataBind">
      <summary>Data binds the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" /> control to a data source.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Chart.DataBindCrossTable(System.Collections.IEnumerable,System.String,System.String,System.String,System.String)">
      <summary>Data binds a chart to the table, with one series created per unique value in a given column. </summary>
      <param name="dataSource">The data source.</param>
      <param name="seriesGroupByField">The name of the field used to group data into the series.</param>
      <param name="xField">Name of the field for X values.</param>
      <param name="yFields">A comma-separated list of name(s) of the field(s) for Y value(s).</param>
      <param name="otherFields">Other data point properties that can be bound.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Chart.DataBindCrossTable(System.Collections.IEnumerable,System.String,System.String,System.String,System.String,System.Windows.Forms.DataVisualization.Charting.PointSortOrder)">
      <summary>Data binds a chart to the table, with one series created per unique value in a given column. </summary>
      <param name="dataSource">The data source.</param>
      <param name="seriesGroupByField">The name of the field used to group data into the series.</param>
      <param name="xField">Name of the field for X values.</param>
      <param name="yFields">A comma-separated list of name(s) of the field(s) for Y value(s).</param>
      <param name="otherFields">Other data point properties that can be bound.</param>
      <param name="sortingOrder">Series will be sorted by group field values in the specified order.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Chart.DataBindTable(System.Collections.IEnumerable)">
      <summary>Automatically creates and binds series data to the specified data table.</summary>
      <param name="dataSource">The data source, which can be any <see cref="T:System.Collections.IEnumerable" /> object.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Chart.DataBindTable(System.Collections.IEnumerable,System.String)">
      <summary>Automatically creates and binds series data to the specified data table, and optionally populates X-values.</summary>
      <param name="dataSource">The data source, which can be any <see cref="T:System.Collections.IEnumerable" /> object.</param>
      <param name="xField">The name of the field used for the series X-values.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Chart.DataManipulator">
      <summary>Gets a <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataManipulator" /> object that provides methods and properties that handle data.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataManipulator" /> object.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Chart.DataSource">
      <summary>Gets or sets the data source for the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" /> object.</summary>
      <returns>An <see cref="T:System.Object" /> that represents the data source for the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" /> object.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Chart.DefaultSize">
      <summary>Gets the default control size.</summary>
      <returns>A <see cref="T:System.Drawing.Size" /> object.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Chart.Dispose(System.Boolean)">
      <summary>Releases unmanaged and, optionally, managed resources.</summary>
      <param name="disposing">True to release both unmanaged and managed resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Chart.EndInit">
      <summary>Signals to the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" /> object that initialization is complete.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Chart.Font">
      <summary>Gets the font properties of the control.</summary>
      <returns>A <see cref="T:System.Drawing.Font" /> object.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Chart.ForeColor">
      <summary>Gets or sets the text color of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" /> control.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value.</returns>
    </member>
    <member name="E:System.Windows.Forms.DataVisualization.Charting.Chart.FormatNumber">
      <summary>Occurs when a numeric value has to be converted to a string.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Chart.GetChartElementOutline(System.Object,System.Windows.Forms.DataVisualization.Charting.ChartElementType)">
      <summary>Returns the chart element outline.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartElementOutline" /> object that contains:An array of points in absolute coordinates that can be used as outline markers around this chart element. A <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> object for drawing an outline around this chart element.</returns>
      <param name="element">The <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" /> object.</param>
      <param name="elementType">The type of the element.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Chart.GetService(System.Type)">
      <summary>Returns the requested chart service.</summary>
      <returns>An <see cref="T:System.Object" /> that represents the service type, or null if the service cannot be found.</returns>
      <param name="serviceType">The type of requested chart service.</param>
    </member>
    <member name="E:System.Windows.Forms.DataVisualization.Charting.Chart.GetToolTipText">
      <summary>Occurs before showing the tooltip to get the tooltip text.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Chart.HitTest(System.Int32,System.Int32)">
      <summary>Determines the chart element, if any, that is located at a point defined by the given X and Y coordinates.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.HitTestResult" /> object, which provides information concerning the chart element, if any, that is at the specified location.</returns>
      <param name="x">The X-coordinate value of the point the user clicked.</param>
      <param name="y">The Y-coordinate value of the point the user clicked.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Chart.HitTest(System.Int32,System.Int32,System.Boolean)">
      <summary>Determines the chart element, if any, that is located at a point defined by given X and Y coordinates. Transparent elements can optionally be ignored.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.HitTestResult" /> object, which provides information concerning the chart element, if any, that is at the specified location.</returns>
      <param name="x">The X-coordinate value of the point the user clicked on.</param>
      <param name="y">The Y-coordinate value of the point the user clicked on.</param>
      <param name="ignoreTransparent">A flag that determines if transparent elements are ignored.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Chart.HitTest(System.Int32,System.Int32,System.Boolean,System.Windows.Forms.DataVisualization.Charting.ChartElementType[])">
      <summary>Determines whether a chart element that is one of the specified types is located at a point defined by the given X and Y coordinates.</summary>
      <returns>An array of T<see cref=":System.Windows.Forms.DataVisualization.Charting.HitTestResult" /> objects that provides information about the chart element, if any, found at the specified location. The array contains at least one element, which can be <see cref="F:System.Windows.Forms.DataVisualization.Charting.ChartElementType.Nothing" />. The objects in the result are sorted from the top to the bottom of different layers of control.</returns>
      <param name="x">The X-coordinate for the specified data point.</param>
      <param name="y">The Y-coordinate for the specified data point.</param>
      <param name="ignoreTransparent">A flag that indicates that transparent elements should be ignored.</param>
      <param name="requestedElement">An array of <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartElementType" /> objects that specify the types to test for, in order to filter the result. If omitted, checking for element types will be ignored and all element types will be valid.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Chart.HitTest(System.Int32,System.Int32,System.Windows.Forms.DataVisualization.Charting.ChartElementType)">
      <summary>Determines if a chart element of a given type is located at a point defined by given X and Y coordinates.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.HitTestResult" /> object, which provides information concerning the chart element, if any, that is at the specified location.</returns>
      <param name="x">The X-coordinate value of the point the user clicked on.</param>
      <param name="y">The Y-coordinate value of the point the user clicked on.</param>
      <param name="requestedElement">A flag that determines the chart element type to be tested.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Chart.Images">
      <summary>Gets a <see cref="T:System.Windows.Forms.DataVisualization.Charting.NamedImagesCollection" /> object that stores <see cref="T:System.Windows.Forms.DataVisualization.Charting.NamedImage" /> objects for the chart.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.NamedImagesCollection" /> object.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Chart.Invalidate">
      <summary>Invalidates the entire surface of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" /> and causes the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" /> control to be redrawn.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Chart.Invalidate(System.Drawing.Rectangle)">
      <summary>Invalidates the specified area of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" /> control. </summary>
      <param name="rectangle">A <see cref="T:System.Drawing.Rectangle" /> object.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Chart.IsSoftShadows">
      <summary>Gets or sets a flag that determines if a smooth gradient is applied when shadows are drawn.</summary>
      <returns>True if shadows are drawn using smoothing, false if they are not. The default value is true.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Chart.Legends">
      <summary>Stores all <see cref="T:System.Windows.Forms.DataVisualization.Charting.Legend" /> objects used by the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" /> control.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendCollection" /> object.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Chart.LoadTemplate(System.IO.Stream)">
      <summary>Loads a template into the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" /> control from an image stream.</summary>
      <param name="stream">The stream to load from.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Chart.LoadTemplate(System.String)">
      <summary>Loads a template with the specified filename from the disk.</summary>
      <param name="name">The file name of the template to load. You must specify the full path of the template to be loaded from the disk.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Chart.OnCursorChanged(System.EventArgs)">
      <summary>Overrides the <see cref="M:System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)" /> method and raises the <see cref="E:System.Windows.Forms.DataVisualization.Charting.Chart.CursorPositionChanging" /> and <see cref="E:System.Windows.Forms.DataVisualization.Charting.Chart.CursorPositionChanged" /> events.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Chart.OnCustomize">
      <summary>Raises the <see cref="E:System.Windows.Forms.DataVisualization.Charting.Chart.Customize" /> event.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Chart.OnCustomizeLegend(System.Windows.Forms.DataVisualization.Charting.LegendItemsCollection,System.String)">
      <summary>Raises the <see cref="E:System.Windows.Forms.DataVisualization.Charting.Chart.CustomizeLegend" /> event.</summary>
      <param name="legendItems">A <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendItemsCollection" /> object.</param>
      <param name="legendName">The name of the legend.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Chart.OnDoubleClick(System.EventArgs)">
      <summary>Overrides the <see cref="M:System.Windows.Forms.Control.OnDoubleClick(System.EventArgs)" /> method.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event arguments.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Chart.OnFormatNumber(System.Windows.Forms.DataVisualization.Charting.FormatNumberEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Forms.DataVisualization.Charting.Chart.FormatNumber" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.DataVisualization.Charting.FormatNumberEventArgs" /> object that contains the event arguments.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Chart.OnLocationChanged(System.EventArgs)">
      <summary>Overrides the <see cref="M:System.Windows.Forms.Control.OnLocationChanged(System.EventArgs)" /> method.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event arguments.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Chart.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
      <summary>Overrides the <see cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)" /> method.</summary>
      <param name="e">A <see cref="T:System.MouseEventArgs" /> object that contains the event arguments.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Chart.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
      <summary>Overrides the <see cref="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)" /> method.</summary>
      <param name="e">A <see cref="T:System.MouseEventArgs" /> object that contains the event arguments.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Chart.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
      <summary>Overrides the <see cref="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)" /> method.</summary>
      <param name="e">A <see cref="T:System.MouseEventArgs" /> object that contains the event arguments.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Chart.OnPaint(System.Windows.Forms.PaintEventArgs)">
      <summary>Overrides the <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)" /> method.</summary>
      <param name="e">A <see cref="T:System.PaintEventArgs" /> object that contains the event arguments.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Chart.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
      <summary>Overrides the <see cref="M:System.Windows.Forms.Control.OnPaintBackground(System.Windows.Forms.PaintEventArgs)" /> method.</summary>
      <param name="pevent">A <see cref="T:System.PaintEventArgs" /> object that contains the event arguments.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Chart.OnPostPaint(System.Windows.Forms.DataVisualization.Charting.ChartPaintEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Forms.DataVisualization.Charting.Chart.PostPaint" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartPaintEventArgs" /> object that contains the event arguments.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Chart.OnPrePaint(System.Windows.Forms.DataVisualization.Charting.ChartPaintEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Forms.DataVisualization.Charting.Chart.PrePaint" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartPaintEventArgs" /> object that contains the event arguments.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Chart.OnResize(System.EventArgs)">
      <summary>Overrides the <see cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" /> method.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event arguments.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Chart.OnRightToLeftChanged(System.EventArgs)">
      <summary>Overrides the <see cref="M:System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)" /> method.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event arguments.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Chart.OnSystemColorsChanged(System.EventArgs)">
      <summary>verrides the <see cref="M:System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)" /> method.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Chart.Palette">
      <summary>Gets or sets the palette for the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" /> control.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartColorPalette" /> enumeration value that determines the palette to be used.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Chart.PaletteCustomColors">
      <summary>Gets or sets an array of custom palette colors.</summary>
      <returns>An array of <see cref="T:System.Drawing.Color" /> objects that represent the set of colors used for series on the chart.</returns>
    </member>
    <member name="E:System.Windows.Forms.DataVisualization.Charting.Chart.PostPaint">
      <summary>Occurs when the chart element is painted.</summary>
    </member>
    <member name="E:System.Windows.Forms.DataVisualization.Charting.Chart.PrePaint">
      <summary>Occurs when the chart element background is painted.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Chart.Printing">
      <summary>Gets a read-only <see cref="T:System.Windows.Forms.DataVisualization.Charting.PrintingManager" /> object used for printing a chart.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.PrintingManager" /> object.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Chart.Refresh">
      <summary>Forces the control to invalidate its client area and immediately redraw itself and any child controls.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Chart.RenderingDpiX">
      <summary>Gets or sets the horizontal resolution of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" /> renderer.</summary>
      <returns>A double value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Chart.RenderingDpiY">
      <summary>Gets or sets the ertical resolution of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" /> renderer.</summary>
      <returns>A double value.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Chart.ResetAutoValues">
      <summary>Resets automatically calculated chart property values to "Auto".</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Chart.SaveImage(System.IO.Stream,System.Drawing.Imaging.ImageFormat)">
      <summary>Saves the image to the specifed stream.</summary>
      <param name="imageStream">The image stream.</param>
      <param name="format">The image format.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Chart.SaveImage(System.IO.Stream,System.Windows.Forms.DataVisualization.Charting.ChartImageFormat)">
      <summary>Saves the chart image to the specified stream. </summary>
      <param name="imageStream">The image stream.</param>
      <param name="format">The chart image format.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Chart.SaveImage(System.String,System.Drawing.Imaging.ImageFormat)">
      <summary>Saves an image to the specified file.</summary>
      <param name="imageFileName">The image file name</param>
      <param name="format">The image format.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Chart.SaveImage(System.String,System.Windows.Forms.DataVisualization.Charting.ChartImageFormat)">
      <summary>Saves the chart image to the specified file.</summary>
      <param name="imageFileName">The image file name</param>
      <param name="format">The chart image format.</param>
    </member>
    <member name="E:System.Windows.Forms.DataVisualization.Charting.Chart.SelectionRangeChanged">
      <summary>Occurs when the selection start position or end position is changed.</summary>
    </member>
    <member name="E:System.Windows.Forms.DataVisualization.Charting.Chart.SelectionRangeChanging">
      <summary>Occurs when the selection start or end position is about to change.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Chart.Serializer">
      <summary>Gets a <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartSerializer" /> object that is used for chart serialization.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartSerializer" /> object.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Chart.Series">
      <summary>Gets a <see cref="T:System.Windows.Forms.DataVisualization.Charting.SeriesCollection" /> object.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.SeriesCollection" /> object, which contains <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> objects.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Chart.Size">
      <summary>Gets or sets the size of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" /> control.</summary>
      <returns>A <see cref="T:System.Drawing.Size" /> object that represents the size of the control.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Chart.SuppressExceptions">
      <summary>Gets or sets a flag that determines whether non-critical exceptions should be suppressed.</summary>
      <returns>True if non-critical exceptions should be suppressed, otherwise false. The default value is false.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Chart.TextAntiAliasingQuality">
      <summary>Gets or sets the <see cref="T:System.Windows.Forms.DataVisualization.Charting.TextAntiAliasingQuality" /> type to use when applying anti-aliasing to text.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.TextAntiAliasingQuality" /> enumeration value. The default value is <see cref="F:System.Windows.Forms.DataVisualization.Charting.TextAntiAliasingQuality.High" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Chart.Titles">
      <summary>Stores all <see cref="T:System.Windows.Forms.DataVisualization.Charting.Title" /> objects used by the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" /> control.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.TitleCollection" /> object.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Chart.UpdateAnnotations">
      <summary>Updates the annotations in the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" /> control.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Chart.UpdateCursor">
      <summary>Updates the cursor in the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" /> control.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.ChartArea">
      <summary>Represents a chart area on the chart image.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartArea.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> class.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartArea.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> class with the specified chart area name.</summary>
      <param name="name">The name for the new <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> object.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.AlignmentOrientation">
      <summary>Gets or sets the alignment orientation of a chart area.</summary>
      <returns>An <see cref="T:System.Windows.Forms.DataVisualization.Charting.AreaAlignmentOrientations" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.AlignmentStyle">
      <summary>Gets or sets the alignment style of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" />.</summary>
      <returns>An <see cref="T:System.Windows.Forms.DataVisualization.Charting.AreaAlignmentStyles" /> enumeration value that can represent either a single value or the bitwise-OR of multiple values that define the alignment to use.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.AlignWithChartArea">
      <summary>Gets or sets the name of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> object to which this chart area should be aligned.</summary>
      <returns>A string value that represents the name of a <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> object to which this chart area should be aligned. The default is the empty string.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.Area3DStyle">
      <summary>Gets or sets a <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea3DStyle" /> object, which is used to implement 3D for all series in a chart area.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea3DStyle" /> object that implements 3D for all series plotted in a chart area.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.Axes">
      <summary>Gets or sets an array that represents all axes for a chart area.</summary>
      <returns>An array of <see cref="T:System.Windows.Forms.DataVisualization.Charting.Axis" /> objects that represents all axes used by a chart area.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.AxisX">
      <summary>Gets or sets an <see cref="T:System.Windows.Forms.DataVisualization.Charting.Axis" /> object that represents the primary X-axis.</summary>
      <returns>An <see cref="T:System.Windows.Forms.DataVisualization.Charting.Axis" /> object that represents the primary X-axis.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.AxisX2">
      <summary>Gets or sets an <see cref="T:System.Windows.Forms.DataVisualization.Charting.Axis" /> object that represents the secondary X-axis.</summary>
      <returns>An <see cref="T:System.Windows.Forms.DataVisualization.Charting.Axis" /> object that represents the secondary X-axis.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.AxisY">
      <summary>Gets or sets an <see cref="T:System.Windows.Forms.DataVisualization.Charting.Axis" /> object that represents the primary Y-axis.</summary>
      <returns>An <see cref="T:System.Windows.Forms.DataVisualization.Charting.Axis" /> object that represents the primary Y-axis.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.AxisY2">
      <summary>Gets or sets an <see cref="T:System.Windows.Forms.DataVisualization.Charting.Axis" /> object that represents the secondary Y-axis.</summary>
      <returns>An <see cref="T:System.Windows.Forms.DataVisualization.Charting.Axis" /> object that represents the secondary Y-axis.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.BackColor">
      <summary>Gets or sets the background color of a <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> object.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value. The default color is <see cref="T:System.Drawing.Color.White" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.BackGradientStyle">
      <summary>Gets or sets the orientation for the background gradient of a chart area, and also determines whether or not a gradient is used. </summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.GradientStyle" /> enumeration. The default value is <see cref="F:System.Windows.Forms.DataVisualization.Charting.GradientStyle.None" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.BackHatchStyle">
      <summary>Gets or sets the hatching style of a <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> object.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle" /> enumeration. The default value is <see cref="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.None" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.BackImage">
      <summary>Gets or sets the background image of a <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> object.</summary>
      <returns>A string value that represents the URL of an image file. The default is an empty string.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.BackImageAlignment">
      <summary>Gets or sets the alignment of a <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> background image.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartImageAlignmentStyle" /> enumeration value. The default value is <see cref="F:System.Windows.Forms.DataVisualization.Charting.ChartImageAlignmentStyle.TopLeft" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.BackImageTransparentColor">
      <summary>Gets or sets the color of a <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> object background image that will be drawn as transparent.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value. The default value is <see cref="F:System.Drawing.Color.Empty" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.BackImageWrapMode">
      <summary>Gets or sets the drawing mode for the background image of a <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> object.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartImageWrapMode" /> enumeration value. The default value is <see cref="F:System.Windows.Forms.DataVisualization.Charting.ChartImageWrapMode.Tile" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.BackSecondaryColor">
      <summary>Gets or sets the secondary color for the background of a <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> object.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value. The default value is <see cref="F:System.Drawing.Color.Empty" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.BorderColor">
      <summary>Gets or sets the border color of a <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> object.</summary>
      <returns>A T<see cref=":System.Drawing.Color" /> value. The default color is <see cref="F:System.Drawing.Color.Empty" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.BorderDashStyle">
      <summary>Gets or sets the border style of a <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> object.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartDashStyle" /> enumeration value that determines the border style of the chart area.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.BorderWidth">
      <summary>Gets or sets the border width of a <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> object.</summary>
      <returns>An integer value that determines the border width, in pixels, of the chart area.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.CursorX">
      <summary>Gets or sets a <see cref="T:System.Windows.Forms.DataVisualization.Charting.Cursor" /> object that is used for cursors and selected ranges along the X-axis.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.Cursor" /> object used for cursors and selected ranges along the X-axis.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.CursorY">
      <summary>Gets or sets a <see cref="T:System.Windows.Forms.DataVisualization.Charting.Cursor" /> object that is used for cursors and selected ranges along the Y-axis.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.Cursor" /> object used for cursors and selected ranges along the X-axis.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartArea.Dispose(System.Boolean)">
      <summary>Releases unmanaged and, optionally, managed resources.</summary>
      <param name="disposing">True to release both unmanaged and managed resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartArea.GetSeriesDepth(System.Windows.Forms.DataVisualization.Charting.Series)">
      <summary>Returns the depth of a <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> in a chart area.</summary>
      <returns>A float value that represents the depth of the specified <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />, which is measured as a percentage of the chart area's depth.</returns>
      <param name="series">The <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> for which the depth is retrieved.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartArea.GetSeriesZPosition(System.Windows.Forms.DataVisualization.Charting.Series)">
      <summary>Returns the Z position of a series, which is useful for custom drawing.</summary>
      <returns>A float value that represents the Z position of the specified series, which is measured as a percentage of the depth of a chart area.</returns>
      <param name="series">The <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> for which the Z position is retrieved.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.InnerPlotPosition">
      <summary>Gets or sets an <see cref="T:System.Windows.Forms.DataVisualization.Charting.ElementPosition" /> object, which defines the inner plot position of a chart area object.</summary>
      <returns>An <see cref="T:System.Windows.Forms.DataVisualization.Charting.ElementPosition" /> object, which defines the inner plot position of a <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> object.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.IsSameFontSizeForAllAxes">
      <summary>Gets or sets a flag that determines if the labels of the relevant chart area axes are of equal size.</summary>
      <returns>True if all axes that have their <see cref="P:System.Windows.Forms.DataVisualization.Charting.Axis.IsLabelAutoFit" /> property set to true will display their labels using the same font size, otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.Name">
      <summary>Gets or sets the unique name of a <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> object.</summary>
      <returns>A string value that represents the name of a ChartArea object.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.Position">
      <summary>Gets or sets an <see cref="T:System.Windows.Forms.DataVisualization.Charting.ElementPosition" /> object that defines the position of a <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> object within the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" />.</summary>
      <returns>An <see cref="T:System.Windows.Forms.DataVisualization.Charting.ElementPosition" /> object that defines the position of a chart area object within the chart image.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartArea.RecalculateAxesScale">
      <summary>Recalculates the properties of the chart area after changes have been made to the chart in the <see cref="E:System.Windows.Forms.DataVisualization.Charting.Chart.Customize" /> event.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.ShadowColor">
      <summary>Gets or sets the shadow color of a <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> object.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value. The default color is <see cref="P:System.Drawing.Color.Black" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.ShadowOffset">
      <summary>Gets or sets the shadow offset, in pixels, of a <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> object.</summary>
      <returns>An integer that represents the shadow offset, in pixels, of the chart area.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartArea.TransformPoints(System.Windows.Forms.DataVisualization.Charting.Point3D[])">
      <summary>Applies 3D transformations to an array of 3D points, which must be done before GDI+ drawing methods can be called.</summary>
      <param name="points">An array of 3D points.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartArea.Visible">
      <summary>Gets or sets a flag that determines if a chart area is visible.</summary>
      <returns>True if the chart area is visible, otherwise false.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.ChartArea3DStyle">
      <summary>Manages the display attributes for three-dimensional (3D) chart areas.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartArea3DStyle.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea3DStyle" /> class.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartArea3DStyle.#ctor(System.Windows.Forms.DataVisualization.Charting.ChartArea)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea3DStyle" /> class using the <paramref name="chartArea" /> parameter.</summary>
      <param name="chartArea">A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> object.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartArea3DStyle.Enable3D">
      <summary>Gets or sets a flag that toggles the 3D on and off for a chart area.</summary>
      <returns>true the chart area is displayed using 3D, false if the chart area is displayed in 2D. The default value is false.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartArea3DStyle.Inclination">
      <summary>Gets or sets the angle of rotation around the horizontal axes for 3D chart areas.</summary>
      <returns>An integer that represents the angle of rotation around the horizontal axes for 3D chart areas.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartArea3DStyle.IsClustered">
      <summary>Gets or sets a flag that determines whether data series for a bar or column chart are clustered; that is, displayed along distinct rows.</summary>
      <returns>True if whether data series for a bar or column chart are clustered; otherwise, False.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartArea3DStyle.IsRightAngleAxes">
      <summary>Gets or sets a flag that determines whether a chart area is displayed using an isometric projection.</summary>
      <returns>True if the chart area is displayed using an isometric projection, otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartArea3DStyle.LightStyle">
      <summary>Gets or sets the style of lighting for a 3D chart area.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.LightStyle" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartArea3DStyle.Perspective">
      <summary>Gets or sets the percent of perspective for a 3D chart area.</summary>
      <returns>An integer value that represents the percent of perspective for a 3D chart area. The allowable range is 0-100 percent, and the default is zero (0) percent.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartArea3DStyle.PointDepth">
      <summary>Gets or sets the depth of data points displayed in a 3D chart area.</summary>
      <returns>An integer value that represents the depth of data points. The allowable range is 0-1000 percent. The default is 100 percent.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartArea3DStyle.PointGapDepth">
      <summary>Gets or sets the distance between series rows in a 3D chart area.</summary>
      <returns>An integer value that represents the distance between data rows (that is, the data series) in the 3D chart area. The allowable range is 0-1000 percent, and the default is 100 percent.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartArea3DStyle.Rotation">
      <summary>Gets or sets the angle of rotation around the vertical axes for 3D chart areas.</summary>
      <returns>An integer value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartArea3DStyle.WallWidth">
      <summary>Gets or sets the width of the walls displayed in a 3D chart area.</summary>
      <returns>An integer value that represents the width, in pixels, of the walls displayed in a 3D chart area.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.ChartAreaCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> objects.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartAreaCollection.Add(System.String)">
      <summary>Adds a <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> object with the specified name to the collection.</summary>
      <returns>A string value that represents a reference to the newly added object.</returns>
      <param name="name">The name of the object to be added to the collection.</param>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.ChartColorPalette">
      <summary>Specifies a palette when setting a Palette property. </summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartColorPalette.None">
      <summary>No palette is used. </summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartColorPalette.Bright">
      <summary>Palette utilizes bright colors.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartColorPalette.Grayscale">
      <summary>Palette utilizes grayscale colors, that is, shades of black and white.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartColorPalette.Excel">
      <summary>Palette utilizes Excel-style colors.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartColorPalette.Light">
      <summary>Palette utilizes <see cref="T:System.Web.UI.DataVisualization.Charting.LightStyle" /> style colors; very light colors..</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartColorPalette.Pastel">
      <summary>Palette utilizes pastel colors.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartColorPalette.EarthTones">
      <summary>Palette utilizes earth tone colors such as green and brown.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartColorPalette.SemiTransparent">
      <summary>Palette utilizes semi-transparent colors.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartColorPalette.Berry">
      <summary>Palette utilizes blues and purples.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartColorPalette.Chocolate">
      <summary>Palette utilizes shades of brown.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartColorPalette.Fire">
      <summary>Palette utilizes red, orange and yellow colors.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartColorPalette.SeaGreen">
      <summary>Palette utilizes colors that range from green to blue.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartColorPalette.BrightPastel">
      <summary>Palette utilizes bright pastel colors.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.ChartDashStyle">
      <summary>Specifies a line style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartDashStyle.NotSet">
      <summary>The line style is not set.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartDashStyle.Dash">
      <summary>A dashed line.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartDashStyle.DashDot">
      <summary>A line with a repeating dash-dot pattern.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartDashStyle.DashDotDot">
      <summary>A line a repeating dash-dot-dot pattern.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartDashStyle.Dot">
      <summary>A line with a repeating dot pattern.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartDashStyle.Solid">
      <summary>A solid line.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.ChartElement">
      <summary>Base class for all the chart elements. The <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartElement" /> class represents the most basic element of the chart element hierarchy.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartElement" /> class.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartElement.Dispose">
      <summary>Releases the resources used by the <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartElement" />.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartElement.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartElement" /> and optionally releases the managed resources.</summary>
      <param name="disposing">True to release both managed and unmanaged resources; False to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartElement.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartElement" />.</summary>
      <returns>True if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartElement" />; otherwise, False.</returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartElement" />.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartElement.GetHashCode">
      <summary>Returns a hash function for a particular type.</summary>
      <returns>An integer value that represents the hash code for the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartElement.Tag">
      <summary>Gets or sets an object associated with this chart element.</summary>
      <returns>An <see cref="T:System.Object" /> associated with this chart element.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartElement.ToString">
      <summary>Returns a string that represents the current <see cref="T:System.Object" />.</summary>
      <returns>A string value that represents the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.ChartElementCollection`1">
      <summary>Represents the base class for all chart element collections.</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartElementCollection`1.ClearItems">
      <summary>Removes all elements from the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartElementCollection`1.Dispose">
      <summary>Releases the resources used by the <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartElementCollection`1" />.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartElementCollection`1.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartElementCollection`1" /> and optionally releases the managed resources.</summary>
      <param name="disposing">True to release both managed and unmanaged resources; False to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartElementCollection`1.InsertItem(System.Int32,`0)">
      <summary>Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1" /> at the specified index location.</summary>
      <param name="index">The zero-based index location of the item will be inserted.</param>
      <param name="item">The object to insert. The value can be null for reference types.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartElementCollection`1.Invalidate">
      <summary>Forces the invalidation of the parent chart element.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartElementCollection`1.RemoveItem(System.Int32)">
      <summary>Removes the element at the specified index location of the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
      <param name="index">The zero-based index location of the element to remove.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartElementCollection`1.ResumeUpdates">
      <summary>Resumes the invalidation of a chart element in the collection.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartElementCollection`1.SetItem(System.Int32,`0)">
      <summary>Replaces the element at the specified index location.</summary>
      <param name="index">The zero-based index location of the element to replace.</param>
      <param name="item">The new value for the element at the specified index location. The value can be null for reference types.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartElementCollection`1.SuspendUpdates">
      <summary>Suspends the invalidation of a chart element in the collection.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.ChartElementOutline">
      <summary>Represents an array of marker points and the outline path used for visual object selection in the chart.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartElementOutline.Dispose">
      <summary>Performs application-defined tasks that free, release, or reset unmanaged resources.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartElementOutline.Dispose(System.Boolean)">
      <summary>Releases unmanaged and, optionally, managed resources.</summary>
      <param name="disposing">True to release both unmanaged and managed resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartElementOutline.Markers">
      <summary>Gets or sets the markers.</summary>
      <returns>An array of <see cref="T:System.Drawing.PointF" /> values that represents the marker points.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartElementOutline.OutlinePath">
      <summary>Gets or sets the outline path. The result can be null for complex objects and objects with two points or fewer.</summary>
      <returns>A <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> object that represents the outline path.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.ChartElementType">
      <summary>Specifies a chart element type.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartElementType.Nothing">
      <summary>No chart element.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartElementType.Title">
      <summary>The title of a <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" />.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartElementType.PlottingArea">
      <summary>The plotting area, which is the chart area excluding axes, labels, and so on. Also excludes the areas that data points might occupy.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartElementType.Axis">
      <summary>An <see cref="T:System.Windows.Forms.DataVisualization.Charting.Axis" /> object.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartElementType.TickMarks">
      <summary>Any major or minor <see cref="T:System.Windows.Forms.DataVisualization.Charting.TickMark" /> object.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartElementType.Gridlines">
      <summary>Any major or minor grid line, either vertical or horizontal.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartElementType.StripLines">
      <summary>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.StripLine" /> object.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartElementType.AxisLabelImage">
      <summary>An <see cref="T:System.Windows.Forms.DataVisualization.Charting.Axis" /> label image.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartElementType.AxisLabels">
      <summary>An <see cref="T:System.Web.UI.DataVisualization.Charting.Axis" /> label.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartElementType.AxisTitle">
      <summary>An <see cref="T:System.Windows.Forms.DataVisualization.Charting.Axis" /> title.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartElementType.ScrollBarThumbTracker">
      <summary>A scrollbar tracking thumb.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartElementType.ScrollBarSmallDecrement">
      <summary>A scrollbar small decrement button. A "down arrow" button for a vertical scrollbar, a "left arrow" button for a horizontal scrollbar.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartElementType.ScrollBarSmallIncrement">
      <summary>A scrollbar small increment button. An "up arrow" button for a vertical scrollbar, a "right arrow" button for a horizontal scrollbar.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartElementType.ScrollBarLargeDecrement">
      <summary>The background of a scrollbar that, when clicked, results in a large decrement in the view size. This background is located below the thumb for a vertical scrollbar, and to the left of the thumb for a horizontal scrollbar.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartElementType.ScrollBarLargeIncrement">
      <summary>The background of a scrollbar that, when clicked, results in a large increment in the view size. This background is located above the thumb for a vertical scrollbar, and to the right of the thumb for a horizontal scrollbar.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartElementType.ScrollBarZoomReset">
      <summary>The <see cref="F:System.Windows.Forms.DataVisualization.Charting.ScrollBarButtonType.ZoomReset" /> button of a scrollbar.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartElementType.DataPoint">
      <summary>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" /> object.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartElementType.DataPointLabel">
      <summary>A series <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" /> label.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartElementType.LegendArea">
      <summary>The area inside a <see cref="T:System.Windows.Forms.DataVisualization.Charting.Legend" /> object. Does not include the space occupied by legend items.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartElementType.LegendTitle">
      <summary>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.Legend" /> title.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartElementType.LegendHeader">
      <summary>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.Legend" /> header.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartElementType.LegendItem">
      <summary>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendItem" /> object.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartElementType.Annotation">
      <summary>Any object derived from the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Annotation" /> class.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.ChartGraphics">
      <summary>Provides numerous conversion functions and exposes a GDI+ <see cref="T:System.Drawing.Graphics" /> object.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartGraphics.Dispose(System.Boolean)">
      <summary>Releases unmanaged and, optionally, managed resources.</summary>
      <param name="disposing">True to release both unmanaged and managed resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartGraphics.GetAbsolutePoint(System.Drawing.PointF)">
      <summary>Takes a <see cref="T:System.Drawing.PointF" /> object and converts its relative coordinates to absolute coordinates.</summary>
      <returns>A <see cref="T:System.Drawing.PointF" /> object in absolute coordinates.</returns>
      <param name="point">A <see cref="T:System.Drawing.PointF" /> object in relative coordinates.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartGraphics.GetAbsoluteRectangle(System.Drawing.RectangleF)">
      <summary>Takes a <see cref="T:System.Drawing.RectangleF" /> object and converts its relative coordinates to absolute coordinates.</summary>
      <returns>A <see cref="T:System.Drawing.RectangleF" /> object in absolute coordinates.</returns>
      <param name="rectangle">A <see cref="T:System.Drawing.RectangleF" /> object in relative coordinates.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartGraphics.GetAbsoluteSize(System.Drawing.SizeF)">
      <summary>Takes a <see cref="T:System.Drawing.SizeF" /> object that uses relative coordinates and returns a <see cref="T:System.Drawing.SizeF" /> object that uses absolute coordinates.</summary>
      <returns>A <see cref="T:System.Drawing.SizeF" /> object in absolute coordinates.</returns>
      <param name="size">A <see cref="T:System.Drawing.SizeF" /> object in relative coordinates.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartGraphics.GetPositionFromAxis(System.String,System.Windows.Forms.DataVisualization.Charting.AxisName,System.Double)">
      <summary>Takes a given axis value for a specified axis and returns the relative pixel value.</summary>
      <returns>A string value that represents the converted axis value, in relative pixel coordinates.</returns>
      <param name="chartAreaName">Chart area name.</param>
      <param name="axis">An <see cref="T:System.Windows.Forms.DataVisualization.Charting.AxisName" /> enumeration value that identifies the relevant axis.</param>
      <param name="axisValue">The axis value to be converted to a relative pixel value.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartGraphics.GetRelativePoint(System.Drawing.PointF)">
      <summary>Takes a <see cref="T:System.Drawing.PointF" /> object that uses absolute coordinates and returns a <see cref="T:System.Drawing.PointF" /> object that uses relative coordinates.</summary>
      <returns>A <see cref="T:System.Drawing.PointF" /> object in relative coordinates.</returns>
      <param name="point">A <see cref="T:System.Drawing.PointF" /> object in absolute coordinates.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartGraphics.GetRelativeRectangle(System.Drawing.RectangleF)">
      <summary>Takes a <see cref="T:System.Drawing.RectangleF" /> structure that is using absolute coordinates and returns a <see cref="T:System.Drawing.RectangleF" /> object that uses relative coordinates.</summary>
      <returns>A <see cref="T:System.Drawing.RectangleF" /> structure in relative coordinates.</returns>
      <param name="rectangle">A <see cref="T:System.Drawing.RectangleF" /> structure in absolute coordinates.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartGraphics.GetRelativeSize(System.Drawing.SizeF)">
      <summary>Takes a <see cref="T:System.Drawing.SizeF" /> object in absolute coordinates and returns a <see cref="T:System.Drawing.SizeF" /> object that uses relative coordinates.</summary>
      <returns>A <see cref="T:System.Drawing.SizeF" /> object in relative coordinates.</returns>
      <param name="size">A <see cref="T:System.Drawing.SizeF" /> object in absolute coordinates.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartGraphics.Graphics">
      <summary>Gets or sets a GDI+ <see cref="T:System.Drawing.Graphics" /> object that can be used for drawing purposes.</summary>
      <returns>A <see cref="T:System.Drawing.Graphics" /> object used for drawing.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle">
      <summary>Specifies a hatching style for a chart element.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.None">
      <summary>No hatching style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.BackwardDiagonal">
      <summary>Backward diagonal style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.Cross">
      <summary>Cross style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.DarkDownwardDiagonal">
      <summary>Dark downward diagonal style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.DarkHorizontal">
      <summary>Dark horizontal style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.DarkUpwardDiagonal">
      <summary>Dark upward diagonal style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.DarkVertical">
      <summary>Dark vertical style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.DashedDownwardDiagonal">
      <summary>Dashed downward diagonal style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.DashedHorizontal">
      <summary>Dashed horizontal style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.DashedUpwardDiagonal">
      <summary>Dashed upward diagonal style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.DashedVertical">
      <summary>Dashed vertical style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.DiagonalBrick">
      <summary>Diagonal brick style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.DiagonalCross">
      <summary>Diagonal cross style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.Divot">
      <summary>Divot style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.DottedDiamond">
      <summary>Dotted diamond style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.DottedGrid">
      <summary>Dotted grid style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.ForwardDiagonal">
      <summary>Forward diagonal style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.Horizontal">
      <summary>Horizontal style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.HorizontalBrick">
      <summary>Horizontal brick style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.LargeCheckerBoard">
      <summary>Large checker board style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.LargeConfetti">
      <summary>Large confetti style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.LargeGrid">
      <summary>Large grid style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.LightDownwardDiagonal">
      <summary>Light downward diagonal style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.LightHorizontal">
      <summary>Light horizontal style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.LightUpwardDiagonal">
      <summary>Light upward diagonal style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.LightVertical">
      <summary>Light vertical style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.NarrowHorizontal">
      <summary>Narrow horizontal style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.NarrowVertical">
      <summary>Narrow vertical style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.OutlinedDiamond">
      <summary>Outlined diamond style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.Percent05">
      <summary>Percent05 style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.Percent10">
      <summary>Percent10 style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.Percent20">
      <summary>Percent20 style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.Percent25">
      <summary>Percent25 style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.Percent30">
      <summary>Percent30 style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.Percent40">
      <summary>Percent40 style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.Percent50">
      <summary>Percent50 style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.Percent60">
      <summary>Percent60 style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.Percent70">
      <summary>Percent70 style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.Percent75">
      <summary>Percent75 style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.Percent80">
      <summary>Percent80 style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.Percent90">
      <summary>Percent90 style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.Plaid">
      <summary>Plaid style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.Shingle">
      <summary>Shingle style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.SmallCheckerBoard">
      <summary>Small checker board style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.SmallConfetti">
      <summary>Small confetti style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.SmallGrid">
      <summary>Small grid style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.SolidDiamond">
      <summary>Solid diamond style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.Sphere">
      <summary>Sphere style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.Trellis">
      <summary>Trellis style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.Vertical">
      <summary>Vertical style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.Wave">
      <summary>Wave style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.Weave">
      <summary>Weave style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.WideDownwardDiagonal">
      <summary>Wide downward diagonal style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.WideUpwardDiagonal">
      <summary>Wide upward diagonal style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.ZigZag">
      <summary>Zigzag style.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.ChartImageAlignmentStyle">
      <summary>Specifies the image alignment for a chart background image.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartImageAlignmentStyle.TopLeft">
      <summary>The mage is aligned to the top left corner of the chart element.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartImageAlignmentStyle.Top">
      <summary>The image is aligned to the top boundary of the chart element.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartImageAlignmentStyle.TopRight">
      <summary>The image is aligned to the top right corner of the chart element.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartImageAlignmentStyle.Right">
      <summary>The image is aligned to the right boundary of the chart element.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartImageAlignmentStyle.BottomRight">
      <summary>The image is aligned to the bottom right corner of the chart element.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartImageAlignmentStyle.Bottom">
      <summary>The image is aligned to the bottom boundary of the chart element.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartImageAlignmentStyle.BottomLeft">
      <summary>The image is aligned to the bottom left corner of the chart element.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartImageAlignmentStyle.Left">
      <summary>The image is aligned to the left boundary of the chart element.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartImageAlignmentStyle.Center">
      <summary>The image is aligned in the center of the chart element.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.ChartImageFormat">
      <summary>Specifies the image type of the chart.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartImageFormat.Jpeg">
      <summary>A JPEG image format.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartImageFormat.Png">
      <summary>A PNG image format.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartImageFormat.Bmp">
      <summary>A bitmap (BMP) image format.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartImageFormat.Tiff">
      <summary>A TIFF image format.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartImageFormat.Gif">
      <summary>A GIF image format.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartImageFormat.Emf">
      <summary>A Windows Enhanced Metafile (EMF) image format.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartImageFormat.EmfDual">
      <summary>A Windows Enhanced Metafile Dual (EMF-dual) image format.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartImageFormat.EmfPlus">
      <summary>A Windows Enhanced Metafile Plus (EMF+) image format. </summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.ChartImageWrapMode">
      <summary>Specifies the drawing mode for a background image.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartImageWrapMode.Scaled">
      <summary>Background image is scaled to fit the entire chart element.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartImageWrapMode.Tile">
      <summary>Background image is tiled to fit the entire chart element.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartImageWrapMode.TileFlipX">
      <summary>Every other tiled image is reversed around the X-axis.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartImageWrapMode.TileFlipXY">
      <summary>Every other tiled image is reversed around the X-axis and Y-axis.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartImageWrapMode.TileFlipY">
      <summary>Every other tiled image is reversed around the Y-axis.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartImageWrapMode.Unscaled">
      <summary>Background image is not scaled.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.ChartNamedElement">
      <summary>Represents the base class for most chart elements. Chart elements such as series, chart areas, and legends must have unique names, and reuse the unique name generation and validation logic provided by the <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartNamedElementCollection`1" /> class.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartNamedElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartNamedElement" /> class.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartNamedElement.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartNamedElement" /> class with the specified chart element name.</summary>
      <param name="name">The name of the new chart element.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartNamedElement.Name">
      <summary>Gets or sets the name of the chart element.</summary>
      <returns>A string value that represents the name of the chart element.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.ChartNamedElementCollection`1">
      <summary>Represents the base class for all collections of named chart elements. Performs name management and enforces the uniqueness of the names.</summary>
      <typeparam name="T">A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartNamedElement" /> object.</typeparam>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartNamedElementCollection`1.FindByName(System.String)">
      <summary>Finds the chart element by the specified name.</summary>
      <returns>The <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartNamedElement" /> object of the specified name in the collection.</returns>
      <param name="name">The name of the chart element.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartNamedElementCollection`1.IndexOf(System.String)">
      <summary>Finds the index of the chart element with the specified name.</summary>
      <returns>An integer value that represents the position of the chart element in the zero-based index.</returns>
      <param name="name">The name of the chart element.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartNamedElementCollection`1.InsertItem(System.Int32,`0)">
      <summary>Inserts the specified item in the collection at the specified index.</summary>
      <param name="index">The zero-based index where the item is to be inserted.</param>
      <param name="item">The object to insert.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartNamedElementCollection`1.IsUniqueName(System.String)">
      <summary>Determines whether the chart element with the specified name already exists in the collection.</summary>
      <returns>True if the new chart element name is unique, otherwise false.</returns>
      <param name="name">The new chart element name.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartNamedElementCollection`1.Item(System.String)">
      <summary>Gets or sets the chart element with the specified name.</summary>
      <returns>The <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartNamedElement" /> object of the specified name in the collection.</returns>
      <param name="name">The name of the chart element.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartNamedElementCollection`1.NamePrefix">
      <summary>Gets the name prefix that is used to create unique chart element names.</summary>
      <returns>A string value that represents the default name prefix of the chart elements stored in the collection.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartNamedElementCollection`1.NextUniqueName">
      <summary>Finds the unique name for the new element to be added to the collection.</summary>
      <returns>A string value that represents the next unique chart element name.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartNamedElementCollection`1.RemoveItem(System.Int32)">
      <summary>Removes the chart element at the specified index of the collection.</summary>
      <param name="index">The zero-based index of the chart element to remove.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartNamedElementCollection`1.SetItem(System.Int32,`0)">
      <summary>Replaces the chart element at the specified index with a new chart element.</summary>
      <param name="index">The zero-based index of the chart element to replace.</param>
      <param name="item">The new chart element to insert at the specified index.</param>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.ChartPaintEventArgs">
      <summary>Provides data for the paint events of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" /> control.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartPaintEventArgs.Chart">
      <summary>Gets the root <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" /> object.</summary>
      <returns>The root <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" /> object.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartPaintEventArgs.ChartElement">
      <summary>Gets an <see cref="T:System.Object" /> for the event.</summary>
      <returns>An <see cref="T:System.Object" /> that represents the hart element.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartPaintEventArgs.ChartGraphics">
      <summary>Gets a <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartGraphics" /> object.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartGraphics" /> object.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartPaintEventArgs.Position">
      <summary>Gets an <see cref="T:System.Windows.Forms.DataVisualization.Charting.ElementPosition" /> object.</summary>
      <returns>An <see cref="T:System.Windows.Forms.DataVisualization.Charting.ElementPosition" /> object.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.ChartSerializer">
      <summary>Enables serialization of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" /> control.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Content">
      <summary>Gets or sets the type of chart content to be serialized.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.SerializationContents" /> enumeration value that represents the chart content that will be serialized during a load, save or reset operation. By default, all non-default chart properties, including data, are persisted.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Format">
      <summary>Gets or sets the format used when the chart is serialized.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.SerializationFormat" /> enumeration value that represents the format of the serialized data. The default value is XML.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.GetContentString(System.Windows.Forms.DataVisualization.Charting.SerializationContents,System.Boolean)">
      <summary>Returns a serializable or non serializable class and/or property names, depending on the specific flag value.</summary>
      <returns>A string value that represents the serializable or non serializable class and/or property names.</returns>
      <param name="content">The serializable content.</param>
      <param name="serializable">True to get a serializable string; false to get a non serializaable string.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.IsResetWhenLoading">
      <summary>Gets or sets a flag that indicates whether object properties are reset to default values before loading.</summary>
      <returns>True if object properties are reset to default values before loading; otherwise, False.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.IsTemplateMode">
      <summary>Gets or sets a flag that indicates whether the chart serializer is working in template-creation mode.</summary>
      <returns>True if the chart serializer is working in template-creation mode; otherwise, False.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.IsUnknownAttributeIgnored">
      <summary>Gets or sets a flag that indicates whether unknown XML properties and elements will be ignored without throwing an exception.</summary>
      <returns>True if unknown XML properties and elements are ignored without throwing an exception; otherwise, False.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Load(System.IO.Stream)">
      <summary>Loads serialized data into the control from an object derived from the <see cref="T:System.IO.Stream" /> class.</summary>
      <param name="stream">An object derived from the <see cref="T:System.IO.Stream" /> class, for example, a <see cref="T:System.IO.MemoryStream" /> object.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Load(System.IO.TextReader)">
      <summary>Loads serialized data into the control from a reader object that derives from the <see cref="T:System.IO.TextReader" /> class.</summary>
      <param name="reader">A reader, such as <see cref="T:System.IO.StringReader" />, that is derived from the abstract <see cref="T:System.IO.TextReader" /> class.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Load(System.String)">
      <summary>Loads serialized data saved to disk into the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" /> control.</summary>
      <param name="fileName">The relative or absolute path of the file used to store the serialized data. If a relative path is specified, the path will be relative to the current directory.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Load(System.Xml.XmlReader)">
      <summary>Loads serialized data into the control from an object derived from the <see cref="T:System.Xml.XmlReader" /> class.</summary>
      <param name="reader">An object from which to read the persisted data. The object is derived from the <see cref="T:System.Xml.XmlReader" /> class, and can be a .NET Framework object or a user-defined object.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.NonSerializableContent">
      <summary>Gets or sets the chart properties that will not be serialized.</summary>
      <returns>A comma-separated string expression that represents the chart properties that will not be serialized. The syntax is "Class.Property[,Class.Property]".</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Reset">
      <summary>Resets all chart properties marked for serialization.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Save(System.IO.Stream)">
      <summary>Saves chart data and properties with non-default values to an object that derives from the <see cref="T:System.IO.Stream" /> class.</summary>
      <param name="stream">An object derived from the <see cref="T:System.IO.Stream" /> class, such as <see cref="T:System.IO.MemoryStream" />, that is used to save chart properties.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Save(System.IO.TextWriter)">
      <summary>Saves chart data and properties with non-default values to the given object that is derived from the <see cref="T:System.IO.TextWriter" /> class.</summary>
      <param name="writer">An object derived from <see cref="T:System.IO.TextWriter" /> class, for example, <see cref="T:System.IO.StringWriter" />, that is used to save chart properties.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Save(System.String)">
      <summary>Saves chart data and properties with non-default values to the given file.</summary>
      <param name="fileName">The relative or absolute path of the file used to store the serialized data. Note that if a relative path is specified, the path will be relative to the current directory.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Save(System.Xml.XmlWriter)">
      <summary>Saves chart data and properties with non-default values to the given object that is derived from the <see cref="T:System.Xml.XmlWriter" /> class.</summary>
      <param name="writer">An object derived from <see cref="T:System.Xml.XmlWriter" /> used to save <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" /> properties.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.SerializableContent">
      <summary>Gets or sets the chart properties that can be serialized.</summary>
      <returns>A comma-separated string expression that represents the chart properties to be serialized. The syntax is "Class.Property[,Class.Property]".</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.ChartValueType">
      <summary>Specifies value types for various chart properties.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartValueType.Auto">
      <summary>Property type is set automatically by the Chart control.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartValueType.Double">
      <summary>A <see cref="T:System.Double" /> value.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartValueType.Single">
      <summary>A <see cref="T:System.Single" /> value.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartValueType.Int32">
      <summary>A <see cref="T:System.Int32" /> value.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartValueType.Int64">
      <summary>A <see cref="T:System.Int64" /> value.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartValueType.UInt32">
      <summary>A <see cref="T:System.UInt32" /> value.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartValueType.UInt64">
      <summary>A <see cref="T:System.UInt64" /> value.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartValueType.String">
      <summary>A <see cref="T:System.String" /> value.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartValueType.DateTime">
      <summary>A <see cref="T:System.DateTime" /> value.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartValueType.Date">
      <summary>The Date portion of a <see cref="T:System.DateTime" /> value.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartValueType.Time">
      <summary>The Time portion of the <see cref="DateTime" /> value.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ChartValueType.DateTimeOffset">
      <summary>A <see cref="T:System.DateTime" /> value with offset.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.CompareMethod">
      <summary>Specifies the type of comparison to be used when filtering data. This enumeration is used by the Filter method definitions in the <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataManipulator" /> class that take the <paramref name="CompareMethod" /> argument.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.CompareMethod.MoreThan">
      <summary>If the data point value is more than the compared value, the point is filtered.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.CompareMethod.LessThan">
      <summary>If the data point value is less than the compared value, the point is filtered.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.CompareMethod.EqualTo">
      <summary>If the data point value is equal to the compared value, the point is filtered.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.CompareMethod.MoreThanOrEqualTo">
      <summary>If the data point value more than or equal to the compared value, the point is filtered.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.CompareMethod.LessThanOrEqualTo">
      <summary>If the data point value is less than or equal to the compared value, the point is filtered.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.CompareMethod.NotEqualTo">
      <summary>If the data point value is not equal to the compared value, the point is filtered.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.Cursor">
      <summary>Represents a horizontal or vertical line that defines a position along an axis.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Cursor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Cursor" /> class.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Cursor.AutoScroll">
      <summary>Gets or sets a flag that determines whether scrolling will occur if a range selection operation extends beyond a boundary of the chart area.</summary>
      <returns>A Boolean value that represents whether the data view can be scrolled automatically. The default value is true.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Cursor.AxisType">
      <summary>Gets or sets the type of axis that the cursor is attached to.</summary>
      <returns>An <see cref="T:System.Windows.Forms.DataVisualization.Charting.AxisType" /> enumeration value that represents whether the axis is attached to the primary or secondary axis.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Cursor.Dispose">
      <summary>Performs application-defined tasks that free, release, or reset unmanaged resources.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Cursor.Dispose(System.Boolean)">
      <summary>Releases unmanaged and, optionally, managed resources</summary>
      <param name="disposing">True to release both unmanaged and managed resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Cursor.Interval">
      <summary>Gets or sets the cursor interval.</summary>
      <returns>A double value representing the cursor interval.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Cursor.IntervalOffset">
      <summary>Gets or sets the interval offset, which affects where the cursor and range selection can be drawn when they are set by a user.</summary>
      <returns>A double value that represents the offset from the interval.  The default value is zero, which signifies no limitations, and negative values are allowed.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Cursor.IntervalOffsetType">
      <summary>Gets or sets the interval offset type of a cursor and selected range for an axis.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType" /> enumeration value that determines the unit of measurement for the interval offset. </returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Cursor.IntervalType">
      <summary>Gets or sets the interval type for the cursor and selected range of an axis.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Cursor.IsUserEnabled">
      <summary>Gets or sets a flag that enables or disables the cursor user interface.</summary>
      <returns>True if the cursor user interface is enabled; otherwise, False.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Cursor.IsUserSelectionEnabled">
      <summary>Gets or sets a flag that enables or disables the range selection user interface.</summary>
      <returns>True if the range selection user interface is enabled; otherwise, False.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Cursor.LineColor">
      <summary>Gets or sets the cursor line color.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value that represents the line color of the cursor. The default value is <see cref="P:System.Drawing.Color.Red" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Cursor.LineDashStyle">
      <summary>Gets or sets the style of the cursor line.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartDashStyle" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Cursor.LineWidth">
      <summary>Gets or sets the line width, in pixels, of a cursor</summary>
      <returns>An integer value that represents the line width, in pixels. The default value is one (1).</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Cursor.Position">
      <summary>Gets or sets the position of a cursor.</summary>
      <returns>A double value that represents the position of a cursor.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Cursor.SelectionColor">
      <summary>Gets or sets a semi-transparent color that highlights a range of data.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value represents the color of the highlighted range. The default value is <see cref="P:System.Drawing.Color.LightGray" />, with an alpha value of 120.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Cursor.SelectionEnd">
      <summary>Gets or sets the end position of a range selection.</summary>
      <returns>A double value that represents the end position of a range selection.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Cursor.SelectionStart">
      <summary>Gets or sets the start position of a cursor's selected range.</summary>
      <returns>A double value that represents the start position of a cursor's range selection.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Cursor.SetCursorPixelPosition(System.Drawing.PointF,System.Boolean)">
      <summary>Displays a cursor at the specified position. Measured in pixels.</summary>
      <param name="point">A <see cref="T:System.Drawing.PointF" /> structure that specifies where the cursor will be drawn.</param>
      <param name="roundToBoundary">If true, the cursor will be drawn along the nearest chart area boundary, if the specified position does not fall within a <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> object.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Cursor.SetCursorPosition(System.Double)">
      <summary>Sets the position of a cursor within a chart area at the specified axis value.</summary>
      <param name="newPosition">The new position of the cursor. Measured as a value along the relevant axis.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Cursor.SetSelectionPixelPosition(System.Drawing.PointF,System.Drawing.PointF,System.Boolean)">
      <summary>Sets the start and end positions of a range selection.</summary>
      <param name="startPoint">A <see cref="T:System.Drawing.PointF" /> structure that specifies where the range selection begins.</param>
      <param name="endPoint">A <see cref="T:System.Drawing.PointF" /> structure that specifies where the range selection ends.</param>
      <param name="roundToBoundary">If true, the start and end points will be rounded to the nearest chart area boundary if the specified positions do not fall within a <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> object.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Cursor.SetSelectionPosition(System.Double,System.Double)">
      <summary>Sets the position of a selected range within a chart area at the specified axis values.</summary>
      <param name="newStart">The new start position of the range selection. Measured as a value along the relevant axis.</param>
      <param name="newEnd">The new end position of the range selection. Measured as a value along the relevant axis.</param>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.CursorEventArgs">
      <summary>Members of this class are used with the following events in the root <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" /> object: <see cref="E:System.Windows.Forms.DataVisualization.Charting.Chart.CursorPositionChanged" />, <see cref="E:System.Windows.Forms.DataVisualization.Charting.Chart.CursorPositionChanging" />, <see cref="E:System.Windows.Forms.DataVisualization.Charting.Chart.SelectionRangeChanged" /> and <see cref="E:System.Windows.Forms.DataVisualization.Charting.Chart.SelectionRangeChanging" />.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.CursorEventArgs.#ctor(System.Windows.Forms.DataVisualization.Charting.ChartArea,System.Windows.Forms.DataVisualization.Charting.Axis,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.CursorEventArgs" /> class with the specified chart area, axis, and cursor position.</summary>
      <param name="chartArea">The <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> of the cursor.</param>
      <param name="axis">The axis of the cursor.</param>
      <param name="newPosition">The new cursor position.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.CursorEventArgs.#ctor(System.Windows.Forms.DataVisualization.Charting.ChartArea,System.Windows.Forms.DataVisualization.Charting.Axis,System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.CursorEventArgs" /> class with the specified chart area, axis, start and end positions for the new range.</summary>
      <param name="chartArea">The <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> of the cursor.</param>
      <param name="axis">Axis of the cursor.</param>
      <param name="newSelectionStart">Start position of the new range selection.</param>
      <param name="newSelectionEnd">End position of the new range selection.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.CursorEventArgs.Axis">
      <summary>Gets the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Axis" /> object that a cursor or range selection belongs to.</summary>
      <returns>An <see cref="T:System.Windows.Forms.DataVisualization.Charting.Axis" /> object.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.CursorEventArgs.ChartArea">
      <summary>Gets the <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> object that a cursor or range selection belongs to.</summary>
      <returns>An object of type <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> that represents the chart area that a range selection or cursor belongs to.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.CursorEventArgs.NewPosition">
      <summary>Gets or sets the position of a cursor. Depending on the event, also sets the cursor's position.</summary>
      <returns>A double value that represents the position of a cursor along an axis.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.CursorEventArgs.NewSelectionEnd">
      <summary>Gets or sets the end position of a selected range. Depending on the event, also sets the end position of the range.</summary>
      <returns>A double value that represents the end position of a selected range.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.CursorEventArgs.NewSelectionStart">
      <summary>Gets or sets the start position of a selected range. Depending on the event, also sets the start position of the range.</summary>
      <returns>A double value that represents the start position of a selected range.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.CustomizeLegendEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Forms.DataVisualization.Charting.Chart.CustomizeLegend" /> event of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" /> control.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.CustomizeLegendEventArgs.#ctor(System.Windows.Forms.DataVisualization.Charting.LegendItemsCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.CustomizeLegendEventArgs" /> class with the specified <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendItemsCollection" />.</summary>
      <param name="legendItems">The <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendItemsCollection" />.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.CustomizeLegendEventArgs.#ctor(System.Windows.Forms.DataVisualization.Charting.LegendItemsCollection,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.CustomizeLegendEventArgs" /> class with the specified <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendItemsCollection" /> and legend name.</summary>
      <param name="legendItems">The <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendItemsCollection" />.</param>
      <param name="legendName">The legend name.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.CustomizeLegendEventArgs.LegendItems">
      <summary>Used to remove, modify or change the order of both custom and default legend items in the <see cref="E:System.Windows.Forms.DataVisualization.Charting.Chart.CustomizeLegend" /> event. Can also be used to add custom legend items.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendItemsCollection" /> object.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.CustomizeLegendEventArgs.LegendName">
      <summary>Gets the name of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Legend" /> object, which can be used to determine which legend was the sender of the <see cref="E:System.Windows.Forms.DataVisualization.Charting.Chart.CustomizeLegend" /> event.</summary>
      <returns>A string value that represents the name of the associated <see cref="T:System.Windows.Forms.DataVisualization.Charting.Legend" /> object.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.CustomLabel">
      <summary>Represents a custom label for an axis.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.CustomLabel.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.CustomLabel" /> class.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.CustomLabel.#ctor(System.Double,System.Double,System.String,System.Int32,System.Windows.Forms.DataVisualization.Charting.LabelMarkStyle)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.CustomLabel" /> class with the specified <paramref name="fromPosition" />, <paramref name="toPosition" />, <paramref name="text" />, <paramref name="labelRow" />, and <paramref name="markStyle" /> parameters.</summary>
      <param name="fromPosition">The beginning of the axis range the label applies to.</param>
      <param name="toPosition">The end of the axis range the label applies to.</param>
      <param name="text">The label text.</param>
      <param name="labelRow">The label row index.</param>
      <param name="markStyle">The label mark style.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.CustomLabel.#ctor(System.Double,System.Double,System.String,System.Int32,System.Windows.Forms.DataVisualization.Charting.LabelMarkStyle,System.Windows.Forms.DataVisualization.Charting.GridTickTypes)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.CustomLabel" /> class with the specified <paramref name="fromPosition" />, <paramref name="toPosition" />, <paramref name="text" />, <paramref name="labelRow" />, <paramref name="markStyle" /> and <paramref name="gridTick" /> parameters.</summary>
      <param name="fromPosition">The beginning of the axis range the label applies to.</param>
      <param name="toPosition">The end of the axis range the label applies to.</param>
      <param name="text">The label text.</param>
      <param name="labelRow">The label row index.</param>
      <param name="markStyle">The label mark style.</param>
      <param name="gridTick">The custom grid line and/or tick marks flag.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.CustomLabel.Axis">
      <summary>Gets the axis that this <see cref="T:System.Windows.Forms.DataVisualization.Charting.CustomLabel" /> object belongs to.</summary>
      <returns>An <see cref="T:System.Windows.Forms.DataVisualization.Charting.Axis" /> object.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.CustomLabel.Clone">
      <summary>Returns a cloned label object.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.CustomLabel" /> object that represents a copy of the current custom label.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.CustomLabel.ForeColor">
      <summary>Gets or sets the text color of the custom label.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value that represents the text color of a custom label.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.CustomLabel.FromPosition">
      <summary>Gets or sets the beginning position, in axis coordinates, of the custom label.</summary>
      <returns>A double value that represents the beginning of the axis range that the label is applied to.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.CustomLabel.GridTicks">
      <summary>Gets or sets a property that specifies whether custom tick marks and grid lines will be drawn in the center of the label.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.GridTickTypes" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.CustomLabel.Image">
      <summary>Gets or sets the custom label image.</summary>
      <returns>A string value that represents the name of the custom label image.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.CustomLabel.ImageTransparentColor">
      <summary>Gets or sets a color that will be replaced with a transparent color when a custom label image is drawn.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value which is replaced with a transparent color when you draw the image. The default value is <see cref="P:System.Drawing.Color.Magenta" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.CustomLabel.LabelMark">
      <summary>Gets or sets the label mark for a custom label. This applies to labels in the second row only.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.LabelMarkStyle" /> enumeration value that determines the type of label mark, if any, to be used.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.CustomLabel.MarkColor">
      <summary>Gets or sets the marker color for the custom label</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value that represents the marker color of a custom label.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.CustomLabel.Name">
      <summary>Gets or sets the name of the custom label.</summary>
      <returns>A string value that represents the text name of the item.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.CustomLabel.RowIndex">
      <summary>Gets or sets the index of the custom label row.</summary>
      <returns>An integer value that specifies the index, 0 to 10, of the custom label row.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.CustomLabel.Text">
      <summary>Gets or sets the custom label text.</summary>
      <returns>A string value that represents the label text.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.CustomLabel.ToolTip">
      <summary>Gets or sets the custom label tooltip text.</summary>
      <returns>A string that represents the tooltip text.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.CustomLabel.ToPosition">
      <summary>Gets or sets the starting position of the custom label, in axis coordinates.</summary>
      <returns>A double value that represents the starting position.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.CustomLabelsCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.Forms.DataVisualization.Charting.CustomLabel" /> objects.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.CustomLabelsCollection.Add(System.Double,System.Double,System.String)">
      <summary>Adds a <see cref="T:System.Windows.Forms.DataVisualization.Charting.CustomLabel" /> object to the collection, using the given axis range and text.</summary>
      <returns>The newly added <see cref="T:System.Windows.Forms.DataVisualization.Charting.CustomLabel" /> object.</returns>
      <param name="fromPosition">The minimum value of the axis range to which the label is applied.</param>
      <param name="toPosition">The maximum value of the axis range to which the label is applied.</param>
      <param name="text">The label text.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.CustomLabelsCollection.Add(System.Double,System.Double,System.String,System.Int32,System.Windows.Forms.DataVisualization.Charting.LabelMarkStyle)">
      <summary>Adds a custom label to the collection, using the given axis range, text, row index and marking style.</summary>
      <returns>The newly added <see cref="T:System.Windows.Forms.DataVisualization.Charting.CustomLabel" /> object.</returns>
      <param name="fromPosition">The minimum value of the axis range the label is applied to.</param>
      <param name="toPosition">The maximum value of the axis range the label is applied to.</param>
      <param name="text">Label text.</param>
      <param name="rowIndex">Label row index.</param>
      <param name="markStyle">A <see cref="T:System.Windows.Forms.DataVisualization.Charting.LabelMarkstyle" /> enumeration value.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.CustomLabelsCollection.Add(System.Double,System.Double,System.String,System.Int32,System.Windows.Forms.DataVisualization.Charting.LabelMarkStyle,System.Windows.Forms.DataVisualization.Charting.GridTickTypes)">
      <summary>Adds a custom label to the collection, using the given axis range, text, row index, marking style and grid tick type.</summary>
      <returns>The newly added <see cref="T:System.Windows.Forms.DataVisualization.Charting.CustomLabel" /> object.</returns>
      <param name="fromPosition">The minimum value of the axis range the label is applied to.</param>
      <param name="toPosition">The maximum value of the axis range the label is applied to.</param>
      <param name="text">Label text.</param>
      <param name="rowIndex">Label row index.</param>
      <param name="markStyle">A <see cref="T:System.Windows.Forms.DataVisualization.Charting.LabelMarkstyle" /> enumeration value.</param>
      <param name="gridTick">A <see cref="T:System.Windows.Forms.DataVisualization.Charting.GridTickTypes" /> enumeration value.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.CustomLabelsCollection.Add(System.Double,System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType)">
      <summary>Adds multiple <see cref="T:System.Windows.Forms.DataVisualization.Charting.CustomLabel" /> objects of type <see cref="T:System.DateTime" /> to the collection. Populates the entire first row of an axis with labels.</summary>
      <param name="labelsStep">Determines how often the custom labels will be drawn.</param>
      <param name="intervalType">A <see cref="T:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType" /> enumeration value that determines the interval type.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.CustomLabelsCollection.Add(System.Double,System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType,System.Double,System.Double,System.String,System.Int32,System.Windows.Forms.DataVisualization.Charting.LabelMarkStyle)">
      <summary>Adds multiple custom labels to the collection. The labels will be <see cref="T:System.DateTime" /> labels with the specified interval type, and will be generated for the axis range that is determined by the <paramref name="min" /> and <paramref name="max" /> arguments.</summary>
      <param name="labelsStep">Determines how often custom labels will be drawn.</param>
      <param name="intervalType">A <see cref="T:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType" /> enumeration value that determines the unit of measure for the <paramref name="labelsStep" /> parameter.</param>
      <param name="min">Minimum value.</param>
      <param name="max">Maximum value.</param>
      <param name="format">Label text format.</param>
      <param name="rowIndex">Label row index.</param>
      <param name="markStyle">A <see cref="T:System.Windows.Forms.DataVisualization.Charting.LabelMarkstyle" /> enumeration value.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.CustomLabelsCollection.Add(System.Double,System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType,System.String)">
      <summary>Adds multiple <see cref="T:System.DateTime" /><see cref="T:System.Windows.Forms.DataVisualization.Charting.CustomLabelsCollection" /> objects to the collection. Populates the entire first row of an axis with labels with the specified format.</summary>
      <param name="labelsStep">Determines how often custom labels will be drawn.</param>
      <param name="intervalType">A <see cref="T:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType" /> enumeration value that determines the unit of measure for the <paramref name="labelsStep" /> parameter.</param>
      <param name="format">A value that determines the format of the custom label.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.CustomLabelsCollection.Add(System.Double,System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType,System.String,System.Int32,System.Windows.Forms.DataVisualization.Charting.LabelMarkStyle)">
      <summary>Adds multiple custom labels to the collection. The labels will be <see cref="T:System.DateTime" /> labels with the specified interval type, text format, row index and marking style.</summary>
      <param name="labelsStep">Determines how often custom labels will be drawn.</param>
      <param name="intervalType">A <see cref="T:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType" /> enumeration value that determines the unit of measure for the <paramref name="labelsStep" /> parameter.</param>
      <param name="format">The label text format.</param>
      <param name="rowIndex">The label row index.</param>
      <param name="markStyle">A <see cref="T:System.Windows.Forms.DataVisualization.Charting.LabelMarkstyle" /> enumeration value.</param>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.CustomProperties"></member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.DataFormula">
      <summary>Provides properties and methods to prepare series data for technical analysis, apply formulas on the series data and prepare output data to be displayed as a chart. The actual calculations are performed in the <see cref="T:System.Windows.Forms.DataVisualization.Charting.StatisticFormula" /> class.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataFormula.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataFormula" /> class.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataFormula.CopySeriesValues(System.String,System.String)">
      <summary>Copies a series or the specific X or Y value.</summary>
      <param name="inputSeries">A comma-separated list of input data series names and optional X and Y value names.</param>
      <param name="outputSeries">A comma-separated list of output data series names and optional X and Y value names.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataFormula.FinancialFormula(System.Windows.Forms.DataVisualization.Charting.FinancialFormula,System.String)">
      <summary>Calls a method from a formula module with the specified formula name and input series.</summary>
      <param name="formulaName">Formula name.</param>
      <param name="inputSeries">The input series.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataFormula.FinancialFormula(System.Windows.Forms.DataVisualization.Charting.FinancialFormula,System.String,System.String)">
      <summary>Calls a method from a formula module with the specified formula name, and the names of the input and output series.</summary>
      <param name="formulaName">Formula name.</param>
      <param name="inputSeries">The input series.</param>
      <param name="outputSeries">The output series.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataFormula.FinancialFormula(System.Windows.Forms.DataVisualization.Charting.FinancialFormula,System.String,System.String,System.String)">
      <summary>Calls a method from a formula module with the specified formula name and parameters, and the names of the input and output series.</summary>
      <param name="formulaName">Formula name.</param>
      <param name="parameters">Formula parameters.</param>
      <param name="inputSeries">The input series.</param>
      <param name="outputSeries">The output series.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataFormula.FinancialFormula(System.Windows.Forms.DataVisualization.Charting.FinancialFormula,System.String,System.Windows.Forms.DataVisualization.Charting.Series,System.Windows.Forms.DataVisualization.Charting.Series)">
      <summary>This method calls a method from a formula module with the specified formula name and parameters, using the specified input and output series.</summary>
      <param name="formulaName">Formula name.</param>
      <param name="parameters">Formula parameters.</param>
      <param name="inputSeries">Comma-separated list of input series names and optional X and Y value names.</param>
      <param name="outputSeries">Comma-separated list of output series names and optional X and Y value names.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataFormula.FinancialFormula(System.Windows.Forms.DataVisualization.Charting.FinancialFormula,System.Windows.Forms.DataVisualization.Charting.Series)">
      <summary>Calls a method from a formula module with the specified name and input series.</summary>
      <param name="formulaName">Formula name.</param>
      <param name="inputSeries">A comma-separated list of input series names and optional X and Y value names.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataFormula.FinancialFormula(System.Windows.Forms.DataVisualization.Charting.FinancialFormula,System.Windows.Forms.DataVisualization.Charting.Series,System.Windows.Forms.DataVisualization.Charting.Series)">
      <summary>Calls a method from a formula module with the specified name, input and output series.</summary>
      <param name="formulaName">Formula name.</param>
      <param name="inputSeries">Comma-separated list of input series names and optional X and Y value names.</param>
      <param name="outputSeries">Comma-separated list of output series names and optional X and Y value names.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.DataFormula.IsEmptyPointIgnored">
      <summary>Gets or sets a flag that indicates whether empty points are ignored while performing calculations; otherwise, empty points are treated as zeroes.</summary>
      <returns>True if empty points are ignored while performing calculations; otherwise, False.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.DataFormula.IsStartFromFirst">
      <summary>Gets or sets a flag that indicates whether to start formulas such as "rolling average" from zero.</summary>
      <returns>True if formulas such as "rolling average" start from zero; otherwise, False.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.DataFormula.Statistics">
      <summary>Gets a reference to the <see cref="T:System.Windows.Forms.DataVisualization.Charting.StatisticFormula" /> class.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.StatisticFormula" /> object.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.DataManipulator">
      <summary>Performs data manipulation operations at run time. This class is exposed by the <see cref="P:System.Windows.Forms.DataVisualization.Charting.Chart.DataManipulator" /> property of the root <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" /> object.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataManipulator" /> class.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.ExportSeriesValues">
      <summary>Exports the data for every series stored in the <see cref="T:System.Windows.Forms.DataVisualization.Charting.SeriesCollection" /> to the <see cref="T:System.Data.DataSet" /> object.</summary>
      <returns>A <see cref="T:System.Data.DataSet" /> object that contains series data.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.ExportSeriesValues(System.String)">
      <summary>Exports data from one or more series to the <see cref="T:System.Data.DataSet" /> object.</summary>
      <returns>A <see cref="T:System.Data.DataSet" /> object that contains series data.</returns>
      <param name="seriesNames">A comma-separated list of names of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> to be exported.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.ExportSeriesValues(System.Windows.Forms.DataVisualization.Charting.Series)">
      <summary>Exports data from the specified series to the <see cref="T:System.Data.DataSet" /> object.</summary>
      <returns>A <see cref="T:System.Data.DataSet" /> object that contains series data.</returns>
      <param name="series">The series to be exported.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Filter(System.Windows.Forms.DataVisualization.Charting.CompareMethod,System.Double,System.String)">
      <summary>Filters one or more series by applying a filtering rule to the first Y-value of the data points in the first series. The filtered <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> objects are used to store the modified data.</summary>
      <param name="compareMethod">A <see cref="T:System.Windows.Forms.DataVisualization.Charting.CompareMethod" /> enumeration value that determines the comparison method for the filtering rule. Can be <see cref="F:System.Windows.Forms.DataVisualization.Charting.CompareMethod.LessThan" />, <see cref="F:System.Windows.Forms.DataVisualization.Charting.CompareMethod.EqualTo" />, and so forth.</param>
      <param name="compareValue">The value part of the filtering rule that is applied to the first Y-values of data points. For example, in the filtering rule "&lt;6", 6 is the value.</param>
      <param name="inputSeriesNames">A comma-separated list of names of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> to be filtered.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Filter(System.Windows.Forms.DataVisualization.Charting.CompareMethod,System.Double,System.String,System.String)">
      <summary>Filters one or more series by applying a filtering rule to the first Y-value of each of the data points in the first series.</summary>
      <param name="compareMethod">A <see cref="T:System.Windows.Forms.DataVisualization.Charting.CompareMethod" /> enumeration value that determines the comparison method for the filtering rule. Can be <see cref="F:System.Windows.Forms.DataVisualization.Charting.CompareMethod.LessThan" />, <see cref="F:System.Windows.Forms.DataVisualization.Charting.CompareMethod.EqualTo" />, and so forth.</param>
      <param name="compareValue">The value part of the filtering rule that is applied to the first Y-values of data points. For example, in the filtering rule "&lt;6", 6 is the value.</param>
      <param name="inputSeriesNames">A comma-separated list of names of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> to be filtered.</param>
      <param name="outputSeriesNames">A comma-separated list of names of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> that store the filtered data. The number of output series must match the number of input series, otherwise an exception will be thrown.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Filter(System.Windows.Forms.DataVisualization.Charting.CompareMethod,System.Double,System.String,System.String,System.String)">
      <summary>Filters one or more series by applying a filtering rule to the specified data point values in the first series.</summary>
      <param name="compareMethod">A <see cref="T:System.Windows.Forms.DataVisualization.Charting.CompareMethod" /> enumeration value that determines the comparison method for the filtering rule. Can be <see cref="F:System.Windows.Forms.DataVisualization.Charting.CompareMethod.LessThan" />, <see cref="F:System.Windows.Forms.DataVisualization.Charting.CompareMethod.EqualTo" />, and so forth.</param>
      <param name="compareValue">The value part of the filtering rule that is applied to the first Y-values of data points. For example, in the filtering rule "&lt;6", 6 is the value.</param>
      <param name="inputSeriesNames">A comma-separated list of names of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> to be filtered.</param>
      <param name="outputSeriesNames">A comma-separated list of names of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> that store the filtered data. The number of output series must equal the number of input series, otherwise an exception will be thrown.</param>
      <param name="usingValue">The data point value that the filtering rule is applied to. Can be X, Y, Y2, Y3, and so forth.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Filter(System.Windows.Forms.DataVisualization.Charting.CompareMethod,System.Double,System.Windows.Forms.DataVisualization.Charting.Series)">
      <summary>Filters data points in a series by applying a filtering rule to the first Y-value of each data point. The <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> object that is filtered also stores the modified data.</summary>
      <param name="compareMethod">A <see cref="T:System.Windows.Forms.DataVisualization.Charting.CompareMethod" /> enumeration value that determines the comparison method for the filtering rule. Can be <see cref="F:System.Windows.Forms.DataVisualization.Charting.CompareMethod.LessThan" />, <see cref="F:System.Windows.Forms.DataVisualization.Charting.CompareMethod.EqualTo" />, and so forth.</param>
      <param name="compareValue">The value part of the filtering rule that is applied to the first Y-values of data points. For example, in the filtering rule "&lt;6", 6 is the value.</param>
      <param name="inputSeries">The <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> object that is filtered.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Filter(System.Windows.Forms.DataVisualization.Charting.CompareMethod,System.Double,System.Windows.Forms.DataVisualization.Charting.Series,System.Windows.Forms.DataVisualization.Charting.Series)">
      <summary>Filters the data points in a series by applying a filtering rule to the first Y-value of each of the data points.</summary>
      <param name="compareMethod">A <see cref="T:System.Windows.Forms.DataVisualization.Charting.CompareMethod" /> enumeration value that determines the comparison method for the filtering rule. Can be <see cref="F:System.Windows.Forms.DataVisualization.Charting.CompareMethod.LessThan" />, <see cref="F:System.Windows.Forms.DataVisualization.Charting.CompareMethod.EqualTo" />, and so forth.</param>
      <param name="compareValue">The value part of the filtering rule that is applied to the first Y-values of data points. For example, in the filtering rule "&lt;6", 6 is the value.</param>
      <param name="inputSeries">The <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> object to be filtered.</param>
      <param name="outputSeries">A <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> object that stores the filtered data. If the series does not exist, an exception will be thrown.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Filter(System.Windows.Forms.DataVisualization.Charting.CompareMethod,System.Double,System.Windows.Forms.DataVisualization.Charting.Series,System.Windows.Forms.DataVisualization.Charting.Series,System.String)">
      <summary>Filters the data points in a series by applying a filtering rule to the specified data point values for comparison.</summary>
      <param name="compareMethod">A <see cref="T:System.Windows.Forms.DataVisualization.Charting.CompareMethod" /> enumeration value that determines the comparison method for the filtering rule. Can be <see cref="F:System.Windows.Forms.DataVisualization.Charting.CompareMethod.LessThan" />, <see cref="F:System.Windows.Forms.DataVisualization.Charting.CompareMethod.EqualTo" />, and so forth.</param>
      <param name="compareValue">The value part of the filtering rule that is applied to the first Y-values of data points. For example, in the filtering rule "&lt;6", 6 is the value.</param>
      <param name="inputSeries">The <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> object to be filtered.</param>
      <param name="outputSeries">A <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> object that stores the filtered data. If the series does not exist, an exception will be thrown.</param>
      <param name="usingValue">The data point value that the filtering rule is applied to. Can be X, Y, Y2, Y3, and so forth.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Filter(System.Windows.Forms.DataVisualization.Charting.DateRangeType,System.String,System.String)">
      <summary>Filters the data points of one or more series, either by removing the specified points or by marking them as empty for the given date/time ranges. The filtered <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> objects are used to store the modified data.</summary>
      <param name="dateRange">A <see cref="T:System.Windows.Forms.DataVisualization.Charting.DateRangeType" /> enumeration value that represents a date/time interval, such as days of the week, days of the month, and so forth. Determines the range over which the given elements will be filtered.</param>
      <param name="rangeElements">Specifies the elements within the date/time range designated by the <paramref name="dateRange" /> parameter that will be filtered. Can be a single value, for example, "7"; comma-separated values, for example, "5,6"; a range of values, such as "9-11"; or any variation thereof, such as "5,6,9-11".</param>
      <param name="inputSeriesNames">A comma-separated list of names of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> to be filtered.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Filter(System.Windows.Forms.DataVisualization.Charting.DateRangeType,System.String,System.String,System.String)">
      <summary>Filters the data points for one or more series, by either removing the specified points or by marking them as empty for the given date/time ranges.</summary>
      <param name="dateRange">A <see cref="T:System.Windows.Forms.DataVisualization.Charting.DateRangeType" /> enumeration value that represents a date/time interval, such as days of the week, days of the month, and so forth. Determines the range over which the given elements will be filtered.</param>
      <param name="rangeElements">Specifies the elements within the date/time range designated by the <paramref name="dateRange" /> parameter that will be filtered. Can be a single value, for example, "7"; comma-separated values, for example, "5,6"; a range of values, such as "9-11"; or any variation thereof, such as "5,6,9-11".</param>
      <param name="inputSeriesNames">A comma-separated list of names of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> to be filtered.</param>
      <param name="outputSeriesNames">A comma-separated list of names of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> that store the filtered data. Make sure that the number of output series matches the number of input series, otherwise an exception will be thrown.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Filter(System.Windows.Forms.DataVisualization.Charting.DateRangeType,System.String,System.Windows.Forms.DataVisualization.Charting.Series)">
      <summary>Filters the data points in a series, either by removing the specified points or by marking them as empty for the specified date/time ranges. The <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> object that is filtered is used to store the modified data.</summary>
      <param name="dateRange">A <see cref="T:System.Windows.Forms.DataVisualization.Charting.DateRangeType" /> enumeration value that represents a date/time interval, such as days of the week, days of the month, and so forth. Determines the range over which the given elements will be filtered.</param>
      <param name="rangeElements">Specifies the elements within the date/time range designated by the <paramref name="dateRange" /> parameter that will be filtered. Can be a single value, for example, "7"; comma-separated values, for example, "5,6"; a range of values, such as "9-11"; or any variation thereof, such as "5,6,9-11".</param>
      <param name="inputSeries">The <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> object to be filtered.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Filter(System.Windows.Forms.DataVisualization.Charting.DateRangeType,System.String,System.Windows.Forms.DataVisualization.Charting.Series,System.Windows.Forms.DataVisualization.Charting.Series)">
      <summary>Filters the data points in a series, either by removing the specified points or by marking them as empty for the given date/time ranges.</summary>
      <param name="dateRange">A <see cref="T:System.Windows.Forms.DataVisualization.Charting.DateRangeType" /> enumeration value that represents a date/time interval, such as days of the week, days of the month, and so forth. Determines the range over which the given elements will be filtered.</param>
      <param name="rangeElements">Specifies the elements within the date/time range designated by the <paramref name="dateRange" /> parameter that will be filtered. Can be a single value, for example, "7"; comma-separated values, for example, "5,6"; a range of values, such as "9-11"; or any variation thereof, such as "5,6,9-11".</param>
      <param name="inputSeries">The <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> object to be filtered.</param>
      <param name="outputSeries">A <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> object that stores the filtered data. If the series does not exist, an exception will be thrown.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Filter(System.Windows.Forms.DataVisualization.Charting.IDataPointFilter,System.String)">
      <summary>Performs custom filtering on the data points in one or more <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />, based on the points in the first series. The filtered <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> objects also store the modified data.</summary>
      <param name="filterInterface">An object that implements the <see cref="T:System.Windows.Forms.DataVisualization.Charting.IDataPointFilter" /> interface.</param>
      <param name="inputSeriesNames">A comma-separated list of names of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> to be filtered.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Filter(System.Windows.Forms.DataVisualization.Charting.IDataPointFilter,System.String,System.String)">
      <summary>Performs custom filtering on the data points in one or more series, based on the points of the first series.</summary>
      <param name="filterInterface">An object that implements the <see cref="T:System.Windows.Forms.DataVisualization.Charting.IDataPointFilter" /> interface.</param>
      <param name="inputSeriesNames">A comma-separated list of names of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> to be filtered.</param>
      <param name="outputSeriesNames">A comma-separated list of names of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> that store the filtered data. Make sure that the number of output series matches the number of input series, otherwise an exception will be thrown.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Filter(System.Windows.Forms.DataVisualization.Charting.IDataPointFilter,System.Windows.Forms.DataVisualization.Charting.Series)">
      <summary>Performs custom filtering on the data points in a series. The <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> object that is filtered also stores the modified data.</summary>
      <param name="filterInterface">An object that implements the <see cref="T:System.Windows.Forms.DataVisualization.Charting.IDataPointFilter" /> interface.</param>
      <param name="inputSeries">The <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> object that is filtered.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Filter(System.Windows.Forms.DataVisualization.Charting.IDataPointFilter,System.Windows.Forms.DataVisualization.Charting.Series,System.Windows.Forms.DataVisualization.Charting.Series)">
      <summary>Performs custom filtering on the data points in a series.</summary>
      <param name="filterInterface">An object that implements the <see cref="T:System.Windows.Forms.DataVisualization.Charting.IDataPointFilter" /> interface.</param>
      <param name="inputSeries">The <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> object to be filtered.</param>
      <param name="outputSeries">A <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> object that stores the filtered data. If the series does not exist, an exception will be thrown.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.DataManipulator.FilterMatchedPoints">
      <summary>Gets or sets a value that determines whether points are filtered if they match criteria specified in arguments in the Filter methods of this class. </summary>
      <returns>True if points that match specified criteria are filtered, false if points that do not match the criteria are filtered. The default value is true.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.DataManipulator.FilterSetEmptyPoints">
      <summary>Gets or sets a flag that indicates whether points filtered by the Filter or FilterTopN methods will be removed or marked as empty. </summary>
      <returns>True if filtered points will be marked as empty, false if they will be removed. The default value is false.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.FilterTopN(System.Int32,System.String)">
      <summary>Filters all data points in one or more series except for a specified number of points. The points that are not filtered correspond to points in the first series that have the largest first Y-values. The <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> objects that are filtered are used to store the modified data.</summary>
      <param name="pointCount">The number of data points that the filtering operation will not remove.</param>
      <param name="inputSeriesNames">A comma-separated list of names of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> to be filtered.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.FilterTopN(System.Int32,System.String,System.String)">
      <summary>Filters out data points in one or more series except for a specified number of points. The points that aren't filtered correspond to points in the first series that have the largest first Y-values.</summary>
      <param name="pointCount">The number of data points that the filtering operation will not remove.</param>
      <param name="inputSeriesNames">A comma-separated list of names of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> to be filtered.</param>
      <param name="outputSeriesNames">A comma-separated list of names of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> that store the filtered data. Make sure that the number of output series matches the number of input series, otherwise an exception will be thrown.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.FilterTopN(System.Int32,System.String,System.String,System.String)">
      <summary>Filters all data points in one or more series except for a specified number of data points. The points that are not filtered correspond to points in the first series that have the largest values.</summary>
      <param name="pointCount">The number of data points that the filtering operation will not remove.</param>
      <param name="inputSeriesNames">A comma-separated list of names of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> to be filtered.</param>
      <param name="outputSeriesNames">A comma-separated list of names of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> that store the filtered data. Make sure that the number of output series matches the number of input series, otherwise an exception will be thrown.</param>
      <param name="usingValue">The data point value that the filtering rule is applied to. Can be X, Y, Y2, Y3, and so forth.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.FilterTopN(System.Int32,System.String,System.String,System.String,System.Boolean)">
      <summary>Filters all data points in one or more series except for a specified number of points. The points that are not filtered correspond to points in the first input series that have the largest or smallest values.</summary>
      <param name="pointCount">The number of data points that the filtering operation will not remove.</param>
      <param name="inputSeriesNames">A comma-separated list of names of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> to be filtered.</param>
      <param name="outputSeriesNames">A comma-separated list of names of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> that store the filtered data. Make sure that the number of output series matches the number of input series, otherwise an exception will be thrown.</param>
      <param name="usingValue">The data point value that the filtering rule is applied to. Can be X, Y, Y2, Y3, and so forth.</param>
      <param name="getTopValues">True if the largest values are kept, false if the smallest values are kept.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.FilterTopN(System.Int32,System.Windows.Forms.DataVisualization.Charting.Series)">
      <summary>Filters out all data points in a series except for a specified number of points with the largest first Y-values. The <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> object that is filtered is used to store the modified data.</summary>
      <param name="pointCount">The number of data points that the filtering operation will not remove.</param>
      <param name="inputSeries">The <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> object to be filtered.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.FilterTopN(System.Int32,System.Windows.Forms.DataVisualization.Charting.Series,System.Windows.Forms.DataVisualization.Charting.Series)">
      <summary>Filters all data points in a series except for a specified number of points with the largest first Y-values. </summary>
      <param name="pointCount">The number of data points that the filtering operation will not remove.</param>
      <param name="inputSeries">The <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> object to be filtered.</param>
      <param name="outputSeries">A <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> object that stores the filtered data. If the series does not exist, an exception will be thrown.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.FilterTopN(System.Int32,System.Windows.Forms.DataVisualization.Charting.Series,System.Windows.Forms.DataVisualization.Charting.Series,System.String)">
      <summary>Filters all data points in a series except for a specified number of data points with the largest values.</summary>
      <param name="pointCount">The number of data points that the filtering operation will not remove.</param>
      <param name="inputSeries">The <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> object to be filtered.</param>
      <param name="outputSeries">A <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> object that stores the filtered data. If the series does not exist, an exception will be thrown.</param>
      <param name="usingValue">The data point value that the filtering rule is applied to. Can be X, Y, Y2, Y3, and so forth.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.FilterTopN(System.Int32,System.Windows.Forms.DataVisualization.Charting.Series,System.Windows.Forms.DataVisualization.Charting.Series,System.String,System.Boolean)">
      <summary>Filters all data points in a series except for a specified number of points with the smallest or largest values.</summary>
      <param name="pointCount">The number of data points that the filtering operation will not remove.</param>
      <param name="inputSeries">The <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> object to be filtered.</param>
      <param name="outputSeries">A <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> object that stores the filtered data. If the series does not exist, an exception will be thrown.</param>
      <param name="usingValue">The data point value that the filtering rule is applied to. Can be X, Y, Y2, Y3, and so forth.</param>
      <param name="getTopValues">True if the largest values are kept, false if the smallest values are kept.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Group(System.String,System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.String)">
      <summary>Groups data for one or more series, using one or more formulas. Series are cleared of their original data and used to store the new data points.</summary>
      <param name="formula">A comma-separated list of one or more formulas to be used for calculating the grouped data point values.</param>
      <param name="interval">The size of the interval checked for missing data points.</param>
      <param name="intervalType">The unit of measurement for the <paramref name="interval" /> parameter.</param>
      <param name="intervalOffset">The interval offset size.</param>
      <param name="intervalOffsetType">The unit of measurement for the interval offset.</param>
      <param name="inputSeriesName">A comma-separated list of names of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> to be grouped.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Group(System.String,System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.String,System.String)">
      <summary>Groups one or more series, using one or more formulas. Output series are used to store the grouped data points, and an offset can be used for intervals.</summary>
      <param name="formula">A comma-separated list of one or more formulas to be used for calculating the grouped data point values.</param>
      <param name="interval">The size of the interval checked for missing data points.</param>
      <param name="intervalType">The unit of measurement for the <paramref name="interval" /> parameter.</param>
      <param name="intervalOffset">The interval offset size.</param>
      <param name="intervalOffsetType">The unit of measurement for the interval offset.</param>
      <param name="inputSeriesName">A comma-separated list of names of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> to be grouped.</param>
      <param name="outputSeriesName">A comma-separated list of names of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> that will store the grouped data points. If a series does not exist, it will be created; if it does exist, it will first be cleared of all data before storing grouped data points. The number of output series must equal the number of input series, or an exception will be thrown.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Group(System.String,System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.Windows.Forms.DataVisualization.Charting.Series)">
      <summary>Groups data using one or more formulas. The series that is grouped is cleared of its original data, and used to store the new data points.</summary>
      <param name="formula">A comma-separated list of one or more formulas to be used for calculating the grouped data point values.</param>
      <param name="interval">The size of the interval checked for missing data points.</param>
      <param name="intervalType">The unit of measurement for the <paramref name="interval" /> parameter.</param>
      <param name="intervalOffset">The interval offset size.</param>
      <param name="intervalOffsetType">The unit of measurement for the interval offset.</param>
      <param name="inputSeries">The <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> object to be grouped.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Group(System.String,System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.Windows.Forms.DataVisualization.Charting.Series,System.Windows.Forms.DataVisualization.Charting.Series)">
      <summary>Groups a series using one or more formulas. An output series is used to store the grouped data points, and an offset can be used for intervals.</summary>
      <param name="formula">A comma-separated list of one or more formulas to be used for calculating the grouped data point values.</param>
      <param name="interval">The size of the interval checked for missing data points.</param>
      <param name="intervalType">The unit of measurement for the <paramref name="interval" /> parameter.</param>
      <param name="intervalOffset">The interval offset size.</param>
      <param name="intervalOffsetType">The unit of measurement for the interval offset.</param>
      <param name="inputSeries">The <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> object to be grouped.</param>
      <param name="outputSeries">The <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> that will store the new data points created by the grouping operation. If it does not exist, an exception will be thrown.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Group(System.String,System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.String)">
      <summary>Groups data using one or more formulas, for one or more series. Series are cleared of their original data and used to store the new data points.</summary>
      <param name="formula">A comma-separated list of one or more formulas to be used for calculating the grouped data point values.</param>
      <param name="interval">The size of the interval checked for missing data points.</param>
      <param name="intervalType">The unit of measurement for the <paramref name="interval" /> parameter.</param>
      <param name="inputSeriesName">A comma-separated list of names of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> to be grouped.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Group(System.String,System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.String,System.String)">
      <summary>Groups data for one or more series, using one or more formulas. Output series are used to store the grouped data points.</summary>
      <param name="formula">A comma-separated list of one or more formulas to be used for calculating the grouped data point values.</param>
      <param name="interval">The size of the interval checked for missing data points.</param>
      <param name="intervalType">The unit of measurement for the <paramref name="interval" /> parameter.</param>
      <param name="inputSeriesName">A comma-separated list of names of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> to be grouped.</param>
      <param name="outputSeriesName">A comma-separated list of names of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> that will store the grouped data points. If a series does not exist, it will be created; if it does exist, it will first be cleared of all data before storing grouped data points. The number of output series must equal the number of input series, or an exception will be thrown.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Group(System.String,System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.Windows.Forms.DataVisualization.Charting.Series)">
      <summary>Groups data using one or more formulas. The series that is grouped is cleared of its original data, and used to store the new data points.</summary>
      <param name="formula">A comma-separated list of one or more formulas to be used for calculating the grouped data point values.</param>
      <param name="interval">The size of the interval checked for missing data points.</param>
      <param name="intervalType">The unit of measurement for the <paramref name="interval" /> parameter.</param>
      <param name="inputSeries">The <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> object to be grouped.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Group(System.String,System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.Windows.Forms.DataVisualization.Charting.Series,System.Windows.Forms.DataVisualization.Charting.Series)">
      <summary>Groups a series' data using one or more formulas. An output series is used to store the grouped data points.</summary>
      <param name="formula">A comma-separated list of one or more formulas to be used for calculating the grouped data point values.</param>
      <param name="interval">The size of the interval checked for missing data points.</param>
      <param name="intervalType">The unit of measurement for the <paramref name="interval" /> parameter.</param>
      <param name="inputSeries">The <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> object to be grouped.</param>
      <param name="outputSeries">The <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> that will store the new data points created by the grouping operation. If it does not exist, an exception will be thrown.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.GroupByAxisLabel(System.String,System.String)">
      <summary>Groups data points from one or more series by axis labels, using one or more formulas. Original data point values are cleared, and each of the series then stores its new grouped data points.</summary>
      <param name="formula">A comma-separated list of one or more formulas to be used for calculating the grouped data point values.</param>
      <param name="inputSeriesName">A comma-separated list of names of the input <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.GroupByAxisLabel(System.String,System.String,System.String)">
      <summary>Groups the data points in one or more series by axis labels, using one or more formulas. Output series are used to store the grouped data points.</summary>
      <param name="formula">A comma-separated list of one or more formulas to be used for calculating the grouped data point values.</param>
      <param name="inputSeriesName">A comma-separated list of names of the input <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />.</param>
      <param name="outputSeriesName">A comma-separated list of names of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> that will store the grouped data points. If a series does not exist, it will be created; if it does exist, it will first be cleared of all data before storing grouped data points. The number of output series must equal the number of input series, or an exception will be thrown.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.GroupByAxisLabel(System.String,System.Windows.Forms.DataVisualization.Charting.Series)">
      <summary>Groups data points in a series by axis labels, using one or more formulas. Original data point values are cleared, and the series then stores the new grouped data points.</summary>
      <param name="formula">A comma-separated list of one or more formulas to be used for calculating the grouped data point values.</param>
      <param name="inputSeries">The input <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.GroupByAxisLabel(System.String,System.Windows.Forms.DataVisualization.Charting.Series,System.Windows.Forms.DataVisualization.Charting.Series)">
      <summary>Groups the data points in a series by axis labels, using one or more formulas. An output series is used to store the grouped data points.</summary>
      <param name="formula">A comma-separated list of one or more formulas to be used for calculating the grouped data point values.</param>
      <param name="inputSeries">The input <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> to be grouped.</param>
      <param name="outputSeries">The <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> that will store the new data points created by the grouping operation. If it does not exist, an exception will be thrown.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.InsertEmptyPoints(System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.Double,System.Double,System.String)">
      <summary>Replaces the missing data points in one or more series with empty points. Each series is checked for a given interval that is determined by the <paramref name="interval" />, <paramref name="intervalOffset" />, <paramref name="intervalOffsetType" /> and <paramref name="intervalType" /> arguments. The series range that is checked is determined by the <paramref name="toXValue" /> and <paramref name="fromXValue" /> arguments.</summary>
      <param name="interval">The size of the interval checked for missing data points.</param>
      <param name="intervalType">The unit of measurement for the <paramref name="interval" /> parameter.</param>
      <param name="intervalOffset">The interval offset size.</param>
      <param name="intervalOffsetType">The unit of measurement for the interval offset.</param>
      <param name="fromXValue">The starting point for the series range to be checked. Uses the X-values of the data points.</param>
      <param name="toXValue">The end point for the series range to be checked. Uses the X-values of the data points.</param>
      <param name="seriesName">A comma-separated list of names of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> to be checked.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.InsertEmptyPoints(System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.Double,System.Double,System.Windows.Forms.DataVisualization.Charting.Series)">
      <summary>Replaces the missing data points in a series with empty points. The series is checked for a given interval that is determined by the <paramref name="interval" />, <paramref name="intervalOffset" />, <paramref name="intervalOffsetType " />and <paramref name="intervalType" /> arguments. The series range that is checked is determined by the <paramref name="toXValue" /> and <paramref name="fromXValue" /> arguments.</summary>
      <param name="interval">The size of the interval checked for missing data points.</param>
      <param name="intervalType">The unit of measurement for the <paramref name="interval" /> parameter.</param>
      <param name="intervalOffset">The interval offset size.</param>
      <param name="intervalOffsetType">The unit of measurement for the interval offset.</param>
      <param name="fromXValue">The starting point for the series range to be checked. Uses the X-values of the data points.</param>
      <param name="toXValue">The end point for the series range to be checked. Uses the X-values of the data points.</param>
      <param name="series">The <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> in which to insert the empty points.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.InsertEmptyPoints(System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.String)">
      <summary>Replaces the missing data points in one or more series with empty points. Each series is checked for a given interval that is determined by the <paramref name="interval" />, <paramref name="intervalOffset" />, <paramref name="intervalOffsetType" /> and <paramref name="intervalType" /> arguments.</summary>
      <param name="interval">The size of the interval checked for missing data points.</param>
      <param name="intervalType">The unit of measurement for the <paramref name="interval" /> parameter.</param>
      <param name="intervalOffset">The interval offset size.</param>
      <param name="intervalOffsetType">The unit of measurement for the interval offset.</param>
      <param name="seriesName">A comma-separated list of names of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> to be checked.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.InsertEmptyPoints(System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.Windows.Forms.DataVisualization.Charting.Series)">
      <summary>Replaces the missing data points in a series with empty points. The series is checked for a given interval that is determined by the <paramref name="interval" />, <paramref name="intervalOffset" />, <paramref name="intervalOffsetType" /> and <paramref name="intervalType" /> arguments.</summary>
      <param name="interval">The size of the interval checked for missing data points.</param>
      <param name="intervalType">The unit of measurement for the <paramref name="interval" /> parameter.</param>
      <param name="intervalOffset">The interval offset size.</param>
      <param name="intervalOffsetType">The unit of measurement for the interval offset.</param>
      <param name="series">The <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> object in which to insert the empty points.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.InsertEmptyPoints(System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.String)">
      <summary>Replaces the missing data points in one or more series with empty points. Each series is checked for a given interval that is determined by the <paramref name="interval" /> and <paramref name="intervalType" /> arguments.</summary>
      <param name="interval">The size of the interval checked for missing data points.</param>
      <param name="intervalType">The unit of measurement for the <paramref name="interval" /> parameter.</param>
      <param name="seriesName">A comma-separated list of names of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> to be checked.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.InsertEmptyPoints(System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.Windows.Forms.DataVisualization.Charting.Series)">
      <summary>Replaces the missing data points in a series with empty points. The series is checked for a given interval that is determined by the <paramref name="interval" /> and <paramref name="intervalType" /> arguments. </summary>
      <param name="interval">The size of the interval checked for missing data points.</param>
      <param name="intervalType">The unit of measurement for the <paramref name="interval" /> parameter.</param>
      <param name="series">The <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> object that is checked.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Sort(System.Collections.Generic.IComparer{System.Windows.Forms.DataVisualization.Charting.DataPoint},System.String)">
      <summary>Performs a custom sort on one or more series.</summary>
      <param name="comparer">An object that implements the <see cref="T:System.Collections.IComparer" /> interface and provides the custom sorting logic.</param>
      <param name="seriesName">A comma-separated list of names of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> to be sorted.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Sort(System.Collections.Generic.IComparer{System.Windows.Forms.DataVisualization.Charting.DataPoint},System.Windows.Forms.DataVisualization.Charting.Series)">
      <summary>Performs a custom sort on the data points in a series.</summary>
      <param name="comparer">An object that implements the <see cref="T:System.Collections.IComparer" /> interface and provides the custom sorting logic.</param>
      <param name="series">The <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> object to be sorted.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Sort(System.Windows.Forms.DataVisualization.Charting.PointSortOrder,System.String)">
      <summary>Performs a sort on the data points in one or more series, using the specified order. The sort is based on the first Y-value of each of the data points.</summary>
      <param name="pointSortOrder">A <see cref="T:System.Windows.Forms.DataVisualization.Charting.PointSortOrder" /> enumeration value that determines if the sort is ascending or descending.</param>
      <param name="seriesName">A comma-separated list of names of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> to be sorted.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Sort(System.Windows.Forms.DataVisualization.Charting.PointSortOrder,System.String,System.String)">
      <summary>Sorts the data points of one or more series in the specified order. The sort can be based on any available data point value.</summary>
      <param name="pointSortOrder">A <see cref="T:System.Windows.Forms.DataVisualization.Charting.PointSortOrder" /> enumeration value that determines if the sort is ascending or descending.</param>
      <param name="sortBy">A string value that represents the data point values to be sorted. Possible values are: "X", "Y", "Y2", "Y3", "AxisLabel", and so forth.</param>
      <param name="seriesName">A comma-separated list of names of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> to be sorted.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Sort(System.Windows.Forms.DataVisualization.Charting.PointSortOrder,System.String,System.Windows.Forms.DataVisualization.Charting.Series)">
      <summary>Performs a sort on the data points in a series using the specified order. The sort can be based on any available data point value.</summary>
      <param name="pointSortOrder">A <see cref="T:System.Windows.Forms.DataVisualization.Charting.PointSortOrder" /> enumeration value that determines if the sort is ascending or descending</param>
      <param name="sortBy">A string value that represents the data point values to be sorted. Possible values are: "X", "Y", "Y2", "Y3", "AxisLabel", and so forth.</param>
      <param name="series">The <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> object to be sorted.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Sort(System.Windows.Forms.DataVisualization.Charting.PointSortOrder,System.Windows.Forms.DataVisualization.Charting.Series)">
      <summary>Performs a sort on the data points in a series using the specified order. The sort is based on the first Y-value of each of the data points.</summary>
      <param name="pointSortOrder">A <see cref="T:System.Windows.Forms.DataVisualization.Charting.PointSortOrder" /> enumeration value that determines if the sort is ascending or descending.</param>
      <param name="series">The <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> object to be sorted.</param>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.DataPoint">
      <summary>Represents a data point that is stored in the <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPointCollection" /> class.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataPoint.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" /> class.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataPoint.#ctor(System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" /> class with the specified X and Y-value.</summary>
      <param name="xValue">The X-value of the data point.</param>
      <param name="yValue">The Y-value of the data point.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataPoint.#ctor(System.Double,System.Double[])">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" /> class with the specified X-value and an array of Y-values.</summary>
      <param name="xValue">The X-value.</param>
      <param name="yValues">An array of Y-values.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataPoint.#ctor(System.Double,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" /> class with the specified X-value and Y-values.</summary>
      <param name="xValue">The X-value of the data point.</param>
      <param name="yValues">A string of Y-values separated by commas.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataPoint.#ctor(System.Windows.Forms.DataVisualization.Charting.Series)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" /> class, and sets the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> that the data point belongs to.</summary>
      <param name="series">The <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> object that the data point belongs to.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataPoint.Clone">
      <summary>Returns an exact copy of the data point.</summary>
      <returns>A cloned <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" /> object.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataPoint.GetValueByName(System.String)">
      <summary>Returns a data point that is specified by its name. This is a helper function.</summary>
      <returns>A string value that represents a data point.</returns>
      <param name="valueName">Point value names. X, Y, Y2...</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.DataPoint.IsEmpty">
      <summary>Gets or sets a flag that indicates whether a data point is marked as empty.</summary>
      <returns>True if the point is marked as an empty point, otherwise false. The default value is false.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.DataPoint.Name">
      <summary>Gets or sets the name of the data point.</summary>
      <returns>A string value that represents the text name of the item.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataPoint.SetValueXY(System.Object,System.Object[])">
      <summary>Sets the X-value and one or more Y-values of the data point.</summary>
      <param name="xValue">The X-value of the data point.</param>
      <param name="yValue">A list of Y-values of the data point.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataPoint.SetValueY(System.Object[])">
      <summary>Sets the Y-value(s) of a single data point.</summary>
      <param name="yValue">The Y-value(s) of a <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" /> object in the collection. Formatted as one or more values separated by commas.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.DataPoint.XValue">
      <summary>Gets or sets the X-value of a data point.</summary>
      <returns>A double that represents the X-value of a data point.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.DataPoint.YValues">
      <summary>Gets or sets the Y-value(s) of a data point.</summary>
      <returns>An array of double values that represent the Y-value(s) of a data point.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.DataPointCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" /> objects.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataPointCollection.Add(System.Double[])">
      <summary>Adds a new <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" /> object to the collection and sets its Y value.</summary>
      <returns>The new <see cref="T:System.Web.UI.DataVisualization.Charting.DataPoint" /> object.</returns>
      <param name="y">The Y-value.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataPointCollection.AddXY(System.Double,System.Double)">
      <summary>Adds a <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" /> object to the end of the collection, with the specified X-value and Y-value.</summary>
      <returns>An integer that represents the zero-based index where the item was inserted into the data point collection.</returns>
      <param name="xValue">X-value of the data point.</param>
      <param name="yValue">Y-value of the data point.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataPointCollection.AddXY(System.Object,System.Object[])">
      <summary>Adds a <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" /> object to the end of the collection, with the specified X-value and Y-value(s).</summary>
      <returns>An integer value that represents the zero-based index where the item was inserted into the collection.</returns>
      <param name="xValue">The X value of the data point.</param>
      <param name="yValue">One or more comma-separated values that represent the Y-value(s) of the data point.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataPointCollection.AddY(System.Double)">
      <summary>Adds a <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" /> object to the end of the collection, with the specified Y-value.</summary>
      <returns>An integer that represents the zero-based index where the item was inserted into the data point collection.</returns>
      <param name="yValue">The Y-value of the data point.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataPointCollection.AddY(System.Object[])">
      <summary>Adds a <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" /> object to the end of the collection, with the specified Y-value(s).</summary>
      <returns>An integer that represents the location in zero-based index where the item was inserted into the collection.</returns>
      <param name="yValue">A comma-separated list of Y-value(s) of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" /> object added to the collection.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataPointCollection.ClearItems">
      <summary>Removes all elements from the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataPointCollection.DataBind(System.Collections.IEnumerable,System.String,System.String,System.String)">
      <summary>Data binds the X-value, Y-value(s) and property values of the data points, such as Tooltip or LabelStyle, to the data source. </summary>
      <param name="dataSource">The data source.</param>
      <param name="xField">The name of the field for X-values.</param>
      <param name="yFields">A comma separated names of the fields for Y-values.</param>
      <param name="otherFields">Other data point properties with binding rules, in the format: PointProperty=Field[{Format}] [,PointProperty=Field[{Format}]]. For example: "Tooltip=Price{C1},Url=WebSiteName".</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataPointCollection.DataBindXY(System.Collections.IEnumerable,System.Collections.IEnumerable[])">
      <summary>Data binds the X-value and Y-values of the collection's data points to the first columns of the specified data source.</summary>
      <param name="xValue">The data source that will supply the X-values for the data points.</param>
      <param name="yValues">A comma-separated list of the Y-value(s) of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" /> object added to the collection.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataPointCollection.DataBindXY(System.Collections.IEnumerable,System.String,System.Collections.IEnumerable,System.String)">
      <summary>Data binds the X-value and Y-values of the data points in the collection to the specified columns of the specified data sources.</summary>
      <param name="xValue">The data source that will supply the X-values for the data points.</param>
      <param name="xField">The name of the column that will supply the X-values for the data points.</param>
      <param name="yValue">A comma-separated list of the Y-value(s) of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" /> object added to the collection.</param>
      <param name="yFields">A comma-separated list of column name(s) that will supply the Y-values for the data points. Note that a comma can be embedded as part of a column name, by using a double comma.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataPointCollection.DataBindY(System.Collections.IEnumerable,System.String)">
      <summary>Data binds the Y-value(s) of the data points to the specified column(s) of the specified data source.</summary>
      <param name="yValue">An <see cref="T:System.Collections.Generic.IEnumerable`1" />data source object that provides the Y-value(s).</param>
      <param name="yFields">The data source field(s) to which to bind data point(s). Note that a comma can be embedded as part of a column name, by using a double comma.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataPointCollection.DataBindY(System.Collections.IEnumerable[])">
      <summary>Data binds the Y-value(s) of the collection's data points to the first column of the specified data source(s).</summary>
      <param name="yValue">One or more comma-separated <see cref="T:System.Collections.Generic.IEnumerable`1" /> data sources.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataPointCollection.FindAllByValue(System.Double)">
      <summary>Find all the data points that are equal to the specified value.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> interface that represents the enumerator of the matching data points.</returns>
      <param name="valueToFind">The data point value to find.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataPointCollection.FindAllByValue(System.Double,System.String)">
      <summary>Finds all the data points that are equal to the specified value.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> interface that represents the enumerator of the matching data points.</returns>
      <param name="valueToFind">The data point value to find.</param>
      <param name="useValue">The data point value to use (X, Y1, Y2...).</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataPointCollection.FindAllByValue(System.Double,System.String,System.Int32)">
      <summary>Finds all the data points that are equal to the specified value, starting from the specified index location.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> interface that represents the enumerator of the matching data points.</returns>
      <param name="valueToFind">The data point value to find.</param>
      <param name="useValue">The data point value to use (X, Y1, Y2...).</param>
      <param name="startIndex">The index location of the data point to start searching from.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataPointCollection.FindByValue(System.Double)">
      <summary>Finds the first data point that is equal to the specified value.</summary>
      <returns>The <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" /> that matches the specified value, or null if there is no match.</returns>
      <param name="valueToFind">The data point value to find.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataPointCollection.FindByValue(System.Double,System.String)">
      <summary>Finds the first data point that is equal to the specified value.</summary>
      <returns>The <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" /> that matches the specified value, or null if there is no match.</returns>
      <param name="valueToFind">The data point value to find.</param>
      <param name="useValue">The data point value to use (X, Y1, Y2...).</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataPointCollection.FindByValue(System.Double,System.String,System.Int32)">
      <summary>Finds the first data point that is equal to the specified value, starting from the specified index location.</summary>
      <returns>The <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" /> that matches the specified value, or null if there is no match.</returns>
      <param name="valueToFind">The data point value to find.</param>
      <param name="useValue">The data point value to use (X, Y1, Y2...).</param>
      <param name="startIndex">The index location of the data point to start searching from.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataPointCollection.FindMaxByValue">
      <summary>Finds  the data point with the maximum value.</summary>
      <returns>The <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" /> object with the maximum value.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataPointCollection.FindMaxByValue(System.String)">
      <summary>Finds the data point value with the maximum value.</summary>
      <returns>The <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" /> object with the maximum value.</returns>
      <param name="useValue">The data point value to use (X, Y1, Y2...).</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataPointCollection.FindMaxByValue(System.String,System.Int32)">
      <summary>Finds the data point with the maximum value, starting from the specified index location.</summary>
      <returns>The <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" /> object with the maximum value.</returns>
      <param name="useValue">The data point value to use (X, Y1, Y2...).</param>
      <param name="startIndex">The index location of the data point to start searching from.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataPointCollection.FindMinByValue">
      <summary>Finds the data point with the minimum value.</summary>
      <returns>The <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" /> object with the minimum value.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataPointCollection.FindMinByValue(System.String)">
      <summary>Finds the data point with the minimum value.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" /> object with the minimum value.</returns>
      <param name="useValue">The data point value to use (X, Y1, Y2...).</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataPointCollection.FindMinByValue(System.String,System.Int32)">
      <summary>Finds the data point with the minimum value, starting from the specified index location.</summary>
      <returns>The <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" /> object with the minimum value.</returns>
      <param name="useValue">The data point value to use (X, Y1, Y2...).</param>
      <param name="startIndex">The index location of the data point to start searching from.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataPointCollection.InsertXY(System.Int32,System.Object,System.Object[])">
      <summary>Inserts a data point with the specified X value and one or more specified Y values.</summary>
      <param name="index">The index after which the data point will be inserted.</param>
      <param name="xValue">The X value of the data point.</param>
      <param name="yValue">A comma-separated list of Y values of the data point.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataPointCollection.InsertY(System.Int32,System.Object[])">
      <summary>Inserts a data point with one or more specified Y values.</summary>
      <param name="index">The index after which the data point will be inserted.</param>
      <param name="yValue">A comma-separated list of Y values of the data point.</param>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.DataPointComparer">
      <summary>Compares data points.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataPointComparer.#ctor(System.Windows.Forms.DataVisualization.Charting.Series,System.Windows.Forms.DataVisualization.Charting.PointSortOrder,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPointComparer" /> class with the specified data series, sort order and sort value.</summary>
      <param name="series">Data series.</param>
      <param name="sortOrder">Sort order.</param>
      <param name="sortBy">Value used for the sort, for example, "X", "Y or Y1", "Y2", and so forth.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataPointComparer.Compare(System.Windows.Forms.DataVisualization.Charting.DataPoint,System.Windows.Forms.DataVisualization.Charting.DataPoint)">
      <summary>Compares two data points.</summary>
      <returns>An integer value. Returns zero (0) if the two values are equal. Returns a positive integer if the value of <paramref name="x" /> is greater than the value of <paramref name="y" />; otherwise, returns a negative integer.</returns>
      <param name="x">First data point.</param>
      <param name="y">Second data point.</param>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties">
      <summary>Defines custom properties that are common to data points, series and empty points.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties" /> class.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.#ctor(System.Windows.Forms.DataVisualization.Charting.Series,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties" /> class with the specified series and custom properties flag.</summary>
      <param name="series">The series that the data point belongs to.</param>
      <param name="pointProperties">A flag that indicates whether this is a data point custom property.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.AxisLabel">
      <summary>Gets or sets the text of the X-axis label for the data point, series or an empty point. This property is only used if a custom label has not been specified for the relevant <see cref="T:System.Windows.Forms.DataVisualization.Charting.Axis" /> object.</summary>
      <returns>A string value that represents the text of the X-axis label.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.BackGradientStyle">
      <summary>Gets or sets the background gradient style.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.GradientStyle" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.BackHatchStyle">
      <summary>Gets or sets the background hatching style.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.BackImage">
      <summary>Gets or sets the background image of the data point.</summary>
      <returns>A string value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.BackImageAlignment">
      <summary>Gets or sets the alignment of the background image, which is used with the <see cref="F:System.Windows.Forms.DataVisualization.Charting.ChartImageWrapMode.Unscaled" /> drawing mode.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartImageAlignmentStyle" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.BackImageTransparentColor">
      <summary>Gets or sets a color that will be replaced with a transparent color when the background image is drawn.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value that will be replaced with a transparent color when the image is drawn.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.BackImageWrapMode">
      <summary>Gets or sets the drawing mode of the background image.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartImageWrapMode" /> enumeration value that defines the drawing mode of the image.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.BackSecondaryColor">
      <summary>Gets or sets the secondary background color.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.BorderColor">
      <summary>Gets or sets the border color of the data point.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.BorderDashStyle">
      <summary>Gets or sets the border style of the data point.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartDashStyle" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.BorderWidth">
      <summary>Gets or sets the border width of the data point.</summary>
      <returns>An integer value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.Color">
      <summary>Gets or sets the color of the data point.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.CustomProperties">
      <summary>Gets or sets the custom properties of the data point. Custom properties can be specified in the following format: AttrName1=Value1, AttrName2=Value2 …</summary>
      <returns>A string value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.CustomPropertiesExtended">
      <summary>Gets or sets the extended custom properties of the data point. Extended custom properties can be specified in the following format: AttrName1=Value1, AttrName2=Value2...</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.CustomProperties" /> object.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.DeleteCustomProperty(System.String)">
      <summary>Deletes the data point custom property with the specified name.</summary>
      <param name="name">The name of the property to delete.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.Font">
      <summary>Gets or sets the font of the data point.</summary>
      <returns>A <see cref="T:System.Drawing.Font" /> value.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.GetCustomProperty(System.String)">
      <summary>Returns the data point custom property with the specified name.</summary>
      <returns>A string value that represents the data point custom property with the specified name. If the requested property is not set, the default custom property of the data series will be returned.</returns>
      <param name="name">The name of the property to return.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.IsCustomPropertySet(System.String)">
      <summary>Determines whether a custom property with the specified name was set.</summary>
      <returns>True if the custom property was set, otherwise false.</returns>
      <param name="name">The name of the custom property to check.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.IsValueShownAsLabel">
      <summary>Gets or sets a flag that indicates whether to show the value of the data point on the label.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.IsVisibleInLegend">
      <summary>Gets or sets a flag that indicates whether the item is shown in the legend.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.Item(System.Int32)">
      <summary>Gets the <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties" /> object by its position in the index.</summary>
      <returns>A string value.</returns>
      <param name="index">Index of the custom property.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.Item(System.String)">
      <summary>Gets or sets the <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties" /> object by name.</summary>
      <returns>A string value.</returns>
      <param name="name">The name of the custom property.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.Label">
      <summary>Gets or sets the text of the data point label.</summary>
      <returns>A string value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.LabelAngle">
      <summary>Gets or sets the angle of the data point label.</summary>
      <returns>An integer value that represents the angle of the label.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.LabelBackColor">
      <summary>Gets or sets the background color of the data point label.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.LabelBorderColor">
      <summary>Gets or sets the border color of the data point label.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.LabelBorderDashStyle">
      <summary>Gets or sets the border style of the label.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartDashStyle" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.LabelBorderWidth">
      <summary>Gets or sets the border width of the label.</summary>
      <returns>An integer value that represents the width of the border.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.LabelForeColor">
      <summary>Gets or sets the text color of the label.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.LabelFormat">
      <summary>Gets or sets the format of the data point label.</summary>
      <returns>A string value that represents the format of the label.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.LabelToolTip">
      <summary>Gets or sets the tooltip for the data point label.</summary>
      <returns>A string value that represents the tooltip for the data point label.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.LegendText">
      <summary>Gets or sets the text of the item in the legend.</summary>
      <returns>A string value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.LegendToolTip">
      <summary>Gets or sets the tooltip of the item in the legend.</summary>
      <returns>A string value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.MarkerBorderColor">
      <summary>Gets or sets the border color of the marker.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.MarkerBorderWidth">
      <summary>Gets or sets the border width of the marker.</summary>
      <returns>An integer value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.MarkerColor">
      <summary>Gets or sets the marker color.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.MarkerImage">
      <summary>Gets or sets the marker image.</summary>
      <returns>A string value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.MarkerImageTransparentColor">
      <summary>Gets or sets the color that will be replaced with a transparent color when the marker image is drawn.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.MarkerSize">
      <summary>Gets or sets the size of the marker.</summary>
      <returns>An integer value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.MarkerStyle">
      <summary>Gets or sets the marker style.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.MarkerStyle" /> enumeration value.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.ResetIsValueShownAsLabel">
      <summary>Resets a custom property to its default value.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.ResetIsVisibleInLegend">
      <summary>Resets a custom property to its default value.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.SetCustomProperty(System.String,System.String)">
      <summary>Sets a custom property of the data point.</summary>
      <param name="name">The name of the property.</param>
      <param name="propertyValue">The value of the property.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.SetDefault(System.Boolean)">
      <summary>Sets the default properties of the data point. Indicates whether the previous property values must be cleared.</summary>
      <param name="clearAll">A flag that indicates whether to clear previous property values.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties.ToolTip">
      <summary>Gets or sets the tooltip.</summary>
      <returns>A string value.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.DateRangeType">
      <summary>Specifies a date/time interval that determines the ranges that will be filtered when you invoke one of the Filter method definitionsfound in the <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataManipulator" /> class.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.DateRangeType.Year">
      <summary>Date/time interval is years.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.DateRangeType.Month">
      <summary>Date/time interval is months.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.DateRangeType.DayOfWeek">
      <summary>Date/time interval is days of the week.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.DateRangeType.DayOfMonth">
      <summary>Date/time interval is days of the month.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.DateRangeType.Hour">
      <summary>Date/time interval is hours.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.DateRangeType.Minute">
      <summary>Date/time interval is minutes.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType">
      <summary>Specifies an interval type.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType.Auto">
      <summary>Automatically determined by the <see cref="T:System.Web.UI.DataVisualization.Charting.Chart" /> control.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType.Number">
      <summary>Interval type is in numerical.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType.Years">
      <summary>Interval type is in years.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType.Months">
      <summary>Interval type is in months.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType.Weeks">
      <summary>Interval type is in weeks.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType.Days">
      <summary>Interval type is in days.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType.Hours">
      <summary>Interval type is in hours.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType.Minutes">
      <summary>Interval type is in minutes.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType.Seconds">
      <summary>Interval type is in seconds.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType.Milliseconds">
      <summary>Interval type is in milliseconds.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType.NotSet">
      <summary>The IntervalType or IntervalOffsetType property is not set. This value is used for grid lines, tick marks, strip lines and axis labels, and indicates that the interval type is being obtained from the <see cref="T:System.Web.UI.DataVisualization.Charting.Axis" /> object to which the element belongs. Setting this value for an <see cref="T:System.Web.UI.DataVisualization.Charting.Axis" /> object will have no effect.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.Docking">
      <summary>Specifies where a chart element, such as a legend or title, will be docked on the chart.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.Docking.Top">
      <summary>Docked to the top of either the chart image or a <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> object.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.Docking.Right">
      <summary>Docked to the right of either the chart image or a <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> object.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.Docking.Bottom">
      <summary>Docked to the bottom of either the chart image or a <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> object.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.Docking.Left">
      <summary>Docked to the left of either the chart image or a <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> object.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.ElementPosition">
      <summary>Represents the base class for many visual elements of the chart such as the legend, title, and chart areas. Defines the position of the chart element in relative coordinates, which range from (0,0) to (100,100).</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ElementPosition.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.ElementPosition" /> class.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ElementPosition.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.ElementPosition" /> class with the specified <paramref name="x" />, <paramref name="y" />, <paramref name="width" /> and <paramref name="height" /> parameters.</summary>
      <param name="x">The X position.</param>
      <param name="y">The Y position.</param>
      <param name="width">The width of the chart element.</param>
      <param name="height">The height of the chart element.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ElementPosition.Auto">
      <summary>Gets or sets a value that determines whether an applicable chart element will be positioned automatically by the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" /> control.</summary>
      <returns>A Boolean value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ElementPosition.Bottom">
      <summary>Gets the bottom position of a chart element, in relative coordinates.</summary>
      <returns>A float value that represents the relative position of the bottom of a chart element.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ElementPosition.FromRectangleF(System.Drawing.RectangleF)">
      <summary>Initializes an <see cref="T:System.Windows.Forms.DataVisualization.Charting.ElementPosition" /> object from a <see cref="T:System.Drawing.RectangleF" /> structure.</summary>
      <param name="rect">A <see cref="T:System.Drawing.RectangleF" /> structure.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ElementPosition.Height">
      <summary>Gets or sets the height of a chart element.</summary>
      <returns>A float value that represents the height of the chart element.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ElementPosition.Right">
      <summary>Gets the position of the right side of a chart element, in relative coordinates.</summary>
      <returns>A float value that represents the relative position of the right side of a chart element.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ElementPosition.Size">
      <summary>Gets the size of a chart element.</summary>
      <returns>A <see cref="T:System.Drawing.SizeF" /> value that represents the size of a chart element.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ElementPosition.ToRectangleF">
      <summary>Returns a <see cref="T:System.Drawing.RectangleF" /> object that uses the coordinates of an <see cref="T:System.Windows.Forms.DataVisualization.Charting.ElementPosition" /> object.</summary>
      <returns>A <see cref="T:System.Drawing.RectangleF" /> structure.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ElementPosition.Width">
      <summary>Gets or sets the width of a chart element.</summary>
      <returns>A float value that represents the width of a chart element.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ElementPosition.X">
      <summary>Gets or sets the relative X-coordinate of the top-left corner of an applicable chart element.</summary>
      <returns>A float value that represents the X-coordinate of the top-left corner of an applicable chart element.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ElementPosition.Y">
      <summary>Gets or sets the relative Y-coordinate of the top-left corner of an applicable chart element.</summary>
      <returns>A float value that represents the Y-coordinate of the top-left corner of an applicable chart element.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.EllipseAnnotation">
      <summary>Represents an ellipse annotation.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.EllipseAnnotation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.EllipseAnnotation" /> class.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.EllipseAnnotation.AnnotationType">
      <summary>Gets the annotation type name. </summary>
      <returns>The annotation type.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.FinancialFormula">
      <summary>Specifies a financial formula.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.FinancialFormula.AccumulationDistribution">
      <summary>Accumulation Distribution formula uses a relationship between volume and prices to estimate the strength of price movements; if volume is increased, there is a high probability that prices will go up.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.FinancialFormula.AverageTrueRange">
      <summary>Average True Range indicator measures commitment and compares the range between the High, Low and Close prices.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.FinancialFormula.BollingerBands">
      <summary>Bollinger Bands indicators are plotted at standard deviation levels above and below a simple moving average.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.FinancialFormula.ChaikinOscillator">
      <summary>Chaikin Oscillator indicator is the difference between a 3-day exponential moving average and a 10-day exponential moving average applied to the accumulation distribution.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.FinancialFormula.CommodityChannelIndex">
      <summary>Commodity Channel Index compares prices with their moving averages.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.FinancialFormula.DetrendedPriceOscillator">
      <summary>Detrended Price Oscillator attempts to remove trends from prices.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.FinancialFormula.EaseOfMovement">
      <summary>Ease of Movement deals with the relationship between volume and price change, and uses volume to indicate how strong a trend is for prices.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.FinancialFormula.Envelopes">
      <summary>Envelopes are plotted above and below a moving average using a specified percentage as the shift.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.FinancialFormula.ExponentialMovingAverage">
      <summary>An Exponential Moving Average is an average of data calculated over a period of time where the most recent days have more weight.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.FinancialFormula.Forecasting">
      <summary>Forecasting predicts future values using historical observations.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.FinancialFormula.MovingAverageConvergenceDivergence">
      <summary>The Moving Average Convergence/Divergence indicator compares two moving averages of prices and is used with a 9-day Exponential Moving average as a signal that indicates buying and selling moments.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.FinancialFormula.MassIndex">
      <summary>The Mass Index is used to predict trend reversal by comparing the difference and range between High and Low prices.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.FinancialFormula.MedianPrice">
      <summary>Median prices are mid-point values of daily prices and can be used as a filter for trend indicators.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.FinancialFormula.MoneyFlow">
      <summary>The Money Flow indicator compares upward changes and downward changes of volume-weighted typical prices.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.FinancialFormula.NegativeVolumeIndex">
      <summary>The Negative Volume Index should be used with the Positive Volume index; the Negative Volume Index only changes if the volume decreases from the previous day.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.FinancialFormula.OnBalanceVolume">
      <summary>The On Balance Volume indicator measures positive and negative volume flow.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.FinancialFormula.Performance">
      <summary>The Performance indicator compares a current closing price or any other price with the first closing value from the first time period.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.FinancialFormula.PositiveVolumeIndex">
      <summary>The Positive Volume Index should be used with the Negative Volume index. The Positive volume index only changes if the volume decreases from the previous day.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.FinancialFormula.PriceVolumeTrend">
      <summary>The Price Volume Trend is a cumulative volume total that is calculated using relative changes of the closing price, and should be used with other indicators.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.FinancialFormula.RateOfChange">
      <summary>The Rate of Change indicator compares a specified closing price with the current price.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.FinancialFormula.RelativeStrengthIndex">
      <summary>The Relative Strength Index is a momentum oscillator that compares upward movements of the closing price with downward movements, and results in values that range from 0 to 100.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.FinancialFormula.MovingAverage">
      <summary>A Simple Moving Average is an average of data calculated over a period of time. The moving average is the most popular price indicator used in technical analysis, and can be used with any price, for example, Hi, Low, Open and Close, or can be applied to other indicators.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.FinancialFormula.StandardDeviation">
      <summary>Standard Deviation is used to indicate volatility, and measures the difference between values, for example, closing price, and their moving average.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.FinancialFormula.StochasticIndicator">
      <summary>The Stochastic Indicator helps to find trend reversal by searching in a period for when the closing prices are close to low prices in an upward trending market and when the closing prices are close to high prices in a downward trending market.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.FinancialFormula.TriangularMovingAverage">
      <summary>A Triangular Moving Average is an average of data calculated over a period of time where the middle portion of data has more weight.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.FinancialFormula.TripleExponentialMovingAverage">
      <summary>The Triple Exponential Moving Average is based on a triple moving average of the closing price. Its purpose is to eliminate short cycles. This indicator keeps the closing price in trends that are shorter than the specified period.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.FinancialFormula.TypicalPrice">
      <summary>Typical Price is the average value of daily prices, and can be used as a filter for trend indicators.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.FinancialFormula.VolatilityChaikins">
      <summary>The Volatility Chaikins indicator measures the difference between High and Low prices, and is used to indicate tops or bottoms of the market.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.FinancialFormula.VolumeOscillator">
      <summary>The Volume Oscillator attempts to identify trends in volume by comparing two moving averages: one with a short period and another with a longer period.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.FinancialFormula.WeightedClose">
      <summary>The Weighted Close formula calculates the average value of daily prices. The only difference between Typical Price and the Weighted Close is that the closing price has extra weight, and is considered the most important price.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.FinancialFormula.WeightedMovingAverage">
      <summary>Weighted Moving Average is an average of data that is calculated over a period of time, where greater weight is attached to the most recent data.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.FinancialFormula.WilliamsR">
      <summary>Williams %R is a momentum indicator, and is used to measure overbought and oversold levels.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.FormatNumberEventArgs">
      <summary>Represents the event arguments of the localized number-formatting event.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.FormatNumberEventArgs.ElementType">
      <summary>Gets the chart element type.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartElementType" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.FormatNumberEventArgs.Format">
      <summary>Gets or sets the format string.</summary>
      <returns>A string value that represents the format.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.FormatNumberEventArgs.LocalizedValue">
      <summary>Gets or sets the localized text.</summary>
      <returns>A string value that represents the localized text.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.FormatNumberEventArgs.SenderTag">
      <summary>Gets the sender object of the event.</summary>
      <returns>The sender object of the event.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.FormatNumberEventArgs.Value">
      <summary>Gets the value to be formatted.</summary>
      <returns>A double value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.FormatNumberEventArgs.ValueType">
      <summary>Gets the value type.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartValueType" /> enumeration value.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.FTestResult">
      <summary>Stores results of the FTest statistical methods.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.FTestResult.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.FTestResult" /> class.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.FTestResult.FCriticalValueOneTail">
      <summary>Gets the Critical F one tail.</summary>
      <returns>A double value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.FTestResult.FirstSeriesMean">
      <summary>Gets the first series mean.</summary>
      <returns>A double value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.FTestResult.FirstSeriesVariance">
      <summary>Gets the first series variance.</summary>
      <returns>A double value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.FTestResult.FValue">
      <summary>Gets the F value.</summary>
      <returns>A double value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.FTestResult.ProbabilityFOneTail">
      <summary>Gets the Probability F one tail.</summary>
      <returns>A double value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.FTestResult.SecondSeriesMean">
      <summary>Gets the second series mean.</summary>
      <returns>A double value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.FTestResult.SecondSeriesVariance">
      <summary>Gets the second series variance.</summary>
      <returns>A double value.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.GradientStyle">
      <summary>Specifies a gradient style to be used for a chart element.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.GradientStyle.None">
      <summary>No gradient is applied.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.GradientStyle.LeftRight">
      <summary>Gradient is applied from left to right.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.GradientStyle.TopBottom">
      <summary>Gradient is applied from top to bottom.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.GradientStyle.Center">
      <summary>Gradient is applied from the center outwards.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.GradientStyle.DiagonalLeft">
      <summary>Gradient is applied diagonally from left to right.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.GradientStyle.DiagonalRight">
      <summary>Gradient is applied diagonally from right to left.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.GradientStyle.HorizontalCenter">
      <summary>Gradient is applied horizontally from the center outwards.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.GradientStyle.VerticalCenter">
      <summary>Gradient is applied vertically from the center outwards.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.Grid">
      <summary>Provides methods and properties that manage the major and minor grids of <see cref="T:System.Windows.Forms.DataVisualization.Charting.Axis" /> objects.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Grid.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Grid" /> class.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Grid.Enabled">
      <summary>Gets or sets a flag that determines whether major or minor grid lines are enabled.</summary>
      <returns>True if enabled, false if disabled. The default is true for major grid objects and false for minor grid objects.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Grid.Interval">
      <summary>Gets or sets the interval between major or minor grid lines.</summary>
      <returns>A double value that represents the interval between grid lines. By default, the value is not set (<see cref="F:System.Double.NaN" />) for major grid lines. For minor grid lines, the default value is zero (0).</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Grid.IntervalOffset">
      <summary>Gets or sets the offset of grid lines.</summary>
      <returns>A double value that represents the interval offset. </returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Grid.IntervalOffsetType">
      <summary>Gets or sets the interval offset type of major and minor grid lines.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType" /> enumeration value that indicates the interval type. By default it is not set for major grid lines. The default value for minor grid lines is <see cref="F:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType.Auto" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Grid.IntervalType">
      <summary>Gets or sets the interval type for major or minor grid lines.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType" /> enumeration value that indicates the interval type. By default it is not set for axis labels, major tick marks and major grid lines, by using the <see cref="F:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType.NotSet" /> enumeration value. The default value for minor tick marks and grid lines is <see cref="F:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType.Auto" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Grid.LineColor">
      <summary>Gets or sets the line color of a grid.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> object. The default value is <see cref="P:System.Drawing.Color.Black" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Grid.LineDashStyle">
      <summary>Gets or sets the line style of a grid.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartDashStyle" /> enumeration value. The default is <see cref="F:System.Windows.Forms.DataVisualization.Charting.ChartDashStyle.Solid" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Grid.LineWidth">
      <summary>Gets or sets the line width of major and minor grid lines.</summary>
      <returns>An integer that represents the line width in pixels. The default value is one (1).</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.GridTickTypes">
      <summary>Specifies the options for displaying a grid line or a tick mark for a custom label.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.GridTickTypes.None">
      <summary>No tick mark or grid line is shown.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.GridTickTypes.TickMark">
      <summary>A tick mark is shown.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.GridTickTypes.Gridline">
      <summary>A grid line is shown.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.GridTickTypes.All">
      <summary>A tick mark and a grid line are shown.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.HitTestResult">
      <summary>Represents the results of a hit test.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.HitTestResult.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.HitTestResult" /> class.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.HitTestResult.Axis">
      <summary>Gets or sets the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Axis" /> object that may be associated with a chart element returned by a hit test. The presence of an associated <see cref="T:System.Windows.Forms.DataVisualization.Charting.Axis" /> object depends on whether a chart element was detected at the given location, and the type of chart element returned.</summary>
      <returns>An <see cref="T:System.Windows.Forms.DataVisualization.Charting.Axis" /> object, otherwise null. The default value is null.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.HitTestResult.ChartArea">
      <summary>Gets or sets the <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> object that may be associated with a chart element returned by a hit test. The presence of a <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> object depends on whether a chart element was detected at the given location, and the type of chart element returned.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> object, otherwise null. The default value is null.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.HitTestResult.ChartElementType">
      <summary>Gets or sets the type of chart element, if any, returned by a hit test.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartElementType" /> enumeration value that indicates the type of chart element returned by a hit test. Defaults to <see cref="F:System.Windows.Forms.DataVisualization.Charting.ChartElementType.Nothing" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.HitTestResult.Object">
      <summary>Gets or sets the object, if any, returned by a hit test.</summary>
      <returns>An object of type <see cref="T:System.Object" />, otherwise null.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.HitTestResult.PointIndex">
      <summary>Gets or sets the index of a data point, if any, returned by a hit test.</summary>
      <returns>An integer value that represents the index of a data point returned by a hit test. The default value is negative one (-1).</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.HitTestResult.Series">
      <summary>Gets or sets the associated series of a data point, if any, returned by a hit test.</summary>
      <returns>The <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> that a data point returned by a hit test belongs to. The default value is null.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.HitTestResult.SubObject">
      <summary>Gets the sub-object, if any, returned by a hit test.</summary>
      <returns>A sub-object of type <see cref="T:System.Object" />, otherwise null.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.HorizontalLineAnnotation">
      <summary>Represents a horizontal line annotation.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.HorizontalLineAnnotation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.HorizontalLineAnnotation" /> class.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.HorizontalLineAnnotation.AnnotationType">
      <summary>Gets the annotation type name.</summary>
      <returns>The annotation type.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.IDataPointFilter">
      <summary>Exposes the <see cref="M:System.Windows.Forms.DataVisualization.Charting.IDataPointFilter.FilterDataPoint(System.Windows.Forms.DataVisualization.Charting.DataPoint,System.Windows.Forms.DataVisualization.Charting.Series,System.Int32)" /> method, which allows <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> data to be custom filtered.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.IDataPointFilter.FilterDataPoint(System.Windows.Forms.DataVisualization.Charting.DataPoint,System.Windows.Forms.DataVisualization.Charting.Series,System.Int32)">
      <summary>Determines whether a particular data point in the series will be filtered. </summary>
      <returns>True if the data point is removed, otherwise false.</returns>
      <param name="point">The <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" /> object to be filtered.</param>
      <param name="series">The <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> object that the data point belongs to.</param>
      <param name="pointIndex">The index of the data point, which determines its position in the series.</param>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.ImageAnnotation">
      <summary>Represents an image annotation.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ImageAnnotation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.ImageAnnotation" /> class.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ImageAnnotation.Alignment">
      <summary>Gets or sets the alignment of the annotation image.</summary>
      <returns>A <see cref="T:System.Drawing.ContentAlignment" /> value that represents the alignment of the annotation image.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ImageAnnotation.AnnotationType">
      <summary>Gets the annotation type name.</summary>
      <returns>The annotation type.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ImageAnnotation.BackColor">
      <summary>This property is not applicable to the image annotation type.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ImageAnnotation.BackGradientStyle">
      <summary>This property is not applicable to the image annotation type.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.GradientStyle" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ImageAnnotation.BackHatchStyle">
      <summary>This property is not applicable to the image annotation type.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ImageAnnotation.BackSecondaryColor">
      <summary>This property is not applicable to the image annotation type.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ImageAnnotation.Font">
      <summary>This property is not applicable to the image annotation type.</summary>
      <returns>A <see cref="T:System.Drawing.Font" /> object.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ImageAnnotation.ForeColor">
      <summary>This property is not applicable to the image annotation type.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ImageAnnotation.Image">
      <summary>Gets or sets the name of the annotation image.</summary>
      <returns>A string value that represents the name of the annotation image.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ImageAnnotation.ImageTransparentColor">
      <summary>Gets or sets a color that will be replaced with a transparent color when the image is drawn.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value that will be replaced with a transparent color when he image is drawn.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ImageAnnotation.ImageWrapMode">
      <summary>Gets or sets the drawing mode of the image.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartImageWrapMode" /> enumeration value that defines the drawing mode of the image.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ImageAnnotation.LineColor">
      <summary>This property is not applicable to the image annotation type.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ImageAnnotation.LineDashStyle">
      <summary>This property is not applicable to the image annotation type.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartDashStyle" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ImageAnnotation.LineWidth">
      <summary>This property is not applicable to the image annotation type.</summary>
      <returns>An integer value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ImageAnnotation.TextStyle">
      <summary>Gets or sets the text style of the annotation.</summary>
      <returns>A <see cref="P:System.Windows.Forms.DataVisualization.Charting.ImageAnnotation.TextStyle" /> enumeration value that represents the style used to draw the annotation text.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.IntervalAutoMode">
      <summary>Specifies the automatic axis interval mode.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.IntervalAutoMode.FixedCount">
      <summary>A fixed number of intervals are always created on the axis.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.IntervalAutoMode.VariableCount">
      <summary>The number of axis intervals depends on the axis length.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.IntervalType">
      <summary>Specifies an interval type.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.IntervalType.Number">
      <summary>A numerical interval.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.IntervalType.Years">
      <summary>An interval of years.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.IntervalType.Months">
      <summary>An interval of months.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.IntervalType.Weeks">
      <summary>An interval of weeks.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.IntervalType.Days">
      <summary>An interval of days.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.IntervalType.Hours">
      <summary>An interval of hours.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.IntervalType.Minutes">
      <summary>An interval of minutes.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.IntervalType.Seconds">
      <summary>An interval of seconds.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.IntervalType.Milliseconds">
      <summary>An interval of milliseconds.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.LabelAlignmentStyles">
      <summary>Specifies a label alignment when <see cref="T:System.Windows.Forms.DataVisualization.Charting.SmartLabelStyle" /> is used.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LabelAlignmentStyles.Top">
      <summary>Label is aligned to the top of the data point.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LabelAlignmentStyles.Bottom">
      <summary>Label is aligned to the bottom of the data point.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LabelAlignmentStyles.Right">
      <summary>Label is aligned to the right of the data point.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LabelAlignmentStyles.Left">
      <summary>Label is aligned to the left of the data point.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LabelAlignmentStyles.TopLeft">
      <summary>Label is aligned to the top-left corner of the data point.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LabelAlignmentStyles.TopRight">
      <summary>Label is aligned to the top-right corner of the data point.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LabelAlignmentStyles.BottomLeft">
      <summary>Label is aligned to the bottom-left of the data point.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LabelAlignmentStyles.BottomRight">
      <summary>Label is aligned to the bottom-right of the data point.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LabelAlignmentStyles.Center">
      <summary>Label is aligned to the center of the data point.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.LabelAutoFitStyles">
      <summary>Specifies style changes that can automatically be made to a label when the <see cref="P:System.Windows.Forms.DataVisualization.Charting.Axis.LabelAutoFitStyle" /> property is used.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LabelAutoFitStyles.None">
      <summary>No label changes are allowed.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LabelAutoFitStyles.IncreaseFont">
      <summary>Label font can be increased.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LabelAutoFitStyles.DecreaseFont">
      <summary>Label font can be decreased.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LabelAutoFitStyles.StaggeredLabels">
      <summary>Labels can be staggered.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LabelAutoFitStyles.LabelsAngleStep30">
      <summary>Labels can be angled in 30 degree steps: 0, 30, 60 and 90.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LabelAutoFitStyles.LabelsAngleStep45">
      <summary>Labels can be angled in 45 degree steps: 0, 45, and 90.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LabelAutoFitStyles.LabelsAngleStep90">
      <summary>Labels can be angled in 90 degree steps: 0 and 90.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LabelAutoFitStyles.WordWrap">
      <summary>Labels can be word wrapped.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.LabelCalloutStyle">
      <summary>Specifies the type of leader line that should be drawn from the point to the label.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LabelCalloutStyle.None">
      <summary>Line will terminate at the label without any added style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LabelCalloutStyle.Underlined">
      <summary>Line will terminate with a horizontal line beneath the label text.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LabelCalloutStyle.Box">
      <summary>Line will terminate at a box drawn around the label text.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.LabelMarkStyle">
      <summary>Specifies a mark for custom labels.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LabelMarkStyle.None">
      <summary>No label marks are used.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LabelMarkStyle.SideMark">
      <summary>Custom labels use side marks.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LabelMarkStyle.LineSideMark">
      <summary>Custom labels use line and side marks.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LabelMarkStyle.Box">
      <summary>Draws a box around the label. The box always starts at the axis position.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.LabelOutsidePlotAreaStyle">
      <summary>Specifies the degree to which a label can be drawn outside a plotting area.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LabelOutsidePlotAreaStyle.Yes">
      <summary>Labels can be drawn outside the plotting area.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LabelOutsidePlotAreaStyle.No">
      <summary>Labels cannot de drawn outside the plotting area.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LabelOutsidePlotAreaStyle.Partial">
      <summary>Labels can be drawn partially outside the plotting area. </summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.LabelStyle">
      <summary>Provides properties that define the visual appearance of the axis labels. </summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.LabelStyle.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.LabelStyle" /> class.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LabelStyle.Angle">
      <summary>Gets or sets a value that represents the angle at which the font is drawn.</summary>
      <returns>An integer value.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.LabelStyle.Dispose(System.Boolean)">
      <summary>Releases the resources used by the <see cref="T:System.Windows.Forms.DataVisualization.Charting.LabelStyle" />.</summary>
      <param name="disposing">True to release both managed and unmanaged resources; False to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LabelStyle.Enabled">
      <summary>Gets or sets a flag that indicates whether the label is enabled.</summary>
      <returns>True if the label is enabled; otherwise, False.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LabelStyle.Font">
      <summary>Gets or sets the font of the label.</summary>
      <returns>A <see cref="T:System.Drawing.Font" /> object.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LabelStyle.ForeColor">
      <summary>Gets or sets the color of the label.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LabelStyle.Format">
      <summary>Gets or sets the formatting string for the label text.</summary>
      <returns>A string value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LabelStyle.Interval">
      <summary>Gets or sets the size of the label interval.</summary>
      <returns>A double value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LabelStyle.IntervalOffset">
      <summary>Gets or sets the offset of the label interval.</summary>
      <returns>A double value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LabelStyle.IntervalOffsetType">
      <summary>Gets or sets the unit of measurement of the label interval offset.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LabelStyle.IntervalType">
      <summary>Gets or sets the unit of measurement for the size of a label interval.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LabelStyle.IsEndLabelVisible">
      <summary>Gets or sets a flag that determines whether the labels are shown at axis ends.</summary>
      <returns>True if the labels are shown at axis ends; otherwise, False.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LabelStyle.IsStaggered">
      <summary>Gets or sets a flag that determines whether the labels are shown with an offset.</summary>
      <returns>True if the labels are shown with an offset; otherwise, False.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LabelStyle.TruncatedLabels">
      <summary>Gets or sets a flag that determines whether the labels can be truncated.</summary>
      <returns>True if the labels can be truncated; otherwise, False.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.Legend">
      <summary>Represents the legend for the chart image.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Legend.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Legend" /> class.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Legend.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.AnnotationPathPoint" /> class with the specified legend name.</summary>
      <param name="name">The name of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Legend" /> object.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Legend.Alignment">
      <summary>Gets or sets the alignment of the legend.</summary>
      <returns>A .NET Framework <see cref="T:System.Drawing.StringAlignment" /> enumeration value that represents the alignment of the legend. The default value is <see cref="F:System.Drawing.StringAlignment.Near" />. </returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Legend.AutoFitMinFontSize">
      <summary>Gets or sets the minimum font size that can be used by the autofitting algorithm for the legend text.</summary>
      <returns>An integer value that represents the minimum font size.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Legend.BackColor">
      <summary>Gets or sets the background color of a legend.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value. The default color is <see cref="System.Drawing.Color.White" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Legend.BackGradientStyle">
      <summary>Gets or sets the orientation for the background gradient of a legend. Also determines whether a gradient is used.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.GradientStyle" /> enumeration. The default value is <see cref="F:System.Windows.Forms.DataVisualization.Charting.GradientStyle.None" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Legend.BackHatchStyle">
      <summary>Gets or sets the hatching style of a legend.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle" /> enumeration. The default value is <see cref="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.None" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Legend.BackImage">
      <summary>Gets or sets the background image of a legend.</summary>
      <returns>A string value that represents the URL of an image file. The default value is an empty string.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Legend.BackImageAlignment">
      <summary>Gets or sets the background image alignment used for the <see cref="F:System.Windows.Forms.DataVisualization.Charting.ChartImageWrapMode.Unscaled" /> drawing mode.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartImageAlignmentStyle" /> enumeration value. The default value is <see cref="F:System.Windows.Forms.DataVisualization.Charting.ChartImageAlignmentStyle.TopLeft" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Legend.BackImageTransparentColor">
      <summary>Gets or sets a color that will be replaced with a transparent color when the background image is drawn.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value that will be displayed as transparent. The default value is <see cref="F:System.Drawing.Color.Empty" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Legend.BackImageWrapMode">
      <summary>Gets or sets the legend background image drawing mode.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartImageWrapMode" /> enumeration value. The default value is <see cref="F:System.Windows.Forms.DataVisualization.Charting.ChartImageWrapMode.Tile" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Legend.BackSecondaryColor">
      <summary>Gets or sets the secondary color of a legend background.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value used for the secondary color of background with hatching or gradient fill. The default value is <see cref="F:System.Drawing.Color.Empty" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Legend.BorderColor">
      <summary>Gets or sets the border color of a legend.</summary>
      <returns>A T<see cref=":System.Drawing.Color" /> value. The default color is <see cref="F:System.Drawing.Color.Empty" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Legend.BorderDashStyle">
      <summary>Gets or sets the border style of a legend.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartDashStyle" /> enumeration value that determines the border style of the chart element.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Legend.BorderWidth">
      <summary>Gets or sets the border width of a legend.</summary>
      <returns>An integer value that determines the border width, in pixels, of the legend.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Legend.CellColumns">
      <summary>Gets the <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendCellColumnCollection" /> for a legend.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendCellColumnCollection" /> object.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Legend.CustomItems">
      <summary>Gets a T<see cref=":System.Windows.Forms.DataVisualization.Charting.LegendItemsCollection" /> object used for custom legend items.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendItemsCollection" /> object.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Legend.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Legend" /> and optionally releases the managed resources.</summary>
      <param name="disposing">True to release both managed and unmanaged resources; False to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Legend.DockedToChartArea">
      <summary>Gets or sets the name of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> where the legend will be docked.</summary>
      <returns>A string value that represents the name of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> where this legend will be docked. The default value is the empty string.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Legend.Docking">
      <summary>Gets or sets a value that determines where the legend is docked.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.Docking" /> enumeration value. The default value is <see cref="F:System.Windows.Forms.DataVisualization.Charting.Docking.Right" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Legend.Enabled">
      <summary>Gets or sets a value that determines if the legend is enabled.</summary>
      <returns>True if enabled, false if disabled. The default value is true. </returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Legend.Font">
      <summary>Gets or sets a <see cref="T:System.Drawing.Font" /> object, which is used to set font properties of the legend.</summary>
      <returns>A <see cref="T:System.Drawing.Font" /> object.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Legend.ForeColor">
      <summary>Gets or sets the color of the legend text.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Legend.HeaderSeparator">
      <summary>Gets or sets the visual separator type for the legend header.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendSeparatorStyle" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Legend.HeaderSeparatorColor">
      <summary>Gets or sets the color of the separator for the legend header.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Legend.InsideChartArea">
      <summary>Gets or sets the name of the chart area in which the legend is drawn.</summary>
      <returns>A string value that represents the name of the chart area.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Legend.InterlacedRows">
      <summary>Gets or sets a flag that indicates if legend rows will be drawn with interlaced background color.</summary>
      <returns>A Boolean value that determines whether alternating rows in the legend are drawn with a specified color.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Legend.InterlacedRowsColor">
      <summary>Gets or sets the background color of the legend's interlaced rows. </summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Legend.IsDockedInsideChartArea">
      <summary>Gets or sets a flag that indicates whether the legend is docked inside or outside the chart area. </summary>
      <returns>True is the legend is docked inside the chart area, otherwise false if it is docked outside the chart area. The default value is false.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Legend.IsEquallySpacedItems">
      <summary>Gets or sets a flag that indicates whether all legend items are equally spaced.</summary>
      <returns>True if legend items are equally spaced, false if they are not. The default value is false.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Legend.IsTextAutoFit">
      <summary>Gets or sets a flag that indicates if the legend text is automatically sized.</summary>
      <returns>True if the legend text is automatically sized; otherwise, False.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Legend.ItemColumnSeparator">
      <summary>Gets or sets the visual separator type for the legend table columns.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendSeparatorStyle" /> enumeration value. </returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Legend.ItemColumnSeparatorColor">
      <summary>Gets or sets the color of the legend table column separator.</summary>
      <returns>A <see cref="Color" /> value used to draw the color of the legend table column separator.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Legend.ItemColumnSpacing">
      <summary>Gets or sets the legend table column spacing.</summary>
      <returns>An integer value that represents the table column spacing.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Legend.LegendItemOrder">
      <summary>Gets or sets a flag that specifies the order in which legend items are displayed. This property only affects legend items automatically added for the chart series; it has no effect on custom legend items.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendItemOrder" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Legend.LegendStyle">
      <summary>Gets or sets the style of the legend.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendStyle" /> enumeration value that determines the legend style. The default value is <see cref="F:System.Windows.Forms.DataVisualization.Charting.LegendStyle.Table" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Legend.MaximumAutoSize">
      <summary>Gets or sets the maximum size of the legend, measured as a percentage of the chart area. This value is used by the automatic layout algorithm.</summary>
      <returns>A float value that represents the maximum size of the legend.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Legend.Name">
      <summary>Gets or sets the name of the legend.</summary>
      <returns>A string value that represents the name of the legend.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Legend.Position">
      <summary>Gets or sets an <see cref="T:System.Windows.Forms.DataVisualization.Charting.ElementPosition" /> object, which can be used to get or set the position of the legend.</summary>
      <returns>If the <see cref="P:System.Windows.Forms.DataVisualization.Charting.Legend.Position" /> property is automatic (that is, Legend.Position.Auto = true) the legend position is calculated automatically by the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" /> control, taking into account the <see cref="P:System.Windows.Forms.DataVisualization.Charting.Legend.Docking" />, <see cref="P:System.Windows.Forms.DataVisualization.Charting.Legend.Alignment" /> and <see cref="P:System.Windows.Forms.DataVisualization.Charting.Legend.IsDockedInsideChartArea" /> property settings.If it is not automatic, the <see cref="P:System.Windows.Forms.DataVisualization.Charting.Legend.Docking" />, <see cref="P:System.Windows.Forms.DataVisualization.Charting.Legend.DockedToChartArea" /> and <see cref="P:System.Windows.Forms.DataVisualization.Charting.Legend.IsDockedInsideChartArea" /> properties are ignored, and the legend position is solely determined by the value of the returned <see cref="T:System.Windows.Forms.DataVisualization.Charting.ElementPosition" /> object.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Legend.ShadowColor">
      <summary>Gets or sets the shadow color of the legend.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value. The default color is <see cref="P:System.Drawing.Color.Black" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Legend.ShadowOffset">
      <summary>Gets or sets the shadow offset, in pixels, of the legend.</summary>
      <returns>An integer value that represents the shadow offset, in pixels, of the legend.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Legend.TableStyle">
      <summary>Gets or sets the legend table style.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendTableStyle" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Legend.TextWrapThreshold">
      <summary>Gets or sets the number of characters that can be sequentially displayed in the legend before the text is wrapped.</summary>
      <returns>An integer value that represents the number of characters that can be placed in the legend sequentially before the text is wrapped. The default value is 25.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Legend.Title">
      <summary>Gets or sets the text of the legend title.</summary>
      <returns>A string value that represents the legend title text. The default value is a zero-length string.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Legend.TitleAlignment">
      <summary>Gets or sets the alignment of the legend title.</summary>
      <returns>A <see cref="T:System.Drawing.StringAlignment" /> enumeration value that represents the alignment of the legend title. The default value is <see cref="F:System.Drawing.StringAlignment.Center" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Legend.TitleBackColor">
      <summary>Gets or sets the background color of the legend title.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value used to draw the background of the legend title. The default value is <see cref="F:System.Drawing.Color.Empty" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Legend.TitleFont">
      <summary>Gets or sets the font for the legend title.</summary>
      <returns>A <see cref="T:System.Drawing.Font" /> object. The default value is "Microsoft Sans Serif, 8pt, Bold".</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Legend.TitleForeColor">
      <summary>Gets or sets the text color of the legend title.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value used to draw the title text color. The default value is <see cref="P:System.Drawing.Color.Black" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Legend.TitleSeparator">
      <summary>Gets or sets the visual separator type for the legend title.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendSeparatorStyle" /> value that represents the type of separator that will be drawn below the title. The default value is <see cref="F:System.Windows.Forms.DataVisualization.Charting.LegendSeparatorStyle.None" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Legend.TitleSeparatorColor">
      <summary>Gets or sets the color of the legend title separator.</summary>
      <returns>A <see cref="Color" /> value used to draw the color of the legend title separator. The default value is <see cref="Color.Black" />.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.LegendCell">
      <summary>Represents a legend cell in a legend item.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.LegendCell.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendCell" /> class</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.LegendCell.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendCell" /> class with a <paramref name="text" /> parameter that specifies the cell text or image name.</summary>
      <param name="text">A string value that represent the cell text or image name, depending on the type of cell.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.LegendCell.#ctor(System.Windows.Forms.DataVisualization.Charting.LegendCellType,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendCell" /> class with the specified cell type and a <paramref name="text" /> parameter that specifies the cell text or image name.</summary>
      <param name="cellType">A <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendCellType" /> value that represents the legend cell type to be used.</param>
      <param name="text">A string value that represents the cell text or image name, depending on the type of cell.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.LegendCell.#ctor(System.Windows.Forms.DataVisualization.Charting.LegendCellType,System.String,System.Drawing.ContentAlignment)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendCell" /> class with the specified cell type, content alignment, and a <paramref name="text" /> parameter that specifies the cell text or image name.</summary>
      <param name="cellType">A <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendCellType" /> value that represents the legend cell type to be used.</param>
      <param name="text">A string value representing the cell text or image name, depending on the type of cell.</param>
      <param name="alignment">A <see cref="T:System.Drawing.ContentAlignment" /> value that represents the alignment of the legend cell contents.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendCell.Alignment">
      <summary>Gets or sets the alignment of the legend cell contents.</summary>
      <returns>A <see cref="T:System.Drawing.ContentAlignment" /> value that represents the alignment of the legend cell contents. The default value is <see cref="F:System.Drawing.ContentAlignment.MiddleCenter" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendCell.BackColor">
      <summary>Gets or sets the background color of the legend cell.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value used to draw the legend cell's background.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendCell.CellSpan">
      <summary>Gets or sets the number of horizontal cells used to draw the contents of the legend cell.</summary>
      <returns>An integer value that represents the number of horizontal cells used to draw the legend cell contents. The default value is 1.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendCell.CellType">
      <summary>Gets or sets the legend cell type.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendCellType" /> enumeration value that represents the type that will be used to define the contents of the legend cell. The default value is <see cref="F:System.Windows.Forms.DataVisualization.Charting.LegendCellType.Text" />.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.LegendCell.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendCell" /> and optionally releases the managed resources.</summary>
      <param name="disposing">True to release both managed and unmanaged resources; False to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendCell.Font">
      <summary>Gets or sets the font for the legend cell.</summary>
      <returns>A <see cref="T:System.Drawing.Font" /> object. The default value is "Microsoft Sans Serif, 8pt".</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendCell.ForeColor">
      <summary>Gets or sets the text color of the legend cell.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value used to draw the legend cell text. The default value is <see cref="F:System.Drawing.Color.Empty" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendCell.Image">
      <summary>Gets or sets the name of the image in a legend cell.</summary>
      <returns>A string value that represents the name of the image to be used in the legend cell.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendCell.ImageSize">
      <summary>Gets or sets the size of the image in a legend cell.</summary>
      <returns>A <see cref="T:System.Drawing.Size" /> value that represents the size of the image. The default value is (0,0), which means the original size of the image will be used.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendCell.ImageTransparentColor">
      <summary>Gets or sets a color which will be replaced with a transparent color when the image is drawn.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value that is used as a transparent color in a legend cell image.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendCell.Legend">
      <summary>Gets the legend in which this cell belongs.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.Legend" /> object.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendCell.LegendItem">
      <summary>Gets the legend item in which this cell belongs.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendItem" /> object.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendCell.Margins">
      <summary>Gets or sets the margins of the legend cell.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.Margins" /> object that represents the top, bottom, left, and right values of the legend cell margins. The default values for top, bottom, left and right are "0,0,15,15".</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendCell.Name">
      <summary>Gets or sets the name of the legend cell.</summary>
      <returns>A string value that represents the text name of the legend cell.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendCell.SeriesSymbolSize">
      <summary>Gets or sets the size of the series symbol that is displayed in the legend cell.</summary>
      <returns>A <see cref="T:System.Drawing.Size" /> object that represents the size of the series symbol. The default values for the width and height of the symbol are 200 and 70, respectively.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendCell.Text">
      <summary>Gets or sets the legend cell text.</summary>
      <returns>A string value that represents the text for the legend cell. The default value is a zero-length string.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendCell.ToolTip">
      <summary>Gets or sets the tooltip text for the legend cell.</summary>
      <returns>A string value that represents the tooltip for the legend cell. The default value is a zero-length string.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.LegendCellCollection">
      <summary>Stores legend cells in a <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendCellCollection" /> object.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.LegendCellCollection.Add(System.Windows.Forms.DataVisualization.Charting.LegendCellType,System.String,System.Drawing.ContentAlignment)">
      <summary>Adds a legend cell with the specified cell type, text and alignment to the end of the collection.</summary>
      <returns>An integer value that represents the index of the newly added legend cell in the collection. The index is zero-based.</returns>
      <param name="cellType">A <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendCellType" /> value representing the cell type.</param>
      <param name="text">A string value that represents either the cell text or its image name, depending on the value of the <paramref name="cellType" /> parameter.</param>
      <param name="alignment">A <see cref="T:System.Drawing.ContentAlignment" /> value that represents the cell content alignment.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.LegendCellCollection.Insert(System.Int32,System.Windows.Forms.DataVisualization.Charting.LegendCellType,System.String,System.Drawing.ContentAlignment)">
      <summary>Inserts a legend cell with the specified cell type, text and alignment into the collection at a given location.</summary>
      <param name="index">Index of the location to insert the object.</param>
      <param name="cellType">A <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendCellType" /> value that represents the cell type.</param>
      <param name="text">A string value that represents either the cell text or its image name, depending on the value of the <paramref name="cellType" /> parameter.</param>
      <param name="alignment">A <see cref="T:System.Drawing.ContentAlignment" /> enumeration value that represents the alignment of the legend cell content.</param>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.LegendCellColumn">
      <summary>Represents a cell column in a legend, which is used to extend the functionality of the default legend.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.LegendCellColumn.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendCellColumn" /> class.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.LegendCellColumn.#ctor(System.String,System.Windows.Forms.DataVisualization.Charting.LegendCellColumnType,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendCellColumn" /> class with the specified header text, column type and column cell text.</summary>
      <param name="headerText">Column header text.</param>
      <param name="columnType">A <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendCellColumnType" /> enumeration value.</param>
      <param name="text">Column cell text.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.LegendCellColumn.#ctor(System.String,System.Windows.Forms.DataVisualization.Charting.LegendCellColumnType,System.String,System.Drawing.ContentAlignment)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendCellColumn" /> class with the specified header text, column type, column cell text and content alignment.</summary>
      <param name="headerText">Column header text.</param>
      <param name="columnType">A <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendCellColumnType" /> enumeration value.</param>
      <param name="text">Column cell text.</param>
      <param name="alignment">Column cell <see cref="T:System.Drawing.ContentAlignment" />.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendCellColumn.Alignment">
      <summary>Gets or sets the legend column content alignment.</summary>
      <returns>A <see cref="T:System.Drawing.ContentAlignment" /> value that represents the alignment of the legend cell contents. The default value is <see cref="F:System.Drawing.ContentAlignment.MiddleCenter" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendCellColumn.BackColor">
      <summary>Gets or sets the background color of the legend cell column.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value used to draw the legend cell column background.The default value is <see cref="F:System.Drawing.Color.Empty" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendCellColumn.ColumnType">
      <summary>Gets or sets the legend cell column type.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendCellColumnType" /> enumeration value. This value represents the type that will be used to define the legend cell column contents. The default value is <see cref="F:System.Windows.Forms.DataVisualization.Charting.LegendCellColumnType.Text" />.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.LegendCellColumn.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendCellColumn" /> and optionally releases the managed resources.</summary>
      <param name="disposing">True to release both managed and unmanaged resources; False to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendCellColumn.Font">
      <summary>Gets or sets the font for the legend column text.</summary>
      <returns>A <see cref="T:System.Drawing.Font" /> object. The default value is null.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendCellColumn.ForeColor">
      <summary>Gets or sets the text color of the legend cell column.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value used to draw the legend cell column text. The default value is <see cref="F:System.Drawing.Color.Empty" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendCellColumn.HeaderAlignment">
      <summary>Gets or sets the horizontal text alignment of the legend cell column header.</summary>
      <returns>A <see cref="T:System.Drawing.StringAlignment" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendCellColumn.HeaderBackColor">
      <summary>Gets or sets the background color for the legend cell column header.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value used to draw the background of the legend cell column header. The default value is <see cref="F:System.Drawing.Color.Empty" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendCellColumn.HeaderFont">
      <summary>Gets or sets the font used in the legend column header.</summary>
      <returns>A <see cref="T:System.Drawing.Font" /> object. The default value is "Microsoft Sans Serif, 8pt, Bold".</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendCellColumn.HeaderForeColor">
      <summary>Gets or sets the color of the legend column header text (<see cref="P:System.Windows.Forms.DataVisualization.Charting.LegendCellColumn.HeaderText" /> property).</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendCellColumn.HeaderText">
      <summary>Gets or sets the text for the legend cell column header.</summary>
      <returns>A string value that represents the legend cell column header text. The default value is a zero-length string.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendCellColumn.Legend">
      <summary>Gets the legend in which this legend cell column belongs.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.Legend" /> object.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendCellColumn.Margins">
      <summary>Gets or sets the margins of the legend cell column.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.Margins" /> object that represents the top, bottom, left, and right values of the legend cell margins. The default values for top, bottom, left and right are "0,0,15,15".</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendCellColumn.MaximumWidth">
      <summary>Gets or sets the maximum width of the legend cell column.</summary>
      <returns>An integer value that represents the maximum width of the legend cell column. The default value is minus one (-1), which means that the maximum width is automatically calculated.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendCellColumn.MinimumWidth">
      <summary>Gets or sets the minimum width of the legend cell column.</summary>
      <returns>An integer value that represents the minimum width of the legend cell column. The default value is minus one (-1), which means that the minimum width is automatically calculated.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendCellColumn.Name">
      <summary>Gets or sets the name of the legend cell column.</summary>
      <returns>A string value that represents the text name of the legend cell column.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendCellColumn.SeriesSymbolSize">
      <summary>Gets or sets the size of the series symbol displayed in a legend cell column.</summary>
      <returns>A <see cref="T:System.Drawing.Size" /> object that represents the size of the series symbol. The default values for the width and height of the symbol are 200 and 70, respectively.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.LegendCellColumn.ShouldSerializeMargins">
      <summary>Determines whether the property should be serialized.</summary>
      <returns>True if property should be serialized, otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendCellColumn.Text">
      <summary>Gets or sets the text of the legend cell column.</summary>
      <returns>A string value that represents the text for the legend cell column. The default value is a zero-length string.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendCellColumn.ToolTip">
      <summary>Gets or sets the tooltip text for the legend cell column.</summary>
      <returns>A string value that represents the tooltip for the legend cell column. The default value is a zero-length string.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.LegendCellColumnCollection">
      <summary>Stores <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendCellColumn" /> objects, which are applied to default legend items.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.LegendCellColumnCollection.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendCellColumnCollection" /> and optionally releases the managed resources.</summary>
      <param name="disposing">True to release both managed and unmanaged resources; False to release only unmanaged resources.</param>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.LegendCellColumnType">
      <summary>Specifies a legend cell column type.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LegendCellColumnType.Text">
      <summary>The legend cell column contains text.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LegendCellColumnType.SeriesSymbol">
      <summary>The legend cell column contains a series symbol such as a line, rectangle, or line with marker.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.LegendCellType">
      <summary>Specifies a legend cell type.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LegendCellType.Text">
      <summary>The legend cell contains text.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LegendCellType.SeriesSymbol">
      <summary>The legend cell contains a series symbol, such as a line or rectangle.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LegendCellType.Image">
      <summary>The legend cell contains an image.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.LegendCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.Forms.DataVisualization.Charting.Legend" /> objects.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.LegendCollection.Add(System.String)">
      <summary>Adds the specified <see cref="T:System.Windows.Forms.DataVisualization.Charting.Legend" /> object to the end of the collection.</summary>
      <returns>A string value that represents the index of the added item.</returns>
      <param name="name">The name of legend to be added.</param>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.LegendImageStyle">
      <summary>Specifies the style to apply to the symbol for a legend item.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LegendImageStyle.Rectangle">
      <summary>The symbol will be a rectangle.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LegendImageStyle.Line">
      <summary>The symbol will be a line.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LegendImageStyle.Marker">
      <summary>The symbol will be a marker.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.LegendItem">
      <summary>Represents a legend item, which is stored in the <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendItemsCollection" /> class.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.LegendItem.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendItem" /> class.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.LegendItem.#ctor(System.String,System.Drawing.Color,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendItem" /> class with the specified name, color and image path.</summary>
      <param name="name">Name of the legend item.</param>
      <param name="color">Color of the legend item.</param>
      <param name="image">Path of the image to be displayed for the legend item.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendItem.BackGradientStyle">
      <summary>Gets or sets the orientation for the background gradient of a legend item. Also determines whether a gradient is used.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.GradientStyle" /> enumeration. The default value is <see cref="F:System.Windows.Forms.DataVisualization.Charting.GradientStyle.None" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendItem.BackHatchStyle">
      <summary>Gets or sets the hatching style of a legend item. </summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle" /> enumeration. The default value is <see cref="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.None" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendItem.BackImageTransparentColor">
      <summary>Gets or sets a color which will be replaced with a transparent color when the background image is drawn.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value that will be displayed as transparent.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendItem.BackSecondaryColor">
      <summary>Gets or sets the secondary color of a legend item.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value used for the secondary color of background with hatching or gradient fill. The default value is <see cref="F:System.Drawing.Color.Empty" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendItem.BorderColor">
      <summary>Gets or sets the border color of a legend item.</summary>
      <returns>A T<see cref=":System.Drawing.Color" /> value. The default color is <see cref="F:System.Drawing.Color.Empty" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendItem.BorderDashStyle">
      <summary>Gets or sets the border style of a legend item.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartDashStyle" /> enumeration value that determines the border style of the legend item.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendItem.BorderWidth">
      <summary>Gets or sets the border width of a legend item.</summary>
      <returns>An integer value that determines the width, in pixels, of the legend item border.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendItem.Cells">
      <summary>Gets the collection of cells in the legend item.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendCellCollection" /> object.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendItem.Color">
      <summary>Gets or sets the color of a legend item.</summary>
      <returns>A T<see cref=":System.Drawing.Color" /> value. The default color is <see cref="F:System.Drawing.Color.Empty" />.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.LegendItem.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendItem" /> and optionally releases the managed resources.</summary>
      <param name="disposing">True to release both managed and unmanaged resources; False to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendItem.Enabled">
      <summary>Gets or sets a flag that indicates whether the legend item is enabled.</summary>
      <returns>True if the legend item is enabled, otherwise false. The default value is true.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendItem.Image">
      <summary>Gets or sets the image that will be displayed for a legend item symbol.</summary>
      <returns>A string value that represents the URL of an image file. The default value is an empty string.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendItem.ImageStyle">
      <summary>Gets or sets the display style of the legend item image.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendImageStyle" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendItem.Legend">
      <summary>Gets or sets the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Legend" /> object associated with this legend item.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.Legend" /> object.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendItem.MarkerBorderColor">
      <summary>Gets or sets the border color of the markers, if used.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value that represents the ARGB (alpha, red, green, blue) color of a marker border. </returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendItem.MarkerBorderWidth">
      <summary>Gets or sets the border width of the markers, if used. Measured in pixels.</summary>
      <returns>An integer value. The default value is one (1) pixel.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendItem.MarkerColor">
      <summary>Gets or sets the color of the markers, if used.</summary>
      <returns>A T<see cref=":System.Drawing.Color" /> value. The default color is <see cref="F:System.Drawing.Color.Empty" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendItem.MarkerImage">
      <summary>Gets or sets a marker image.</summary>
      <returns>A string value that represents the URL of an image file.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendItem.MarkerImageTransparentColor">
      <summary>Gets or sets a color that will be replaced with a transparent color when the marker image is drawn.</summary>
      <returns>A T<see cref=":System.Drawing.Color" /> value that represents an ARGB (alpha, red, green, blue) color.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendItem.MarkerSize">
      <summary>Gets or sets the size of the legend item markers, if used.</summary>
      <returns>An integer expression that represents the height and width of the plotting area of markers, in pixels. The default value is 5 pixels.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendItem.MarkerStyle">
      <summary>Gets or sets a legend item marker style. Also used to enable or disable the display of markers.</summary>
      <returns>A <see cref="P:System.Windows.Forms.DataVisualization.Charting.LegendItem.MarkerStyle" /> integer enumeration. The default value is <see cref="F:System.Windows.Forms.DataVisualization.Charting.MarkerStyle.None" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendItem.Name">
      <summary>Gets or sets the name of the legend item.</summary>
      <returns>A string value that represents the name of the legend item.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendItem.SeparatorColor">
      <summary>Gets or sets the color of the legend item separator.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value used to draw the color of the legend item separator. The default value is <see cref="P:System.Drawing.Color.Black" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendItem.SeparatorType">
      <summary>Gets or sets the separator style of the legend item.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendSeparatorStyle" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendItem.SeriesName">
      <summary>Gets or sets the name of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> associated with a default legend item. </summary>
      <returns>A string value that determines the name of the series associated with a default legend item. The default value is a zero-length string.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendItem.SeriesPointIndex">
      <summary>Gets or sets the index of a <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" /> object associated with a default legend item. </summary>
      <returns>An integer value that represents the location of the default legend's associated data point in a zero-based index. All chart types except for pie and doughnut charts will return a negative one (-1).</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendItem.ShadowColor">
      <summary>Gets or sets the shadow color of a legend item.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value. The default color is <see cref="P:System.Drawing.Color.Black" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendItem.ShadowOffset">
      <summary>Gets or sets the shadow offset, in pixels, of a legend item.</summary>
      <returns>An integer value that represents the shadow offset, in pixels, of the relevant chart element.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LegendItem.ToolTip">
      <summary>Gets or sets the tooltip of the legend item.</summary>
      <returns>A string value that represents the tooltip for the legend item.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.LegendItemOrder">
      <summary>Specifies the order in which items are added to the legend.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LegendItemOrder.Auto">
      <summary>The chart automatically determines the order in which items are added to the legend.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LegendItemOrder.SameAsSeriesOrder">
      <summary>Items are added to the legend in the same order as items added to the chart series.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LegendItemOrder.ReversedSeriesOrder">
      <summary>Items are added to the legend in the reverse order of items added to the chart series.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.LegendItemsCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendItem" /> objects.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.LegendItemsCollection.Add(System.Drawing.Color,System.String)">
      <summary>Adds a custom <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendItem" /> object to the end of the collection.</summary>
      <returns>An integer that represents the location in the zero-based index where the item was inserted into the collection.</returns>
      <param name="color">The symbol color of the legend item.</param>
      <param name="text">The legend item text.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.LegendItemsCollection.Add(System.String,System.String)">
      <summary>Adds a custom <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendItem" /> object with the specified image to the end of the collection.</summary>
      <returns>An integer that represents the location in the zero-based index where the item was inserted into the collection.</returns>
      <param name="image">The absolute or relative URL of the image file to be used for the legend item symbol.</param>
      <param name="text">The legend item text.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.LegendItemsCollection.Insert(System.Int32,System.Drawing.Color,System.String)">
      <summary>Inserts a <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendItem" /> object with the specified text and symbol color into the collection at the specified location.</summary>
      <param name="index">The location in the zero-based index where the <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendItem" /> object is to be inserted.</param>
      <param name="color">The symbol color of the legend item.</param>
      <param name="text">The legend item text.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.LegendItemsCollection.Insert(System.Int32,System.String,System.String)">
      <summary>Inserts a <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendItem" /> object with the specified text and symbol image into the collection at the specified location.</summary>
      <param name="index">The location in the zero-based index where the <see cref="T:System.Windows.Forms.DataVisualization.Charting.LegendItem" /> object is to be inserted.</param>
      <param name="image">The absolute or relative URL of the image file to be used for the legend item symbol.</param>
      <param name="text">The legend item text.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.LegendItemsCollection.Reverse">
      <summary>Reverses the order of items in the collection.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.LegendSeparatorStyle">
      <summary>Specifies the styles for legend separator lines.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LegendSeparatorStyle.None">
      <summary>No separator will be shown.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LegendSeparatorStyle.Line">
      <summary>Legend separator is a solid line.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LegendSeparatorStyle.ThickLine">
      <summary>Legend separator is a thick solid line.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LegendSeparatorStyle.DoubleLine">
      <summary>Legend separator is a double line.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LegendSeparatorStyle.DashLine">
      <summary>Legend separator is a dashed line.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LegendSeparatorStyle.DotLine">
      <summary>Legend separator is a dotted line.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LegendSeparatorStyle.GradientLine">
      <summary>Legend separator is a solid line with a gradient on the ends.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LegendSeparatorStyle.ThickGradientLine">
      <summary>Legend separator is a thick solid line with a gradient on the ends.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.LegendStyle">
      <summary>Specifies the legend style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LegendStyle.Column">
      <summary>Legend items are displayed using one column and multiple rows.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LegendStyle.Row">
      <summary>Legend items are displayed using multiple columns and one row.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LegendStyle.Table">
      <summary>Legend items are displayed using multiple columns and multiple rows.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.LegendTableStyle">
      <summary>Specifies the legend table style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LegendTableStyle.Auto">
      <summary>The legend table style is automatically determined by the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" /> control.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LegendTableStyle.Wide">
      <summary>Legend items will be fit horizontally within the legend. This style is preferred when <see cref="T:System.Windows.Forms.DataVisualization.Charting.Docking" /> is set to <see cref="F:System.Windows.Forms.DataVisualization.Charting.Docking.Top" /> or <see cref="F:System.Windows.Forms.DataVisualization.Charting.Docking.Bottom" />.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LegendTableStyle.Tall">
      <summary>Legend items will be fit vertically within the legend. This style is preferred when <see cref="T:System.Windows.Forms.DataVisualization.Charting.Docking" /> is set to <see cref="F:System.Windows.Forms.DataVisualization.Charting.Docking.Left" /> or <see cref="F:System.Windows.Forms.DataVisualization.Charting.Docking.Right" />.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.LightStyle">
      <summary>Specifies a lighting style for a three-dimensional (3D) chart area.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LightStyle.None">
      <summary>No lighting is applied.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LightStyle.Simplistic">
      <summary>A simplistic lighting style is applied, where the hue of all chart area elements is fixed.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LightStyle.Realistic">
      <summary>A realistic lighting style is applied, where the hue of all chart area elements changes depending on the amount of rotation.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.LineAnchorCapStyle">
      <summary>Specifies the shape—that is, the anchor cap—to draw on the point end of the label callout line.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LineAnchorCapStyle.None">
      <summary>Anchor cap will not be drawn.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LineAnchorCapStyle.Arrow">
      <summary>Anchor cap will be drawn with an arrowhead.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LineAnchorCapStyle.Diamond">
      <summary>Anchor cap will be drawn with a diamond-shaped end.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LineAnchorCapStyle.Square">
      <summary>Anchor cap will be drawn with a square head.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.LineAnchorCapStyle.Round">
      <summary>Anchor cap will be drawn with a round end.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.LineAnnotation">
      <summary>Represents a line annotation.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.LineAnnotation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.LineAnnotation" /> class.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LineAnnotation.Alignment">
      <summary>This property is not applicable to the line annotation type.</summary>
      <returns>A <see cref="T:System.Drawing.ContentAlignment" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LineAnnotation.AnchorAlignment">
      <summary>Gets or sets the position alignment of an annotation to the anchor point.</summary>
      <returns>A <see cref="T:System.Drawing.ContentAlignment" /> value that represents the annotation alignment to the anchor point.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LineAnnotation.AnnotationType">
      <summary>Gets the type of annotation. </summary>
      <returns>The annotation type.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LineAnnotation.BackColor">
      <summary>This property is not applicable to the line annotation type.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LineAnnotation.BackGradientStyle">
      <summary>This property is not applicable to the line annotation type.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.GradientStyle" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LineAnnotation.BackHatchStyle">
      <summary>This property is not applicable to the line annotation type.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle" /> value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LineAnnotation.BackSecondaryColor">
      <summary>This property is not applicable to the line annotation type.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LineAnnotation.EndCap">
      <summary>Gets or sets a style for the anchor cap at the end of the annotation line.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.LineAnchorCapStyle" /> enumeration value that represents the style to apply to the anchor cap at the end of the line.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LineAnnotation.Font">
      <summary>This property is not applicable to the line annotation type.</summary>
      <returns>A <see cref="T:System.Drawing.Font" /> object.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LineAnnotation.ForeColor">
      <summary>This property is not applicable to the line annotation type.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LineAnnotation.IsInfinitive">
      <summary>Gets or sets a flag that indicates whether an infinite line should be drawn.</summary>
      <returns>True if a line should be drawn infinitely through two points provided, otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LineAnnotation.IsSizeAlwaysRelative">
      <summary>Gets or sets a flag that specifies whether the size of an annotation is always defined in relative chart coordinates.</summary>
      <returns>True if the <see cref="P:System.Windows.Forms.DataVisualization.Charting.Annotation.Width" /> and <see cref="P:System.Windows.Forms.DataVisualization.Charting.Annotation.Height" /> of an annotation are always in chart relative coordinates, otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LineAnnotation.StartCap">
      <summary>Gets or sets a style for the anchor cap at the start of an annotation line.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.LineAnchorCapStyle" /> enumeration value that represents the style to apply to the anchor cap at the start of the line.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.LineAnnotation.TextStyle">
      <summary>This property is not applicable to the line annotation type. </summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.TextStyle" /> enumeration value.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.Margins">
      <summary>Represents the margins for various chart elements.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Margins.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Margins" /> class.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Margins.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Margins" /> class with the specified top, bottom, left and right coordinates of the margin.</summary>
      <param name="top">Top margin.</param>
      <param name="bottom">Bottom margin.</param>
      <param name="left">Left margin.</param>
      <param name="right">Right margin.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Margins.Bottom">
      <summary>Gets or sets the bottom margin.</summary>
      <returns>Returns an integer value. The default value is 0.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Margins.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current object.</summary>
      <returns>True if the specified object is equal to the current object, otherwise false.</returns>
      <param name="obj">The object to compare with the current object.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Margins.GetHashCode">
      <summary>Gets the hash code for the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Margins" /> object.</summary>
      <returns>An integer value that represents the hash code for a <see cref="T:System.Windows.Forms.DataVisualization.Charting.Margins" /> object.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Margins.IsEmpty">
      <summary>Determines whether the margins are empty.</summary>
      <returns>True if all margins values are zero, otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Margins.Left">
      <summary>Gets or sets the left margin.</summary>
      <returns>An integer value. The default value is 0.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Margins.Right">
      <summary>Gets or sets the right margin.</summary>
      <returns>An integer value. The default value is 0.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Margins.Top">
      <summary>Gets or sets the top margin.</summary>
      <returns>An integer value. The default value is 0.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Margins.ToRectangleF">
      <summary>Converts a <see cref="T:System.Windows.Forms.DataVisualization.Charting.Margins" /> object to a <see cref="T:System.Drawing.RectangleF" /> object.</summary>
      <returns>A <see cref="RectangleF" /> object that has margins.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Margins.ToString">
      <summary>Converts a <see cref="T:System.Windows.Forms.DataVisualization.Charting.Margins" /> object to its string representation.</summary>
      <returns>A string value that represents this object.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.MarkerStyle">
      <summary>Specifies a style for markers. </summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.MarkerStyle.None">
      <summary>No marker is displayed for the series or data point.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.MarkerStyle.Square">
      <summary>A square marker is displayed.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.MarkerStyle.Circle">
      <summary>A circular marker is displayed.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.MarkerStyle.Diamond">
      <summary>A diamond-shaped marker is displayed.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.MarkerStyle.Triangle">
      <summary>A triangular marker is displayed.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.MarkerStyle.Cross">
      <summary>A cross-shaped marker is displayed.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.MarkerStyle.Star4">
      <summary>A 4-point star-shaped marker is displayed.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.MarkerStyle.Star5">
      <summary>A 5-point star-shaped marker is displayed.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.MarkerStyle.Star6">
      <summary>A 6-point star-shaped marker is displayed.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.MarkerStyle.Star10">
      <summary>A 10-point star-shaped marker is displayed.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.NamedImage">
      <summary>Represents named images, which are stored in the <see cref="T:System.Windows.Forms.DataVisualization.Charting.NamedImagesCollection" />.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.NamedImage.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.NamedImage" /> class.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.NamedImage.#ctor(System.String,System.Drawing.Image)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.NamedImage" /> class with the specified name of the named image and its associated image.</summary>
      <param name="name">The name of the named image. Use this name when setting a named image to one of the image properties.</param>
      <param name="image">The associated image.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.NamedImage.Dispose(System.Boolean)">
      <summary>Releases unmanaged and, optionally, managed resources.</summary>
      <param name="disposing">True to release both unmanaged and managed resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.NamedImage.Image">
      <summary>Gets or sets the image of a <see cref="T:System.Windows.Forms.DataVisualization.Charting.NamedImage" /> object.</summary>
      <returns>The image component of a <see cref="T:System.Windows.Forms.DataVisualization.Charting.NamedImage" /> object. This can be any object derived from the .NET Framework <see cref="T:System.Drawing.Image" /> class, for example, a <see cref="T:System.Drawing.Bitmap" /> object.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.NamedImage.Name">
      <summary>Gets or sets the unique name of a <see cref="T:System.Windows.Forms.DataVisualization.Charting.NamedImage" /> object.</summary>
      <returns>A string value that represents the unique name of a <see cref="T:System.Windows.Forms.DataVisualization.Charting.NamedImage" /> object stored in the <see cref="T:System.Windows.Forms.DataVisualization.Charting.NamedImagesCollection" />.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.NamedImagesCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.Forms.DataVisualization.Charting.NamedImage" /> objects.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.Point3D">
      <summary>Represents the coordinates of a three-dimensional (3D) data point. This class is used when performing custom drawing with 3D charts.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Point3D.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Point3D" /> class.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Point3D.#ctor(System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.AnnotationPathPoint" /> class with the specified X, Y and Z coordinates.</summary>
      <param name="x">The X coordinate of 3D point.</param>
      <param name="y">The Y coordinate of 3D point.</param>
      <param name="z">The Z coordinate, which represents the depth of 3D point.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Point3D.PointF">
      <summary>Gets or sets a <see cref="T:System.Drawing.PointF" /> structure, which stores the X and Y coordinates of a 3D point.</summary>
      <returns>Gets or sets a <see cref="T:System.Drawing.PointF" /> structure.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Point3D.X">
      <summary>Gets or sets the X coordinate of a 3D point.</summary>
      <returns>A float that represents the X coordinate of a 3D point.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Point3D.Y">
      <summary>Gets or sets the Y coordinate of a 3D point.</summary>
      <returns>A float value that represents the Y coordinate of a 3D point.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Point3D.Z">
      <summary>Gets or sets the Z coordinate of a 3D point.</summary>
      <returns>The Z coordinate of a 3D point, which is measured as a percentage of the relevant chart area's depth.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.PointSortOrder">
      <summary>Indicates whether the sort order for data points is ascending or descending.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.PointSortOrder.Ascending">
      <summary>Ascending sort order, that is, smallest to largest values.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.PointSortOrder.Descending">
      <summary>Descending sort order, that is, largest to smallest values.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.PolygonAnnotation">
      <summary>Represents a polygon annotation.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.PolygonAnnotation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.PolygonAnnotation" /> class.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.PolygonAnnotation.AnnotationType">
      <summary>Gets the annotation type. </summary>
      <returns>The annotation type.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.PolygonAnnotation.BackColor">
      <summary>Gets or sets the background color of an annotation.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value used to draw the annotation background.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.PolygonAnnotation.BackGradientStyle">
      <summary>Gets or sets the background gradient style of an annotation.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.GradientStyle" /> value used to draw the annotation background.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.PolygonAnnotation.BackHatchStyle">
      <summary>Gets or sets the background hatch style of an annotation.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle" /> value used to draw the annotation background.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.PolygonAnnotation.BackSecondaryColor">
      <summary>Gets or sets the secondary color of the annotation background.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value used to draw the annotation background with hatching or gradient fill.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.PolygonAnnotation.EndCap">
      <summary>This property is not applicable to the polygon annotation type.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.LineAnchorCapStyle" /> value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.PolygonAnnotation.StartCap">
      <summary>This property is not applicable to the polygon annotation type.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.LineAnchorCapStyle" /> value.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.PolylineAnnotation">
      <summary>Represents a polyline annotation.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.PolylineAnnotation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.PolylineAnnotation" /> class.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.PolylineAnnotation.Alignment">
      <summary>This property is not applicable to the polyline annotation type.</summary>
      <returns>A <see cref="T:System.Drawing.ContentAlignment" /> value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.PolylineAnnotation.AnnotationType">
      <summary>Gets the annotation type. </summary>
      <returns>The annotation type.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.PolylineAnnotation.BackColor">
      <summary>This property is not applicable to the polyline annotation type.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.PolylineAnnotation.BackGradientStyle">
      <summary>This property is not applicable to the polyline annotation type.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.GradientStyle" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.PolylineAnnotation.BackHatchStyle">
      <summary>This property is not applicable to the polyline annotation type.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.PolylineAnnotation.BackSecondaryColor">
      <summary>This property is not applicable to the polyline annotation type.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.PolylineAnnotation.Dispose(System.Boolean)">
      <summary>Releases unmanaged and, optionally, managed resources.</summary>
      <param name="disposing">True to release both unmanaged and managed resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.PolylineAnnotation.EndCap">
      <summary>Gets or sets the style of an anchor cap at the end of the annotation line.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.LineAnchorCapStyle" /> value that represents the style used for an anchor cap located at the end of an annotation line.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.PolylineAnnotation.EndPlacement">
      <summary>Ends the user placement of a polyline annotation.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.PolylineAnnotation.Font">
      <summary>This property is not applicable to the polyline annotation type.</summary>
      <returns>A <see cref="T:System.Drawing.Font" /> object.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.PolylineAnnotation.ForeColor">
      <summary>This property is not applicable to the polyline annotation type.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.PolylineAnnotation.GraphicsPath">
      <summary>Gets or sets the path points of a polyline annotation at run time.</summary>
      <returns>A <see cref="P:System.Windows.Forms.DataVisualization.Charting.PolylineAnnotation.GraphicsPath" /> object with the polyline shape.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.PolylineAnnotation.GraphicsPathPoints">
      <summary>Gets or sets the path points of the polyline annotation at design time.</summary>
      <returns>An <see cref="T:System.Windows.Forms.DataVisualization.Charting.AnnotationPathPointCollection" /> object with the polyline shape.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.PolylineAnnotation.IsFreeDrawPlacement">
      <summary>Gets or sets a flag that determines whether an annotation should be placed using the free-draw mode.</summary>
      <returns>True if an annotation should be placed using free-draw mode, otherwise false. The default value is false.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.PolylineAnnotation.StartCap">
      <summary>Gets or sets a style for the anchor cap at the start of the annotation line.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.LineAnchorCapStyle" /> value that represents the style for an anchor cap located at the start of an annotation line.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.PolylineAnnotation.TextStyle">
      <summary>Gets or sets the text style of an annotation.</summary>
      <returns>A <see cref="P:System.Windows.Forms.DataVisualization.Charting.PolylineAnnotation.TextStyle" /> value used to draw the text of an annotation.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.PrintingManager">
      <summary>Prints the chart.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.PrintingManager.#ctor(System.ComponentModel.Design.IServiceContainer)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.PrintingManager" /> class.</summary>
      <param name="container">An <see cref="T:System.ComponentModel.Design.IServiceContainer" /> reference.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.PrintingManager.Dispose">
      <summary>Frees, releases, or resets managed resources.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.PrintingManager.Dispose(System.Boolean)">
      <summary>Releases unmanaged and, optionally, managed resources</summary>
      <param name="disposing">True to release both unmanaged and managed resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.PrintingManager.PageSetup">
      <summary>Displays a Page Setup dialog.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.PrintingManager.Print(System.Boolean)">
      <summary>Prints the chart.</summary>
      <param name="showPrintDialog">Indicates whether a print dialog should be shown.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.PrintingManager.PrintDocument">
      <summary>Gets or sets a print document for the chart.</summary>
      <returns>A <see cref="T:System.Drawing.Printing.PrintDocument" /> object.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.PrintingManager.PrintPaint(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>Draws the chart on the printer graphics.</summary>
      <param name="graphics">The printer <see cref="T:System.Drawing.Graphics" /> object.</param>
      <param name="position">The position to draw on the graphics.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.PrintingManager.PrintPreview">
      <summary>Provides a preview of the chart.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.RectangleAnnotation">
      <summary>Represents a rectangle annotation.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.RectangleAnnotation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.AnnotationPathPoint" /> class.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.RectangleAnnotation.AnnotationType">
      <summary>Gets the annotation type. </summary>
      <returns>The annotation type.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.RectangleAnnotation.BackColor">
      <summary>Gets or sets the background color of the annotation.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value used to draw the annotation background. </returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.RectangleAnnotation.BackGradientStyle">
      <summary>Gets or sets the gradient style of the annotation.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.GradientStyle" /> value used to draw an annotation background.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.RectangleAnnotation.BackHatchStyle">
      <summary>Gets or sets the hatch style of an annotation background.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle" /> value used to draw the background.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.RectangleAnnotation.BackSecondaryColor">
      <summary>Gets or sets the secondary color for an annotation background.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value used to draw the annotation background with hatching or gradient fill.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.RectangleAnnotation.LineColor">
      <summary>Gets or sets the line color of an annotation.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value used to draw the annotation line.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.RectangleAnnotation.LineDashStyle">
      <summary>Gets or sets the line style of an annotation.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartDashStyle" /> value used to draw the line style of an annotation.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.RectangleAnnotation.LineWidth">
      <summary>Gets or sets the line width, in pixels, of an annotation.</summary>
      <returns>An integer value that represents the line width, in pixels.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.ScrollBarButtonStyles">
      <summary>Specifies the type of button that will be displayed on the scrollbar.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ScrollBarButtonStyles.None">
      <summary>No buttons are displayed.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ScrollBarButtonStyles.SmallScroll">
      <summary>The up/down and left/right buttons only are displayed.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ScrollBarButtonStyles.ResetZoom">
      <summary>The reset and zoom (thumb) buttons are displayed.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ScrollBarButtonStyles.All">
      <summary>All buttons are displayed.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.ScrollBarButtonType">
      <summary>Specifies the button clicked by a user in the <see cref="E:System.Windows.Forms.DataVisualization.Charting.Chart.AxisScrollBarClicked" /> event.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ScrollBarButtonType.ThumbTracker">
      <summary>The tracker button (also known as the scrollbar thumb) was clicked.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ScrollBarButtonType.SmallDecrement">
      <summary>A down or left arrow button was clicked to decrease the scroll view by a small decrement.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ScrollBarButtonType.SmallIncrement">
      <summary>An up or right arrow button was clicked to increase the scroll view by a small increment.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ScrollBarButtonType.LargeDecrement">
      <summary>The scroll view was decreased by a large decrement, by clicking the area beneath a scrolling thumb for a vertical scrollbar, or to the left of a scrolling thumb for a horizontal scrollbar.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ScrollBarButtonType.LargeIncrement">
      <summary>The scroll view was increased by a large increment, by clicking the area above a scrolling thumb for a vertical scrollbar, or to the right of a scrolling thumb for a horizontal scrollbar.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ScrollBarButtonType.ZoomReset">
      <summary>The zoom or reset button was clicked.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.ScrollBarEventArgs">
      <summary>Used as a parameter object in the <see cref="E:System.Windows.Forms.DataVisualization.Charting.Chart.AxisScrollBarClicked" /> of the root <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" /> object.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ScrollBarEventArgs.#ctor(System.Windows.Forms.DataVisualization.Charting.Axis,System.Int32,System.Int32,System.Windows.Forms.DataVisualization.Charting.ScrollBarButtonType)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.ScrollBarEventArgs" /> class with the specified axis, X and Y positions of the mouse cursor, and type of button clicked.</summary>
      <param name="axis">The <see cref="T:System.Windows.Forms.DataVisualization.Charting.Axis" /> that contains the scrollbar.</param>
      <param name="x">The X position of mouse cursor.</param>
      <param name="y">The Y position of mouse cursor.</param>
      <param name="buttonType">The type of button clicked.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ScrollBarEventArgs.Axis">
      <summary>Gets the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Axis" /> object that a scrollbar belongs to.</summary>
      <returns>An <see cref="T:System.Windows.Forms.DataVisualization.Charting.Axis" /> object that represents the axis that the scrollbar belongs to.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ScrollBarEventArgs.ButtonType">
      <summary>Gets the type of scrollbar button that the end-user clicked.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ScrollBarButtonType" /> enumeration value that represents the type of scrollbar button the end-user clicked.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ScrollBarEventArgs.ChartArea">
      <summary>Gets the <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> object that the scrollbar belongs to.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> object.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ScrollBarEventArgs.IsHandled">
      <summary>Gets or sets a flag that indicates whether to cancel the default behavior of specific scrollbar events. </summary>
      <returns>true if the default behavior of the event should be cancelled, otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ScrollBarEventArgs.MousePositionX">
      <summary>Gets the X position of the mouse cursor at the time the <see cref="E:System.Windows.Forms.DataVisualization.Charting.Chart.AxisScrollBarClicked" /> event was raised.</summary>
      <returns>An integer value that represents the X mouse cursor position. The position is expressed in pixels, with 0,0 being the top-left corner of the chart image.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ScrollBarEventArgs.MousePositionY">
      <summary>Gets the Y position of the mouse cursor at the time the <see cref="E:System.Windows.Forms.DataVisualization.Charting.Chart.AxisScrollBarClicked" /> event was raised.</summary>
      <returns>An integer value that represents the Y mouse cursor position. The position is expressed in pixels, with 0,0 being the top-left corner of the chart image.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.ScrollType">
      <summary>Specifies the scrolling that will occur when the one of the Scroll methods in the <see cref="T:System.Windows.Forms.DataVisualization.Charting.AxisScaleView" /> class is called.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ScrollType.SmallDecrement">
      <summary>The data view is decreased by one small scrolling interval.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ScrollType.SmallIncrement">
      <summary>The data view is increased by one small scrolling interval.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ScrollType.LargeDecrement">
      <summary>The data view is decreased by one large scrolling interval.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ScrollType.LargeIncrement">
      <summary>The data view is increased by one large scrolling interval.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ScrollType.First">
      <summary>Data is scrolled to the first displayed view.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.ScrollType.Last">
      <summary>Data is scrolled to the last displayed view.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.SerializationContents">
      <summary>Specifies the type of chart content to be serialized.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.SerializationContents.Default">
      <summary>Serialize all non-default chart content. This includes appearance properties, series and their data points, axis minimums/maximums, and so forth.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.SerializationContents.Data">
      <summary>Serialize data values from all chart series. Does not include appearance properties.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.SerializationContents.Appearance">
      <summary>Serialize all appearance properties, such as color or line style, if they have non-default values.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.SerializationContents.All">
      <summary>Serialize all chart information. This includes all appearance properties and data point values.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.SerializationFormat">
      <summary>Represents the formatting type to use when the chart is serialized.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.SerializationFormat.Xml">
      <summary>Chart data will be serialized using well-formed XML.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.SerializationFormat.Binary">
      <summary>Chart data will be serialized in a binary format. </summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.Series">
      <summary>Stores data points and series attributes.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Series.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> class.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Series.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> class with the specified series name.</summary>
      <param name="name">The name of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> object that will be created. This must be a unique name, otherwise an exception will be thrown.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Series.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> class with the specified name and maximum number of Y values.</summary>
      <param name="name">The name of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> object that will be created.</param>
      <param name="yValues">The maximum number of Y-values allowed for the <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" /> objects that belong to this series.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Series.AxisLabel">
      <summary>Gets or sets the axis label text for the series.</summary>
      <returns>A string value. The default value is a zero-length string.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Series.ChartArea">
      <summary>Gets or sets the name of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> object used to plot the data series, if any.</summary>
      <returns>A string value that represents a <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> object, which is used to plot the series.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Series.ChartType">
      <summary>Gets or sets the chart type of a series. </summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.SeriesChartType" /> enumeration value that indicates the chart type that will be used to represent the series. The default value is <see cref="F:System.Windows.Forms.DataVisualization.Charting.SeriesChartType.Column" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Series.ChartTypeName">
      <summary>Gets or sets the name of the chart type used to draw the series. </summary>
      <returns>A string value that represents the name of the chart type.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Series.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> and optionally releases the managed resources.</summary>
      <param name="disposing">True to release both managed and unmanaged resources; False to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Series.EmptyPointStyle">
      <summary>Gets or sets the drawing style of points marked as empty.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties" /> object.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Series.Enabled">
      <summary>Gets or sets a flag that indicates whether the series will be visible on the rendered chart.</summary>
      <returns>True if the series will be visible on the rendered chart, otherwise false. The default value is true.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Series.IsXValueIndexed">
      <summary>Gets or sets a flag that indicates whether data point indices will be used for the X-values.</summary>
      <returns>True if the indices of data points that belong to the series will be used for X-values; false if they will not. The default value is false.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Series.Legend">
      <summary>Gets or sets the name of the series associated with the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Legend" /> object.</summary>
      <returns>A string value that represents the name of a <see cref="T:System.Windows.Forms.DataVisualization.Charting.Legend" /> object.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Series.MarkerStep">
      <summary>Gets or sets a value that determines how often to display data point markers.</summary>
      <returns>An integer value that determines how often to display data point markers. The default value is one (1).</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Series.Name">
      <summary>Gets or sets the unique name of a <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> object.</summary>
      <returns>A string value that represents the unique name of the data series. </returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Series.Palette">
      <summary>Gets or sets the color palette of a <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> object.</summary>
      <returns>An <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartColorPalette" /> enumeration value that determines the palette for the data series.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Series.Points">
      <summary>Gets a <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPointCollection" /> object.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPointCollection" /> object that represents a collection of <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" /> objects. </returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Series.ShadowColor">
      <summary>Gets or sets the shadow color of a series.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value. The default color is <see cref="P:System.Drawing.Color.Black" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Series.ShadowOffset">
      <summary>Gets or sets the shadow offset, in pixels, of a series.</summary>
      <returns>An integer value that represents the shadow offset of the series, in pixels.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Series.SmartLabelStyle">
      <summary>Gets or sets the style of the smart labels.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.SmartLabelStyle" /> enumeration value.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Series.Sort(System.Collections.Generic.IComparer{System.Windows.Forms.DataVisualization.Charting.DataPoint})">
      <summary>Sorts the points in the series using <see cref="T:System.Collections.IComparer" /> interface.</summary>
      <param name="comparer">The <see cref="T:System.Collections.IComparer" /> interface.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Series.Sort(System.Windows.Forms.DataVisualization.Charting.PointSortOrder)">
      <summary>Sorts the data points in the series, given the specified sort order.</summary>
      <param name="pointSortOrder">The sort order.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Series.Sort(System.Windows.Forms.DataVisualization.Charting.PointSortOrder,System.String)">
      <summary>Sorts the points in the series, given the specified sort order and value to use for the sort.</summary>
      <param name="pointSortOrder">The sort order.</param>
      <param name="sortBy">The value used for the sort (X, Y, Y2 ...).</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Series.XAxisType">
      <summary>Gets or sets the X-axis type of the series. </summary>
      <returns>A <see cref="P:System.Windows.Forms.DataVisualization.Charting.Series.XAxisType" /> enumeration value that determines if the series uses the primary or secondary X-axis.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Series.XValueMember">
      <summary>Gets or sets the member of the chart data source used to data bind to the X-value of the series.</summary>
      <returns>A string value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Series.XValueType">
      <summary>Gets or sets the value types plotted along the X-axis.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartValueType" /> enumeration value that determines the type of X-value data stored by the series. The default value is <see cref="F:System.Windows.Forms.DataVisualization.Charting.ChartValueType.Auto" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Series.YAxisType">
      <summary>Gets or sets the Y-axis type of a series. </summary>
      <returns>An <see cref="T:System.Windows.Forms.DataVisualization.Charting.AxisType" /> enumeration value that determines if a series uses the primary or secondary Y-axis.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Series.YValueMembers">
      <summary>Gets or sets member columns of the chart data source used to bind data to the Y-values of the series.</summary>
      <returns>A string value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Series.YValuesPerPoint">
      <summary>Gets or sets the maximum number of Y-values that <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" /> objects in a <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> are allowed to have.</summary>
      <returns>An integer value that represents the maximum number of Y-values that the data points in a series are allowed to have. The default value to one (1).</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Series.YValueType">
      <summary>Gets or sets the type of Y-value data in the data points stored by a series.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartValueType" /> enumeration value that determines the type of Y-value data stored by the series. The default value is <see cref="F:System.Windows.Forms.DataVisualization.Charting.ChartValueType.Auto" />.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.SeriesChartType">
      <summary>Specifies a chart type for a <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" />.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.SeriesChartType.Point">
      <summary>Point chart type.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.SeriesChartType.FastPoint">
      <summary>FastPoint chart type.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.SeriesChartType.Bubble">
      <summary>Bubble chart type.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.SeriesChartType.Line">
      <summary>Line chart type.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.SeriesChartType.Spline">
      <summary>Spline chart type.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.SeriesChartType.StepLine">
      <summary>StepLine chart type.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.SeriesChartType.FastLine">
      <summary>FastLine chart type.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.SeriesChartType.Bar">
      <summary>Bar chart type.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.SeriesChartType.StackedBar">
      <summary>Stacked bar chart type.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.SeriesChartType.StackedBar100">
      <summary>Hundred-percent stacked bar chart type.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.SeriesChartType.Column">
      <summary>Column chart type.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.SeriesChartType.StackedColumn">
      <summary>Stacked column chart type.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.SeriesChartType.StackedColumn100">
      <summary>Hundred-percent stacked column chart type.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.SeriesChartType.Area">
      <summary>Area chart type.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.SeriesChartType.SplineArea">
      <summary>Spline area chart type.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.SeriesChartType.StackedArea">
      <summary>Stacked area chart type.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.SeriesChartType.StackedArea100">
      <summary>Hundred-percent stacked area chart type.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.SeriesChartType.Pie">
      <summary>Pie chart type.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.SeriesChartType.Doughnut">
      <summary>Doughnut chart type.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.SeriesChartType.Stock">
      <summary>Stock chart type.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.SeriesChartType.Candlestick">
      <summary>Candlestick chart type.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.SeriesChartType.Range">
      <summary>Range chart type.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.SeriesChartType.SplineRange">
      <summary>Spline range chart type.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.SeriesChartType.RangeBar">
      <summary>RangeBar chart type.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.SeriesChartType.RangeColumn">
      <summary>Range column chart type.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.SeriesChartType.Radar">
      <summary>Radar chart type.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.SeriesChartType.Polar">
      <summary>Polar chart type.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.SeriesChartType.ErrorBar">
      <summary>Error bar chart type.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.SeriesChartType.BoxPlot">
      <summary>Box plot chart type.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.SeriesChartType.Renko">
      <summary>Renko chart type.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.SeriesChartType.ThreeLineBreak">
      <summary>ThreeLineBreak chart type.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.SeriesChartType.Kagi">
      <summary>Kagi chart type.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.SeriesChartType.PointAndFigure">
      <summary>PointAndFigure chart type.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.SeriesChartType.Funnel">
      <summary>Funnel chart type.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.SeriesChartType.Pyramid">
      <summary>Pyramid chart type.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.SeriesCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> objects.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.SeriesCollection.Add(System.String)">
      <summary>Adds a <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> object to the end of the collection.</summary>
      <returns>The new <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> object appended to the collection..</returns>
      <param name="name">The name of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> to be added.</param>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.SmartLabelStyle">
      <summary>Provides methods and properties used to perform intelligent, rule-based data point label positioning to resolve overlapping data point label issues.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.SmartLabelStyle.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.SmartLabelStyle" /> class.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.SmartLabelStyle.AllowOutsidePlotArea">
      <summary>Gets or sets a flag that specifies whether a <see cref="T:System.Windows.Forms.DataVisualization.Charting.SmartLabelStyle" /> object can be drawn outside the plotting area.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.LabelOutsidePlotAreaStyle" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.SmartLabelStyle.CalloutBackColor">
      <summary>Gets or sets the background color of the label callout.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.SmartLabelStyle.CalloutLineAnchorCapStyle">
      <summary>Gets or sets the anchor cap style of the label callout line.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.LineAnchorCapStyle" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.SmartLabelStyle.CalloutLineColor">
      <summary>Gets or sets the color of the label callout line.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.SmartLabelStyle.CalloutLineDashStyle">
      <summary>Gets or sets the style of the label callout line.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartDashStyle" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.SmartLabelStyle.CalloutLineWidth">
      <summary>Gets or sets the width of the label callout line.</summary>
      <returns>An integer value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.SmartLabelStyle.CalloutStyle">
      <summary>Gets or sets the callout style of the repositioned <see cref="T:System.Windows.Forms.DataVisualization.Charting.SmartLabelStyle" /> object.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.LabelCalloutStyle" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.SmartLabelStyle.Enabled">
      <summary>Gets or sets a flag that indicates whether a <see cref="T:System.Windows.Forms.DataVisualization.Charting.SmartLabelStyle" /> algorithm is enabled.</summary>
      <returns>True if an algorithm will be applied to prevent data point labels from overlapping. False if overlapping of data point labels will not be prevented. The default value is True.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.SmartLabelStyle.IsMarkerOverlappingAllowed">
      <summary>Gets or sets a flag that specifies whether the point labels are allowed to overlap a point marker.</summary>
      <returns>True if data point labels are permitted to overlap point markers. False if data point labels will be prevented from overlapping the point markers. The default value is false.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.SmartLabelStyle.IsOverlappedHidden">
      <summary>Gets or sets a flag that indicates whether overlapped labels that cannot be repositioned will be hidden.</summary>
      <returns>True if labels will be hidden if they overlap. False if overlapped labels will not be hidden. The default value is True.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.SmartLabelStyle.MaxMovingDistance">
      <summary>Gets or sets the maximum distance, in pixels, that the overlapped <see cref="T:System.Windows.Forms.DataVisualization.Charting.SmartLabelStyle" /> object can be moved from the marker.</summary>
      <returns>A double value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.SmartLabelStyle.MinMovingDistance">
      <summary>Gets or sets the minimum distance, in pixels, that the overlapped <see cref="T:System.Windows.Forms.DataVisualization.Charting.SmartLabelStyle" /> object can be moved from the marker.</summary>
      <returns>A double value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.SmartLabelStyle.MovingDirection">
      <summary>Gets or sets the direction(s) in which the overlapped <see cref="T:System.Windows.Forms.DataVisualization.Charting.SmartLabelStyle" /> object is allowed to be moved.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.LabelAlignmentStyles" /> enumeration value or multiple bitwise OR'd <see cref="T:System.Windows.Forms.DataVisualization.Charting.LabelAlignmentStyles" /> values. The default is the bitwise OR of all <see cref="T:System.Windows.Forms.DataVisualization.Charting.LabelAlignmentStyles" /> values to allow repositioning in all directions except to the center of the data point.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.StartFromZero">
      <summary>Indicates whether an axis segment should start from zero when a scale break is used.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.StartFromZero.Auto">
      <summary>The <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" /> control calculates whether to start the axis scale at zero or at a more appropriate rounded value.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.StartFromZero.Yes">
      <summary>Start the axis segment scale from zero.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.StartFromZero.No">
      <summary>Do not start the axis segment scale from zero.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.StatisticFormula">
      <summary>Calculates statistical formulas.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.StatisticFormula.Anova(System.Double,System.String)">
      <summary>Performs an ANOVA test to determine whether there is a statistically significant difference between the mean values of two or more groups of data.</summary>
      <returns>An <see cref="T:System.Windows.Forms.DataVisualization.Charting.AnovaResult" /> object.</returns>
      <param name="probability">The alpha value, which is the probability that the hypothesis is rejected. The allowable range is 0-1.</param>
      <param name="inputSeriesNames">A comma-delimited list of input series names.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.StatisticFormula.BetaFunction(System.Double,System.Double)">
      <summary>Returns the beta function value for two given values.</summary>
      <returns>A double value that represents the beta function for the two given values.</returns>
      <param name="m">The first value for the beta function.</param>
      <param name="n">The second value for the beta function.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.StatisticFormula.Correlation(System.String,System.String)">
      <summary>Returns the correlation value for two data series.</summary>
      <returns>A double value that represents the correlation between two data series.</returns>
      <param name="firstInputSeriesName">The first input series name.</param>
      <param name="secondInputSeriesName">The second input series name.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.StatisticFormula.Covariance(System.String,System.String)">
      <summary>Returns the covariance value for two data series.</summary>
      <returns>A double value that represents the covariance between two data series.</returns>
      <param name="firstInputSeriesName">The first input series name.</param>
      <param name="secondInputSeriesName">The second input series name.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.StatisticFormula.FDistribution(System.Double,System.Int32,System.Int32)">
      <summary>Returns the cumulative F distribution function probability.</summary>
      <returns>A double value that represents the cumulative F distribution function probability.</returns>
      <param name="value">The F value.</param>
      <param name="firstDegreeOfFreedom">First degree of freedom.</param>
      <param name="secondDegreeOfFreedom">Second degree of freedom.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.StatisticFormula.FTest(System.Double,System.String,System.String)">
      <summary>Performs a two-sample F Test using the F distribution. This test is used to determine if the samples have different variances.</summary>
      <returns>An <see cref="T:System.Windows.Forms.DataVisualization.Charting.FTestResult" /> object.</returns>
      <param name="probability">The alpha value, which is the probability that the hypothesis is rejected. The allowable range is 0-1.</param>
      <param name="firstInputSeriesName">First input series name.</param>
      <param name="secondInputSeriesName">Second input series name.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.StatisticFormula.GammaFunction(System.Double)">
      <summary>Returns the gamma function value for the given variable.</summary>
      <returns>A double value that represents the gamma function.</returns>
      <param name="value">The input variable.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.StatisticFormula.InverseFDistribution(System.Double,System.Int32,System.Int32)">
      <summary>Returns the inverse of the F cumulative distribution.</summary>
      <returns>A double value from the inverse F distribution function.</returns>
      <param name="probability">The alpha value, which is the probability that the hypothesis is rejected. The allowable range is 0-1.</param>
      <param name="firstDegreeOfFreedom">First degree of freedom.</param>
      <param name="secondDegreeOfFreedom">Second degree of freedom.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.StatisticFormula.InverseNormalDistribution(System.Double)">
      <summary>Returns the inverse of the standard normal cumulative distribution.</summary>
      <returns>A double value from the inverse standard normal cumulative distribution function.</returns>
      <param name="probability">The alpha value, which is the probability that the hypothesis is rejected. The allowable range is 0-1.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.StatisticFormula.InverseTDistribution(System.Double,System.Int32)">
      <summary>Returns the inverse t-value of the Students t-distribution as a function of probability and degree of freedom.</summary>
      <returns>A double value that represents the inverse T distribution.</returns>
      <param name="probability">The alpha value, which is the probability that the hypothesis is rejected. The allowable range is 0-1.</param>
      <param name="degreeOfFreedom">The degree of freedom.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.StatisticFormula.Mean(System.String)">
      <summary>Returns the average of all data points stored in the specified series.</summary>
      <returns>A double value that represents the average of all data points.</returns>
      <param name="inputSeriesName">Input series name.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.StatisticFormula.Median(System.String)">
      <summary>Returns the median of all data points in the specified series.</summary>
      <returns>A double value that represents the median.</returns>
      <param name="inputSeriesName">Input series name.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.StatisticFormula.NormalDistribution(System.Double)">
      <summary>Returns the probability for the standard normal cumulative distribution function.</summary>
      <returns>A double value from the standard normal cumulative distribution function.</returns>
      <param name="zValue">The Z value for which the probability is required.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.StatisticFormula.TDistribution(System.Double,System.Int32,System.Boolean)">
      <summary>Returns the probability for the T distribution (Student's distribution).</summary>
      <returns>A double value that represents a T Distribution cumulative function.</returns>
      <param name="value">The T value</param>
      <param name="degreeOfFreedom">Degree of freedom</param>
      <param name="oneTail">If true, a one-tailed distribution is used; otherwise, a two-tailed distribution is used.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.StatisticFormula.TTestEqualVariances(System.Double,System.Double,System.String,System.String)">
      <summary>Performs a T Test using Student's distribution (T distribution) with equal variances.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.TTestResult" /> object.</returns>
      <param name="hypothesizedMeanDifference">Hypothesized mean difference.</param>
      <param name="probability">The alpha value, which is the probability that the hypothesis is rejected. The allowable range is 0-1.</param>
      <param name="firstInputSeriesName">First input series name.</param>
      <param name="secondInputSeriesName">Second input series name.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.StatisticFormula.TTestPaired(System.Double,System.Double,System.String,System.String)">
      <summary>Performs a T Test using Student's distribution (T distribution) with paired samples. This is useful when there is a natural pairing of observations in samples.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.TTestResult" /> object.</returns>
      <param name="hypothesizedMeanDifference">Hypothesized mean difference.</param>
      <param name="probability">The alpha value, which is the probability that the hypothesis is rejected. The allowable range is 0-1.</param>
      <param name="firstInputSeriesName">First input series name.</param>
      <param name="secondInputSeriesName">Second input series name.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.StatisticFormula.TTestUnequalVariances(System.Double,System.Double,System.String,System.String)">
      <summary>Performs a T Test using Student's distribution (T distribution) with unequal variances.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.TTestResult" /> object.</returns>
      <param name="hypothesizedMeanDifference">Hypothesized mean difference.</param>
      <param name="probability">The alpha value, which is the probability that the hypothesis is rejected. The allowable range is 0-1.</param>
      <param name="firstInputSeriesName">First input series name.</param>
      <param name="secondInputSeriesName">Second input series name.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.StatisticFormula.Variance(System.String,System.Boolean)">
      <summary>Returns the variance for a series.</summary>
      <returns>A double value that represents the variance.</returns>
      <param name="inputSeriesName">The input series name.</param>
      <param name="sampleVariance">True if the data is a sample of the population; false if the data is the entire population.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.StatisticFormula.ZTest(System.Double,System.Double,System.Double,System.Double,System.String,System.String)">
      <summary>Performs a Z Test using the Normal distribution.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ZTestResult" /> object.</returns>
      <param name="hypothesizedMeanDifference">Hypothesized mean difference.</param>
      <param name="varianceFirstGroup">Variance of the first group.</param>
      <param name="varianceSecondGroup">Variance of the second group.</param>
      <param name="probability">The alpha value, which is the probability that the hypothesis is rejected. The allowable range is 0-1.</param>
      <param name="firstInputSeriesName">First input series name.</param>
      <param name="secondInputSeriesName">Second input series name.</param>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.StripLine">
      <summary>Represents the strip lines on a chart.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.StripLine.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.StripLine" /> class.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.StripLine.BackColor">
      <summary>Gets or sets the background color of the strip line.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> structure. The default color is <see cref="P:System.Drawing.Color.White" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.StripLine.BackGradientStyle">
      <summary>Gets or sets the gradient style of the strip line. </summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.GradientStyle" /> enumeration. The default value is <see cref="F:System.Windows.Forms.DataVisualization.Charting.GradientStyle.None" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.StripLine.BackHatchStyle">
      <summary>Gets or sets the hatching style of the strip line. </summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle" /> enumeration. The default value is <see cref="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.None" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.StripLine.BackImage">
      <summary>Gets or sets the background image of the strip line.</summary>
      <returns>A string value that represents an image file's URL. The default is an empty string.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.StripLine.BackImageAlignment">
      <summary>Gets or sets the background image alignment.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartImageAlignmentStyle" /> enumeration value. The default value is <see cref="F:System.Windows.Forms.DataVisualization.Charting.ChartImageAlignmentStyle.TopLeft" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.StripLine.BackImageTransparentColor">
      <summary>Gets or sets a color which will be replaced with a transparent color when the background image is drawn.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value that will be displayed as transparent.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.StripLine.BackImageWrapMode">
      <summary>Gets or sets the drawing mode of the background image of the strip line.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartImageWrapMode" /> integer enumeration. The default is <see cref="F:System.Windows.Forms.DataVisualization.Charting.ChartImageWrapMode.Tile" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.StripLine.BackSecondaryColor">
      <summary>Gets or sets the secondary color of the strip line background.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value used for the secondary color of a background with hatching or gradient fill. The default color is <see cref="F:System.Drawing.Color.Empty" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.StripLine.BorderColor">
      <summary>Gets or sets the border color of a strip line.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value. The default color is <see cref="F:System.Drawing.Color.Empty" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.StripLine.BorderDashStyle">
      <summary>Gets or sets the border style of the strip line.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartDashStyle" /> enumeration value that determines the border style of the strip line.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.StripLine.BorderWidth">
      <summary>Gets or sets the border width of the strip line.</summary>
      <returns>An integer value that determines the width of the strip line's border, in pixels.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.StripLine.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.DataVisualization.Charting.StripLine" /> and optionally releases the managed resources.</summary>
      <param name="disposing">True to release both managed and unmanaged resources; False to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.StripLine.Font">
      <summary>Gets or sets the font used for the strip line text.</summary>
      <returns>A <see cref="T:System.Drawing.Font" /> value that represents the font of the strip line text.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.StripLine.ForeColor">
      <summary>Gets or sets the color of the strip line text.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value that represents the text color of a strip line. The default value is <see cref="P:System.Drawing.Color.Black" />. </returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.StripLine.Interval">
      <summary>Gets or sets the interval for a strip line, and determines if the strip line is drawn once or repeatedly.</summary>
      <returns>A double value that represents the interval between strip lines. The default value is zero.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.StripLine.IntervalOffset">
      <summary>Gets or sets the offset of grid lines, tick marks, strip lines and axis labels.</summary>
      <returns>A double value that represents the interval offset. </returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.StripLine.IntervalOffsetType">
      <summary>Gets or sets the interval offset type of the strip line.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType" /> enumeration value that indicates the interval type. The default value is <see cref="F:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType.Auto" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.StripLine.IntervalType">
      <summary>Gets or sets the interval type of a <see cref="T:System.Windows.Forms.DataVisualization.Charting.StripLine" /> object.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType" /> enumeration value that indicates the interval type. The default value is <see cref="F:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType.Auto" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.StripLine.Name">
      <summary>Gets the name of the strip line.</summary>
      <returns>A string value that represents the name of the strip line.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.StripLine.StripWidth">
      <summary>Gets or sets the width of a strip line.</summary>
      <returns>A double value that determines whether a strip or a line is drawn. The default value is 0.0.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.StripLine.StripWidthType">
      <summary>Gets or sets the unit of measurement for the <see cref="P:System.Windows.Forms.DataVisualization.Charting.StripLine.StripWidth" /> property.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType" /> enumeration value that indicates the width type. The default value is <see cref="F:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType.Auto" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.StripLine.Text">
      <summary>Gets or sets the text of the strip line.</summary>
      <returns>A string value that represents the text of a strip line.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.StripLine.TextAlignment">
      <summary>Gets or sets the text alignment of the strip line.</summary>
      <returns>A <see cref="T:System.Drawing.StringAlignment" /> value that represents the alignment of the strip line text.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.StripLine.TextLineAlignment">
      <summary>Gets or sets the text line alignment of the strip line.</summary>
      <returns>A <see cref="T:System.Drawing.StringAlignment" /> value that represents the alignment of the text line. </returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.StripLine.TextOrientation">
      <summary>Gets or sets the text orientation.</summary>
      <returns>A <see cref="P:System.Windows.Forms.DataVisualization.Charting.StripLine.TextOrientation" /> value that represents the alignment of the text orientation.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.StripLine.ToolTip">
      <summary>Gets or sets the tooltip of a strip line.</summary>
      <returns>A string value that represents the tooltip of the strip line.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.StripLinesCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.Forms.DataVisualization.Charting.StripLine" /> objects.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.TextAnnotation">
      <summary>Represents a text annotation.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.TextAnnotation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.TextAnnotation" /> class.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.TextAnnotation.AnnotationType">
      <summary>Gets the annotation type. </summary>
      <returns>The annotation type.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.TextAnnotation.BackColor">
      <summary>This property is not applicable to the text annotation type.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.TextAnnotation.BackGradientStyle">
      <summary>This property is not applicable to the text annotation type.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.GradientStyle" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.TextAnnotation.BackHatchStyle">
      <summary>This property is not applicable to the text annotation type.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.TextAnnotation.BackSecondaryColor">
      <summary>This property is not applicable to the text annotation type.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.TextAnnotation.BeginTextEditing">
      <summary>Begins editing of the annotation text by an end-user.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.TextAnnotation.EndPlacement">
      <summary>Ends user placement of an annotation.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.TextAnnotation.Font">
      <summary>Gets or sets the font for the annotation text.</summary>
      <returns>A <see cref="T:System.Drawing.Font" /> object used as the font for the annotation text.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.TextAnnotation.IsMultiline">
      <summary>Gets or sets a flag that indicates whether the annotation text is multiline.</summary>
      <returns>True if the annotation text is multiline; otherwise, False.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.TextAnnotation.LineColor">
      <summary>This property is not applicable to the text annotation type.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.TextAnnotation.LineDashStyle">
      <summary>This property is not applicable to the text annotation type.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartDashStyle" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.TextAnnotation.LineWidth">
      <summary>This property is not applicable to the text annotation type.</summary>
      <returns>An integer value.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.TextAnnotation.StopTextEditing">
      <summary>Stops end-user editing of the annotation text.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.TextAnnotation.Text">
      <summary>Gets or sets the text of the annotation.</summary>
      <returns>A string value that represents the text.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.TextAntiAliasingQuality">
      <summary>Specifies the level of anti-aliasing quality to be used with the TextAntiAliasingQuality&amp;nbsp;property. </summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.TextAntiAliasingQuality.Normal">
      <summary>Normal anti-aliasing quality.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.TextAntiAliasingQuality.High">
      <summary>High anti-aliasing quality.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.TextAntiAliasingQuality.SystemDefault">
      <summary>System default anti-aliasing quality.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.TextOrientation">
      <summary>Specifies text orientation in a chart element.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.TextOrientation.Auto">
      <summary>Text orientation is automatically determined, based on the type of chart element in which the text appears.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.TextOrientation.Horizontal">
      <summary>Text is horizontal.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.TextOrientation.Rotated90">
      <summary>Text is rotated 90 degrees and oriented from top to bottom.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.TextOrientation.Rotated270">
      <summary>Text is rotated 270 degrees and oriented from bottom to top.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.TextOrientation.Stacked">
      <summary>Text characters are not rotated and are positioned one below the other.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.TextStyle">
      <summary>Specifies text drawing styles.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.TextStyle.Default">
      <summary>Default text drawing style.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.TextStyle.Shadow">
      <summary>Shadow text.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.TextStyle.Emboss">
      <summary>Embossed text.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.TextStyle.Embed">
      <summary>Embedded text.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.TextStyle.Frame">
      <summary>Framed text.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.TickMark">
      <summary>Represents the major and minor tick marks along an axis.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.TickMark.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.TickMark" /> class.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.TickMark.Size">
      <summary>Gets or sets the length of tick marks. The length is measured in units that represent a percentage of the height or width of the chart image, depending on the axis.</summary>
      <returns>A float value that represents the size, or length, of tick marks. The default value is 1.0 percent.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.TickMark.TickMarkStyle">
      <summary>Gets or sets the tick mark style.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.TickMarkStyle" /> enumeration value. The default value is <see cref="F:System.Windows.Forms.DataVisualization.Charting.TickMarkStyle.OutsideArea" />.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.TickMarkStyle">
      <summary>Specifies a tick mark style when setting the <see cref="P:System.Windows.Forms.DataVisualization.Charting.TickMark.TickMarkStyle" /> property of a <see cref="T:System.Windows.Forms.DataVisualization.Charting.TickMark" /> object. </summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.TickMarkStyle.None">
      <summary>Tick marks are disabled.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.TickMarkStyle.OutsideArea">
      <summary>Tick marks are drawn outside the chart area.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.TickMarkStyle.InsideArea">
      <summary>Tick marks are drawn inside the chart area.</summary>
    </member>
    <member name="F:System.Windows.Forms.DataVisualization.Charting.TickMarkStyle.AcrossAxis">
      <summary>Tick marks are drawn across the relevant axis line.</summary>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.Title">
      <summary>Represents a title for the entire chart image.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Title.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Title" /> class.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Title.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Title" /> class with the specified title text.</summary>
      <param name="text">Text for the title.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Title.#ctor(System.String,System.Windows.Forms.DataVisualization.Charting.Docking)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Title" /> class with the specified title text and docking value.</summary>
      <param name="text">Text for the title.</param>
      <param name="docking">A <see cref="T:System.Windows.Forms.DataVisualization.Charting.Docking" /> enumeration value that determines where the title will be docked on the chart.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Title.#ctor(System.String,System.Windows.Forms.DataVisualization.Charting.Docking,System.Drawing.Font,System.Drawing.Color)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Title" /> class with the specified title text, docking value, font and color.</summary>
      <param name="text">Text for the title.</param>
      <param name="docking">A <see cref="T:System.Windows.Forms.DataVisualization.Charting.Docking" /> enumeration value that determines where the title will be docked on the chart.</param>
      <param name="font">Title font.</param>
      <param name="color">Title color.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Title.Alignment">
      <summary>Gets or sets the alignment of the title.</summary>
      <returns>A <see cref="T:System.Drawing.ContentAlignment" /> enumeration value that represents the title alignment within the text drawing area. The default value is <see cref="F:System.Drawing.ContentAlignment.MiddleCenter" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Title.BackColor">
      <summary>Gets or sets the background color of the title.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value. The default color is <see cref="P:System.Drawing.Color.White" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Title.BackGradientStyle">
      <summary>Gets or sets the orientation for the background gradient of a title. Also determines whether a gradient is used.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.GradientStyle" /> enumeration. The default value is <see cref="F:System.Windows.Forms.DataVisualization.Charting.GradientStyle.None" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Title.BackHatchStyle">
      <summary>Gets or sets the hatching style for the title.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle" /> enumeration. The default value is <see cref="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.None" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Title.BackImage">
      <summary>Gets or sets the background image of the title.</summary>
      <returns>A string value that represents the URL of an image file. The default is an empty string.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Title.BackImageAlignment">
      <summary>Gets or sets the alignment of the title background image.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartImageAlignmentStyle" /> enumeration value. The default value is <see cref="F:System.Windows.Forms.DataVisualization.Charting.ChartImageAlignmentStyle.TopLeft" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Title.BackImageTransparentColor">
      <summary>Gets or sets a color that will be drawn as transparent when the background image is drawn.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value. The default value is <see cref="F:System.Drawing.Color.Empty" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Title.BackImageWrapMode">
      <summary>Gets or sets the drawing mode for the background image of the title.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartImageWrapMode" /> enumeration value. The default value is <see cref="F:System.Windows.Forms.DataVisualization.Charting.ChartImageWrapMode.Tile" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Title.BackSecondaryColor">
      <summary>Gets or sets the secondary color of the title background.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value used for the secondary color of a background with hatching or gradient fill. The default value is <see cref="F:System.Drawing.Color.Empty" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Title.BorderColor">
      <summary>Gets or sets the border color of the title.</summary>
      <returns>A T<see cref=":System.Drawing.Color" /> value. The default color is <see cref="F:System.Drawing.Color.Empty" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Title.BorderDashStyle">
      <summary>Gets or sets the border style of the title.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartDashStyle" /> enumeration value that determines the border style of the title.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Title.BorderWidth">
      <summary>Gets or sets the border width of the title.</summary>
      <returns>An integer value that determines the border width, in pixels, of the title.</returns>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.Title.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Title" /> and optionally releases the managed resources.</summary>
      <param name="disposing">True to release both managed and unmanaged resources; False to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Title.DockedToChartArea">
      <summary>Gets or sets the name of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> where the title will be docked.</summary>
      <returns>A string value that represents the name of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> where this title will be docked. The default value is the empty string.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Title.Docking">
      <summary>Gets or sets a value that determines where the title is docked.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.Docking" /> enumeration value. The default value is <see cref="F:System.Windows.Forms.DataVisualization.Charting.Docking.Top" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Title.DockingOffset">
      <summary>Gets or sets the positive or negative offset of the docked title position.</summary>
      <returns>An integer value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Title.Font">
      <summary>Gets or sets the font for the title.</summary>
      <returns>A <see cref="T:System.Drawing.Font" /> object. Defaults to "Microsoft Sans Serif, 8pt".</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Title.ForeColor">
      <summary>Gets or sets the color of the title text.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Title.IsDockedInsideChartArea">
      <summary>Gets or sets a flag that specifies whether the title should be docked within a <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> object.</summary>
      <returns>True if the title will be docked within a chart area, false if the title will be docked outside the chart area. The default value is false.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Title.Name">
      <summary>Gets or sets the unique name of a <see cref="T:System.Windows.Forms.DataVisualization.Charting.Title" /> object.</summary>
      <returns>A string value that represents the unique name of the title object. </returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Title.Position">
      <summary>Gets or sets an <see cref="T:System.Windows.Forms.DataVisualization.Charting.ElementPosition" /> object, which can be used to get or set the position of the title.</summary>
      <returns>An <see cref="T:System.Windows.Forms.DataVisualization.Charting.ElementPosition" /> value that represents the position of the title. The default value is <see cref="P:System.Windows.Forms.DataVisualization.Charting.ElementPosition.Auto" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Title.ShadowColor">
      <summary>Gets or sets the shadow color for the title.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value. The default color is <see cref="P:System.Drawing.Color.Black" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Title.ShadowOffset">
      <summary>Gets or sets the shadow offset, in pixels, of the title.</summary>
      <returns>An integer value that represents the shadow offset, in pixels, of the title.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Title.Text">
      <summary>Gets or sets the text for the title.</summary>
      <returns>A string value that represents the text for the title.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Title.TextOrientation">
      <summary>Gets or sets the orientation of the text in the title.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.TextOrientation" /> enumeration value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Title.TextStyle">
      <summary>Gets or sets the style of the text for the title.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.TextStyle" /> enumeration value that determines the style of the text for the title. The default value is <see cref="F:System.Windows.Forms.DataVisualization.Charting.TextStyle.Default" />. </returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Title.ToolTip">
      <summary>Gets or sets the tooltip for the title.</summary>
      <returns>A string value that represents the tooltip.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.Title.Visible">
      <summary>Gets or sets the visibility flag of the title.</summary>
      <returns>True if visible, otherwise false.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.TitleCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.Forms.DataVisualization.Charting.Title" /> objects.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.TitleCollection.Add(System.String)">
      <summary>Adds a <see cref="T:System.Windows.Forms.DataVisualization.Charting.Title" /> object with the specified name to the end of the collection.</summary>
      <returns>Index of the added object.</returns>
      <param name="name">The name of the title to add to the collection.</param>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.ToolTipEventArgs">
      <summary>Used as a parameter object in the <see cref="E:System.Windows.Forms.DataVisualization.Charting.Chart.GetToolTipText" /> event of the root <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" /> object.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ToolTipEventArgs.#ctor(System.Int32,System.Int32,System.String,System.Windows.Forms.DataVisualization.Charting.HitTestResult)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.ToolTipEventArgs" /> class with the specified <paramref name="x" />, <paramref name="y" />, <paramref name="text" /> and <paramref name="result" /> parameters.</summary>
      <param name="x">X-coordinate of mouse.</param>
      <param name="y">Y-coordinate of mouse.</param>
      <param name="text">The tooltip text.</param>
      <param name="result">The <see cref="T:System.Windows.Forms.DataVisualization.Charting.HitTestResult" />  object.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ToolTipEventArgs.HitTestResult">
      <summary>Gets a <see cref="T:System.Windows.Forms.DataVisualization.Charting.HitTestResult" /> object, which provides information about the chart element that the <see cref="E:System.Windows.Forms.DataVisualization.Charting.Chart.GetToolTipText" /> event was raised for.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.HitTestResult" /> object that represents information for the element the <see cref="E:System.Windows.Forms.DataVisualization.Charting.Chart.GetToolTipText" /> event was raised for.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ToolTipEventArgs.Text">
      <summary>Gets or sets the tooltip, if any, of the chart element over which the mouse cursor is held. This property can also set a tooltip for this chart element.</summary>
      <returns>A string value that represents the tooltip text of the element the <see cref="E:System.Windows.Forms.DataVisualization.Charting.Chart.GetToolTipText" /> event was raised for.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ToolTipEventArgs.X">
      <summary>Gets the X coordinate of the point the mouse cursor is held over when the <see cref="E:System.Windows.Forms.DataVisualization.Charting.Chart.GetToolTipText" /> event is raised.</summary>
      <returns>An integer value that represents the X coordinate of the mouse cursor.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ToolTipEventArgs.Y">
      <summary>Gets the Y coordinate of the point the mouse cursor is held over when the <see cref="E:System.Windows.Forms.DataVisualization.Charting.Chart.GetToolTipText" /> event is raised.</summary>
      <returns>An integer that represents the Y coordinate of the mouse cursor.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.TTestResult">
      <summary>Stores the results of a T Test statistical formula.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.TTestResult.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.TTestResult" /> class.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.TTestResult.DegreeOfFreedom">
      <summary>Gets the degree of freedom.</summary>
      <returns>A double value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.TTestResult.FirstSeriesMean">
      <summary>Gets the mean of the first series.</summary>
      <returns>A double value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.TTestResult.FirstSeriesVariance">
      <summary>Gets the variance of the first series.</summary>
      <returns>A double value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.TTestResult.ProbabilityTOneTail">
      <summary>Gets the Probability T one tail value.</summary>
      <returns>A double value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.TTestResult.ProbabilityTTwoTail">
      <summary>Gets the Probability T two tail value.</summary>
      <returns>A double value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.TTestResult.SecondSeriesMean">
      <summary>Gets the mean of the second series.</summary>
      <returns>A double value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.TTestResult.SecondSeriesVariance">
      <summary>Gets the variance of the second series.</summary>
      <returns>A double value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.TTestResult.TCriticalValueOneTail">
      <summary>Gets the Critical T one tail value.</summary>
      <returns>A double value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.TTestResult.TCriticalValueTwoTail">
      <summary>Gets the Critical T two tail value.</summary>
      <returns>A double value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.TTestResult.TValue">
      <summary>Gets the T value.</summary>
      <returns>A double value.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.VerticalLineAnnotation">
      <summary>Represents a vertical line annotation.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.VerticalLineAnnotation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.VerticalLineAnnotation" /> class.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.VerticalLineAnnotation.AnnotationType">
      <summary>Gets the annotation type. </summary>
      <returns>The annotation type.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.ViewEventArgs">
      <summary>Used as a parameter object in the <see cref="E:System.Windows.Forms.DataVisualization.Charting.Chart.AxisViewChanged" /> and <see cref="E:System.Windows.Forms.DataVisualization.Charting.Chart.AxisViewChanging" /> events of the root <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" /> object.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ViewEventArgs.#ctor(System.Windows.Forms.DataVisualization.Charting.Axis,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.ViewEventArgs" /> class with the specified <paramref name="axis" /> and <paramref name="newPosition" /> parameters.</summary>
      <param name="axis">The axis of the scale view.</param>
      <param name="newPosition">The start position of the new scale view.</param>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ViewEventArgs.#ctor(System.Windows.Forms.DataVisualization.Charting.Axis,System.Double,System.Double,System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.ViewEventArgs" /> class with the specified <paramref name="axis" />, <paramref name="newPosition" />, <paramref name="newSize" /> and <paramref name="newSizeType" /> parameters.</summary>
      <param name="axis">The axis of the scale view.</param>
      <param name="newPosition">The start position of the new scale view.</param>
      <param name="newSize">The new scale view size.</param>
      <param name="newSizeType">The unit of measurement for the size of the new scale view.</param>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ViewEventArgs.Axis">
      <summary>Gets the <see cref="T:System.Windows.Forms.DataVisualization.Charting.Axis" /> object that a view belongs to.</summary>
      <returns>An <see cref="T:System.Windows.Forms.DataVisualization.Charting.Axis" /> object that represents the axis that a view belongs to.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ViewEventArgs.ChartArea">
      <summary>Gets the <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> object that a view belongs to.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartArea" /> object that represents the chart area a view belongs to.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ViewEventArgs.NewPosition">
      <summary>Gets the new position of a view along an axis.</summary>
      <returns>A double value that represents the position of a view along an axis, which is the bottom of a vertical view or the left position of a horizontal view, respectively.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ViewEventArgs.NewSize">
      <summary>Gets or sets the size of a view.</summary>
      <returns>A double value that represents the size of a view along an axis. The size is the height of the vertical view or width of the horizontal view, respectively.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ViewEventArgs.NewSizeType">
      <summary>Gets the unit of measurement for the new size of a view.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType" /> enumeration value that represents the unit of measurement for the <see cref="P:System.Windows.Forms.DataVisualization.Charting.ViewEventArgs.NewSize" /> property, which represents the width or height of a data view. The default value is <see cref="F:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType.Auto" />.</returns>
    </member>
    <member name="T:System.Windows.Forms.DataVisualization.Charting.ZTestResult">
      <summary>Stores the results of a Z Test statistical formula.</summary>
    </member>
    <member name="M:System.Windows.Forms.DataVisualization.Charting.ZTestResult.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.DataVisualization.Charting.ZTestResult" /> class.</summary>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ZTestResult.FirstSeriesMean">
      <summary>Gets the mean of the first series.</summary>
      <returns>A double value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ZTestResult.FirstSeriesVariance">
      <summary>Gets the variance of the first series.</summary>
      <returns>A double value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ZTestResult.ProbabilityZOneTail">
      <summary>Gets the Probability Z one tail value.</summary>
      <returns>A double value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ZTestResult.ProbabilityZTwoTail">
      <summary>Gets the Probability Z two tail value.</summary>
      <returns>A double value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ZTestResult.SecondSeriesMean">
      <summary>Gets the mean of the second series.</summary>
      <returns>A double value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ZTestResult.SecondSeriesVariance">
      <summary>Gets the variance of the second series.</summary>
      <returns>A double value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ZTestResult.ZCriticalValueOneTail">
      <summary>Gets the Critical Z one tail value.</summary>
      <returns>A double value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ZTestResult.ZCriticalValueTwoTail">
      <summary>Gets the Critical Z two tail value.</summary>
      <returns>A double value.</returns>
    </member>
    <member name="P:System.Windows.Forms.DataVisualization.Charting.ZTestResult.ZValue">
      <summary>Gets the Z value.</summary>
      <returns>A double value.</returns>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\System.Windows.Presentation.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Windows.Presentation</name>
  </assembly>
  <members>
    <member name="T:System.AddIn.Pipeline.FrameworkElementAdapters">
      <summary>
        <see cref="T:System.AddIn.Pipeline.FrameworkElementAdapters" /> is used by Windows Presentation Foundation (WPF) add-ins to convert between a <see cref="T:System.Windows.FrameworkElement" /> and an <see cref="T:System.AddIn.Contract.INativeHandleContract" />.</summary>
    </member>
    <member name="M:System.AddIn.Pipeline.FrameworkElementAdapters.ContractToViewAdapter(System.AddIn.Contract.INativeHandleContract)">
      <summary>Returns a <see cref="T:System.Windows.FrameworkElement" /> that has been converted from an <see cref="T:System.AddIn.Contract.INativeHandleContract" />.</summary>
      <returns>A <see cref="T:System.Windows.FrameworkElement" /> that will be displayed from either the host application or add-in, depending on the direction in which the UI is passed between the two.</returns>
      <param name="nativeHandleContract">The <see cref="T:System.AddIn.Contract.INativeHandleContract" /> that was passed across the isolation boundary between the host application and the add-in.</param>
    </member>
    <member name="M:System.AddIn.Pipeline.FrameworkElementAdapters.ViewToContractAdapter(System.Windows.FrameworkElement)">
      <summary>Returns an <see cref="T:System.AddIn.Contract.INativeHandleContract" /> that has been converted from a <see cref="T:System.Windows.FrameworkElement" />.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.INativeHandleContract" /> that is passed from either the host application or the add-in, depending on the direction in which the UI is passed between the two.</returns>
      <param name="root">The <see cref="T:System.Windows.FrameworkElement" /> to be passed across the isolation boundary between the host application and the add-in.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="root" /> is not the root element of a tree of elements.</exception>
    </member>
    <member name="T:System.Windows.Threading.DispatcherExtensions">
      <summary>Provides a set of static methods that extend the <see cref="T:System.Windows.Threading.Dispatcher" /> class.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherExtensions.BeginInvoke(System.Windows.Threading.Dispatcher,System.Action)">
      <summary>Executes the specified delegate asynchronously with normal priority on the thread that the specified <see cref="T:System.Windows.Threading.Dispatcher" /> was created on.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that represents the result of the <see cref="M:System.Windows.Threading.DispatcherExtensions.BeginInvoke(System.Windows.Threading.Dispatcher,System.Action)" /> operation.</returns>
      <param name="dispatcher">The dispatcher that executes the delegate.</param>
      <param name="action">The delegate to execute, which takes no arguments and does not return a value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null. </exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherExtensions.BeginInvoke(System.Windows.Threading.Dispatcher,System.Action,System.Windows.Threading.DispatcherPriority)">
      <summary>Executes the specified delegate asynchronously with the specified priority on the thread that the specified <see cref="T:System.Windows.Threading.Dispatcher" /> was created on.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that represents the result of the <see cref="M:System.Windows.Threading.DispatcherExtensions.BeginInvoke(System.Windows.Threading.Dispatcher,System.Action,System.Windows.Threading.DispatcherPriority)" /> operation.</returns>
      <param name="dispatcher">The dispatcher that executes the delegate.</param>
      <param name="action">The delegate to execute, which takes no arguments and does not return a value.</param>
      <param name="priority">The execution priority of the delegate relative to other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null. </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherExtensions.Invoke(System.Windows.Threading.Dispatcher,System.Action)">
      <summary>Executes the specified delegate synchronously with normal priority on the thread that the specified <see cref="T:System.Windows.Threading.Dispatcher" /> was created on.</summary>
      <param name="dispatcher">The dispatcher that executes the delegate.</param>
      <param name="action">The delegate to execute, which takes no arguments and does not return a value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null. </exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherExtensions.Invoke(System.Windows.Threading.Dispatcher,System.Action,System.TimeSpan)">
      <summary>Executes the specified delegate synchronously on the thread that the specified <see cref="T:System.Windows.Threading.Dispatcher" /> was created on, and stops execution after the specified time-out period. </summary>
      <param name="dispatcher">The dispatcher that executes the delegate.</param>
      <param name="action">The delegate to execute, which takes no arguments and does not return a value.</param>
      <param name="timeout">The maximum time to wait for the operation to finish.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherExtensions.Invoke(System.Windows.Threading.Dispatcher,System.Action,System.TimeSpan,System.Windows.Threading.DispatcherPriority)">
      <summary>Executes the specified delegate synchronously with the specified priority on the thread that the specified <see cref="T:System.Windows.Threading.Dispatcher" /> was created on, and stops execution after the specified time-out period.</summary>
      <param name="dispatcher">The dispatcher that executes the delegate.</param>
      <param name="action">The delegate to execute, which takes no arguments and does not return a value.</param>
      <param name="timeout">The maximum time to wait for the operation to finish.</param>
      <param name="priority">The execution priority of the delegate relative to other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherExtensions.Invoke(System.Windows.Threading.Dispatcher,System.Action,System.Windows.Threading.DispatcherPriority)">
      <summary>Executes the specified delegate synchronously with the specified priority on the thread that the specified <see cref="T:System.Windows.Threading.Dispatcher" /> was created on.</summary>
      <param name="dispatcher">The dispatcher that executes the delegate.</param>
      <param name="action">The delegate to execute, which takes no arguments and does not return a value.</param>
      <param name="priority">The execution priority of the delegate relative to other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</exception>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\System.Workflow.Activities.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Workflow.Activities</name>
  </assembly>
  <members>
    <member name="T:System.Workflow.Activities.ActiveDirectoryRole">
      <summary>Represents an Active Directory role in a Windows Workflow Foundation hosting environment. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.ActiveDirectoryRole.GetAllReports">
      <summary>Returns an <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" /> that contains all the roles that report to the current role either directly or indirectly.</summary>
      <returns>A <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" /> that contains all the roles that either directly or indirectly report to the current role.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.ActiveDirectoryRole.GetDirectReports">
      <summary>Returns an <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" /> that contains all the roles that report directly to the current role.</summary>
      <returns>An <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" /> that contains all the roles that directly report to the current role.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.ActiveDirectoryRole.GetEntries">
      <summary>Returns the generic collection that contains all <see cref="T:System.DirectoryServices.DirectoryEntry" /> objects associated with the current <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" />. </summary>
      <returns>The generic <see cref="T:System.DirectoryServices.DirectoryEntry" /> collection that is associated with the current <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" />.</returns>
    </member>
    <member name="M:System.Workflow.Activities.ActiveDirectoryRole.GetIdentities">
      <summary>Gets a generic list of the Windows NT accounts associated with the <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" />. </summary>
      <returns>A generic list of values that represent the Windows NT accounts associated with the <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" />. </returns>
    </member>
    <member name="M:System.Workflow.Activities.ActiveDirectoryRole.GetManager">
      <summary>Returns an Active Directory role that contains information about the manager of the current <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" />.</summary>
      <returns>The <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" /> that contains information about the manager of the current role.</returns>
    </member>
    <member name="M:System.Workflow.Activities.ActiveDirectoryRole.GetManagerialChain">
      <summary>Returns the Active Directory role that contains information about the managerial chain associated with the current <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" />. </summary>
      <returns>The <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" /> that contains information about the managerial chain associated with the current role.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.ActiveDirectoryRole.GetPeers">
      <summary>Returns an Active Directory role that contains information about all the directory operations that are supervised by the manager of the current <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" />.</summary>
      <returns>A <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" /> that contains information about all directory operations that are supervised by the manager of the current <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" />.</returns>
    </member>
    <member name="M:System.Workflow.Activities.ActiveDirectoryRole.GetSecurityIdentifiers">
      <summary>Returns a generic list of <see cref="T:System.Security.Principal.SecurityIdentifier" /> objects associated with the current <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" />. </summary>
      <returns>A generic list of <see cref="T:System.Security.Principal.SecurityIdentifier" /> objects associated with the current <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.ActiveDirectoryRole.IncludesIdentity(System.String)">
      <summary>Returns a value that indicates whether the <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" /> contains the specified identity. </summary>
      <returns>true to indicate that <paramref name="identity" /> is included in the <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" />; otherwise, false.</returns>
      <param name="identity">The identity for which to search.</param>
    </member>
    <member name="P:System.Workflow.Activities.ActiveDirectoryRole.Name">
      <summary>Gets or sets the Active Directory role name.</summary>
      <returns>The Active Directory role name.</returns>
    </member>
    <member name="P:System.Workflow.Activities.ActiveDirectoryRole.RootEntry">
      <summary>Gets the root Active Directory node associated with the <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" />.</summary>
      <returns>A <see cref="T:System.DirectoryServices.DirectoryEntry" /> that represents the root Active Directory node associated with the <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.ActiveDirectoryRole.System#IDisposable#Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" />. </summary>
    </member>
    <member name="M:System.Workflow.Activities.ActiveDirectoryRole.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data required to serialize the target object.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> destination for this serialization.</param>
    </member>
    <member name="T:System.Workflow.Activities.ActiveDirectoryRoleFactory">
      <summary>A factory class for creating <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" /> objects from Windows NT aliases, e-mail addresses, and security identifiers (SIDs).</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.ActiveDirectoryRoleFactory.Configuration">
      <summary>Gets the <see cref="T:System.Workflow.Activities.Configuration.ActiveDirectoryRoleFactoryConfiguration" /> object that is associated with the <see cref="T:System.Workflow.Activities.ActiveDirectoryRoleFactory" />.</summary>
      <returns>The <see cref="T:System.Workflow.Activities.Configuration.ActiveDirectoryRoleFactoryConfiguration" /> object associated with the <see cref="T:System.Workflow.Activities.ActiveDirectoryRoleFactory" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.ActiveDirectoryRoleFactory.CreateFromAlias(System.String)">
      <summary>Creates an instance of <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" /> using the specified Windows NT alias.</summary>
      <returns>An instance of <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" /> that describes the specified Windows NT alias.</returns>
      <param name="alias">The alias string to create the <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" />.</param>
    </member>
    <member name="M:System.Workflow.Activities.ActiveDirectoryRoleFactory.CreateFromEmailAddress(System.String)">
      <summary>Creates an instance of <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" /> using an e-mail address.</summary>
      <returns>An instance of <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" /> that describes the specified e-mail address.</returns>
      <param name="emailAddress">The e-mail address string from which to create the <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" />.</param>
    </member>
    <member name="M:System.Workflow.Activities.ActiveDirectoryRoleFactory.CreateFromSecurityIdentifier(System.Security.Principal.SecurityIdentifier)">
      <summary>Creates an instance of <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" /> using a Windows NT <see cref="T:System.Security.Principal.SecurityIdentifier" />.</summary>
      <returns>An instance of <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" /> that describes the specified <see cref="T:System.Security.Principal.SecurityIdentifier" />.</returns>
      <param name="sid">The <see cref="T:System.Security.Principal.SecurityIdentifier" /> to use to create the <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" />.</param>
    </member>
    <member name="T:System.Workflow.Activities.CallExternalMethodActivity">
      <summary>Defines a workflow communication activity that is used to call a method on a local service. This activity is used to send data from the workflow to the host through the local service.</summary>
    </member>
    <member name="M:System.Workflow.Activities.CallExternalMethodActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.CallExternalMethodActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.CallExternalMethodActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.CallExternalMethodActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity, used to initialize the activity name property.</param>
    </member>
    <member name="P:System.Workflow.Activities.CallExternalMethodActivity.CorrelationToken">
      <summary>Gets or sets the <see cref="T:System.Workflow.Runtime.CorrelationToken" /> for the external method.</summary>
      <returns>The correlation token for the external method.</returns>
    </member>
    <member name="F:System.Workflow.Activities.CallExternalMethodActivity.CorrelationTokenProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.CallExternalMethodActivity.CorrelationToken" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.CallExternalMethodActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)">
      <summary>Tries to run the <see cref="T:System.Workflow.Activities.CallExternalMethodActivity" /> with the specified <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" />.</summary>
      <returns>One of the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> values.</returns>
      <param name="executionContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> that contains the execution environment in which to run the <see cref="T:System.Workflow.Activities.CallExternalMethodActivity" />.</param>
      <exception cref="T:System.ArgumentException">This <see cref="P:System.Workflow.Activities.CallExternalMethodActivity.InterfaceType" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="executionContext" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">The service object for the <paramref name="executionContext" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.Activities.CallExternalMethodActivity.InitializeProperties">
      <summary>Performs initialization on dependency properties.</summary>
    </member>
    <member name="P:System.Workflow.Activities.CallExternalMethodActivity.InterfaceType">
      <summary>Gets or sets an external method's declaring interface that has the <see cref="T:System.Workflow.Activities.ExternalDataExchangeAttribute" />.</summary>
      <returns>The external method's declaring interface that has the <see cref="T:System.Workflow.Activities.ExternalDataExchangeAttribute" />.</returns>
    </member>
    <member name="F:System.Workflow.Activities.CallExternalMethodActivity.InterfaceTypeProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.CallExternalMethodActivity.InterfaceType" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Workflow.Activities.CallExternalMethodActivity.MethodInvoking">
      <summary>Occurs before invoking the method.</summary>
    </member>
    <member name="F:System.Workflow.Activities.CallExternalMethodActivity.MethodInvokingEvent">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="E:System.Workflow.Activities.CallExternalMethodActivity.MethodInvoking" /> event.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.CallExternalMethodActivity.MethodName">
      <summary>Gets or sets the name of the method to be called on the local service registered with the <see cref="T:System.Workflow.Activities.ExternalDataExchangeService" />.</summary>
      <returns>The method name of the <see cref="T:System.Workflow.Activities.ExternalDataExchangeService" /> interface.</returns>
    </member>
    <member name="F:System.Workflow.Activities.CallExternalMethodActivity.MethodNameProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.CallExternalMethodActivity.MethodName" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.CallExternalMethodActivity.OnMethodInvoked(System.EventArgs)">
      <summary>Provides a hook for derived classes to extract out and return values from the <see cref="P:System.Workflow.Activities.CallExternalMethodActivity.ParameterBindings" />. This method is called just after the external method is run. </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the data for the <see cref="E:System.Workflow.Activities.CallExternalMethodActivity.MethodInvoking" /> event.</param>
    </member>
    <member name="M:System.Workflow.Activities.CallExternalMethodActivity.OnMethodInvoking(System.EventArgs)">
      <summary>Provides a hook for derived classes to set <see cref="P:System.Workflow.Activities.CallExternalMethodActivity.ParameterBindings" />. This method is called just before the external method is run.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the data for the <see cref="E:System.Workflow.Activities.CallExternalMethodActivity.MethodInvoking" /> event.</param>
    </member>
    <member name="P:System.Workflow.Activities.CallExternalMethodActivity.ParameterBindings">
      <summary>Gets the collection of bindable parameters as found in the external method's formal parameter list.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.WorkflowParameterBindingCollection" /> of parameters to bind to.</returns>
    </member>
    <member name="F:System.Workflow.Activities.CallExternalMethodActivity.ParameterBindingsProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.CallExternalMethodActivity.ParameterBindings" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.CallExternalMethodActivity.System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetAccessType(System.IServiceProvider,System.String)">
      <summary>Returns the access type for the specified property.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Compiler.AccessTypes" /> enumeration value that denotes the access level of the property.</returns>
      <param name="serviceProvider">An object that implements <see cref="T:System.IServiceProvider" /> to provide access to design time services if they are required.</param>
      <param name="propertyName">The name of the property.</param>
    </member>
    <member name="M:System.Workflow.Activities.CallExternalMethodActivity.System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetPropertyType(System.IServiceProvider,System.String)">
      <summary>Returns the <see cref="T:System.Type" /> of the specified property.</summary>
      <returns>The <see cref="T:System.Type" /> for the property whose name is passed as the <paramref name="propertyName " />parameter. </returns>
      <param name="serviceProvider">An object that implements <see cref="T:System.IServiceProvider" /> to provide access to design time services if they are required.</param>
      <param name="propertyName">The name of the property.</param>
    </member>
    <member name="T:System.Workflow.Activities.CallExternalMethodActivityValidator">
      <summary>Verifies that the <see cref="T:System.Workflow.Activities.CallExternalMethodActivity" /> class is configured correctly.</summary>
    </member>
    <member name="M:System.Workflow.Activities.CallExternalMethodActivityValidator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.CallExternalMethodActivityValidator" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.CallExternalMethodActivityValidator.Validate(System.Workflow.ComponentModel.Compiler.ValidationManager,System.Object)">
      <summary>Validates the <see cref="T:System.Workflow.Activities.CallExternalMethodActivity" /> class during workflow compilation.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> that contains the errors from this operation.</returns>
      <param name="manager">The <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationManager" /> to use for this validation.</param>
      <param name="obj">The <see cref="T:System.Object" /> to validate.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="T:System.Workflow.Activities.CodeActivity">
      <summary>Runs the code-beside method associated with an activity. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.CodeActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.CodeActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.CodeActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.CodeActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
    </member>
    <member name="E:System.Workflow.Activities.CodeActivity.ExecuteCode">
      <summary>Occurs when the <see cref="T:System.Workflow.Activities.CodeActivity" /> starts.</summary>
    </member>
    <member name="F:System.Workflow.Activities.CodeActivity.ExecuteCodeEvent">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="E:System.Workflow.Activities.CodeActivity.ExecuteCode" /> event.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.CodeCondition">
      <summary>Defines a condition that guards/drives the execution of a certain activity within a workflow definition. It has an event of type <see cref="T:System.Workflow.Activities.ConditionalEventArgs" /> to return the result of the condition.</summary>
    </member>
    <member name="M:System.Workflow.Activities.CodeCondition.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.CodeCondition" /> class.</summary>
    </member>
    <member name="E:System.Workflow.Activities.CodeCondition.Condition">
      <summary>Occurs when the condition is evaluated.</summary>
    </member>
    <member name="F:System.Workflow.Activities.CodeCondition.ConditionEvent">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="E:System.Workflow.Activities.CodeCondition.Condition" /> event.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.CodeCondition.Evaluate(System.Workflow.ComponentModel.Activity,System.IServiceProvider)">
      <summary>Evaluates the underlying condition. </summary>
      <returns>true if the condition evaluates to true; otherwise, false. The default is false.</returns>
      <param name="ownerActivity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> associated with this condition.</param>
      <param name="provider">The <see cref="T:System.IServiceProvider" /> for this condition evaluation.</param>
    </member>
    <member name="M:System.Workflow.Activities.CodeCondition.GetBoundValue(System.Workflow.ComponentModel.ActivityBind,System.Type)">
      <summary>Retrieves the <see cref="T:System.Object" /> that is the subject of a <see cref="T:System.Workflow.ComponentModel.ActivityBind" />.</summary>
      <returns>The <see cref="T:System.Object" /> bound to the activity by the <see cref="T:System.Workflow.ComponentModel.ActivityBind" />.</returns>
      <param name="bind">The <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> of interest.</param>
      <param name="targetType">The <see cref="T:System.Type" /> of the target of the <see cref="T:System.Workflow.ComponentModel.ActivityBind" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bind" /> or <paramref name="targetType" /> is null.</exception>
    </member>
    <member name="T:System.Workflow.Activities.CompensatableSequenceActivity">
      <summary>Defines a compensatable version of the <see cref="T:System.Workflow.Activities.SequenceActivity" /> activity. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.CompensatableSequenceActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.CompensatableSequenceActivity" /> class. </summary>
    </member>
    <member name="M:System.Workflow.Activities.CompensatableSequenceActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.CompensatableSequenceActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
    </member>
    <member name="M:System.Workflow.Activities.CompensatableSequenceActivity.System#Workflow#ComponentModel#ICompensatableActivity#Compensate(System.Workflow.ComponentModel.ActivityExecutionContext)">
      <summary>Execute the activity using the <see cref="M:System.Workflow.ComponentModel.ICompensatableActivity.Compensate(System.Workflow.ComponentModel.ActivityExecutionContext)" /> interface.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> after the operation has been tried.</returns>
      <param name="executionContext">The execution context of the activity.</param>
    </member>
    <member name="T:System.Workflow.Activities.ConditionalEventArgs">
      <summary>Returns result information for the <see cref="T:System.Workflow.Activities.CodeCondition" /> class. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.ConditionalEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.ConditionalEventArgs" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.ConditionalEventArgs.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.ConditionalEventArgs" /> class using the result of the condition.</summary>
      <param name="result">The result of the condition.</param>
    </member>
    <member name="P:System.Workflow.Activities.ConditionalEventArgs.Result">
      <summary>Gets or sets the result of a <see cref="T:System.Workflow.Activities.CodeCondition" /> evaluation.</summary>
      <returns>true if the result of the condition is true; otherwise, false.</returns>
    </member>
    <member name="T:System.Workflow.Activities.ConditionedActivityGroup">
      <summary>Provides the definition of a constraint-based execution context for a set of child activities.</summary>
    </member>
    <member name="M:System.Workflow.Activities.ConditionedActivityGroup.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.ConditionedActivityGroup" /> class.</summary>
      <exception cref="T:System.InvalidOperationException">No children are executing and the <see cref="P:System.Workflow.Activities.ConditionedActivityGroup.UntilCondition" /> evaluates to false.</exception>
    </member>
    <member name="M:System.Workflow.Activities.ConditionedActivityGroup.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.ConditionedActivityGroup" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
    </member>
    <member name="M:System.Workflow.Activities.ConditionedActivityGroup.GetChildActivityExecutedCount(System.Workflow.ComponentModel.Activity)">
      <summary>Gets the number of times that the specified child activity has been executed.</summary>
      <returns>The number of times that the specified child activity has been executed.</returns>
      <param name="child">The child activity.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="child" /> parameter is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">The conditioned activity group state is null.</exception>
      <exception cref="T:System.ArgumentException">The number of times that the child activity has been run cannot be determined.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.ConditionedActivityGroup.GetDynamicActivity(System.String)">
      <summary>Gets the currently executing instance of the child activity.</summary>
      <returns>The currently executing instance of the <see cref="T:System.Workflow.Activities.EventDrivenActivity" />.</returns>
      <param name="childActivityName">The name of the child <see cref="T:System.Workflow.Activities.EventDrivenActivity" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="childactivity" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">The executable activities do not contain the <paramref name="childactivity" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.ConditionedActivityGroup.GetWhenCondition(System.Object)">
      <summary>Gets the condition associated with the <see cref="F:System.Workflow.Activities.ConditionedActivityGroup.WhenConditionProperty" /> for the specified dependency object.</summary>
      <returns>The when condition.</returns>
      <param name="dependencyObject">The underlying data storage object for the activity.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dependencyObject" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">The executable activities do not contain the <paramref name="dependencyObject" />.</exception>
    </member>
    <member name="M:System.Workflow.Activities.ConditionedActivityGroup.SetWhenCondition(System.Object,System.Object)">
      <summary>Sets the condition associated with the <see cref="F:System.Workflow.Activities.ConditionedActivityGroup.WhenConditionProperty" /> for the specified dependency object.</summary>
      <param name="dependencyObject">The underlying data storage object for the activity.</param>
      <param name="value">The value of the when condition.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dependencyObject" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">The executable activities do not contain the <paramref name="dependencyObject" />.</exception>
    </member>
    <member name="M:System.Workflow.Activities.ConditionedActivityGroup.System#Workflow#ComponentModel#IActivityEventListener{T}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)">
      <summary>Defines the processing procedure when the subscribed-to event occurs.</summary>
      <param name="sender">The object that raised the event.</param>
      <param name="e">The previously-typed event arguments.</param>
    </member>
    <member name="P:System.Workflow.Activities.ConditionedActivityGroup.UntilCondition">
      <summary>Gets or sets a value that indicates when the <see cref="T:System.Workflow.Activities.ConditionedActivityGroup" /> should complete.</summary>
      <returns>A condition that determines whether the <see cref="T:System.Workflow.Activities.ConditionedActivityGroup" /> should complete.</returns>
    </member>
    <member name="F:System.Workflow.Activities.ConditionedActivityGroup.UntilConditionProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.ConditionedActivityGroup.UntilCondition" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.Activities.ConditionedActivityGroup.WhenConditionProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="F:System.Workflow.Activities.ConditionedActivityGroup.WhenConditionProperty" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.CorrelationAliasAttribute">
      <summary>Overrides the correlation parameter value when the correlation value must be obtained from a parameter other than that indicated by the <see cref="T:System.Workflow.Activities.CorrelationParameterAttribute" />. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.CorrelationAliasAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.CorrelationAliasAttribute" /> with the name of the correlation that is being aliased and the path to where the value can be found.</summary>
      <param name="name">The name of the correlation parameter that is being aliased.</param>
      <param name="path">Indicates which argument in the method or event holds the value for the correlation parameter specified by <paramref name="name" />. This parameter can use dot notation, for example, Parameter.Location.</param>
    </member>
    <member name="P:System.Workflow.Activities.CorrelationAliasAttribute.Name">
      <summary>Gets the name of the correlation parameter that is being aliased.</summary>
      <returns>The name of the correlation parameter that is being aliased.</returns>
    </member>
    <member name="P:System.Workflow.Activities.CorrelationAliasAttribute.Path">
      <summary>Gets the path within the parameter that specifies the location of the correlation value.</summary>
      <returns>The path within the parameter that specifies the location of the correlation value.</returns>
    </member>
    <member name="T:System.Workflow.Activities.CorrelationInitializerAttribute">
      <summary>Indicates the method or event on an ExternalDataExchange interface that initializes the correlation value. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.CorrelationInitializerAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.CorrelationInitializerAttribute" /> attribute.</summary>
    </member>
    <member name="T:System.Workflow.Activities.CorrelationParameterAttribute">
      <summary>Indicates the name of the parameter used for correlation in the methods and events defined on an ExternalDataExchange interface. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.CorrelationParameterAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.CorrelationParameterAttribute" /> where the name of the parameter is used for correlation.</summary>
      <param name="name">The name of the parameter used for correlation.</param>
    </member>
    <member name="P:System.Workflow.Activities.CorrelationParameterAttribute.Name">
      <summary>Gets the name of the parameter used for correlation.</summary>
      <returns>Name of the parameter used for correlation. The default is an empty string.</returns>
    </member>
    <member name="T:System.Workflow.Activities.DelayActivity">
      <summary>Provides the logic to establish a timer and to wait, asynchronously, for timer's expiration.  This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Workflow.Activities.DelayActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.DelayActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.DelayActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.DelayActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
    </member>
    <member name="E:System.Workflow.Activities.DelayActivity.InitializeTimeoutDuration">
      <summary>Occurs before the time-out duration starts. </summary>
    </member>
    <member name="F:System.Workflow.Activities.DelayActivity.InitializeTimeoutDurationEvent">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="E:System.Workflow.Activities.DelayActivity.InitializeTimeoutDuration" /> event. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.DelayActivity.System#Workflow#Activities#IEventActivity#QueueName">
      <summary>Gets the name of the workflow queue that will be delivered when the timer expires.</summary>
      <returns>The name of the workflow queue.</returns>
    </member>
    <member name="M:System.Workflow.Activities.DelayActivity.System#Workflow#Activities#IEventActivity#Subscribe(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})">
      <summary>Creates the subscription of the <see cref="T:System.Workflow.Activities.DelayActivity" /> to an event.</summary>
      <param name="parentContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> that represents the execution environment of the <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
      <param name="parentEventHandler">The <see cref="T:System.EventHandler" /> for the parent event.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parentContext" /> or <paramref name="parentEventHandler" /> is null.</exception>
    </member>
    <member name="M:System.Workflow.Activities.DelayActivity.System#Workflow#Activities#IEventActivity#Unsubscribe(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})">
      <summary>Cancels the subscription of the <see cref="T:System.Workflow.Activities.DelayActivity" /> to an event.</summary>
      <param name="parentContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> that represents the execution environment of the <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
      <param name="parentEventHandler">The <see cref="T:System.EventHandler" /> for the parent event.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parentContext" /> or <paramref name="parentEventHandler" /> is null.</exception>
    </member>
    <member name="M:System.Workflow.Activities.DelayActivity.System#Workflow#ComponentModel#IActivityEventListener{T}#OnEvent(System.Object,System.Workflow.ComponentModel.QueueEventArgs)">
      <summary>Defines the processing procedure when the subscribed-to event occurs.</summary>
      <param name="sender">The object that raised the event.</param>
      <param name="e">The previously typed event arguments.</param>
    </member>
    <member name="P:System.Workflow.Activities.DelayActivity.TimeoutDuration">
      <summary>Gets and sets the duration of the delay in the workflow.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> that indicates the length of the delay in the workflow.</returns>
    </member>
    <member name="F:System.Workflow.Activities.DelayActivity.TimeoutDurationProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.DelayActivity.TimeoutDuration" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.EventDeliveryFailedException">
      <summary>The exception that is thrown when an event that is raised from the host cannot be delivered to the workflow instance. Typically the event is raised from an <see cref="T:System.Workflow.Activities.ExternalDataExchangeService" /> on a workflow instance. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.EventDeliveryFailedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.EventDeliveryFailedException" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.EventDeliveryFailedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.EventDeliveryFailedException" /> class by using the error message that explains the reason for the exception.</summary>
      <param name="message">An error message that explains the reason for the exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.EventDeliveryFailedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.EventDeliveryFailedException" /> class by using the error message that explains the reason for the exception and the <see cref="T:System.Exception" /> that caused this exception.</summary>
      <param name="message">An error message that explains the reason for the exception.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that caused this exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.EventDrivenActivity">
      <summary>Wraps an <see cref="T:System.Workflow.ComponentModel.Activity" /> whose execution is initialized by an event. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Workflow.Activities.EventDrivenActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.EventDrivenActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.EventDrivenActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.EventDrivenActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-identified name of the activity.</param>
    </member>
    <member name="P:System.Workflow.Activities.EventDrivenActivity.EventActivity">
      <summary>Gets the event activity that drives the change.</summary>
      <returns>The event activity that drives the change.</returns>
    </member>
    <member name="T:System.Workflow.Activities.EventHandlersActivity">
      <summary>A composite activity that contains a collection of event handlers. It is typically used where a collection of events must be handled. Each event is handled by one <see cref="T:System.Workflow.Activities.EventDrivenActivity" />, which is part of <see cref="T:System.Workflow.Activities.EventHandlersActivity" />.</summary>
    </member>
    <member name="M:System.Workflow.Activities.EventHandlersActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.EventHandlersActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.EventHandlersActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.EventHandlersActivity" /> class by using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
    </member>
    <member name="M:System.Workflow.Activities.EventHandlersActivity.GetDynamicActivity(System.String)">
      <summary>Gets the currently executing instance of the <see cref="T:System.Workflow.Activities.EventDrivenActivity" />.</summary>
      <returns>The currently executing instance of the <see cref="T:System.Workflow.Activities.EventDrivenActivity" />.</returns>
      <param name="childActivityName">The name of the child <see cref="T:System.Workflow.Activities.EventDrivenActivity" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="childactivity" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">The executable activities do not contain the <paramref name="childactivity" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.EventHandlersActivity.System#Workflow#ComponentModel#IActivityEventListener{T}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)">
      <summary>Defines the processing procedure when the subscribed-to event occurs.</summary>
      <param name="sender">The object that raised the event.</param>
      <param name="e">The previously typed event arguments.</param>
    </member>
    <member name="T:System.Workflow.Activities.EventHandlingScopeActivity">
      <summary>Enables event handling with the execution of the child activities. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.EventHandlingScopeActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.EventHandlingScopeActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.EventHandlingScopeActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.EventHandlingScopeActivity" /> class using the name of the name of the activity.</summary>
      <param name="name">The user defined name of the activity.</param>
    </member>
    <member name="M:System.Workflow.Activities.EventHandlingScopeActivity.System#Workflow#ComponentModel#IActivityEventListener{T}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)">
      <summary>Defines the processing procedure when the subscribed-to event occurs.</summary>
      <param name="sender">The object that raised the event.</param>
      <param name="e">The previously typed event arguments.</param>
    </member>
    <member name="T:System.Workflow.Activities.EventQueueName">
      <summary>Represents the name of a queue associated with an event on a <see cref="T:System.Workflow.Runtime.WorkflowInstance" />. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Workflow.Activities.EventQueueName.#ctor(System.Type,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.EventQueueName" /> class by using the specified <see cref="T:System.Type" /> and operation name. </summary>
      <param name="interfaceType">The <see cref="T:System.Type" /> of the interface to associate with the <see cref="T:System.Workflow.Activities.EventQueueName" />.</param>
      <param name="operation">A string that contains the name of the operation to associate with the <see cref="T:System.Workflow.Activities.EventQueueName" />.</param>
    </member>
    <member name="M:System.Workflow.Activities.EventQueueName.#ctor(System.Type,System.String,System.Collections.Generic.ICollection{System.Workflow.Runtime.CorrelationProperty})">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.EventQueueName" /> class. </summary>
      <param name="interfaceType">The <see cref="T:System.Type" /> of the interface</param>
      <param name="operation">A string that contains the name of the operation to associate with the <see cref="T:System.Workflow.Activities.EventQueueName" />.</param>
      <param name="propertyValues">A <see cref="T:System.Workflow.Runtime.CorrelationProperty" /> collection that defines the property values to associate with <see cref="T:System.Workflow.Activities.EventQueueName" />.</param>
    </member>
    <member name="M:System.Workflow.Activities.EventQueueName.CompareTo(System.Object)">
      <summary>Compares the current <see cref="T:System.Workflow.Activities.EventQueueName" /> to the specified <see cref="T:System.Workflow.Activities.EventQueueName" />. </summary>
      <returns>A 32-bit signed integer that indicates the whether the comprarands match. -1 indicates that the current <see cref="T:System.Workflow.Activities.EventQueueName" /> and the specified object do not match; 0 indicates that the <see cref="T:System.Workflow.Activities.EventQueueName" /> and the specified object match.</returns>
      <param name="toCompare">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Workflow.Activities.EventQueueName" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.EventQueueName.CompareTo(System.Workflow.Activities.EventQueueName)">
      <summary>Compares the current <see cref="T:System.Workflow.Activities.EventQueueName" /> to the specified <see cref="T:System.Workflow.Activities.EventQueueName" />.</summary>
      <returns>A 32-bit signed integer that indicates the whether the comprarands match. -1 indicates that the two <see cref="T:System.Workflow.Activities.EventQueueName" /> objects do not match; 0 indicates that the two <see cref="T:System.Workflow.Activities.EventQueueName" /> objects match.</returns>
      <param name="eventQueueName">The <see cref="T:System.Workflow.Activities.EventQueueName" /> to compare with the current <see cref="T:System.Workflow.Activities.EventQueueName" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.EventQueueName.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current <see cref="T:System.Workflow.Activities.EventQueueName" />.</summary>
      <returns>true if the specified The <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Workflow.Activities.EventQueueName" />; otherwise, false. </returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Workflow.Activities.EventQueueName" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.EventQueueName.GetCorrelationValues">
      <summary>Returns a <see cref="T:System.Workflow.Runtime.CorrelationProperty" /> array that contains all correlation properties associated with the <see cref="T:System.Workflow.Activities.EventQueueName" />.</summary>
      <returns>The <see cref="T:System.Workflow.Runtime.CorrelationProperty" /> array that contains all correlation properties associated with the <see cref="T:System.Workflow.Activities.EventQueueName" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.EventQueueName.GetHashCode">
      <summary>Returns a hash code for the current <see cref="T:System.Workflow.Activities.EventQueueName" />.</summary>
      <returns>An integer that represents the hash code generated for the current <see cref="T:System.Workflow.Activities.EventQueueName" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.EventQueueName.InterfaceType">
      <summary>Gets the <see cref="T:System.Type" /> associated with the <see cref="T:System.Workflow.Activities.EventQueueName" />.</summary>
      <returns>The <see cref="T:System.Type" /> associated with the <see cref="T:System.Workflow.Activities.EventQueueName" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.EventQueueName.MethodName">
      <summary>Gets the method name associated with the <see cref="T:System.Workflow.Activities.EventQueueName" />.</summary>
      <returns>A string that contains the method name associated with the <see cref="T:System.Workflow.Activities.EventQueueName" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.EventQueueName.op_Equality(System.Workflow.Activities.EventQueueName,System.Workflow.Activities.EventQueueName)">
      <summary>Returns a value indicating whether the two specified <see cref="T:System.Workflow.Activities.EventQueueName" /> objects are the equal. </summary>
      <returns>true if <paramref name="queueKey1" /> and <paramref name="queueKey2" /> are equal; otherwise, false. </returns>
      <param name="queueKey1">The first <see cref="T:System.Workflow.Activities.EventQueueName" /> to compare.</param>
      <param name="queueKey2">The second <see cref="T:System.Workflow.Activities.EventQueueName" /> to compare.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.EventQueueName.op_GreaterThan(System.Workflow.Activities.EventQueueName,System.Workflow.Activities.EventQueueName)">
      <summary>Returns a value indicating whether the first of two specified <see cref="T:System.Workflow.Activities.EventQueueName" /> objects is greater than the second.</summary>
      <returns>true if <paramref name="queueKey1" /> is greater than <paramref name="queueKey2" />; otherwise, false. </returns>
      <param name="queueKey1">The first <see cref="T:System.Workflow.Activities.EventQueueName" /> to compare.</param>
      <param name="queueKey2">The second <see cref="T:System.Workflow.Activities.EventQueueName" /> to compare.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="queueKey1" /> or <paramref name="queueKey2" /> contains a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.EventQueueName.op_Inequality(System.Workflow.Activities.EventQueueName,System.Workflow.Activities.EventQueueName)">
      <summary>Returns a value indicating whether the two specified <see cref="T:System.Workflow.Activities.EventQueueName" /> objects are the not equal. </summary>
      <returns>true if <paramref name="queueKey1" /> and <paramref name="queueKey2" /> are not equal; otherwise, false. </returns>
      <param name="queueKey1">The first <see cref="T:System.Workflow.Activities.EventQueueName" /> to compare.</param>
      <param name="queueKey2">The second <see cref="T:System.Workflow.Activities.EventQueueName" /> to compare.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.EventQueueName.op_LessThan(System.Workflow.Activities.EventQueueName,System.Workflow.Activities.EventQueueName)">
      <summary>Returns a value indicating whether the first of two specified <see cref="T:System.Workflow.Activities.EventQueueName" /> objects is less than the second.</summary>
      <returns>true if <paramref name="queueKey1" /> is greater than <paramref name="queueKey2" />; otherwise, false. </returns>
      <param name="queueKey1">The first <see cref="T:System.Workflow.Activities.EventQueueName" /> to compare.</param>
      <param name="queueKey2">The second <see cref="T:System.Workflow.Activities.EventQueueName" /> to compare.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="queueKey1" /> or <paramref name="queueKey2" /> contains a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.EventQueueName.ToString">
      <summary>Returns a <see cref="T:System.String" /> representation of the current <see cref="T:System.Workflow.Activities.EventQueueName" />.</summary>
      <returns>A <see cref="T:System.String" /> representation of the current <see cref="T:System.Workflow.Activities.EventQueueName" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.ExecutionType">
      <summary>Specifies the execution mode for activities.</summary>
    </member>
    <member name="F:System.Workflow.Activities.ExecutionType.Sequence">
      <summary>Executes activities in sequential order. Each activity is executed in turn, after the previous activity has finished running. </summary>
    </member>
    <member name="F:System.Workflow.Activities.ExecutionType.Parallel">
      <summary>Executes activities in parallel.</summary>
    </member>
    <member name="T:System.Workflow.Activities.ExternalDataEventArgs">
      <summary>Represents the data sent when an event is raised using the <see cref="T:System.Workflow.Activities.HandleExternalEventActivity" /> activity. </summary>
    </member>
    <member name="M:System.Workflow.Activities.ExternalDataEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.ExternalDataEventArgs" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.ExternalDataEventArgs.#ctor(System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.ExternalDataEventArgs" /> class using the instance identifier of the workflow.</summary>
      <param name="instanceId">The workflow instance identifier for the workflow instance that contains the <see cref="T:System.Workflow.Activities.HandleExternalEventActivity" /> that is expected to handle the event.</param>
    </member>
    <member name="M:System.Workflow.Activities.ExternalDataEventArgs.#ctor(System.Guid,System.Workflow.Runtime.IPendingWork,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.ExternalDataEventArgs" /> class.</summary>
      <param name="instanceId">The workflow instance identifier for the workflow instance that contains the <see cref="T:System.Workflow.Activities.HandleExternalEventActivity" /> that is expected to handle the event.</param>
      <param name="workHandler">The <see cref="T:System.Workflow.Runtime.IPendingWork" /> to allow the external code, raising the event, to participate in the batch.</param>
      <param name="workItem">The object that contains the external code that raises the event.</param>
    </member>
    <member name="M:System.Workflow.Activities.ExternalDataEventArgs.#ctor(System.Guid,System.Workflow.Runtime.IPendingWork,System.Object,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.ExternalDataEventArgs" /> class.</summary>
      <param name="instanceId">The workflow instance identifier for the workflow instance that contains the <see cref="T:System.Workflow.Activities.HandleExternalEventActivity" /> that is expected to handle the event.</param>
      <param name="workHandler">The <see cref="T:System.Workflow.Runtime.IPendingWork" /> to allow the external code that raises the event to participate in the batch.</param>
      <param name="workItem">The object that contains the external code that raises the event.</param>
      <param name="waitForIdle">A value that indicates whether the workflow should go idle before raising the event; otherwise, false.</param>
    </member>
    <member name="P:System.Workflow.Activities.ExternalDataEventArgs.Identity">
      <summary>Gets or sets the identity of the user that raised the event. </summary>
      <returns>The identity of the user that is raising the event.</returns>
    </member>
    <member name="P:System.Workflow.Activities.ExternalDataEventArgs.InstanceId">
      <summary>Gets or sets the workflow instance identifier for the workflow instance that contains the <see cref="T:System.Workflow.Activities.HandleExternalEventActivity" /> that is expected to handle the event.</summary>
      <returns>The workflow instance identifier for the workflow instance that contains the <see cref="T:System.Workflow.Activities.HandleExternalEventActivity" /> that is expected to handle the event.</returns>
    </member>
    <member name="P:System.Workflow.Activities.ExternalDataEventArgs.WaitForIdle">
      <summary>Gets or sets a value that indicates whether the event should be raised immediately, or if the workflow should go idle before raising the event.</summary>
      <returns>true if the workflow should go idle before raising the event; otherwise, false.</returns>
    </member>
    <member name="P:System.Workflow.Activities.ExternalDataEventArgs.WorkHandler">
      <summary>Gets or sets the <see cref="T:System.Workflow.Runtime.IPendingWork" /> to allow the external code, raising the event, to participate in the batch.</summary>
      <returns>The <see cref="T:System.Workflow.Runtime.IPendingWork" /> to allow the external code, raising the event, to participate in the batch.</returns>
    </member>
    <member name="P:System.Workflow.Activities.ExternalDataEventArgs.WorkItem">
      <summary>Gets or sets the object that contains the external code that raises the event.</summary>
      <returns>The object that contains the external code that raises the event.</returns>
    </member>
    <member name="T:System.Workflow.Activities.ExternalDataExchangeAttribute">
      <summary>Marks an interface as a local service interface. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.ExternalDataExchangeAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.ExternalDataExchangeAttribute" />.</summary>
    </member>
    <member name="T:System.Workflow.Activities.ExternalDataExchangeService">
      <summary>Represents a service that must be added to the workflow run-time engine for local services communications to be enabled. Local service implementations are required to be added to the <see cref="T:System.Workflow.Activities.ExternalDataExchangeService" /> for these services to be properly initialized and registered.</summary>
    </member>
    <member name="M:System.Workflow.Activities.ExternalDataExchangeService.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.ExternalDataExchangeService" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.ExternalDataExchangeService.#ctor(System.Collections.Specialized.NameValueCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.ExternalDataExchangeService" /> class. </summary>
      <param name="parameters">A collection of parameters used to configure the service. The allowed values are an empty collection or a collection that contains only the ConfigurationSection key.</param>
    </member>
    <member name="M:System.Workflow.Activities.ExternalDataExchangeService.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.ExternalDataExchangeService" /> class.</summary>
      <param name="configSectionName">The name of the configuration section that contains this service's desired configuration.</param>
    </member>
    <member name="M:System.Workflow.Activities.ExternalDataExchangeService.#ctor(System.Workflow.Activities.ExternalDataExchangeServiceSection)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.ExternalDataExchangeService" /> class. </summary>
      <param name="settings">The configuration section that contains settings for this service.</param>
    </member>
    <member name="M:System.Workflow.Activities.ExternalDataExchangeService.AddService(System.Object)">
      <summary>Adds the specified service to the <see cref="T:System.Workflow.Activities.ExternalDataExchangeService" />.</summary>
      <param name="service">An object that represents the service to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="service" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">The external run-time container was not found.</exception>
    </member>
    <member name="M:System.Workflow.Activities.ExternalDataExchangeService.GetService(System.Type)">
      <summary>Gets the service implementation of the specified interface type, if the service is available.</summary>
      <returns>An object that implements the requested service, or null (Nothing in Visual Basic) if the service cannot be resolved.</returns>
      <param name="serviceType">The <see cref="T:System.Type" /> of the interface implemented by the service to retrieve.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="service" /> is a null reference (Nothing).</exception>
      <exception cref="T:System.InvalidOperationException">The service is not registered with the runtime.</exception>
    </member>
    <member name="M:System.Workflow.Activities.ExternalDataExchangeService.RemoveService(System.Object)">
      <summary>Removes the specified service from the <see cref="T:System.Workflow.Activities.ExternalDataExchangeService" />.</summary>
      <param name="service">An object that represents the service to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="service" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">The service is not registered with the runtime.</exception>
    </member>
    <member name="M:System.Workflow.Activities.ExternalDataExchangeService.Start">
      <summary>Adds local services if a configuration section was specified during construction of the object.</summary>
    </member>
    <member name="T:System.Workflow.Activities.ExternalDataExchangeServiceSection">
      <summary>Represents a configuration section that allows you to specify, in a configuration file, a set of services to be added to an instance of <see cref="T:System.Workflow.Activities.ExternalDataExchangeService" />.</summary>
    </member>
    <member name="M:System.Workflow.Activities.ExternalDataExchangeServiceSection.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Workflow.Activities.ExternalDataExchangeServiceSection" /> class. </summary>
    </member>
    <member name="P:System.Workflow.Activities.ExternalDataExchangeServiceSection.Services">
      <summary>Gets the collection of services to be added to an instance of <see cref="T:System.Workflow.Activities.ExternalDataExchangeService" />.</summary>
      <returns>A collection of service elements.</returns>
    </member>
    <member name="T:System.Workflow.Activities.HandleExternalEventActivity">
      <summary>Defines a workflow communication activity that is used to handle an event that is raised by a local service. </summary>
    </member>
    <member name="M:System.Workflow.Activities.HandleExternalEventActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.HandleExternalEventActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.HandleExternalEventActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.HandleExternalEventActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
    </member>
    <member name="M:System.Workflow.Activities.HandleExternalEventActivity.Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)">
      <summary>Cancels the handling of the event. </summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> of the <see cref="T:System.Workflow.Activities.HandleExternalEventActivity" /> at the end of the requested operation.</returns>
      <param name="executionContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> that represents the execution environment of the <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
    </member>
    <member name="P:System.Workflow.Activities.HandleExternalEventActivity.CorrelationToken">
      <summary>Gets or sets the binding to a <see cref="T:System.Workflow.Runtime.CorrelationToken" />. </summary>
      <returns>This property is used to correlate an event to the correct <see cref="T:System.Workflow.Activities.IEventActivity" />-inherited activity based on the payload of the event. For example, when a single workflow instance is listening for multiple instances of the same event at the same time, the CorrelationToken property is used to route the event to the proper activity in that workflow instance.This correlation should not be confused with correlating an event to the correct workflow instance. The correlation to the correct workflow instance is done by sending the event to an explicit workflow instance and using the <see cref="P:System.Workflow.Activities.ExternalDataEventArgs.InstanceId" /> property to properly identify the correct workflow instance. correlation, see the Correlated Local Service Sample.</returns>
    </member>
    <member name="F:System.Workflow.Activities.HandleExternalEventActivity.CorrelationTokenProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.HandleExternalEventActivity.CorrelationToken" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.HandleExternalEventActivity.EventName">
      <summary>Gets the name of the raised event. This property must be set before local communication can occur.</summary>
      <returns>The name of the raised event.</returns>
    </member>
    <member name="F:System.Workflow.Activities.HandleExternalEventActivity.EventNameProperty">
      <summary>Corresponds to the name of an event that is defined in an interface that was marked with the <see cref="T:System.Workflow.Activities.ExternalDataExchangeAttribute" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.HandleExternalEventActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)">
      <summary>Tries to run the <see cref="T:System.Workflow.Activities.HandleExternalEventActivity" /> associated with the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" />.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> of the <see cref="T:System.Workflow.Activities.HandleExternalEventActivity" /> at the end of the requested operation.</returns>
      <param name="executionContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> associated with the <see cref="T:System.Workflow.Activities.HandleExternalEventActivity" />.</param>
    </member>
    <member name="M:System.Workflow.Activities.HandleExternalEventActivity.HandleFault(System.Workflow.ComponentModel.ActivityExecutionContext,System.Exception)">
      <summary>Called when an exception is raised within the context of the execution of this instance.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> that results from an attempt to cancel this instance.</returns>
      <param name="executionContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> for this instance.</param>
      <param name="exception">The <see cref="T:System.Exception" /> that caused this fault.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="executionContext" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.Activities.HandleExternalEventActivity.Initialize(System.IServiceProvider)">
      <summary>Initializes the event with the service provider.</summary>
      <param name="provider">The <see cref="T:System.IServiceProvider" /> that provides custom support to the class.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="provider" /> is a null reference (Nothing in Visual Basic), the type of the service provider is a null reference (Nothing), or the proxy for the service provider is a null reference (Nothing). </exception>
    </member>
    <member name="M:System.Workflow.Activities.HandleExternalEventActivity.InitializeProperties">
      <summary>Performs initialization on dependency properties.</summary>
    </member>
    <member name="P:System.Workflow.Activities.HandleExternalEventActivity.InterfaceType">
      <summary>Gets or sets the <see cref="T:System.Workflow.Activities.ExternalDataExchangeAttribute" /> attributed interface type of the local service whose event is handled. This property must be set before local communication can occur.</summary>
      <returns>The interface type of the local service whose event is handled.</returns>
    </member>
    <member name="F:System.Workflow.Activities.HandleExternalEventActivity.InterfaceTypeProperty">
      <summary>Corresponds to the name of the interface that was marked with the <see cref="T:System.Workflow.Activities.ExternalDataExchangeAttribute" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Workflow.Activities.HandleExternalEventActivity.Invoked">
      <summary>Occurs when the external event is received.</summary>
    </member>
    <member name="F:System.Workflow.Activities.HandleExternalEventActivity.InvokedEvent">
      <summary>Defines an event delegate that is executed after the activity receives the expected event from the local service.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.HandleExternalEventActivity.OnClosed(System.IServiceProvider)">
      <summary>Called by the workflow runtime as part of the activity's transition to the Closed state.</summary>
      <param name="provider">The <see cref="T:System.IServiceProvider" /> that provides the service.</param>
    </member>
    <member name="M:System.Workflow.Activities.HandleExternalEventActivity.OnInvoked(System.EventArgs)">
      <summary>Called just after the external event is received to allow derived classes to process the inbound <see cref="T:System.EventArgs" /> before the activity closes.</summary>
      <param name="e">The <see cref="T:System.EventArgs" /> that are received from the external event that was just received.</param>
    </member>
    <member name="P:System.Workflow.Activities.HandleExternalEventActivity.ParameterBindings">
      <summary>Gets the collection of parameter bindings.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.WorkflowParameterBindingCollection" /> of parameter bindings.</returns>
    </member>
    <member name="F:System.Workflow.Activities.HandleExternalEventActivity.ParameterBindingsProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.HandleExternalEventActivity.ParameterBindings" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.HandleExternalEventActivity.Roles">
      <summary>Gets or sets a reference to a workflow role collection.</summary>
      <returns>A <see cref="T:System.Workflow.Activities.WorkflowRoleCollection" />.</returns>
    </member>
    <member name="F:System.Workflow.Activities.HandleExternalEventActivity.RolesProperty">
      <summary>Identifies the valid user roles that are allowed to send messages from the host to this activity. The two types of supported roles are Active Directory and ASP.NET.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.HandleExternalEventActivity.System#Workflow#Activities#IEventActivity#QueueName">
      <summary>Gets the name of the <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> on which the activity is waiting for data to arrive.</summary>
      <returns>The name of the WorkflowQueue on which the activity is waiting for data to arrive. </returns>
    </member>
    <member name="M:System.Workflow.Activities.HandleExternalEventActivity.System#Workflow#Activities#IEventActivity#Subscribe(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})">
      <summary>Creates the subscription of the <see cref="T:System.Workflow.Activities.HandleExternalEventActivity" /> activity to an event.</summary>
      <param name="parentContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> that represents the execution environment of the <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
      <param name="parentEventHandler">The <see cref="T:System.EventHandler" /> for the parent event.</param>
    </member>
    <member name="M:System.Workflow.Activities.HandleExternalEventActivity.System#Workflow#Activities#IEventActivity#Unsubscribe(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})">
      <summary>Cancels the subscription of the <see cref="T:System.Workflow.Activities.HandleExternalEventActivity" /> activity to an event.</summary>
      <param name="parentContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> that represents the execution environment of the activity.</param>
      <param name="parentEventHandler"> The <see cref="T:System.EventHandler" /> for the parent event.</param>
    </member>
    <member name="M:System.Workflow.Activities.HandleExternalEventActivity.System#Workflow#ComponentModel#IActivityEventListener{T}#OnEvent(System.Object,System.Workflow.ComponentModel.QueueEventArgs)"></member>
    <member name="M:System.Workflow.Activities.HandleExternalEventActivity.System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetAccessType(System.IServiceProvider,System.String)">
      <summary>Returns the access type for the specified property.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Compiler.AccessTypes" /> enumeration value that denote the access level of the property.</returns>
      <param name="serviceProvider">An object that implements <see cref="T:System.IServiceProvider" /> to provide access to design time services if they are required.</param>
      <param name="propertyName">The name of the property. </param>
    </member>
    <member name="M:System.Workflow.Activities.HandleExternalEventActivity.System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetPropertyType(System.IServiceProvider,System.String)">
      <summary>Returns the <see cref="T:System.Type" /> of the specified property.</summary>
      <returns>The <see cref="T:System.Type" /> for the property whose name is passed as the <paramref name="propertyName " />parameter. </returns>
      <param name="serviceProvider">An object that implements <see cref="T:System.IServiceProvider" /> to provide access to design time services if they are required.</param>
      <param name="propertyName">The name of the property. </param>
    </member>
    <member name="T:System.Workflow.Activities.HandleExternalEventActivityValidator">
      <summary>Verifies that the <see cref="T:System.Workflow.Activities.HandleExternalEventActivity" /> class is configured correctly.</summary>
    </member>
    <member name="M:System.Workflow.Activities.HandleExternalEventActivityValidator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.HandleExternalEventActivityValidator" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.HandleExternalEventActivityValidator.Validate(System.Workflow.ComponentModel.Compiler.ValidationManager,System.Object)">
      <summary>Validates the <see cref="T:System.Workflow.Activities.HandleExternalEventActivity" /> class during workflow compilation.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> that contains the errors from this operation.</returns>
      <param name="manager">The <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationManager" /> to use for this validation.</param>
      <param name="obj">The <see cref="T:System.Object" /> to validate.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="T:System.Workflow.Activities.IEventActivity">
      <summary>Provides methods and properties that event-driven activities must derive from, to subscribe to events.</summary>
    </member>
    <member name="P:System.Workflow.Activities.IEventActivity.QueueName">
      <summary>Gets the name of the <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> on which the activity is waiting for data to arrive.</summary>
      <returns>The name of the <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> on which the activity is waiting for data to arrive.</returns>
    </member>
    <member name="M:System.Workflow.Activities.IEventActivity.Subscribe(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})">
      <summary>Creates the subscription of an <see cref="T:System.Workflow.ComponentModel.Activity" /> to an event.</summary>
      <param name="parentContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> that represents the execution environment of the <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
      <param name="parentEventHandler">The <see cref="T:System.EventHandler" /> for the parent event.</param>
    </member>
    <member name="M:System.Workflow.Activities.IEventActivity.Unsubscribe(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})">
      <summary>Cancels the subscription of an <see cref="T:System.Workflow.ComponentModel.Activity" /> to an event.</summary>
      <param name="parentContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> that represents the execution environment of the <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
      <param name="parentEventHandler">The <see cref="T:System.EventHandler" /> for the parent event.</param>
    </member>
    <member name="T:System.Workflow.Activities.IfElseActivity">
      <summary>Conditionally runs one of two or more activities of type <see cref="T:System.Workflow.Activities.IfElseBranchActivity" />. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.IfElseActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.IfElseActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.IfElseActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.IfElseActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
    </member>
    <member name="M:System.Workflow.Activities.IfElseActivity.AddBranch(System.Collections.Generic.ICollection{System.Workflow.ComponentModel.Activity})">
      <summary>Adds a new branch to the <see cref="T:System.Workflow.Activities.IfElseActivity" /> using a collection of new activities to add to the new branch.</summary>
      <returns>The updated <see cref="T:System.Workflow.Activities.IfElseBranchActivity" /> with the new branches.</returns>
      <param name="activities">A collection of activities to add to the new branch.</param>
    </member>
    <member name="M:System.Workflow.Activities.IfElseActivity.AddBranch(System.Collections.Generic.ICollection{System.Workflow.ComponentModel.Activity},System.Workflow.ComponentModel.ActivityCondition)">
      <summary>Adds a new branch to the <see cref="T:System.Workflow.Activities.IfElseActivity" /> using a collection of new activities to add to the new branch.</summary>
      <returns>The updated <see cref="T:System.Workflow.Activities.IfElseBranchActivity" /> with the new branches.</returns>
      <param name="activities">A collection of activities to add to the new branch.</param>
      <param name="branchCondition">An <see cref="T:System.Workflow.ComponentModel.ActivityCondition" /> that determines whether the branch should be run.</param>
    </member>
    <member name="M:System.Workflow.Activities.IfElseActivity.System#Workflow#ComponentModel#IActivityEventListener{T}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)"></member>
    <member name="T:System.Workflow.Activities.IfElseBranchActivity">
      <summary>Represents a branch of an <see cref="T:System.Workflow.Activities.IfElseActivity" />. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.IfElseBranchActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.IfElseBranchActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.IfElseBranchActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.IfElseBranchActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
    </member>
    <member name="P:System.Workflow.Activities.IfElseBranchActivity.Condition">
      <summary>Gets or sets an <see cref="T:System.Workflow.ComponentModel.ActivityCondition" /> object reference for the current branch activity. The evaluation of this condition returns a value that indicates whether this branch should be run.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.ActivityCondition" /> that returns a value that indicates whether this branch should be run.</returns>
    </member>
    <member name="F:System.Workflow.Activities.IfElseBranchActivity.ConditionProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.IfElseBranchActivity.Condition" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.InvokeWebServiceActivity">
      <summary>Invokes a Web service through a proxy class, which passes and receives parameters as specified. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.InvokeWebServiceActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.InvokeWebServiceActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.InvokeWebServiceActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.InvokeWebServiceActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
    </member>
    <member name="E:System.Workflow.Activities.InvokeWebServiceActivity.Invoked">
      <summary>Occurs when the Web service is invoked.</summary>
    </member>
    <member name="F:System.Workflow.Activities.InvokeWebServiceActivity.InvokedEvent">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="E:System.Workflow.Activities.InvokeWebServiceActivity.Invoked" /> event.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Workflow.Activities.InvokeWebServiceActivity.Invoking">
      <summary>Occurs when the Web service is being invoked.</summary>
    </member>
    <member name="F:System.Workflow.Activities.InvokeWebServiceActivity.InvokingEvent">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="E:System.Workflow.Activities.InvokeWebServiceActivity.Invoking" /> event.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.InvokeWebServiceActivity.MethodName">
      <summary>Gets or sets the method name of the proxy class that is called on the Web service.</summary>
      <returns>The method name of the proxy class. The default is an empty <see cref="T:System.String" />.</returns>
    </member>
    <member name="F:System.Workflow.Activities.InvokeWebServiceActivity.MethodNameProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.InvokeWebServiceActivity.MethodName" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.InvokeWebServiceActivity.ParameterBindings">
      <summary>Gets the collection of parameter bindings for the method specified by the <see cref="P:System.Workflow.Activities.InvokeWebServiceActivity.MethodName" /> property.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.WorkflowParameterBindingCollection" /> for the method, specified by <see cref="P:System.Workflow.Activities.InvokeWebServiceActivity.MethodName" /> property. The default is an empty collection of type <see cref="T:System.Workflow.ComponentModel.WorkflowParameterBindingCollection" />.</returns>
    </member>
    <member name="F:System.Workflow.Activities.InvokeWebServiceActivity.ParameterBindingsProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.InvokeWebServiceActivity.ParameterBindings" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.InvokeWebServiceActivity.ProxyClass">
      <summary>Gets or sets the type of the proxy class used to communicate with the Web service.</summary>
      <returns>
        <see cref="T:System.Type" /> of the proxy used to start the Web service. The default is an empty <see cref="T:System.String" />.</returns>
    </member>
    <member name="F:System.Workflow.Activities.InvokeWebServiceActivity.ProxyClassProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.InvokeWebServiceActivity.ProxyClass" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.InvokeWebServiceActivity.SessionId">
      <summary>Gets or sets a session identifier that indicates whether the session is shared across an activity, or if a new session is used.</summary>
      <returns>An identifier that either contains the <see cref="P:System.Workflow.Activities.InvokeWebServiceActivity.SessionID" /> of a previous session or an empty <see cref="T:System.String" /> that indicates that a new session will be used. The default is an empty <see cref="T:System.String" />.</returns>
    </member>
    <member name="F:System.Workflow.Activities.InvokeWebServiceActivity.SessionIdProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.InvokeWebServiceActivity.SessionId" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.InvokeWebServiceActivity.System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetAccessType(System.IServiceProvider,System.String)">
      <summary>Returns the access type for the specified property.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Compiler.AccessTypes" /> enumeration value that denotes the access level of the property.</returns>
      <param name="serviceProvider">An object that implements <see cref="T:System.IServiceProvider" /> to provide access to design time services if they are required.</param>
      <param name="propertyName">The name of the property. </param>
    </member>
    <member name="M:System.Workflow.Activities.InvokeWebServiceActivity.System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetPropertyType(System.IServiceProvider,System.String)">
      <summary>Returns the <see cref="T:System.Type" /> of the specified property.</summary>
      <returns>The <see cref="T:System.Type" /> for the property whose name is passed as the <paramref name="propertyName " />parameter. </returns>
      <param name="serviceProvider">An object that implements <see cref="T:System.IServiceProvider" /> to provide access to design time services if they are required.</param>
      <param name="propertyName">The name of the property. </param>
    </member>
    <member name="T:System.Workflow.Activities.InvokeWebServiceEventArgs">
      <summary>Contains event data used to invoke a Web service. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.InvokeWebServiceEventArgs.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.InvokeWebServiceEventArgs" /> class.</summary>
      <param name="proxyInstance">The Web service proxy <see cref="T:System.Object" /> to use for outgoing Web service calls.</param>
    </member>
    <member name="P:System.Workflow.Activities.InvokeWebServiceEventArgs.WebServiceProxy">
      <summary>Gets the proxy class that communicates with the Web service.</summary>
      <returns>The proxy <see cref="T:System.Object" /> that communicates with the Web service.</returns>
    </member>
    <member name="T:System.Workflow.Activities.InvokeWorkflowActivity">
      <summary>Asynchronously runs one workflow from another. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.InvokeWorkflowActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.InvokeWorkflowActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.InvokeWorkflowActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.InvokeWorkflowActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
    </member>
    <member name="P:System.Workflow.Activities.InvokeWorkflowActivity.InstanceId">
      <summary>Gets the <see cref="T:System.Guid" /> that indicates the newly created workflow instance.</summary>
      <returns>The <see cref="T:System.Guid" /> that indicates the newly created workflow instance.</returns>
    </member>
    <member name="F:System.Workflow.Activities.InvokeWorkflowActivity.InstanceIdProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.InvokeWorkflowActivity.InstanceId" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Workflow.Activities.InvokeWorkflowActivity.Invoking">
      <summary>Occurs before the workflow is invoked. </summary>
    </member>
    <member name="F:System.Workflow.Activities.InvokeWorkflowActivity.InvokingEvent">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="E:System.Workflow.Activities.InvokeWorkflowActivity.Invoking" /> event.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.InvokeWorkflowActivity.ParameterBindings">
      <summary>Gets the collection of parameters to bind to. </summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.WorkflowParameterBindingCollection" /> that contains the parameter bindings for the workflow being called. The default is an empty <see cref="T:System.Workflow.ComponentModel.WorkflowParameterBindingCollection" />.</returns>
    </member>
    <member name="F:System.Workflow.Activities.InvokeWorkflowActivity.ParameterBindingsProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="F:System.Workflow.Activities.InvokeWorkflowActivity.ParameterBindingsProperty" />property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.InvokeWorkflowActivity.System#Workflow#ComponentModel#Design#ITypeFilterProvider#CanFilterType(System.Type,System.Boolean)">
      <summary>Determines whether the <see cref="T:System.Type" /> can be filtered by the workflow.</summary>
      <returns>true if the specified <see cref="T:System.Type" /> can be filtered; otherwise, false.</returns>
      <param name="type">The type that the workflow must filter.</param>
      <param name="throwOnError">true to throw an error if the specified Type cannot be filtered; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="throwonError" /> is true. This indicates that <paramref name="type" /> is a design time type.</exception>
      <exception cref="T:System.Exception">
        <paramref name="type" /> is not the root activity.</exception>
    </member>
    <member name="P:System.Workflow.Activities.InvokeWorkflowActivity.System#Workflow#ComponentModel#Design#ITypeFilterProvider#FilterDescription">
      <summary>Gets a description of the filter being used by the workflow.</summary>
      <returns>The description of the filter being used by the workflow.</returns>
    </member>
    <member name="P:System.Workflow.Activities.InvokeWorkflowActivity.TargetWorkflow">
      <summary>Gets or sets the <see cref="T:System.Type" /> of the workflow to be invoked.</summary>
      <returns>The fully-qualified name of the workflow to be invoked. The default is null.</returns>
    </member>
    <member name="F:System.Workflow.Activities.InvokeWorkflowActivity.TargetWorkflowProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.InvokeWorkflowActivity.TargetWorkflow" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.ListenActivity">
      <summary>Makes the workflow wait for any one of several possible events before the activity proceeds. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.ListenActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.ListenActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.ListenActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.ListenActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
    </member>
    <member name="M:System.Workflow.Activities.ListenActivity.System#Workflow#ComponentModel#IActivityEventListener{T}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)"></member>
    <member name="T:System.Workflow.Activities.MessageEventSubscription">
      <summary>Creates a message event subscription to route messages to the appropriate workflow instance.</summary>
    </member>
    <member name="M:System.Workflow.Activities.MessageEventSubscription.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.MessageEventSubscription" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.MessageEventSubscription.#ctor(System.IComparable,System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.MessageEventSubscription" /> class using a specified queue name and instance ID.</summary>
      <param name="queueName">The friendly name that identifies the queue.</param>
      <param name="instanceId">The <see cref="T:System.Guid" /> that indicates the workflow instance.</param>
    </member>
    <member name="M:System.Workflow.Activities.MessageEventSubscription.#ctor(System.IComparable,System.Guid,System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.MessageEventSubscription" /> class using a specified queue name, instance ID, and subscription ID.</summary>
      <param name="queueName">The friendly name that identifies the queue.</param>
      <param name="instanceId">The <see cref="T:System.Guid" /> that indicates the workflow instance.</param>
      <param name="subscriptionId">The <see cref="T:System.Guid" /> that indicates the subscription identifier.</param>
    </member>
    <member name="M:System.Workflow.Activities.MessageEventSubscription.#ctor(System.IComparable,System.Guid,System.Type,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.MessageEventSubscription" /> class using a specified queue name, subscription ID, interface type, and operation name.</summary>
      <param name="queueName">The friendly name that identifies the queue.</param>
      <param name="subscriptionId">The <see cref="T:System.Guid" /> that indicates the subscription identifier.</param>
      <param name="interfaceType">The <see cref="T:System.Type" /> of the interface.</param>
      <param name="operation">The event name on the interface that represents the messaging operation for which you are creating a subscription.</param>
    </member>
    <member name="M:System.Workflow.Activities.MessageEventSubscription.#ctor(System.IComparable,System.Guid,System.Type,System.String,System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.MessageEventSubscription" /> class using a specified queue name, instance ID, interface type, operation, and a subscription ID.</summary>
      <param name="queueName">The friendly name that identifies the queue.</param>
      <param name="instanceId">The <see cref="T:System.Guid" /> that indicates the workflow instance.</param>
      <param name="interfaceType">The <see cref="T:System.Type" /> of the interface.</param>
      <param name="operation">The event name on the interface that represents the messaging operation for which you are creating a subscription.</param>
      <param name="subscriptionId">The <see cref="T:System.Guid" /> that indicates the subscription identifier.</param>
    </member>
    <member name="P:System.Workflow.Activities.MessageEventSubscription.CorrelationProperties">
      <summary>Gets the collection of correlation properties for the message that will map the incoming message together with the <see cref="T:System.Workflow.Activities.HandleExternalEventActivity" />.</summary>
      <returns>A list of correlation properties for the message that will map the incoming message together with the <see cref="T:System.Workflow.Activities.HandleExternalEventActivity" />.</returns>
    </member>
    <member name="P:System.Workflow.Activities.MessageEventSubscription.InterfaceType">
      <summary>Gets or sets the interface type.</summary>
      <returns>The <see cref="T:System.Type" /> of the interface.</returns>
    </member>
    <member name="P:System.Workflow.Activities.MessageEventSubscription.MethodName">
      <summary>Gets or sets the name of the method.</summary>
      <returns>The name of the method.</returns>
    </member>
    <member name="P:System.Workflow.Activities.MessageEventSubscription.QueueName">
      <summary>Gets or sets the name of the queue to which this subscription belongs. </summary>
      <returns>The name that identifies the queue to which this subscription belongs.</returns>
    </member>
    <member name="P:System.Workflow.Activities.MessageEventSubscription.SubscriptionId">
      <summary>Gets or sets the unique identifier for this subscription.</summary>
      <returns>The <see cref="T:System.Guid" /> that indicates the subscription identifier.</returns>
    </member>
    <member name="P:System.Workflow.Activities.MessageEventSubscription.WorkflowInstanceId">
      <summary>Gets or sets the InstanceId of the workflow for which this subscription was created.</summary>
      <returns>The <see cref="T:System.Guid" /> that indicates the workflow instance.</returns>
    </member>
    <member name="T:System.Workflow.Activities.ParallelActivity">
      <summary>Runs a set of child activities at the same time. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.ParallelActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.ParallelActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.ParallelActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.ParallelActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
    </member>
    <member name="M:System.Workflow.Activities.ParallelActivity.System#Workflow#ComponentModel#IActivityEventListener{T}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)"></member>
    <member name="T:System.Workflow.Activities.PolicyActivity">
      <summary>Represents a collection of <see cref="T:System.Workflow.Activities.Rules.Rule" /> class instances to be run as part of a workflow's execution as a single step or activity.</summary>
    </member>
    <member name="M:System.Workflow.Activities.PolicyActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.PolicyActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.PolicyActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.PolicyActivity" /> using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
    </member>
    <member name="P:System.Workflow.Activities.PolicyActivity.RuleSetReference">
      <summary>Gets or sets a reference to a <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> in the .rules file.</summary>
      <returns>A <see cref="T:System.Workflow.Activities.Rules.RuleSetReference" /> to a <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> in the .rules file.</returns>
    </member>
    <member name="F:System.Workflow.Activities.PolicyActivity.RuleSetReferenceProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.PolicyActivity.RuleSetReference" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.ReplicatorActivity">
      <summary>Runs multiple instances of a child activity.</summary>
    </member>
    <member name="M:System.Workflow.Activities.ReplicatorActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.ReplicatorActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.ReplicatorActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.ReplicatorActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
    </member>
    <member name="P:System.Workflow.Activities.ReplicatorActivity.AllChildrenComplete">
      <summary>Gets a value that indicates whether all child instances are complete.</summary>
      <returns>true if all child instances are complete; otherwise, false.</returns>
    </member>
    <member name="E:System.Workflow.Activities.ReplicatorActivity.ChildCompleted">
      <summary>Occurs immediately after the <see cref="T:System.Workflow.Activities.ReplicatorActivity" /> finishes running a child activity instance.</summary>
    </member>
    <member name="F:System.Workflow.Activities.ReplicatorActivity.ChildCompletedEvent">
      <summary>Occurs when the child activity instance of the <see cref="T:System.Workflow.Activities.ReplicatorActivity" /> has completed.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Workflow.Activities.ReplicatorActivity.ChildInitialized">
      <summary>Occurs immediately after a child activity is initialized.</summary>
    </member>
    <member name="F:System.Workflow.Activities.ReplicatorActivity.ChildInitializedEvent">
      <summary>Occurs when the child activity instance of the <see cref="T:System.Workflow.Activities.ReplicatorActivity" /> has initialized.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Workflow.Activities.ReplicatorActivity.Completed">
      <summary>Occurs when the <see cref="T:System.Workflow.Activities.ReplicatorActivity" /> completes.</summary>
    </member>
    <member name="F:System.Workflow.Activities.ReplicatorActivity.CompletedEvent">
      <summary>Occurs when the <see cref="T:System.Workflow.Activities.ReplicatorActivity" /> has completed.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.ReplicatorActivity.CurrentChildData">
      <summary>Returns a list of all child activities.</summary>
      <returns>A list of all child activities.</returns>
    </member>
    <member name="P:System.Workflow.Activities.ReplicatorActivity.CurrentIndex">
      <summary>Gets the index position of the current child activity.</summary>
      <returns>The index position of the current child activity.</returns>
    </member>
    <member name="P:System.Workflow.Activities.ReplicatorActivity.DynamicActivities">
      <summary>Gets an array of running child activity instances. </summary>
      <returns>An array of currently running child activity instances.</returns>
    </member>
    <member name="P:System.Workflow.Activities.ReplicatorActivity.ExecutionType">
      <summary>Gets or sets the <see cref="T:System.Workflow.Activities.ExecutionType" /> for the <see cref="T:System.Workflow.Activities.ReplicatorActivity" />.</summary>
      <returns>The <see cref="T:System.Workflow.Activities.ExecutionType" /> for the <see cref="T:System.Workflow.Activities.ReplicatorActivity" />.</returns>
    </member>
    <member name="F:System.Workflow.Activities.ReplicatorActivity.ExecutionTypeProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.ReplicatorActivity.ExecutionType" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.ReplicatorActivity.InitialChildData">
      <summary>Gets or sets a list of child activity data.</summary>
      <returns>A list of child activity data.</returns>
    </member>
    <member name="F:System.Workflow.Activities.ReplicatorActivity.InitialChildDataProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.ReplicatorActivity.InitialChildData" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Workflow.Activities.ReplicatorActivity.Initialized">
      <summary>Occurs when the <see cref="T:System.Workflow.Activities.ReplicatorActivity" /> begins to execute.</summary>
    </member>
    <member name="F:System.Workflow.Activities.ReplicatorActivity.InitializedEvent">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="E:System.Workflow.Activities.ReplicatorActivity.Initialized" /> event.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.ReplicatorActivity.IsExecuting(System.Int32)">
      <summary>Indicates whether the specified child activity is currently executing. </summary>
      <returns>true if the child activity is executing; otherwise, false.</returns>
      <param name="index">The index position of the child activity.</param>
    </member>
    <member name="P:System.Workflow.Activities.ReplicatorActivity.UntilCondition">
      <summary>Gets or sets a completion condition that indicates when the <see cref="T:System.Workflow.Activities.ReplicatorActivity" /> should finish.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.ActivityCondition" /> that determines whether the <see cref="T:System.Workflow.Activities.ReplicatorActivity" /> is finished.</returns>
    </member>
    <member name="F:System.Workflow.Activities.ReplicatorActivity.UntilConditionProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.ReplicatorActivity.UntilCondition" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.ReplicatorChildEventArgs">
      <summary>Contains event arguments for the <see cref="T:System.Workflow.Activities.ReplicatorActivity" /> activity handlers called at initialization of child <see cref="T:System.Workflow.ComponentModel.Activity" /> instances in addition to when the child <see cref="T:System.Workflow.ComponentModel.Activity" /> instances are finished.</summary>
    </member>
    <member name="M:System.Workflow.Activities.ReplicatorChildEventArgs.#ctor(System.Object,System.Workflow.ComponentModel.Activity)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.ReplicatorChildEventArgs" /> class.</summary>
      <param name="instanceData">Object instance that represents the data/execution context associated with the current child <see cref="T:System.Workflow.ComponentModel.Activity" /> instance executed through the <see cref="T:System.Workflow.Activities.ReplicatorActivity" />.</param>
      <param name="activity">Child <see cref="T:System.Workflow.ComponentModel.Activity" /> of the current <see cref="T:System.Workflow.Activities.ReplicatorActivity" /> instance that raised the event.</param>
    </member>
    <member name="P:System.Workflow.Activities.ReplicatorChildEventArgs.Activity">
      <summary>Gets the child/template <see cref="T:System.Workflow.ComponentModel.Activity" /> of the <see cref="T:System.Workflow.Activities.ReplicatorActivity" /> instance that raised the event.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Activity" /> class instance that represents the child activity of the <see cref="T:System.Workflow.Activities.ReplicatorActivity" /> that raised the event.</returns>
    </member>
    <member name="P:System.Workflow.Activities.ReplicatorChildEventArgs.InstanceData">
      <summary>Gets the current item in the <see cref="T:System.Workflow.Activities.ReplicatorActivity" /> enumerable collection.</summary>
      <returns>The current item in the <see cref="T:System.Workflow.Activities.ReplicatorActivity" /> enumerable collection.</returns>
    </member>
    <member name="T:System.Workflow.Activities.SequenceActivity">
      <summary>Runs a set of child activities according to a single defined ordering.</summary>
    </member>
    <member name="M:System.Workflow.Activities.SequenceActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.SequenceActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.SequenceActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.SequenceActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
    </member>
    <member name="M:System.Workflow.Activities.SequenceActivity.Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)">
      <summary>Cancels the execution of the activity.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> of the activity after canceling the execution.</returns>
      <param name="executionContext">The execution context of the activity.</param>
    </member>
    <member name="M:System.Workflow.Activities.SequenceActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)">
      <summary>Executes the activity.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> of the activity after executing the activity.</returns>
      <param name="executionContext">The execution context of the activity.</param>
    </member>
    <member name="M:System.Workflow.Activities.SequenceActivity.HandleFault(System.Workflow.ComponentModel.ActivityExecutionContext,System.Exception)">
      <summary>Called when an exception is raised within the context of the execution of this instance.</summary>
      <returns>The execution status of the activity.</returns>
      <param name="executionContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> for this instance.</param>
      <param name="exception">The <see cref="T:System.Exception" /> which caused this fault.</param>
    </member>
    <member name="M:System.Workflow.Activities.SequenceActivity.OnActivityChangeRemove(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)">
      <summary>Called when an activity is removed.</summary>
      <param name="executionContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> for this instance.</param>
      <param name="removedActivity">The specified <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
    </member>
    <member name="M:System.Workflow.Activities.SequenceActivity.OnSequenceComplete(System.Workflow.ComponentModel.ActivityExecutionContext)">
      <summary>When overridden in a derived class, determines the action taken by the <see cref="T:System.Workflow.Activities.SequenceActivity" /> when the activity has completed execution.</summary>
      <param name="executionContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> for this instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="executionContext" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.Activities.SequenceActivity.OnWorkflowChangesCompleted(System.Workflow.ComponentModel.ActivityExecutionContext)">
      <summary>Called after changes have been made to the collection <see cref="P:System.Workflow.ComponentModel.CompositeActivity.Activities" /> of this instance.</summary>
      <param name="executionContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> for this instance.</param>
    </member>
    <member name="M:System.Workflow.Activities.SequenceActivity.System#Workflow#ComponentModel#IActivityEventListener{T}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)">
      <summary>Defines the processing procedure when the subscribed-to event occurs.</summary>
      <param name="sender"></param>
      <param name="e"></param>
    </member>
    <member name="T:System.Workflow.Activities.SequentialWorkflowActivity">
      <summary>Represents a workflow that executes activities sequentially. </summary>
    </member>
    <member name="M:System.Workflow.Activities.SequentialWorkflowActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.SequentialWorkflowActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.SequentialWorkflowActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.SequentialWorkflowActivity" /> class by using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
    </member>
    <member name="E:System.Workflow.Activities.SequentialWorkflowActivity.Completed">
      <summary>Occurs when the workflow has finished.</summary>
    </member>
    <member name="F:System.Workflow.Activities.SequentialWorkflowActivity.CompletedEvent">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="E:System.Workflow.Activities.SequentialWorkflowActivity.Completed" /> event.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.SequentialWorkflowActivity.DynamicUpdateCondition">
      <summary>Gets or sets an <see cref="T:System.Workflow.ComponentModel.ActivityCondition" /> in which dynamic updates can be made in the workflow, when overridden in a derived class.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.ActivityCondition" /> that identifies when dynamic updates can be made.</returns>
    </member>
    <member name="M:System.Workflow.Activities.SequentialWorkflowActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)">
      <summary>Runs the workflow.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> at the <see cref="T:System.Workflow.Activities.SequentialWorkflowActivity" /> at the end of the requested operation.</returns>
      <param name="executionContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> associated with the <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
    </member>
    <member name="E:System.Workflow.Activities.SequentialWorkflowActivity.Initialized">
      <summary>Occurs when the workflow is initialized.</summary>
    </member>
    <member name="F:System.Workflow.Activities.SequentialWorkflowActivity.InitializedEvent">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="E:System.Workflow.Activities.SequentialWorkflowActivity.Initialized" /> event.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.SequentialWorkflowActivity.OnSequenceComplete(System.Workflow.ComponentModel.ActivityExecutionContext)">
      <summary>Raises the <see cref="F:System.Workflow.Activities.SequentialWorkflowActivity.CompletedEvent" /> for the <see cref="T:System.Workflow.Activities.SequentialWorkflowActivity" />.</summary>
      <param name="executionContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> associated with the <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="executionContext" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="T:System.Workflow.Activities.SetStateActivity">
      <summary>Provides the transition to a <see cref="T:System.Workflow.Activities.StateActivity" /> in a state machine workflow. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.SetStateActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.SetStateActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.SetStateActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.SetStateActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
    </member>
    <member name="P:System.Workflow.Activities.SetStateActivity.TargetStateName">
      <summary>Gets or sets the name of the target state.</summary>
      <returns>The name of the target stream.</returns>
    </member>
    <member name="F:System.Workflow.Activities.SetStateActivity.TargetStateNameProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.SetStateActivity.TargetStateName" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.SetStateEventArgs">
      <summary>Represents a class that is used as an argument to set the state of a <see cref="T:System.Workflow.Activities.StateMachineWorkflowActivity" />.</summary>
    </member>
    <member name="M:System.Workflow.Activities.SetStateEventArgs.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.SetStateEventArgs" /> class.</summary>
      <param name="targetStateName">The state to set the <see cref="T:System.Workflow.Activities.StateActivity" /> to.</param>
    </member>
    <member name="P:System.Workflow.Activities.SetStateEventArgs.TargetStateName">
      <summary>Gets the state to set the <see cref="T:System.Workflow.Activities.StateActivity" /> to.</summary>
      <returns>The state to set the <see cref="T:System.Workflow.Activities.StateActivity" /> to.</returns>
    </member>
    <member name="T:System.Workflow.Activities.StateActivity">
      <summary>Represents a state in a <see cref="T:System.Workflow.Activities.StateMachineWorkflowActivity" />.</summary>
    </member>
    <member name="M:System.Workflow.Activities.StateActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.StateActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.StateActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.StateActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
    </member>
    <member name="M:System.Workflow.Activities.StateActivity.Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)">
      <summary>Cancels the execution of the <see cref="T:System.Workflow.Activities.StateActivity" />.</summary>
      <returns>The current status of the <see cref="T:System.Workflow.ComponentModel.Activity" /> in the running workflow instance.</returns>
      <param name="executionContext">The execution context for the activity.</param>
    </member>
    <member name="M:System.Workflow.Activities.StateActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)">
      <summary>Executes the <see cref="T:System.Workflow.Activities.StateActivity" />.</summary>
      <returns>The current status of the <see cref="T:System.Workflow.ComponentModel.Activity" /> in the running workflow instance.</returns>
      <param name="executionContext">The execution context for the activity.</param>
    </member>
    <member name="M:System.Workflow.Activities.StateActivity.GetDynamicActivity(System.String)">
      <summary>Gets the executing instance of the <see cref="T:System.Workflow.ComponentModel.Activity" /> that corresponds to the specified child activity name.</summary>
      <returns>The dynamic child activities. </returns>
      <param name="childActivityName">The child activity.</param>
      <exception cref="T:System.ArgumentException">The executable activities do not contain the <paramref name="childActivityName" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.StateActivity.Initialize(System.IServiceProvider)">
      <summary>Initializes the <see cref="T:System.Workflow.Activities.StateActivity" /> using the service provider.</summary>
      <param name="provider">The service provider from which to obtain services.</param>
    </member>
    <member name="M:System.Workflow.Activities.StateActivity.OnActivityChangeAdd(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)">
      <summary>Determines if the activity being added is an <see cref="T:System.Workflow.Activities.EventDrivenActivity" /> and if so, verifies whether the newly added event driven needs to be subscribed.</summary>
      <param name="executionContext">The execution context for the activity.</param>
      <param name="addedActivity">The activity added to the <see cref="T:System.Workflow.Activities.StateActivity" />.</param>
    </member>
    <member name="M:System.Workflow.Activities.StateActivity.OnClosed(System.IServiceProvider)">
      <summary>Called by the workflow runtime engine as part of the activity's transition to the <see cref="F:System.Workflow.ComponentModel.ActivityExecutionStatus.Closed" /> state.</summary>
      <param name="provider">The service provider from which to obtain services.</param>
    </member>
    <member name="F:System.Workflow.Activities.StateActivity.StateChangeTrackingDataKey">
      <summary>Holds the string value of the change tracking data key; "StateActivity.StateChange". This field is a constant.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.StateActivityValidator">
      <summary>Represents a class that verifies whether a <see cref="T:System.Workflow.Activities.StateActivity" /> class is configured correctly.</summary>
    </member>
    <member name="M:System.Workflow.Activities.StateActivityValidator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.StateActivityValidator" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.StateActivityValidator.Validate(System.Workflow.ComponentModel.Compiler.ValidationManager,System.Object)">
      <summary>Validates the <see cref="T:System.Workflow.Activities.StateActivity" /> class during workflow compilation.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> that contains the errors from this operation.</returns>
      <param name="manager">The <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationManager" /> to use for this validation.</param>
      <param name="obj">The <see cref="T:System.Object" /> to validate.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.Activities.StateActivityValidator.ValidateActivityChange(System.Workflow.ComponentModel.Activity,System.Workflow.ComponentModel.ActivityChangeAction)">
      <summary>Validates the changes made to <see cref="T:System.Workflow.Activities.StateActivity" />.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> that contains the errors from this operation.</returns>
      <param name="activity">The name of the <see cref="T:System.Workflow.Activities.StateActivity" /> to validate.</param>
      <param name="action">The action taken on the <see cref="T:System.Workflow.Activities.StateActivity" />.</param>
    </member>
    <member name="T:System.Workflow.Activities.StateFinalizationActivity">
      <summary>Represents an activity that executes contained activities before transitioning to another state in a state machine workflow. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.StateFinalizationActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.StateFinalizationActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.StateFinalizationActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.StateFinalizationActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
    </member>
    <member name="T:System.Workflow.Activities.StateInitializationActivity">
      <summary>Acts as a container to a group of activities that is executed when the <see cref="T:System.Workflow.Activities.StateActivity" /> starts running. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.StateInitializationActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.StateInitializationActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.StateInitializationActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.StateInitializationActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
    </member>
    <member name="T:System.Workflow.Activities.StateMachineWorkflowActivity">
      <summary>Serves as the root container for state machine workflows. Contains event-driven activities and states.</summary>
    </member>
    <member name="M:System.Workflow.Activities.StateMachineWorkflowActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.StateMachineWorkflowActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.StateMachineWorkflowActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.StateMachineWorkflowActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
    </member>
    <member name="P:System.Workflow.Activities.StateMachineWorkflowActivity.CompletedStateName">
      <summary>Gets or sets the end <see cref="T:System.Workflow.Activities.StateActivity" /> of the workflow.</summary>
      <returns>The end <see cref="T:System.Workflow.Activities.StateActivity" /> of the workflow.</returns>
    </member>
    <member name="F:System.Workflow.Activities.StateMachineWorkflowActivity.CompletedStateNameProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyObject" /> that targets the <see cref="P:System.Workflow.Activities.StateMachineWorkflowActivity.CompletedStateName" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.StateMachineWorkflowActivity.CurrentStateName">
      <summary>Gets the name of the currently executing <see cref="T:System.Workflow.Activities.StateActivity" />.</summary>
      <returns>The name of the current <see cref="T:System.Workflow.Activities.StateActivity" />.</returns>
    </member>
    <member name="P:System.Workflow.Activities.StateMachineWorkflowActivity.DynamicUpdateCondition">
      <summary>Gets or sets an <see cref="T:System.Workflow.ComponentModel.ActivityCondition" /> that determines whether dynamic updates can be made in the workflow, when overridden in a derived class.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.ActivityCondition" /> that identifies when dynamic updates can be made.</returns>
    </member>
    <member name="P:System.Workflow.Activities.StateMachineWorkflowActivity.InitialStateName">
      <summary>Gets or sets the <see cref="T:System.Workflow.Activities.StateActivity" /> in which the <see cref="T:System.Workflow.Activities.StateMachineWorkflowActivity" /> is when an instance of the state machine is created.</summary>
      <returns>The <see cref="T:System.Workflow.Activities.StateActivity" /> in which the <see cref="T:System.Workflow.Activities.StateMachineWorkflowActivity" /> is when an instance of the state machine is created.</returns>
    </member>
    <member name="F:System.Workflow.Activities.StateMachineWorkflowActivity.InitialStateNameProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyObject" /> that targets the <see cref="P:System.Workflow.Activities.StateMachineWorkflowActivity.InitialStateName" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.StateMachineWorkflowActivity.PreviousStateName">
      <summary>Gets the name of the previously executed <see cref="T:System.Workflow.Activities.StateActivity" />.</summary>
      <returns>The name of the previous <see cref="T:System.Workflow.Activities.StateActivity" />.</returns>
    </member>
    <member name="F:System.Workflow.Activities.StateMachineWorkflowActivity.SetStateQueueName">
      <summary>The name of the <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> that is used to change the state of a <see cref="T:System.Workflow.Activities.StateMachineWorkflowActivity" />. This field is constant.</summary>
    </member>
    <member name="T:System.Workflow.Activities.StateMachineWorkflowInstance">
      <summary>Represents a class that manages the current instance of a <see cref="T:System.Workflow.Activities.StateMachineWorkflowActivity" />. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.StateMachineWorkflowInstance.#ctor(System.Workflow.Runtime.WorkflowRuntime,System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.StateMachineWorkflowInstance" /> class.</summary>
      <param name="runtime">The current workflow runtime.</param>
      <param name="instanceId">The <see cref="T:System.Guid" /> that indicates the instance of the <see cref="T:System.Workflow.Activities.StateMachineWorkflowActivity" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="runtime" /> is a null reference (Nothing in Visual Basic). or<paramref name="instanceId" /> is an empty <see cref="T:System.Guid" />.</exception>
    </member>
    <member name="P:System.Workflow.Activities.StateMachineWorkflowInstance.CurrentState">
      <summary>Gets the currently executing <see cref="T:System.Workflow.Activities.StateActivity" />.</summary>
      <returns>The current <see cref="T:System.Workflow.Activities.StateActivity" />.</returns>
    </member>
    <member name="P:System.Workflow.Activities.StateMachineWorkflowInstance.CurrentStateName">
      <summary>Gets the name of the current <see cref="T:System.Workflow.Activities.StateActivity" />.</summary>
      <returns>The name of the current <see cref="T:System.Workflow.Activities.StateActivity" />.</returns>
    </member>
    <member name="M:System.Workflow.Activities.StateMachineWorkflowInstance.EnqueueItem(System.IComparable,System.Object)">
      <summary>Posts a message to the <see cref="T:System.Workflow.Activities.StateMachineWorkflowInstance" />.</summary>
      <param name="queueName">The name of the workflow queue.</param>
      <param name="item">The object to queue.</param>
    </member>
    <member name="M:System.Workflow.Activities.StateMachineWorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
      <summary>Posts a message to the <see cref="T:System.Workflow.Activities.StateMachineWorkflowInstance" />.</summary>
      <param name="queueName">The name of the workflow queue.</param>
      <param name="item">The object to queue.</param>
      <param name="pendingWork">An <see cref="T:System.Workflow.Runtime.IPendingWork" /> that allows the sender to be notified when the item is delivered.</param>
      <param name="workItem">An object to be passed to the <see cref="T:System.Workflow.Runtime.IPendingWork" /> methods.</param>
    </member>
    <member name="P:System.Workflow.Activities.StateMachineWorkflowInstance.InstanceId">
      <summary>Gets the <see cref="T:System.Guid" /> that indicates the current instance of the <see cref="T:System.Workflow.Activities.StateMachineWorkflowActivity" />.</summary>
      <returns>The <see cref="T:System.Guid" /> that indicates the current instance of the <see cref="T:System.Workflow.Activities.StateMachineWorkflowActivity" />.</returns>
    </member>
    <member name="P:System.Workflow.Activities.StateMachineWorkflowInstance.PossibleStateTransitions">
      <summary>Gets a collection of state transitions that the current <see cref="T:System.Workflow.Activities.StateActivity" /> can make.</summary>
      <returns>A collection of state transitions that the current <see cref="T:System.Workflow.Activities.StateActivity" /> can make.</returns>
    </member>
    <member name="M:System.Workflow.Activities.StateMachineWorkflowInstance.SetState(System.String)">
      <summary>Provides a transition to a specified <see cref="T:System.Workflow.Activities.StateActivity" /> using the name of the <see cref="T:System.Workflow.Activities.StateActivity" />.</summary>
      <param name="targetStateName">The name of the <see cref="T:System.Workflow.Activities.StateActivity" /> to transition to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetStateName" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <see cref="T:System.Workflow.Activities.StateActivity" /> specified by <paramref name="targetStateName" /> is a null reference (Nothing).</exception>
    </member>
    <member name="M:System.Workflow.Activities.StateMachineWorkflowInstance.SetState(System.Workflow.Activities.StateActivity)">
      <summary>Provides a transition to a specified <see cref="T:System.Workflow.Activities.StateActivity" />.</summary>
      <param name="targetState">The <see cref="T:System.Workflow.Activities.StateActivity" /> to transition to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetState" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.Workflow.Activities.StateMachineWorkflowInstance.StateHistory">
      <summary>Gets a collection of state activities that the state machine workflow instance has transitioned through.</summary>
      <returns>A collection of transitions that the <see cref="T:System.Workflow.Activities.StateActivity" /> has made.</returns>
    </member>
    <member name="P:System.Workflow.Activities.StateMachineWorkflowInstance.StateMachineWorkflow">
      <summary>Gets the latest definition of the <see cref="T:System.Workflow.Activities.StateMachineWorkflowActivity" />.</summary>
      <returns>The latest definition of the <see cref="T:System.Workflow.Activities.StateMachineWorkflowActivity" />.</returns>
      <exception cref="T:System.InvalidOperationException">If the workflow has already completed, the current <see cref="T:System.Workflow.Activities.StateMachineWorkflowActivity" /> cannot be retrieved, so the previous definition is retrieved.</exception>
    </member>
    <member name="P:System.Workflow.Activities.StateMachineWorkflowInstance.States">
      <summary>Gets a list of <see cref="T:System.Workflow.Activities.StateActivity" /> classes in the <see cref="P:System.Workflow.Activities.StateMachineWorkflowInstance.StateMachineWorkflow" />.</summary>
      <returns>A list of <see cref="T:System.Workflow.Activities.StateActivity" /> classes in the <see cref="P:System.Workflow.Activities.StateMachineWorkflowInstance.StateMachineWorkflow" />.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Workflow.Activities.StateMachineWorkflowInstance.StateMachineWorkflow" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.Workflow.Activities.StateMachineWorkflowInstance.WorkflowInstance">
      <summary>Gets the current <see cref="T:System.Workflow.Runtime.WorkflowInstance" />.</summary>
      <returns>The current <see cref="T:System.Workflow.Runtime.WorkflowInstance" />.</returns>
    </member>
    <member name="T:System.Workflow.Activities.WebServiceFaultActivity">
      <summary>Enables sending a fault to the Web service client from the workflow. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.WebServiceFaultActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.WebServiceFaultActivity" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.WebServiceFaultActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.WebServiceFaultActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.WebServiceFaultActivity.Fault">
      <summary>Gets or sets the exception that caused the Web service to stop.</summary>
      <returns>The exception that caused the Web service to stop.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.Activities.WebServiceFaultActivity.FaultProperty">
      <summary>Contains the exception value that is thrown when there is an error in the execution of the <see cref="T:System.Workflow.Activities.WebServiceInputActivity" /> activity.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.WebServiceFaultActivity.InputActivityName">
      <summary>Gets or sets the name of the previous <see cref="T:System.Workflow.Activities.WebServiceInputActivity" />.</summary>
      <returns>The name of the previous <see cref="T:System.Workflow.Activities.WebServiceInputActivity" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.Activities.WebServiceFaultActivity.InputActivityNameProperty">
      <summary>Represents the name of the <see cref="T:System.Workflow.Activities.WebServiceInputActivity" /> that is associated with this fault. The fault is thrown on the method that was associated with the <see cref="T:System.Workflow.Activities.WebServiceInputActivity" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Workflow.Activities.WebServiceFaultActivity.SendingFault">
      <summary>Occurs before the fault is sent to the client, which is useful for appending information to the fault.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.Activities.WebServiceFaultActivity.SendingFaultEvent">
      <summary>Defines an event delegate that is executed before the fault is delivered to the method caller. This handler provides a place to set the fault property value.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.WebServiceInputActivity">
      <summary>Enables receiving data from a Web service in a workflow. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.WebServiceInputActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.WebServiceInputActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.WebServiceInputActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.WebServiceInputActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
    </member>
    <member name="F:System.Workflow.Activities.WebServiceInputActivity.ActivitySubscribedProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="F:System.Workflow.Activities.WebServiceInputActivity.ActivitySubscribedProperty" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Workflow.Activities.WebServiceInputActivity.InputReceived">
      <summary>Occurs when the <see cref="T:System.Workflow.Activities.WebServiceInputActivity" /> has received input.</summary>
    </member>
    <member name="F:System.Workflow.Activities.WebServiceInputActivity.InputReceivedEvent">
      <summary>Defines an event delegate that is executed after the activity receives the expected call from the Web service invocation.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.WebServiceInputActivity.InterfaceType">
      <summary>Gets or sets the interface type that defines the method that this activity listens on.</summary>
      <returns>The interface type.</returns>
    </member>
    <member name="F:System.Workflow.Activities.WebServiceInputActivity.InterfaceTypeProperty">
      <summary>Corresponds to the name of the interface that is used as the Web service contract.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.WebServiceInputActivity.IsActivating">
      <summary>Gets or sets a value that indicates whether receiving data should start the workflow.</summary>
      <returns>true if receiving data should start the workflow; otherwise, false.</returns>
    </member>
    <member name="F:System.Workflow.Activities.WebServiceInputActivity.IsActivatingProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.WebServiceInputActivity.IsActivating" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.WebServiceInputActivity.MethodName">
      <summary>Gets or sets the name of the method on the interface specified by the <see cref="P:System.Workflow.Activities.WebServiceInputActivity.InterfaceType" /> property that this <see cref="T:System.Workflow.Activities.WebServiceInputActivity" /> represents.</summary>
      <returns>The name of the method on the interface specified by the <see cref="P:System.Workflow.Activities.WebServiceInputActivity.InterfaceType" /> property that this <see cref="T:System.Workflow.Activities.WebServiceInputActivity" /> represents. </returns>
    </member>
    <member name="F:System.Workflow.Activities.WebServiceInputActivity.MethodNameProperty">
      <summary>Corresponds to a name of one of the methods contained in the interface that is used as the Web service contract.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.WebServiceInputActivity.ParameterBindings">
      <summary>Gets the collection of bindings associated with the input parameters to the method specified in the <see cref="P:System.Workflow.Activities.WebServiceInputActivity.MethodName" /> property.</summary>
      <returns>The collection of properties used as inbound parameters on the method specified by the <see cref="P:System.Workflow.Activities.WebServiceInputActivity.MethodName" /> property.</returns>
    </member>
    <member name="F:System.Workflow.Activities.WebServiceInputActivity.ParameterBindingsProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.WebServiceInputActivity.ParameterBindings" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.WebServiceInputActivity.Roles">
      <summary>Gets or sets a collection of roles that are valid to send data to the <see cref="T:System.Workflow.Activities.WebServiceInputActivity" />.</summary>
      <returns>The <see cref="T:System.Workflow.Activities.WorkflowRoleCollection" /> that contains the Web service roles that are valid to send data to the <see cref="T:System.Workflow.Activities.WebServiceInputActivity" />.</returns>
    </member>
    <member name="F:System.Workflow.Activities.WebServiceInputActivity.RolesProperty">
      <summary>Identifies the valid user roles that are allowed to send messages from the Web service client to the <see cref="T:System.Workflow.Activities.WebServiceInputActivity" />. The two types of supported roles are Active Directory and ASP.NET.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.WebServiceInputActivity.System#Workflow#Activities#IEventActivity#QueueName">
      <summary>Gets the name of the <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> on which the activity is waiting for data to arrive.</summary>
      <returns>The name of the <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> on which the activity is waiting for data to arrive. </returns>
    </member>
    <member name="M:System.Workflow.Activities.WebServiceInputActivity.System#Workflow#Activities#IEventActivity#Subscribe(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})">
      <summary>Creates the subscription of the <see cref="T:System.Workflow.Activities.WebServiceInputActivity" /> activity to an event.</summary>
      <param name="parentContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> that represents the execution environment of the <see cref="T:System.Workflow.Activities.WebServiceInputActivity" /> activity.</param>
      <param name="parentEventHandler">The <see cref="T:System.EventHandler" /> for the parent event.</param>
    </member>
    <member name="M:System.Workflow.Activities.WebServiceInputActivity.System#Workflow#Activities#IEventActivity#Unsubscribe(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})">
      <summary>Cancels the subscription of a <see cref="T:System.Workflow.ComponentModel.Activity" /> to an event.</summary>
      <param name="parentContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> that represents the execution environment of the <see cref="T:System.Workflow.Activities.WebServiceInputActivity" /> activity.</param>
      <param name="parentEventHandler">The <see cref="T:System.EventHandler" /> for the parent event.</param>
    </member>
    <member name="M:System.Workflow.Activities.WebServiceInputActivity.System#Workflow#ComponentModel#IActivityEventListener{T}#OnEvent(System.Object,System.Workflow.ComponentModel.QueueEventArgs)">
      <summary>Defines the processing procedure when the subscribed-to event occurs.</summary>
      <param name="sender">The object that raised the event.</param>
      <param name="e">The previously typed event arguments.</param>
    </member>
    <member name="M:System.Workflow.Activities.WebServiceInputActivity.System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetAccessType(System.IServiceProvider,System.String)">
      <summary>Returns the access type for the specified property.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Compiler.AccessTypes" /> enumeration value that denotes the access level of the property.</returns>
      <param name="serviceProvider">An object that implements <see cref="T:System.IServiceProvider" /> to provide access to design time services if they are required.</param>
      <param name="propertyName">The name of the property. </param>
    </member>
    <member name="M:System.Workflow.Activities.WebServiceInputActivity.System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetPropertyType(System.IServiceProvider,System.String)">
      <summary>Returns the <see cref="T:System.Type" /> of the specified property.</summary>
      <returns>The <see cref="T:System.Type" /> for the property whose name is passed as the <paramref name="propertyName " />parameter. </returns>
      <param name="serviceProvider">An object that implements <see cref="T:System.IServiceProvider" /> to provide access to design time services if they are required.</param>
      <param name="propertyName">The name of the property. </param>
    </member>
    <member name="T:System.Workflow.Activities.WebServiceOutputActivity">
      <summary>Enables sending data to a Web service from within a workflow. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.WebServiceOutputActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.WebServiceOutputActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.WebServiceOutputActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.WebServiceOutputActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
    </member>
    <member name="P:System.Workflow.Activities.WebServiceOutputActivity.InputActivityName">
      <summary>Gets or sets the name of the preceding <see cref="T:System.Workflow.Activities.WebServiceInputActivity" /> class.</summary>
      <returns>The name of the preceding <see cref="T:System.Workflow.Activities.WebServiceInputActivity" /> class.</returns>
    </member>
    <member name="F:System.Workflow.Activities.WebServiceOutputActivity.InputActivityNameProperty">
      <summary>Defines the name of the <see cref="T:System.Workflow.Activities.WebServiceInputActivity" /> that this <see cref="T:System.Workflow.Activities.WebServiceOutputActivity" /> is matched with.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.WebServiceOutputActivity.ParameterBindings">
      <summary>Gets the collection of bindings associated with the out/ref and return value of the corresponding <see cref="T:System.Workflow.Activities.WebServiceInputActivity" /> method.</summary>
      <returns>This collection is used to bind the outbound parameters to locations in the workflow. When the <see cref="T:System.Workflow.Activities.WebServiceOutputActivity" /> executes, it extracts the values from the bound locations and delivers these back to the blocked Web service method.</returns>
    </member>
    <member name="F:System.Workflow.Activities.WebServiceOutputActivity.ParameterBindingsProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyObject" /> that targets the <see cref="P:System.Workflow.Activities.WebServiceOutputActivity.ParameterBindings" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Workflow.Activities.WebServiceOutputActivity.SendingOutput">
      <summary>Occurs before the <see cref="T:System.Workflow.Activities.WebServiceOutputActivity" /> sends output to the client.</summary>
    </member>
    <member name="F:System.Workflow.Activities.WebServiceOutputActivity.SendingOutputEvent">
      <summary>Defines an event delegate that is executed before the activity sends the output of the Web service invocation.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.WebServiceOutputActivity.System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetAccessType(System.IServiceProvider,System.String)">
      <summary>Returns the access type for the specified property.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Compiler.AccessTypes" /> enumeration value denoting the access level of the property.</returns>
      <param name="serviceProvider">An object that implements <see cref="T:System.IServiceProvider" /> to provide access to design time services if they are required.</param>
      <param name="propertyName">The name of the property. </param>
    </member>
    <member name="M:System.Workflow.Activities.WebServiceOutputActivity.System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetPropertyType(System.IServiceProvider,System.String)">
      <summary>Returns the <see cref="T:System.Type" /> of the specified property.</summary>
      <returns>The <see cref="T:System.Type" /> for the property whose name is passed as the <paramref name="propertyName " />parameter. </returns>
      <param name="serviceProvider">An object that implements <see cref="T:System.IServiceProvider" /> to provide access to design time services if they are required.</param>
      <param name="propertyName">The name of the property. </param>
    </member>
    <member name="T:System.Workflow.Activities.WebWorkflowRole">
      <summary>Represents a Workflow role that is backed by a <see cref="T:System.Web.Security.RoleProvider" />.</summary>
    </member>
    <member name="M:System.Workflow.Activities.WebWorkflowRole.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.WebWorkflowRole" /> class by using the specified role name. </summary>
      <param name="roleName">A string that defines the name of the role.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="roleName" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.Activities.WebWorkflowRole.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.WebWorkflowRole" /> class by using the specified role name and role provider. </summary>
      <param name="roleName">A string that defines the name of the role.</param>
      <param name="provider">A string that defines the role provider.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="roleName" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.Activities.WebWorkflowRole.GetIdentities">
      <summary>Returns a generic list of ASP.NET accounts associated with the <see cref="T:System.Workflow.Activities.WebWorkflowRole" />.</summary>
      <returns>A generic list of string values that represent the ASP.NET accounts associated with the <see cref="T:System.Workflow.Activities.WebWorkflowRole" />.</returns>
    </member>
    <member name="M:System.Workflow.Activities.WebWorkflowRole.IncludesIdentity(System.String)">
      <summary>Returns a value indicating whether the <see cref="T:System.Workflow.Activities.WebWorkflowRole" /> contains the specified identity</summary>
      <returns>true if the <see cref="T:System.Workflow.Activities.WebWorkflowRole" /> contains the specified identity; otherwise, false.</returns>
      <param name="identity">The name of the identity to test for.</param>
    </member>
    <member name="P:System.Workflow.Activities.WebWorkflowRole.Name">
      <summary>Gets or sets the name of the <see cref="T:System.Workflow.Activities.WebWorkflowRole" />.</summary>
      <returns>A string that contains the name of the <see cref="T:System.Workflow.Activities.WebWorkflowRole" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Workflow.Activities.WebWorkflowRole.Name" /> was set to a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.Workflow.Activities.WebWorkflowRole.RoleProvider">
      <summary>Gets or sets the role provider for the <see cref="T:System.Workflow.Activities.WebWorkflowRole" />.</summary>
      <returns>A string that contains the role provider for the <see cref="T:System.Workflow.Activities.WebWorkflowRole" />.</returns>
    </member>
    <member name="T:System.Workflow.Activities.WhileActivity">
      <summary>Runs a child activity iteratively as long as a certain condition is true.</summary>
    </member>
    <member name="M:System.Workflow.Activities.WhileActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.WhileActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.WhileActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.WhileActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
    </member>
    <member name="P:System.Workflow.Activities.WhileActivity.Condition">
      <summary>Gets or sets a condition that determines whether the <see cref="T:System.Workflow.Activities.WhileActivity" /> should run or finish.</summary>
      <returns>When the <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> property evaluates to true, the <see cref="T:System.Workflow.Activities.WhileActivity" /> continues to run. When the <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> evaluates to false, the <see cref="T:System.Workflow.Activities.WhileActivity" /> finishes.</returns>
    </member>
    <member name="F:System.Workflow.Activities.WhileActivity.ConditionProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.WhileActivity.Condition" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.WhileActivity.DynamicActivity">
      <summary>Gets the dynamic child activities in the <see cref="T:System.Workflow.Activities.WhileActivity" />.</summary>
      <returns>The dynamic child activities in the <see cref="T:System.Workflow.Activities.WhileActivity" />.</returns>
    </member>
    <member name="M:System.Workflow.Activities.WhileActivity.System#Workflow#ComponentModel#IActivityEventListener{T}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)">
      <summary>Defines the processing procedure when the subscribed-to event occurs.</summary>
      <param name="sender">The object that raised the event.</param>
      <param name="e">The previously typed event arguments.</param>
    </member>
    <member name="T:System.Workflow.Activities.WorkflowAuthorizationException">
      <summary>The exception that is thrown when role validation fails due to a specified identity that is not contained in the <see cref="T:System.Workflow.Activities.WorkflowRoleCollection" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.WorkflowAuthorizationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.WorkflowAuthorizationException" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.WorkflowAuthorizationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.WorkflowAuthorizationException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" />  that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" />  that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Workflow.Activities.WorkflowAuthorizationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.WorkflowAuthorizationException" /> class using the specified message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.WorkflowAuthorizationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.WorkflowAuthorizationException" /> class by using the specified message and <see cref="T:System.Exception" />.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that caused the <see cref="T:System.Workflow.Activities.WorkflowAuthorizationException" />.  </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.WorkflowAuthorizationException.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.WorkflowAuthorizationException" /> class using the name of the activity and the principal.</summary>
      <param name="activityName">The name of the <see cref="T:System.Workflow.ComponentModel.Activity" /> in which the exception occurred.</param>
      <param name="principalName">The name of the user or entity on whose behalf the workflow authorization exception was thrown.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.WorkflowRole">
      <summary>The abstract base class from which workflow roles are derived.</summary>
    </member>
    <member name="M:System.Workflow.Activities.WorkflowRole.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.Activities.WorkflowRole" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.WorkflowRole.GetIdentities">
      <summary>When implemented in a derived class gets the identities contained by this <see cref="T:System.Workflow.Activities.WorkflowRole" />.</summary>
      <returns>A list of the names of the identities contained by this <see cref="T:System.Workflow.Activities.WorkflowRole" />.</returns>
    </member>
    <member name="M:System.Workflow.Activities.WorkflowRole.IncludesIdentity(System.String)">
      <summary>When implemented in a derived class, returns a value that indicates whether this role contains the specified identity.</summary>
      <returns>true if <paramref name="identity" /> is included in this <see cref="T:System.Workflow.Activities.WorkflowRole" />; otherwise, false.</returns>
      <param name="identity">The name of the identity for which to test.</param>
    </member>
    <member name="P:System.Workflow.Activities.WorkflowRole.Name">
      <summary>When implemented in a derived class, gets or sets the name of this <see cref="T:System.Workflow.Activities.WorkflowRole" />.</summary>
      <returns>The name of the <see cref="T:System.Workflow.Activities.WorkflowRole" />.</returns>
    </member>
    <member name="T:System.Workflow.Activities.WorkflowRoleCollection">
      <summary>Represents a collection of <see cref="T:System.Workflow.Activities.WorkflowRole" /> objects. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.WorkflowRoleCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.WorkflowRoleCollection" /> class. </summary>
    </member>
    <member name="M:System.Workflow.Activities.WorkflowRoleCollection.IncludesIdentity(System.String)">
      <summary>Returns a value indicating whether the <see cref="T:System.Workflow.Activities.WorkflowRoleCollection" /> contains the specified identity.</summary>
      <returns>true if the <see cref="T:System.Workflow.Activities.WorkflowRoleCollection" /> contains the identity; otherwise false. </returns>
      <param name="identity">A string that contains the identity for which to search.</param>
    </member>
    <member name="T:System.Workflow.Activities.WorkflowSubscriptionService">
      <summary>Provides methods for a subscription service to manage subscriptions for a workflow runtime.</summary>
    </member>
    <member name="M:System.Workflow.Activities.WorkflowSubscriptionService.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.Activities.WorkflowSubscriptionService" /> class. </summary>
    </member>
    <member name="M:System.Workflow.Activities.WorkflowSubscriptionService.CreateSubscription(System.Workflow.Activities.MessageEventSubscription)">
      <summary>When overridden in a derived class, notifies the <see cref="T:System.Workflow.Activities.WorkflowSubscriptionService" /> that the workflow runtime created the specified <see cref="T:System.Workflow.Activities.MessageEventSubscription" />. </summary>
      <param name="subscription">The <see cref="T:System.Workflow.Activities.MessageEventSubscription" /> that the workflow runtime created.</param>
    </member>
    <member name="M:System.Workflow.Activities.WorkflowSubscriptionService.DeleteSubscription(System.Guid)">
      <summary>When overridden in a derived class, notifies the <see cref="T:System.Workflow.Activities.WorkflowSubscriptionService" /> that the workflow runtime deleted the subscription associated with the specified GUID. </summary>
      <param name="subscriptionId">The GUID of the subscription that the workflow runtime deleted.</param>
    </member>
    <member name="T:System.Workflow.Activities.WorkflowWebService">
      <summary>Represents the base class for all workflow Web services.</summary>
    </member>
    <member name="M:System.Workflow.Activities.WorkflowWebService.#ctor(System.Type)">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.Activities.WorkflowWebService" /> class.</summary>
      <param name="workflowType">The <see cref="T:System.Type" /> of the workflow. </param>
    </member>
    <member name="M:System.Workflow.Activities.WorkflowWebService.Invoke(System.Type,System.String,System.Boolean,System.Object[])">
      <summary>Invokes the associated workflow and retrieves the response.</summary>
      <returns>The object returned by the Web service.</returns>
      <param name="interfaceType">The type of the interface.</param>
      <param name="methodName">The name of the method.</param>
      <param name="isActivation">Indicates whether the Web service activates the workflow.</param>
      <param name="parameters">The parameters of the method specified by <paramref name="methodName" />.</param>
    </member>
    <member name="P:System.Workflow.Activities.WorkflowWebService.WorkflowRuntime">
      <summary>Provides access to the current <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />, which executes the workflow.</summary>
      <returns>The current <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</returns>
    </member>
    <member name="T:System.Workflow.Activities.Configuration.ActiveDirectoryRoleFactoryConfiguration">
      <summary>Represents the section in the configuration file that addresses the role class. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Configuration.ActiveDirectoryRoleFactoryConfiguration.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Configuration.ActiveDirectoryRoleFactoryConfiguration" /> class.</summary>
    </member>
    <member name="P:System.Workflow.Activities.Configuration.ActiveDirectoryRoleFactoryConfiguration.DirectReports">
      <summary>Gets or sets the names of the direct reports.</summary>
      <returns>The names of the direct reports.</returns>
    </member>
    <member name="P:System.Workflow.Activities.Configuration.ActiveDirectoryRoleFactoryConfiguration.DistinguishedName">
      <summary>Gets or sets the distinguished name for this instance.</summary>
      <returns>The distinguished name for this instance.</returns>
    </member>
    <member name="P:System.Workflow.Activities.Configuration.ActiveDirectoryRoleFactoryConfiguration.Group">
      <summary>Gets or sets the name of the group for this instance.</summary>
      <returns>The name of the group for this instance.</returns>
    </member>
    <member name="P:System.Workflow.Activities.Configuration.ActiveDirectoryRoleFactoryConfiguration.Manager">
      <summary>Gets or sets the name of the manager associated with this instance.</summary>
      <returns>The name of the manager associated with this instance.</returns>
    </member>
    <member name="P:System.Workflow.Activities.Configuration.ActiveDirectoryRoleFactoryConfiguration.Member">
      <summary>Gets or sets the member for this instance.</summary>
      <returns>The member for this instance.</returns>
    </member>
    <member name="P:System.Workflow.Activities.Configuration.ActiveDirectoryRoleFactoryConfiguration.RootPath">
      <summary>Gets or sets the root path for this instance.</summary>
      <returns>The root path for this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.Rules.AddedConditionAction">
      <summary>Represents the addition of a <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> to a workflow during dynamic update. This class cannot be inherited. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.AddedConditionAction.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.AddedConditionAction" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.AddedConditionAction.#ctor(System.Workflow.Activities.Rules.RuleCondition)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.AddedConditionAction" /> class using the definition of the added condition.</summary>
      <param name="addedConditionDefinition">The condition added to the workflow.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addedConditionDefinition" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.AddedConditionAction.ConditionDefinition">
      <summary>Gets or sets the <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> to add to the workflow.</summary>
      <returns>The <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> to add to the workflow.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Workflow.Activities.Rules.AddedConditionAction.ConditionDefinition" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.AddedConditionAction.ConditionName">
      <summary>Gets a string that contains the name of the <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> that was added to the workflow.</summary>
      <returns>The name of the <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> that was added to the workflow.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.Rules.AddedRuleSetAction">
      <summary>Represents the addition of a <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> during dynamic update. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.AddedRuleSetAction.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.AddedRuleSetAction" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.AddedRuleSetAction.#ctor(System.Workflow.Activities.Rules.RuleSet)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.AddedRuleSetAction" /> class by using the new <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</summary>
      <param name="addedRuleSetDefinition">The new <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.AddedRuleSetAction.RuleSetDefinition">
      <summary>Gets or sets the new <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</summary>
      <returns>The new <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.AddedRuleSetAction.RuleSetName">
      <summary>Gets the name of the new <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</summary>
      <returns>The name of the new <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.Rules.IRuleExpression">
      <summary>Represents the base class from which custom expression writers must derive to write custom expressions.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.IRuleExpression.AnalyzeUsage(System.Workflow.Activities.Rules.RuleAnalysis,System.Boolean,System.Boolean,System.Workflow.Activities.Rules.RulePathQualifier)">
      <summary>When overridden in a derived class, reports on how the object uses fields and properties in the context type.</summary>
      <param name="analysis">The <see cref="T:System.Workflow.Activities.Rules.RuleAnalysis" /> method to store fields and properties read by a condition or read by an action.</param>
      <param name="isRead">true if the expression is being read from; false if the expression is not being read from.</param>
      <param name="isWritten">true if the expression is being written to; false if the expression is not being written to.</param>
      <param name="qualifier">The path of a field or property.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.IRuleExpression.Clone">
      <summary>When overridden in a derived class, creates a deep copy of the current <see cref="T:System.CodeDom.CodeExpression" />.</summary>
      <returns>A deep copy of the current <see cref="T:System.CodeDom.CodeExpression" />.</returns>
    </member>
    <member name="M:System.Workflow.Activities.Rules.IRuleExpression.Decompile(System.Text.StringBuilder,System.CodeDom.CodeExpression)">
      <summary>When overridden in a derived class, decompiles the custom expression into string form.</summary>
      <param name="stringBuilder">A mutable string for the decompiled expression. This method should append the decompiled syntax for this subexpression.</param>
      <param name="parentExpression">The parent code expression. This can be used to determine operator precedence, and whether this subexpression needs to be parenthesized.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.IRuleExpression.Evaluate(System.Workflow.Activities.Rules.RuleExecution)">
      <summary>When overridden in a derived class, evaluates the custom expression.</summary>
      <returns>The <see cref="T:System.Workflow.Activities.Rules.RuleExpressionResult" /> that indicates the result of the rule execution.</returns>
      <param name="execution">The <see cref="T:System.Workflow.Activities.Rules.RuleExecution" /> to execute the expression.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.IRuleExpression.Match(System.CodeDom.CodeExpression)">
      <summary>Compares the current expression to another expression to determine whether they are equal.</summary>
      <returns>true to show that the expressions are equal; otherwise, false.</returns>
      <param name="expression">The expression to compare the current expression to.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.IRuleExpression.Validate(System.Workflow.Activities.Rules.RuleValidation,System.Boolean)">
      <summary>When overridden in a derived class, verifies that the expression is configured correctly and has no errors.</summary>
      <returns>The <see cref="T:System.Workflow.Activities.Rules.RuleExpressionInfo" /> for the expression.</returns>
      <param name="validation">The <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> to manage the validation process.</param>
      <param name="isWritten">true if the expression is being written to; false if the expression is not being written to.</param>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RemovedConditionAction">
      <summary>Represents the removal of a <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> from a workflow during dynamic update. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RemovedConditionAction.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RemovedConditionAction" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RemovedConditionAction.#ctor(System.Workflow.Activities.Rules.RuleCondition)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RemovedConditionAction" /> class by using the definition of the removed condition.</summary>
      <param name="removedConditionDefinition">The condition removed from the workflow.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addedConditionDefinition" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RemovedConditionAction.ConditionDefinition">
      <summary>Gets or sets the <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> to remove from the workflow.</summary>
      <returns>The <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> to remove from the workflow.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Workflow.Activities.Rules.RemovedConditionAction.ConditionDefinition" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RemovedConditionAction.ConditionName">
      <summary>Gets a string that contains the name of the <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> to remove from the workflow.</summary>
      <returns>The name of the <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> to remove from the workflow.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RemovedRuleSetAction">
      <summary>Represents the removal of a <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> during dynamic update. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RemovedRuleSetAction.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RemovedRuleSetAction" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RemovedRuleSetAction.#ctor(System.Workflow.Activities.Rules.RuleSet)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RemovedRuleSetAction" /> class by using the <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> removed from the workflow.</summary>
      <param name="removedRuleSetDefinition">The <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> removed from the workflow.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="removedRuleSetDefinition" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RemovedRuleSetAction.RuleSetDefinition">
      <summary>Gets or Sets the <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> removed from the workflow.</summary>
      <returns>The <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> removed from the workflow.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> to remove from the workflow is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RemovedRuleSetAction.RuleSetName">
      <summary>Gets the name of the <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> removed from the workflow.</summary>
      <returns>The name of the <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> removed from the workflow.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.Rules.Rule">
      <summary>Defines a condition with an associated set of actions to perform.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.Rule.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.Rule" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.Rule.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.Rule" /> class using the name of the <see cref="T:System.Workflow.Activities.Rules.Rule" />.</summary>
      <param name="name">The name of the <see cref="T:System.Workflow.Activities.Rules.Rule" />.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.Rule.#ctor(System.String,System.Workflow.Activities.Rules.RuleCondition,System.Collections.Generic.IList{System.Workflow.Activities.Rules.RuleAction})">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.Rule" /> class using the name of the Rule, the rule condition, and a list of THEN actions.</summary>
      <param name="name">The name of the <see cref="T:System.Workflow.Activities.Rules.Rule" />.</param>
      <param name="condition">The <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> for the <see cref="T:System.Workflow.Activities.Rules.Rule" />.</param>
      <param name="thenActions">A collection of <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> objects to evaluate whether the condition is true.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.Rule.#ctor(System.String,System.Workflow.Activities.Rules.RuleCondition,System.Collections.Generic.IList{System.Workflow.Activities.Rules.RuleAction},System.Collections.Generic.IList{System.Workflow.Activities.Rules.RuleAction})">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.Rule" /> class using the name of the Rule, the rule condition, a list of THEN actions, and a list of ELSE actions.</summary>
      <param name="name">The name of the <see cref="T:System.Workflow.Activities.Rules.Rule" />.</param>
      <param name="condition">The <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> for the <see cref="T:System.Workflow.Activities.Rules.Rule" />.</param>
      <param name="thenActions">A collection of <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> objects to evaluate if the condition is true.</param>
      <param name="elseActions">A collection of <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> objects to evaluate whether the condition is false.</param>
    </member>
    <member name="P:System.Workflow.Activities.Rules.Rule.Active">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Workflow.Activities.Rules.Rule" /> should be evaluated.</summary>
      <returns>true if the Rule should be evaluated; otherwise, false.</returns>
    </member>
    <member name="M:System.Workflow.Activities.Rules.Rule.Clone">
      <summary>Creates a deep copy of the current <see cref="T:System.Workflow.Activities.Rules.Rule" />.</summary>
      <returns>A <see cref="T:System.Workflow.Activities.Rules.Rule" /> that is identical to this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.Rule.Condition">
      <summary>Gets or sets a <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> for the <see cref="T:System.Workflow.Activities.Rules.Rule" /> to evaluate.</summary>
      <returns>A <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> for the <see cref="T:System.Workflow.Activities.Rules.Rule" /> to evaluate.</returns>
    </member>
    <member name="P:System.Workflow.Activities.Rules.Rule.Description">
      <summary>Gets or sets a description of the <see cref="T:System.Workflow.Activities.Rules.Rule" />.</summary>
      <returns>A description of the <see cref="T:System.Workflow.Activities.Rules.Rule" />.</returns>
    </member>
    <member name="P:System.Workflow.Activities.Rules.Rule.ElseActions">
      <summary>Gets a collection of <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> classes to perform in the ELSE case.</summary>
      <returns>A collection of <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> to perform in the ELSE case.</returns>
    </member>
    <member name="M:System.Workflow.Activities.Rules.Rule.Equals(System.Object)">
      <summary>Determines whether this instance of <see cref="T:System.Workflow.Activities.Rules.Rule" /> and the object passed as the parameter have the same value.</summary>
      <returns>true if the current object and <paramref name="obj" /> are the same; otherwise, false.</returns>
      <param name="obj">The object to compare the current object to.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.Rule.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>The hash code for this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.Rule.Name">
      <summary>Gets or sets the name of the <see cref="T:System.Workflow.Activities.Rules.Rule" />.</summary>
      <returns>The name of the <see cref="T:System.Workflow.Activities.Rules.Rule" />.</returns>
    </member>
    <member name="P:System.Workflow.Activities.Rules.Rule.Priority">
      <summary>Gets or sets a value that indicates the order in which a <see cref="T:System.Workflow.Activities.Rules.Rule" /> should be run.</summary>
      <returns>A value that indicates the order in which a <see cref="T:System.Workflow.Activities.Rules.Rule" /> should be run.</returns>
    </member>
    <member name="P:System.Workflow.Activities.Rules.Rule.ReevaluationBehavior">
      <summary>Gets or sets a value indicating whether a <see cref="T:System.Workflow.Activities.Rules.Rule" /> can be reevaluated.</summary>
      <returns>The <see cref="T:System.Workflow.Activities.Rules.RuleReevaluationBehavior" /> indicating whether the <see cref="T:System.Workflow.Activities.Rules.Rule" /> can be reevaluated.</returns>
    </member>
    <member name="P:System.Workflow.Activities.Rules.Rule.ThenActions">
      <summary>Gets a collection of <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> classes to perform in the THEN case.</summary>
      <returns>A collection of <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> classes to perform in the THEN case.</returns>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleAction">
      <summary>Represents an abstract class that defines an action to be executed if the associated <see cref="P:System.Workflow.Activities.Rules.Rule.Condition" /> evaluates to true, for <see cref="P:System.Workflow.Activities.Rules.Rule.ThenActions" />, or false, for <see cref="P:System.Workflow.Activities.Rules.Rule.ElseActions" />. This class must be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleAction.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleAction.Clone">
      <summary>Creates a deep copy of the current <see cref="T:System.Workflow.Activities.Rules.RuleAction" />.</summary>
      <returns>A <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> that is identical to this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleAction.Execute(System.Workflow.Activities.Rules.RuleExecution)">
      <summary>Executes the <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> using the specified <see cref="T:System.Workflow.Activities.Rules.RuleExecution" /> instance.</summary>
      <param name="context">The runtime state that the <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> is executing in.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleAction.GetSideEffects(System.Workflow.Activities.Rules.RuleValidation)">
      <summary>Returns the fields and properties updated by a <see cref="T:System.Workflow.Activities.Rules.RuleAction" />.</summary>
      <returns>A collection of strings that represent the names of fields and properties that are changed by a <see cref="T:System.Workflow.Activities.Rules.RuleAction" />.</returns>
      <param name="validation">The <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> that was used previously in a call to <see cref="M:System.Workflow.Activities.Rules.RuleAction.Validate(System.Workflow.Activities.Rules.RuleValidation)" />.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleAction.Validate(System.Workflow.Activities.Rules.RuleValidation)">
      <summary>Verifies that the <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> is configured correctly and has no errors.</summary>
      <returns>true to show that the <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> validated correctly and has no errors; otherwise, false.</returns>
      <param name="validator">The <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> to manage the validation process.</param>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleActionTrackingEvent">
      <summary>Contains the name, instance ID, and condition result of a rule that has been evaluated.</summary>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleActionTrackingEvent.ConditionResult">
      <summary>Gets the result of the condition evaluation.</summary>
      <returns>The result of the rule condition: true or false.</returns>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleActionTrackingEvent.RuleName">
      <summary>Gets the name of the <see cref="T:System.Workflow.Activities.Rules.Rule" /> that caused the <see cref="T:System.Workflow.Activities.Rules.RuleActionTrackingEvent" /> to be raised.</summary>
      <returns>The <see cref="T:System.Workflow.Activities.Rules.Rule" /> that caused one or more actions to execute.</returns>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleAnalysis">
      <summary>Stores the fields and properties read by a condition or written to by an action. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleAnalysis.#ctor(System.Workflow.Activities.Rules.RuleValidation,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleAnalysis" /> class.</summary>
      <param name="validation">The <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> to manage the validation process.</param>
      <param name="forWrites">A Boolean value that indicates whether analysis is being done for writes (in the case of <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> objects) or reads (in the case of <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> objects).</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleAnalysis.AddSymbol(System.String)">
      <summary>Adds the fields and properties used by an expression as symbols to the <see cref="T:System.Workflow.Activities.Rules.RuleAnalysis" /> instance.</summary>
      <param name="symbol">A string that represents the path to a field or property.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleAnalysis.ForWrites">
      <summary>Gets a value that indicates whether analysis is being done for writes or reads. </summary>
      <returns>true if analysis is being done for writes (in the case of <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> objects); otherwise, false if the analysis is being done for reads (in the case of <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> objects).</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleAnalysis.GetSymbols">
      <summary>Returns the list of symbols from the <see cref="T:System.Workflow.Activities.Rules.RuleAnalysis" /> instance. </summary>
      <returns>The list of symbols for the <see cref="T:System.Workflow.Activities.Rules.RuleAnalysis" /> instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleAttribute">
      <summary>Represents the base class for custom <see cref="T:System.Workflow.Activities.Rules.Rule" /> attributes. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleAttribute.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleAttribute" /> class.</summary>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleAttributeTarget">
      <summary>Specifies whether the path in a <see cref="T:System.Workflow.Activities.Rules.RuleReadAttribute" /> or <see cref="T:System.Workflow.Activities.Rules.RuleWriteAttribute" /> is for a method parameter, or this.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.Activities.Rules.RuleAttributeTarget.Parameter">
      <summary>Specifies the path is an absolute path beginning with a parameter name, which optionally can be followed by a path to an inner member.</summary>
    </member>
    <member name="F:System.Workflow.Activities.Rules.RuleAttributeTarget.This">
      <summary>Specifies the path is a relative or absolute path, beginning with the token this.</summary>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleChainingBehavior">
      <summary>Specifies the forward chaining behavior of the <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</summary>
    </member>
    <member name="F:System.Workflow.Activities.Rules.RuleChainingBehavior.None">
      <summary>Indicates that no chaining is performed. Each rule is executed exactly once.</summary>
    </member>
    <member name="F:System.Workflow.Activities.Rules.RuleChainingBehavior.UpdateOnly">
      <summary>Indicates that chaining is performed if executed actions explicitly specify it using a <see cref="T:System.Workflow.Activities.Rules.RuleUpdateAction" />.</summary>
    </member>
    <member name="F:System.Workflow.Activities.Rules.RuleChainingBehavior.Full">
      <summary>Indicates that chaining is performed when fields or properties are modified by actions, <see cref="T:System.Workflow.Activities.Rules.RuleWriteAttribute" /> are specified for methods called by actions, or when a <see cref="T:System.Workflow.Activities.Rules.RuleUpdateAction" /> is performed.</summary>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleCondition">
      <summary>Base type for <see cref="T:System.Workflow.Activities.Rules.RuleExpressionCondition" /> and any custom conditions created by users.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleCondition.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> class. </summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleCondition.Clone">
      <summary>When overridden in a derived class, creates a deep copy of the current <see cref="T:System.Workflow.Activities.Rules.RuleCondition" />.</summary>
      <returns>A <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> that is identical to this instance</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleCondition.Evaluate(System.Workflow.Activities.Rules.RuleExecution)">
      <summary>When overridden in a derived class, evaluates the <see cref="T:System.Workflow.Activities.Rules.RuleCondition" />.</summary>
      <returns>true to show that the <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> evaluated to true; otherwise, false.</returns>
      <param name="execution">The runtime context the rule is running in. </param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleCondition.GetDependencies(System.Workflow.Activities.Rules.RuleValidation)">
      <summary>When overridden in a derived class, gets the dependencies for the <see cref="T:System.Workflow.Activities.Rules.RuleCondition" />.</summary>
      <returns>A list of symbols that represent entities read by the condition.</returns>
      <param name="validation">The <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> that was used previously in a call to <see cref="M:System.Workflow.Activities.Rules.RuleAction.Validate(System.Workflow.Activities.Rules.RuleValidation)" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleCondition.Name">
      <summary>Gets or sets the name of the <see cref="T:System.Workflow.Activities.Rules.RuleCondition" />.</summary>
      <returns>The name of the <see cref="T:System.Workflow.Activities.Rules.RuleCondition" />.</returns>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleCondition.OnRuntimeInitialized">
      <summary>Called when all properties have been given values. After this call, no properties can be modified.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleCondition.Validate(System.Workflow.Activities.Rules.RuleValidation)">
      <summary>When overridden in a derived class, verifies that the <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> is configured correctly and has no errors.</summary>
      <returns>true to show that the <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> has no errors; otherwise, false.</returns>
      <param name="validation">The instance of <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> that is used to manage the validation of rules and rule conditions.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleConditionChangeAction">
      <summary>Represents an abstract base class from which all dynamic update notifications of changes to <see cref="T:System.Workflow.Activities.Rules.RuleCondition" />s must be derived.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleConditionChangeAction.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleConditionChangeAction" /> class.</summary>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleConditionChangeAction.ConditionName">
      <summary>When overridden in a derived class, gets the name of the <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> to be changed.</summary>
      <returns>The name of the <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> to be changed.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleConditionChangeAction.ValidateChanges(System.Workflow.ComponentModel.Activity)">
      <summary>When overridden in a derived class, verifies that the <see cref="T:System.Workflow.Activities.Rules.RuleConditionChangeAction" /> is configured correctly and has no errors.</summary>
      <returns>A new <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" />.</returns>
      <param name="activity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> that the <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> changes are occurring in.</param>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleConditionCollection">
      <summary>Contains a collection of <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> classes defined on the workflow. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleConditionCollection.#ctor">
      <summary>Initializes a new instance of a <see cref="T:System.Workflow.Activities.Rules.RuleConditionCollection" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleConditionCollection.Add(System.Workflow.Activities.Rules.RuleCondition)">
      <summary>Adds a <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> to the <see cref="T:System.Workflow.Activities.Rules.RuleConditionCollection" />.</summary>
      <param name="item">The <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> to add to the <see cref="T:System.Workflow.Activities.Rules.RuleConditionCollection" />.</param>
      <exception cref="T:System.Data.ReadOnlyException">The <see cref="T:System.Workflow.Activities.Rules.Rule" /> is runtime initialized.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleConditionCollection.Diff(System.Object,System.Object)">
      <summary>Determines the difference between two <see cref="T:System.Workflow.Activities.Rules.RuleConditionCollection" /> classes.</summary>
      <returns>A list of <see cref="T:System.Workflow.ComponentModel.WorkflowChangeAction" /> classes that account for the differences between the <paramref name="originalDefinition" /> and the <paramref name="changedDefinition" />.</returns>
      <param name="originalDefinition">The original <see cref="T:System.Workflow.Activities.Rules.RuleConditionCollection" />.</param>
      <param name="changedDefinition">The <see cref="T:System.Workflow.Activities.Rules.RuleConditionCollection" /> with proposed changes.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleConditionReference">
      <summary>Represents a <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> in the conditions collection and enables you to programmatically evaluate the condition.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleConditionReference.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleConditionReference" /> class.</summary>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleConditionReference.ConditionName">
      <summary>Gets or sets the name of the <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> to evaluate.</summary>
      <returns>The <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> to evaluate.</returns>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleConditionReference.Evaluate(System.Workflow.ComponentModel.Activity,System.IServiceProvider)">
      <summary>Evaluates the underlying <see cref="T:System.Workflow.Activities.Rules.RuleCondition" />.</summary>
      <returns>true if the condition evaluates to true; otherwise, false. </returns>
      <param name="activity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> associated with this condition.</param>
      <param name="provider">The <see cref="T:System.IServiceProvider" /> for this condition evaluation.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleConditionReference.InitializeProperties">
      <summary>Sets member properties based on the <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> that <see cref="T:System.Workflow.Activities.Rules.RuleConditionReference" /> points to.</summary>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleDefinitions">
      <summary>Represents the root of the .rules files and contains all the <see cref="P:System.Workflow.Activities.Rules.RuleDefinitions.RuleSets" /> and <see cref="T:System.Workflow.Activities.Rules.RuleCondition" />s associated with a workflow. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleDefinitions.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleDefinitions" /> class.</summary>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleDefinitions.Conditions">
      <summary>Gets the collection of rule conditions in the workflow.</summary>
      <returns>The <see cref="T:System.Workflow.Activities.Rules.RuleConditionCollection" /> that contains all the <see cref="T:System.Workflow.Activities.Rules.RuleCondition" />s in the workflow.</returns>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleDefinitions.Diff(System.Object,System.Object)">
      <summary>Determines the difference between <see cref="P:System.Workflow.Activities.Rules.RuleDefinitions.Conditions" /> and the <see cref="P:System.Workflow.Activities.Rules.RuleDefinitions.RuleSets" /> in the original definition and the changed definition.</summary>
      <returns>A list of <see cref="T:System.Workflow.ComponentModel.WorkflowChangeAction" /> classes that differentiate the <paramref name="originalDefinition" /> from the <paramref name="changedDefinition" />.</returns>
      <param name="originalDefinition">The original rule definition.</param>
      <param name="changedDefinition">The new rule definition.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.Activities.Rules.RuleDefinitions.RuleDefinitionsProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="T:System.Workflow.Activities.Rules.RuleDefinitions" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleDefinitions.RuleSets">
      <summary>Gets the collection of <see cref="P:System.Workflow.Activities.Rules.RuleDefinitions.RuleSets" /> in the workflow.</summary>
      <returns>The <see cref="T:System.Workflow.Activities.Rules.RuleSetCollection" /> that contains all the <see cref="P:System.Workflow.Activities.Rules.RuleDefinitions.RuleSets" /> in the workflow.</returns>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleEngine">
      <summary>Used to perform <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> evaluation.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleEngine.#ctor(System.Workflow.Activities.Rules.RuleSet,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleEngine" /> class with a <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> to evaluate and a rule type to create a new instance of <see cref="M:System.Workflow.Activities.Rules.RuleValidation.#ctor(System.Type,System.Workflow.ComponentModel.Compiler.ITypeProvider)" /> to use for rule expression validation.</summary>
      <param name="ruleSet">Specifies the <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> to evaluate.</param>
      <param name="objectType">Specifies the <see cref="T:System.Type" /> of the <see cref="T:System.Workflow.Activities.Rules.Rule" /> used to create a new instance of <see cref="M:System.Workflow.Activities.Rules.RuleValidation.#ctor(System.Type,System.Workflow.ComponentModel.Compiler.ITypeProvider)" />.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleEngine.#ctor(System.Workflow.Activities.Rules.RuleSet,System.Workflow.Activities.Rules.RuleValidation)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleEngine" /> class with a <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> to evaluate using <see cref="T:System.Workflow.Activities.Rules.RuleValidation" />.</summary>
      <param name="ruleSet">Specifies the <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> to evaluate.</param>
      <param name="validation">Specifies the <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> used to validate rule expressions.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleEngine.Execute(System.Object)">
      <summary>Executes the current object using <see cref="M:System.Workflow.Activities.Rules.RuleExecution.#ctor(System.Workflow.Activities.Rules.RuleValidation,System.Object)" />.</summary>
      <param name="thisObject">The current object to be executed.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleEngine.Execute(System.Object,System.Workflow.ComponentModel.ActivityExecutionContext)">
      <summary>Executes the current <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> against the object instance (which, in this case, is likely an <see cref="T:System.Workflow.ComponentModel.Activity" />).</summary>
      <param name="thisObject">The current object to be executed.</param>
      <param name="executionContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> for the current activity. </param>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleEvaluationException">
      <summary>Represents the base class for all exceptions caused by rule evaluation issues.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleEvaluationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleEvaluationException" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleEvaluationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleEvaluationException" /> class with serialized data.</summary>
      <param name="serializeInfo">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleEvaluationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleEvaluationException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleEvaluationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleEvaluationException" /> class, with a specified error message and a reference to the inner <see cref="T:System.Exception" /> that is the cause of this <see cref="T:System.Exception" />.</summary>
      <param name="message">The message that describes the error.</param>
      <param name="ex">The <see cref="T:System.Exception" /> that is the cause of the current <see cref="T:System.Exception" /> . If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current <see cref="T:System.Exception" /> is raised in a catch block that handles the inner <see cref="T:System.Exception" /> . </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleEvaluationIncompatibleTypesException">
      <summary>The exception that is thrown when attempting to apply an operator to incompatible operands when you evaluate a rule.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleEvaluationIncompatibleTypesException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleEvaluationIncompatibleTypesException" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleEvaluationIncompatibleTypesException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleEvaluationIncompatibleTypesException" /> class with serialized data.</summary>
      <param name="serializeInfo">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown. </param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializeInfo" /> is a null reference (Visual Basic Nothing).</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is a null reference (Visual Basic Nothing) or the <see cref="P:System.Exception.HResult" /> is zero.</exception>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleEvaluationIncompatibleTypesException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleEvaluationIncompatibleTypesException" /> with a specified error message.</summary>
      <param name="message">A string that contains the error message to associate with this instance.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleEvaluationIncompatibleTypesException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleEvaluationIncompatibleTypesException" /> class with a specified error message and a reference to the inner <see cref="T:System.Exception" /> that is the cause of this <see cref="T:System.Exception" />.</summary>
      <param name="message">A message that describes the current exception.</param>
      <param name="ex">The <see cref="T:System.Exception" /> instance that caused the current exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleEvaluationIncompatibleTypesException.#ctor(System.String,System.Type,System.CodeDom.CodeBinaryOperatorType,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleEvaluationIncompatibleTypesException" /> class with the details of the compatibility violation.</summary>
      <param name="message">A message that describes the current <see cref="T:System.Exception" /> .</param>
      <param name="left">The <see cref="T:System.Type" /> appearing on the left side of the operator.</param>
      <param name="op">The <see cref="T:System.CodeDom.CodeBinaryOperatorType" /> representing the operator whose compatibility is violated.</param>
      <param name="right">The <see cref="T:System.Type" /> appearing on the right side of the operator.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleEvaluationIncompatibleTypesException.#ctor(System.String,System.Type,System.CodeDom.CodeBinaryOperatorType,System.Type,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleEvaluationIncompatibleTypesException" /> class with the details of the compatibility violation. This includes the <see cref="P:System.Exception.InnerException" />.</summary>
      <param name="message">A message that describes the current <see cref="T:System.Exception" /> .</param>
      <param name="left">The <see cref="T:System.Type" /> appearing on the left side of the operator.</param>
      <param name="op">The <see cref="T:System.CodeDom.CodeBinaryOperatorType" /> representing the operator whose compatibility is violated.</param>
      <param name="right">The <see cref="T:System.Type" /> appearing on the right side of the operator.</param>
      <param name="ex">The <see cref="T:System.Exception" /> instance that caused the current exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleEvaluationIncompatibleTypesException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown. </param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleEvaluationIncompatibleTypesException.Left">
      <summary>Gets or sets the <see cref="T:System.Type" /> of the left argument of the expression causing the exception.</summary>
      <returns>The <see cref="T:System.Type" /> of the left argument of the expression causing the exception.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleEvaluationIncompatibleTypesException.Operator">
      <summary>Gets or sets the <see cref="T:System.CodeDom.CodeBinaryOperatorType" /> representing the operator which caused the exception. </summary>
      <returns>The <see cref="T:System.CodeDom.CodeBinaryOperatorType" /> representing the operator which caused the exception. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleEvaluationIncompatibleTypesException.Right">
      <summary>Gets or sets the <see cref="T:System.Type" /> of the right argument of the expression causing the exception.</summary>
      <returns>The <see cref="T:System.Type" /> of the right argument of the expression causing the exception.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleException">
      <summary>Represents the base class for all exceptions caused by evaluation or validation of rules.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleException" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleException" /> class with serialized data.</summary>
      <param name="serializeInfo">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleException" /> class, with a specified error message and a reference to the inner <see cref="T:System.Exception" /> that is the cause of this <see cref="T:System.Exception" />.</summary>
      <param name="message">The message that describes the error.</param>
      <param name="ex">The <see cref="T:System.Exception" /> that is the cause of the current <see cref="T:System.Exception" /> . If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current <see cref="T:System.Exception" /> is raised in a catch block that handles the inner <see cref="T:System.Exception" /> . </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleExecution">
      <summary>Stores state information while executing <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> or <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> classes.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleExecution.#ctor(System.Workflow.Activities.Rules.RuleValidation,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleExecution" /> class by using the <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> and the object to be executed.</summary>
      <param name="validation">The <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> that guarantees that the expression is configured correctly.</param>
      <param name="thisObject">The current object to be executed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="validation" /> or <paramref name="thisObject" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleExecution.#ctor(System.Workflow.Activities.Rules.RuleValidation,System.Object,System.Workflow.ComponentModel.ActivityExecutionContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleExecution" /> class by using the <see cref="T:System.Workflow.Activities.Rules.RuleValidation" />, the object to be executed, and the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> for the current activity.</summary>
      <param name="validation">The <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> that guarantees that the expression is configured correctly.</param>
      <param name="thisObject">The current object to be executed.</param>
      <param name="activityExecutionContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> for the current Activity.</param>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleExecution.Activity">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.Activity" /> in which the rule is being executed.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Activity" /> in which the rule is being executed.</returns>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleExecution.ActivityExecutionContext">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> for the current Activity.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> for the current Activity.</returns>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleExecution.Halted">
      <summary>Gets or sets a value that indicates whether the rule execution was stopped.</summary>
      <returns>true if the rule execution was stopped; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleExecution.ThisObject">
      <summary>Gets the current object to be executed.</summary>
      <returns>The object to be executed.</returns>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleExecution.Validation">
      <summary>Gets or sets the validation instance for the expression to execute.</summary>
      <returns>The <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> for the expression to execute.</returns>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleExpressionCondition">
      <summary>Defines the condition definition behind a <see cref="T:System.Workflow.Activities.Rules.RuleConditionReference" />. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleExpressionCondition.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleExpressionCondition" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleExpressionCondition.#ctor(System.CodeDom.CodeExpression)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleExpressionCondition" /> class by using a specified code expression.</summary>
      <param name="expression">The <see cref="T:System.CodeDom.CodeExpression" /> to initialize the <see cref="T:System.Workflow.Activities.Rules.RuleExpressionCondition" /> with.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleExpressionCondition.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleExpressionCondition" /> class by using a specified name.</summary>
      <param name="conditionName">The name of the condition to evaluate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="conditionName" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleExpressionCondition.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleExpressionCondition" /> class by using a specified name and code expression.</summary>
      <param name="conditionName">The name of the condition to evaluate.</param>
      <param name="expression">The <see cref="T:System.CodeDom.CodeExpression" /> to initialize the <see cref="T:System.Workflow.Activities.Rules.RuleExpressionCondition" /> with.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleExpressionCondition.Clone">
      <summary>Creates a deep copy of the current <see cref="T:System.Workflow.Activities.Rules.RuleExpressionCondition" />.</summary>
      <returns>A <see cref="T:System.Workflow.Activities.Rules.RuleExpressionCondition" /> that is identical to this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleExpressionCondition.Equals(System.Object)">
      <summary>Determines whether two object instances are equal.</summary>
      <returns>true if the object instances are equal; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current object.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleExpressionCondition.Evaluate(System.Workflow.Activities.Rules.RuleExecution)">
      <summary>Evaluates the expression.</summary>
      <returns>true if the expression evaluates to true; otherwise, false.</returns>
      <param name="execution">Instance of the runtime context that <see cref="T:System.Workflow.Activities.Rules.RuleExpressionCondition" /> is running in.</param>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleExpressionCondition.Expression">
      <summary>Gets or sets the expression condition to evaluate. </summary>
      <returns>The expression condition to evaluate.</returns>
      <exception cref="T:System.Data.ReadOnlyException">The activity running the <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> is runtime initialized.</exception>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleExpressionCondition.GetDependencies(System.Workflow.Activities.Rules.RuleValidation)">
      <summary>Gets the dependencies for the <see cref="T:System.Workflow.Activities.Rules.RuleExpressionCondition" />.</summary>
      <returns>A list of dependencies.</returns>
      <param name="validation">The <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> to manage the validation process.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleExpressionCondition.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>The hash code for this instance. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleExpressionCondition.Name">
      <summary>Gets or sets the name of the condition to evaluate.</summary>
      <returns>The name of the condition to evaluate.</returns>
      <exception cref="T:System.Data.ReadOnlyException">The activity running the <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> is runtime initialized.</exception>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleExpressionCondition.OnRuntimeInitialized">
      <summary>Called when all properties have been given values. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleExpressionCondition.ToString">
      <summary>Returns the string value of the expression condition. </summary>
      <returns>The string value of the expression condition. An empty string if the expression condition is null.</returns>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleExpressionCondition.Validate(System.Workflow.Activities.Rules.RuleValidation)">
      <summary>Verifies that the expression is configured correctly and has no errors.</summary>
      <returns>true if the expression has no errors; otherwise, false.</returns>
      <param name="validation">The <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> to manage the validation process.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="validator" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleExpressionInfo">
      <summary>An instance of this class is returned by the <see cref="M:System.Workflow.Activities.Rules.IRuleExpression.Validate(System.Workflow.Activities.Rules.RuleValidation,System.Boolean)" /> method of an <see cref="T:System.Workflow.Activities.Rules.IRuleExpression" /> expression.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleExpressionInfo.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleExpressionInfo" /> class.</summary>
      <param name="expressionType">The <see cref="T:System.Type" /> of the expression.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleExpressionInfo.ExpressionType">
      <summary>Gets the type of the expression.</summary>
      <returns>The <see cref="T:System.Type" /> of the expression.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleExpressionResult">
      <summary>Abstract class that is the base for classes representing the result of custom expressions based on the <see cref="T:System.Workflow.Activities.Rules.IRuleExpression" /> interface.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleExpressionResult.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleExpressionResult" /> class.</summary>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleExpressionResult.Value">
      <summary>When overridden in a derived class, gets or sets the result of the expression.</summary>
      <returns>The result of the expression.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleExpressionWalker">
      <summary>Propagates the current behavior in the expression to child nodes. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleExpressionWalker.AnalyzeUsage(System.Workflow.Activities.Rules.RuleAnalysis,System.CodeDom.CodeExpression,System.Boolean,System.Boolean,System.Workflow.Activities.Rules.RulePathQualifier)">
      <summary>Identifies the fields and properties used by an expression and adds these as symbols to the <see cref="T:System.Workflow.Activities.Rules.RuleAnalysis" /> instance.</summary>
      <param name="analysis">The <see cref="T:System.Workflow.Activities.Rules.RuleAnalysis" /> instance that stores symbols representing the properties and fields used by rule conditions and actions.</param>
      <param name="expression">The expression being executed.</param>
      <param name="isRead">true if fields and properties read by a <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> are to be added to <see cref="T:System.Workflow.Activities.Rules.RuleAnalysis" />; otherwise, false.</param>
      <param name="isWritten">true if fields and properties written by a <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> are to be added to <see cref="T:System.Workflow.Activities.Rules.RuleAnalysis" />; otherwise, false.</param>
      <param name="qualifier">The path of a field or property determined up to this point.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="analysis" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleExpressionWalker.Clone(System.CodeDom.CodeExpression)">
      <summary>Creates a deep copy of the child nodes of the current <see cref="T:System.CodeDom.CodeExpression" />.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeExpression" /> that is identical to this instance.</returns>
      <param name="originalExpression">The expression that the clone is based on.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleExpressionWalker.Decompile(System.Text.StringBuilder,System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)">
      <summary>Decompiles the child nodes of the expression into string form.</summary>
      <param name="stringBuilder">The <see cref="T:System.Text.StringBuilder" /> that contains the mutable string of characters.</param>
      <param name="expression">The current <see cref="T:System.CodeDom.CodeExpression" />.</param>
      <param name="parentExpression">The parent <see cref="T:System.CodeDom.CodeExpression" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleExpressionWalker.Evaluate(System.Workflow.Activities.Rules.RuleExecution,System.CodeDom.CodeExpression)">
      <summary>Evaluates the expression and all child expressions.</summary>
      <returns>The <see cref="T:System.Workflow.Activities.Rules.RuleExpressionResult" /> that indicates the result of the expression evaluation.</returns>
      <param name="execution">The <see cref="T:System.Workflow.Activities.Rules.RuleExecution" /> to execute the expression.</param>
      <param name="expression">The <see cref="T:System.CodeDom.CodeExpression" /> to evaluate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="execution" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleExpressionWalker.Match(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)">
      <summary>Compares the current expression and child nodes to another expression to determine whether they are equal.</summary>
      <returns>true if the expressions are equal; otherwise, false.</returns>
      <param name="firstExpression">The first <see cref="T:System.CodeDom.CodeExpression" /> in the comparison.</param>
      <param name="secondExpression">The second <see cref="T:System.CodeDom.CodeExpression" /> in the comparison.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleExpressionWalker.Validate(System.Workflow.Activities.Rules.RuleValidation,System.CodeDom.CodeExpression,System.Boolean)">
      <summary>Verifies that the expression and child nodes are configured correctly and has no errors.</summary>
      <returns>The <see cref="T:System.Workflow.Activities.Rules.RuleExpressionInfo" /> for the <see cref="T:System.CodeDom.CodeExpression" />.</returns>
      <param name="validation">The <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> to manage the validation process.</param>
      <param name="expression">The <see cref="T:System.CodeDom.CodeExpression" /> to evaluate.</param>
      <param name="isWritten">true if fields and properties written by a <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> are stored in by <see cref="T:System.Workflow.Activities.Rules.RuleAnalysis" />; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="validation" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="expression" /> is null and the errors collection on the <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> object is a null reference (Nothing).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleHaltAction">
      <summary>Causes the <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> to stop executing and returns control back to the calling method.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleHaltAction.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleHaltAction" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleHaltAction.Clone">
      <summary>Creates a deep copy of the current <see cref="T:System.Workflow.Activities.Rules.RuleAction" />.</summary>
      <returns>A <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> that is identical to this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleHaltAction.Equals(System.Object)">
      <summary>Determines whether two object instances are equal.</summary>
      <returns>true if the objects are equal; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleHaltAction.Execute(System.Workflow.Activities.Rules.RuleExecution)">
      <summary>Executes the <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> using the specified <see cref="T:System.Workflow.Activities.Rules.RuleExecution" />.</summary>
      <param name="context">The <see cref="T:System.Workflow.Activities.Rules.RuleExecution" /> context used to execute the <see cref="T:System.Workflow.Activities.Rules.RuleAction" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleHaltAction.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>The hash code for this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleHaltAction.GetSideEffects(System.Workflow.Activities.Rules.RuleValidation)">
      <summary>Returns the fields and properties updated by the <see cref="T:System.Workflow.Activities.Rules.RuleAction" />.</summary>
      <returns>A list of the fields and properties changed by the <see cref="T:System.Workflow.Activities.Rules.RuleAction" />.NoteSince <see cref="T:System.Workflow.Activities.Rules.RuleHaltAction" /> does not have parameters, the return value will always be an empty list.</returns>
      <param name="validation">The <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> to manage the validation process.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleHaltAction.ToString">
      <summary>Returns the string "Halt".</summary>
      <returns>The string "Halt".</returns>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleHaltAction.Validate(System.Workflow.Activities.Rules.RuleValidation)">
      <summary>Returns true, no validation is performed.</summary>
      <returns>Always returns true.</returns>
      <param name="validator">The <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> to manage the validation process.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleInvokeAttribute">
      <summary>Indicates that a method is invoked by a condition. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleInvokeAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleInvokeAttribute" /> class.</summary>
      <param name="methodInvoked">The method invoked by the rule.</param>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleInvokeAttribute.MethodInvoked">
      <summary>Gets the method invoked by the condition.</summary>
      <returns>The method invoked by the condition.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleLiteralResult">
      <summary>Represents the literal result of a custom expression written using <see cref="T:System.Workflow.Activities.Rules.IRuleExpression" />. </summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleLiteralResult.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleLiteralResult" /> class.</summary>
      <param name="literal">The literal result of the expression.</param>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleLiteralResult.Value">
      <summary>Gets the result of the expression.  </summary>
      <returns>The result of the expression.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Workflow.Activities.Rules.RuleLiteralResult.Value" /> is set.</exception>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RulePathQualifier">
      <summary>Builds the path of a field or property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RulePathQualifier.#ctor(System.String,System.Workflow.Activities.Rules.RulePathQualifier)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RulePathQualifier" /> class.</summary>
      <param name="name">The name of the current entity in the path.</param>
      <param name="next">The next entity, or the field or property, for the path. Null if <paramref name="name" /> is the name of the property or field at the root of the path.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RulePathQualifier.Name">
      <summary>Gets the name of the current field or property.</summary>
      <returns>The name of the current entity in the path.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RulePathQualifier.Next">
      <summary>Gets the next field or property for the path.</summary>
      <returns>The next entity, or the field or property, for the path.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleReadAttribute">
      <summary>Indicates that a property is read by a <see cref="T:System.Workflow.Activities.Rules.Rule" />. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleReadAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleReadAttribute" /> class.</summary>
      <param name="path">The logical path of the member read by the condition.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleReadAttribute.#ctor(System.String,System.Workflow.Activities.Rules.RuleAttributeTarget)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleReadAttribute" /> class.</summary>
      <param name="path">The logical path of the member read by the condition.</param>
      <param name="target">
        <see cref="T:System.Workflow.Activities.Rules.RuleAttributeTarget" /> enumeration; specifies whether the path is relative to this or to a method parameter.</param>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleReadWriteAttribute">
      <summary>Represents the base class for the <see cref="T:System.Workflow.Activities.Rules.RuleReadAttribute" /> and <see cref="T:System.Workflow.Activities.Rules.RuleWriteAttribute" /> classes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleReadWriteAttribute.#ctor(System.String,System.Workflow.Activities.Rules.RuleAttributeTarget)">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleReadWriteAttribute" /> class.</summary>
      <param name="path">The path to target of the attribute.</param>
      <param name="target">
        <see cref="T:System.Workflow.Activities.Rules.RuleAttributeTarget" /> enumeration value that determines how to use path to find target.</param>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleReadWriteAttribute.Path">
      <summary>Gets the path to the target of the attribute.</summary>
      <returns>A <see cref="T:System.String" /> containing the path.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleReadWriteAttribute.Target">
      <summary>Gets the <see cref="T:System.Workflow.Activities.Rules.RuleAttributeTarget" /> enumeration value that determines how to use path to find target.</summary>
      <returns>A <see cref="T:System.Workflow.Activities.Rules.RuleAttributeTarget" /> enumeration value that determines how to use the specified path to find target.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleReevaluationBehavior">
      <summary>Specifies whether a <see cref="T:System.Workflow.Activities.Rules.Rule" /> can be reevaluated.</summary>
    </member>
    <member name="F:System.Workflow.Activities.Rules.RuleReevaluationBehavior.Never">
      <summary>Indicates that the <see cref="T:System.Workflow.Activities.Rules.Rule" /> is executed once.  A condition may be evaluated several times until the rule executes actions, but the rule will never be evaluated again.</summary>
    </member>
    <member name="F:System.Workflow.Activities.Rules.RuleReevaluationBehavior.Always">
      <summary>Indicates that the <see cref="T:System.Workflow.Activities.Rules.Rule" /> can be reevaluated multiple times. <see cref="F:System.Workflow.Activities.Rules.RuleReevaluationBehavior.Always" /> is the default value.</summary>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleSet">
      <summary>Contains a collection of <see cref="T:System.Workflow.Activities.Rules.Rule" /> classes along with the semantics for forward-chaining execution of those rules. A <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> can be executed directly in code or using the <see cref="T:System.Workflow.Activities.PolicyActivity" /> activity.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleSet.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleSet.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> class by using the name of the <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</summary>
      <param name="name">The name of the <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleSet.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> class by using the name and description of the <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</summary>
      <param name="name">The name of the <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</param>
      <param name="description">A description of the <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</param>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleSet.ChainingBehavior">
      <summary>Gets or sets the forward chaining behavior for the <see cref="T:System.Workflow.Activities.Rules.Rule" /> classes in the <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</summary>
      <returns>The <see cref="T:System.Workflow.Activities.Rules.RuleChainingBehavior" /> for the <see cref="T:System.Workflow.Activities.Rules.Rule" /> classes in the <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</returns>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleSet.Clone">
      <summary>Creates a deep copy of the current <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</summary>
      <returns>A <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> that is identical to this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleSet.Description">
      <summary>Gets or sets a description of the <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</summary>
      <returns>A description of the <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</returns>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleSet.Equals(System.Object)">
      <summary>Determines whether two object instances are equal.</summary>
      <returns>true if the objects are equal; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleSet.Execute(System.Workflow.Activities.Rules.RuleExecution)">
      <summary>Evaluates the <see cref="T:System.Workflow.Activities.Rules.Rule" /> instances in the <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</summary>
      <param name="ruleExecution">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> associated with the <see cref="T:System.Workflow.ComponentModel.Activity" /> that is invoking the <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ruleExecution" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">The cached <see cref="T:System.Workflow.Activities.Rules.RuleExecution" /> cannot be validated.</exception>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleSet.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>The hash code for this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleSet.Name">
      <summary>Gets and sets the name of the <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</summary>
      <returns>The name of the <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</returns>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleSet.Rules">
      <summary>Gets a list of <see cref="T:System.Workflow.Activities.Rules.Rule" /> classes in the <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</summary>
      <returns>A list of <see cref="T:System.Workflow.Activities.Rules.Rule" /> classes in the <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</returns>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleSet.Validate(System.Workflow.Activities.Rules.RuleValidation)">
      <summary>Validates the <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> attributes and the <see cref="T:System.Workflow.Activities.Rules.Rule" /> classes in the <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> of errors found during validation.</returns>
      <param name="validation">The <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationManager" /> to manage the validation process.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="validation" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleSetChangeAction">
      <summary>Represents an abstract base class from which all dynamic update notifications of changes to a <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> must be derived. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleSetChangeAction.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleSetChangeAction" /> class.</summary>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleSetChangeAction.RuleSetName">
      <summary>When overridden in a derived class, gets the name of the <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> to be changed.</summary>
      <returns>The name of the <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> to be changed.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleSetChangeAction.ValidateChanges(System.Workflow.ComponentModel.Activity)">
      <summary>When overridden in a derived class, verifies that the <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> is configured correctly and has no errors.</summary>
      <returns>A new <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" />.</returns>
      <param name="activity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> that the <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> changes are occurring in.</param>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleSetCollection">
      <summary>Contains a collection of <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> classes defined in a workflow.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleSetCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleSetCollection" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleSetCollection.Add(System.Workflow.Activities.Rules.RuleSet)">
      <summary>Overloaded. Adds a <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> to the collection</summary>
      <param name="item">The <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> to add to the <see cref="T:System.Workflow.Activities.Rules.RuleSetCollection" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleSetCollection.Diff(System.Object,System.Object)">
      <summary>Determines the difference between two <see cref="T:System.Workflow.Activities.Rules.RuleSetCollection" />.</summary>
      <returns>A list of <see cref="T:System.Workflow.ComponentModel.WorkflowChangeAction" /> classes that differentiate the <paramref name="originalDefinition" /> from the <paramref name="changedDefinition" />.</returns>
      <param name="originalDefinition">The original definition of the <see cref="T:System.Workflow.Activities.Rules.RuleSetCollection" />.</param>
      <param name="changedDefinition">The changed definition of the <see cref="T:System.Workflow.Activities.Rules.RuleSetCollection" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleSetReference">
      <summary>Holds the name of a <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> in the <see cref="T:System.Workflow.Activities.Rules.RuleSetCollection" /> on the workflow. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleSetReference.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleSetReference" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleSetReference.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleSetReference" /> class using the name of the <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</summary>
      <param name="ruleSetName">The name of the <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> that the activity evaluates.</param>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleSetReference.RuleSetName">
      <summary>Gets or sets the name of the <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> that the activity evaluates.</summary>
      <returns>The name of the <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> that the activity evaluates.</returns>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleSetValidationException">
      <summary>Represents the exception thrown when processing cannot continue because a rule set cannot be validated.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleSetValidationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleSetValidationException" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleSetValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleSetValidationException" /> class from serialized data.</summary>
      <param name="serializeInfo">Reference to the object that holds the data needed to deserialize the exception.</param>
      <param name="context">Provides the means for deserializing the exception data.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleSetValidationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleSetValidationException" /> class.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleSetValidationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleSetValidationException" /> class.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="ex">The inner exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleSetValidationException.#ctor(System.String,System.Workflow.ComponentModel.Compiler.ValidationErrorCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleSetValidationException" /> class.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="errors">Collection of validation errors that occurred while validating a rule set.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleSetValidationException.Errors">
      <summary>Gets a collection of validation errors that occurred while validating a rule set.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> that contains the validation errors.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleSetValidationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</summary>
      <param name="info">Reference to the object that holds the data needed to serialize and deserialize the exception.</param>
      <param name="context">Provides the means for serializing the exception data.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleStatementAction">
      <summary>Specifies a property or field to update or a method to run using the CodeDom types.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleStatementAction.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleStatementAction" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleStatementAction.#ctor(System.CodeDom.CodeExpression)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleStatementAction" /> class using a <see cref="T:System.CodeDom.CodeExpression" />.</summary>
      <param name="codeDomExpression">A <see cref="T:System.CodeDom.CodeExpression" /> specifying the action to perform.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleStatementAction.#ctor(System.CodeDom.CodeStatement)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleStatementAction" /> class using a <see cref="T:System.CodeDom.CodeStatement" />.</summary>
      <param name="codeDomStatement">A <see cref="T:System.CodeDom.CodeStatement" /> specifying the action to perform.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleStatementAction.Clone">
      <summary>Creates a deep copy of the current <see cref="T:System.Workflow.Activities.Rules.RuleAction" />.</summary>
      <returns>A <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> that is identical to this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleStatementAction.CodeDomStatement">
      <summary>Gets or sets the code statement specifying the action to perform.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeStatement" /> specifying the action to perform.</returns>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleStatementAction.Equals(System.Object)">
      <summary>Determines whether two object instances are equal.</summary>
      <returns>true if the objects are equal; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleStatementAction.Execute(System.Workflow.Activities.Rules.RuleExecution)">
      <summary>Executes the <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> using the specified <see cref="T:System.Workflow.Activities.Rules.RuleExecution" />.</summary>
      <param name="context">The <see cref="T:System.Workflow.Activities.Rules.RuleExecution" /> context used to execute the <see cref="T:System.Workflow.Activities.Rules.RuleAction" />.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleStatementAction.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>The hash code for this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleStatementAction.GetSideEffects(System.Workflow.Activities.Rules.RuleValidation)">
      <summary>Returns the fields and properties updated by a <see cref="T:System.Workflow.Activities.Rules.RuleAction" />.</summary>
      <returns>A list of the fields and properties changed by a <see cref="T:System.Workflow.Activities.Rules.RuleAction" />.</returns>
      <param name="validation">The <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> to manage the validation process.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleStatementAction.ToString">
      <summary>Returns the string value of the action. </summary>
      <returns>The string value of the action.</returns>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleStatementAction.Validate(System.Workflow.Activities.Rules.RuleValidation)">
      <summary>Verifies that the <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> is configured correctly and has no errors.</summary>
      <returns>true if the <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> had no errors; otherwise, false.</returns>
      <param name="validator">The <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> to manage the validation process.</param>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleUpdateAction">
      <summary>Indicates that a rule is updating a variable, in order to cause reevaluation of affected rules.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleUpdateAction.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleUpdateAction" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleUpdateAction.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleUpdateAction" /> class.</summary>
      <param name="path">A string that represents the name of the field or property changed. The character "/" is used as a separator. </param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleUpdateAction.Clone">
      <summary>Creates a deep copy of the current <see cref="T:System.Workflow.Activities.Rules.RuleAction" />.</summary>
      <returns>A <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> that is identical to this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleUpdateAction.Equals(System.Object)">
      <summary>Determines whether two object instances are equal.</summary>
      <returns>true if the objects are equal; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleUpdateAction.Execute(System.Workflow.Activities.Rules.RuleExecution)">
      <summary>Executes the <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> using the specified <see cref="T:System.Workflow.Activities.Rules.RuleExecution" />.</summary>
      <param name="context">The <see cref="T:System.Workflow.Activities.Rules.RuleExecution" /> context used to execute the <see cref="T:System.Workflow.Activities.Rules.RuleAction" />.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleUpdateAction.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>The hash code for this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleUpdateAction.GetSideEffects(System.Workflow.Activities.Rules.RuleValidation)">
      <summary>Returns the fields and properties updated by a <see cref="T:System.Workflow.Activities.Rules.RuleAction" />.</summary>
      <returns>A list of the fields and properties changed by a <see cref="T:System.Workflow.Activities.Rules.RuleAction" />.</returns>
      <param name="validation">The <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> to manage the validation process.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleUpdateAction.Path">
      <summary>Gets or sets the path of the <see cref="T:System.Workflow.Activities.Rules.RuleUpdateAction" />.</summary>
      <returns>The path of the <see cref="T:System.Workflow.Activities.Rules.RuleUpdateAction" />.</returns>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleUpdateAction.ToString">
      <summary>Returns a string that indicates the field or property that the <see cref="T:System.Workflow.Activities.Rules.Rule" /> is updating.</summary>
      <returns>The string "Update &lt;<see cref="P:System.Workflow.Activities.Rules.RuleUpdateAction.Path" />&gt;".</returns>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleUpdateAction.Validate(System.Workflow.Activities.Rules.RuleValidation)">
      <summary>Verifies that the <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> is configured correctly and has no errors.</summary>
      <returns>true if the <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> has no errors; otherwise, false.</returns>
      <param name="validator">The <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> to manage the validation process.</param>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleValidation">
      <summary>Validates expression conditions. </summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleValidation.#ctor(System.Type,System.Workflow.ComponentModel.Compiler.ITypeProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> class using the <see cref="T:System.Type" /> of the <see cref="T:System.Workflow.Activities.Rules.Rule" />. </summary>
      <param name="thisType">The type of the object that this <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> or <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> will be executed against. Normally it is the workflow, but it can be any valid type.</param>
      <param name="typeProvider">An optional <see cref="T:System.Workflow.ComponentModel.Compiler.ITypeProvider" /> implementation that is used to determine what <see cref="T:System.Type" />s are available in the condition. If one is not specified, only types in the assembly specified by the activity and any assemblies it references are available.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="thisType" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleValidation.#ctor(System.Workflow.ComponentModel.Activity,System.Workflow.ComponentModel.Compiler.ITypeProvider,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> class using the specified <see cref="T:System.Workflow.ComponentModel.Activity" /> and the type provider. </summary>
      <param name="activity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> in which context the <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> or <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> is run. In most cases, this will be the workflow object.</param>
      <param name="typeProvider">An optional <see cref="T:System.Workflow.ComponentModel.Compiler.ITypeProvider" /> implementation that is used to determine what <see cref="T:System.Type" />s are available in the condition. If one is not specified, only types in the assembly specified by the activity and any assemblies it references are available.</param>
      <param name="checkStaticType">If true, the types used by any <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> or <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> that are validated with this object must be in the restricted list of types allowed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activity" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleValidation.Errors">
      <summary>Gets the errors associated with the <see cref="T:System.Workflow.Activities.Rules.RuleValidation" />.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> that contains the <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationError" /> objects created during rule validation.</returns>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleValidation.ExpressionInfo(System.CodeDom.CodeExpression)">
      <summary>Determines the type of the code expression.</summary>
      <returns>The <see cref="T:System.Workflow.Activities.Rules.RuleExpressionInfo" /> for the object. This identifies the type of the object.</returns>
      <param name="expression">The <see cref="T:System.CodeDom.CodeExpression" /> to evaluate.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleValidation.PopParentExpression">
      <summary>Removes and returns the parent expressions at the top of the <see cref="T:System.Collections.Stack" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleValidation.PushParentExpression(System.CodeDom.CodeExpression)">
      <summary>Inserts an object at the top of the <see cref="T:System.Collections.Stack" />. </summary>
      <returns>true if the <paramref name="newParent" /> was added to the stack; otherwise, false.</returns>
      <param name="newParent">The <see cref="T:System.CodeDom.CodeExpression" /> to add to the <see cref="T:System.Collections.Stack" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newParent" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleValidation.ThisType">
      <summary>Gets the type of object.</summary>
      <returns>The <see cref="T:System.Type" /> of the object.</returns>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleWriteAttribute">
      <summary>Indicates that a property or field is written by the method or property that this attribute is applied to. This information is used by the rules engine to determine dependencies between rules. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleWriteAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleWriteAttribute" /> class. </summary>
      <param name="path">The field or property that is on the same class as the method or property that this attribute is applied to.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleWriteAttribute.#ctor(System.String,System.Workflow.Activities.Rules.RuleAttributeTarget)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleWriteAttribute" /> class. </summary>
      <param name="path">The field or property that is on the same class as the method or property that this attribute is applied to.</param>
      <param name="target">
        <see cref="T:System.Workflow.Activities.Rules.RuleAttributeTarget" /> enumeration value that determines how to use path to find target.</param>
    </member>
    <member name="T:System.Workflow.Activities.Rules.UpdatedConditionAction">
      <summary>Represents the change to a <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> for dynamic updates. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.UpdatedConditionAction.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.UpdatedConditionAction" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.UpdatedConditionAction.#ctor(System.Workflow.Activities.Rules.RuleCondition,System.Workflow.Activities.Rules.RuleCondition)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.UpdatedConditionAction" /> class, with the existing and new conditions of the change.</summary>
      <param name="conditionDefinition">The condition being replaced.</param>
      <param name="newConditionDefinition">The replacing condition.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="conditionDefinition" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newConditionDefinition" /> is a null reference (Nothing).</exception>
      <exception cref="T:System.ArgumentException">The name of the <paramref name="conditionDefinition" /> is not equal to the name of <paramref name="newConditionDefinition." /></exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.UpdatedConditionAction.ConditionDefinition">
      <summary>Gets or sets the condition being replaced by this action.</summary>
      <returns>The condition being replaced by this action.</returns>
      <exception cref="T:System.ArgumentNullException">Trying to set this property to a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.UpdatedConditionAction.ConditionName">
      <summary>Gets the name of the condition be replaced.</summary>
      <returns>The name of the condition to be replaced.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.UpdatedConditionAction.NewConditionDefinition">
      <summary>Gets or sets the condition which will replace the existing condition.</summary>
      <returns>The condition which will replace the existing condition.</returns>
      <exception cref="T:System.ArgumentNullException">Trying to set this property to a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.Rules.UpdatedRuleSetAction">
      <summary>Represents the change to a <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> for dynamic updates. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.UpdatedRuleSetAction.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.UpdatedRuleSetAction" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.UpdatedRuleSetAction.#ctor(System.Workflow.Activities.Rules.RuleSet,System.Workflow.Activities.Rules.RuleSet)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.UpdatedRuleSetAction" /> class by using the original and the updated <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> classes.</summary>
      <param name="originalRuleSetDefinition">The original <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</param>
      <param name="updatedRuleSetDefinition">The updated <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</param>
      <exception cref="T:System.ArgumentNullException">The RuleSetDefinition or updatedRuleSetDefinition is null</exception>
      <exception cref="T:System.ArgumentException">The names of the two RuleSets are not the same</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.UpdatedRuleSetAction.OriginalRuleSetDefinition">
      <summary>Gets or sets the original <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</summary>
      <returns>The original <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</returns>
      <exception cref="T:System.ArgumentNullException">The original <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.UpdatedRuleSetAction.RuleSetName">
      <summary>Gets the name of the <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</summary>
      <returns>The name of the <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.UpdatedRuleSetAction.UpdatedRuleSetDefinition">
      <summary>Gets or sets the updated <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</summary>
      <returns>The updated <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</returns>
      <exception cref="T:System.ArgumentNullException">The updated <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.Rules.Design.RuleConditionDialog">
      <summary>This dialog is normally used by the activities <see cref="T:System.Workflow.Activities.IfElseBranchActivity" />, <see cref="T:System.Workflow.Activities.WhileActivity" />, <see cref="T:System.Workflow.Activities.ConditionedActivityGroup" />, and <see cref="T:System.Workflow.Activities.ReplicatorActivity" /> to edit declarative conditions. However, if you want to use conditions outside of these activities (for example, edit a condition for use outside of a workflow completely), you can use this dialog to perform the editing of the condition.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.Design.RuleConditionDialog.#ctor(System.Type,System.Workflow.ComponentModel.Compiler.ITypeProvider,System.CodeDom.CodeExpression)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.Design.RuleConditionDialog" /> class with the specified activity type, the type provider, and the expression.</summary>
      <param name="activityType">The type of the object that this condition is executed against. Normally it is the workflow, but can be any valid type.</param>
      <param name="typeProvider">An optional <see cref="T:System.Workflow.ComponentModel.Compiler.ITypeProvider" /> implementation that is used to determine what types are available in the condition. If one is not specified, only types in the assembly specified by <paramref name="activityType" /> and any assemblies it references is available.</param>
      <param name="expression">The initial <see cref="T:System.CodeDom.CodeExpression" /> to be displayed.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.Design.RuleConditionDialog.#ctor(System.Workflow.ComponentModel.Activity,System.CodeDom.CodeExpression)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.Design.RuleConditionDialog" /> class.</summary>
      <param name="activity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> that this condition is executed against. Typically it is the workflow, but it can be any valid activity.</param>
      <param name="expression">The initial <see cref="T:System.CodeDom.CodeExpression" /> to be displayed.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.Design.RuleConditionDialog.Dispose(System.Boolean)">
      <summary>Releases all resources used by the <see cref="T:System.Workflow.Activities.Rules.Design.RuleConditionDialog" />.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Workflow.Activities.Rules.Design.RuleConditionDialog.Expression">
      <summary>Gets the <see cref="T:System.CodeDom.CodeExpression" /> as modified by the dialog box user.</summary>
      <returns>The <see cref="T:System.CodeDom.CodeExpression" /> as modified by the dialog box user.</returns>
    </member>
    <member name="T:System.Workflow.Activities.Rules.Design.RuleSetDialog">
      <summary>This dialog is normally used by <see cref="T:System.Workflow.Activities.PolicyActivity" /> to edit rule sets. However, if you want to use a rule set outside of this activity (for example, edit a rule set for use outside of a workflow), you can use this dialog to perform the editing of the rule set.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.Design.RuleSetDialog.#ctor(System.Type,System.Workflow.ComponentModel.Compiler.ITypeProvider,System.Workflow.Activities.Rules.RuleSet)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.Design.RuleSetDialog" /> class.</summary>
      <param name="activityType">The type of the object that this condition is executed against. Normally it is the workflow, but can be any valid type.</param>
      <param name="typeProvider">An optional <see cref="T:System.Workflow.ComponentModel.Compiler.ITypeProvider" /> implementation that is used to determine what Types are available in the condition. If one is not specified, only types in the assembly specified by <paramref name="activityType" /> and any assemblies it references are available.</param>
      <param name="ruleSet">The initial <see cref="T:System.Workflow.Activies.Rules.RuleSet" /> to be displayed.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.Design.RuleSetDialog.#ctor(System.Workflow.ComponentModel.Activity,System.Workflow.Activities.Rules.RuleSet)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.Design.RuleSetDialog" /> class.</summary>
      <param name="activity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> that this <see cref="T:System.Workflow.Activies.Rules.RuleSet" /> is executed against. Typically it is the workflow (as used by <see cref="T:System.Workflow.Activities.PolicyActivity" />), but it can be any valid activity.</param>
      <param name="ruleSet">The initial <see cref="T:System.Workflow.Activies.Rules.RuleSet" /> to be displayed.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.Design.RuleSetDialog.Dispose(System.Boolean)">
      <summary>Releases all resources used by the <see cref="T:System.Workflow.Activities.Rules.Design.RuleSetDialog" />.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.Design.RuleSetDialog.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
      <summary>Processes a command key.</summary>
      <returns>true if the keystroke was processed and accessed by the control; false to allow further processing.</returns>
      <param name="msg">A <see cref="T:System.Windows.Forms.Message" />, passed by reference that represents the Win32 message to process.</param>
      <param name="keyData">One of the <see cref="T:System.Windows.Forms.Keys" /> values that represents the key to process.</param>
    </member>
    <member name="P:System.Workflow.Activities.Rules.Design.RuleSetDialog.RuleSet">
      <summary>Gets the <see cref="T:System.Workflow.Activies.Rules.RuleSet" /> as confirmed by the dialog box user.</summary>
      <returns>The <see cref="T:System.Workflow.Activies.Rules.RuleSet" /> as confirmed by the dialog box user.</returns>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\System.WorkflowServices.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.WorkflowServices</name>
  </assembly>
  <members>
    <member name="T:System.ServiceModel.WorkflowServiceHost">
      <summary>Provides host for workflow-based services.</summary>
    </member>
    <member name="M:System.ServiceModel.WorkflowServiceHost.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.WorkflowServiceHost" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.WorkflowServiceHost.#ctor(System.IO.Stream,System.IO.Stream,System.Uri[])">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.WorkflowServiceHost" /> class using a byte stream that contains the workflow definition, a byte stream that contains the workflow rules definition, and the base addresses of the service specified.</summary>
      <param name="workflowDefinition">
        <see cref="T:System.IO.Stream" /> that contains the workflow definition.</param>
      <param name="ruleDefinition">
        <see cref="T:System.IO.Stream" /> that contains the workflow rules definition.</param>
      <param name="baseAddress">An array of type <see cref="T:System.Uri" /> that contains the base addresses for the hosted service.</param>
    </member>
    <member name="M:System.ServiceModel.WorkflowServiceHost.#ctor(System.IO.Stream,System.IO.Stream,System.Workflow.ComponentModel.Compiler.ITypeProvider,System.Uri[])">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.WorkflowServiceHost" /> class using a byte stream that contains the workflow definition, a byte stream that contains the workflow rules definition, a type provider for custom activity types, and the base addresses of the service specified.</summary>
      <param name="workflowDefinition">
        <see cref="T:System.IO.Stream" /> that contains the workflow definition.</param>
      <param name="ruleDefinition">
        <see cref="T:System.IO.Stream" /> that contains the workflow rules definition.</param>
      <param name="typeProvider">A type provider that implements the <see cref="T:System.Workflow.ComponentModel.Compiler.ITypeProvider" /> interface.</param>
      <param name="baseAddress">An array of type <see cref="T:System.Uri" /> that contains the base addresses for the hosted service.</param>
    </member>
    <member name="M:System.ServiceModel.WorkflowServiceHost.#ctor(System.IO.Stream,System.Uri[])">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.WorkflowServiceHost" /> class using a byte stream that contains the workflow definition and the base addresses of the service specified.</summary>
      <param name="workflowDefinition">
        <see cref="T:System.IO.Stream" /> that contains the workflow definition.</param>
      <param name="baseAddress">An array of type <see cref="T:System.Uri" /> that contains the base addresses for the hosted service.</param>
    </member>
    <member name="M:System.ServiceModel.WorkflowServiceHost.#ctor(System.String,System.String,System.Uri[])">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.WorkflowServiceHost" /> class using a path to the workflow definition, a path to the workflow rules definition, and the base addresses of the service specified.</summary>
      <param name="workflowDefinitionPath">A string that contains the path to the workflow definition file.</param>
      <param name="ruleDefinitionPath">A string that contains the path to the workflow rules definition file.</param>
      <param name="baseAddress">An array of type <see cref="T:System.Uri" /> that contains the base addresses for the hosted service.</param>
    </member>
    <member name="M:System.ServiceModel.WorkflowServiceHost.#ctor(System.String,System.String,System.Workflow.ComponentModel.Compiler.ITypeProvider,System.Uri[])">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.WorkflowServiceHost" /> class using a path to the workflow definition, a path to the workflow rules definition, a type provider for custom activity types, and the base addresses of the service specified.</summary>
      <param name="workflowDefinitionPath">A string that contains the path to the workflow definition file.</param>
      <param name="ruleDefinitionPath">A string that contains the path to the workflow rules definition file.</param>
      <param name="typeProvider">A type provider that implements the <see cref="T:System.Workflow.ComponentModel.Compiler.ITypeProvider" /> interface.</param>
      <param name="baseAddress">An array of type <see cref="T:System.Uri" /> that contains the base addresses for the hosted service.</param>
    </member>
    <member name="M:System.ServiceModel.WorkflowServiceHost.#ctor(System.String,System.Uri[])">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.WorkflowServiceHost" /> class using a path to the workflow definition and the base addresses of the service specified.</summary>
      <param name="workflowDefinitionPath">A string that contains the path to the workflow definition file.</param>
      <param name="baseAddress">An array of type <see cref="T:System.Uri" /> that contains the base addresses for the hosted service.</param>
    </member>
    <member name="M:System.ServiceModel.WorkflowServiceHost.#ctor(System.Type,System.Uri[])">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.WorkflowServiceHost" /> class using a workflow type and the base addresses of the service specified.</summary>
      <param name="workflowType">The <see cref="T:System.Type" /> of the workflow instance.</param>
      <param name="baseAddress">An array of type <see cref="T:System.Uri" /> that contains the base addresses for the hosted service.</param>
    </member>
    <member name="M:System.ServiceModel.WorkflowServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String)">
      <summary>Adds a service endpoint for the workflow service using the specified contract, binding, and endpoint address.</summary>
      <returns>The <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> added to the workflow service.</returns>
      <param name="implementedContract">The <see cref="T:System.Type" /> of contract for the endpoint added.</param>
      <param name="binding">The <see cref="T:System.ServiceModel.Channels.Binding" /> for the endpoint added.</param>
      <param name="address">The address for the endpoint added.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="implementedContract" /> is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.ServiceModel.ServiceContractAttribute" /> not specified for <paramref name="implementedContract" />.</exception>
      <exception cref="T:System.InvalidOperationException">The workflow service does not implement <paramref name="implementedContract" />.</exception>
    </member>
    <member name="M:System.ServiceModel.WorkflowServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String,System.Uri)">
      <summary>Adds a service endpoint to the workflow service with a specified contract, a binding, an endpoint address, and a URI on which the service listens. </summary>
      <returns>The <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> added to the workflow service.</returns>
      <param name="implementedContract">The <see cref="T:System.Type" /> of contract for the endpoint added.</param>
      <param name="binding">The <see cref="T:System.ServiceModel.Channels.Binding" /> for the endpoint added.</param>
      <param name="address">The endpoint address for the service.</param>
      <param name="listenUri">The <see cref="T:System.Uri" /> on which the service endpoints can listen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="implementedContract" /> is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The workflow service does not implement <paramref name="implementedContract" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.ServiceModel.ServiceContractAttribute" /> not specified for <paramref name="implementedContract" />.</exception>
    </member>
    <member name="M:System.ServiceModel.WorkflowServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.Uri)">
      <summary>Adds a service endpoint to the workflow service with a specified contract, binding, and URI that contains the endpoint address.</summary>
      <returns>The <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> added to the workflow service.</returns>
      <param name="implementedContract">The <see cref="T:System.Type" /> of contract for the endpoint added.</param>
      <param name="binding">The <see cref="T:System.ServiceModel.Channels.Binding" /> for the endpoint added.</param>
      <param name="address">The <see cref="T:System.Uri" /> that contains the address for the endpoint added.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="implementedContract" /> is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.ServiceModel.ServiceContractAttribute" /> not specified for <paramref name="implementedContract" />.</exception>
      <exception cref="T:System.InvalidOperationException">The workflow service does not implement <paramref name="implementedContract" />.</exception>
    </member>
    <member name="M:System.ServiceModel.WorkflowServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.Uri,System.Uri)">
      <summary>Adds a service endpoint to the workflow service with a specified contract, a binding, a URI that contains the endpoint address, and a URI on which the service listens. </summary>
      <returns>The <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> added to the workflow service.</returns>
      <param name="implementedContract">The <see cref="T:System.Type" /> of contract for the endpoint added.</param>
      <param name="binding">The <see cref="T:System.ServiceModel.Channels.Binding" /> for the endpoint added.</param>
      <param name="address">The <see cref="T:System.Uri" /> that contains the address for the endpoint added.</param>
      <param name="listenUri">The <see cref="T:System.Uri" /> on which the service endpoints can listen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="implementedContract" /> is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The workflow service does not implement <paramref name="implementedContract" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.ServiceModel.ServiceContractAttribute" /> not specified for <paramref name="implementedContract" />.</exception>
    </member>
    <member name="M:System.ServiceModel.WorkflowServiceHost.CreateDescription(System.Collections.Generic.IDictionary{System.String,System.ServiceModel.Description.ContractDescription}@)">
      <summary>Creates a description of the workflow service.</summary>
      <returns>A <see cref="T:System.ServiceModel.Description.ServiceDescription" /> of the workflow service.</returns>
      <param name="implementedContracts">When this method returns, the <see cref="T:System.Collections.Generic.IDictionary`2" /> object contains the keyed-contracts of the hosted service that have been implemented. </param>
    </member>
    <member name="M:System.ServiceModel.WorkflowServiceHost.OnClosing">
      <summary>This method is called before the <see cref="T:System.ServiceModel.WorkflowServiceHost" /> is put into a closing state.</summary>
    </member>
    <member name="T:System.ServiceModel.Activation.WorkflowServiceHostFactory">
      <summary>Factory that provides instances of <see cref="T:System.ServiceModel.WorkflowServiceHost" /> in managed hosting environments where the host instance is created dynamically in response to incoming messages.</summary>
    </member>
    <member name="M:System.ServiceModel.Activation.WorkflowServiceHostFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activation.WorkflowServiceHostFactory" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Activation.WorkflowServiceHostFactory.CreateServiceHost(System.String,System.Uri[])">
      <summary>Creates a <see cref="T:System.ServiceModel.WorkflowServiceHost" /> from a string that contains either the file name of the workflow markup file or the type name of the workflow service type and the base address of the service specified.</summary>
      <returns>A <see cref="T:System.ServiceModel.ServiceHostBase" /> object associated with the workflow service. The default implementation returns a <see cref="T:System.ServiceModel.WorkflowServiceHost" /> object with the specified base addresses.</returns>
      <param name="constructorString">The file name of the workflow markup file that defines the workflow service or the type name of the workflow service type. </param>
      <param name="baseAddresses">An array of type <see cref="T:System.Uri" /> that contains the base addresses for the hosted service.</param>
    </member>
    <member name="T:System.ServiceModel.Activities.Description.WorkflowRuntimeEndpoint">
      <summary>The <see cref="T:System.Activities.DurableInstancing.SqlWorkflowInstanceStore" /> adds a default control endpoint using this class if the &lt;workflowInstanceControl&gt; sub-element in the &lt;sqlWorkflowInstanceStoreBehavior&gt; element is not specified explicitly.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Description.WorkflowRuntimeEndpoint.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.ServiceModel.Activities.Description.WorkflowRuntimeEndpoint" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Description.WorkflowRuntimeEndpoint.AddService(System.Object)">
      <summary>Adds the specified service to the list of run-time services supported by the workflow run-time instance.</summary>
      <param name="service">The service object that must be added to the list of run-time services.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.Description.WorkflowRuntimeEndpoint.GetService``1">
      <summary>Gets the service object that corresponds to the service type specified as a template parameter.</summary>
      <returns>The service object that corresponds to the service type.</returns>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.ServiceModel.Activities.Description.WorkflowRuntimeEndpoint.GetService(System.Type)">
      <summary>Gets the service object for the specified service type from the list of service objects.</summary>
      <returns>The service object for the specified service type.</returns>
      <param name="serviceType">The type of the service whose object must retrieved from the list of objects.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.Description.WorkflowRuntimeEndpoint.OnGetInstanceId(System.Object[],System.ServiceModel.OperationContext)">
      <summary>Gets the instance identifier based on the inputs and operation context passed as parameters.</summary>
      <returns>The instance identifier.</returns>
      <param name="inputs">The input objects.</param>
      <param name="operationContext">The operation context information.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.Description.WorkflowRuntimeEndpoint.OnResolveBookmark(System.Object[],System.ServiceModel.OperationContext,System.ServiceModel.Activities.WorkflowHostingResponseContext,System.Object@)">
      <summary>Resolves a bookmark.</summary>
      <returns>A bookmark.</returns>
      <param name="inputs">The input objects</param>
      <param name="operationContext">The operation context information.</param>
      <param name="responseContext">The response context information.</param>
      <param name="value">The value object.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.Description.WorkflowRuntimeEndpoint.RemoveService(System.Object)">
      <summary>Removes the specified service from the list of run-time services supported by the workflow run-time instance.</summary>
      <param name="service">The service object that must be removed from the list of run-time services supported.</param>
    </member>
    <member name="T:System.ServiceModel.Configuration.ExtendedWorkflowRuntimeServiceElementCollection">
      <summary>Represents the collection of configuration elements that represents extended services to be added to the workflow runtime engine.</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ExtendedWorkflowRuntimeServiceElementCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Configuration.ExtendedWorkflowRuntimeServiceElementCollection" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ExtendedWorkflowRuntimeServiceElementCollection.Remove(System.String)">
      <summary>Removes the configuration element with the specified key from this collection.</summary>
      <param name="key">The key of the configuration element to be removed.</param>
    </member>
    <member name="M:System.ServiceModel.Configuration.ExtendedWorkflowRuntimeServiceElementCollection.Remove(System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElement)">
      <summary>Removes the first occurrence of a specific configuration element from the collection.</summary>
      <param name="serviceSettings">The service configuration element to be removed.</param>
    </member>
    <member name="T:System.ServiceModel.Configuration.PersistenceProviderElement">
      <summary>Represents a persistence service configuration element that specifies the type of the persistence provider implementation to use, as well as the time-out to use for persistence operations. Additional attributes that appear in this element are passed into the constructor for the specified persistence provider.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ServiceModel.Configuration.PersistenceProviderElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Configuration.PersistenceProviderElement" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.ServiceModel.Configuration.PersistenceProviderElement.BehaviorType">
      <summary>Gets the type of behavior. </summary>
      <returns>A <see cref="T:System.Type" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ServiceModel.Configuration.PersistenceProviderElement.CreateBehavior">
      <summary>Creates a custom behavior based on the settings of this configuration element.</summary>
      <returns>A custom behavior based on the settings of this configuration element.</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.PersistenceProviderElement.IsModified">
      <summary>Indicates whether this configuration element has been modified since it was last saved or loaded.</summary>
      <returns>true if the element has been modified; otherwise, false.</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.PersistenceProviderElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)">
      <summary>Gets a value that indicates whether an unknown attribute is encountered during deserialization.</summary>
      <returns>true when an unknown attribute is encountered while deserializing; otherwise, false.</returns>
      <param name="name">The name of the unrecognized attribute.</param>
      <param name="value">The value of the unrecognized attribute.</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.PersistenceProviderElement.PersistenceOperationTimeout">
      <summary>Gets or sets the time-out used for persistence operations. </summary>
      <returns>A <see cref="T:System.Timespan" /> that specifies the time-out used for persistence operations. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.ServiceModel.Configuration.PersistenceProviderElement.PersistenceProviderArguments">
      <summary>Retrieves additional attributes of this <see cref="T:System.ServiceModel.Configuration.PersistenceProviderElement" />.</summary>
      <returns>A <see cref="T:System.Collections.Specialized.NameValueCollection" /> object that contains additional attributes of this <see cref="T:System.ServiceModel.Configuration.PersistenceProviderElement" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.PersistenceProviderElement.PostDeserialize">
      <summary>Called after deserialization.</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.PersistenceProviderElement.SerializeElement(System.Xml.XmlWriter,System.Boolean)">
      <summary>Writes the contents of this configuration element to the configuration file.</summary>
      <returns>true if any data was actually serialized; otherwise, false. </returns>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> that is used to write to the configuration file.</param>
      <param name="serializeCollectionKey">true to serialize only the collection key properties; otherwise, false.</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.PersistenceProviderElement.Type">
      <summary>Gets or sets the type of the persistence provider to be used by the service.</summary>
      <returns>A <see cref="T:System.Type" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ServiceModel.Configuration.PersistenceProviderElement.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
      <summary>Modifies this configuration element object to remove all values that should not be saved.</summary>
      <param name="sourceElement">A <see cref="T:System.Configuration.ConfigurationElement" /> at the current level containing a merged view of the properties.</param>
      <param name="parentElement">The parent <see cref="T:System.Configuration.ConfigurationElement" />, or null if this is the top level.</param>
      <param name="saveMode">A <see cref="T:System.Configuration.ConfigurationSaveMode" /> that determines which property values to include.</param>
    </member>
    <member name="T:System.ServiceModel.Configuration.WorkflowRuntimeElement">
      <summary>Represents a configuration element that specifies settings for an instance of <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> for hosting workflow-based  services.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ServiceModel.Configuration.WorkflowRuntimeElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Configuration.WorkflowRuntimeElement" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.ServiceModel.Configuration.WorkflowRuntimeElement.BehaviorType">
      <summary>Gets the type of this behavior element.</summary>
      <returns>A <see cref="T:System.Type" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.ServiceModel.Configuration.WorkflowRuntimeElement.CachedInstanceExpiration">
      <summary>Gets or sets a value that specifies the time that a cached instance will expire.</summary>
      <returns>A <see cref="T:System.Timespan" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.ServiceModel.Configuration.WorkflowRuntimeElement.CommonParameters">
      <summary>Gets the collection of common parameters used by services.</summary>
      <returns>A NameValueConfigurationCollection that contains common parameters used by services. The default is null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ServiceModel.Configuration.WorkflowRuntimeElement.CreateBehavior">
      <summary>Creates a custom behavior based on the settings of this configuration element.</summary>
      <returns>A custom behavior based on the settings of this configuration element.</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.WorkflowRuntimeElement.EnablePerformanceCounters">
      <summary>Gets or sets whether performance counters are enabled.</summary>
      <returns>true if performance counters are enabled; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.ServiceModel.Configuration.WorkflowRuntimeElement.Name">
      <summary>Gets or sets the name of the workflow runtime engine.</summary>
      <returns>A string that contains the name of the workflow runtime engine.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.ServiceModel.Configuration.WorkflowRuntimeElement.Properties">
      <summary>Gets a <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> instance that contains a collection of <see cref="T:System.Configuration.ConfigurationProperty" /> objects that can be attributes or <see cref="T:System.Configuration.ConfigurationElement" /> objects of this configuration element.</summary>
      <returns>A <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> instance that contains a collection of <see cref="T:System.Configuration.ConfigurationProperty" /> objects that can be attributes or <see cref="T:System.Configuration.ConfigurationElement" /> objects of this configuration element.</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.WorkflowRuntimeElement.Services">
      <summary>Gets the collection of services that will be added to the <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> engine.</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElementCollection" /> that contains the collection of services that will be added to the <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> engine.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.ServiceModel.Configuration.WorkflowRuntimeElement.ValidateOnCreate">
      <summary>Gets or sets a value that indicates whether validation will occur on creation of the workflow instance. </summary>
      <returns>true if validation will occur on creation; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.ServiceModel.Description.DurableOperationAttribute">
      <summary>Specifies the local execution behavior of a durable service method.</summary>
    </member>
    <member name="M:System.ServiceModel.Description.DurableOperationAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Description.DurableOperationAttribute" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Description.DurableOperationAttribute.AddBindingParameters(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>Not implemented in <see cref="T:System.ServiceModel.Description.DurableOperationAttribute" />.</summary>
      <param name="operationDescription">Not implemented.</param>
      <param name="bindingParameters">Not implemented.</param>
    </member>
    <member name="M:System.ServiceModel.Description.DurableOperationAttribute.ApplyClientBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.ClientOperation)">
      <summary>Not implemented in <see cref="T:System.ServiceModel.Description.DurableOperationAttribute" />.</summary>
      <param name="operationDescription">Not implemented.</param>
      <param name="clientOperation">Not implemented.</param>
    </member>
    <member name="M:System.ServiceModel.Description.DurableOperationAttribute.ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.DispatchOperation)">
      <summary>Implements the service-side behavior of the operation.</summary>
      <param name="operationDescription">The operation description modified to support <see cref="T:System.ServiceModel.Description.DurableOperationAttribute" /> properties.</param>
      <param name="dispatchOperation">The extensibility point to insert custom service modifications for this operation.</param>
    </member>
    <member name="P:System.ServiceModel.Description.DurableOperationAttribute.CanCreateInstance">
      <summary>Gets or sets a value that indicates whether a new service instance can be created if an activation message is received on this operation. The dispatcher considers messages without an attached instance ID to be activation messages.</summary>
      <returns>true if a new service instance can be created; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.DurableOperationAttribute.CompletesInstance">
      <summary>Gets or sets a value that indicates whether the service instance will be unloaded from memory and deleted from persistence once the operation has finished executing.</summary>
      <returns>true if the instance will be unloaded after the operation has finished executing; otherwise, false.</returns>
    </member>
    <member name="M:System.ServiceModel.Description.DurableOperationAttribute.Validate(System.ServiceModel.Description.OperationDescription)">
      <summary>Not implemented in <see cref="T:System.ServiceModel.Description.DurableOperationAttribute" />.</summary>
      <param name="operationDescription">Not implemented.</param>
    </member>
    <member name="T:System.ServiceModel.Description.DurableServiceAttribute">
      <summary>Specifies the internal execution behavior of a durable service contract implementation.</summary>
    </member>
    <member name="M:System.ServiceModel.Description.DurableServiceAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Description.DurableServiceAttribute" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Description.DurableServiceAttribute.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>Not implemented in <see cref="T:System.ServiceModel.Description.DurableServiceAttribute" />.</summary>
      <param name="serviceDescription">Not implemented.</param>
      <param name="serviceHostBase">Not implemented.</param>
      <param name="endpoints">Not implemented.</param>
      <param name="bindingParameters">Not implemented.</param>
    </member>
    <member name="M:System.ServiceModel.Description.DurableServiceAttribute.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>Customizes the service runtime to support durable service behavior properties, such as specifying a <see cref="T:System.ServiceModel.Persistence.PersistenceProvider" /> for the service.</summary>
      <param name="serviceDescription">The service description.</param>
      <param name="serviceHostBase">The service host.</param>
    </member>
    <member name="P:System.ServiceModel.Description.DurableServiceAttribute.SaveStateInOperationTransaction">
      <summary>Gets or sets a value that indicates whether the service instance state is persisted to the <see cref="T:System.ServiceModel.Persistence.PersistenceProvider" /> using the same transaction under which the operation is run.</summary>
      <returns>true if the service instance state is persisted using the same transaction; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.DurableServiceAttribute.UnknownExceptionAction">
      <summary>Gets or sets the <see cref="T:System.ServiceModel.Description.UnknownExceptionAction" /> enumeration value associated with the durable service.</summary>
      <returns>An <see cref="T:System.ServiceModel.Description.UnknownExceptionAction" /> enumeration value.</returns>
    </member>
    <member name="M:System.ServiceModel.Description.DurableServiceAttribute.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>Verifies that all durable operations on the service are set up correctly.</summary>
      <param name="serviceDescription">The service description.</param>
      <param name="serviceHostBase">The service host.</param>
    </member>
    <member name="T:System.ServiceModel.Description.PersistenceProviderBehavior">
      <summary>Defines the behavior for a <see cref="T:System.ServiceModel.Persistence.PersistenceProviderFactory" /> associated with a <see cref="T:System.ServiceModel.WorkflowServiceHost" />. </summary>
    </member>
    <member name="M:System.ServiceModel.Description.PersistenceProviderBehavior.#ctor(System.ServiceModel.Persistence.PersistenceProviderFactory)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Description.PersistenceProviderBehavior" /> class.</summary>
      <param name="providerFactory">The <see cref="T:System.ServiceModel.Persistence.PersistenceProviderFactory" /> associated with the behavior object.</param>
    </member>
    <member name="M:System.ServiceModel.Description.PersistenceProviderBehavior.#ctor(System.ServiceModel.Persistence.PersistenceProviderFactory,System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Description.PersistenceProviderBehavior" /> class.</summary>
      <param name="providerFactory">The <see cref="T:System.ServiceModel.Persistence.PersistenceProviderFactory" /> associated with the behavior object.</param>
      <param name="persistenceOperationTimeout">The time-out after which persistence operations performed by persistence providers configured with this object abort.</param>
    </member>
    <member name="M:System.ServiceModel.Description.PersistenceProviderBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>Not implemented in <see cref="T:System.ServiceModel.Description.PersistenceProviderBehavior" />.</summary>
      <param name="serviceDescription">Not implemented.</param>
      <param name="serviceHostBase">Not implemented.</param>
      <param name="endpoints">Not implemented.</param>
      <param name="bindingParameters">Not implemented.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ServiceModel.Description.PersistenceProviderBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>Not implemented in <see cref="T:System.ServiceModel.Description.PersistenceProviderBehavior" />.</summary>
      <param name="serviceDescription">Not implemented.</param>
      <param name="serviceHostBase">Not implemented.</param>
    </member>
    <member name="P:System.ServiceModel.Description.PersistenceProviderBehavior.PersistenceOperationTimeout">
      <summary>The timeout after which persistence operations performed by persistence providers configured with this object abort.</summary>
      <returns>The time-out.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.PersistenceProviderBehavior.PersistenceProviderFactory">
      <summary>The <see cref="T:System.ServiceModel.Persistence.PersistenceProviderFactory" /> associated with the behavior object.</summary>
      <returns>The provider factory.</returns>
    </member>
    <member name="M:System.ServiceModel.Description.PersistenceProviderBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>Not implemented in <see cref="T:System.ServiceModel.Description.PersistenceProviderBehavior" />.</summary>
      <param name="serviceDescription">Not implemented.</param>
      <param name="serviceHostBase">Not implemented.</param>
    </member>
    <member name="T:System.ServiceModel.Description.UnknownExceptionAction">
      <summary>Specifies how a durable service will handle an unknown exception.</summary>
    </member>
    <member name="F:System.ServiceModel.Description.UnknownExceptionAction.TerminateInstance">
      <summary>The service will close all channels and remove its state information from its persistence store.</summary>
    </member>
    <member name="F:System.ServiceModel.Description.UnknownExceptionAction.AbortInstance">
      <summary>The service will abruptly stop and leave existing state information in its persistence store. Any changes to instance state during the operation which threw the unknown exception will be lost.</summary>
    </member>
    <member name="T:System.ServiceModel.Description.WorkflowRuntimeBehavior">
      <summary>Defines the behavior for the <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> associated with a <see cref="T:System.ServiceModel.WorkflowServiceHost" />.</summary>
    </member>
    <member name="M:System.ServiceModel.Description.WorkflowRuntimeBehavior.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Description.WorkflowRuntimeBehavior" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Description.WorkflowRuntimeBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>Not implemented in <see cref="T:System.ServiceModel.Description.WorkflowRuntimeBehavior" />.</summary>
      <param name="serviceDescription">Not implemented.</param>
      <param name="serviceHostBase">Not implemented.</param>
      <param name="endpoints">Not implemented.</param>
      <param name="bindingParameters">Not implemented.</param>
    </member>
    <member name="M:System.ServiceModel.Description.WorkflowRuntimeBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>Configures the workflow service to support the workflow run-time behavior. </summary>
      <param name="serviceDescription">The service description.</param>
      <param name="serviceHostBase">The service host.</param>
    </member>
    <member name="P:System.ServiceModel.Description.WorkflowRuntimeBehavior.CachedInstanceExpiration">
      <summary>Gets or sets a value that indicates how long a workflow instance stays in-memory in the idle state before it is forcibly removed from memory.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> object indicating how long a workflow instance stays in-memory in the idle state before it is forcibly removed from memory.</returns>
    </member>
    <member name="M:System.ServiceModel.Description.WorkflowRuntimeBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>Verifies the scheduling service used for workflow services has been added to the <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> object and that the <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> object has not started before the call to <see cref="Overload:System.ServiceModel.Channels.CommunicationObject.Open" />.</summary>
      <param name="serviceDescription">The service description.</param>
      <param name="serviceHostBase">The service host.</param>
      <exception cref="T:System.InvalidOperationException">The wrong <see cref="T:System.Workflow.Runtime.Hosting.WorkflowSchedulerService" /> is registered.</exception>
    </member>
    <member name="P:System.ServiceModel.Description.WorkflowRuntimeBehavior.WorkflowRuntime">
      <summary>Gets the <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> associated with a <see cref="T:System.ServiceModel.WorkflowServiceHost" /> instance.</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> object.</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.DurableOperationContext">
      <summary>Provides a set of static methods to gain access to related information and functionality.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.DurableOperationContext.AbortInstance">
      <summary>Purges the current durable service instance from memory after the operation has completed.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.DurableOperationContext.CompleteInstance">
      <summary>Unloads the durable service instance from memory and deletes it from persistence after the operation has completed.</summary>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DurableOperationContext.InstanceId">
      <summary>Gets the service ID of this service instance.</summary>
      <returns>A <see cref="T:System.Guid" /> that contains the ID of the service.</returns>
    </member>
    <member name="T:System.ServiceModel.Persistence.InstanceLockException">
      <summary>This exception is intended for use by classes that inherit from <see cref="T:System.ServiceModel.Persistence.LockingPersistenceProvider" /> when the operation cannot be performed because of the state of the instance lock.</summary>
    </member>
    <member name="M:System.ServiceModel.Persistence.InstanceLockException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.InstanceLockException" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Persistence.InstanceLockException.#ctor(System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.InstanceLockException" /> class.</summary>
      <param name="id">The unique identifier of the exception instance.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.InstanceLockException.#ctor(System.Guid,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.InstanceLockException" /> class.</summary>
      <param name="id">The unique identifier of the exception instance.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> instance that caused the current exception.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.InstanceLockException.#ctor(System.Guid,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.InstanceLockException" /> class.</summary>
      <param name="id">The unique identifier of the exception instance.</param>
      <param name="message">The message that describes the current exception.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.InstanceLockException.#ctor(System.Guid,System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.InstanceLockException" /> class.</summary>
      <param name="id">The unique identifier of the exception instance.</param>
      <param name="message">The message that describes the current exception.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> instance that caused the current exception.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.InstanceLockException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.InstanceLockException" /> class.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.InstanceLockException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.InstanceLockException" /> class.</summary>
      <param name="message">The message that describes the current exception.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.InstanceLockException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.InstanceLockException" /> class.</summary>
      <param name="message">The message that describes the current exception.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> instance that caused the current exception.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.InstanceLockException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception. </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="P:System.ServiceModel.Persistence.InstanceLockException.InstanceId">
      <summary>The unique identifier of the exception instance.</summary>
      <returns>A <see cref="T:System.Guid" /> that contains the unique identifier of the exception instance.</returns>
    </member>
    <member name="T:System.ServiceModel.Persistence.InstanceNotFoundException">
      <summary>This exception is thrown under the following circumstances: an operation is performed on a durable service instance that has been marked for completion, or a persistence provider created by a <see cref="T:System.ServiceModel.Persistence.SqlPersistenceProviderFactory" /> attempts to lock, unlock, or otherwise process state data that is not found in the database.</summary>
    </member>
    <member name="M:System.ServiceModel.Persistence.InstanceNotFoundException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.InstanceNotFoundException" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Persistence.InstanceNotFoundException.#ctor(System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.InstanceNotFoundException" /> class.</summary>
      <param name="id">The unique identifier associated with this instance.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.InstanceNotFoundException.#ctor(System.Guid,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.InstanceNotFoundException" /> class.</summary>
      <param name="id">The unique identifier associated with this instance.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that caused the <see cref="T:System.ServiceModel.Persistence.InstanceNotFoundException" />.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.InstanceNotFoundException.#ctor(System.Guid,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.InstanceNotFoundException" /> class </summary>
      <param name="id">The unique identifier associated with this instance.</param>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.InstanceNotFoundException.#ctor(System.Guid,System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.InstanceNotFoundException" /> class </summary>
      <param name="id">The unique identifier associated with this instance.</param>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that caused the <see cref="T:System.ServiceModel.Persistence.InstanceNotFoundException" />.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.InstanceNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.InstanceNotFoundException" /> class.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" />  that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" />  that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.InstanceNotFoundException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.InstanceNotFoundException" /> class.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.InstanceNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.InstanceNotFoundException" /> class.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that caused the <see cref="T:System.ServiceModel.Persistence.InstanceNotFoundException" />.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.InstanceNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:system.runtime.serialization.SerializationInfo" /> with information about the exception, including the exception <see cref="P:System.ServiceModel.Persistence.InstanceNotFoundException.InstanceId" />.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" />  that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" />  that contains contextual information about the source or destination.</param>
    </member>
    <member name="P:System.ServiceModel.Persistence.InstanceNotFoundException.InstanceId">
      <summary>The unique identifier associated with this instance.</summary>
      <returns>A <see cref="T:System.Guid" /> that contains the unique identifier of the exception instance.</returns>
    </member>
    <member name="T:System.ServiceModel.Persistence.LockingPersistenceProvider">
      <summary>The abstract base class from which all durable service persistence providers that implement locking are derived.</summary>
    </member>
    <member name="M:System.ServiceModel.Persistence.LockingPersistenceProvider.#ctor(System.Guid)">
      <summary>When implemented in a derived class, creates a new instance of the <see cref="T:System.ServiceModel.Persistence.LockingPersistenceProvider" /> class, configured with the specified identity value.</summary>
      <param name="id">The unique identifier to be associated with this persistence provider instance.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.LockingPersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to create instance state information in the persistence store using the parameters. This method does not unlock the instance after saving the state information.</summary>
      <returns>The status of an asynchronous operation.</returns>
      <param name="instance">The instance whose state information is saved into the persistence store.</param>
      <param name="timeout">The interval in which the operation must be completed without timing out.</param>
      <param name="callback">The delegate that receives the notification when the operation completes.</param>
      <param name="state">The state information associated with the asynchronous operation.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.LockingPersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.Boolean,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to create instance state information in the persistence store using the parameters. This method unlocks the instance after saving the instance state if the value of the <paramref name="unlockInstance" /> parameter is true.</summary>
      <returns>The status of an asynchronous operation.</returns>
      <param name="instance">The instance whose state information is saved into the persistence store.</param>
      <param name="timeout">The interval in which the operation must be completed without timing out.</param>
      <param name="unlockInstance">true if the instance must be unlocked in the persistence store; otherwise false.</param>
      <param name="callback">The delegate that receives the notification when the operation completes.</param>
      <param name="state">The state information associated with the asynchronous operation.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.LockingPersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to load an instance based on state information in the persistence store using the parameters. This method does not lock the instance. </summary>
      <returns>The status of an asynchronous operation.</returns>
      <param name="timeout">The interval in which the operation must be completed without timing out.</param>
      <param name="callback">The delegate that receives the notification when the operation completes.</param>
      <param name="state">The state information associated with the asynchronous operation.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.LockingPersistenceProvider.BeginLoad(System.TimeSpan,System.Boolean,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to load an instance based on state information in the persistence store using the parameters. This method locks the instance after loading the instance state if the value of the <paramref name="lockInstance" /> parameter is true.</summary>
      <returns>The status of an asynchronous operation.</returns>
      <param name="timeout">An interval in which the operation must be completed before timing out.</param>
      <param name="lockInstance">true if the instance must be locked; otherwise false.</param>
      <param name="callback">The delegate that receives the notification when the operation completes.</param>
      <param name="state">The state information associated with the asynchronous operation.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.LockingPersistenceProvider.BeginLoadIfChanged(System.TimeSpan,System.Object,System.AsyncCallback,System.Object)">
      <summary>When implemented in a derived class, represents the beginning of the LoadIfChanged phase. The LoadIfChanged phase occurs when state data is loaded into the persistence provider from the persistence store and the state data in the persistence store has been changed. This method call does not lock the instance in the persistence store.</summary>
      <returns>The status of an asynchronous operation.</returns>
      <param name="timeout">The time period after which the persistence provider aborts this operation.</param>
      <param name="instanceToken">The token returned by a previous Create or Update method that represents the current state held by the caller.</param>
      <param name="callback">The method to be called when the operation is completed.</param>
      <param name="state">A user-provided object that distinguishes this particular asynchronous operation from other operations.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.LockingPersistenceProvider.BeginLoadIfChanged(System.TimeSpan,System.Object,System.Boolean,System.AsyncCallback,System.Object)">
      <summary>When implemented in a derived class, represents the beginning of the LoadIfChanged phase. The LoadIfChanged phase occurs when state data is loaded into the persistence provider from the persistence store and the state data in the persistence store has been changed. This method call lets you specify whether you want to lock the instance in the persistence store.</summary>
      <returns>The status of an asynchronous operation.</returns>
      <param name="timeout">The time period after which the persistence provider aborts this operation.</param>
      <param name="instanceToken">The token returned by a previous Create or Update method that represents the current state held by the caller.</param>
      <param name="lockInstance">true if the instance is locked in the persistence store; otherwise false.</param>
      <param name="callback">The method to be called when the operation is completed.</param>
      <param name="state">A user-provided object that distinguishes this particular asynchronous operation from other operations.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.LockingPersistenceProvider.BeginUnlock(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to unlock an instance in the persistence store.</summary>
      <returns>The status of an asynchronous operation.</returns>
      <param name="timeout">An interval in which the operation must be completed before timing out.</param>
      <param name="callback">The delegate that receives the notification when the operation completes.</param>
      <param name="state">The state information associated with the asynchronous operation.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.LockingPersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to update instance state information in the persistence store using the parameters passed. This operation does not unlock the instance in the instance store.</summary>
      <returns>The status of an asynchronous operation.</returns>
      <param name="instance">The instance whose state information is being updated in the persistence store.</param>
      <param name="timeout">The interval in which the operation must complete without timing out.</param>
      <param name="callback">The delegate that receives the notification when the operation is completed.</param>
      <param name="state">The state information about the asynchronous operation.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.LockingPersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.Boolean,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to update instance state information in the persistence store using the parameters passed. This operation locks the instance in the persistence store if the value of the <paramref name="unlockInstance" /> parameter is true.</summary>
      <returns>The status of an asynchronous operation.</returns>
      <param name="instance">The instance whose state information is being updated in the persistence store.</param>
      <param name="timeout">The interval in which the operation must complete without timing out.</param>
      <param name="unlockInstance">true if the instance must be locked after the instance state is updated in the persistence store; otherwise false.</param>
      <param name="callback">The delegate that receives the notification when the operation completes.</param>
      <param name="state">The state information about the asynchronous operation.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.LockingPersistenceProvider.Create(System.Object,System.TimeSpan)">
      <summary>Creates instance state information in the persistence store using parameters passed into the method. This method does not unlock the instance in the persistence store after saving the instance state.</summary>
      <returns>The state information.</returns>
      <param name="instance">The instance object whose state information must be saved into the persistence store.</param>
      <param name="timeout">The interval in which the operation must complete before timing out.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.LockingPersistenceProvider.Create(System.Object,System.TimeSpan,System.Boolean)">
      <summary>This method creates instance state information in the persistence store using parameters passed into the method. The method unlocks the instance in the instance store if the value of the <paramref name="unlockInstance" /> parameter is true.</summary>
      <returns>The state information.</returns>
      <param name="instance">The instance object whose state information is saved into the persistence store.</param>
      <param name="timeout">The interval within which the operation must complete before timing out.</param>
      <param name="unlockInstance">true if the instance must be unlocked in the persistence store; otherwise false.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.LockingPersistenceProvider.EndUnlock(System.IAsyncResult)">
      <summary>Ends the asynchronous operation to unlock an instance in the persistence store.</summary>
      <param name="result">The result returned by the unlock operation.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.LockingPersistenceProvider.Load(System.TimeSpan)">
      <summary>Loads service state information from the persistence store without locking the instance.</summary>
      <returns>The service state information.</returns>
      <param name="timeout">The time period after which the persistence provider aborts this attempt.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.LockingPersistenceProvider.Load(System.TimeSpan,System.Boolean)">
      <summary>Loads state information from the persistence store after locking the instance.</summary>
      <returns>The state information.</returns>
      <param name="timeout">The period after which the persistence provider aborts this operation.</param>
      <param name="lockInstance">true if the instance should be locked; otherwise false.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.LockingPersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Boolean,System.Object@)">
      <summary>Loads the instance state information from the persistence store if the state information has been changed since the last time the information was loaded by the caller. This method also lets the caller specify whether to lock the instance in the persistence store.</summary>
      <returns>true if the instance should be locked in the persistence store at the end of this operation; otherwise false.</returns>
      <param name="timeout">The time period after which the persistence provider aborts this operation.</param>
      <param name="instanceToken">The token returned by the previous Create or Update method calls, which represents the current state held by the caller.</param>
      <param name="lockInstance">true if the instance should be locked in the persistence store at the end of this operation; otherwise false.</param>
      <param name="instance">The instance state information.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.LockingPersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)">
      <summary>Loads the instance state information from the persistence store if the state information has been changed since the last time the information was loaded by the caller. This method does not lock the instance in the persistence store.</summary>
      <returns>true if the instance should be locked in the persistence store at the end of this operation; otherwise false.</returns>
      <param name="timeout">The time period after which the persistence provider aborts this operation.</param>
      <param name="instanceToken">The token returned by the previous Create or Update method calls, which represents the current state held by the caller.</param>
      <param name="instance">The actual instance state information.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.LockingPersistenceProvider.Unlock(System.TimeSpan)">
      <summary>Unlocks the instance whose ID is specified when constructing the <see cref="T:System.ServiceModel.Persistence.LockingPersistenceProvider" /> object in the persistence store.</summary>
      <param name="timeout">The time period after which the persistence provider aborts the operation.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.LockingPersistenceProvider.Update(System.Object,System.TimeSpan)">
      <summary>When implemented in a derived class, updates the instance state information in the persistence store. This method does not unlock the instance after updating the instance state information in the persistence store.</summary>
      <returns>The instance state information.</returns>
      <param name="instance">The instance state information.</param>
      <param name="timeout">The time period after which the persistence provider aborts the operation.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.LockingPersistenceProvider.Update(System.Object,System.TimeSpan,System.Boolean)">
      <summary>When implemented in a derived class, updates the instance state information in the persistence store. This method does not unlock the instance after updating the instance state information in the persistence store.</summary>
      <returns>The instance state information.</returns>
      <param name="instance">The instance state information.</param>
      <param name="timeout">The time period after which the persistence provider aborts the operation.</param>
      <param name="unlockInstance">true if the instance is unlocked after the instance state information is updated; otherwise false.</param>
    </member>
    <member name="T:System.ServiceModel.Persistence.PersistenceException">
      <summary>This exception is thrown by a <see cref="T:System.ServiceModel.Persistence.SqlPersistenceProviderFactory" /> when general connectivity errors are encountered. </summary>
    </member>
    <member name="M:System.ServiceModel.Persistence.PersistenceException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.PersistenceException" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Persistence.PersistenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.PersistenceException" /> class.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.PersistenceException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.PersistenceException" /> class.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.PersistenceException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.PersistenceException" /> class.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that caused the <see cref="T:System.ServiceModel.Persistence.PersistenceException" />. </param>
    </member>
    <member name="T:System.ServiceModel.Persistence.PersistenceProvider">
      <summary>The abstract base class from which all durable service persistence providers are derived. </summary>
    </member>
    <member name="M:System.ServiceModel.Persistence.PersistenceProvider.#ctor(System.Guid)">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.PersistenceProvider" /> class.</summary>
      <param name="id">The unique identifier of the service state data being saved.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.PersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>When implemented in a derived class, represents the beginning of the Create phase. The Create phase occurs when service instance records are first created in the persistence store.</summary>
      <returns>The state of the <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)" /> asynchronous method call.</returns>
      <param name="instance">The actual instance state.</param>
      <param name="timeout">The time period after which the persistence provider aborts this attempt.</param>
      <param name="callback">The method to be called when the operation is completed.</param>
      <param name="state">A user-provided object that distinguishes this particular asynchronous operation from other operations.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>When implemented in a derived class, represents the beginning of the Delete phase. The Delete phase occurs when service state data is permanently deleted from the persistence store.</summary>
      <returns>The state of the <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)" /> asynchronous method call.</returns>
      <param name="instance">The actual instance state.</param>
      <param name="timeout">The time period after which the persistence provider aborts this attempt.</param>
      <param name="callback">The method to be called when the operation is completed.</param>
      <param name="state">A user-provided object that distinguishes this particular asynchronous operation from other operations.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>When implemented in a derived class, represents the beginning of the Load phase. The Load phase occurs when state data is loaded into the persistence provider from the persistence store.</summary>
      <returns>The state of the <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)" /> asynchronous method call.</returns>
      <param name="timeout">The time period after which the persistence provider aborts this attempt.</param>
      <param name="callback">The method to be called when the operation is completed.</param>
      <param name="state">A user-provided object that distinguishes this particular asynchronous operation from other operations.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged(System.TimeSpan,System.Object,System.AsyncCallback,System.Object)">
      <summary>When implemented in a derived class, represents the beginning of the LoadIfChanged phase. The LoadIfChanged phase occurs when state data is loaded into the persistence provider from the persistence store, and the state data in the persistence store has been changed.</summary>
      <returns>The state of the <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged(System.TimeSpan,System.Object,System.AsyncCallback,System.Object)" /> asynchronous method call.</returns>
      <param name="timeout">The time period after which the persistence provider aborts this attempt.</param>
      <param name="instanceToken">The token returned by a previous <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)" /> or <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)" /> that represents the current state held by the caller.</param>
      <param name="callback">The method to be called when the operation is completed.</param>
      <param name="state">A user-provided object that distinguishes this particular asynchronous operation from other operations.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>When implemented in a derived class, represents the beginning of the Update phase. The Update phase occurs when service state data is updated in the persistence store.</summary>
      <returns>The state of the <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)" /> asynchronous method call. </returns>
      <param name="instance">The actual instance state.</param>
      <param name="timeout">The time period after which the persistence provider aborts this attempt.</param>
      <param name="callback">The method to be called when the operation is completed.</param>
      <param name="state">A user-provided object that distinguishes this particular asynchronous operation from other operations.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)">
      <summary>When implemented in a derived class, creates a service state record in the persistence store.</summary>
      <returns>The instance token corresponding to the state just saved. This can be passed to <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)" /> to determine whether the state in the persistence store differs from the state when Create was called.</returns>
      <param name="instance">The actual instance state.</param>
      <param name="timeout">The time period after which the persistence provider aborts this attempt.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.PersistenceProvider.Delete(System.Object,System.TimeSpan)">
      <summary>When implemented in a derived class, permanently deletes service state information from the persistence store.</summary>
      <param name="instance">The actual instance state.</param>
      <param name="timeout">The time period after which the persistence provider aborts this attempt.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.PersistenceProvider.EndCreate(System.IAsyncResult)">
      <summary>When implemented in a derived class, represents the end of the Create phase. The Create phase occurs when service state records are first created in the persistence store.</summary>
      <returns>The instance token corresponding to the state just saved. This can be passed to <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)" /> to determine whether the state in the persistence store differs from the state when Create was called.</returns>
      <param name="result">A reference to the result of the operation.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.PersistenceProvider.EndDelete(System.IAsyncResult)">
      <summary>When implemented in a derived class, represents the end of the Delete phase. The Delete phase occurs when state data is permanently deleted from the persistence store.</summary>
      <param name="result">A reference to the result of the operation.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.PersistenceProvider.EndLoad(System.IAsyncResult)">
      <summary>When implemented in a derived class, represents the end of the Load phase. The Load phase occurs when state data is loaded into the persistence provider from the persistence store.</summary>
      <returns>The service state information.</returns>
      <param name="result">A reference to the result of the operation.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.PersistenceProvider.EndLoadIfChanged(System.IAsyncResult,System.Object@)">
      <summary>When implemented in a derived class, represents the end of the LoadIfChanged phase. The LoadIfChanged phase occurs when state data is loaded into the persistence provider from the persistence store, and the state data in the persistence store has been changed.</summary>
      <returns>true if the instance out parameter has been set with the latest copy from the persistence store; false if the locally cached state is already up-to-date.</returns>
      <param name="result">A reference to the result of the operation.</param>
      <param name="instance">The actual instance state.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.PersistenceProvider.EndUpdate(System.IAsyncResult)">
      <summary>Represents the end of the Update phase. The Update phase occurs when service state records are updated in the persistence store.</summary>
      <returns>The instance token corresponding to the state just saved. This can be passed to <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)" /> to determine whether the state in the persistence store differs from the state when Create was called.</returns>
      <param name="result">A reference to the result of the operation.</param>
    </member>
    <member name="P:System.ServiceModel.Persistence.PersistenceProvider.Id">
      <summary>Represents the <see cref="T:System.Guid" /> associated with this instance.</summary>
      <returns>The GUID associated with this instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Persistence.PersistenceProvider.Load(System.TimeSpan)">
      <summary>When implemented in a derived class, loads service state information from the persistence store.</summary>
      <returns>The loaded instance state.</returns>
      <param name="timeout">The time period after which the persistence provider aborts this attempt.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)">
      <summary>When implemented in a derived class, loads service state information from the persistence store if that data has been changed.</summary>
      <returns>true if the <paramref name="instance" />out parameter has been set with the latest copy from the persistence store; false if the locally cached state is already up to date.</returns>
      <param name="timeout">The time period after which the persistence provider aborts this attempt.</param>
      <param name="instanceToken">The token returned by a previous <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)" /> or <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)" />, which represents the current state held by the caller.</param>
      <param name="instance">The actual instance state.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)">
      <summary>When implemented in a derived class, updates service state records in the persistence store.</summary>
      <returns>The instance token corresponding to the state just saved. This can be passed to <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)" /> to determine whether the state in the persistence store differs from the state when Create was called.</returns>
      <param name="instance">The actual instance state.</param>
      <param name="timeout">The time period after which the persistence provider aborts this attempt.</param>
    </member>
    <member name="T:System.ServiceModel.Persistence.PersistenceProviderFactory">
      <summary>The abstract class from which all durable service persistence providers must inherit.</summary>
    </member>
    <member name="M:System.ServiceModel.Persistence.PersistenceProviderFactory.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.PersistenceProvider" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Persistence.PersistenceProviderFactory.CreateProvider(System.Guid)">
      <summary>When implemented in a derived class, initializes a new <see cref="T:System.ServiceModel.Persistence.PersistenceProvider" /> instance.</summary>
      <returns>A <see cref="T:System.ServiceModel.Persistence.PersistenceProvider" /> object.</returns>
      <param name="id">The unique identifier of the persistence provider being created.</param>
    </member>
    <member name="T:System.ServiceModel.Persistence.SqlPersistenceProviderFactory">
      <summary>A system-provided <see cref="T:System.ServiceModel.Persistence.PersistenceProviderFactory" /> implementation used to create a <see cref="T:System.ServiceModel.Persistence.LockingPersistenceProvider" /> instance that uses a SQL database to store persisted service state data.</summary>
    </member>
    <member name="M:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.#ctor(System.Collections.Specialized.NameValueCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.SqlPersistenceProviderFactory" /> class, configured with the specified parameter collection.</summary>
      <param name="parameters">The collection of parameters used by the new persistence provider factory. Valid parameters include lockTimeout, connectionStringName, and serializeAsText.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.SqlPersistenceProviderFactory" /> class, configured with the specified connection string.</summary>
      <param name="connectionString">The connection parameters for the new persistence provider instance.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.#ctor(System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.SqlPersistenceProviderFactory" /> class, configured with the specified connection string and serializeAsText parameters.</summary>
      <param name="connectionString">The connection parameters for the new persistence provider instance.</param>
      <param name="serializeAsText">Specifies whether data is serialized as text rather than binary.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.#ctor(System.String,System.Boolean,System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.SqlPersistenceProviderFactory" /> class, configured with the specified connection string, serializeAsText, and lockTimeout parameters.</summary>
      <param name="connectionString">The connection parameters for the new persistence provider factory instance.</param>
      <param name="serializeAsText">Specifies whether data is serialized as text rather than binary.</param>
      <param name="lockTimeout">The time-out for lock ownership. Locked instances are automatically unlocked after this time period. A time-out of TimeSpan.Zero specifies that no locking is used.</param>
    </member>
    <member name="P:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.ConnectionString">
      <summary>Gets the connection parameters for persistence provider instances created with this factory.</summary>
      <returns>The connection parameters for persistence provider instances created with this factory.</returns>
    </member>
    <member name="M:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.CreateProvider(System.Guid)">
      <summary>Initializes a new <see cref="T:System.ServiceModel.Persistence.LockingPersistenceProvider" /> instance that uses a SQL database as its persistence store.</summary>
      <returns>A newly-created <see cref="T:System.ServiceModel.Persistence.PersistenceProvider" />.</returns>
      <param name="id">The unique identifier of the persistence provider being created.</param>
    </member>
    <member name="P:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.DefaultCloseTimeout">
      <summary>Gets the default time-out value used when persistence providers created with this factory are closed.</summary>
      <returns>The default time-out value.</returns>
    </member>
    <member name="P:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.DefaultOpenTimeout">
      <summary>Gets the default time-out value used when persistence provider is opened.</summary>
      <returns>The default time-out value.</returns>
    </member>
    <member name="P:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.LockTimeout">
      <summary>The time-out for lock ownership used by persistence provider instances created by this instance. Locked instances are automatically unlocked after this time period. </summary>
      <returns>The time-out value for lock ownership.</returns>
    </member>
    <member name="M:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.OnAbort">
      <summary>Represents the Abort phase.</summary>
    </member>
    <member name="M:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Represents the beginning of the Close phase.</summary>
      <returns>The state of the <see cref="M:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" /> asynchronous method call.</returns>
      <param name="timeout">The time period after which the persistence provider aborts this attempt.</param>
      <param name="callback">The method to be called when the operation is completed.</param>
      <param name="state">A user-provided object that distinguishes this particular asynchronous operation from other operations.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Represents the beginning of the Open phase.</summary>
      <returns>The state of the <see cref="M:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" /> asynchronous method call.</returns>
      <param name="timeout">The time period after which the persistence provider aborts this attempt.</param>
      <param name="callback">The method to be called when the operation is completed.</param>
      <param name="state">A user-provided object that distinguishes this particular asynchronous operation from other operations.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.OnClose(System.TimeSpan)">
      <summary>Represents the Close phase.</summary>
      <param name="timeout">The time period after which the persistence provider aborts this attempt.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.OnEndClose(System.IAsyncResult)">
      <summary>Represents the end of the Close phase.</summary>
      <param name="result">A reference to the result of the operation.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.OnEndOpen(System.IAsyncResult)">
      <summary>Represents the end of the Open phase.</summary>
      <param name="result">A reference to the result of the operation.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.OnOpen(System.TimeSpan)">
      <summary>Represents the Open phase.</summary>
      <param name="timeout">The time period after which the persistence provider aborts this attempt.</param>
    </member>
    <member name="P:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.SerializeAsText">
      <summary>Specifies whether data is serialized as text rather than binary in persistence providers created with this factory.</summary>
      <returns>true if the service information is serialized as text; otherwise, false.</returns>
    </member>
    <member name="T:System.Workflow.Activities.ChannelToken">
      <summary>Used by a <see cref="T:System.Workflow.Activities.SendActivity" /> to associate itself with a client-side channel.</summary>
    </member>
    <member name="M:System.Workflow.Activities.ChannelToken.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.ChannelToken" /> class.</summary>
    </member>
    <member name="P:System.Workflow.Activities.ChannelToken.EndpointName">
      <summary>Gets or sets the custom address used to communicate with a service.</summary>
      <returns>A string representing the custom address used to communicate with a service.</returns>
    </member>
    <member name="P:System.Workflow.Activities.ChannelToken.Name">
      <summary>The name of this <see cref="T:System.Workflow.Activities.ChannelToken" /> instance.</summary>
      <returns>A string representing the name of this instance.</returns>
    </member>
    <member name="P:System.Workflow.Activities.ChannelToken.OwnerActivityName">
      <summary>The name of the <see cref="T:System.Workflow.ComponentModel.Activity" /> associated with this instance.</summary>
      <returns>A string representing the name of the activity associated with this instance.</returns>
    </member>
    <member name="T:System.Workflow.Activities.ContextToken">
      <summary>Represents a token that can be used to specify the context that should be used to correlate the exchange between a <see cref="T:System.Workflow.Activities.ReceiveActivity" /> activity and the client that the activity is communicating with.</summary>
    </member>
    <member name="M:System.Workflow.Activities.ContextToken.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.ContextToken" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.ContextToken.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.ContextToken" /> class.</summary>
      <param name="name">The name of the new instance.</param>
    </member>
    <member name="P:System.Workflow.Activities.ContextToken.Name">
      <summary>Gets or sets the name of this instance.</summary>
      <returns>A string that represents the name of this instance.</returns>
    </member>
    <member name="P:System.Workflow.Activities.ContextToken.OwnerActivityName">
      <summary>Gets or sets the name of the <see cref="T:System.Workflow.ComponentModel.Activity" /> associated with this context token.</summary>
      <returns>A string that represents the name of the activity associated with this context token.</returns>
    </member>
    <member name="F:System.Workflow.Activities.ContextToken.RootContextName">
      <summary>A constant string that represents the root context. The value of this string is "(RootContext)".</summary>
    </member>
    <member name="T:System.Workflow.Activities.OperationInfo">
      <summary>Represents the information for a contract operation defined in a workflow service.</summary>
    </member>
    <member name="M:System.Workflow.Activities.OperationInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.OperationInfo" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.OperationInfo.Clone">
      <summary>Creates a copy of the object.</summary>
      <returns>The copy of the <see cref="T:System.Workflow.Activities.OperationInfo" /> object.</returns>
    </member>
    <member name="P:System.Workflow.Activities.OperationInfo.ContractName">
      <summary>Gets or sets the full name of the contract that defines this operation.</summary>
      <returns>A string that represents the full name of the contract that defines the operation.</returns>
    </member>
    <member name="M:System.Workflow.Activities.OperationInfo.Equals(System.Object)">
      <summary>Determines whether two object instances are equal.</summary>
      <returns>true to indicate that the current <see cref="T:System.Workflow.Activities.OperationInfo" /> and <paramref name="obj" /> are equal; otherwise, false.</returns>
      <param name="obj">The object to compare with the current <see cref="T:System.Workflow.Activities.OperationInfo" />.</param>
    </member>
    <member name="M:System.Workflow.Activities.OperationInfo.GetHashCode">
      <summary>Returns a hash code for the current <see cref="T:System.Workflow.Activities.OperationInfo" />. </summary>
      <returns>A hash code for this instance.</returns>
    </member>
    <member name="P:System.Workflow.Activities.OperationInfo.HasProtectionLevel">
      <summary>Gets information on whether or not the operation has a defined <see cref="T:System.Net.Security.ProtectionLevel" />. </summary>
      <returns>A Boolean value indicating whether or not the operation has a <see cref="T:System.Net.Security.ProtectionLevel" /> associated with it.</returns>
    </member>
    <member name="P:System.Workflow.Activities.OperationInfo.IsOneWay">
      <summary>Gets or sets information on the operation to specify that communication between the service and a client is one-way.</summary>
      <returns>true if the operation supports one-way communication; otherwise, false. </returns>
    </member>
    <member name="P:System.Workflow.Activities.OperationInfo.Parameters">
      <summary>Gets a collection of <see cref="T:System.Workflow.Activities.OperationParameterInfo" /> objects that represents the parameter definitions used by the operation.</summary>
      <returns>A collection of <see cref="T:System.Workflow.Activities.OperationParameterInfo" /> objects that represents the parameter definitions used by the operation when called by a client.</returns>
    </member>
    <member name="P:System.Workflow.Activities.OperationInfo.ProtectionLevel">
      <summary>Gets or sets the <see cref="T:System.Net.Security.ProtectionLevel" /> of an operation.</summary>
      <returns>A <see cref="T:System.Net.Security.ProtectionLevel" /> object used by the operation.</returns>
    </member>
    <member name="M:System.Workflow.Activities.OperationInfo.ToString">
      <summary>Provides a string that represents this instance.</summary>
      <returns>A string that represents this instance.</returns>
    </member>
    <member name="T:System.Workflow.Activities.OperationInfoBase">
      <summary>The base class used for storing information for a contract operation defined in a workflow service.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.OperationInfoBase.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.Activities.OperationInfoBase" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.OperationInfoBase.Clone">
      <summary>When implemented in a derived class, creates a deep copy of the <see cref="T:System.Workflow.Activities.OperationInfoBase" /> instance.</summary>
      <returns>The copy of the <see cref="T:System.Workflow.Activities.OperationInfoBase" /> object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.OperationInfoBase.Equals(System.Object)">
      <summary>Determines if the specified <see cref="T:System.object" /> is equal to the current instance.</summary>
      <returns>True if <paramref name="obj" /> is equal, otherwise False.</returns>
      <param name="obj">The object to compare with the current instance.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.OperationInfoBase.GetContractFullName(System.IServiceProvider)">
      <summary>Returns the full name of the contract that implements this operation. </summary>
      <returns>A string representing the full name of the contract that implements this operation.</returns>
      <param name="provider">The service provider associated with this operation.</param>
    </member>
    <member name="M:System.Workflow.Activities.OperationInfoBase.GetContractType(System.IServiceProvider)">
      <summary>Returns the type of the contract associated with this operation.</summary>
      <returns>A <see cref="T:System.Type" /> object representing the type of the contract associated with this operation.</returns>
      <param name="provider">The service provider associated with this operation.</param>
    </member>
    <member name="M:System.Workflow.Activities.OperationInfoBase.GetHashCode">
      <summary>Generates a number corresponding to the value of the object to support the use of a hash table.</summary>
      <returns>An <see cref="T:System.Int32" /> representing the hash code value of the object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.OperationInfoBase.GetIsOneWay(System.IServiceProvider)">
      <summary>true if this operation is one-way, false if it is two-way.</summary>
      <returns>true if this operation is one-way, false if it is two-way.</returns>
      <param name="provider">The service provider associated with this operation.  </param>
    </member>
    <member name="M:System.Workflow.Activities.OperationInfoBase.GetMethodInfo(System.IServiceProvider)">
      <summary>Gets the <see cref="T:System.Reflection.MethodInfo" /> associated with the operation.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object containing details of the operation.</returns>
      <param name="provider">The service provider associated with this operation.  </param>
    </member>
    <member name="M:System.Workflow.Activities.OperationInfoBase.GetParameters(System.IServiceProvider)">
      <summary>Gets the collection of parameters associated with the operation.</summary>
      <returns>An <see cref="T:System.Workflow.Activities.OperationParameterInfoCollection" /> object containing details about the parameters of the operation.</returns>
      <param name="provider">The service provider associated with this operation.</param>
    </member>
    <member name="P:System.Workflow.Activities.OperationInfoBase.Name">
      <summary>When implemented in a derived class, gets or sets the name associated with this instance.</summary>
      <returns>A string representing the object's name.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.OperationInfoBase.PrincipalPermissionName">
      <summary>Gets or sets the user name associated with the security context of the operation.</summary>
      <returns>A string representing the user name associated with the security context of the operation.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.OperationInfoBase.PrincipalPermissionRole">
      <summary>Gets or sets the user role (e.g. Administrator) associated with the security context of the operation.</summary>
      <returns>A string representing the user role associated with the security context of the operation.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.OperationParameterInfo">
      <summary>Contains information about an operation parameter.  </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.OperationParameterInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.OperationParameterInfo" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.OperationParameterInfo.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.OperationParameterInfo" /> class.</summary>
      <param name="parameterName">Represents the parameter name.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.OperationParameterInfo.Attributes">
      <summary>Gets or sets the attributes of the associated operation parameter.</summary>
      <returns>The <see cref="T:System.Reflection.ParameterAttributes" /> of the associated operation parameter.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.Activities.OperationParameterInfo.AttributesProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.OperationParameterInfo.Attributes" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.OperationParameterInfo.Clone">
      <summary>Creates a shallow copy of the <see cref="T:System.Workflow.Activities.OperationParameterInfo" /> instance.</summary>
      <returns>The copy of the object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.OperationParameterInfo.Equals(System.Object)">
      <summary>Determines whether two <see cref="T:System.Object" /> instances are equal.</summary>
      <returns>true if <paramref name="obj" /> is equal, otherwise false.</returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current object.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.OperationParameterInfo.GetHashCode">
      <summary>Generates a number corresponding to the value of the object to support the use of a hash table.</summary>
      <returns>An <see cref="T:System.Int32" /> representing the hash code value of the object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.OperationParameterInfo.IsIn">
      <summary>true if the associated operation parameter is an In parameter; otherwise false.</summary>
      <returns>true if the associated operation parameter is an In parameter; otherwise false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.OperationParameterInfo.IsLcid">
      <summary>true if the associated operation parameter is a locale identifier; otherwise false.</summary>
      <returns>true if the associated operation parameter is a locale identifier; otherwise false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.OperationParameterInfo.IsOptional">
      <summary>true if the associated operation parameter is an optional parameter; otherwise false.</summary>
      <returns>true if the associated operation parameter is an optional parameter; otherwise false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.OperationParameterInfo.IsOut">
      <summary>true if the associated operation parameter is an Out parameter; otherwise false.</summary>
      <returns>true if the associated operation parameter is an Out parameter; otherwise false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.OperationParameterInfo.IsRetval">
      <summary>true if the associated operation parameter is the return value for the operation; otherwise false.</summary>
      <returns>true if the associated operation parameter is the return value for the operation; otherwise false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.OperationParameterInfo.Name">
      <summary>Gets or sets the name of the associated operation parameter.</summary>
      <returns>A string representing the name of the associated operation parameter.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.Activities.OperationParameterInfo.NameProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.OperationParameterInfo.Name" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.OperationParameterInfo.ParameterType">
      <summary>Gets or sets the type of the associated operation parameter.</summary>
      <returns>A <see cref="T:System.Type" /> object representing the type of the associated operation parameter.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.Activities.OperationParameterInfo.ParameterTypeProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.OperationParameterInfo.ParameterType" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.OperationParameterInfo.Position">
      <summary>Gets or sets the signature position of the associated operation parameter.</summary>
      <returns>An <see cref="T:System.Int32" /> representing the signature position of the associated operation parameter.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.Activities.OperationParameterInfo.PositionProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.OperationParameterInfo.Position" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.OperationParameterInfoCollection">
      <summary>A collection of <see cref="T:System.Workflow.Activities.OperationParameterInfo" /> objects.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.OperationParameterInfoCollection" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.#ctor(System.Workflow.Activities.OperationInfoBase)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.OperationParameterInfoCollection" /> class.</summary>
      <param name="owner">The <see cref="T:System.Workflow.Activities.OperationInfoBase" /> that uses this collection to define parameter information for the service operation that it represents.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.Add(System.Workflow.Activities.OperationParameterInfo)">
      <summary>Adds an <see cref="T:System.Workflow.Activities.OperationParameterInfo" /> to the end of the <see cref="T:System.Workflow.Activities.OperationParameterInfoCollection" />.</summary>
      <param name="item">The <see cref="T:System.Workflow.Activities.OperationParameterInfo" /> to be added.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.Clear">
      <summary>Removes all elements from the <see cref="T:System.Workflow.Activities.OperationParameterInfoCollection" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.Contains(System.Workflow.Activities.OperationParameterInfo)">
      <summary>Determines whether an element is in the <see cref="T:System.Workflow.Activities.OperationParameterInfoCollection" />.</summary>
      <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Workflow.Activities.OperationParameterInfoCollection" />, otherwise false.</returns>
      <param name="item">The item to search for. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.OperationParameterInfoCollection.Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Workflow.Activities.OperationParameterInfoCollection" />.</summary>
      <returns>An <see cref="T:System.Int32" /> representing the number of elements contained in the <see cref="T:System.Workflow.Activities.OperationParameterInfoCollection" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the <see cref="T:System.Workflow.Activities.OperationParameterInfoCollection" />. </summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can iterate through the <see cref="T:System.Workflow.Activities.OperationParameterInfoCollection" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.IndexOf(System.Workflow.Activities.OperationParameterInfo)">
      <summary>Returns the zero-based index of the first occurrence of an <see cref="T:System.Workflow.Activities.OperationParameterInfo" /> object in the <see cref="T:System.Workflow.Activities.OperationParameterInfoCollection" />.</summary>
      <returns>An <see cref="T:System.Int32" /> representing the zero-based index of the first occurrence of an <see cref="T:System.Workflow.Activities.OperationParameterInfo" /> object in the <see cref="T:System.Workflow.Activities.OperationParameterInfoCollection" />.</returns>
      <param name="item">The <see cref="T:System.Workflow.Activities.OperationParameterInfo" /> to locate in the <see cref="T:System.Workflow.Activities.OperationParameterInfoCollection" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.Insert(System.Int32,System.Workflow.Activities.OperationParameterInfo)">
      <summary>Inserts an <see cref="T:System.Workflow.Activities.OperationParameterInfo" /> into the <see cref="T:System.Workflow.Activities.OperationParameterInfoCollection" /> at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The <see cref="T:System.Workflow.Activities.OperationParameterInfo" /> to insert.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.OperationParameterInfoCollection.Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.  In C#, this property is the indexer for the <see cref="T:System.Workflow.Activities.OperationParameterInfoCollection" /> class.</summary>
      <returns>An <see cref="T:System.Workflow.Activities.OperationParameterInfo" /> object representing the element at the specified index.</returns>
      <param name="index">The array index of the requested element.</param>
    </member>
    <member name="P:System.Workflow.Activities.OperationParameterInfoCollection.Item(System.String)">
      <summary>Gets or sets the element with the specified key.</summary>
      <returns>An <see cref="T:System.Workflow.Activities.OperationParameterInfo" /> object representing the element with the specified key.</returns>
      <param name="key">The key value of the requested element.</param>
    </member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.Remove(System.Workflow.Activities.OperationParameterInfo)">
      <summary>Removes the first occurrence of a specific <see cref="T:System.Workflow.Activities.OperationParameterInfo" /> from the <see cref="T:System.Workflow.Activities.OperationParameterInfoCollection" />.</summary>
      <returns>true if the item was successfully removed, otherwise false.</returns>
      <param name="item">The <see cref="T:System.Workflow.Activities.OperationParameterInfo" /> to remove.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.RemoveAt(System.Int32)">
      <summary>Removes the element at the specified index of the <see cref="T:System.Workflow.Activities.OperationParameterInfoCollection" />.</summary>
      <param name="index">The zero-based index of the <see cref="T:System.Workflow.Activities.OperationParameterInfo" /> to remove.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.System#Collections#Generic#ICollection{T}#Add(System.Workflow.Activities.OperationParameterInfo)"></member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.System#Collections#Generic#ICollection{T}#Clear"></member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.System#Collections#Generic#ICollection{T}#Contains(System.Workflow.Activities.OperationParameterInfo)"></member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.System#Collections#Generic#ICollection{T}#CopyTo(System.Workflow.Activities.OperationParameterInfo[],System.Int32)"></member>
    <member name="P:System.Workflow.Activities.OperationParameterInfoCollection.System#Collections#Generic#ICollection{T}#Count"></member>
    <member name="P:System.Workflow.Activities.OperationParameterInfoCollection.System#Collections#Generic#ICollection{T}#IsReadOnly"></member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.System#Collections#Generic#ICollection{T}#Remove(System.Workflow.Activities.OperationParameterInfo)"></member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator"></member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.System#Collections#Generic#IList{T}#IndexOf(System.Workflow.Activities.OperationParameterInfo)"></member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.System#Collections#Generic#IList{T}#Insert(System.Int32,System.Workflow.Activities.OperationParameterInfo)"></member>
    <member name="P:System.Workflow.Activities.OperationParameterInfoCollection.System#Collections#Generic#IList{T}#Item(System.Int32)"></member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)"></member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)"></member>
    <member name="P:System.Workflow.Activities.OperationParameterInfoCollection.System#Collections#ICollection#IsSynchronized"></member>
    <member name="P:System.Workflow.Activities.OperationParameterInfoCollection.System#Collections#ICollection#SyncRoot"></member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.System#Collections#IEnumerable#GetEnumerator"></member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.System#Collections#IList#Add(System.Object)"></member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.System#Collections#IList#Clear"></member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.System#Collections#IList#Contains(System.Object)"></member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.System#Collections#IList#IndexOf(System.Object)"></member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.System#Collections#IList#Insert(System.Int32,System.Object)"></member>
    <member name="P:System.Workflow.Activities.OperationParameterInfoCollection.System#Collections#IList#IsFixedSize"></member>
    <member name="P:System.Workflow.Activities.OperationParameterInfoCollection.System#Collections#IList#IsReadOnly"></member>
    <member name="P:System.Workflow.Activities.OperationParameterInfoCollection.System#Collections#IList#Item(System.Int32)"></member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.System#Collections#IList#Remove(System.Object)"></member>
    <member name="T:System.Workflow.Activities.OperationValidationEventArgs">
      <summary>Provides data for the <see cref="E:System.Workflow.Activities.ReceiveActivity.OperationValidation" /> event.</summary>
    </member>
    <member name="M:System.Workflow.Activities.OperationValidationEventArgs.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Claims.ClaimSet})">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.OperationValidationEventArgs" /> class.</summary>
      <param name="claimSets">The collection of <see cref="T:System.IdentityModel.Claims.ClaimSet" /> objects that contains the claims that have been added to the operation's authorization context.</param>
    </member>
    <member name="P:System.Workflow.Activities.OperationValidationEventArgs.ClaimSets">
      <summary>The collection of <see cref="T:System.IdentityModel.Claims.ClaimSet" /> objects that contains the claims that have been added to the operation's authorization context.</summary>
      <returns>The collection of <see cref="T:System.IdentityModel.Claims.ClaimSet" /> objects that contains the claims that have been added to the operation's authorization context.</returns>
    </member>
    <member name="P:System.Workflow.Activities.OperationValidationEventArgs.IsValid">
      <summary>true if the operation is valid; false otherwise.</summary>
      <returns>true if the operation is valid; false otherwise.</returns>
    </member>
    <member name="T:System.Workflow.Activities.ReceiveActivity">
      <summary>Service activity that implements an operation defined by a  service contract.</summary>
    </member>
    <member name="M:System.Workflow.Activities.ReceiveActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.ReceiveActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.ReceiveActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.ReceiveActivity" /> class, initializing its <see cref="P:System.Workflow.ComponentModel.Activity.Name" /> property.</summary>
      <param name="name">The name to assign to the activity instance.</param>
    </member>
    <member name="P:System.Workflow.Activities.ReceiveActivity.CanCreateInstance">
      <summary>Gets or sets whether the operation causes a new workflow service instance to be created.</summary>
      <returns>true if a new workflow instance is created; otherwise, false. </returns>
    </member>
    <member name="P:System.Workflow.Activities.ReceiveActivity.Context">
      <summary>Gets the context information for this activity.</summary>
      <returns>A <see cref="T:System.Collections.Generic.IDictionary`2" /> object that contains context information for this activity.</returns>
    </member>
    <member name="P:System.Workflow.Activities.ReceiveActivity.ContextToken">
      <summary>Represents a token that can be used to specify the context that should be used to correlate the exchange between a <see cref="T:System.Workflow.Activities.ReceiveActivity" /> activity and the client that the activity is communicating with.</summary>
      <returns>A <see cref="T:System.Workflow.Activities.ContextToken" /> that can be used for correlation.</returns>
    </member>
    <member name="P:System.Workflow.Activities.ReceiveActivity.FaultMessage">
      <summary>The exception that is returned when a receive activity completes execution.</summary>
      <returns>A <see cref="T:System.ServiceModel.FaultException" /> object that contains the fault message text and details.</returns>
    </member>
    <member name="F:System.Workflow.Activities.ReceiveActivity.FaultMessageProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.ReceiveActivity.FaultMessage" /> property.</summary>
    </member>
    <member name="M:System.Workflow.Activities.ReceiveActivity.GetContext(System.Workflow.ComponentModel.Activity,System.String,System.String)">
      <summary>Static method that returns context information given an activity instance and context token.</summary>
      <returns>A dictionary-based collection that contains <see cref="T:System.Xml.XmlQualifiedName" /> keys and their associated <see cref="T:System.String" /> values.</returns>
      <param name="activity">Activity instance that context information is requested for.</param>
      <param name="contextName">Name of the context token used by the activity.</param>
      <param name="ownerActivityName">The name of the owning activity name.</param>
    </member>
    <member name="M:System.Workflow.Activities.ReceiveActivity.GetContext(System.Workflow.ComponentModel.Activity,System.Workflow.Activities.ContextToken)">
      <summary>Static method that returns context information given an activity instance and context token.</summary>
      <returns>A dictionary based collection that contains <see cref="T:System.Xml.XmlQualifiedName" /> keys and their associated <see cref="T:System.String" /> values.</returns>
      <param name="activity">Activity instance that context information is requested for.</param>
      <param name="contextToken">The context token used by the activity.</param>
    </member>
    <member name="M:System.Workflow.Activities.ReceiveActivity.GetRootContext(System.Workflow.ComponentModel.Activity)">
      <summary>Static method that returns context information for the root context associated with a given activity instance. Context information is used for communication between a host application and the workflow service.</summary>
      <returns>A dictionary-based collection that contains <see cref="T:System.Xml.XmlQualifiedName" /> keys and their associated <see cref="T:System.String" /> values that represent context information for a root context. Barring custom instance creation logic, the message that triggers creation of a new instance is received in the root context.</returns>
      <param name="activity">The child activity instance.</param>
    </member>
    <member name="M:System.Workflow.Activities.ReceiveActivity.GetWorkflowServiceAttributes(System.Object)">
      <summary>Returns the <see cref="T:System.Workflow.Activities.WorkflowServiceAttributes" /> attributes for the service implemented by the <see cref="T:System.Workflow.Activities.ReceiveActivity" /> activity. These attributes include items like the <see cref="P:System.Workflow.Activities.WorkflowServiceAttributes.AddressFilterMode" />, the <see cref="P:System.Workflow.Activities.WorkflowServiceAttributes.ConfigurationName" />, the <see cref="P:System.Workflow.Activities.WorkflowServiceAttributes.IncludeExceptionDetailInFaults" />, and whether to include exception details in any faults that are returned from the <see cref="T:System.Workflow.Activities.ReceiveActivity" /> activity.</summary>
      <returns>A <see cref="T:System.Object" /> that represents a <see cref="T:System.Workflow.Activities.WorkflowServiceAttributes" /> object that contains service attribute data.</returns>
      <param name="dependencyObject">The object to retrieve the service attributes from.</param>
    </member>
    <member name="E:System.Workflow.Activities.ReceiveActivity.OperationValidation">
      <summary>Occurs when a message is received for an operation and validation is required.</summary>
    </member>
    <member name="F:System.Workflow.Activities.ReceiveActivity.OperationValidationEvent">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="E:System.Workflow.Activities.ReceiveActivity.OperationValidation" /> event.</summary>
    </member>
    <member name="P:System.Workflow.Activities.ReceiveActivity.ParameterBindings">
      <summary>Gets the collection of bindable parameters as found in the service's formal parameter list.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.WorkflowParameterBindingCollection" /> of parameters to bind to.</returns>
    </member>
    <member name="P:System.Workflow.Activities.ReceiveActivity.ServiceOperationInfo">
      <summary>Defines the contract and service operation that the <see cref="T:System.Workflow.Activities.ReceiveActivity" /> activity implements.</summary>
      <returns>An <see cref="T:System.Workflow.Activities.OperationInfoBase" /> object that contains the contract name, the contract type, the operation name, (which could be distinct from method name), whether the operation is a one-way operation, and method information including parameters about the operation.</returns>
    </member>
    <member name="M:System.Workflow.Activities.ReceiveActivity.SetWorkflowServiceAttributes(System.Object,System.Object)">
      <summary>Sets the attributes for the service implemented by the <see cref="T:System.Workflow.Activities.ReceiveActivity" /> activity. These attributes include items like the <see cref="P:System.Workflow.Activities.WorkflowServiceAttributes.AddressFilterMode" />, the <see cref="P:System.Workflow.Activities.WorkflowServiceAttributes.ConfigurationName" />, and whether to include exception details in any faults that are returned from the <see cref="T:System.Workflow.Activities.ReceiveActivity" /> activity.</summary>
      <param name="dependencyObject">The object to apply the service attributes to.</param>
      <param name="value">The <see cref="T:System.Workflow.Activities.WorkflowServiceAttributes" /> object that contains the service attribute data to apply.</param>
    </member>
    <member name="P:System.Workflow.Activities.ReceiveActivity.System#Workflow#Activities#IEventActivity#QueueName">
      <summary>Gets the name of the <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> on which the activity is waiting for data to arrive.</summary>
      <returns>The name of the <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> on which the activity is waiting for data to arrive. </returns>
    </member>
    <member name="M:System.Workflow.Activities.ReceiveActivity.System#Workflow#Activities#IEventActivity#Subscribe(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})">
      <summary>Creates the subscription of the <see cref="T:System.Workflow.Activities.ReceiveActivity" /> activity to an event.</summary>
      <param name="parentContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> that represents the execution environment of the <see cref="T:System.Workflow.Activities.ReceiveActivity" /> activity.</param>
      <param name="parentEventHandler">The <see cref="T:System.EventHandler" /> that handles the event. This event handler is owned by the parent activity.</param>
    </member>
    <member name="M:System.Workflow.Activities.ReceiveActivity.System#Workflow#Activities#IEventActivity#Unsubscribe(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})">
      <summary>Cancels the subscription of a <see cref="T:System.Workflow.ComponentModel.Activity" /> to an event.</summary>
      <param name="parentContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> that represents the execution environment of the <see cref="T:System.Workflow.Activities.WebServiceInputActivity" /> activity.</param>
      <param name="parentEventHandler">The <see cref="T:System.EventHandler" /> that handles the event. This event handler is owned by the parent activity.</param>
    </member>
    <member name="M:System.Workflow.Activities.ReceiveActivity.System#Workflow#ComponentModel#IActivityEventListener{T}#OnEvent(System.Object,System.Workflow.ComponentModel.QueueEventArgs)"></member>
    <member name="F:System.Workflow.Activities.ReceiveActivity.WorkflowServiceAttributesProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.ReceiveActivity.ServiceOperationInfo" /> property.</summary>
    </member>
    <member name="T:System.Workflow.Activities.SendActivity">
      <summary>Client activity that models the synchronous invocation of a  service operation.</summary>
    </member>
    <member name="M:System.Workflow.Activities.SendActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.SendActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.SendActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.SendActivity" /> class with the specified name property.</summary>
      <param name="name">The value assigned to <see cref="P:System.Workflow.ComponentModel.Activity.Name" /> when the activity is initialized.</param>
    </member>
    <member name="E:System.Workflow.Activities.SendActivity.AfterResponse">
      <summary>Occurs after the response has been received from the service.</summary>
    </member>
    <member name="F:System.Workflow.Activities.SendActivity.AfterResponseEvent">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="E:System.Workflow.Activities.SendActivity.AfterResponse" /> event.</summary>
    </member>
    <member name="E:System.Workflow.Activities.SendActivity.BeforeSend">
      <summary>Occurs before the <see cref="T:System.Workflow.Activities.SendActivity" /> activity sends the message to the service.</summary>
    </member>
    <member name="F:System.Workflow.Activities.SendActivity.BeforeSendEvent">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="E:System.Workflow.Activities.SendActivity.BeforeSend" /> event.</summary>
    </member>
    <member name="P:System.Workflow.Activities.SendActivity.ChannelToken">
      <summary>
        <see cref="T:System.Workflow.Activities.ChannelToken" /> used by the <see cref="T:System.Workflow.Activities.SendActivity" /> to associate itself with a client channel.</summary>
      <returns>A <see cref="T:System.Workflow.Activities.ChannelToken" /> defining a client channel that a <see cref="T:System.Workflow.Activities.SendActivity" /> uses to communicate with a service.</returns>
    </member>
    <member name="P:System.Workflow.Activities.SendActivity.Context">
      <summary>Returns a dictionary that contains the context used for communication between the client and the service it is communicating with, including such things as identification for correlation.</summary>
      <returns>A dictionary-based collection that contains <see cref="T:System.Xml.XmlQualifiedName" /> keys and their associated <see cref="T:System.String" /> values.</returns>
    </member>
    <member name="P:System.Workflow.Activities.SendActivity.CustomAddress">
      <summary>Gets or sets the custom address used to communicate with a service.</summary>
      <returns>String value whose value is the address a service is listening on.</returns>
    </member>
    <member name="F:System.Workflow.Activities.SendActivity.CustomAddressProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> for the <see cref="P:System.Workflow.Activities.SendActivity.CustomAddress" /> property.</summary>
    </member>
    <member name="M:System.Workflow.Activities.SendActivity.GetContext(System.Workflow.ComponentModel.Activity,System.String,System.String,System.Type)">
      <summary>Static method that returns context information given an activity instance, an endpoint name used by that activity, the name of the owner activity, and a <see cref="T:System.Type" /> object that represents the type of the contract.</summary>
      <returns>A dictionary-based collection that contains <see cref="T:System.Xml.XmlQualifiedName" /> keys and their associated <see cref="T:System.String" /> values.</returns>
      <param name="activity">Activity whose context information is required.</param>
      <param name="endpointName">Name of the endpoint used for correlation with a service.</param>
      <param name="ownerActivityName">The name of the owning activity.</param>
      <param name="contractType">The <see cref="T:System.Type" /> of the contract implemented by a service.</param>
    </member>
    <member name="M:System.Workflow.Activities.SendActivity.GetContext(System.Workflow.ComponentModel.Activity,System.Workflow.Activities.ChannelToken,System.Type)">
      <summary>Gets or sets the context information for a send operation.</summary>
      <returns>A dictionary-based collection that contains <see cref="T:System.Xml.XmlQualifiedName" /> keys and their associated <see cref="T:System.String" /> values.</returns>
      <param name="activity">Activity whose context information is required.</param>
      <param name="endpoint">Endpoint information for correlation with a service.</param>
      <param name="contractType">The <see cref="T:System.Type" /> of the contract implemented by a service.</param>
    </member>
    <member name="P:System.Workflow.Activities.SendActivity.ParameterBindings">
      <summary>Gets the collection of bindable parameters as found in the  service's formal parameter list.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.WorkflowParameterBindingCollection" /> of parameters to bind to.</returns>
    </member>
    <member name="F:System.Workflow.Activities.SendActivity.ReturnValuePropertyName">
      <summary>Name of the property that is used for the return value sent by the service that the SendActivity activity is communicating with.</summary>
    </member>
    <member name="P:System.Workflow.Activities.SendActivity.ServiceOperationInfo">
      <summary>Defines the contract and operation of the service that the SendActivity activity communicates with.</summary>
      <returns>A <see cref="T:System.Workflow.Activities.TypedOperationInfo" /> object that contains the contract name, the contract type, the operation name, (which may be distinct from the actual method name), whether the operation is a one-way operation, and method information including parameters about the operation.</returns>
    </member>
    <member name="M:System.Workflow.Activities.SendActivity.SetContext(System.Workflow.ComponentModel.Activity,System.String,System.String,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>A static method that sets context information for a <see cref="T:System.Workflow.Activities.SendActivity" /> activity, given an activity instance, an endpoint name used by that activity, the name of the owner activity, a <see cref="T:System.Type" /> object that represents the type of the contract, and the context information itself.</summary>
      <param name="activity">The Activity instance to associate the context information with.</param>
      <param name="endpointName">The name of an endpoint used for correlation with a service.</param>
      <param name="ownerActivityName">The name of the owning activity</param>
      <param name="contractType">The <see cref="T:System.Type" /> of the contract implemented by a service.</param>
      <param name="context">The context information to set.</param>
    </member>
    <member name="M:System.Workflow.Activities.SendActivity.SetContext(System.Workflow.ComponentModel.Activity,System.Workflow.Activities.ChannelToken,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>A static method that sets context information for a <see cref="T:System.Workflow.Activities.SendActivity" /> activity, given an activity instance, an endpoint used by that activity, a <see cref="T:System.Type" /> object that represents the type of the contract, and the context information itself.</summary>
      <param name="activity">The Activity instance to associate the context information with.</param>
      <param name="endpoint">The endpoint used for correlation with a service.</param>
      <param name="contractType">The <see cref="T:System.Type" /> of the contract implemented by a service.</param>
      <param name="context">The context information to set.</param>
    </member>
    <member name="T:System.Workflow.Activities.SendActivityEventArgs">
      <summary>Provides information for the <see cref="E:System.Workflow.Activities.SendActivity.BeforeSend" /> and <see cref="E:System.Workflow.Activities.SendActivity.AfterResponse" /> events.</summary>
    </member>
    <member name="M:System.Workflow.Activities.SendActivityEventArgs.#ctor(System.Workflow.Activities.SendActivity)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.SendActivityEventArgs" /> class.</summary>
      <param name="sendActivity">The T:System.Workflow.Activities.SendActivity that threw the event associated with this <see cref="T:System.Workflow.Activities.SendActivityEventArgs" />.</param>
    </member>
    <member name="P:System.Workflow.Activities.SendActivityEventArgs.SendActivity">
      <summary>Gets the <see cref="T:System.Workflow.Activities.SendActivity" /> that threw the event associated with this <see cref="T:System.Workflow.Activities.SendActivityEventArgs" />.</summary>
      <returns>The <see cref="T:System.Workflow.Activities.SendActivity" /> that threw the event associated with this <see cref="T:System.Workflow.Activities.SendActivityEventArgs" />.</returns>
    </member>
    <member name="T:System.Workflow.Activities.TypedOperationInfo">
      <summary>An <see cref="T:System.Workflow.Activities.OperationInfo" /> object that inherits from <see cref="T:System.Workflow.Activities.OperationInfoBase" /> used for the service operation information of the <see cref="T:System.Workflow.Activities.SendActivity" /> and <see cref="T:System.Workflow.Activities.ReceiveActivity" /> activities. Note that this operation information must be based on a CLR type.  </summary>
    </member>
    <member name="M:System.Workflow.Activities.TypedOperationInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.TypedOperationInfo" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.TypedOperationInfo.#ctor(System.Type,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.TypedOperationInfo" /> class.</summary>
      <param name="contractType">The type of the associated contract interface.</param>
      <param name="operationName">The method name of the associated service operation.</param>
    </member>
    <member name="M:System.Workflow.Activities.TypedOperationInfo.Clone">
      <summary>Creates a copy of the current object.</summary>
      <returns>The copy of the object.</returns>
    </member>
    <member name="P:System.Workflow.Activities.TypedOperationInfo.ContractType">
      <summary>The type of the associated contract interface.</summary>
      <returns>A <see cref="T:System.Type" /> object that represents the type of the associated contract interface.</returns>
    </member>
    <member name="M:System.Workflow.Activities.TypedOperationInfo.Equals(System.Object)">
      <summary>Determines whether two <see cref="T:System.Workflow.Activities.TypedOperationInfo" /> instances are equal.</summary>
      <returns>true if the instances are equal; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Workflow.Activities.TypedOperationInfo" />.</param>
    </member>
    <member name="M:System.Workflow.Activities.TypedOperationInfo.GetHashCode">
      <summary>Generates a number that corresponds to the value of the object to support the use of a hash table.</summary>
      <returns>An <see cref="T:System.Int32" /> that represents the hash code value of the object.</returns>
    </member>
    <member name="M:System.Workflow.Activities.TypedOperationInfo.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Workflow.Activities.TypedOperationInfo" /> object.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Workflow.Activities.TypedOperationInfo" /> object.</returns>
    </member>
    <member name="T:System.Workflow.Activities.WorkflowServiceAttributes">
      <summary>Builds the service behavior for the workflow service that it decorates.</summary>
    </member>
    <member name="M:System.Workflow.Activities.WorkflowServiceAttributes.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.WorkflowServiceAttributes" /> class.</summary>
    </member>
    <member name="P:System.Workflow.Activities.WorkflowServiceAttributes.AddressFilterMode">
      <summary>Gets or sets the <see cref="T:System.ServiceModel.AddressFilterMode" /> enumeration that is used by the dispatcher to route incoming messages to the correct endpoint.</summary>
      <returns>An <see cref="T:System.ServiceModel.AddressFilterMode" /> enumeration value that is used by the dispatcher to route incoming messages to the correct endpoint.</returns>
    </member>
    <member name="P:System.Workflow.Activities.WorkflowServiceAttributes.ConfigurationName">
      <summary>Gets or sets the value used to locate the service element in an application configuration file.</summary>
      <returns>The value to locate in the configuration file. </returns>
    </member>
    <member name="P:System.Workflow.Activities.WorkflowServiceAttributes.IgnoreExtensionDataObject">
      <summary>Gets or sets a value that specifies whether to send unknown serialization data onto the wire.</summary>
      <returns>true if unknown serialization data is never sent; otherwise, false. </returns>
    </member>
    <member name="P:System.Workflow.Activities.WorkflowServiceAttributes.IncludeExceptionDetailInFaults">
      <summary>Gets or sets a value that specifies that general unhandled execution exceptions are to be converted into a <see cref="T:System.ServiceModel.FaultException" /> of type <see cref="T:System.ServiceModel.ExceptionDetail" /> and sent as a fault message. Set this to true only during development to troubleshoot a service. </summary>
      <returns>true if unhandled exceptions are to be returned as SOAP faults; otherwise, false. </returns>
    </member>
    <member name="P:System.Workflow.Activities.WorkflowServiceAttributes.MaxItemsInObjectGraph">
      <summary>Gets or sets the maximum number of items allowed in a serialized object. </summary>
      <returns>The maximum number of items allowed in an object. </returns>
    </member>
    <member name="P:System.Workflow.Activities.WorkflowServiceAttributes.Name">
      <summary>Gets or sets the value of the name attribute in the service element in Web Services Description Language (WSDL).</summary>
      <returns>The value of the Name property. </returns>
    </member>
    <member name="P:System.Workflow.Activities.WorkflowServiceAttributes.Namespace">
      <summary>Gets or sets the value of the target namespace for the service in Web Services Description Language (WSDL). </summary>
      <returns>The value of the Namespace property.</returns>
    </member>
    <member name="P:System.Workflow.Activities.WorkflowServiceAttributes.UseSynchronizationContext">
      <summary>Gets or sets a value that specifies whether to use the current synchronization context to choose the thread of execution. </summary>
      <returns>true if all calls to the service must run on the thread specified by the <see cref="T:System.Threading.SynchronizationContext" />; otherwise, false. </returns>
    </member>
    <member name="P:System.Workflow.Activities.WorkflowServiceAttributes.ValidateMustUnderstand">
      <summary>Gets or sets a value that specifies whether the system or the application enforces SOAP MustUnderstand header processing. </summary>
      <returns>true if the system is to perform SOAP header MustUnderstand processing; otherwise false, which indicates that the application performs this processing. </returns>
    </member>
    <member name="T:System.Workflow.Activities.WorkflowServiceAttributesDynamicPropertyValidator">
      <summary>The property validator used by the <see cref="F:System.Workflow.Activities.ReceiveActivity.WorkflowServiceAttributesProperty" />.</summary>
    </member>
    <member name="M:System.Workflow.Activities.WorkflowServiceAttributesDynamicPropertyValidator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.WorkflowServiceAttributesDynamicPropertyValidator" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.WorkflowServiceAttributesDynamicPropertyValidator.Validate(System.Workflow.ComponentModel.Compiler.ValidationManager,System.Object)">
      <summary>Validates the <see cref="F:System.Workflow.Activities.ReceiveActivity.WorkflowServiceAttributesProperty" /> property and returns a collection of <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationError" /> objects.</summary>
      <returns>A collection of <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationError" /> objects representing the results of the validation.</returns>
      <param name="manager">The validation manager linked to the validation.</param>
      <param name="obj">The parameter to validate.</param>
    </member>
    <member name="T:System.Workflow.Runtime.Hosting.ChannelManagerService">
      <summary>Provides functionality for constructing client-side channels, caching channels, and channel factories.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.ChannelManagerService.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.ChannelManagerService" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.ChannelManagerService.#ctor(System.Collections.Generic.IList{System.ServiceModel.Description.ServiceEndpoint})">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.ChannelManagerService" /> class.</summary>
      <param name="endpoints">A collection of service endpoints.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.ChannelManagerService.#ctor(System.Collections.Specialized.NameValueCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.ChannelManagerService" /> class.</summary>
      <param name="parameters">Configuration parameters for the service.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.ChannelManagerService.#ctor(System.ServiceModel.Channels.ChannelPoolSettings)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.ChannelManagerService" /> class.</summary>
      <param name="settings">Settings for quotas for the pool of channels managed by this service. </param>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.ChannelManagerService.#ctor(System.ServiceModel.Channels.ChannelPoolSettings,System.Collections.Generic.IList{System.ServiceModel.Description.ServiceEndpoint})">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.ChannelManagerService" /> class.</summary>
      <param name="settings">Settings for quotas for the pool of channels managed by this service.</param>
      <param name="endpoints">A collection of service endpoints.</param>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\System.Xaml.Hosting.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Xaml.Hosting</name>
  </assembly>
  <members>
    <member name="T:System.Xaml.Hosting.XamlBuildProvider">
      <summary>A build provider for server side XAML (.xamlx) documents.</summary>
    </member>
    <member name="M:System.Xaml.Hosting.XamlBuildProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.Hosting.XamlBuildProvider" /> class. </summary>
    </member>
    <member name="M:System.Xaml.Hosting.XamlBuildProvider.GetGeneratedType(System.CodeDom.Compiler.CompilerResults)">
      <summary>Returns a type generated by the build provider from the virtual path.</summary>
      <returns>The type that is generated by the build provider for the virtual path.</returns>
      <param name="results">The compilation results for the build provider's virtual path.</param>
    </member>
    <member name="M:System.Xaml.Hosting.XamlBuildProvider.GetResultFlags(System.CodeDom.Compiler.CompilerResults)">
      <summary>Returns a value that indicates actions required when a virtual path is built.</summary>
      <returns>The <see cref="T:System.Web.Compilation.BuildProviderResultFlags" /> value that indicates actions required after the virtual path is built.</returns>
      <param name="results">The compilation results for the build provider's virtual path.</param>
    </member>
    <member name="T:System.Xaml.Hosting.Configuration.HandlerElement">
      <summary>Manages the HTTP handler property of a XAML element in a configuration file.</summary>
    </member>
    <member name="M:System.Xaml.Hosting.Configuration.HandlerElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.Hosting.Configuration.HandlerElement" /> class.</summary>
    </member>
    <member name="M:System.Xaml.Hosting.Configuration.HandlerElement.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.Hosting.Configuration.HandlerElement" /> class with specified HTTP handler and XAML root element type names.</summary>
      <param name="xamlType">The name of the XAML root element in a configuration file.</param>
      <param name="handlerType">The name of the HTTP handler property of an XAML element in a configuration file.</param>
    </member>
    <member name="P:System.Xaml.Hosting.Configuration.HandlerElement.HttpHandlerType">
      <summary>Gets or sets the type name of the HTTP handler property of an XAML element in a configuration file.</summary>
      <returns>
        <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.Xaml.Hosting.Configuration.HandlerElement.XamlRootElementType">
      <summary>Gets or sets the type name of the root XAML element in a configuration file.</summary>
      <returns>
        <see cref="T:System.String" />.</returns>
    </member>
    <member name="T:System.Xaml.Hosting.Configuration.HandlerElementCollection">
      <summary>Manages a collection of configuration file handler elements.</summary>
    </member>
    <member name="M:System.Xaml.Hosting.Configuration.HandlerElementCollection.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Xaml.Hosting.Configuration.HandlerElementCollection" /> class with the string comparer setting initialized.</summary>
    </member>
    <member name="M:System.Xaml.Hosting.Configuration.HandlerElementCollection.Add(System.Xaml.Hosting.Configuration.HandlerElement)">
      <summary>Adds a handler configuration element to a <see cref="T:System.Xaml.Hosting.Configuration.HandlerElementCollection" />.</summary>
      <param name="handlerElement">An HTTP handler configuration element.</param>
    </member>
    <member name="M:System.Xaml.Hosting.Configuration.HandlerElementCollection.Clear">
      <summary>Removes all elements from a <see cref="T:System.Xaml.Hosting.Configuration.HandlerElementCollection" />. </summary>
    </member>
    <member name="P:System.Xaml.Hosting.Configuration.HandlerElementCollection.CollectionType">
      <summary>Gets the type of the HTTP handler element collection.</summary>
      <returns>
        <see cref="T:System.Configuration.ConfigurationElementCollectionType" />.</returns>
    </member>
    <member name="P:System.Xaml.Hosting.Configuration.HandlerElementCollection.Item(System.Int32)">
      <summary>Gets the HTTP handler element at the specified index location in the handler element collection.</summary>
      <returns>
        <see cref="T:System.Xaml.Hosting.Configuration.HandlerElement" />.</returns>
      <param name="index">An index location in a handler element collection. </param>
    </member>
    <member name="M:System.Xaml.Hosting.Configuration.HandlerElementCollection.Remove(System.String)">
      <summary>Removes the specified XAML root element from a <see cref="T:System.Xaml.Hosting.Configuration.HandlerElementCollection" />.</summary>
      <param name="xamlRootElementType">The XAML root element to remove from the collection.</param>
    </member>
    <member name="M:System.Xaml.Hosting.Configuration.HandlerElementCollection.Remove(System.Xaml.Hosting.Configuration.HandlerElement)">
      <summary>Removes the specified handler configuration element from a <see cref="T:System.Xaml.Hosting.Configuration.HandlerElementCollection" />.</summary>
      <param name="handlerElement">The HTTP handler element to remove from the collection.</param>
    </member>
    <member name="M:System.Xaml.Hosting.Configuration.HandlerElementCollection.RemoveAt(System.Int32)">
      <summary>Removes an element from a <see cref="T:System.Xaml.Hosting.Configuration.HandlerElementCollection" /> at the specified index location.</summary>
      <param name="index">The index location of the handler element to remove from the collection. </param>
    </member>
    <member name="T:System.Xaml.Hosting.Configuration.XamlHostingSection">
      <summary>Gets an empty collection of HTTP handler elements. </summary>
    </member>
    <member name="M:System.Xaml.Hosting.Configuration.XamlHostingSection.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Xaml.Hosting.Configuration.XamlHostingSection" /> class.</summary>
    </member>
    <member name="P:System.Xaml.Hosting.Configuration.XamlHostingSection.Handlers">
      <summary>Gets an empty collection of HTTP handler elements.</summary>
      <returns>
        <see cref="T:System.Xaml.Hosting.Configuration.HandlerElementCollection" />.</returns>
    </member>
    <member name="T:System.Xaml.Hosting.Configuration.XamlHostingSectionGroup">
      <summary>Gets the XAML hosting section of a configuration file.</summary>
    </member>
    <member name="M:System.Xaml.Hosting.Configuration.XamlHostingSectionGroup.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Xaml.Hosting.Configuration.XamlHostingSectionGroup" /> class.</summary>
    </member>
    <member name="P:System.Xaml.Hosting.Configuration.XamlHostingSectionGroup.XamlHostingSection">
      <summary>Gets the XAML hosting section of a configuration file.</summary>
      <returns>
        <see cref="T:System.Xaml.Hosting.Configuration.XamlHostingSection" />.</returns>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\System.Workflow.Runtime.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Workflow.Runtime</name>
  </assembly>
  <members>
    <member name="T:System.Activities.Statements.Interop">
      <summary>An activity that manages the execution of an <see cref="T:System.Workflow.ComponentModel.Activity" /> within a workflow.</summary>
    </member>
    <member name="M:System.Activities.Statements.Interop.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.Interop" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.Interop.ActivityMetaProperties">
      <summary>The collection of name-value pairs that corresponds to the metadata of the <see cref="T:System.Workflow.ComponentModel.Activity" />, such as an activity’s <see cref="P:System.Workflow.ComponentModel.Activity.Name" /> property, or a <see cref="T:System.Workflow.Activities.WhileActivity" /> activity’s <see cref="P:System.Workflow.Activities.While.Condition" /> property.</summary>
      <returns>The collection of metadata.</returns>
    </member>
    <member name="P:System.Activities.Statements.Interop.ActivityProperties">
      <summary>Gets the collection of name-value pairs that corresponds to the input and output properties of the <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <returns>The collection of properties.</returns>
    </member>
    <member name="P:System.Activities.Statements.Interop.ActivityType">
      <summary>Gets or sets the type of the activity contained by the <see cref="T:System.Activities.Statements.Interop" /> activity.</summary>
      <returns>The type of the activity contained by the <see cref="T:System.Activities.Statements.Interop" /> activity.</returns>
    </member>
    <member name="M:System.Activities.Statements.Interop.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
      <summary>Returns the collection of attributes for the contained <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <returns>The attribute collection.</returns>
    </member>
    <member name="M:System.Activities.Statements.Interop.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
      <summary>Returns the name of the class of the contained <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <returns>The class name.</returns>
    </member>
    <member name="M:System.Activities.Statements.Interop.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
      <summary>Returns the name of the contained <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <returns>The activity name.</returns>
    </member>
    <member name="M:System.Activities.Statements.Interop.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
      <summary>Returns the associated type converter for the contained <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <returns>The type converter.</returns>
    </member>
    <member name="M:System.Activities.Statements.Interop.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent">
      <summary>Returns the default event for the contained <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <returns>The default event.</returns>
    </member>
    <member name="M:System.Activities.Statements.Interop.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty">
      <summary>Returns the default property for the contained <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <returns>The default property.</returns>
    </member>
    <member name="M:System.Activities.Statements.Interop.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
      <summary>Returns the editor for the contained <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <returns>The editor.</returns>
      <param name="editorBaseType">The type of the requested editor.</param>
    </member>
    <member name="M:System.Activities.Statements.Interop.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
      <summary>Returns the collection of events for the contained <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <returns>The collection of events.</returns>
    </member>
    <member name="M:System.Activities.Statements.Interop.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
      <summary>Returns the collection of events for the contained <see cref="T:System.Workflow.ComponentModel.Activity" /> using the specified array of attributes as a filter.</summary>
      <returns>The collection of events.</returns>
      <param name="attributes">The attributes used to filter the returned events.</param>
    </member>
    <member name="M:System.Activities.Statements.Interop.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
      <summary>Returns the collection of properties for the contained <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />.</returns>
    </member>
    <member name="M:System.Activities.Statements.Interop.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
      <summary>Returns the collection of properties for the contained <see cref="T:System.Workflow.ComponentModel.Activity" /> using a specified array of attributes as a filter.</summary>
      <returns>A collection of properties.</returns>
      <param name="attributes">The array of attributes used to filter the properties.</param>
    </member>
    <member name="M:System.Activities.Statements.Interop.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>Returns the owner of the specified property descriptor or the <see cref="T:System.Activities.Statements.Interop" /> activity itself if the property descriptor has no owner.</summary>
      <returns>The property owner.</returns>
      <param name="pd">The property whose owner is to be retrieved.</param>
    </member>
    <member name="T:System.Activities.Tracking.InteropTrackingRecord">
      <summary>Represents the data sent to tracking participants when tracked records occur in an <see cref="T:System.Activities.Statements.Interop" /> activity within a workflow.</summary>
    </member>
    <member name="M:System.Activities.Tracking.InteropTrackingRecord.#ctor(System.Activities.Tracking.InteropTrackingRecord)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.InteropTrackingRecord" /> class using the specified <see cref="T:System.Activities.Tracking.InteropTrackingRecord" />.</summary>
      <param name="record">The tracking record.</param>
    </member>
    <member name="M:System.Activities.Tracking.InteropTrackingRecord.#ctor(System.String,System.Workflow.Runtime.Tracking.TrackingRecord)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.InteropTrackingRecord" /> class.</summary>
      <param name="activityDisplayName">The activity name</param>
      <param name="v1TrackingRecord">The tracking record of the <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
    </member>
    <member name="M:System.Activities.Tracking.InteropTrackingRecord.Clone">
      <summary>Creates a copy of the <see cref="T:System.Activities.Tracking.InteropTrackingRecord" />.</summary>
      <returns>A copy of the <see cref="T:System.Activities.Tracking.InteropTrackingRecord" />.</returns>
    </member>
    <member name="P:System.Activities.Tracking.InteropTrackingRecord.TrackingRecord">
      <summary>Returns a tracking record that represents the data sent to tracking participants when tracked events occur.</summary>
      <returns>The data sent to tracking participants when tracked events occur.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.CorrelationProperty">
      <summary>Represents a name and value pair used to correlate messages to specific receiving activities.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.CorrelationProperty.#ctor(System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.CorrelationProperty" /> class.</summary>
      <param name="name">The name of the property used in the correlation set.</param>
      <param name="value">The value of the correlation set property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.CorrelationProperty.Name">
      <summary>Gets the name of the property used in the correlation set.</summary>
      <returns>The name of the property used in the correlation set.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.CorrelationProperty.Value">
      <summary>Gets the value of the correlation set property.</summary>
      <returns>The value of the correlation set property.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.CorrelationToken">
      <summary>Manages the subscriptions of the <see cref="T:System.Workflow.Runtime.CorrelationProperty" /> to the owner activities. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.CorrelationToken.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.CorrelationToken" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.CorrelationToken.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.CorrelationToken" /> class using the name of the <see cref="T:System.Workflow.Runtime.CorrelationToken" />.</summary>
      <param name="name">The name of the <see cref="T:System.Workflow.Runtime.CorrelationToken" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.CorrelationToken.Initialize(System.Workflow.ComponentModel.Activity,System.Collections.Generic.ICollection{System.Workflow.Runtime.CorrelationProperty})">
      <summary>Fires correlation initialized events.</summary>
      <param name="activity">The name of the <see cref="T:System.Workflow.ComponentModel.Activity" /> that owns the correlation token.</param>
      <param name="propertyValues">A collection of property values in the <see cref="T:System.Workflow.Runtime.CorrelationToken" />.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Workflow.Runtime.CorrelationToken" /> was already initialized.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.CorrelationToken.Initialized">
      <summary>Gets a value indicating whether the <see cref="T:System.Workflow.Runtime.CorrelationToken" /> is initialized.</summary>
      <returns>true if the <see cref="T:System.Workflow.Runtime.CorrelationToken" /> is initialized; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.CorrelationToken.Name">
      <summary>Gets or sets the name of the <see cref="T:System.Workflow.Runtime.CorrelationToken" />.</summary>
      <returns>The name of the <see cref="T:System.Workflow.Runtime.CorrelationToken" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.CorrelationToken.OwnerActivityName">
      <summary>Gets or sets the name of the <see cref="T:System.Workflow.ComponentModel.Activity" /> that owns the correlation token.</summary>
      <returns>The name of the <see cref="T:System.Workflow.ComponentModel.Activity" /> that owns the correlation token.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.CorrelationToken.Properties">
      <summary>Gets the collection of <see cref="T:System.Workflow.Runtime.CorrelationProperty" /> objects in the <see cref="T:System.Workflow.Runtime.CorrelationToken" />.</summary>
      <returns>A collection of <see cref="T:System.Workflow.Runtime.CorrelationProperty" /> objects.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.CorrelationToken.SubscribeForCorrelationTokenInitializedEvent(System.Workflow.ComponentModel.Activity,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.Runtime.CorrelationTokenEventArgs})">
      <summary>Subscribes the <see cref="T:System.Workflow.Runtime.CorrelationToken" /> to the initialized event.</summary>
      <param name="activity">The name of the <see cref="T:System.Workflow.ComponentModel.Activity" /> that owns the correlation token.</param>
      <param name="dataChangeListener">The <see cref="T:System.Workflow.Runtime.CorrelationTokenEventArgs" /> that is listening for a change in event data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activity" /> or <paramref name="dataChangeListener" /> are null references (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.CorrelationToken.UnsubscribeFromCorrelationTokenInitializedEvent(System.Workflow.ComponentModel.Activity,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.Runtime.CorrelationTokenEventArgs})">
      <summary>Unsubscribes the <see cref="T:System.Workflow.Runtime.CorrelationToken" /> from the initialized event.</summary>
      <param name="activity">The name of the <see cref="T:System.Workflow.ComponentModel.Activity" /> that owns the correlation token.</param>
      <param name="dataChangeListener">The <see cref="T:System.Workflow.Runtime.CorrelationTokenEventArgs" /> that is listening for a change in event data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activity" /> or <paramref name="dataChangeListener" /> are null references (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.CorrelationTokenCollection">
      <summary>Represents a collection of <see cref="T:System.Workflow.Runtime.CorrelationToken" /> classes. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.CorrelationTokenCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.CorrelationTokenCollection" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.Runtime.CorrelationTokenCollection.CorrelationTokenCollectionProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="T:System.Workflow.Runtime.CorrelationTokenCollection" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.CorrelationTokenCollection.GetCorrelationToken(System.Workflow.ComponentModel.Activity,System.String,System.String)">
      <summary>Gets the specified <see cref="T:System.Workflow.Runtime.CorrelationToken" />.</summary>
      <returns>The <see cref="T:System.Workflow.Runtime.CorrelationToken" /> with the specified <paramref name="correlationTokenName" />.</returns>
      <param name="activity">The Activity associated with the <see cref="T:System.Workflow.Runtime.CorrelationTokenCollection" />.</param>
      <param name="correlationTokenName">The name of the <see cref="T:System.Workflow.Runtime.CorrelationToken" />.</param>
      <param name="ownerActivityName">The name of the activity associated with the <see cref="T:System.Workflow.Runtime.CorrelationTokenCollection" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activity" />, <paramref name="correlationTokenName" />, or <paramref name="ownerActivityName" /> are null references (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.CorrelationTokenCollection.GetItem(System.String)">
      <summary>Gets the <see cref="T:System.Workflow.Runtime.CorrelationToken" /> with the specified key.</summary>
      <returns>The <see cref="T:System.Workflow.Runtime.CorrelationToken" /> with the specified key.</returns>
      <param name="key">The key for the <see cref="T:System.Workflow.Runtime.CorrelationToken" /> to retrieve. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.CorrelationTokenEventArgs">
      <summary>Contains the event data associated with the <see cref="T:System.Workflow.Runtime.CorrelationToken" />. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.CorrelationTokenEventArgs.CorrelationToken">
      <summary>Gets the current <see cref="T:System.Workflow.Runtime.CorrelationToken" />.</summary>
      <returns>The current <see cref="T:System.Workflow.Runtime.CorrelationToken" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.CorrelationTokenEventArgs.IsInitializing">
      <summary>Gets a value that indicates whether the <see cref="M:System.Workflow.Runtime.CorrelationToken.Initialize(System.Workflow.ComponentModel.Activity,System.Collections.Generic.ICollection{System.Workflow.Runtime.CorrelationProperty})" /> method has been executed.</summary>
      <returns>true if the <see cref="M:System.Workflow.Runtime.CorrelationToken.Initialize(System.Workflow.ComponentModel.Activity,System.Collections.Generic.ICollection{System.Workflow.Runtime.CorrelationProperty})" /> method has been executed; otherwise, false.  </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.IPendingWork">
      <summary>Provides methods to participate in a work batch.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.IPendingWork.Commit(System.Transactions.Transaction,System.Collections.ICollection)">
      <summary>Commits the list of work items by using the specified <see cref="T:System.Transactions.Transaction" /> object.</summary>
      <param name="transaction">The <see cref="T:System.Transactions.Transaction" /> associated with the pending work.</param>
      <param name="items">The work items to be committed.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.IPendingWork.Complete(System.Boolean,System.Collections.ICollection)">
      <summary>Called when the transaction has completed.</summary>
      <param name="succeeded">true if the transaction succeeded; otherwise, false.</param>
      <param name="items">An <see cref="T:System.Collections.ICollection" /> of work items.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.IPendingWork.MustCommit(System.Collections.ICollection)">
      <summary>Allows the items in the work batch to assert whether they must commit immediately.</summary>
      <returns>true if any item in the collection must be committed immediately; otherwise, false.</returns>
      <param name="items">An <see cref="T:System.Collections.ICollection" /> of work items.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.IWorkBatch">
      <summary>Provides methods to add work to a work batch. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.IWorkBatch.Add(System.Workflow.Runtime.IPendingWork,System.Object)">
      <summary>Adds a pending work item to a work batch.</summary>
      <param name="work">An <see cref="T:System.Workflow.Runtime.IPendingWork" /> object associated with the <paramref name="workItem" />.</param>
      <param name="workItem">An object on which work is to be performed.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.ServicesExceptionNotHandledEventArgs">
      <summary>Provides data for the <see cref="E:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled" /> event.</summary>
    </member>
    <member name="P:System.Workflow.Runtime.ServicesExceptionNotHandledEventArgs.Exception">
      <summary>Gets the exception that could not be handled by the service.</summary>
      <returns>A <see cref="T:System.Exception" /> that represents the exception that could not be handled by the service.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.ServicesExceptionNotHandledEventArgs.WorkflowInstanceId">
      <summary>Gets the <see cref="T:System.Guid" /> of the workflow instance associated with the unhandled exception. </summary>
      <returns>The <see cref="T:System.Guid" /> of the workflow instance associated with the unhandled exception.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.TimerEventSubscription">
      <summary>Represents a subscription to a timer event.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.TimerEventSubscription.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.TimerEventSubscription" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.TimerEventSubscription.#ctor(System.Guid,System.DateTime)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.TimerEventSubscription" /> class by using the specified <see cref="T:System.Guid" /> of a workflow instance and the specified expiration <see cref="T:System.DateTime" />. </summary>
      <param name="workflowInstanceId">The <see cref="T:System.Guid" /> of the workflow instance associated with this subscription.</param>
      <param name="expiresAt">A <see cref="T:System.DateTime" /> that represents the time in Universal Coordinated Time (UTC) at which the timer associated with this subscription is expected to expire.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.TimerEventSubscription.#ctor(System.Guid,System.Guid,System.DateTime)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.TimerEventSubscription" /> class by using the specified subscription Id, the specified <see cref="T:System.Guid" /> of a workflow instance, and the specified expiration <see cref="T:System.DateTime" />.</summary>
      <param name="timerId">The <see cref="T:System.Guid" /> for this subscription.</param>
      <param name="workflowInstanceId">The <see cref="T:System.Guid" /> of the workflow instance for which this subscription was created.</param>
      <param name="expiresAt">A <see cref="T:System.DateTime" /> that represents the time in Universal Coordinated Time (UTC) at which the timer for this subscription is expected to expire.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.TimerEventSubscription.ExpiresAt">
      <summary>Gets the expected expiration time of the timer associated with this subscription.</summary>
      <returns>A <see cref="T:System.DateTime" /> that represents the time in Universal Coordinated Time (UTC) at which the timer associated with this subscription is expected to expire.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.TimerEventSubscription.QueueName">
      <summary>Represents the name of the <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> that the <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> sends a message to when the timer subscription expires.</summary>
      <returns>The <see cref="T:System.IComparable" /> interface for a <see cref="T:System.Guid" /> object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.TimerEventSubscription.SubscriptionId">
      <summary>Unique identifier that represents a timer event</summary>
      <returns>
        <see cref="T:System.Guid" /> representing the unique identifier for a timer event</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.TimerEventSubscription.WorkflowInstanceId">
      <summary>Identifier of the workflow associated with the timer subscription</summary>
      <returns>
        <see cref="T:System.Guid" /> representing the unique identifier for the workflow associated with the timer subscription.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.TimerEventSubscriptionCollection">
      <summary>Represents an ordered list of <see cref="T:System.Workflow.Runtime.TimerEventSubscription" /> objects.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.TimerEventSubscriptionCollection.Add(System.Workflow.Runtime.TimerEventSubscription)">
      <summary>Adds a <see cref="T:System.Workflow.Runtime.TimerEventSubscription" /> to the timer queue.</summary>
      <param name="item">The <see cref="T:System.Workflow.Runtime.TimerEventSubscription" /> to add to the timer queue.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.TimerEventSubscriptionCollection.CopyTo(System.Array,System.Int32)">
      <summary>Copies the <see cref="T:System.Workflow.Runtime.TimerEventSubscriptionCollection" /> elements to an existing one-dimensional <see cref="T:System.Array" />, starting at the specified array index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the <see cref="T:System.Workflow.Runtime.TimerEventSubscriptionCollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.TimerEventSubscriptionCollection.Count">
      <summary>Gets the number of <see cref="T:System.Workflow.Runtime.TimerEventSubscription" /> objects in the timer queue.</summary>
      <returns>The number of <see cref="T:System.Workflow.Runtime.TimerEventSubscription" /> objects in the queue.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.TimerEventSubscriptionCollection.GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Workflow.Runtime.TimerEventSubscriptionCollection" />.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Workflow.Runtime.TimerEventSubscriptionCollection" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.TimerEventSubscriptionCollection.IsSynchronized">
      <summary>Gets a value that indicates whether the access to the <see cref="T:System.Workflow.Runtime.TimerEventSubscriptionCollection" /> is synchronized (thread safe).</summary>
      <returns>Always returns true indicating that access to the <see cref="T:System.Workflow.Runtime.TimerEventSubscriptionCollection" /> is synchronized (thread safe).</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.TimerEventSubscriptionCollection.Peek">
      <summary>Returns the <see cref="T:System.Workflow.Runtime.TimerEventSubscription" /> at the beginning of the timer queue without removing it.</summary>
      <returns>The <see cref="T:System.Workflow.Runtime.TimerEventSubscription" /> at the beginning of the timer queue or a null reference (Nothing in Visual Basic) if the timer queue is empty.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.TimerEventSubscriptionCollection.Remove(System.Guid)">
      <summary>Removes the <see cref="T:System.Workflow.Runtime.TimerEventSubscription" /> that has the specified subscription id from the timer queue.</summary>
      <param name="timerSubscriptionId">The <see cref="T:System.Guid" /> of the <see cref="T:System.Workflow.Runtime.TimerEventSubscription" /> to remove.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.TimerEventSubscriptionCollection.Remove(System.Workflow.Runtime.TimerEventSubscription)">
      <summary>Removes the <see cref="T:System.Workflow.Runtime.TimerEventSubscription" /> from the timer queue.</summary>
      <param name="item">The <see cref="T:System.Workflow.Runtime.TimerEventSubscription" /> to remove from the timer queue.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.TimerEventSubscriptionCollection.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Workflow.Runtime.TimerEventSubscriptionCollection" />.</summary>
      <returns>An object used to synchronize access to the <see cref="T:System.Workflow.Runtime.TimerEventSubscriptionCollection" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.Runtime.TimerEventSubscriptionCollection.TimerCollectionProperty">
      <summary>Timer queue associated with a workflow instance. This queue contains time ordered <see cref="T:System.Workflow.Runtime.TimerEventSubscription" /> objects for a workflow.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.WorkflowCompletedEventArgs">
      <summary>Provides data for the <see cref="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted" /> event.</summary>
    </member>
    <member name="P:System.Workflow.Runtime.WorkflowCompletedEventArgs.OutputParameters">
      <summary>Gets the output from the workflow.</summary>
      <returns>A <see cref="T:System.Collections.Generic.Dictionary`2" /> of values keyed by parameter name that contains the output parameters of the workflow.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.WorkflowCompletedEventArgs.WorkflowDefinition">
      <summary>Gets an <see cref="T:System.Workflow.ComponentModel.Activity" /> that represents the workflow definition on completion of the workflow instance.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Activity" /> that represents the workflow definition on completion of the workflow instance.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.WorkflowEnvironment">
      <summary>Represents the transactional environment of the workflow instance that is running on the current thread.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch">
      <summary>Gets the current work batch.</summary>
      <returns>The <see cref="T:System.Workflow.Runtime.IWorkBatch" /> that represents the current work batch. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.WorkflowEnvironment.WorkflowInstanceId">
      <summary>Gets the <see cref="T:System.Guid" /> of the workflow instance associated with the current thread.</summary>
      <returns>The <see cref="T:System.Guid" /> that identifies the current workflow instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.WorkflowEventArgs">
      <summary>Provides data for workflow events.</summary>
    </member>
    <member name="P:System.Workflow.Runtime.WorkflowEventArgs.WorkflowInstance">
      <summary>Gets the workflow instance associated with the workflow event.</summary>
      <returns>The <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> associated with the workflow event.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.WorkflowInstance">
      <summary>Represents a workflow instance.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowInstance.Abort">
      <summary>Aborts the workflow instance.</summary>
      <exception cref="T:System.InvalidOperationException">The workflow runtime engine is not running.</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)">
      <summary>Applies changes to the workflow instance specified by the <see cref="T:System.Workflow.ComponentModel.WorkflowChanges" /> object.</summary>
      <param name="workflowChanges">A <see cref="T:System.Workflow.ComponentModel.WorkflowChanges" /> specifying dynamic updates for the workflow instance.</param>
      <exception cref="T:System.InvalidOperationException">The workflow runtime engine is not running.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
      <summary>Posts a message to the specified workflow queue synchronously.</summary>
      <param name="queueName">The name of the <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</param>
      <param name="item">The object to enqueue.</param>
      <param name="pendingWork">An <see cref="T:System.Workflow.Runtime.IPendingWork" /> that allows the sender to be notified when <paramref name="item" /> is delivered.</param>
      <param name="workItem">An object to be passed to the <see cref="T:System.Workflow.Runtime.IPendingWork" /> methods.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="queueName" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">The workflow runtime engine is not running.-or-The <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> specified by <paramref name="queueName" /> does not exist.-or-The <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> specified by <paramref name="queueName" /> is not enabled.</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
      <summary>Posts a message to the specified workflow queue when the workflow is idle. <see cref="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)" /> waits until the workflow reaches an idle point and enqueues after verifying that the workflow scheduler is idle (that is, no active operation is being executed).</summary>
      <param name="queueName">The name of the <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</param>
      <param name="item">The object to enqueue.</param>
      <param name="pendingWork">An <see cref="T:System.Workflow.Runtime.IPendingWork" /> that allows the sender to be notified when <paramref name="item" /> is delivered.</param>
      <param name="workItem">An object to be passed to the <see cref="T:System.Workflow.Runtime.IPendingWork" /> methods.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="queueName" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">The workflow runtime engine is not running.-or-The workflow instance is suspended.-or-The <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> specified by <paramref name="queueName" /> does not exist.-or-The <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> specified by <paramref name="queueName" /> is not enabled.</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowInstance.Equals(System.Object)">
      <summary>Returns a value that indicates whether the specified object is equal to the <see cref="T:System.Workflow.Runtime.WorkflowInstance" />.</summary>
      <returns>true if the specified object is equal to this <see cref="T:System.Workflow.Runtime.WorkflowInstance" />; otherwise, false.</returns>
      <param name="obj">The object to compare.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowInstance.GetHashCode">
      <summary>Returns the hash code for this workflow instance.</summary>
      <returns>The hash code for this <see cref="T:System.Workflow.Runtime.WorkflowInstance" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition">
      <summary>Retrieves the root activity for this workflow instance.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Activity" /> object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration">
      <summary>Returns the next point in time that this <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> is scheduled to be delivered a timer message.</summary>
      <returns>A DateTime value that represents the next <see cref="P:System.Workflow.Runtime.TimerEventSubscription.ExpiresAt" /> time this <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> will be delivered a timer message. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData">
      <summary>Gets a collection of <see cref="T:System.Workflow.Runtime.WorkflowQueueInfo" /> objects that contains the pending items and subscribed activities for the workflow queues associated with this workflow instance.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Workflow.Runtime.WorkflowQueueInfo" /> objects.</returns>
      <exception cref="T:System.InvalidOperationException">The workflow runtime engine is not running.</exception>
    </member>
    <member name="P:System.Workflow.Runtime.WorkflowInstance.InstanceId">
      <summary>Gets the unique identifier for the workflow instance.</summary>
      <returns>The <see cref="T:System.Guid" /> of the workflow instance.</returns>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowInstance.Load">
      <summary>Loads a previously unloaded workflow instance.</summary>
      <exception cref="T:System.InvalidOperationException">The workflow runtime engine is not running.</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles">
      <summary>Reload the tracking profiles for this workflow instance.</summary>
      <exception cref="T:System.InvalidOperationException">The workflow runtime engine is not running.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowInstance.Resume">
      <summary>Resumes execution of a previously suspended workflow instance.</summary>
      <exception cref="T:System.InvalidOperationException">The workflow runtime engine is not running.</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowInstance.Start">
      <summary>Starts the execution of the workflow instance.</summary>
      <exception cref="T:System.InvalidOperationException">The workflow runtime engine is not running.-or-The workflow instance has already been started.</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowInstance.Suspend(System.String)">
      <summary>Suspends the workflow instance.</summary>
      <param name="error">A description of the reason for suspending the workflow instance.</param>
      <exception cref="T:System.InvalidOperationException">The workflow runtime engine is not running. </exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowInstance.Terminate(System.String)">
      <summary>Terminates the workflow instance in a synchronous manner.</summary>
      <param name="error">A description of the reason for terminating the workflow instance.</param>
      <exception cref="T:System.InvalidOperationException">The workflow runtime engine is not running.</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowInstance.TryUnload">
      <summary>Unloads the workflow instance from memory to the persistence store when the instance is suspended or idle.</summary>
      <returns>true if the workflow instance was unloaded; otherwise, false.</returns>
      <exception cref="T:System.InvalidOperationException">There is no persistence service registered with the workflow runtime engine.</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowInstance.Unload">
      <summary>Unloads the workflow instance from memory to the persistence store. This call blocks until after the currently scheduled work is finished, or the end of a transaction scope.</summary>
      <exception cref="T:System.InvalidOperationException">There is no persistence service registered with the workflow runtime engine.</exception>
    </member>
    <member name="P:System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime">
      <summary>Gets the <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> for this workflow instance.</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> that represents the execution environment in which this workflow instance is running.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.WorkflowOwnershipException">
      <summary>The exception that is thrown when the workflow runtime engine attempts to load a workflow instance that is currently loaded by another workflow runtime engine instance. Additionally, this exception is thrown when the workflow runtime engine attempts to save a workflow after the ownership timeout that was specified while loading the workflow has expired. </summary>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowOwnershipException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.WorkflowOwnershipException" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowOwnershipException.#ctor(System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.WorkflowOwnershipException" /> class by using a specified workflow instance <see cref="T:System.Guid" />.</summary>
      <param name="instanceId">The <see cref="T:System.Guid" /> of the workflow instance for which this exception occurred.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowOwnershipException.#ctor(System.Guid,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.WorkflowOwnershipException" /> class by using a specified workflow instance <see cref="T:System.Guid" /> and a specified error message.</summary>
      <param name="instanceId">The <see cref="T:System.Guid" /> of the workflow instance for which this exception occurred.</param>
      <param name="message">The message that describes the error.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowOwnershipException.#ctor(System.Guid,System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.WorkflowOwnershipException" /> class by using a specified workflow instance <see cref="T:System.Guid" />, a specified error message, and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="instanceId">The <see cref="T:System.Guid" /> of the workflow instance for which this exception occurred.</param>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowOwnershipException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the WorkflowOwnershipException class with serialized data.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowOwnershipException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.WorkflowOwnershipException" /> class by using a specified error message.</summary>
      <param name="message">The message that describes the error.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowOwnershipException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.WorkflowOwnershipException" /> class by using a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowOwnershipException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the <see cref="T:System.Guid" /> of the workflow instance associated with this exception, and additional exception information.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is a null reference (Nothing in Visual Basic)</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.WorkflowOwnershipException.InstanceId">
      <summary>Gets the <see cref="T:System.Guid" /> of the workflow instance for which this exception was thrown.</summary>
      <returns>
        <see cref="P:System.Workflow.Runtime.WorkflowOwnershipException.InstanceId" /> is equivalent to the <see cref="P:System.Workflow.Runtime.WorkflowInstance.InstanceId" /> property of the workflow instance.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.WorkflowQueue">
      <summary>Represents a workflow queue.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.WorkflowQueue.Count">
      <summary>Gets the number of items contained in the <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</summary>
      <returns>The number of items in the workflow queue.</returns>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowQueue.Dequeue">
      <summary>Removes and returns the object at the beginning of the <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</summary>
      <returns>The object that is removed from the beginning of the <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> is empty.</exception>
    </member>
    <member name="P:System.Workflow.Runtime.WorkflowQueue.Enabled">
      <summary>Gets or sets a value that specifies whether the <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> is enabled.</summary>
      <returns>true if the <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> is enabled; otherwise false. </returns>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowQueue.Enqueue(System.Object)">
      <summary>Adds an object to the end of the <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</summary>
      <param name="item">The object to add to the <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> is not enabled.</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowQueue.Peek">
      <summary>Returns the object at the beginning of the <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> without removing it.</summary>
      <returns>The object at the beginning of the <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> is empty.</exception>
    </member>
    <member name="E:System.Workflow.Runtime.WorkflowQueue.QueueItemArrived">
      <summary>Occurs when an item is delivered on this <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</summary>
    </member>
    <member name="E:System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable">
      <summary>Occurs when an item is available on this <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</summary>
    </member>
    <member name="P:System.Workflow.Runtime.WorkflowQueue.QueueName">
      <summary>Gets the name of the workflow queue.</summary>
      <returns>The name of the <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.WorkflowQueue.QueuingService">
      <summary>Gets the queuing service associated with this <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.WorkflowQueuingService" /> that represents the queuing service associated with this <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</returns>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemArrived(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})">
      <summary>Registers a subscriber to the <see cref="E:System.Workflow.Runtime.WorkflowQueue.QueueItemArrived" /> event.</summary>
      <param name="eventListener">A subscriber for <see cref="T:System.Workflow.ComponentModel.QueueEventArgs" /> that implements the <see cref="T:System.Workflow.ComponentModel.IActivityEventListener`1" /> interface.</param>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemAvailable(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})">
      <summary>Registers a subscriber to the <see cref="E:System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable" /> event.</summary>
      <param name="eventListener">A subscriber for <see cref="T:System.Workflow.ComponentModel.QueueEventArgs" /> that implements the <see cref="T:System.Workflow.ComponentModel.IActivityEventListener`1" /> interface.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="eventListener" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemAvailable(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs},System.String)">
      <summary>Registers a subscriber to the <see cref="E:System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable" /> event.</summary>
      <param name="eventListener">A subscriber for <see cref="T:System.Workflow.ComponentModel.QueueEventArgs" /> that implements the <see cref="T:System.Workflow.ComponentModel.IActivityEventListener`1" /> interface.</param>
      <param name="subscriberQualifiedName">The <see cref="P:System.Workflow.ComponentModel.Activity.QualifiedName" /> of the activity that is subscribing to the <see cref="E:System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable" /> event or a null reference (Nothing in Visual Basic).</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="eventListener" /> is a null reference (Nothing).</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowQueue.UnregisterForQueueItemArrived(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})">
      <summary>Unregisters a subscriber to the <see cref="E:System.Workflow.Runtime.WorkflowQueue.QueueItemArrived" /> event.</summary>
      <param name="eventListener">A subscriber for <see cref="T:System.Workflow.ComponentModel.QueueEventArgs" /> that implements the <see cref="T:System.Workflow.ComponentModel.IActivityEventListener`1" /> interface.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="eventListener" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowQueue.UnregisterForQueueItemAvailable(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})">
      <summary>Unregisters a subscriber to the <see cref="E:System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable" /> event.</summary>
      <param name="eventListener">A subscriber for <see cref="T:System.Workflow.ComponentModel.QueueEventArgs" /> that implements the <see cref="T:System.Workflow.ComponentModel.IActivityEventListener`1" /> interface.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="eventListener" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="T:System.Workflow.Runtime.WorkflowQueueInfo">
      <summary>Contains information about a <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.WorkflowQueueInfo.Items">
      <summary>Gets a collection of the unconsumed items in the workflow queue.</summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> that contains the unconsumed items in the <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.WorkflowQueueInfo.QueueName">
      <summary>Gets the name of the <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> associated with this <see cref="T:System.Workflow.Runtime.WorkflowQueueInfo" />.</summary>
      <returns>The name of the <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.WorkflowQueueInfo.SubscribedActivityNames">
      <summary>Gets a collection that contains the qualified name each activity subscribed to the <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> that contains the qualified name of the each activity subscribed to the <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.WorkflowQueuingService">
      <summary>Provides the services for management of <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> objects.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowQueuingService.CreateWorkflowQueue(System.IComparable,System.Boolean)">
      <summary>Creates a <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> by using the specified name and transactional scope.</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</returns>
      <param name="queueName">The name of the queue.</param>
      <param name="transactional">A value that specifies whether the <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> is visible outside the scope of the current transaction.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="queueName" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">A <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> with the name specified by <paramref name="queueName" /> already exists.</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowQueuingService.DeleteWorkflowQueue(System.IComparable)">
      <summary>Deletes the specified <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</summary>
      <param name="queueName">The name of the <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> to delete.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="queueName" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowQueuingService.Exists(System.IComparable)">
      <summary>Tests for the existence of the specified <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</summary>
      <returns>true if the <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> exists; otherwise, false.</returns>
      <param name="queueName">The name of the <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="queueName" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowQueuingService.GetWorkflowQueue(System.IComparable)">
      <summary>Retrieves the specified <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</returns>
      <param name="queueName">The name of the <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> to retrieve.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="queueName" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">The specified <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> was not found.</exception>
    </member>
    <member name="F:System.Workflow.Runtime.WorkflowQueuingService.PendingMessagesProperty">
      <summary>Contains the unconsumed items in the workflow queues associated with this <see cref="T:System.Workflow.Runtime.WorkflowQueuingService" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.WorkflowRuntime">
      <summary>Represents the configurable execution environment provided by the workflow run-time engine for workflows.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowRuntime.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowRuntime.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> class by using the specified section of the application configuration file.</summary>
      <param name="configSectionName">The name of a valid workflowSettings section in the application configuration file.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="configSectionName" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">A valid workflowSettings section could not be found in the application configuration file.</exception>
      <exception cref="T:System.InvalidOperationException">A <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> already exists for this application domain.</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowRuntime.#ctor(System.Workflow.Runtime.Configuration.WorkflowRuntimeSection)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> class by using the settings in the specified <see cref="T:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection" />.</summary>
      <param name="settings">A <see cref="T:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="settings" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">A <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> already exists for this application domain.</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowRuntime.AddService(System.Object)">
      <summary>Adds the specified service to the workflow run-time engine.</summary>
      <param name="service">An object that represents the service to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="service" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> is disposed.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="service" /> is already registered with the workflow run-time engine.-or-<paramref name="service" /> is a core service and the workflow run-time engine is already running (<see cref="P:System.Workflow.Runtime.WorkflowRuntime.IsStarted" /> is true).</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Type)">
      <summary>Creates a new workflow instance by using the specified workflow <see cref="T:System.Type" />.</summary>
      <returns>The created workflow instance.</returns>
      <param name="workflowType">The <see cref="T:System.Type" /> of the workflow to create.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="workflowType" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object})">
      <summary>Creates a workflow instance by using the specified workflow <see cref="T:System.Type" /> and the arguments to the workflow contained in the specified <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <returns>The created workflow instance.</returns>
      <param name="workflowType">The <see cref="T:System.Type" /> of the workflow to create.</param>
      <param name="namedArgumentValues">A <see cref="T:System.Collections.Generic.Dictionary`2" /> of objects keyed by string that represents the arguments to the workflow.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="workflowType" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object},System.Guid)">
      <summary>Creates a workflow instance by using the specified parameters. </summary>
      <returns>The created workflow instance.</returns>
      <param name="workflowType">The <see cref="T:System.Type" /> of the workflow to create.</param>
      <param name="namedArgumentValues">A <see cref="T:System.Collections.Generic.Dictionary`2" /> of objects keyed by a string that represents the arguments to the workflow.</param>
      <param name="instanceId">The <see cref="T:System.Guid" /> of the specific <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> to create.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="workflowType" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Xml.XmlReader)">
      <summary>Creates a workflow instance by using the specified <see cref="T:System.Xml.XmlReader" />.</summary>
      <returns>The created workflow instance.</returns>
      <param name="workflowDefinitionReader">An <see cref="T:System.Xml.XmlReader" /> that contains the workflow definition.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="workflowDefinitionReader" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> is disposed.</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Xml.XmlReader,System.Xml.XmlReader,System.Collections.Generic.Dictionary{System.String,System.Object})">
      <summary>Creates a workflow instance by using the specified <see cref="T:System.Xml.XmlReader" /> objects and the arguments contained in the specified <see cref="T:System.Collections.Generic.Dictionary`2" />. </summary>
      <returns>The created workflow instance.</returns>
      <param name="workflowDefinitionReader">An <see cref="T:System.Xml.XmlReader" /> that contains the workflow definition.</param>
      <param name="rulesReader">An <see cref="T:System.Xml.XmlReader" />.</param>
      <param name="namedArgumentValues">A <see cref="T:System.Collections.Generic.Dictionary`2" /> of objects keyed by a string that represents the arguments to the workflow.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="workflowDefinitionReader" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> is disposed.</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Xml.XmlReader,System.Xml.XmlReader,System.Collections.Generic.Dictionary{System.String,System.Object},System.Guid)">
      <summary>Creates a workflow instance by using the specified parameters.</summary>
      <returns>The created workflow instance.</returns>
      <param name="workflowDefinitionReader">An <see cref="T:System.Xml.XmlReader" /> that contains the workflow definition.</param>
      <param name="rulesReader">An <see cref="T:System.Xml.XmlReader" />.</param>
      <param name="namedArgumentValues">A <see cref="T:System.Collections.Generic.Dictionary`2" /> of objects keyed by a string that represents the arguments to the workflow.</param>
      <param name="instanceId">The <see cref="T:System.Guid" /> of the specific <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> to create.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="workflowType" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowRuntime.Dispose">
      <summary>Releases the resources used by the <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowRuntime.GetAllServices``1">
      <summary>Retrieves all the services that are added to the workflow run-time engine that implement or derive from the specified generic type.</summary>
      <returns>Services that implement or derive from the specified generic type. </returns>
      <typeparam name="T">The service type.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> is disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowRuntime.GetAllServices(System.Type)">
      <summary>Retrieves all the services that are added to the workflow run-time engine that implement or derive from the specified <see cref="T:System.Type" />.</summary>
      <returns>Services that implement or derive from the specified <see cref="T:System.Type" />.</returns>
      <param name="serviceType">The <see cref="T:System.Type" /> that services must implement to be returned.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> is disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowRuntime.GetLoadedWorkflows">
      <summary>Gets a collection that contains all the workflow instances currently loaded in memory.</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> object for each workflow instance currently loaded in memory.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> is disposed.</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowRuntime.GetService``1">
      <summary>Retrieves a service of the specified generic type from the workflow run-time engine.</summary>
      <returns>A single service of the specified generic type.</returns>
      <typeparam name="T">The service type.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> has already been disposed of.</exception>
      <exception cref="T:System.InvalidOperationException">More than one service of the generic type was found.</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowRuntime.GetService(System.Type)">
      <summary>Retrieves a service of the specified <see cref="T:System.Type" /> from the workflow run-time engine.</summary>
      <returns>The service of the specified <see cref="T:System.Type" />.</returns>
      <param name="serviceType">The <see cref="T:System.Type" /> of the service to retrieve.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> is already disposed of.</exception>
      <exception cref="T:System.InvalidOperationException">More than one service of type <paramref name="serviceType" /> was found.</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow(System.Guid)">
      <summary>Retrieves the workflow instance that has the specified <see cref="T:System.Guid" />.</summary>
      <returns>The <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> that has the specified <see cref="T:System.Guid" />.</returns>
      <param name="instanceId">The <see cref="T:System.Guid" /> of a workflow instance.</param>
      <exception cref="T:System.InvalidOperationException">The workflow runtime is not started.</exception>
    </member>
    <member name="P:System.Workflow.Runtime.WorkflowRuntime.IsStarted">
      <summary>Gets a value that indicates whether the workflow run-time engine has been started.</summary>
      <returns>true if the workflow run-time engine has been started; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.WorkflowRuntime.Name">
      <summary>Gets or sets the name associated with the <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</summary>
      <returns>The name associated with this <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</returns>
      <exception cref="T:System.ObjectDisposedException">An attempt to set <see cref="P:System.Workflow.Runtime.WorkflowRuntime.Name" /> on a <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> that is disposed occurs.</exception>
      <exception cref="T:System.InvalidOperationException">An attempt to set <see cref="P:System.Workflow.Runtime.WorkflowRuntime.Name" /> while the workflow run-time engine is running occurs.</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowRuntime.RemoveService(System.Object)">
      <summary>Removes the specified service from the workflow run-time engine.</summary>
      <param name="service">An object that represents the service to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="service" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> is already disposed of.</exception>
      <exception cref="T:System.InvalidOperationException">The workflow run-time engine has started (<see cref="P:System.Workflow.Runtime.WorkflowRuntime.IsStarted" /> is true) and <paramref name="service" /> is a core service. - or -<paramref name="service" /> is not registered with the workflow run-time engine.</exception>
    </member>
    <member name="E:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled">
      <summary>Occurs when a service that is derived from the <see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" /> class calls <see cref="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent(System.Exception,System.Guid)" />.</summary>
    </member>
    <member name="E:System.Workflow.Runtime.WorkflowRuntime.Started">
      <summary>Occurs when the workflow run-time engine is started.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowRuntime.StartRuntime">
      <summary>Starts the workflow run-time engine and the workflow run-time engine services.</summary>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> is disposed.</exception>
      <exception cref="T:System.InvalidOperationException">There is more than one service workflow CommitWorkBatch service registered with this <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.-or-There is more than one scheduler service registered with this <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.-or- There is more than one persistence service registered with this <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />. </exception>
    </member>
    <member name="E:System.Workflow.Runtime.WorkflowRuntime.Stopped">
      <summary>Occurs when the workflow run-time engine is stopped.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowRuntime.StopRuntime">
      <summary>Stops the workflow run-time engine and the run-time services.</summary>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> is already disposed of.</exception>
    </member>
    <member name="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted">
      <summary>Occurs when a workflow instance is aborted.</summary>
    </member>
    <member name="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted">
      <summary>Occurs when a workflow instance has completed. </summary>
    </member>
    <member name="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowCreated">
      <summary>Occurs when a workflow instance is created.</summary>
    </member>
    <member name="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled">
      <summary>Occurs when a workflow instance enters the idle state.</summary>
    </member>
    <member name="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded">
      <summary>Occurs when the workflow instance is loaded into memory.</summary>
    </member>
    <member name="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted">
      <summary>Occurs when the state of a workflow instance is persisted.</summary>
    </member>
    <member name="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed">
      <summary>Occurs when execution of a workflow instance is resumed following a suspension.</summary>
    </member>
    <member name="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowStarted">
      <summary>Occurs when a workflow instance has been started.</summary>
    </member>
    <member name="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended">
      <summary>Occurs when a workflow instance is suspended.</summary>
    </member>
    <member name="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated">
      <summary>Occurs when a workflow instance is terminated.</summary>
    </member>
    <member name="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded">
      <summary>Occurs when the workflow instance is unloaded from memory.</summary>
    </member>
    <member name="T:System.Workflow.Runtime.WorkflowRuntimeEventArgs">
      <summary>Provides data for the <see cref="E:System.Workflow.Runtime.WorkflowRuntime.Started" /> and <see cref="E:System.Workflow.Runtime.WorkflowRuntime.Stopped" /> events.</summary>
    </member>
    <member name="P:System.Workflow.Runtime.WorkflowRuntimeEventArgs.IsStarted">
      <summary>Gets a value that indicates whether the workflow runtime engine is running.</summary>
      <returns>true if the workflow runtime engine is running; otherwise, false.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.WorkflowStatus">
      <summary>Specifies the status of a workflow instance.</summary>
    </member>
    <member name="F:System.Workflow.Runtime.WorkflowStatus.Running">
      <summary>The workflow instance is running.</summary>
    </member>
    <member name="F:System.Workflow.Runtime.WorkflowStatus.Completed">
      <summary>The workflow instance has completed.</summary>
    </member>
    <member name="F:System.Workflow.Runtime.WorkflowStatus.Suspended">
      <summary>The workflow instance has been suspended by a <see cref="T:System.Workflow.ComponentModel.SuspendActivity" /> activity, by a call to <see cref="M:System.Workflow.Runtime.WorkflowInstance.Suspend(System.String)" />,or by the workflow runtime engine.</summary>
    </member>
    <member name="F:System.Workflow.Runtime.WorkflowStatus.Terminated">
      <summary>The workflow instance has been terminated by a </summary>
    </member>
    <member name="F:System.Workflow.Runtime.WorkflowStatus.Created">
      <summary>The workflow instance has been created by a call to one of the overloaded <see cref="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Type)" /> methods.</summary>
    </member>
    <member name="T:System.Workflow.Runtime.WorkflowSuspendedEventArgs">
      <summary>Provides data for the <see cref="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended" /> event.</summary>
    </member>
    <member name="P:System.Workflow.Runtime.WorkflowSuspendedEventArgs.Error">
      <summary>Gets the description of why the workflow instance was suspended.</summary>
      <returns>The description of why the workflow instance was suspended.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.WorkflowTerminatedEventArgs">
      <summary>Provides data for the <see cref="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated" /> event.</summary>
    </member>
    <member name="P:System.Workflow.Runtime.WorkflowTerminatedEventArgs.Exception">
      <summary>Gets the exception that caused the workflow instance to be terminated.</summary>
      <returns>The <see cref="T:System.Exception" /> that caused the workflow instance to be terminated.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection">
      <summary>Represents a section, within a configuration file, that defines settings for the workflow run-time engine.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.CommonParameters">
      <summary>Gets the collection of common parameters used by services.</summary>
      <returns>The common parameters used by services. The default is a null reference (Nothing in Visual Basic).</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.EnablePerformanceCounters">
      <summary>Gets or sets a value that indicates whether performance counters are enabled.</summary>
      <returns>true if performance counters are enabled; otherwise false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.Name">
      <summary>Gets or sets the name of the workflow run-time engine.</summary>
      <returns>The name of the workflow run-time engine. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.Services">
      <summary>Gets the collection of services that are added to the workflow run-time engine when it is initialized.</summary>
      <returns>The services to be added to the workflow run-time engine.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate">
      <summary>Gets or sets a value that indicates whether validation occurs on the creation of the workflow instance.</summary>
      <returns>true if validation occurs on creation; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.WorkflowDefinitionCacheCapacity">
      <summary>Gets the number of workflow definitions that can be cached by the runtime.</summary>
      <returns>The number of workflows.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElement">
      <summary>Represents a configuration element for a service to be added to the workflow runtime engine.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElement" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)">
      <summary>Called when an unknown attribute is encountered while deserializing the <see cref="T:System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElement" />.</summary>
      <returns>
        <see cref="M:System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)" /> always returns true.</returns>
      <param name="name">The name of the unrecognized attribute.</param>
      <param name="value">The value of the unrecognized attribute.</param>
    </member>
    <member name="P:System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElement.Parameters">
      <summary>Gets the parameters for this service.</summary>
      <returns>A <see cref="T:System.Collections.Specialized.NameValueCollection" /> that specifies the parameters for the service.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElement.Type">
      <summary>Gets or sets the assembly-qualified type name of the service.</summary>
      <returns>The assembly-qualified type name of the service.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt to set <see cref="P:System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElement.Type" /> to a null reference is made.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElementCollection">
      <summary>Represents the collection of services to be added to the workflow runtime engine.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElementCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElementCollection" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElementCollection.Add(System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElement)">
      <summary>Adds a <see cref="T:System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElement" /> to this <see cref="T:System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElementCollection" />.</summary>
      <param name="serviceSettings">A <see cref="T:System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElement" /> that represents a service to be initialized and activated by the workflow runtime engine.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceSettings" /> is a null reference (Nothing in Visual Basic)</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElementCollection.CreateNewElement">
      <summary>Creates a new <see cref="T:System.Configuration.ConfigurationElement" />.</summary>
      <returns>An empty <see cref="T:System.Configuration.ConfigurationElement" />.</returns>
    </member>
    <member name="M:System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
      <summary>Returns a key for the specified <see cref="T:System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElement" />.</summary>
      <returns>The assembly-qualified type name of the service for the <see cref="T:System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElement" /> specified by <paramref name="settings" />.</returns>
      <param name="settings">A <see cref="T:System.Configuration.ConfigurationElement" /> for which to return a key.</param>
    </member>
    <member name="T:System.Workflow.Runtime.DebugEngine.ActivityHandlerDescriptor">
      <summary>Specifies the code-beside handler information in the <see cref="M:System.Workflow.Runtime.DebugEngine.IWorkflowDebugger.BeforeHandlerInvoked(System.Guid,System.Guid,System.String,System.Workflow.Runtime.DebugEngine.ActivityHandlerDescriptor)" /> and <see cref="M:System.Workflow.Runtime.DebugEngine.IWorkflowDebugger.UpdateHandlerMethodsForActivity(System.Guid,System.Guid,System.String,System.Collections.Generic.List{System.Workflow.Runtime.DebugEngine.ActivityHandlerDescriptor})" /> methods.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.Runtime.DebugEngine.ActivityHandlerDescriptor.Name">
      <summary>The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> representing the name of the handler method.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.Runtime.DebugEngine.ActivityHandlerDescriptor.Token">
      <summary>The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> representing the CLR metadata token identifier for the handler method.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.DebugEngine.DebugController">
      <summary>Relays workflow instance creation, execution and termination events to the debugger process. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.DebugEngine.DebugController.AttachToConduit(System.Uri)">
      <summary>Establishes the communication channel between the <see cref="T:System.Workflow.Runtime.DebugEngine.DebugController" /> object running in the workflow host application and the debugger process.</summary>
      <param name="url">A <see cref="T:System.Uri" /> of the remoting object running in the debugger process with which the <see cref="T:System.Workflow.Runtime.DebugEngine.DebugController" /> communicates.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.DebugEngine.DebugController.InitializeLifetimeService">
      <summary>Establishes a lifetime lease for the <see cref="T:System.Workflow.Runtime.DebugEngine.DebugController" /> object.</summary>
      <returns>An <see cref="T:System.Object" /> that implements <see cref="T:System.Runtime.Remoting.Lifetime.ILease" /> and is used to control the lifetime policy for the <see cref="T:System.Workflow.Runtime.DebugEngine.DebugController" /> object. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.DebugEngine.DebugEngineCallback">
      <summary>References a callback method that is invoked by the workflow expression evaluation component. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.DebugEngine.IExpressionEvaluationFrame">
      <summary>Defines the interface implemented by the workflow expression evaluation component that provides a context frame for expression evaluation.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.DebugEngine.IExpressionEvaluationFrame.CreateEvaluationFrame(System.Workflow.Runtime.DebugEngine.IInstanceTable,System.Workflow.Runtime.DebugEngine.DebugEngineCallback)">
      <summary>Creates a stack frame for workflow expression evaluation.</summary>
      <param name="instanceTable">An object that implements <see cref="T:System.Workflow.Runtime.DebugEngine.IInstanceTable" />. Not used.</param>
      <param name="callback">The default <see cref="T:System.Workflow.Runtime.DebugEngine.DebugEngineCallback" /> implemented by the workflow runtime.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.DebugEngine.IInstanceTable">
      <summary>Reserved for future use.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.DebugEngine.IInstanceTable.GetActivity(System.String,System.String)">
      <summary>Reserved for future use.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Activity" /> specified by <paramref name="activityName" /> in the workflow with an id of <paramref name="instanceId" />. </returns>
      <param name="instanceId">Unique identifier of the workflow containing the activity</param>
      <param name="activityName">Name of the <see cref="T:System.Workflow.ComponentModel.Activity" /></param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.DebugEngine.IWorkflowDebugger">
      <summary>Defines the interface that receives workflow instance creation, execution, and termination status information from a <see cref="T:System.Workflow.Runtime.DebugEngine.DebugController" /> object running inside the workflow host application.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.DebugEngine.IWorkflowDebugger.ActivityStatusChanged(System.Guid,System.Guid,System.Guid,System.String,System.String,System.Workflow.ComponentModel.ActivityExecutionStatus,System.Int32)">
      <summary>Called when the <see cref="P:System.Workflow.ComponentModel.Activity.ExecutionStatus" /> of an activity within the workflow changes.</summary>
      <param name="programId">An internally generated <see cref="T:System.Guid" /> associated with a <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> instance.</param>
      <param name="scheduleTypeId">An internally generated <see cref="T:System.Guid" /> associated with a workflow type. </param>
      <param name="instanceId">A <see cref="T:System.Guid" /> associated with the currently running workflow instance.</param>
      <param name="activityQualifiedName">A <see cref="T:System.String" /> containing the fully qualified name of the current activity.</param>
      <param name="hierarchicalActivityId">A <see cref="T:System.String" /> containing the qualified name of the parent activity.</param>
      <param name="status">The <see cref="P:System.Workflow.ComponentModel.Activity.ExecutionStatus" /> of the current activity.</param>
      <param name="stateReaderId">An <see cref="T:System.Int32" /> containing the activity execution context ID associated with the current activity.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.DebugEngine.IWorkflowDebugger.AssemblyLoaded(System.Guid,System.String,System.Boolean)">
      <summary>Called when an assembly is loaded in the app domain corresponding to the <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> in the workflow host application.</summary>
      <param name="programId">An internally generated <see cref="T:System.Guid" /> associated with a <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> instance.</param>
      <param name="assemblyPath">A <see cref="T:System.String" /> containing the path on disk from where the assembly is loaded</param>
      <param name="fromGlobalAssemblyCache">A <see cref="T:System.Boolean" /> that indicates whether the assembly is loaded from the global assembly cache.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.DebugEngine.IWorkflowDebugger.BeforeActivityStatusChanged(System.Guid,System.Guid,System.Guid,System.String,System.String,System.Workflow.ComponentModel.ActivityExecutionStatus,System.Int32)">
      <summary>Called before the <see cref="P:System.Workflow.ComponentModel.Activity.ExecutionStatus" /> of an activity within the workflow changes.</summary>
      <param name="programId">An internally generated <see cref="T:System.Guid" /> associated with a <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> instance.</param>
      <param name="scheduleTypeId">An internally generated <see cref="T:System.Guid" /> associated with a workflow type. </param>
      <param name="instanceId">A <see cref="T:System.Guid" /> associated with the currently running workflow instance.</param>
      <param name="activityQualifiedName">A <see cref="T:System.String" /> containing the fully qualified name of the current activity.</param>
      <param name="hierarchicalActivityId">A <see cref="T:System.String" /> containing the qualified name of the parent activity.</param>
      <param name="status">The <see cref="P:System.Workflow.ComponentModel.Activity.ExecutionStatus" /> of the current activity.</param>
      <param name="stateReaderId">An <see cref="T:System.Int32" /> containing the activity execution context ID associated with the current activity.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.DebugEngine.IWorkflowDebugger.BeforeHandlerInvoked(System.Guid,System.Guid,System.String,System.Workflow.Runtime.DebugEngine.ActivityHandlerDescriptor)">
      <summary>Called before a handler in the code-beside is about to be invoked.</summary>
      <param name="programId">An internally generated <see cref="T:System.Guid" /> associated with a <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> instance.</param>
      <param name="scheduleTypeId">An internally generated <see cref="T:System.Guid" /> associated with a workflow type. </param>
      <param name="activityQualifiedName">A <see cref="T:System.String" /> containing the fully qualified name of the current activity.</param>
      <param name="handlerMethod">An <see cref="T:System.Workflow.Runtime.DebugEngine.ActivityHandlerDescriptor" /> that contains the information regarding the code-beside handler method that is about to be invoked.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.DebugEngine.IWorkflowDebugger.HandlerInvoked(System.Guid,System.Guid,System.Int32,System.String)">
      <summary>Called after a handler in the code-beside is invoked.</summary>
      <param name="programId">An internally generated <see cref="T:System.Guid" /> associated with a <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> instance.</param>
      <param name="instanceId">A <see cref="T:System.Guid" /> associated with the currently running workflow instance.</param>
      <param name="threadId">An <see cref="T:System.Int32" /> containing the ID of the thread on which the handler was invoked.</param>
      <param name="activityQualifiedName">A <see cref="T:System.String" /> containing the fully qualified name of the current activity.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.DebugEngine.IWorkflowDebugger.InstanceCompleted(System.Guid,System.Guid)">
      <summary>Called when a workflow instance completes.</summary>
      <param name="programId">An internally generated <see cref="T:System.Guid" /> associated with a <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> instance.</param>
      <param name="instanceId">A <see cref="T:System.Guid" /> associated with the currently running workflow instance.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.DebugEngine.IWorkflowDebugger.InstanceCreated(System.Guid,System.Guid,System.Guid)">
      <summary>Called when a workflow instance is created.</summary>
      <param name="programId">An internally generated <see cref="T:System.Guid" /> associated with a <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> instance.</param>
      <param name="instanceId">A <see cref="T:System.Guid" /> associated with the currently running workflow instance.</param>
      <param name="scheduleTypeId">An internally generated <see cref="T:System.Guid" /> associated with a workflow type. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.DebugEngine.IWorkflowDebugger.InstanceDynamicallyUpdated(System.Guid,System.Guid,System.Guid)">
      <summary>Called when the workflow instance is dynamically updated with a workflow change.</summary>
      <param name="programId">An internally generated <see cref="T:System.Guid" /> associated with a <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> instance.</param>
      <param name="instanceId">A <see cref="T:System.Guid" /> associated with the currently running workflow instance.</param>
      <param name="scheduleTypeId">An internally generated <see cref="T:System.Guid" /> associated with a workflow type. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.DebugEngine.IWorkflowDebugger.ScheduleTypeLoaded(System.Guid,System.Guid,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.String)">
      <summary>Called when a new workflow type is loaded by the workflow runtime engine in the workflow host application.</summary>
      <param name="programId">An internally generated <see cref="T:System.Guid" /> associated with a <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> instance.</param>
      <param name="scheduleTypeId">An internally generated <see cref="T:System.Guid" /> associated with a workflow type. </param>
      <param name="assemblyFullName">A <see cref="T:System.String" /> containing the assembly name from which the workflow type was loaded.</param>
      <param name="fileName">A <see cref="T:System.String" /> containing the full path of the markup file corresponding to the workflow, or null if the workflow type was a code-only workflow.</param>
      <param name="md5Digest">A <see cref="T:System.String" /> containing the md5 hash code for the workflow markup definition, or null if the workflow type was a code-only workflow.</param>
      <param name="isDynamic">A <see cref="T:System.Boolean" /> that indicates whether the workflow definition was modified dynamically.</param>
      <param name="scheduleNamespace">A <see cref="T:System.String" /> containing the fully qualified name of the workflow type.</param>
      <param name="scheduleName">A <see cref="T:System.String" /> containing the workflow type name.</param>
      <param name="workflowMarkup">A <see cref="T:System.String" /> containing the XAML serialized format of the workflow type.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.DebugEngine.IWorkflowDebugger.SetInitialActivityStatus(System.Guid,System.Guid,System.Guid,System.String,System.String,System.Workflow.ComponentModel.ActivityExecutionStatus,System.Int32)">
      <summary>Called to set the initial status of the activities in a workflow. </summary>
      <param name="programId">An internally generated <see cref="T:System.Guid" /> associated with a <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> instance.</param>
      <param name="scheduleTypeId">An internally generated <see cref="T:System.Guid" /> associated with a workflow type. </param>
      <param name="instanceId">A <see cref="T:System.Guid" /> associated with the currently running workflow instance.</param>
      <param name="activityQualifiedName">A <see cref="T:System.String" /> containing the fully qualified name of the current activity.</param>
      <param name="hierarchicalActivityId">A <see cref="T:System.String" /> containing the qualified name of the parent activity.</param>
      <param name="status">The <see cref="P:System.Workflow.ComponentModel.Activity.ExecutionStatus" /> of the current activity.</param>
      <param name="stateReaderId">An <see cref="T:System.Int32" /> containing the activity execution context ID associated with the current activity.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.DebugEngine.IWorkflowDebugger.UpdateHandlerMethodsForActivity(System.Guid,System.Guid,System.String,System.Collections.Generic.List{System.Workflow.Runtime.DebugEngine.ActivityHandlerDescriptor})">
      <summary>Called when an activity enters the Executing state.</summary>
      <param name="programId">An internally generated <see cref="T:System.Guid" /> associated with a <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> instance.</param>
      <param name="scheduleTypeId">An internally generated <see cref="T:System.Guid" /> associated with a workflow type. </param>
      <param name="activityQualifiedName">A <see cref="T:System.String" /> containing the fully qualified name of the current activity.</param>
      <param name="handlerMethods">A <see cref="T:System.Collections.Generic.List`1" /> of handlers associated with an activity.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.DebugEngine.IWorkflowDebuggerService">
      <summary>Notifies workflow debugger that code condition evaluation events have occurred.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.DebugEngine.IWorkflowDebuggerService.NotifyHandlerInvoked">
      <summary>Called after a code condition handler is invoked.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.DebugEngine.IWorkflowDebuggerService.NotifyHandlerInvoking(System.Delegate)">
      <summary>Called before a code condition handler is invoked.</summary>
      <param name="delegateHandler">The code condition handler that will be invoked.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.DebugEngine.WorkflowDebuggerSteppingAttribute">
      <summary>Specifies the debug stepping behavior for composite activities whose child activities can execute concurrently.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.DebugEngine.WorkflowDebuggerSteppingAttribute.#ctor(System.Workflow.Runtime.DebugEngine.WorkflowDebuggerSteppingOption)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.DebugEngine.WorkflowDebuggerSteppingAttribute" /> class by using a <see cref="T:System.Workflow.Runtime.DebugEngine.WorkflowDebuggerSteppingOption" /> enumeration value.</summary>
      <param name="steppingOption">A <see cref="T:System.Workflow.Runtime.DebugEngine.WorkflowDebuggerSteppingOption" /> enumeration value specifying the stepping behavior for the concurrently executing child activities.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.DebugEngine.WorkflowDebuggerSteppingAttribute.SteppingOption">
      <summary>Gets the stepping behavior for the composite activity.</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.DebugEngine.WorkflowDebuggerSteppingOption" /> enumeration value.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.DebugEngine.WorkflowDebuggerSteppingOption">
      <summary>Specifies how the workflow debugger will step through concurrently executing child activities of a composite activity.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.Runtime.DebugEngine.WorkflowDebuggerSteppingOption.Sequential">
      <summary>The child activities will be debugged sequentially.</summary>
    </member>
    <member name="F:System.Workflow.Runtime.DebugEngine.WorkflowDebuggerSteppingOption.Concurrent">
      <summary>The child activities will be debugged concurrently.</summary>
    </member>
    <member name="T:System.Workflow.Runtime.Hosting.DefaultWorkflowCommitWorkBatchService">
      <summary>Represents the default version of <see cref="T:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService" /> created by the workflow runtime engine if no other WorkflowCommitWorkBatch service is added.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.DefaultWorkflowCommitWorkBatchService.#ctor">
      <summary>Initializes a <see cref="T:System.Workflow.Runtime.Hosting.DefaultWorkflowCommitWorkBatchService" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.DefaultWorkflowCommitWorkBatchService.#ctor(System.Collections.Specialized.NameValueCollection)">
      <summary>Initializes a SharedConnectionWorkflowCommitWorkBatchService class using a collection of parameters for initialization.</summary>
      <param name="parameters">
        <see cref="T:System.Collections.Specialized.NameValueCollection" />. The constructor is invoked when the workflow runtime engine loads services from an application configuration file. The valid key is <see cref="P:System.Workflow.Runtime.Hosting.DefaultWorkflowCommitWorkBatchService.EnableRetries" />. This requests the <see cref="T:System.Workflow.Runtime.Hosting.DefaultWorkflowCommitWorkBatchService" /> to retry in case of a failed database connection.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.DefaultWorkflowCommitWorkBatchService.CommitWorkBatch(System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService.CommitWorkBatchCallback)">
      <summary>Creates a work batch if one does not exist.</summary>
      <param name="commitWorkBatchCallback">The <see cref="T:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService.CommitWorkBatchCallback" />  delegate to call to commit the work batch.</param>
    </member>
    <member name="P:System.Workflow.Runtime.Hosting.DefaultWorkflowCommitWorkBatchService.EnableRetries">
      <summary>Gets and sets a value specifying whether the <see cref="T:System.Workflow.Runtime.Hosting.DefaultWorkflowCommitWorkBatchService" /> will retry committing a work batch. </summary>
      <returns>true if the service should retry committing the work batch; otherwise, false. The default is false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.DefaultWorkflowCommitWorkBatchService.OnStopped">
      <summary>Represents the method called when the workflow runtime raises the <see cref="E:System.Workflow.Runtime.WorkflowRuntime.Stopped" /> event.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.DefaultWorkflowCommitWorkBatchService.Start">
      <summary>Represents the method called to start the service.</summary>
    </member>
    <member name="T:System.Workflow.Runtime.Hosting.DefaultWorkflowLoaderService">
      <summary>Represents the default version of <see cref="T:System.Workflow.Runtime.Hosting.WorkflowLoaderService" /> created by the workflow runtime engine if no other workflow loader service is added.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.DefaultWorkflowLoaderService.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.DefaultWorkflowLoaderService" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.DefaultWorkflowLoaderService.CreateInstance(System.Type)">
      <summary>Creates a root activity definition tree by using the specified workflow <see cref="T:System.Type" />.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Activity" /> object that represents the root activity definition tree. </returns>
      <param name="workflowType">The <see cref="T:System.Type" /> of the workflow to create.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.DefaultWorkflowLoaderService.CreateInstance(System.Xml.XmlReader,System.Xml.XmlReader)">
      <summary>Creates a new root activity definition tree by deserializing the .xoml and the .rules files.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Activity" /> object that represents the root activity definition tree. </returns>
      <param name="workflowDefinitionReader">
        <see cref="T:System.Xml.XmlReader" /> that holds the workflow XOML definition (.xoml file).</param>
      <param name="rulesReader">
        <see cref="T:System.Xml.XmlReader" /> that holds the workflow rules (.rules file).</param>
    </member>
    <member name="T:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService">
      <summary>Creates and manages the threads that run workflow instances on the workflow runtime engine. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService.#ctor(System.Collections.Specialized.NameValueCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService" /> class. </summary>
      <param name="parameters">A <see cref="T:System.Collections.Specialized.NameValueCollection" /> that holds initialization information.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameters" /> contains a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">One of the key values in the <paramref name="parameters" /> collection contains a null reference (Nothing).--or--One of the key values in the <paramref name="parameters" /> collection does not match the default key for <see cref="T:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService" />.</exception>
      <exception cref="T:System.FormatException">One of the parameters cannot be converted to a double-precision floating point number that matches <see cref="P:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService.MaxSimultaneousWorkflows" />. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService.MaxSimultaneousWorkflows" /> is less than 1.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService" /> class by using the specified maximum number of workflow instances that the service can run simultaneously. </summary>
      <param name="maxSimultaneousWorkflows">An integer that determines the maximum number of workflow instances that can be stored in the thread pool queue.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxSimultaneousWorkflows" /> is less than 1.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService.Cancel(System.Guid)">
      <summary>Cancels the specified existing workflow instance work item.</summary>
      <param name="timerId">The <see cref="T:System.Guid" /> associated with the existing scheduled work item to cancel.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="timerId" /> is an empty GUID.</exception>
    </member>
    <member name="P:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService.MaxSimultaneousWorkflows">
      <summary>Gets the maximum number of workflow instances that can be stored in the thread pool queue.</summary>
      <returns>An integer that represents the maximum number of workflow instances that can be stored in the thread pool queue.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService.OnStarted">
      <summary>Notifies the <see cref="T:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService" /> that a workflow instance has started to run.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService.Schedule(System.Threading.WaitCallback,System.Guid)">
      <summary>Adds a workflow instance to the pending work items queue using the specified workflow instance using the specified multicast delegate. </summary>
      <param name="callback">A <see cref="T:System.Threading.WaitCallback" /> multicast delegate that represents the method to run.</param>
      <param name="workflowInstanceId">A <see cref="T:System.Guid" /> that represents the workflow instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService.Schedule(System.Threading.WaitCallback,System.Guid,System.DateTime,System.Guid)">
      <summary>Adds the specified workflow instance to the pending work item queue using the specified multicast delegate, <see cref="T:System.DateTime" /> and GUIDs. </summary>
      <param name="callback">A <see cref="T:System.Threading.WaitCallback" /> multicast delegate that represents the method to run.</param>
      <param name="workflowInstanceId">A <see cref="T:System.Guid" /> that represents the workflow instance.</param>
      <param name="whenUtc">The <see cref="T:System.DateTime" /> that indicates the time to begin running the thread.</param>
      <param name="timerId">A <see cref="T:System.Guid" /> that represents the scheduled thread.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> contains a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="workflowInstanceId" /> or <paramref name="timerId" /> is an empty GUID.</exception>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService.Stop">
      <summary>Stops the currently running thread on the workflow instance and any timers that are running. </summary>
    </member>
    <member name="T:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService">
      <summary>Provides a threading service that allows the host application creating a workflow instance to donate the <see cref="T:System.Threading.Thread" /> on which the workflow instance is run. Using this threading service, host applications can run a workflow instance on a single <see cref="T:System.Threading.Thread" /> in synchronous mode (although if the workflow contains a delay activity, the work is postponed until after the delay activity is executed on a separate thread spawned by <see cref="System.Threading.Timer" />).This mode blocks the execution of the host application until the workflow instance becomes idle. Subsequently, the workflow instance can only be executed using the <see cref="M:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.RunWorkflow(System.Guid)" /> method of this service.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService" /> class. </summary>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService" /> class.</summary>
      <param name="useActiveTimers">Boolean that determines how delay activities are handled. If true, the scheduler service automatically resumes workflows after delay activities expire (by using an in-memory timer). If false, the host must manually resume the workflow after the delay activities expire.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.#ctor(System.Collections.Specialized.NameValueCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService" /> class.</summary>
      <param name="parameters">A <see cref="T:System.Collections.Specialized.NameValueCollection" /> that contains parameters for <paramref name="useActiveTimers" />. If true, the scheduler service automatically resumes workflows after delay activities expire (by using an in-memory timer). If false, the host must manually resume the workflow after the delay activities expire.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Cancel(System.Guid)">
      <summary>Cancels the specified existing workflow instance work item.</summary>
      <param name="timerId">The <see cref="T:System.Guid" /> associated with the existing scheduled work item to cancel.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.OnStarted">
      <summary>Overloaded from <see cref="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted" />. This method is called whenever <see cref="M:System.Workflow.Runtime.WorkflowRuntime.StartRuntime" /> is called and is used by the <see cref="T:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService" /> to do work that is needed when the <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> starts.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.RunWorkflow(System.Guid)">
      <summary>Runs the specified workflow instance.</summary>
      <returns>true if the workflow starts running; otherwise, false.</returns>
      <param name="workflowInstanceId">The <see cref="T:System.Guid" /> for the workflow instance to run.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="workflowInstanceId" /> is an empty GUID.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Schedule(System.Threading.WaitCallback,System.Guid)">
      <summary>Adds a workflow instance to the pending work items queue using the specified workflow instance using the specified multicast delegate. </summary>
      <param name="callback">A <see cref="T:System.Threading.WaitCallback" /> multicast delegate that represents the method to run.</param>
      <param name="workflowInstanceId">A <see cref="T:System.Guid" /> that represents the workflow instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Schedule(System.Threading.WaitCallback,System.Guid,System.DateTime,System.Guid)">
      <summary>Adds the specified workflow instance to the pending work item queue using the specified multicast delegate, <see cref="T:System.DateTime" /> and GUIDs. </summary>
      <param name="callback">A <see cref="T:System.Threading.WaitCallback" /> multicast delegate that represents the method to run.</param>
      <param name="workflowInstanceId">A <see cref="T:System.Guid" /> that represents the workflow instance.</param>
      <param name="whenUtc">The <see cref="T:System.DateTime" /> that indicates the time to begin running the thread.</param>
      <param name="timerId">A <see cref="T:System.Guid" /> that represents the scheduled thread.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> contains a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="workflowInstanceId" /> or <paramref name="timerId" /> is an empty GUID.</exception>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Stop">
      <summary>Overloaded from <see cref="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop" />. The <see cref="T:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService" /> uses this method to do work that is needed when the <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> stops.</summary>
    </member>
    <member name="T:System.Workflow.Runtime.Hosting.PersistenceException">
      <summary>The exception that is thrown when the persistence service cannot fulfill a request. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.PersistenceException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.PersistenceException" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.PersistenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.PersistenceException" /> class by using the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and the specified <see cref="T:System.Runtime.Serialization.StreamingContext" />.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> that holds contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.PersistenceException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.PersistenceException" /> class by using the specified message.</summary>
      <param name="message">A description of the cause of the exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.PersistenceException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.PersistenceException" /> by using the specified message and <see cref="T:System.Exception" />.</summary>
      <param name="message">A description of the cause of the exception.</param>
      <param name="innerException">The exception that caused the <see cref="T:System.Workflow.Runtime.Hosting.PersistenceException" /> to be thrown.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.Hosting.SharedConnectionWorkflowCommitWorkBatchService">
      <summary>Represents the shared-connection version of the <see cref="T:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService" /> service used by the runtime. In this context, shared-connection means that the service uses the same SQL connection for both the tracking and persistence services. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.SharedConnectionWorkflowCommitWorkBatchService.#ctor(System.Collections.Specialized.NameValueCollection)">
      <summary>Initializes a <see cref="T:System.Workflow.Runtime.Hosting.SharedConnectionWorkflowCommitWorkBatchService" /> class.</summary>
      <param name="parameters">
        <see cref="T:System.Collections.Specialized.NameValueCollection" />. The constructor is invoked when the workflow runtime engine loads services from an application configuration file. The valid key is <paramref name="EnableRetries" />. This requests that the <see cref="T:System.Workflow.Runtime.Hosting.SharedConnectionWorkflowCommitWorkBatchService" /> retry in case of a failed database connection.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.SharedConnectionWorkflowCommitWorkBatchService.#ctor(System.String)">
      <summary>Initializes a <see cref="T:System.Workflow.Runtime.Hosting.SharedConnectionWorkflowCommitWorkBatchService" /> class using a database connection string.</summary>
      <param name="connectionString">Database connection string.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.SharedConnectionWorkflowCommitWorkBatchService.CommitWorkBatch(System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService.CommitWorkBatchCallback)">
      <summary>Creates a transaction if one does not exist.</summary>
      <param name="commitWorkBatchCallback">The <see cref="T:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService.CommitWorkBatchCallback" />  delegate to call to commit the work batch.</param>
    </member>
    <member name="P:System.Workflow.Runtime.Hosting.SharedConnectionWorkflowCommitWorkBatchService.EnableRetries">
      <summary>Gets and sets a value specifying whether the <see cref="T:System.Workflow.Runtime.Hosting.SharedConnectionWorkflowCommitWorkBatchService" /> will retry committing a work batch.</summary>
      <returns>true if the service should retry committing the work batch; otherwise, false. The default is false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.SharedConnectionWorkflowCommitWorkBatchService.OnStopped">
      <summary>Represents the method called when the workflow runtime raises the <see cref="E:System.Workflow.Runtime.WorkflowRuntime.Stopped" /> event.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.SharedConnectionWorkflowCommitWorkBatchService.Start">
      <summary>Represents the method called to start the service.</summary>
    </member>
    <member name="T:System.Workflow.Runtime.Hosting.SqlPersistenceWorkflowInstanceDescription">
      <summary>Describes the workflow instances that are stored in the <see cref="T:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.Hosting.SqlPersistenceWorkflowInstanceDescription.IsBlocked">
      <summary>Gets a value that shows whether the workflow instance is blocked.</summary>
      <returns>true if the workflow instance is blocked; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.Hosting.SqlPersistenceWorkflowInstanceDescription.NextTimerExpiration">
      <summary>Gets the time in UTC format at which the next timer will expire.</summary>
      <returns>The time in UTC format at which the next timer will expire.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.Hosting.SqlPersistenceWorkflowInstanceDescription.Status">
      <summary>Gets the status of the workflow instance.</summary>
      <returns>The status of the workflow instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.Hosting.SqlPersistenceWorkflowInstanceDescription.SuspendOrTerminateDescription">
      <summary>Gets the description for the suspension or termination of the <see cref="T:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService" />.</summary>
      <returns>The description for the suspension or termination of the <see cref="T:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.Hosting.SqlPersistenceWorkflowInstanceDescription.WorkflowInstanceId">
      <summary>Gets the workflow instance identifier.</summary>
      <returns>The workflow instance identifier.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService">
      <summary>Represents a persistence service that uses a SQL database to store workflow state information.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService.#ctor(System.Collections.Specialized.NameValueCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService" /> class by using the specified parameters.</summary>
      <param name="parameters">A <see cref="T:System.Collections.Specialized.NameValueCollection" /> that contains startup parameters.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameters" /> contains an invalid database connection string.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameters " />is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService" /> class by using the database connection string.</summary>
      <param name="connectionString">A valid database connection string.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="connectionString" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService.#ctor(System.String,System.Boolean,System.TimeSpan,System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService" /> class using a database connection string and other parameters. </summary>
      <param name="connectionString">A valid database connection string.</param>
      <param name="unloadOnIdle">true to unload the workflow when it is in an idle state.</param>
      <param name="instanceOwnershipDuration">The length of time that locks are maintained on idle workflows.</param>
      <param name="loadingInterval">The frequency at which the persistence service polls the database for workflows with expired timers.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="connectionString" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService.EnableRetries">
      <summary>Gets and sets a value that specifies whether the <see cref="T:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService" /> retries committing a work batch. </summary>
      <returns>true if the service should retry committing the work batch; otherwise, false. The default is false.</returns>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService.GetAllWorkflows">
      <summary>Retrieves instance descriptions of all persisted workflows.</summary>
      <returns>A list of all persisted workflows.</returns>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService.LoadCompletedContextActivity(System.Guid,System.Workflow.ComponentModel.Activity)">
      <summary>Retrieves the specified completed scope from the database.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Activity" /> that represents the completed scope.</returns>
      <param name="id">The <see cref="T:System.Guid" /> of the scope activity.</param>
      <param name="outerActivity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> that encloses the scope activity.</param>
      <exception cref="T:System.InvalidOperationException">A scope that matches <paramref name="id" /> could not be found in the database.</exception>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService.LoadExpiredTimerWorkflowIds">
      <summary>Retrieves a list of ids for workflows with expired timers.</summary>
      <returns>A list of ids for workflows with expired timers.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService.LoadingInterval">
      <summary>Gets the length of the loading interval.</summary>
      <returns>The frequency at which the persistence service polls the database for workflows with expired timers.</returns>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService.LoadWorkflowInstanceState(System.Guid)">
      <summary>Retrieves the specified workflow instance state from the database.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Activity" /> that represents the root activity of the workflow instance.</returns>
      <param name="id">The <see cref="T:System.Guid" /> of the workflow instance state.</param>
      <exception cref="T:System.InvalidOperationException">A workflow instance state that matches <paramref name="id" /> could not be found in the database.</exception>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService.OnStarted">
      <summary>Starts a new timer and recovers running workflow instances.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService.SaveCompletedContextActivity(System.Workflow.ComponentModel.Activity)">
      <summary>Saves the state of the specified completed scope.</summary>
      <param name="completedScopeActivity">An <see cref="T:System.Workflow.ComponentModel.Activity" /> that represents the completed scope.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService.SaveWorkflowInstanceState(System.Workflow.ComponentModel.Activity,System.Boolean)">
      <summary>Saves the specified workflow instance state.</summary>
      <param name="rootActivity">The root activity of the workflow instance.</param>
      <param name="unlock">true if the workflow instance should not be locked; false if the workflow instance should be locked.</param>
    </member>
    <member name="P:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService.ServiceInstanceId">
      <summary>Gets the service instance identifier.</summary>
      <returns>The service instance identifier.</returns>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService.Start">
      <summary>Starts the <see cref="T:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService" />.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService.Stop">
      <summary>Stops the service and the timer. </summary>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService.System#Workflow#Runtime#IPendingWork#Commit(System.Transactions.Transaction,System.Collections.ICollection)">
      <summary>Writes an <see cref="T:System.Collections.ICollection" /> of serialized state objects to the database.</summary>
      <param name="transaction">A <see cref="T:System.Transactions.Transaction" />.</param>
      <param name="items">The <see cref="T:System.Collections.ICollection" /> of work items to be written to the database.</param>
      <exception cref="T:System.Workflow.Runtime.Hosting.PersistenceException">An error occurred while trying to write to the database.</exception>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService.System#Workflow#Runtime#IPendingWork#Complete(System.Boolean,System.Collections.ICollection)">
      <summary>Completes the work batch and releases any resources.</summary>
      <param name="succeeded">true if the commit succeeded; otherwise, false.</param>
      <param name="items">An <see cref="T:System.Collections.ICollection" /> of serialized state objects.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService.System#Workflow#Runtime#IPendingWork#MustCommit(System.Collections.ICollection)">
      <summary>Returns a value that indicates whether the collection of serialized state objects should be written to the database.</summary>
      <returns>true indicates that the batch should be committed; <see cref="M:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService.System.Workflow.Runtime.IPendingWork.MustCommit(System.Collections.ICollection)" /> always returns true. </returns>
      <param name="items">An <see cref="T:System.Collections.ICollection" /> of serialized state objects to be written to the database.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService.UnloadOnIdle(System.Workflow.ComponentModel.Activity)">
      <summary>Returns a value that indicates whether the workflow is unloaded when it is in an idle state.</summary>
      <returns>true if the workflow is unloaded when it is in an idle state; otherwise, false.</returns>
      <param name="activity">An <see cref="T:System.Workflow.ComponentModel.Activity" /> that represents the root activity of the workflow instance.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService.UnlockWorkflowInstanceState(System.Workflow.ComponentModel.Activity)">
      <summary>Unlocks access to the specified workflow instance state.</summary>
      <param name="rootActivity">An <see cref="T:System.Workflow.ComponentModel.Activity" /> that represents the root activity of the workflow instance.</param>
    </member>
    <member name="T:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService">
      <summary>Allows custom logic for the commitment of work batches.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService.CommitWorkBatch(System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService.CommitWorkBatchCallback)">
      <summary>Called to commit the work batch.</summary>
      <param name="commitWorkBatchCallback">The <see cref="T:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService.CommitWorkBatchCallback" />  delegate to call to commit the work batch.</param>
    </member>
    <member name="T:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService.CommitWorkBatchCallback">
      <summary>Commits a <see cref="T:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService" /> work batch.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.Hosting.WorkflowLoaderService">
      <summary>The abstract base class from which workflow loader services are derived.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowLoaderService.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.WorkflowLoaderService" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowLoaderService.CreateInstance(System.Type)">
      <summary>Creates a new workflow instance by using the specified workflow <see cref="T:System.Type" />.</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> object that represents the workflow instance created. </returns>
      <param name="workflowType">The <see cref="T:System.Type" /> of the workflow to create.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowLoaderService.CreateInstance(System.Xml.XmlReader,System.Xml.XmlReader)">
      <summary>Creates a workflow instance by using the specified <see cref="T:System.Xml.XmlReader" />.</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> object that represents the workflow instance created.</returns>
      <param name="workflowDefinitionReader">An <see cref="T:System.Xml.XmlReader" /> that contains the workflow definition.</param>
      <param name="rulesReader">An <see cref="T:System.Xml.XmlReader" />.</param>
    </member>
    <member name="T:System.Workflow.Runtime.Hosting.WorkflowPersistenceService">
      <summary>The abstract base class from which all persistence services are derived.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.WorkflowPersistenceService" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetDefaultSerializedForm(System.Workflow.ComponentModel.Activity)">
      <summary>Retrieves the serialized default form of the <see cref="T:System.Workflow.ComponentModel.Activity" />. </summary>
      <returns>The serialized default form of the <see cref="T:System.Workflow.ComponentModel.Activity" />.</returns>
      <param name="activity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> whose serialized form is requested.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetIsBlocked(System.Workflow.ComponentModel.Activity)">
      <summary>Indicates whether the given activity is blocked.</summary>
      <returns>true if the given activity is blocked; otherwise, false. </returns>
      <param name="rootActivity">The root activity of the workflow instance.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetSuspendOrTerminateInfo(System.Workflow.ComponentModel.Activity)">
      <summary>Retrieves the termination or suspend information of the given activity.</summary>
      <returns>A <see cref="T:System.String" /> that contains the termination or suspend information. </returns>
      <param name="rootActivity">The root activity of the workflow instance.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus(System.Workflow.ComponentModel.Activity)">
      <summary>Retrieves the status of the workflow.</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.WorkflowStatus" /> enumeration value that denotes the status of the workflow. </returns>
      <param name="rootActivity">The root activity of the workflow instance.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity(System.Guid,System.Workflow.ComponentModel.Activity)">
      <summary>When implemented in a derived class, loads the specified completed scope back into memory.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Activity" /> that represents the completed scope.</returns>
      <param name="scopeId">The <see cref="T:System.Guid" /> of the completed scope.</param>
      <param name="outerActivity">An <see cref="T:System.Workflow.ComponentModel.Activity" /> that represents the activity that encloses the completed scope.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState(System.Guid)">
      <summary>When implemented in a derived class, loads the specified state of the workflow instance back into memory.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Activity" /> that represents the root activity of the workflow instance.</returns>
      <param name="instanceId">The <see cref="T:System.Guid" /> of the root activity of the workflow instance.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.RestoreFromDefaultSerializedForm(System.Byte[],System.Workflow.ComponentModel.Activity)">
      <summary>Restores the <see cref="T:System.Workflow.ComponentModel.Activity" /> from its serialized form.</summary>
      <returns>The restored <see cref="T:System.Workflow.ComponentModel.Activity" />.</returns>
      <param name="activityBytes">The serialized form of <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
      <param name="outerActivity">The outer <see cref="T:System.Workflow.ComponentModel.Activity" />, containing the <see cref="T:System.Workflow.ComponentModel.Activity" /> to restore.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity(System.Workflow.ComponentModel.Activity)">
      <summary>When implemented in a derived class, saves the specified completed scope to a data store.</summary>
      <param name="activity">An <see cref="T:System.Workflow.ComponentModel.Activity" /> that represents the completed scope.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState(System.Workflow.ComponentModel.Activity,System.Boolean)">
      <summary>When implemented in a derived class, saves the workflow instance state to a data store.</summary>
      <param name="rootActivity">The root activity of the workflow instance.</param>
      <param name="unlock">true if the workflow instance should not be locked; false if the workflow instance should be locked.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnloadOnIdle(System.Workflow.ComponentModel.Activity)">
      <summary>Determines whether a workflow should be unloaded when idle. </summary>
      <returns>If true, the workflow runtime engine unloads the specified workflow when it becomes idle. </returns>
      <param name="activity">An <see cref="T:System.Workflow.ComponentModel.Activity" /> that represents the completed scope.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState(System.Workflow.ComponentModel.Activity)">
      <summary>When overridden in a derived class, unlocks the workflow instance state.</summary>
      <param name="rootActivity">The root activity of the workflow instance.</param>
    </member>
    <member name="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService">
      <summary>The abstract base class from which the workflow runtime engine core services are derived.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted">
      <summary>When overridden in a derived class, represents the method that will be called when the workflow runtime engine raises the <see cref="E:System.Workflow.Runtime.WorkflowRuntime.Started" /> event.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped">
      <summary>When overridden in a derived class, represents the method that will be called when the workflow runtime engine raises the <see cref="E:System.Workflow.Runtime.WorkflowRuntime.Stopped" /> event.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent(System.Exception,System.Guid)">
      <summary>Raises the <see cref="E:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled" /> event.</summary>
      <param name="exception">The exception that could not be handled.</param>
      <param name="instanceId">The <see cref="T:System.Guid" /> of the workflow instance associated with the unhandled exception.</param>
    </member>
    <member name="P:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime">
      <summary>Gets the <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> for this service.</summary>
      <returns>The <see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" />.</returns>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start">
      <summary>When overridden in a derived class, starts the service and changes the <see cref="P:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State" /> to <see cref="F:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Starting" />.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime" /> is a null reference (Nothing in Visual Basic)-or-The service has already been started.</exception>
    </member>
    <member name="P:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State">
      <summary>Gets the state of the <see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" />.</summary>
      <returns>One of the <see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState" /> values.</returns>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop">
      <summary>When overridden in a derived class, stops the service and changes the <see cref="P:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State" /> to <see cref="F:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopping" />.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime" /> is a null reference (Nothing in Visual Basic).-or-The service has not yet been started.</exception>
    </member>
    <member name="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState">
      <summary>Specifies the state of the <see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopped">
      <summary>Indicates that the <see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" /> has stopped.</summary>
    </member>
    <member name="F:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Starting">
      <summary>Indicates that the <see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" /> is starting. <see cref="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start" /> changes the state of the <see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" /> to <see cref="F:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Starting" />.</summary>
    </member>
    <member name="F:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Started">
      <summary>Indicates that the <see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" /> has started. </summary>
    </member>
    <member name="F:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopping">
      <summary>Indicates that the <see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" /> is stopping. <see cref="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop" /> changes the state of the <see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" /> to <see cref="F:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopping" />.</summary>
    </member>
    <member name="T:System.Workflow.Runtime.Hosting.WorkflowSchedulerService">
      <summary>Provides a mechanism to implement your own thread pool to execute the workflow and manage in-memory timer registration and events.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowSchedulerService.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.WorkflowSchedulerService" /> class. </summary>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowSchedulerService.Cancel(System.Guid)">
      <summary>When overridden in a derived class, cancels the scheduled work item with the given <paramref name="timerId" />.</summary>
      <param name="timerId">The <see cref="T:System.Guid" /> associated with the existing scheduled thread to cancel.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowSchedulerService.Schedule(System.Threading.WaitCallback,System.Guid)">
      <summary>When overridden in a derived class, this method is called by the runtime to schedule a work item (callback) for a particular instance ID.</summary>
      <param name="callback">A <see cref="T:System.Threading.WaitCallback" /> multicast delegate that represents the method to run.</param>
      <param name="workflowInstanceId">A <see cref="T:System.Guid" /> that represents the workflow instance.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowSchedulerService.Schedule(System.Threading.WaitCallback,System.Guid,System.DateTime,System.Guid)">
      <summary>When overridden in a derived class, this method is called by the runtime to schedule a work item (callback) for a particular workflow instance to be done at the given time (<see cref="T:System.DateTime" />).</summary>
      <param name="callback">A <see cref="T:System.Threading.WaitCallback" /> multicast delegate that represents the method to run.</param>
      <param name="workflowInstanceId">A <see cref="T:System.Guid" /> that represents the workflow instance to add.</param>
      <param name="whenUtc">The <see cref="T:System.DateTime" /> to begin running the workflow item.</param>
      <param name="timerId">A <see cref="T:System.Guid" /> that represents the scheduled timer.</param>
    </member>
    <member name="T:System.Workflow.Runtime.Hosting.WorkflowWebHostingModule">
      <summary>Provides a mechanism for routing the workflow instance ID to and from a <see cref="T:System.Workflow.Activities.WorkflowWebService" /> to a cookie in the Web client. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowWebHostingModule.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.WorkflowWebHostingModule" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowWebHostingModule.System#Web#IHttpModule#Dispose">
      <summary>Releases the resources used by the <see cref="T:System.Workflow.Runtime.Hosting.WorkflowWebHostingModule" />.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowWebHostingModule.System#Web#IHttpModule#Init(System.Web.HttpApplication)">
      <summary>Initializes the workflow Web hosting module and prepares the module to handle requests.</summary>
      <param name="application">An <see cref="T:System.Web.HttpApplication" /> that provides access to the methods, properties, and events common to all application objects within an ASP.NET application.</param>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.ActivityDataTrackingExtract">
      <summary>Specifies a property or a field to be extracted from an activity and sent to the tracking service together with an associated collection of annotations when a track point is matched.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.ActivityDataTrackingExtract.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.ActivityDataTrackingExtract" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.ActivityDataTrackingExtract.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.ActivityDataTrackingExtract" /> class by using the specified activity member name.</summary>
      <param name="member">The dot delineated name of the field or the property that should be extracted and sent to the tracking service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ActivityDataTrackingExtract.Annotations">
      <summary>Gets the collection of annotations associated with the extracted data.</summary>
      <returns>The <see cref="T:System.Workflow.Runtime.Tracking.TrackingAnnotationCollection" /> associated with the activity property or field to be extracted. The default is an empty collection.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ActivityDataTrackingExtract.Member">
      <summary>Gets or sets the field or the property to be extracted from the associated activity when a track point is matched.</summary>
      <returns>A dot delineated name that specifies a field or a property of the activity. The default is a null reference (Nothing in Visual Basic). </returns>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.ActivityTrackingCondition">
      <summary>Represents a condition that compares the value of an activity member to a specified value by using a specified comparison operator.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.ActivityTrackingCondition.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingCondition" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.ActivityTrackingCondition.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingCondition" /> class by specifying an activity member and a value for comparison.</summary>
      <param name="member">The dot delineated name of an activity member.</param>
      <param name="value">The value to be compared</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ActivityTrackingCondition.Member">
      <summary>Gets or sets the name of the activity member that is to be compared with <see cref="P:System.Workflow.Runtime.Tracking.ActivityTrackingCondition.Value" />.</summary>
      <returns>The dot delineated name of the activity member</returns>
      <exception cref="T:System.ArgumentNullException">The condition was evaluated and <see cref="P:System.Workflow.Runtime.Tracking.ActivityTrackingCondition.Member" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">The condition was evaluated and <see cref="P:System.Workflow.Runtime.Tracking.ActivityTrackingCondition.Member" /> is incorrectly formed.</exception>
      <exception cref="T:System.MissingMemberException">The condition was evaluated and <see cref="P:System.Workflow.Runtime.Tracking.ActivityTrackingCondition.Member" /> does not refer to a valid activity member.</exception>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ActivityTrackingCondition.Operator">
      <summary>Gets or sets the operator that is used in the comparison.</summary>
      <returns>One of the <see cref="T:System.Workflow.Runtime.Tracking.ComparisonOperator" /> values. The default is Equals.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ActivityTrackingCondition.Value">
      <summary>The value that is to be compared with <see cref="P:System.Workflow.Runtime.Tracking.ActivityTrackingCondition.Member" />.</summary>
      <returns>The value used in the comparison. </returns>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.ActivityTrackingLocation">
      <summary>Defines an activity-qualified location that corresponds to an activity status event in the potential execution path of a root workflow instance. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.ActivityTrackingLocation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingLocation" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.ActivityTrackingLocation.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingLocation" /> class by using the specified activity name.</summary>
      <param name="activityTypeName">The unqualified name of the common language runtime (CLR) type of an activity.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activityTypeName" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.ActivityTrackingLocation.#ctor(System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Workflow.ComponentModel.ActivityExecutionStatus})">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingLocation" /> class that has a reference activity type with the specified unqualified name, that specifies whether to match activities derived from the reference activity type, and that matches the specified activity execution status events.</summary>
      <param name="activityTypeName">The unqualified name of the common language runtime (CLR) type of an activity.</param>
      <param name="matchDerivedTypes">true if activities derived from the reference activity type should be matched; otherwise, false.</param>
      <param name="executionStatusEvents">A collection that contains one or more of the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> values.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activityTypeName" /> is a null reference (Nothing in Visual Basic)-or-<paramref name="executionStatusEvents" /> is a null reference (Nothing).</exception>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.ActivityTrackingLocation.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Workflow.ComponentModel.ActivityExecutionStatus})">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingLocation" /> class that has a reference activity type with the specified unqualified name and that matches the specified activity execution status events.</summary>
      <param name="activityTypeName">The unqualified name of the common language runtime (CLR) type of an activity.</param>
      <param name="executionStatusEvents">A collection that contains one or more of the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> values.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activityTypeName" /> is a null reference (Nothing in Visual Basic)-or-<paramref name="executionStatusEvents" /> is a null reference (Nothing).</exception>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.ActivityTrackingLocation.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingLocation" /> class by using the specified reference activity type.</summary>
      <param name="activityType">The <see cref="T:System.Type" /> of an activity.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activityType" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.ActivityTrackingLocation.#ctor(System.Type,System.Boolean,System.Collections.Generic.IEnumerable{System.Workflow.ComponentModel.ActivityExecutionStatus})">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingLocation" /> class that has the specified reference activity type, that specifies whether to match activities derived from the reference activity type, and that matches the specified activity execution status events.</summary>
      <param name="activityType">The <see cref="T:System.Type" /> of an activity.</param>
      <param name="matchDerivedTypes">true if activities derived from the reference activity type should be matched; otherwise, false.</param>
      <param name="executionStatusEvents">A collection that contains one or more of the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> values.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activityType" /> is a null reference (Nothing in Visual Basic).-or-<paramref name="executionStatusEvents" /> is a null reference (Nothing).</exception>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.ActivityTrackingLocation.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Workflow.ComponentModel.ActivityExecutionStatus})">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingLocation" /> class that has the specified reference activity type and matches the specified activity execution status events.</summary>
      <param name="activityType">The <see cref="T:System.Type" /> of an activity.</param>
      <param name="executionStatusEvents">A collection that contains one or more of the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> values.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activityType" /> is a null reference (Nothing in Visual Basic).-or-<paramref name="executionStatusEvents" /> is a null reference (Nothing).</exception>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ActivityTrackingLocation.ActivityType">
      <summary>Gets or sets the common language runtime (CLR) type of the reference activity to be matched.</summary>
      <returns>The <see cref="T:System.Type" /> of the activity.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ActivityTrackingLocation.ActivityTypeName">
      <summary>Gets or sets the unqualified name of the reference activity type for the location.</summary>
      <returns>The unqualified name of the reference activity type.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ActivityTrackingLocation.Conditions">
      <summary>Gets a collection of conditions that are used to qualify interest in the activity.</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.Tracking.TrackingConditionCollection" /> that contains conditions that are used to qualify interest in the activity. The default is an empty collection.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ActivityTrackingLocation.ExecutionStatusEvents">
      <summary>Gets the list of activity status events that can be matched for this location.</summary>
      <returns>A <see cref="T:System.Collections.Generic.IList`1" /> that contains one or more of the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> values. The default is an empty list.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ActivityTrackingLocation.MatchDerivedTypes">
      <summary>Gets or sets a value that indicates whether activities derived from the reference activity type should be matched.</summary>
      <returns>true if activities derived from the reference activity type of the location should be matched; otherwise, false. The default is false.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.ActivityTrackingLocationCollection">
      <summary>Contains a collection of <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingLocation" /> objects.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.ActivityTrackingLocationCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingLocationCollection" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.ActivityTrackingLocationCollection.#ctor(System.Collections.Generic.IEnumerable{System.Workflow.Runtime.Tracking.ActivityTrackingLocation})">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingLocationCollection" /> class by using a list of activity locations.</summary>
      <param name="locations">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> list of <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingLocation" /> objects.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="locations" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.ActivityTrackingRecord">
      <summary>Contains the data sent to a tracking service by the runtime tracking infrastructure when an <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackPoint" /> is matched. It is also used in the return list of the <see cref="P:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance.ActivityEvents" /> property.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.ActivityTrackingRecord.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingRecord" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.ActivityTrackingRecord.#ctor(System.Type,System.String,System.Guid,System.Guid,System.Workflow.ComponentModel.ActivityExecutionStatus,System.DateTime,System.Int32,System.EventArgs)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingRecord" /> class by using the specified parameters.</summary>
      <param name="activityType">The <see cref="T:System.Type" /> of the activity associated with the activity status event.</param>
      <param name="qualifiedName">The <see cref="P:System.Workflow.ComponentModel.Activity.QualifiedName" /> of the activity associated with the activity status event.</param>
      <param name="contextGuid">The <see cref="T:System.Guid" /> that identifies the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> of the activity associated with the activity status event.</param>
      <param name="parentContextGuid">The <see cref="T:System.Guid" /> that identifies the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> of the parent activity of the activity associated with the activity status event.</param>
      <param name="executionStatus">One of the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> values.</param>
      <param name="eventDateTime">A <see cref="T:System.DateTime" /> that indicates the date and time of the activity status event associated with the tracking record.</param>
      <param name="eventOrder">The relative order in which the activity status event associated with this tracking record occurred in the workflow instance.</param>
      <param name="eventArgs">A null reference (Nothing in Visual Basic). This field is not set for an <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingRecord" />.</param>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ActivityTrackingRecord.ActivityType">
      <summary>Gets or sets the common language runtime (CLR) type of the activity associated with this <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingRecord" />.</summary>
      <returns>The <see cref="T:System.Type" /> of the activity for which this <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingRecord" /> was created.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ActivityTrackingRecord.Annotations">
      <summary>Gets the collection of annotations associated with the <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackPoint" /> that was matched.</summary>
      <returns>An <see cref="T:System.Workflow.Runtime.Tracking.TrackingAnnotationCollection" /> that contains the annotations that are associated with the <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackPoint" /> that corresponds to this tracking record.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ActivityTrackingRecord.Body">
      <summary>Gets a list that contains any data extracted from the workflow for the <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackPoint" /> that was matched.</summary>
      <returns>A list of <see cref="T:System.Workflow.Runtime.Tracking.TrackingDataItem" /> objects each of which contains a single piece of extracted data and its associated annotations.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ActivityTrackingRecord.ContextGuid">
      <summary>Context of the activity.</summary>
      <returns>
        <see cref="T:System.Guid" /> that identifies the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> of the activity associated with the activity status event.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ActivityTrackingRecord.EventArgs">
      <summary>Always null for an <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingRecord" />.</summary>
      <returns>A null reference (Nothing) for an <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingRecord" />.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ActivityTrackingRecord.EventDateTime">
      <summary>Gets or sets the date and time that the activity status event occurred.</summary>
      <returns>A <see cref="T:System.DateTime" /> value.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ActivityTrackingRecord.EventOrder">
      <summary>Gets or sets a value that indicates the order in the workflow instance of the activity status event that matched the <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackPoint" />.</summary>
      <returns>A value that indicates the order of the activity status event in the workflow instance.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ActivityTrackingRecord.ExecutionStatus">
      <summary>Gets or sets the execution status of the activity associated with this <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingRecord" />. </summary>
      <returns>One of the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> values.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ActivityTrackingRecord.ParentContextGuid">
      <summary>Context of the parent activity.</summary>
      <returns>
        <see cref="T:System.Guid" /> that identifies the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> of the activity associated with the activity status event.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ActivityTrackingRecord.QualifiedName">
      <summary>Gets or sets the identifier of the activity associated with this <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingRecord" />.</summary>
      <returns>The <see cref="P:System.Workflow.ComponentModel.Activity.QualifiedName" /> of the <see cref="T:System.Workflow.ComponentModel.Activity" /> for which this tracking record was created.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.ActivityTrackPoint">
      <summary>Defines a point, associated with an activity execution status change, to be tracked that is in the potential execution path of a workflow instance. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.ActivityTrackPoint.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackPoint" /> class.</summary>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ActivityTrackPoint.Annotations">
      <summary>Gets the collection of annotations associated with the track point.</summary>
      <returns>An <see cref="T:System.Workflow.Runtime.Tracking.TrackingAnnotationCollection" />. The default is an empty collection.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ActivityTrackPoint.ExcludedLocations">
      <summary>Gets the collection of locations that should be excluded from the track point by the runtime tracking infrastructure.</summary>
      <returns>An <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingLocationCollection" /> that specifies locations to be excluded from the track point. The default is an empty collection.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ActivityTrackPoint.Extracts">
      <summary>Gets a collection that specifies data to be extracted from the workflow instance and sent to the tracking service.</summary>
      <returns>An <see cref="T:System.Workflow.Runtime.Tracking.ExtractCollection" /> that specifies the data to be extracted and sent to the tracking service. The default is an empty collection. </returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ActivityTrackPoint.MatchingLocations">
      <summary>Gets the collection of locations that should be included in matching for the track point by the runtime tracking infrastructure.</summary>
      <returns>An <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingLocationCollection" /> that specifies the locations to be matched for the track point. The default is an empty collection. </returns>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.ActivityTrackPointCollection">
      <summary>Contains a collection of <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackPoint" /> objects.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.ActivityTrackPointCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackPointCollection" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.ActivityTrackPointCollection.#ctor(System.Collections.Generic.IEnumerable{System.Workflow.Runtime.Tracking.ActivityTrackPoint})">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackPointCollection" /> class by using a list of activity track points.</summary>
      <param name="points">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> list of <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackPoint" /> objects.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="points" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.ComparisonOperator">
      <summary>Specifies the operation to perform on the operands of a comparison. </summary>
    </member>
    <member name="F:System.Workflow.Runtime.Tracking.ComparisonOperator.Equals">
      <summary>Test for operand equality.</summary>
    </member>
    <member name="F:System.Workflow.Runtime.Tracking.ComparisonOperator.NotEquals">
      <summary>Test for operand inequality.</summary>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.ExtractCollection">
      <summary>Contains a collection of <see cref="T:System.Workflow.Runtime.Tracking.TrackingExtract" /> objects. </summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.ExtractCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.ExtractCollection" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.ExtractCollection.#ctor(System.Collections.Generic.IEnumerable{System.Workflow.Runtime.Tracking.TrackingExtract})">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.ExtractCollection" /> class by using a list of <see cref="T:System.Workflow.Runtime.Tracking.TrackingExtract" /> objects.</summary>
      <param name="extracts">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> list of <see cref="T:System.Workflow.Runtime.Tracking.TrackingExtract" /> objects.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="extracts" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.IProfileNotification">
      <summary>Provides a notification mechanism for a tracking service to inform the runtime tracking infrastructure about changes to the <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" /> for a particular workflow <see cref="T:System.Type" />. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Workflow.Runtime.Tracking.IProfileNotification.ProfileRemoved">
      <summary>Occurs when a <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" /> for a specific workflow Type is removed.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Workflow.Runtime.Tracking.IProfileNotification.ProfileUpdated">
      <summary>Occurs when a <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" /> for a specific workflow <see cref="T:System.Type" /> is updated.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.PreviousTrackingServiceAttribute">
      <summary>Indicates the type of the <see cref="T:System.Workflow.Runtime.Tracking.TrackingService" /> that was used prior to the current version.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.PreviousTrackingServiceAttribute.#ctor(System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.PreviousTrackingServiceAttribute" /> class.</summary>
      <param name="assemblyQualifiedName">A <see cref="T:System.String" /> that contains a fully qualified assembly name that identifies the previous version of the tracking service.</param>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.PreviousTrackingServiceAttribute.AssemblyQualifiedName">
      <summary>Gets the fully qualified assembly name of the previous version tracking service that this version replaces.</summary>
      <returns>A <see cref="T:System.String" /> containing the fully qualified assembly name.</returns>
    </member>
    <member name="T:System.Workflow.Ru